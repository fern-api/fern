{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "AddAcsUserUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "AddAcsUserUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "AddToAccessGroupUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "AddToAccessGroupUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "AddUserAccessGroupsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "AddUserAccessGroupsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "AssignCredentialsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "AssignCredentialsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ConnectSimulateRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ConnectSimulateRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ConvertToManagedUnmanagedRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ConvertToManagedUnmanagedRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CoolThermostatsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CoolThermostatsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateAccessCodesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateAccessCodesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateClientSessionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateClientSessionsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateClimateSettingSchedulesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateClimateSettingSchedulesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateConnectWebviewsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateConnectWebviewsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateCredentialsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateCredentialsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateMultipleAccessCodesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateMultipleAccessCodesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateNoiseThresholdsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateNoiseThresholdsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateSandboxPhoneSimulateRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateSandboxPhoneSimulateRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateUnmanagedAccessCodeSimulateRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateUnmanagedAccessCodeSimulateRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateWebhooksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateWebhooksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "CreateWorkspacesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateWorkspacesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeactivatePhonesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeactivatePhonesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteAccessCodesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteAccessCodesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteClientSessionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteClientSessionsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteClimateSettingSchedulesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteClimateSettingSchedulesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteConnectWebviewsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteConnectWebviewsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteConnectedAccountsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteConnectedAccountsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteCredentialsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteCredentialsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteDevicesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteDevicesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteEnrollmentAutomationsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteEnrollmentAutomationsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteNoiseThresholdsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteNoiseThresholdsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteUnmanagedRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteUnmanagedRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DeleteWebhooksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DeleteWebhooksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "DisconnectSimulateRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "DisconnectSimulateRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GenerateCodeAccessCodesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GenerateCodeAccessCodesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetAccessCodesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetAccessCodesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetAccessGroupsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetAccessGroupsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetActionAttemptsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetActionAttemptsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetClientSessionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetClientSessionsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetClimateSettingSchedulesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetClimateSettingSchedulesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetConnectWebviewsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetConnectWebviewsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetConnectedAccountsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetConnectedAccountsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetCredentialsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetCredentialsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetDevicesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetDevicesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetEnrollmentAutomationsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetEnrollmentAutomationsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetEntrancesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetEntrancesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetEventsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetEventsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetLocksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetLocksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetNetworksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetNetworksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetNoiseThresholdsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetNoiseThresholdsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetOrCreateClientSessionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetOrCreateClientSessionsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetSystemsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetSystemsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetThermostatsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetThermostatsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetUnmanagedRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetUnmanagedRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetWebhooksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetWebhooksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GetWorkspacesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GetWorkspacesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GrantAccessClientSessionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GrantAccessClientSessionsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GrantAccessEntrancesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GrantAccessEntrancesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "GrantAccessToDeviceUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "GrantAccessToDeviceUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "HeatCoolThermostatsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "HeatCoolThermostatsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "HeatThermostatsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "HeatThermostatsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "LaunchCredentialProvisioningAutomationsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "LaunchCredentialProvisioningAutomationsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "LaunchEnrollmentAutomationsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "LaunchEnrollmentAutomationsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListAccessCodesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListAccessCodesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListAccessGroupsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListAccessGroupsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListAccessibleDevicesUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListAccessibleDevicesUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListAccessibleEntrancesCredentialsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListAccessibleEntrancesCredentialsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListAccessibleEntrancesUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListAccessibleEntrancesUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListAcsSystemsUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListAcsSystemsUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListAcsUsersUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListAcsUsersUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListActionAttemptsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListActionAttemptsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListClientSessionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListClientSessionsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListClimateSettingSchedulesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListClimateSettingSchedulesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListCompatibleCredentialManagerAcsSystemsSystemsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListCompatibleCredentialManagerAcsSystemsSystemsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListConnectWebviewsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListConnectWebviewsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListConnectedAccountsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListConnectedAccountsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListCredentialPoolsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListCredentialPoolsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListCredentialsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListCredentialsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListCredentialsWithAccessEntrancesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListCredentialsWithAccessEntrancesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListDeviceProvidersDevicesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListDeviceProvidersDevicesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListDevicesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListDevicesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListEnrollmentAutomationsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListEnrollmentAutomationsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListEntrancesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListEntrancesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListEventsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListEventsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListLocksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListLocksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListNetworksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListNetworksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListNoiseThresholdsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListNoiseThresholdsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListPhonesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListPhonesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListSystemsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListSystemsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListThermostatsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListThermostatsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListUnmanagedRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUnmanagedRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListUsersAccessGroupsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUsersAccessGroupsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListWebhooksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListWebhooksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ListWorkspacesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListWorkspacesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "LockDoorLocksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "LockDoorLocksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "OffThermostatsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "OffThermostatsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "PullBackupAccessCodeAccessCodesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "PullBackupAccessCodeAccessCodesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "RemoveAcsUserUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "RemoveAcsUserUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "RemoveFromAccessGroupUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "RemoveFromAccessGroupUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "RemoveSimulateRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "RemoveSimulateRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "RemoveUserAccessGroupsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "RemoveUserAccessGroupsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "ResetSandboxWorkspacesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ResetSandboxWorkspacesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "RevokeAccessToAllEntrancesUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "RevokeAccessToAllEntrancesUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "RevokeAccessToDeviceUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "RevokeAccessToDeviceUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "RevokeClientSessionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "RevokeClientSessionsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "SetFanModeThermostatsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "SetFanModeThermostatsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "SuspendUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "SuspendUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "TriggerNoiseThresholdSimulateRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "TriggerNoiseThresholdSimulateRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UnassignCredentialsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UnassignCredentialsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UnlockDoorLocksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UnlockDoorLocksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UnsuspendUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UnsuspendUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateAccessCodesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateAccessCodesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateClimateSettingSchedulesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateClimateSettingSchedulesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateConnectedAccountsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateConnectedAccountsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateCredentialsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateCredentialsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateDevicesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateDevicesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateNoiseThresholdsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateNoiseThresholdsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateThermostatsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateThermostatsRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateUnmanagedRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateUnmanagedRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateUserIdentitiesRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateUserIdentitiesRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateUsersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateUsersRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
          "UpdateWebhooksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UpdateWebhooksRequestUnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
        },
        "types": {
          "AccessCode": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_code_id": {
                "docs": "Unique identifier for the access code.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "code": {
                "docs": "Code used for access. Typically, a numeric or alphanumeric string.",
                "type": "optional<nullable<string>>",
              },
              "common_code_key": {
                "docs": "Unique identifier for a group of access codes that share the same code.",
                "type": "optional<nullable<string>>",
              },
              "created_at": {
                "docs": "Date and time at which the access code was created.",
                "type": "datetime",
              },
              "device_id": {
                "docs": "Unique identifier for the device associated with the access code.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "ends_at": {
                "docs": "Date and time after which the time-bound access code becomes inactive.",
                "type": "optional<nullable<datetime>>",
              },
              "errors": "optional<unknown>",
              "is_backup": {
                "docs": "Indicates whether the access code is a backup code.",
                "type": "optional<boolean>",
              },
              "is_backup_access_code_available": {
                "docs": "Indicates whether a backup access code is available for use if the primary access code is lost or compromised.",
                "type": "boolean",
              },
              "is_external_modification_allowed": {
                "docs": "Indicates whether changes to the access code from external sources are permitted.",
                "type": "boolean",
              },
              "is_managed": {
                "docs": "Indicates whether Seam manages the access code.",
                "type": "boolean",
              },
              "is_offline_access_code": {
                "docs": "Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection.",
                "type": "boolean",
              },
              "is_one_time_use": {
                "docs": "Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use.",
                "type": "boolean",
              },
              "is_scheduled_on_device": {
                "docs": "Indicates whether the code is set on the device according to a preconfigured schedule.",
                "type": "optional<boolean>",
              },
              "is_waiting_for_code_assignment": {
                "docs": "Indicates whether the access code is waiting for a code assignment.",
                "type": "optional<boolean>",
              },
              "name": {
                "docs": "Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.",
                "type": "optional<nullable<string>>",
              },
              "pulled_backup_access_code_id": {
                "docs": "Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code.",
                "type": "optional<nullable<string>>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "starts_at": {
                "docs": "Date and time at which the time-bound access code becomes active.",
                "type": "optional<nullable<datetime>>",
              },
              "status": {
                "docs": "
    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
  ",
                "type": "AccessCodeStatus",
              },
              "type": {
                "docs": "Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.",
                "type": "AccessCodeType",
              },
              "warnings": "optional<unknown>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodeStatus": {
            "docs": "
    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
  ",
            "enum": [
              "setting",
              "set",
              "unset",
              "removing",
              "unknown",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodeType": {
            "docs": "Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.",
            "enum": [
              "time_bound",
              "ongoing",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsAccessGroup": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_group_type": {
                "docs": "
    ---
    deprecated: use external_type
    ---
  ",
                "type": "AcsAccessGroupAccessGroupType",
              },
              "access_group_type_display_name": {
                "docs": "
    ---
    deprecated: use external_type_display_name
    ---
    ",
                "type": "string",
              },
              "acs_access_group_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "display_name": "string",
              "external_type": "AcsAccessGroupExternalType",
              "external_type_display_name": "string",
              "name": "string",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsAccessGroupAccessGroupType": {
            "docs": "
    ---
    deprecated: use external_type
    ---
  ",
            "enum": [
              "pti_unit",
              "pti_access_level",
              "salto_access_group",
              "brivo_group",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsAccessGroupExternalType": {
            "enum": [
              "pti_unit",
              "pti_access_level",
              "salto_access_group",
              "brivo_group",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredential": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_method": "AcsCredentialAccessMethod",
              "acs_credential_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_credential_pool_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_user_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "code": "optional<nullable<string>>",
              "created_at": "datetime",
              "display_name": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ends_at": "optional<string>",
              "errors": "list<AcsCredentialErrorsItem>",
              "external_type": "optional<AcsCredentialExternalType>",
              "external_type_display_name": "optional<string>",
              "is_latest_desired_state_synced_with_provider": "optional<boolean>",
              "is_multi_phone_sync_credential": "optional<boolean>",
              "latest_desired_state_synced_with_provider_at": "optional<datetime>",
              "parent_acs_credential_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "starts_at": "optional<string>",
              "visionline_metadata": "optional<AcsCredentialVisionlineMetadata>",
              "warnings": "list<AcsCredentialWarningsItem>",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialAccessMethod": {
            "enum": [
              "code",
              "card",
              "mobile_key",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialErrorsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialExternalType": {
            "enum": [
              "pti_card",
              "brivo_credential",
              "hid_credential",
              "visionline_card",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialPool": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential_pool_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "display_name": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "external_type": "literal<"hid_part_number">",
              "external_type_display_name": "string",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialProvisioningAutomation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential_provisioning_automation_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "credential_manager_acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialVisionlineMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "card_function_type": "AcsCredentialVisionlineMetadataCardFunctionType",
              "common_acs_entrance_ids": "optional<list<string>>",
              "guest_acs_entrance_ids": "optional<list<string>>",
              "joiner_acs_credential_ids": "optional<list<string>>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialVisionlineMetadataCardFunctionType": {
            "enum": [
              "guest",
              "staff",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialWarningsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "warning_code": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntrance": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_entrance_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "display_name": "string",
              "errors": "list<AcsEntranceErrorsItem>",
              "latch_metadata": "optional<AcsEntranceLatchMetadata>",
              "visionline_metadata": "optional<AcsEntranceVisionlineMetadata>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceErrorsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceLatchMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "accessibility_type": "string",
              "door_name": "string",
              "door_type": "string",
              "is_connected": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceVisionlineMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "door_category": "AcsEntranceVisionlineMetadataDoorCategory",
              "door_name": "string",
              "profiles": "optional<list<AcsEntranceVisionlineMetadataProfilesItem>>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceVisionlineMetadataDoorCategory": {
            "enum": [
              "entrance",
              "guest",
              {
                "name": "ElevatorReader",
                "value": "elevator reader",
              },
              "common",
              {
                "name": "CommonPms",
                "value": "common (PMS)",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceVisionlineMetadataProfilesItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "visionline_door_profile_id": "string",
              "visionline_door_profile_type": "AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType": {
            "enum": [
              "BLE",
              "commonDoor",
              "touch",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystem": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "can_add_acs_users_to_acs_access_groups": "optional<boolean>",
              "can_automate_enrollment": "optional<boolean>",
              "can_create_acs_access_groups": "optional<boolean>",
              "can_remove_acs_users_from_acs_access_groups": "optional<boolean>",
              "connected_account_ids": "list<string>",
              "created_at": "datetime",
              "errors": "list<AcsSystemErrorsItem>",
              "external_type": "optional<AcsSystemExternalType>",
              "external_type_display_name": "optional<string>",
              "image_alt_text": "string",
              "image_url": "string",
              "name": "string",
              "system_type": {
                "docs": "
      ---
      deprecated: use external_type
      ---
      ",
                "type": "optional<AcsSystemSystemType>",
              },
              "system_type_display_name": {
                "docs": "
      ---
      deprecated: use external_type_display_name
      ---
      ",
                "type": "optional<string>",
              },
              "warnings": "list<AcsSystemWarningsItem>",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemErrorsItem": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "error_code",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": {
              "seam_bridge_disconnected": "AcsSystemErrorsItemSeamBridgeDisconnected",
              "visionline_instance_unreachable": "AcsSystemErrorsItemVisionlineInstanceUnreachable",
            },
          },
          "AcsSystemErrorsItemSeamBridgeDisconnected": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "created_at": "datetime",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemErrorsItemVisionlineInstanceUnreachable": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "created_at": "datetime",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemExternalType": {
            "enum": [
              "pti_site",
              "alta_org",
              "salto_site",
              "brivo_account",
              "hid_credential_manager_organization",
              "visionline_system",
              "assa_abloy_credential_service",
              "latch_building",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemSystemType": {
            "docs": "
      ---
      deprecated: use external_type
      ---
      ",
            "enum": [
              "pti_site",
              "alta_org",
              "salto_site",
              "brivo_account",
              "hid_credential_manager_organization",
              "visionline_system",
              "assa_abloy_credential_service",
              "latch_building",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemWarningsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsUser": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_schedule": "optional<AcsUserAccessSchedule>",
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_user_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "display_name": "string",
              "email": {
                "docs": "
    ---
    deprecated: use email_address.
    ---
    ",
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "email_address": {
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "external_type": "optional<AcsUserExternalType>",
              "external_type_display_name": "optional<string>",
              "full_name": "optional<string>",
              "hid_acs_system_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "is_suspended": "boolean",
              "phone_number": "optional<nullable<string>>",
              "user_identity_email_address": "optional<nullable<string>>",
              "user_identity_full_name": "optional<nullable<string>>",
              "user_identity_id": "optional<string>",
              "user_identity_phone_number": "optional<nullable<string>>",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsUserAccessSchedule": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "ends_at": "datetime",
              "starts_at": "datetime",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsUserExternalType": {
            "enum": [
              "pti_user",
              "brivo_user",
              "hid_credential_manager_user",
              "salto_site_user",
              "latch_user",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttempt": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "docs": "Locking door.",
                "type": "ActionAttemptZero",
              },
              {
                "docs": "Locking door succeeded.",
                "type": "ActionAttemptOne",
              },
              {
                "docs": "Locking door failed.",
                "type": "ActionAttemptTwo",
              },
              {
                "docs": "Unlocking door.",
                "type": "ActionAttemptThree",
              },
              {
                "docs": "Unlocking door succeeded.",
                "type": "ActionAttemptFour",
              },
              {
                "docs": "Unlocking door failed.",
                "type": "ActionAttemptFive",
              },
              {
                "docs": "Resetting sandbox workspace.",
                "type": "ActionAttemptSix",
              },
              {
                "docs": "Resetting sandbox workspace succeeded.",
                "type": "ActionAttemptSeven",
              },
              {
                "docs": "Resetting sandbox workspace failed.",
                "type": "ActionAttemptEight",
              },
              {
                "docs": "Setting HVAC to cool.",
                "type": "ActionAttemptNine",
              },
              {
                "docs": "Setting HVAC to cool succeeded.",
                "type": "ActionAttemptTen",
              },
              {
                "docs": "Setting HVAC to cool failed.",
                "type": "ActionAttemptEleven",
              },
              {
                "docs": "Setting HVAC to heat mode.",
                "type": "ActionAttemptTwelve",
              },
              {
                "docs": "Setting HVAC to heat mode succeeded.",
                "type": "ActionAttemptThirteen",
              },
              {
                "docs": "Setting HVAC to heat mode failed.",
                "type": "ActionAttemptFourteen",
              },
              {
                "docs": "Setting HVAC to heat-cool mode.",
                "type": "ActionAttemptFifteen",
              },
              {
                "docs": "Setting HVAC to heat-cool mode succeeded.",
                "type": "ActionAttemptSixteen",
              },
              {
                "docs": "Setting heat-cool mode failed.",
                "type": "ActionAttemptSeventeen",
              },
              {
                "docs": "Setting fan mode.",
                "type": "ActionAttemptEighteen",
              },
              {
                "docs": "Setting fan mode succeeded.",
                "type": "ActionAttemptNineteen",
              },
              {
                "docs": "Setting fan mode failed.",
                "type": "ActionAttemptTwenty",
              },
              {
                "docs": "Turning HVAC off.",
                "type": "ActionAttemptTwentyOne",
              },
              {
                "docs": "Turning HVAC off succeeded.",
                "type": "ActionAttemptTwentyTwo",
              },
              {
                "docs": "Turning HVAC off failed.",
                "type": "ActionAttemptTwentyThree",
              },
              "ActionAttemptTwentyFour",
              "ActionAttemptTwentyFive",
              "ActionAttemptTwentySix",
              "ActionAttemptTwentySeven",
              "ActionAttemptTwentyEight",
              "ActionAttemptTwentyNine",
              "ActionAttemptThirty",
              "ActionAttemptThirtyOne",
              "ActionAttemptThirtyTwo",
              "ActionAttemptThirtyThree",
              "ActionAttemptThirtyFour",
              "ActionAttemptThirtyFive",
              "ActionAttemptThirtySix",
              "ActionAttemptThirtySeven",
              "ActionAttemptThirtyEight",
              "ActionAttemptThirtyNine",
              "ActionAttemptForty",
              "ActionAttemptFortyOne",
              "ActionAttemptFortyTwo",
              "ActionAttemptFortyThree",
              "ActionAttemptActionAttemptId",
            ],
          },
          "ActionAttemptActionAttemptId": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_NOISE_THRESHOLD">",
              "error": "ActionAttemptActionAttemptIdError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptActionAttemptIdError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptEight": {
            "docs": "Resetting sandbox workspace failed.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"RESET_SANDBOX_WORKSPACE">",
              "error": "ActionAttemptEightError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptEightError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptEighteen": {
            "docs": "Setting fan mode.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_FAN_MODE">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptEleven": {
            "docs": "Setting HVAC to cool failed.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_COOL">",
              "error": "ActionAttemptElevenError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptElevenError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFifteen": {
            "docs": "Setting HVAC to heat-cool mode.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT_COOL">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFive": {
            "docs": "Unlocking door failed.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UNLOCK_DOOR">",
              "error": "ActionAttemptFiveError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFiveError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptForty": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_NOISE_THRESHOLD">",
              "error": "optional<nullable<string>>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFortyOne": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_NOISE_THRESHOLD">",
              "error": "ActionAttemptFortyOneError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFortyOneError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFortyThree": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_NOISE_THRESHOLD">",
              "error": "optional<nullable<string>>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFortyTwo": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_NOISE_THRESHOLD">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFour": {
            "docs": "Unlocking door succeeded.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UNLOCK_DOOR">",
              "error": "optional<nullable<string>>",
              "result": "ActionAttemptFourResult",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFourResult": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFourteen": {
            "docs": "Setting HVAC to heat mode failed.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT">",
              "error": "ActionAttemptFourteenError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFourteenError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptNine": {
            "docs": "Setting HVAC to cool.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_COOL">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptNineteen": {
            "docs": "Setting fan mode succeeded.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_FAN_MODE">",
              "error": "optional<nullable<string>>",
              "result": "ActionAttemptNineteenResult",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptNineteenResult": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptOne": {
            "docs": "Locking door succeeded.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"LOCK_DOOR">",
              "error": "optional<nullable<string>>",
              "result": "ActionAttemptOneResult",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptOneResult": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSeven": {
            "docs": "Resetting sandbox workspace succeeded.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"RESET_SANDBOX_WORKSPACE">",
              "error": "optional<nullable<string>>",
              "result": "ActionAttemptSevenResult",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSevenResult": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSeventeen": {
            "docs": "Setting heat-cool mode failed.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT_COOL">",
              "error": "ActionAttemptSeventeenError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSeventeenError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSix": {
            "docs": "Resetting sandbox workspace.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"RESET_SANDBOX_WORKSPACE">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSixteen": {
            "docs": "Setting HVAC to heat-cool mode succeeded.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT_COOL">",
              "error": "optional<nullable<string>>",
              "result": "ActionAttemptSixteenResult",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSixteenResult": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTen": {
            "docs": "Setting HVAC to cool succeeded.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_COOL">",
              "error": "optional<nullable<string>>",
              "result": "ActionAttemptTenResult",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTenResult": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirteen": {
            "docs": "Setting HVAC to heat mode succeeded.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT">",
              "error": "optional<nullable<string>>",
              "result": "ActionAttemptThirteenResult",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirteenResult": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirty": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_ACCESS_CODE">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyEight": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_NOISE_THRESHOLD">",
              "error": "ActionAttemptThirtyEightError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyEightError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyFive": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_ACCESS_CODE">",
              "error": "ActionAttemptThirtyFiveError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyFiveError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyFour": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_ACCESS_CODE">",
              "error": "optional<nullable<string>>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyNine": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_NOISE_THRESHOLD">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyOne": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_ACCESS_CODE">",
              "error": "optional<nullable<string>>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtySeven": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_NOISE_THRESHOLD">",
              "error": "optional<nullable<string>>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtySix": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_NOISE_THRESHOLD">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyThree": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_ACCESS_CODE">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyTwo": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_ACCESS_CODE">",
              "error": "ActionAttemptThirtyTwoError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyTwoError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThree": {
            "docs": "Unlocking door.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UNLOCK_DOOR">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwelve": {
            "docs": "Setting HVAC to heat mode.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwenty": {
            "docs": "Setting fan mode failed.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_FAN_MODE">",
              "error": "ActionAttemptTwentyError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyEight": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_ACCESS_CODE">",
              "error": "optional<nullable<string>>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyFive": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SYNC_ACCESS_CODES">",
              "error": "optional<nullable<string>>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyFour": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SYNC_ACCESS_CODES">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyNine": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_ACCESS_CODE">",
              "error": "ActionAttemptTwentyNineError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyNineError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyOne": {
            "docs": "Turning HVAC off.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_THERMOSTAT_OFF">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentySeven": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_ACCESS_CODE">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentySix": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SYNC_ACCESS_CODES">",
              "error": "ActionAttemptTwentySixError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentySixError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyThree": {
            "docs": "Turning HVAC off failed.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_THERMOSTAT_OFF">",
              "error": "ActionAttemptTwentyThreeError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyThreeError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyTwo": {
            "docs": "Turning HVAC off succeeded.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_THERMOSTAT_OFF">",
              "error": "optional<nullable<string>>",
              "result": "ActionAttemptTwentyTwoResult",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyTwoResult": {
            "docs": undefined,
            "inline": true,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwo": {
            "docs": "Locking door failed.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"LOCK_DOOR">",
              "error": "ActionAttemptTwoError",
              "result": "optional<nullable<string>>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwoError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptZero": {
            "docs": "Locking door.",
            "inline": true,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"LOCK_DOOR">",
              "error": "optional<nullable<string>>",
              "result": "optional<nullable<string>>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientSession": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_session_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "connect_webview_ids": "list<string>",
              "connected_account_ids": "list<string>",
              "created_at": "datetime",
              "device_count": "double",
              "token": "string",
              "user_identifier_key": "optional<nullable<string>>",
              "user_identity_ids": "list<string>",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingSchedule": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "automatic_cooling_enabled": "optional<boolean>",
              "automatic_heating_enabled": "optional<boolean>",
              "climate_setting_schedule_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "cooling_set_point_celsius": "optional<double>",
              "cooling_set_point_fahrenheit": "optional<double>",
              "created_at": "datetime",
              "device_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "errors": "optional<unknown>",
              "heating_set_point_celsius": "optional<double>",
              "heating_set_point_fahrenheit": "optional<double>",
              "hvac_mode_setting": "optional<ClimateSettingScheduleHvacModeSetting>",
              "manual_override_allowed": "optional<boolean>",
              "name": "optional<string>",
              "schedule_ends_at": "string",
              "schedule_starts_at": "string",
              "schedule_type": "literal<"time_bound">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingScheduleHvacModeSetting": {
            "enum": [
              "off",
              "heat",
              "cool",
              "heat_cool",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebview": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accepted_devices": {
                "docs": "
      ---
      deprecated: Unused. Will be removed.
      ---
      ",
                "type": "list<string>",
              },
              "accepted_providers": "list<string>",
              "any_device_allowed": {
                "docs": "
      ---
      deprecated: Unused. Will be removed.
      ---
      ",
                "type": "boolean",
              },
              "any_provider_allowed": "boolean",
              "authorized_at": "optional<nullable<datetime>>",
              "automatically_manage_new_devices": "boolean",
              "connect_webview_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "connected_account_id": {
                "type": "optional<nullable<string>>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "custom_metadata": "map<string, ConnectWebviewCustomMetadataValue>",
              "custom_redirect_failure_url": {
                "type": "optional<nullable<string>>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "custom_redirect_url": {
                "type": "optional<nullable<string>>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "device_selection_mode": "ConnectWebviewDeviceSelectionMode",
              "login_successful": "boolean",
              "selected_provider": "optional<nullable<string>>",
              "status": "ConnectWebviewStatus",
              "url": {
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "wait_for_device_creation": "boolean",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ConnectWebviewDeviceSelectionMode": {
            "enum": [
              "none",
              "single",
              "multiple",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewStatus": {
            "enum": [
              "pending",
              "failed",
              "authorized",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccount": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_type": "optional<string>",
              "account_type_display_name": "string",
              "automatically_manage_new_devices": "boolean",
              "connected_account_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "optional<datetime>",
              "custom_metadata": "map<string, ConnectedAccountCustomMetadataValue>",
              "errors": "optional<unknown>",
              "user_identifier": "optional<ConnectedAccountUserIdentifier>",
              "warnings": "optional<unknown>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccountCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ConnectedAccountUserIdentifier": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "api_url": "optional<string>",
              "email": "optional<string>",
              "exclusive": "optional<boolean>",
              "phone": "optional<string>",
              "username": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Device": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "can_program_offline_access_codes": "optional<boolean>",
              "can_program_online_access_codes": "optional<boolean>",
              "can_remotely_lock": "optional<boolean>",
              "can_remotely_unlock": "optional<boolean>",
              "can_simulate_connection": "optional<boolean>",
              "can_simulate_disconnection": "optional<boolean>",
              "can_simulate_removal": "optional<boolean>",
              "capabilities_supported": {
                "docs": "Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.",
                "type": "list<DeviceCapabilitiesSupportedItem>",
              },
              "connected_account_id": {
                "docs": "Unique identifier for the account associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": {
                "docs": "Date and time at which the device object was created.",
                "type": "datetime",
              },
              "custom_metadata": "map<string, DeviceCustomMetadataValue>",
              "device_id": {
                "docs": "Unique identifier for the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "device_type": {
                "docs": "Type of the device.",
                "type": "DeviceDeviceType",
              },
              "display_name": {
                "docs": "Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices.",
                "type": "string",
              },
              "errors": {
                "docs": "Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.",
                "type": "list<DeviceErrorsItem>",
              },
              "is_managed": {
                "docs": "Indicates whether Seam manages the device.",
                "type": "boolean",
              },
              "location": {
                "docs": "Location information for the device.",
                "type": "optional<nullable<DeviceLocation>>",
              },
              "nickname": {
                "docs": "Optional nickname to describe the device, settable through Seam",
                "type": "optional<string>",
              },
              "properties": {
                "docs": "Properties of the device.",
                "type": "DeviceProperties",
              },
              "warnings": {
                "docs": "Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.",
                "type": "list<DeviceWarningsItem>",
              },
              "workspace_id": {
                "docs": "Unique identifier for the Seam workspace associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceCapabilitiesSupportedItem": {
            "enum": [
              "access_code",
              "lock",
              "noise_detection",
              "thermostat",
              "battery",
              "phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "DeviceDeviceType": {
            "docs": "Type of the device.",
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceErrorsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceLocation": {
            "docs": "Location information for the device.",
            "inline": true,
            "properties": {
              "location_name": {
                "docs": "Name of the device location.",
                "type": "optional<string>",
              },
              "timezone": {
                "docs": "Time zone of the device location.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceProperties": {
            "docs": "Properties of the device.",
            "inline": true,
            "properties": {
              "_experimental_supported_code_from_access_codes_lengths": "optional<list<double>>",
              "accessory_keypad": {
                "docs": "Represents the accessory keypad state.",
                "type": "optional<DevicePropertiesAccessoryKeypad>",
              },
              "appearance": "DevicePropertiesAppearance",
              "assa_abloy_credential_service_metadata": "optional<DevicePropertiesAssaAbloyCredentialServiceMetadata>",
              "august_metadata": "optional<DevicePropertiesAugustMetadata>",
              "avigilon_alta_metadata": "optional<DevicePropertiesAvigilonAltaMetadata>",
              "battery": {
                "docs": "Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.",
                "type": "optional<DevicePropertiesBattery>",
              },
              "battery_level": {
                "docs": "Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.",
                "type": "optional<double>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "brivo_metadata": "optional<DevicePropertiesBrivoMetadata>",
              "code_constraints": "optional<list<DevicePropertiesCodeConstraintsItem>>",
              "controlbyweb_metadata": "optional<DevicePropertiesControlbywebMetadata>",
              "currently_triggering_noise_threshold_ids": {
                "docs": "Array of noise threshold IDs that are currently triggering.",
                "type": "optional<list<string>>",
              },
              "door_open": "optional<boolean>",
              "dormakaba_oracode_metadata": "optional<DevicePropertiesDormakabaOracodeMetadata>",
              "ecobee_metadata": "optional<DevicePropertiesEcobeeMetadata>",
              "four_suites_metadata": "optional<DevicePropertiesFourSuitesMetadata>",
              "genie_metadata": "optional<DevicePropertiesGenieMetadata>",
              "has_direct_power": {
                "docs": "Indicates whether the device has direct power.",
                "type": "optional<boolean>",
              },
              "has_native_entry_events": "optional<boolean>",
              "honeywell_resideo_metadata": "optional<DevicePropertiesHoneywellResideoMetadata>",
              "hubitat_metadata": "optional<DevicePropertiesHubitatMetadata>",
              "igloo_metadata": "optional<DevicePropertiesIglooMetadata>",
              "igloohome_metadata": "optional<DevicePropertiesIgloohomeMetadata>",
              "image_alt_text": {
                "docs": "Alt text for the device image.",
                "type": "optional<string>",
              },
              "image_url": {
                "docs": "Image URL for the device.",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "keypad_battery": "optional<DevicePropertiesKeypadBattery>",
              "kwikset_metadata": "optional<DevicePropertiesKwiksetMetadata>",
              "locked": "optional<boolean>",
              "lockly_metadata": "optional<DevicePropertiesLocklyMetadata>",
              "manufacturer": {
                "docs": "Manufacturer of the device.",
                "type": "optional<string>",
              },
              "max_active_codes_supported": "optional<double>",
              "minut_metadata": "optional<DevicePropertiesMinutMetadata>",
              "model": "DevicePropertiesModel",
              "name": {
                "docs": "
      ---
      deprecated: use device.display_name instead
      ---
      Name of the device.
      ",
                "type": "string",
              },
              "nest_metadata": "optional<DevicePropertiesNestMetadata>",
              "noise_level_decibels": {
                "docs": "Indicates current noise level in decibels, if the device supports noise detection.",
                "type": "optional<double>",
              },
              "noiseaware_metadata": "optional<DevicePropertiesNoiseawareMetadata>",
              "nuki_metadata": "optional<DevicePropertiesNukiMetadata>",
              "offline_access_codes_enabled": {
                "docs": "Indicates whether it is currently possible to use offline access codes for the device.",
                "type": "optional<boolean>",
              },
              "online": {
                "docs": "Indicates whether the device is online.",
                "type": "boolean",
              },
              "online_access_codes_enabled": {
                "docs": "Indicates whether it is currently possible to use online access codes for the device.",
                "type": "optional<boolean>",
              },
              "salto_metadata": "optional<DevicePropertiesSaltoMetadata>",
              "schlage_metadata": "optional<DevicePropertiesSchlageMetadata>",
              "seam_bridge_metadata": "optional<DevicePropertiesSeamBridgeMetadata>",
              "serial_number": {
                "docs": "Serial number of the device.",
                "type": "optional<string>",
              },
              "smartthings_metadata": "optional<DevicePropertiesSmartthingsMetadata>",
              "supported_code_lengths": "optional<list<double>>",
              "supports_accessory_keypad": {
                "docs": "
      ---
      deprecated: use device.properties.model.can_connect_accessory_keypad
      ---
      ",
                "type": "optional<boolean>",
              },
              "supports_backup_access_code_pool": "optional<boolean>",
              "supports_offline_access_codes": {
                "docs": "
      ---
      deprecated: use offline_access_codes_enabled
      ---
      ",
                "type": "optional<boolean>",
              },
              "tedee_metadata": "optional<DevicePropertiesTedeeMetadata>",
              "ttlock_metadata": "optional<DevicePropertiesTtlockMetadata>",
              "two_n_metadata": "optional<DevicePropertiesTwoNMetadata>",
              "wyze_metadata": "optional<DevicePropertiesWyzeMetadata>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAccessoryKeypad": {
            "docs": "Represents the accessory keypad state.",
            "inline": true,
            "properties": {
              "battery": {
                "docs": "Indicates if the keypad battery properties.",
                "type": "optional<DevicePropertiesAccessoryKeypadBattery>",
              },
              "is_connected": {
                "docs": "Indicates if the accessory_keypad is connected to the device.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAccessoryKeypadBattery": {
            "docs": "Indicates if the keypad battery properties.",
            "inline": true,
            "properties": {
              "level": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAppearance": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "name": {
                "docs": "Name of the device as seen from the provider API and application, not settable through Seam.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAssaAbloyCredentialServiceMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "endpoints": "list<DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem>",
              "has_active_endpoint": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "endpoint_id": "string",
              "is_active": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAugustMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "has_keypad": "boolean",
              "house_id": "optional<string>",
              "house_name": "string",
              "keypad_battery_level": "optional<string>",
              "lock_id": "string",
              "lock_name": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAvigilonAltaMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "entry_name": "string",
              "entry_relays_total_count": "double",
              "org_name": "string",
              "site_id": "double",
              "site_name": "string",
              "zone_id": "double",
              "zone_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesBattery": {
            "docs": "Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.",
            "inline": true,
            "properties": {
              "level": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "status": "DevicePropertiesBatteryStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesBatteryStatus": {
            "enum": [
              "critical",
              "low",
              "good",
              "full",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesBrivoMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesCodeConstraintsItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "DevicePropertiesCodeConstraintsItemZero",
              "DevicePropertiesCodeConstraintsItemMaxLength",
            ],
          },
          "DevicePropertiesCodeConstraintsItemMaxLength": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "constraint_type": "DevicePropertiesCodeConstraintsItemMaxLengthConstraintType",
              "max_length": "optional<double>",
              "min_length": "optional<double>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesCodeConstraintsItemMaxLengthConstraintType": {
            "enum": [
              "name_length",
              "name_must_be_unique",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesCodeConstraintsItemZero": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "constraint_type": "DevicePropertiesCodeConstraintsItemZeroConstraintType",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesCodeConstraintsItemZeroConstraintType": {
            "enum": [
              "no_zeros",
              "cannot_start_with_12",
              "no_triple_consecutive_ints",
              "cannot_specify_pin_code",
              "pin_code_matches_existing_set",
              "start_date_in_future",
              "no_ascending_or_descending_sequence",
              "at_least_three_unique_digits",
              "cannot_contain_089",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesControlbywebMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "relay_name": "optional<nullable<string>>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesDormakabaOracodeMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "optional<double>",
              "door_id": "double",
              "door_is_wireless": "boolean",
              "door_name": "string",
              "iana_timezone": "optional<string>",
              "predefined_time_slots": "optional<list<DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem>>",
              "site_id": "double",
              "site_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "check_in_time": "string",
              "check_out_time": "string",
              "dormakaba_oracode_user_level_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "ext_dormakaba_oracode_user_level_prefix": "double",
              "is_24_hour": "boolean",
              "is_biweekly_mode": "boolean",
              "is_master": "boolean",
              "is_one_shot": "boolean",
              "name": "string",
              "prefix": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesEcobeeMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_name": "string",
              "ecobee_device_id": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesFourSuitesMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "double",
              "device_name": "string",
              "reclose_delay_in_seconds": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesGenieMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_name": "string",
              "door_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesHoneywellResideoMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_name": "string",
              "honeywell_resideo_device_id": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesHubitatMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_label": "string",
              "device_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesIglooMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "bridge_id": "string",
              "device_id": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesIgloohomeMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "bridge_id": "optional<string>",
              "bridge_name": "optional<string>",
              "device_id": "string",
              "device_name": "string",
              "keypad_id": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesKeypadBattery": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "level": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesKwiksetMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "model_number": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesLocklyMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "latest_sensor_values": "DevicePropertiesMinutMetadataLatestSensorValues",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValues": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "accelerometer_z": "DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ",
              "humidity": "DevicePropertiesMinutMetadataLatestSensorValuesHumidity",
              "pressure": "DevicePropertiesMinutMetadataLatestSensorValuesPressure",
              "sound": "DevicePropertiesMinutMetadataLatestSensorValuesSound",
              "temperature": "DevicePropertiesMinutMetadataLatestSensorValuesTemperature",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesHumidity": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesPressure": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesSound": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesTemperature": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesModel": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "accessory_keypad_supported": {
                "docs": "
      ---
      deprecated: use device.properties.model.can_connect_accessory_keypad
      ---
      ",
                "type": "optional<boolean>",
              },
              "can_connect_accessory_keypad": {
                "docs": "Indicates whether the device can connect a accessory keypad.",
                "type": "optional<boolean>",
              },
              "display_name": {
                "docs": "Display name of the device model.",
                "type": "string",
              },
              "has_built_in_keypad": {
                "docs": "Indicates whether the device has a built in accessory keypad.",
                "type": "optional<boolean>",
              },
              "manufacturer_display_name": {
                "docs": "Display name that corresponds to the manufacturer-specific terminology for the device.",
                "type": "string",
              },
              "offline_access_codes_supported": {
                "docs": "Indicates whether the device supports offline access codes.",
                "type": "optional<boolean>",
              },
              "online_access_codes_supported": {
                "docs": "Indicates whether the device supports online access codes.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesNestMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "custom_name": "string",
              "device_name": "string",
              "nest_device_id": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesNoiseawareMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_model": "DevicePropertiesNoiseawareMetadataDeviceModel",
              "device_name": "string",
              "noise_level_decibel": "double",
              "noise_level_nrs": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesNoiseawareMetadataDeviceModel": {
            "enum": [
              "indoor",
              "outdoor",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesNukiMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "keypad_2_paired": "optional<boolean>",
              "keypad_battery_critical": "optional<boolean>",
              "keypad_paired": "optional<boolean>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSaltoMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "battery_level": "string",
              "customer_reference": "string",
              "lock_id": "string",
              "lock_type": "string",
              "locked_state": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSchlageMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "access_code_length": "optional<nullable<double>>",
              "device_id": "string",
              "device_name": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSeamBridgeMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_num": "double",
              "name": "string",
              "unlock_method": "optional<DevicePropertiesSeamBridgeMetadataUnlockMethod>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSeamBridgeMetadataUnlockMethod": {
            "enum": [
              "bridge",
              "doorking",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSmartthingsMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "location_id": "optional<string>",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesTedeeMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "bridge_id": "double",
              "bridge_name": "string",
              "device_id": "double",
              "device_model": "string",
              "device_name": "string",
              "keypad_id": "optional<double>",
              "serial_number": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesTtlockMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "feature_value": "string",
              "lock_alias": "string",
              "lock_id": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesTwoNMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "double",
              "device_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesWyzeMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_id": "string",
              "device_info_model": "string",
              "device_name": "string",
              "keypad_uuid": "optional<string>",
              "locker_status_hardlock": "optional<double>",
              "product_model": "string",
              "product_name": "string",
              "product_type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceProvider": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "device_provider_name": "DeviceProviderDeviceProviderName",
              "display_name": "string",
              "image_url": "string",
              "provider_categories": "list<DeviceProviderProviderCategoriesItem>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceProviderDeviceProviderName": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "schlage",
              "smartthings",
              "yale",
              "genie",
              "doorking",
              "salto",
              "lockly",
              "ttlock",
              "linear",
              "noiseaware",
              "nuki",
              "seam_relay_admin",
              "igloo",
              "kwikset",
              "minut",
              "my_2n",
              "controlbyweb",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "four_suites",
              "dormakaba_oracode",
              "pti",
              "wyze",
              "seam_passport",
              "visionline",
              "assa_abloy_credential_service",
              "seam_bridge",
              "tedee",
              "honeywell_resideo",
              "latch",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceProviderProviderCategoriesItem": {
            "enum": [
              "stable",
              "consumer_smartlocks",
              "thermostats",
              "noise_sensors",
              "access_control_systems",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceWarningsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "warning_code": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnrollmentAutomation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": "datetime",
              "credential_manager_acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "enrollment_automation_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Event": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_user_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_attempt_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "client_session_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "device_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "enrollment_automation_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "event_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "event_type": "string",
              "occurred_at": "datetime",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Network": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": "datetime",
              "display_name": "string",
              "network_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NoiseThreshold": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "device_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "ends_daily_at": "string",
              "name": "string",
              "noise_threshold_decibels": "double",
              "noise_threshold_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "noise_threshold_nrs": "optional<double>",
              "starts_daily_at": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Phone": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "can_program_offline_access_codes": "optional<boolean>",
              "can_program_online_access_codes": "optional<boolean>",
              "can_remotely_lock": "optional<boolean>",
              "can_remotely_unlock": "optional<boolean>",
              "can_simulate_connection": "optional<boolean>",
              "can_simulate_disconnection": "optional<boolean>",
              "can_simulate_removal": "optional<boolean>",
              "capabilities_supported": {
                "docs": "Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.",
                "type": "list<PhoneCapabilitiesSupportedItem>",
              },
              "created_at": {
                "docs": "Date and time at which the device object was created.",
                "type": "datetime",
              },
              "custom_metadata": "map<string, PhoneCustomMetadataValue>",
              "device_id": {
                "docs": "Unique identifier for the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "device_type": "PhoneDeviceType",
              "display_name": {
                "docs": "Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices.",
                "type": "string",
              },
              "errors": {
                "docs": "Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.",
                "type": "list<PhoneErrorsItem>",
              },
              "is_managed": {
                "docs": "Indicates whether Seam manages the device.",
                "type": "boolean",
              },
              "location": {
                "docs": "Location information for the device.",
                "type": "optional<nullable<PhoneLocation>>",
              },
              "nickname": {
                "docs": "Optional nickname to describe the device, settable through Seam",
                "type": "optional<string>",
              },
              "properties": "PhoneProperties",
              "warnings": {
                "docs": "Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.",
                "type": "list<PhoneWarningsItem>",
              },
              "workspace_id": {
                "docs": "Unique identifier for the Seam workspace associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneCapabilitiesSupportedItem": {
            "enum": [
              "access_code",
              "lock",
              "noise_detection",
              "thermostat",
              "battery",
              "phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "PhoneDeviceType": {
            "enum": [
              "android_phone",
              "ios_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneErrorsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneLocation": {
            "docs": "Location information for the device.",
            "inline": true,
            "properties": {
              "location_name": {
                "docs": "Name of the device location.",
                "type": "optional<string>",
              },
              "timezone": {
                "docs": "Time zone of the device location.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneProperties": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "assa_abloy_credential_service_metadata": "optional<PhonePropertiesAssaAbloyCredentialServiceMetadata>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhonePropertiesAssaAbloyCredentialServiceMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "endpoints": "list<PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem>",
              "has_active_endpoint": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "endpoint_id": "string",
              "is_active": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneWarningsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "warning_code": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ServiceHealth": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": "string",
              "service": "string",
              "status": "ServiceHealthStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ServiceHealthStatus": {
            "enum": [
              "healthy",
              "degraded",
              "down",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedAccessCode": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_code_id": {
                "docs": "Unique identifier for the access code.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "code": {
                "docs": "Code used for access. Typically, a numeric or alphanumeric string.",
                "type": "optional<nullable<string>>",
              },
              "created_at": {
                "docs": "Date and time at which the access code was created.",
                "type": "datetime",
              },
              "device_id": {
                "docs": "Unique identifier for the device associated with the access code.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "ends_at": {
                "docs": "Date and time after which the time-bound access code becomes inactive.",
                "type": "optional<nullable<datetime>>",
              },
              "errors": "optional<unknown>",
              "is_managed": "boolean",
              "name": {
                "docs": "Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.",
                "type": "optional<nullable<string>>",
              },
              "starts_at": {
                "docs": "Date and time at which the time-bound access code becomes active.",
                "type": "optional<nullable<datetime>>",
              },
              "status": "literal<"set">",
              "type": {
                "docs": "Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.",
                "type": "UnmanagedAccessCodeType",
              },
              "warnings": "optional<unknown>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedAccessCodeType": {
            "docs": "Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.",
            "enum": [
              "time_bound",
              "ongoing",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevice": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "can_program_offline_access_codes": "optional<boolean>",
              "can_program_online_access_codes": "optional<boolean>",
              "can_remotely_lock": "optional<boolean>",
              "can_remotely_unlock": "optional<boolean>",
              "can_simulate_connection": "optional<boolean>",
              "can_simulate_disconnection": "optional<boolean>",
              "can_simulate_removal": "optional<boolean>",
              "capabilities_supported": {
                "docs": "Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.",
                "type": "list<UnmanagedDeviceCapabilitiesSupportedItem>",
              },
              "connected_account_id": {
                "docs": "Unique identifier for the account associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": {
                "docs": "Date and time at which the device object was created.",
                "type": "datetime",
              },
              "device_id": {
                "docs": "Unique identifier for the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "device_type": {
                "docs": "Type of the device.",
                "type": "UnmanagedDeviceDeviceType",
              },
              "errors": {
                "docs": "Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.",
                "type": "list<UnmanagedDeviceErrorsItem>",
              },
              "is_managed": "boolean",
              "properties": "UnmanagedDeviceProperties",
              "warnings": {
                "docs": "Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.",
                "type": "list<UnmanagedDeviceWarningsItem>",
              },
              "workspace_id": {
                "docs": "Unique identifier for the Seam workspace associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceCapabilitiesSupportedItem": {
            "enum": [
              "access_code",
              "lock",
              "noise_detection",
              "thermostat",
              "battery",
              "phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceDeviceType": {
            "docs": "Type of the device.",
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceErrorsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceProperties": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "accessory_keypad": {
                "docs": "Represents the accessory keypad state.",
                "type": "optional<UnmanagedDevicePropertiesAccessoryKeypad>",
              },
              "battery": {
                "docs": "Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.",
                "type": "optional<UnmanagedDevicePropertiesBattery>",
              },
              "battery_level": {
                "docs": "Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.",
                "type": "optional<double>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "image_alt_text": {
                "docs": "Alt text for the device image.",
                "type": "optional<string>",
              },
              "image_url": {
                "docs": "Image URL for the device.",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "manufacturer": {
                "docs": "Manufacturer of the device.",
                "type": "optional<string>",
              },
              "model": "UnmanagedDevicePropertiesModel",
              "name": {
                "docs": "
      ---
      deprecated: use device.display_name instead
      ---
      Name of the device.
      ",
                "type": "string",
              },
              "offline_access_codes_enabled": {
                "docs": "Indicates whether it is currently possible to use offline access codes for the device.",
                "type": "optional<boolean>",
              },
              "online": {
                "docs": "Indicates whether the device is online.",
                "type": "boolean",
              },
              "online_access_codes_enabled": {
                "docs": "Indicates whether it is currently possible to use online access codes for the device.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesAccessoryKeypad": {
            "docs": "Represents the accessory keypad state.",
            "inline": true,
            "properties": {
              "battery": {
                "docs": "Indicates if the keypad battery properties.",
                "type": "optional<UnmanagedDevicePropertiesAccessoryKeypadBattery>",
              },
              "is_connected": {
                "docs": "Indicates if the accessory_keypad is connected to the device.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesAccessoryKeypadBattery": {
            "docs": "Indicates if the keypad battery properties.",
            "inline": true,
            "properties": {
              "level": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesBattery": {
            "docs": "Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.",
            "inline": true,
            "properties": {
              "level": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "status": "UnmanagedDevicePropertiesBatteryStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesBatteryStatus": {
            "enum": [
              "critical",
              "low",
              "good",
              "full",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesModel": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "accessory_keypad_supported": {
                "docs": "
      ---
      deprecated: use device.properties.model.can_connect_accessory_keypad
      ---
      ",
                "type": "optional<boolean>",
              },
              "can_connect_accessory_keypad": {
                "docs": "Indicates whether the device can connect a accessory keypad.",
                "type": "optional<boolean>",
              },
              "display_name": {
                "docs": "Display name of the device model.",
                "type": "string",
              },
              "has_built_in_keypad": {
                "docs": "Indicates whether the device has a built in accessory keypad.",
                "type": "optional<boolean>",
              },
              "manufacturer_display_name": {
                "docs": "Display name that corresponds to the manufacturer-specific terminology for the device.",
                "type": "string",
              },
              "offline_access_codes_supported": {
                "docs": "Indicates whether the device supports offline access codes.",
                "type": "optional<boolean>",
              },
              "online_access_codes_supported": {
                "docs": "Indicates whether the device supports online access codes.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceWarningsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "message": "string",
              "warning_code": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentity": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": "datetime",
              "display_name": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "email_address": {
                "type": "optional<nullable<string>>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "full_name": {
                "type": "optional<nullable<string>>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "phone_number": "optional<nullable<string>>",
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_identity_key": {
                "type": "optional<nullable<string>>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Webhook": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "event_types": "optional<list<string>>",
              "secret": "optional<string>",
              "url": "string",
              "webhook_id": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Workspace": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "company_name": "string",
              "connect_partner_name": {
                "docs": "
    ---
    deprecated: use company_name
    ---
  ",
                "type": "optional<nullable<string>>",
              },
              "is_sandbox": "boolean",
              "name": "string",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "errors:
  CreateAccessCodesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateAccessCodesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateMultipleAccessCodesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateMultipleAccessCodesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteAccessCodesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteAccessCodesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GenerateCodeAccessCodesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GenerateCodeAccessCodesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetAccessCodesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetAccessCodesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListAccessCodesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListAccessCodesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  PullBackupAccessCodeAccessCodesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  PullBackupAccessCodeAccessCodesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateAccessCodesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateAccessCodesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetActionAttemptsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetActionAttemptsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListActionAttemptsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListActionAttemptsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateClientSessionsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateClientSessionsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteClientSessionsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteClientSessionsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetClientSessionsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetClientSessionsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetOrCreateClientSessionsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetOrCreateClientSessionsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GrantAccessClientSessionsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GrantAccessClientSessionsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListClientSessionsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListClientSessionsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  RevokeClientSessionsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  RevokeClientSessionsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateConnectWebviewsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateConnectWebviewsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteConnectWebviewsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteConnectWebviewsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetConnectWebviewsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetConnectWebviewsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListConnectWebviewsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListConnectWebviewsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteConnectedAccountsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteConnectedAccountsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetConnectedAccountsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetConnectedAccountsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListConnectedAccountsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListConnectedAccountsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateConnectedAccountsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateConnectedAccountsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteDevicesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteDevicesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetDevicesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetDevicesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListDevicesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListDevicesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListDeviceProvidersDevicesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListDeviceProvidersDevicesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateDevicesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateDevicesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetEventsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetEventsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListEventsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListEventsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetLocksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetLocksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListLocksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListLocksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  LockDoorLocksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  LockDoorLocksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UnlockDoorLocksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UnlockDoorLocksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetNetworksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetNetworksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListNetworksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListNetworksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeactivatePhonesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeactivatePhonesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListPhonesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListPhonesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CoolThermostatsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CoolThermostatsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetThermostatsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetThermostatsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  HeatThermostatsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  HeatThermostatsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  HeatCoolThermostatsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  HeatCoolThermostatsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListThermostatsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListThermostatsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  OffThermostatsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  OffThermostatsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  SetFanModeThermostatsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  SetFanModeThermostatsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateThermostatsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateThermostatsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  AddAcsUserUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  AddAcsUserUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GrantAccessToDeviceUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GrantAccessToDeviceUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListAccessibleDevicesUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListAccessibleDevicesUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListAcsSystemsUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListAcsSystemsUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListAcsUsersUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListAcsUsersUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  RemoveAcsUserUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  RemoveAcsUserUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  RevokeAccessToDeviceUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  RevokeAccessToDeviceUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateUserIdentitiesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateUserIdentitiesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateWebhooksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateWebhooksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteWebhooksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteWebhooksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetWebhooksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetWebhooksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListWebhooksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListWebhooksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateWebhooksRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateWebhooksRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateWorkspacesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateWorkspacesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetWorkspacesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetWorkspacesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListWorkspacesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListWorkspacesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ResetSandboxWorkspacesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ResetSandboxWorkspacesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateUnmanagedAccessCodeSimulateRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateUnmanagedAccessCodeSimulateRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ConvertToManagedUnmanagedRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ConvertToManagedUnmanagedRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteUnmanagedRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteUnmanagedRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetUnmanagedRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetUnmanagedRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListUnmanagedRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUnmanagedRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateUnmanagedRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateUnmanagedRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  AddUserAccessGroupsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  AddUserAccessGroupsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetAccessGroupsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetAccessGroupsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListAccessGroupsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListAccessGroupsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListUsersAccessGroupsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUsersAccessGroupsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  RemoveUserAccessGroupsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  RemoveUserAccessGroupsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListCredentialPoolsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListCredentialPoolsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  LaunchCredentialProvisioningAutomationsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  LaunchCredentialProvisioningAutomationsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  AssignCredentialsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  AssignCredentialsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateCredentialsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateCredentialsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteCredentialsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteCredentialsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetCredentialsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetCredentialsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListCredentialsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListCredentialsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListAccessibleEntrancesCredentialsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListAccessibleEntrancesCredentialsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UnassignCredentialsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UnassignCredentialsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateCredentialsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateCredentialsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetEntrancesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetEntrancesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GrantAccessEntrancesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GrantAccessEntrancesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListEntrancesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListEntrancesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListCredentialsWithAccessEntrancesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListCredentialsWithAccessEntrancesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetSystemsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetSystemsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListSystemsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListSystemsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListCompatibleCredentialManagerAcsSystemsSystemsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListCompatibleCredentialManagerAcsSystemsSystemsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  AddToAccessGroupUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  AddToAccessGroupUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListAccessibleEntrancesUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListAccessibleEntrancesUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  RemoveFromAccessGroupUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  RemoveFromAccessGroupUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  RevokeAccessToAllEntrancesUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  RevokeAccessToAllEntrancesUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  SuspendUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  SuspendUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UnsuspendUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UnsuspendUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateUsersRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateUsersRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ConnectSimulateRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ConnectSimulateRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DisconnectSimulateRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DisconnectSimulateRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  RemoveSimulateRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  RemoveSimulateRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateNoiseThresholdsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateNoiseThresholdsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteNoiseThresholdsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteNoiseThresholdsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetNoiseThresholdsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetNoiseThresholdsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListNoiseThresholdsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListNoiseThresholdsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateNoiseThresholdsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateNoiseThresholdsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  TriggerNoiseThresholdSimulateRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  TriggerNoiseThresholdSimulateRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateSandboxPhoneSimulateRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateSandboxPhoneSimulateRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  CreateClimateSettingSchedulesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateClimateSettingSchedulesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteClimateSettingSchedulesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteClimateSettingSchedulesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetClimateSettingSchedulesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetClimateSettingSchedulesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListClimateSettingSchedulesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListClimateSettingSchedulesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  UpdateClimateSettingSchedulesRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UpdateClimateSettingSchedulesRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  DeleteEnrollmentAutomationsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  DeleteEnrollmentAutomationsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  GetEnrollmentAutomationsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  GetEnrollmentAutomationsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  LaunchEnrollmentAutomationsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  LaunchEnrollmentAutomationsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  ListEnrollmentAutomationsRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListEnrollmentAutomationsRequestUnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
types:
  AccessCodeType:
    enum:
      - time_bound
      - ongoing
    docs: >-
      Nature of the access code. Values are "ongoing" for access codes that are
      active continuously until deactivated manually or "time_bound" for access
      codes that have a specific duration.
    inline: true
    source:
      openapi: ../openapi.json
  AccessCodeStatus:
    enum:
      - setting
      - set
      - unset
      - removing
      - unknown
    docs: |2-

          Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
        
    inline: true
    source:
      openapi: ../openapi.json
  AccessCode:
    properties:
      common_code_key:
        type: optional<nullable<string>>
        docs: >-
          Unique identifier for a group of access codes that share the same
          code.
      is_scheduled_on_device:
        type: optional<boolean>
        docs: >-
          Indicates whether the code is set on the device according to a
          preconfigured schedule.
      type:
        type: AccessCodeType
        docs: >-
          Nature of the access code. Values are "ongoing" for access codes that
          are active continuously until deactivated manually or "time_bound" for
          access codes that have a specific duration.
      is_waiting_for_code_assignment:
        type: optional<boolean>
        docs: Indicates whether the access code is waiting for a code assignment.
      access_code_id:
        type: string
        docs: Unique identifier for the access code.
        validation:
          format: uuid
      device_id:
        type: string
        docs: Unique identifier for the device associated with the access code.
        validation:
          format: uuid
      name:
        type: optional<nullable<string>>
        docs: >-
          Name of the access code. Enables administrators and users to identify
          the access code easily, especially when there are numerous access
          codes.
      code:
        type: optional<nullable<string>>
        docs: Code used for access. Typically, a numeric or alphanumeric string.
      created_at:
        type: datetime
        docs: Date and time at which the access code was created.
      errors: optional<unknown>
      warnings: optional<unknown>
      is_managed:
        type: boolean
        docs: Indicates whether Seam manages the access code.
      starts_at:
        type: optional<nullable<datetime>>
        docs: Date and time at which the time-bound access code becomes active.
      ends_at:
        type: optional<nullable<datetime>>
        docs: Date and time after which the time-bound access code becomes inactive.
      status:
        type: AccessCodeStatus
        docs: |2-

              Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
            
      is_backup_access_code_available:
        type: boolean
        docs: >-
          Indicates whether a backup access code is available for use if the
          primary access code is lost or compromised.
      is_backup:
        type: optional<boolean>
        docs: Indicates whether the access code is a backup code.
      pulled_backup_access_code_id:
        type: optional<nullable<string>>
        docs: >-
          Identifier of the pulled backup access code. Used to associate the
          pulled backup access code with the original access code.
        validation:
          format: uuid
      is_external_modification_allowed:
        type: boolean
        docs: >-
          Indicates whether changes to the access code from external sources are
          permitted.
      is_one_time_use:
        type: boolean
        docs: >-
          Indicates whether the access code can only be used once. If "true,"
          the code becomes invalid after the first use.
      is_offline_access_code:
        type: boolean
        docs: >-
          Indicates whether the access code is intended for use in offline
          scenarios. If "true," this code can be created on a device without a
          network connection.
    source:
      openapi: ../openapi.json
  UnmanagedAccessCodeType:
    enum:
      - time_bound
      - ongoing
    docs: >-
      Nature of the access code. Values are "ongoing" for access codes that are
      active continuously until deactivated manually or "time_bound" for access
      codes that have a specific duration.
    inline: true
    source:
      openapi: ../openapi.json
  UnmanagedAccessCode:
    properties:
      type:
        type: UnmanagedAccessCodeType
        docs: >-
          Nature of the access code. Values are "ongoing" for access codes that
          are active continuously until deactivated manually or "time_bound" for
          access codes that have a specific duration.
      access_code_id:
        type: string
        docs: Unique identifier for the access code.
        validation:
          format: uuid
      device_id:
        type: string
        docs: Unique identifier for the device associated with the access code.
        validation:
          format: uuid
      name:
        type: optional<nullable<string>>
        docs: >-
          Name of the access code. Enables administrators and users to identify
          the access code easily, especially when there are numerous access
          codes.
      code:
        type: optional<nullable<string>>
        docs: Code used for access. Typically, a numeric or alphanumeric string.
      created_at:
        type: datetime
        docs: Date and time at which the access code was created.
      errors: optional<unknown>
      warnings: optional<unknown>
      is_managed: boolean
      starts_at:
        type: optional<nullable<datetime>>
        docs: Date and time at which the time-bound access code becomes active.
      ends_at:
        type: optional<nullable<datetime>>
        docs: Date and time after which the time-bound access code becomes inactive.
      status: literal<"set">
    source:
      openapi: ../openapi.json
  ActionAttemptZero:
    docs: Locking door.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"LOCK_DOOR">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptOneResult:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptOne:
    docs: Locking door succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"LOCK_DOOR">
      result: ActionAttemptOneResult
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwoError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwo:
    docs: Locking door failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"LOCK_DOOR">
      error: ActionAttemptTwoError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThree:
    docs: Unlocking door.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"UNLOCK_DOOR">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFourResult:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFour:
    docs: Unlocking door succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"UNLOCK_DOOR">
      result: ActionAttemptFourResult
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFiveError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFive:
    docs: Unlocking door failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"UNLOCK_DOOR">
      error: ActionAttemptFiveError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptSix:
    docs: Resetting sandbox workspace.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"RESET_SANDBOX_WORKSPACE">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptSevenResult:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptSeven:
    docs: Resetting sandbox workspace succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"RESET_SANDBOX_WORKSPACE">
      result: ActionAttemptSevenResult
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptEightError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptEight:
    docs: Resetting sandbox workspace failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"RESET_SANDBOX_WORKSPACE">
      error: ActionAttemptEightError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptNine:
    docs: Setting HVAC to cool.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"SET_COOL">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTenResult:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTen:
    docs: Setting HVAC to cool succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"SET_COOL">
      result: ActionAttemptTenResult
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptElevenError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptEleven:
    docs: Setting HVAC to cool failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"SET_COOL">
      error: ActionAttemptElevenError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwelve:
    docs: Setting HVAC to heat mode.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"SET_HEAT">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirteenResult:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirteen:
    docs: Setting HVAC to heat mode succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"SET_HEAT">
      result: ActionAttemptThirteenResult
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFourteenError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFourteen:
    docs: Setting HVAC to heat mode failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"SET_HEAT">
      error: ActionAttemptFourteenError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFifteen:
    docs: Setting HVAC to heat-cool mode.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"SET_HEAT_COOL">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptSixteenResult:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptSixteen:
    docs: Setting HVAC to heat-cool mode succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"SET_HEAT_COOL">
      result: ActionAttemptSixteenResult
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptSeventeenError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptSeventeen:
    docs: Setting heat-cool mode failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"SET_HEAT_COOL">
      error: ActionAttemptSeventeenError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptEighteen:
    docs: Setting fan mode.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"SET_FAN_MODE">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptNineteenResult:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptNineteen:
    docs: Setting fan mode succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"SET_FAN_MODE">
      result: ActionAttemptNineteenResult
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwenty:
    docs: Setting fan mode failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"SET_FAN_MODE">
      error: ActionAttemptTwentyError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyOne:
    docs: Turning HVAC off.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"SET_THERMOSTAT_OFF">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyTwoResult:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyTwo:
    docs: Turning HVAC off succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"SET_THERMOSTAT_OFF">
      result: ActionAttemptTwentyTwoResult
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyThreeError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyThree:
    docs: Turning HVAC off failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"SET_THERMOSTAT_OFF">
      error: ActionAttemptTwentyThreeError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyFour:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"SYNC_ACCESS_CODES">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyFive:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"SYNC_ACCESS_CODES">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentySixError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentySix:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"SYNC_ACCESS_CODES">
      error: ActionAttemptTwentySixError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentySeven:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"CREATE_ACCESS_CODE">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyEight:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"CREATE_ACCESS_CODE">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyNineError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptTwentyNine:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"CREATE_ACCESS_CODE">
      error: ActionAttemptTwentyNineError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirty:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"DELETE_ACCESS_CODE">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyOne:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"DELETE_ACCESS_CODE">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyTwoError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyTwo:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"DELETE_ACCESS_CODE">
      error: ActionAttemptThirtyTwoError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyThree:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"UPDATE_ACCESS_CODE">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyFour:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"UPDATE_ACCESS_CODE">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyFiveError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyFive:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"UPDATE_ACCESS_CODE">
      error: ActionAttemptThirtyFiveError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtySix:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"CREATE_NOISE_THRESHOLD">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtySeven:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"CREATE_NOISE_THRESHOLD">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyEightError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyEight:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"CREATE_NOISE_THRESHOLD">
      error: ActionAttemptThirtyEightError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptThirtyNine:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"DELETE_NOISE_THRESHOLD">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptForty:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"DELETE_NOISE_THRESHOLD">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFortyOneError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFortyOne:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"DELETE_NOISE_THRESHOLD">
      error: ActionAttemptFortyOneError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFortyTwo:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<nullable<string>>
      error: optional<nullable<string>>
      action_type: literal<"UPDATE_NOISE_THRESHOLD">
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptFortyThree:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<nullable<string>>
      action_type: literal<"UPDATE_NOISE_THRESHOLD">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptActionAttemptIdError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttemptActionAttemptId:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<nullable<string>>
      action_type: literal<"UPDATE_NOISE_THRESHOLD">
      error: ActionAttemptActionAttemptIdError
    source:
      openapi: ../openapi.json
    inline: true
  ActionAttempt:
    discriminated: false
    union:
      - type: ActionAttemptZero
        docs: Locking door.
      - type: ActionAttemptOne
        docs: Locking door succeeded.
      - type: ActionAttemptTwo
        docs: Locking door failed.
      - type: ActionAttemptThree
        docs: Unlocking door.
      - type: ActionAttemptFour
        docs: Unlocking door succeeded.
      - type: ActionAttemptFive
        docs: Unlocking door failed.
      - type: ActionAttemptSix
        docs: Resetting sandbox workspace.
      - type: ActionAttemptSeven
        docs: Resetting sandbox workspace succeeded.
      - type: ActionAttemptEight
        docs: Resetting sandbox workspace failed.
      - type: ActionAttemptNine
        docs: Setting HVAC to cool.
      - type: ActionAttemptTen
        docs: Setting HVAC to cool succeeded.
      - type: ActionAttemptEleven
        docs: Setting HVAC to cool failed.
      - type: ActionAttemptTwelve
        docs: Setting HVAC to heat mode.
      - type: ActionAttemptThirteen
        docs: Setting HVAC to heat mode succeeded.
      - type: ActionAttemptFourteen
        docs: Setting HVAC to heat mode failed.
      - type: ActionAttemptFifteen
        docs: Setting HVAC to heat-cool mode.
      - type: ActionAttemptSixteen
        docs: Setting HVAC to heat-cool mode succeeded.
      - type: ActionAttemptSeventeen
        docs: Setting heat-cool mode failed.
      - type: ActionAttemptEighteen
        docs: Setting fan mode.
      - type: ActionAttemptNineteen
        docs: Setting fan mode succeeded.
      - type: ActionAttemptTwenty
        docs: Setting fan mode failed.
      - type: ActionAttemptTwentyOne
        docs: Turning HVAC off.
      - type: ActionAttemptTwentyTwo
        docs: Turning HVAC off succeeded.
      - type: ActionAttemptTwentyThree
        docs: Turning HVAC off failed.
      - ActionAttemptTwentyFour
      - ActionAttemptTwentyFive
      - ActionAttemptTwentySix
      - ActionAttemptTwentySeven
      - ActionAttemptTwentyEight
      - ActionAttemptTwentyNine
      - ActionAttemptThirty
      - ActionAttemptThirtyOne
      - ActionAttemptThirtyTwo
      - ActionAttemptThirtyThree
      - ActionAttemptThirtyFour
      - ActionAttemptThirtyFive
      - ActionAttemptThirtySix
      - ActionAttemptThirtySeven
      - ActionAttemptThirtyEight
      - ActionAttemptThirtyNine
      - ActionAttemptForty
      - ActionAttemptFortyOne
      - ActionAttemptFortyTwo
      - ActionAttemptFortyThree
      - ActionAttemptActionAttemptId
    source:
      openapi: ../openapi.json
  ClientSession:
    properties:
      client_session_id:
        type: string
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      token: string
      user_identifier_key: optional<nullable<string>>
      device_count: double
      connected_account_ids: list<string>
      connect_webview_ids: list<string>
      user_identity_ids: list<string>
    source:
      openapi: ../openapi.json
  ClimateSettingScheduleHvacModeSetting:
    enum:
      - 'off'
      - heat
      - cool
      - heat_cool
    inline: true
    source:
      openapi: ../openapi.json
  ClimateSettingSchedule:
    properties:
      climate_setting_schedule_id:
        type: string
        validation:
          format: uuid
      schedule_type: literal<"time_bound">
      device_id:
        type: string
        validation:
          format: uuid
      name: optional<string>
      schedule_starts_at: string
      schedule_ends_at: string
      created_at: datetime
      errors: optional<unknown>
      automatic_heating_enabled: optional<boolean>
      automatic_cooling_enabled: optional<boolean>
      hvac_mode_setting: optional<ClimateSettingScheduleHvacModeSetting>
      cooling_set_point_celsius: optional<double>
      heating_set_point_celsius: optional<double>
      cooling_set_point_fahrenheit: optional<double>
      heating_set_point_fahrenheit: optional<double>
      manual_override_allowed: optional<boolean>
    source:
      openapi: ../openapi.json
  ConnectWebviewDeviceSelectionMode:
    enum:
      - none
      - single
      - multiple
    inline: true
    source:
      openapi: ../openapi.json
  ConnectWebviewStatus:
    enum:
      - pending
      - failed
      - authorized
    inline: true
    source:
      openapi: ../openapi.json
  ConnectWebviewCustomMetadataValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  ConnectWebview:
    properties:
      connect_webview_id:
        type: string
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      connected_account_id:
        type: optional<nullable<string>>
        validation:
          format: uuid
      url:
        type: string
        validation:
          format: uri
      device_selection_mode: ConnectWebviewDeviceSelectionMode
      accepted_providers: list<string>
      accepted_devices:
        docs: |2-

                ---
                deprecated: Unused. Will be removed.
                ---
                
        type: list<string>
      any_device_allowed:
        type: boolean
        docs: |2-

                ---
                deprecated: Unused. Will be removed.
                ---
                
      any_provider_allowed: boolean
      login_successful: boolean
      status: ConnectWebviewStatus
      custom_redirect_url:
        type: optional<nullable<string>>
        validation:
          format: uri
      custom_redirect_failure_url:
        type: optional<nullable<string>>
        validation:
          format: uri
      custom_metadata: map<string, ConnectWebviewCustomMetadataValue>
      automatically_manage_new_devices: boolean
      wait_for_device_creation: boolean
      authorized_at: optional<nullable<datetime>>
      selected_provider: optional<nullable<string>>
    source:
      openapi: ../openapi.json
  ConnectedAccountUserIdentifier:
    properties:
      username: optional<string>
      api_url: optional<string>
      email: optional<string>
      phone: optional<string>
      exclusive: optional<boolean>
    source:
      openapi: ../openapi.json
    inline: true
  ConnectedAccountCustomMetadataValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  ConnectedAccount:
    properties:
      connected_account_id:
        type: optional<string>
        validation:
          format: uuid
      created_at: optional<datetime>
      user_identifier: optional<ConnectedAccountUserIdentifier>
      account_type: optional<string>
      account_type_display_name: string
      errors: optional<unknown>
      warnings: optional<unknown>
      custom_metadata: map<string, ConnectedAccountCustomMetadataValue>
      automatically_manage_new_devices: boolean
    source:
      openapi: ../openapi.json
  DeviceDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    docs: Type of the device.
    inline: true
    source:
      openapi: ../openapi.json
  DeviceCapabilitiesSupportedItem:
    enum:
      - access_code
      - lock
      - noise_detection
      - thermostat
      - battery
      - phone
    inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesAccessoryKeypadBattery:
    docs: Indicates if the keypad battery properties.
    properties:
      level:
        type: double
        validation:
          min: 0
          max: 1
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesAccessoryKeypad:
    docs: Represents the accessory keypad state.
    properties:
      is_connected:
        type: boolean
        docs: Indicates if the accessory_keypad is connected to the device.
      battery:
        type: optional<DevicePropertiesAccessoryKeypadBattery>
        docs: Indicates if the keypad battery properties.
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesAppearance:
    properties:
      name:
        type: string
        docs: >-
          Name of the device as seen from the provider API and application, not
          settable through Seam.
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesModel:
    properties:
      can_connect_accessory_keypad:
        type: optional<boolean>
        docs: Indicates whether the device can connect a accessory keypad.
      display_name:
        type: string
        docs: Display name of the device model.
      manufacturer_display_name:
        type: string
        docs: >-
          Display name that corresponds to the manufacturer-specific terminology
          for the device.
      has_built_in_keypad:
        type: optional<boolean>
        docs: Indicates whether the device has a built in accessory keypad.
      offline_access_codes_supported:
        type: optional<boolean>
        docs: Indicates whether the device supports offline access codes.
      online_access_codes_supported:
        type: optional<boolean>
        docs: Indicates whether the device supports online access codes.
      accessory_keypad_supported:
        type: optional<boolean>
        docs: |2-

                ---
                deprecated: use device.properties.model.can_connect_accessory_keypad
                ---
                
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesBatteryStatus:
    enum:
      - critical
      - low
      - good
      - full
    inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesBattery:
    docs: >-
      Represents the current status of the battery charge level. Values are
      "critical," which indicates an extremely low level, suggesting imminent
      shutdown or an urgent need for charging; "low," which signifies that the
      battery is under the preferred threshold and should be charged soon;
      "good," which denotes a satisfactory charge level, adequate for normal use
      without the immediate need for recharging; and "full," which represents a
      battery that is fully charged, providing the maximum duration of usage.
    properties:
      level:
        type: double
        validation:
          min: 0
          max: 1
      status: DevicePropertiesBatteryStatus
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem:
    properties:
      endpoint_id: string
      is_active: boolean
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesAssaAbloyCredentialServiceMetadata:
    properties:
      has_active_endpoint: boolean
      endpoints: list<DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesAugustMetadata:
    properties:
      lock_id: string
      lock_name: string
      house_name: string
      has_keypad: boolean
      keypad_battery_level: optional<string>
      model: optional<string>
      house_id: optional<string>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesAvigilonAltaMetadata:
    properties:
      entry_name: string
      org_name: string
      zone_id: double
      zone_name: string
      site_id: double
      site_name: string
      entry_relays_total_count: double
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesSchlageMetadata:
    properties:
      device_id: string
      device_name: string
      access_code_length: optional<nullable<double>>
      model: optional<string>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesSmartthingsMetadata:
    properties:
      device_id: string
      device_name: string
      model: optional<string>
      location_id: optional<string>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesLocklyMetadata:
    properties:
      device_id: string
      device_name: string
      model: optional<string>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesNukiMetadata:
    properties:
      device_id: string
      device_name: string
      keypad_battery_critical: optional<boolean>
      keypad_paired: optional<boolean>
      keypad_2_paired: optional<boolean>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesKwiksetMetadata:
    properties:
      device_id: string
      device_name: string
      model_number: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesSaltoMetadata:
    properties:
      lock_id: string
      customer_reference: string
      lock_type: string
      battery_level: string
      locked_state: string
      model: optional<string>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesGenieMetadata:
    properties:
      device_name: string
      door_name: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesBrivoMetadata:
    properties:
      device_name: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesIglooMetadata:
    properties:
      device_id: string
      bridge_id: string
      model: optional<string>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesNoiseawareMetadataDeviceModel:
    enum:
      - indoor
      - outdoor
    inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesNoiseawareMetadata:
    properties:
      device_model: DevicePropertiesNoiseawareMetadataDeviceModel
      noise_level_nrs: double
      noise_level_decibel: double
      device_name: string
      device_id: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesMinutMetadataLatestSensorValuesTemperature:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesMinutMetadataLatestSensorValuesSound:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesMinutMetadataLatestSensorValuesHumidity:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesMinutMetadataLatestSensorValuesPressure:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesMinutMetadataLatestSensorValues:
    properties:
      temperature: DevicePropertiesMinutMetadataLatestSensorValuesTemperature
      sound: DevicePropertiesMinutMetadataLatestSensorValuesSound
      humidity: DevicePropertiesMinutMetadataLatestSensorValuesHumidity
      pressure: DevicePropertiesMinutMetadataLatestSensorValuesPressure
      accelerometer_z: DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesMinutMetadata:
    properties:
      device_id: string
      device_name: string
      latest_sensor_values: DevicePropertiesMinutMetadataLatestSensorValues
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesFourSuitesMetadata:
    properties:
      device_id: double
      device_name: string
      reclose_delay_in_seconds: double
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesTwoNMetadata:
    properties:
      device_id: double
      device_name: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesControlbywebMetadata:
    properties:
      device_id: string
      device_name: string
      relay_name: optional<nullable<string>>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesTtlockMetadata:
    properties:
      lock_id: double
      lock_alias: string
      feature_value: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesSeamBridgeMetadataUnlockMethod:
    enum:
      - bridge
      - doorking
    inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesSeamBridgeMetadata:
    properties:
      unlock_method: optional<DevicePropertiesSeamBridgeMetadataUnlockMethod>
      device_num: double
      name: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesIgloohomeMetadata:
    properties:
      device_id: string
      device_name: string
      bridge_id: optional<string>
      bridge_name: optional<string>
      keypad_id: optional<string>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesNestMetadata:
    properties:
      nest_device_id: string
      device_name: string
      custom_name: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesEcobeeMetadata:
    properties:
      ecobee_device_id: string
      device_name: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesHoneywellResideoMetadata:
    properties:
      honeywell_resideo_device_id: string
      device_name: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesHubitatMetadata:
    properties:
      device_id: string
      device_name: string
      device_label: string
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem:
    properties:
      name: string
      prefix: double
      check_in_time: string
      check_out_time: string
      is_24_hour: boolean
      is_biweekly_mode: boolean
      is_one_shot: boolean
      is_master: boolean
      ext_dormakaba_oracode_user_level_prefix: double
      dormakaba_oracode_user_level_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesDormakabaOracodeMetadata:
    properties:
      door_id: double
      door_name: string
      device_id: optional<double>
      door_is_wireless: boolean
      site_id: double
      site_name: string
      iana_timezone: optional<string>
      predefined_time_slots: >-
        optional<list<DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem>>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesWyzeMetadata:
    properties:
      device_id: string
      device_name: string
      product_name: string
      product_type: string
      product_model: string
      device_info_model: string
      keypad_uuid: optional<string>
      locker_status_hardlock: optional<double>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesTedeeMetadata:
    properties:
      device_id: double
      serial_number: string
      device_name: string
      device_model: string
      bridge_id: double
      bridge_name: string
      keypad_id: optional<double>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesCodeConstraintsItemZeroConstraintType:
    enum:
      - no_zeros
      - cannot_start_with_12
      - no_triple_consecutive_ints
      - cannot_specify_pin_code
      - pin_code_matches_existing_set
      - start_date_in_future
      - no_ascending_or_descending_sequence
      - at_least_three_unique_digits
      - cannot_contain_089
    inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesCodeConstraintsItemZero:
    properties:
      constraint_type: DevicePropertiesCodeConstraintsItemZeroConstraintType
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesCodeConstraintsItemMaxLengthConstraintType:
    enum:
      - name_length
      - name_must_be_unique
    inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesCodeConstraintsItemMaxLength:
    properties:
      constraint_type: DevicePropertiesCodeConstraintsItemMaxLengthConstraintType
      min_length: optional<double>
      max_length: optional<double>
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesCodeConstraintsItem:
    discriminated: false
    union:
      - DevicePropertiesCodeConstraintsItemZero
      - DevicePropertiesCodeConstraintsItemMaxLength
    source:
      openapi: ../openapi.json
    inline: true
  DevicePropertiesKeypadBattery:
    properties:
      level: double
    source:
      openapi: ../openapi.json
    inline: true
  DeviceProperties:
    docs: Properties of the device.
    properties:
      online:
        type: boolean
        docs: Indicates whether the device is online.
      name:
        type: string
        docs: |2-

                ---
                deprecated: use device.display_name instead
                ---
                Name of the device.
                
      accessory_keypad:
        type: optional<DevicePropertiesAccessoryKeypad>
        docs: Represents the accessory keypad state.
      appearance: DevicePropertiesAppearance
      model: DevicePropertiesModel
      has_direct_power:
        type: optional<boolean>
        docs: Indicates whether the device has direct power.
      battery_level:
        type: optional<double>
        docs: >-
          Indicates the battery level of the device as a decimal value between 0
          and 1, inclusive.
        validation:
          min: 0
          max: 1
      battery:
        type: optional<DevicePropertiesBattery>
        docs: >-
          Represents the current status of the battery charge level. Values are
          "critical," which indicates an extremely low level, suggesting
          imminent shutdown or an urgent need for charging; "low," which
          signifies that the battery is under the preferred threshold and should
          be charged soon; "good," which denotes a satisfactory charge level,
          adequate for normal use without the immediate need for recharging; and
          "full," which represents a battery that is fully charged, providing
          the maximum duration of usage.
      manufacturer:
        type: optional<string>
        docs: Manufacturer of the device.
      image_url:
        type: optional<string>
        docs: Image URL for the device.
        validation:
          format: uri
      image_alt_text:
        type: optional<string>
        docs: Alt text for the device image.
      serial_number:
        type: optional<string>
        docs: Serial number of the device.
      online_access_codes_enabled:
        type: optional<boolean>
        docs: >-
          Indicates whether it is currently possible to use online access codes
          for the device.
      offline_access_codes_enabled:
        type: optional<boolean>
        docs: >-
          Indicates whether it is currently possible to use offline access codes
          for the device.
      supports_accessory_keypad:
        type: optional<boolean>
        docs: |2-

                ---
                deprecated: use device.properties.model.can_connect_accessory_keypad
                ---
                
      supports_offline_access_codes:
        type: optional<boolean>
        docs: |2-

                ---
                deprecated: use offline_access_codes_enabled
                ---
                
      noise_level_decibels:
        type: optional<double>
        docs: >-
          Indicates current noise level in decibels, if the device supports
          noise detection.
      currently_triggering_noise_threshold_ids:
        type: optional<list<string>>
        docs: Array of noise threshold IDs that are currently triggering.
      assa_abloy_credential_service_metadata: optional<DevicePropertiesAssaAbloyCredentialServiceMetadata>
      august_metadata: optional<DevicePropertiesAugustMetadata>
      avigilon_alta_metadata: optional<DevicePropertiesAvigilonAltaMetadata>
      schlage_metadata: optional<DevicePropertiesSchlageMetadata>
      smartthings_metadata: optional<DevicePropertiesSmartthingsMetadata>
      lockly_metadata: optional<DevicePropertiesLocklyMetadata>
      nuki_metadata: optional<DevicePropertiesNukiMetadata>
      kwikset_metadata: optional<DevicePropertiesKwiksetMetadata>
      salto_metadata: optional<DevicePropertiesSaltoMetadata>
      genie_metadata: optional<DevicePropertiesGenieMetadata>
      brivo_metadata: optional<DevicePropertiesBrivoMetadata>
      igloo_metadata: optional<DevicePropertiesIglooMetadata>
      noiseaware_metadata: optional<DevicePropertiesNoiseawareMetadata>
      minut_metadata: optional<DevicePropertiesMinutMetadata>
      four_suites_metadata: optional<DevicePropertiesFourSuitesMetadata>
      two_n_metadata: optional<DevicePropertiesTwoNMetadata>
      controlbyweb_metadata: optional<DevicePropertiesControlbywebMetadata>
      ttlock_metadata: optional<DevicePropertiesTtlockMetadata>
      seam_bridge_metadata: optional<DevicePropertiesSeamBridgeMetadata>
      igloohome_metadata: optional<DevicePropertiesIgloohomeMetadata>
      nest_metadata: optional<DevicePropertiesNestMetadata>
      ecobee_metadata: optional<DevicePropertiesEcobeeMetadata>
      honeywell_resideo_metadata: optional<DevicePropertiesHoneywellResideoMetadata>
      hubitat_metadata: optional<DevicePropertiesHubitatMetadata>
      dormakaba_oracode_metadata: optional<DevicePropertiesDormakabaOracodeMetadata>
      wyze_metadata: optional<DevicePropertiesWyzeMetadata>
      tedee_metadata: optional<DevicePropertiesTedeeMetadata>
      _experimental_supported_code_from_access_codes_lengths: optional<list<double>>
      code_constraints: optional<list<DevicePropertiesCodeConstraintsItem>>
      supported_code_lengths: optional<list<double>>
      max_active_codes_supported: optional<double>
      supports_backup_access_code_pool: optional<boolean>
      has_native_entry_events: optional<boolean>
      locked: optional<boolean>
      keypad_battery: optional<DevicePropertiesKeypadBattery>
      door_open: optional<boolean>
    source:
      openapi: ../openapi.json
    inline: true
  DeviceLocation:
    docs: Location information for the device.
    properties:
      location_name:
        type: optional<string>
        docs: Name of the device location.
      timezone:
        type: optional<string>
        docs: Time zone of the device location.
    source:
      openapi: ../openapi.json
    inline: true
  DeviceErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  DeviceWarningsItem:
    properties:
      warning_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  DeviceCustomMetadataValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  Device:
    properties:
      device_id:
        type: string
        docs: Unique identifier for the device.
        validation:
          format: uuid
      device_type:
        type: DeviceDeviceType
        docs: Type of the device.
      nickname:
        type: optional<string>
        docs: Optional nickname to describe the device, settable through Seam
      display_name:
        type: string
        docs: >-
          Display name of the device, defaults to nickname (if it is set) or
          properties.appearance.name otherwise. Enables administrators and users
          to identify the device easily, especially when there are numerous
          devices.
      capabilities_supported:
        docs: >-
          Collection of capabilities that the device supports when connected to
          Seam. Values are "access_code," which indicates that the device can
          manage and utilize digital PIN codes for secure access; "lock," which
          indicates that the device controls a door locking mechanism, enabling
          the remote opening and closing of doors and other entry points;
          "noise_detection," which indicates that the device supports monitoring
          and responding to ambient noise levels; "thermostat," which indicates
          that the device can regulate and adjust indoor temperatures; and
          "battery," which indicates that the device can manage battery life and
          health.
        type: list<DeviceCapabilitiesSupportedItem>
      properties:
        type: DeviceProperties
        docs: Properties of the device.
      location:
        type: optional<nullable<DeviceLocation>>
        docs: Location information for the device.
      connected_account_id:
        type: string
        docs: Unique identifier for the account associated with the device.
        validation:
          format: uuid
      workspace_id:
        type: string
        docs: Unique identifier for the Seam workspace associated with the device.
        validation:
          format: uuid
      errors:
        docs: >-
          Array of errors associated with the device. Each error object within
          the array contains two fields: "error_code" and "message."
          "error_code" is a string that uniquely identifies the type of error,
          enabling quick recognition and categorization of the issue. "message"
          provides a more detailed description of the error, offering insights
          into the issue and potentially how to rectify it.
        type: list<DeviceErrorsItem>
      warnings:
        docs: >-
          Array of warnings associated with the device. Each warning object
          within the array contains two fields: "warning_code" and "message."
          "warning_code" is a string that uniquely identifies the type of
          warning, enabling quick recognition and categorization of the issue.
          "message" provides a more detailed description of the warning,
          offering insights into the issue and potentially how to rectify it.
        type: list<DeviceWarningsItem>
      created_at:
        type: datetime
        docs: Date and time at which the device object was created.
      is_managed:
        type: boolean
        docs: Indicates whether Seam manages the device.
      custom_metadata: map<string, DeviceCustomMetadataValue>
      can_remotely_unlock: optional<boolean>
      can_remotely_lock: optional<boolean>
      can_program_offline_access_codes: optional<boolean>
      can_program_online_access_codes: optional<boolean>
      can_simulate_removal: optional<boolean>
      can_simulate_connection: optional<boolean>
      can_simulate_disconnection: optional<boolean>
    source:
      openapi: ../openapi.json
  UnmanagedDeviceDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    docs: Type of the device.
    inline: true
    source:
      openapi: ../openapi.json
  UnmanagedDeviceCapabilitiesSupportedItem:
    enum:
      - access_code
      - lock
      - noise_detection
      - thermostat
      - battery
      - phone
    inline: true
    source:
      openapi: ../openapi.json
  UnmanagedDeviceErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  UnmanagedDeviceWarningsItem:
    properties:
      warning_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  UnmanagedDevicePropertiesAccessoryKeypadBattery:
    docs: Indicates if the keypad battery properties.
    properties:
      level:
        type: double
        validation:
          min: 0
          max: 1
    source:
      openapi: ../openapi.json
    inline: true
  UnmanagedDevicePropertiesAccessoryKeypad:
    docs: Represents the accessory keypad state.
    properties:
      is_connected:
        type: boolean
        docs: Indicates if the accessory_keypad is connected to the device.
      battery:
        type: optional<UnmanagedDevicePropertiesAccessoryKeypadBattery>
        docs: Indicates if the keypad battery properties.
    source:
      openapi: ../openapi.json
    inline: true
  UnmanagedDevicePropertiesBatteryStatus:
    enum:
      - critical
      - low
      - good
      - full
    inline: true
    source:
      openapi: ../openapi.json
  UnmanagedDevicePropertiesBattery:
    docs: >-
      Represents the current status of the battery charge level. Values are
      "critical," which indicates an extremely low level, suggesting imminent
      shutdown or an urgent need for charging; "low," which signifies that the
      battery is under the preferred threshold and should be charged soon;
      "good," which denotes a satisfactory charge level, adequate for normal use
      without the immediate need for recharging; and "full," which represents a
      battery that is fully charged, providing the maximum duration of usage.
    properties:
      level:
        type: double
        validation:
          min: 0
          max: 1
      status: UnmanagedDevicePropertiesBatteryStatus
    source:
      openapi: ../openapi.json
    inline: true
  UnmanagedDevicePropertiesModel:
    properties:
      can_connect_accessory_keypad:
        type: optional<boolean>
        docs: Indicates whether the device can connect a accessory keypad.
      display_name:
        type: string
        docs: Display name of the device model.
      manufacturer_display_name:
        type: string
        docs: >-
          Display name that corresponds to the manufacturer-specific terminology
          for the device.
      has_built_in_keypad:
        type: optional<boolean>
        docs: Indicates whether the device has a built in accessory keypad.
      offline_access_codes_supported:
        type: optional<boolean>
        docs: Indicates whether the device supports offline access codes.
      online_access_codes_supported:
        type: optional<boolean>
        docs: Indicates whether the device supports online access codes.
      accessory_keypad_supported:
        type: optional<boolean>
        docs: |2-

                ---
                deprecated: use device.properties.model.can_connect_accessory_keypad
                ---
                
    source:
      openapi: ../openapi.json
    inline: true
  UnmanagedDeviceProperties:
    properties:
      accessory_keypad:
        type: optional<UnmanagedDevicePropertiesAccessoryKeypad>
        docs: Represents the accessory keypad state.
      name:
        type: string
        docs: |2-

                ---
                deprecated: use device.display_name instead
                ---
                Name of the device.
                
      online:
        type: boolean
        docs: Indicates whether the device is online.
      manufacturer:
        type: optional<string>
        docs: Manufacturer of the device.
      image_url:
        type: optional<string>
        docs: Image URL for the device.
        validation:
          format: uri
      image_alt_text:
        type: optional<string>
        docs: Alt text for the device image.
      battery_level:
        type: optional<double>
        docs: >-
          Indicates the battery level of the device as a decimal value between 0
          and 1, inclusive.
        validation:
          min: 0
          max: 1
      battery:
        type: optional<UnmanagedDevicePropertiesBattery>
        docs: >-
          Represents the current status of the battery charge level. Values are
          "critical," which indicates an extremely low level, suggesting
          imminent shutdown or an urgent need for charging; "low," which
          signifies that the battery is under the preferred threshold and should
          be charged soon; "good," which denotes a satisfactory charge level,
          adequate for normal use without the immediate need for recharging; and
          "full," which represents a battery that is fully charged, providing
          the maximum duration of usage.
      online_access_codes_enabled:
        type: optional<boolean>
        docs: >-
          Indicates whether it is currently possible to use online access codes
          for the device.
      offline_access_codes_enabled:
        type: optional<boolean>
        docs: >-
          Indicates whether it is currently possible to use offline access codes
          for the device.
      model: UnmanagedDevicePropertiesModel
    source:
      openapi: ../openapi.json
    inline: true
  UnmanagedDevice:
    properties:
      device_id:
        type: string
        docs: Unique identifier for the device.
        validation:
          format: uuid
      device_type:
        type: UnmanagedDeviceDeviceType
        docs: Type of the device.
      connected_account_id:
        type: string
        docs: Unique identifier for the account associated with the device.
        validation:
          format: uuid
      capabilities_supported:
        docs: >-
          Collection of capabilities that the device supports when connected to
          Seam. Values are "access_code," which indicates that the device can
          manage and utilize digital PIN codes for secure access; "lock," which
          indicates that the device controls a door locking mechanism, enabling
          the remote opening and closing of doors and other entry points;
          "noise_detection," which indicates that the device supports monitoring
          and responding to ambient noise levels; "thermostat," which indicates
          that the device can regulate and adjust indoor temperatures; and
          "battery," which indicates that the device can manage battery life and
          health.
        type: list<UnmanagedDeviceCapabilitiesSupportedItem>
      workspace_id:
        type: string
        docs: Unique identifier for the Seam workspace associated with the device.
        validation:
          format: uuid
      errors:
        docs: >-
          Array of errors associated with the device. Each error object within
          the array contains two fields: "error_code" and "message."
          "error_code" is a string that uniquely identifies the type of error,
          enabling quick recognition and categorization of the issue. "message"
          provides a more detailed description of the error, offering insights
          into the issue and potentially how to rectify it.
        type: list<UnmanagedDeviceErrorsItem>
      warnings:
        docs: >-
          Array of warnings associated with the device. Each warning object
          within the array contains two fields: "warning_code" and "message."
          "warning_code" is a string that uniquely identifies the type of
          warning, enabling quick recognition and categorization of the issue.
          "message" provides a more detailed description of the warning,
          offering insights into the issue and potentially how to rectify it.
        type: list<UnmanagedDeviceWarningsItem>
      created_at:
        type: datetime
        docs: Date and time at which the device object was created.
      is_managed: boolean
      properties: UnmanagedDeviceProperties
      can_remotely_unlock: optional<boolean>
      can_remotely_lock: optional<boolean>
      can_program_offline_access_codes: optional<boolean>
      can_program_online_access_codes: optional<boolean>
      can_simulate_removal: optional<boolean>
      can_simulate_connection: optional<boolean>
      can_simulate_disconnection: optional<boolean>
    source:
      openapi: ../openapi.json
  DeviceProviderDeviceProviderName:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - schlage
      - smartthings
      - yale
      - genie
      - doorking
      - salto
      - lockly
      - ttlock
      - linear
      - noiseaware
      - nuki
      - seam_relay_admin
      - igloo
      - kwikset
      - minut
      - my_2n
      - controlbyweb
      - nest
      - igloohome
      - ecobee
      - hubitat
      - four_suites
      - dormakaba_oracode
      - pti
      - wyze
      - seam_passport
      - visionline
      - assa_abloy_credential_service
      - seam_bridge
      - tedee
      - honeywell_resideo
      - latch
    inline: true
    source:
      openapi: ../openapi.json
  DeviceProviderProviderCategoriesItem:
    enum:
      - stable
      - consumer_smartlocks
      - thermostats
      - noise_sensors
      - access_control_systems
    inline: true
    source:
      openapi: ../openapi.json
  DeviceProvider:
    properties:
      device_provider_name: DeviceProviderDeviceProviderName
      display_name: string
      image_url: string
      provider_categories: list<DeviceProviderProviderCategoriesItem>
    source:
      openapi: ../openapi.json
  Event:
    properties:
      event_id:
        type: string
        validation:
          format: uuid
      device_id:
        type: optional<string>
        validation:
          format: uuid
      action_attempt_id:
        type: optional<string>
        validation:
          format: uuid
      acs_credential_id:
        type: optional<string>
        validation:
          format: uuid
      acs_user_id:
        type: optional<string>
        validation:
          format: uuid
      acs_system_id:
        type: optional<string>
        validation:
          format: uuid
      client_session_id:
        type: optional<string>
        validation:
          format: uuid
      enrollment_automation_id:
        type: optional<string>
        validation:
          format: uuid
      event_type: string
      workspace_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      occurred_at: datetime
    source:
      openapi: ../openapi.json
  NoiseThreshold:
    properties:
      noise_threshold_id:
        type: string
        validation:
          format: uuid
      device_id:
        type: string
        validation:
          format: uuid
      name: string
      noise_threshold_nrs: optional<double>
      starts_daily_at: string
      ends_daily_at: string
      noise_threshold_decibels: double
    source:
      openapi: ../openapi.json
  ServiceHealthStatus:
    enum:
      - healthy
      - degraded
      - down
    inline: true
    source:
      openapi: ../openapi.json
  ServiceHealth:
    properties:
      service: string
      status: ServiceHealthStatus
      description: string
    source:
      openapi: ../openapi.json
  Webhook:
    properties:
      webhook_id: string
      url: string
      event_types: optional<list<string>>
      secret: optional<string>
    source:
      openapi: ../openapi.json
  Workspace:
    properties:
      workspace_id:
        type: string
        validation:
          format: uuid
      name: string
      company_name: string
      is_sandbox: boolean
      connect_partner_name:
        type: optional<nullable<string>>
        docs: |2-

              ---
              deprecated: use company_name
              ---
            
    source:
      openapi: ../openapi.json
  AcsSystemExternalType:
    enum:
      - pti_site
      - alta_org
      - salto_site
      - brivo_account
      - hid_credential_manager_organization
      - visionline_system
      - assa_abloy_credential_service
      - latch_building
    inline: true
    source:
      openapi: ../openapi.json
  AcsSystemSystemType:
    enum:
      - pti_site
      - alta_org
      - salto_site
      - brivo_account
      - hid_credential_manager_organization
      - visionline_system
      - assa_abloy_credential_service
      - latch_building
    docs: |2-

            ---
            deprecated: use external_type
            ---
            
    inline: true
    source:
      openapi: ../openapi.json
  AcsSystemErrorsItemSeamBridgeDisconnected:
    properties:
      created_at: datetime
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  AcsSystemErrorsItemVisionlineInstanceUnreachable:
    properties:
      created_at: datetime
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  AcsSystemErrorsItem:
    discriminant: error_code
    base-properties: {}
    union:
      seam_bridge_disconnected: AcsSystemErrorsItemSeamBridgeDisconnected
      visionline_instance_unreachable: AcsSystemErrorsItemVisionlineInstanceUnreachable
    source:
      openapi: ../openapi.json
  AcsSystemWarningsItem:
    properties: {}
    source:
      openapi: ../openapi.json
    inline: true
  AcsSystem:
    properties:
      acs_system_id:
        type: string
        validation:
          format: uuid
      external_type: optional<AcsSystemExternalType>
      external_type_display_name: optional<string>
      system_type:
        type: optional<AcsSystemSystemType>
        docs: |2-

                ---
                deprecated: use external_type
                ---
                
      system_type_display_name:
        type: optional<string>
        docs: |2-

                ---
                deprecated: use external_type_display_name
                ---
                
      name: string
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
      connected_account_ids: list<string>
      image_url: string
      image_alt_text: string
      errors: list<AcsSystemErrorsItem>
      warnings: list<AcsSystemWarningsItem>
      can_automate_enrollment: optional<boolean>
      can_create_acs_access_groups: optional<boolean>
      can_remove_acs_users_from_acs_access_groups: optional<boolean>
      can_add_acs_users_to_acs_access_groups: optional<boolean>
    source:
      openapi: ../openapi.json
  AcsAccessGroupAccessGroupType:
    enum:
      - pti_unit
      - pti_access_level
      - salto_access_group
      - brivo_group
    docs: |2-

          ---
          deprecated: use external_type
          ---
        
    inline: true
    source:
      openapi: ../openapi.json
  AcsAccessGroupExternalType:
    enum:
      - pti_unit
      - pti_access_level
      - salto_access_group
      - brivo_group
    inline: true
    source:
      openapi: ../openapi.json
  AcsAccessGroup:
    properties:
      acs_access_group_id:
        type: string
        validation:
          format: uuid
      acs_system_id:
        type: string
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      name: string
      access_group_type:
        type: AcsAccessGroupAccessGroupType
        docs: |2-

              ---
              deprecated: use external_type
              ---
            
      access_group_type_display_name:
        type: string
        docs: |2-

              ---
              deprecated: use external_type_display_name
              ---
              
      display_name: string
      external_type: AcsAccessGroupExternalType
      external_type_display_name: string
      created_at: datetime
    source:
      openapi: ../openapi.json
  AcsUserExternalType:
    enum:
      - pti_user
      - brivo_user
      - hid_credential_manager_user
      - salto_site_user
      - latch_user
    inline: true
    source:
      openapi: ../openapi.json
  AcsUserAccessSchedule:
    properties:
      starts_at: datetime
      ends_at: datetime
    source:
      openapi: ../openapi.json
    inline: true
  AcsUser:
    properties:
      acs_user_id:
        type: string
        validation:
          format: uuid
      acs_system_id:
        type: string
        validation:
          format: uuid
      hid_acs_system_id:
        type: optional<string>
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      display_name: string
      external_type: optional<AcsUserExternalType>
      external_type_display_name: optional<string>
      is_suspended: boolean
      access_schedule: optional<AcsUserAccessSchedule>
      user_identity_id: optional<string>
      user_identity_full_name: optional<nullable<string>>
      user_identity_email_address: optional<nullable<string>>
      user_identity_phone_number: optional<nullable<string>>
      full_name: optional<string>
      email:
        type: optional<string>
        docs: |2-

              ---
              deprecated: use email_address.
              ---
              
        validation:
          format: email
      email_address:
        type: optional<string>
        validation:
          format: email
      phone_number: optional<nullable<string>>
    source:
      openapi: ../openapi.json
  AcsEntranceErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  AcsEntranceLatchMetadata:
    properties:
      accessibility_type: string
      door_name: string
      door_type: string
      is_connected: boolean
    source:
      openapi: ../openapi.json
    inline: true
  AcsEntranceVisionlineMetadataDoorCategory:
    enum:
      - entrance
      - guest
      - value: elevator reader
        name: ElevatorReader
      - common
      - value: common (PMS)
        name: CommonPms
    inline: true
    source:
      openapi: ../openapi.json
  AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType:
    enum:
      - BLE
      - commonDoor
      - touch
    inline: true
    source:
      openapi: ../openapi.json
  AcsEntranceVisionlineMetadataProfilesItem:
    properties:
      visionline_door_profile_id: string
      visionline_door_profile_type: AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType
    source:
      openapi: ../openapi.json
    inline: true
  AcsEntranceVisionlineMetadata:
    properties:
      door_name: string
      door_category: AcsEntranceVisionlineMetadataDoorCategory
      profiles: optional<list<AcsEntranceVisionlineMetadataProfilesItem>>
    source:
      openapi: ../openapi.json
    inline: true
  AcsEntrance:
    properties:
      acs_system_id:
        type: string
        validation:
          format: uuid
      acs_entrance_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      display_name: string
      errors: list<AcsEntranceErrorsItem>
      latch_metadata: optional<AcsEntranceLatchMetadata>
      visionline_metadata: optional<AcsEntranceVisionlineMetadata>
    source:
      openapi: ../openapi.json
  AcsCredentialProvisioningAutomation:
    properties:
      acs_credential_provisioning_automation_id:
        type: string
        validation:
          format: uuid
      credential_manager_acs_system_id:
        type: string
        validation:
          format: uuid
      user_identity_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  AcsCredentialPool:
    properties:
      acs_credential_pool_id:
        type: string
        validation:
          format: uuid
      acs_system_id:
        type: string
        validation:
          format: uuid
      display_name:
        type: string
        validation:
          minLength: 1
      external_type: literal<"hid_part_number">
      external_type_display_name: string
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  AcsCredentialAccessMethod:
    enum:
      - code
      - card
      - mobile_key
    inline: true
    source:
      openapi: ../openapi.json
  AcsCredentialExternalType:
    enum:
      - pti_card
      - brivo_credential
      - hid_credential
      - visionline_card
    inline: true
    source:
      openapi: ../openapi.json
  AcsCredentialErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  AcsCredentialWarningsItem:
    properties:
      warning_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  AcsCredentialVisionlineMetadataCardFunctionType:
    enum:
      - guest
      - staff
    inline: true
    source:
      openapi: ../openapi.json
  AcsCredentialVisionlineMetadata:
    properties:
      card_function_type: AcsCredentialVisionlineMetadataCardFunctionType
      joiner_acs_credential_ids: optional<list<string>>
      guest_acs_entrance_ids: optional<list<string>>
      common_acs_entrance_ids: optional<list<string>>
    source:
      openapi: ../openapi.json
    inline: true
  AcsCredential:
    properties:
      acs_credential_id:
        type: string
        validation:
          format: uuid
      acs_user_id:
        type: optional<string>
        validation:
          format: uuid
      acs_credential_pool_id:
        type: optional<string>
        validation:
          format: uuid
      acs_system_id:
        type: string
        validation:
          format: uuid
      parent_acs_credential_id:
        type: optional<string>
        validation:
          format: uuid
      display_name:
        type: string
        validation:
          minLength: 1
      code: optional<nullable<string>>
      access_method: AcsCredentialAccessMethod
      external_type: optional<AcsCredentialExternalType>
      external_type_display_name: optional<string>
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
      starts_at: optional<string>
      ends_at: optional<string>
      errors: list<AcsCredentialErrorsItem>
      warnings: list<AcsCredentialWarningsItem>
      is_multi_phone_sync_credential: optional<boolean>
      is_latest_desired_state_synced_with_provider: optional<boolean>
      latest_desired_state_synced_with_provider_at: optional<datetime>
      visionline_metadata: optional<AcsCredentialVisionlineMetadata>
    source:
      openapi: ../openapi.json
  EnrollmentAutomation:
    properties:
      credential_manager_acs_system_id:
        type: string
        validation:
          format: uuid
      user_identity_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
      enrollment_automation_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  PhoneDeviceType:
    enum:
      - android_phone
      - ios_phone
    inline: true
    source:
      openapi: ../openapi.json
  PhoneCapabilitiesSupportedItem:
    enum:
      - access_code
      - lock
      - noise_detection
      - thermostat
      - battery
      - phone
    inline: true
    source:
      openapi: ../openapi.json
  PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem:
    properties:
      endpoint_id: string
      is_active: boolean
    source:
      openapi: ../openapi.json
    inline: true
  PhonePropertiesAssaAbloyCredentialServiceMetadata:
    properties:
      has_active_endpoint: boolean
      endpoints: list<PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem>
    source:
      openapi: ../openapi.json
    inline: true
  PhoneProperties:
    properties:
      assa_abloy_credential_service_metadata: optional<PhonePropertiesAssaAbloyCredentialServiceMetadata>
    source:
      openapi: ../openapi.json
    inline: true
  PhoneLocation:
    docs: Location information for the device.
    properties:
      location_name:
        type: optional<string>
        docs: Name of the device location.
      timezone:
        type: optional<string>
        docs: Time zone of the device location.
    source:
      openapi: ../openapi.json
    inline: true
  PhoneErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  PhoneWarningsItem:
    properties:
      warning_code: string
      message: string
    source:
      openapi: ../openapi.json
    inline: true
  PhoneCustomMetadataValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  Phone:
    properties:
      device_id:
        type: string
        docs: Unique identifier for the device.
        validation:
          format: uuid
      device_type: PhoneDeviceType
      nickname:
        type: optional<string>
        docs: Optional nickname to describe the device, settable through Seam
      display_name:
        type: string
        docs: >-
          Display name of the device, defaults to nickname (if it is set) or
          properties.appearance.name otherwise. Enables administrators and users
          to identify the device easily, especially when there are numerous
          devices.
      capabilities_supported:
        docs: >-
          Collection of capabilities that the device supports when connected to
          Seam. Values are "access_code," which indicates that the device can
          manage and utilize digital PIN codes for secure access; "lock," which
          indicates that the device controls a door locking mechanism, enabling
          the remote opening and closing of doors and other entry points;
          "noise_detection," which indicates that the device supports monitoring
          and responding to ambient noise levels; "thermostat," which indicates
          that the device can regulate and adjust indoor temperatures; and
          "battery," which indicates that the device can manage battery life and
          health.
        type: list<PhoneCapabilitiesSupportedItem>
      properties: PhoneProperties
      location:
        type: optional<nullable<PhoneLocation>>
        docs: Location information for the device.
      workspace_id:
        type: string
        docs: Unique identifier for the Seam workspace associated with the device.
        validation:
          format: uuid
      errors:
        docs: >-
          Array of errors associated with the device. Each error object within
          the array contains two fields: "error_code" and "message."
          "error_code" is a string that uniquely identifies the type of error,
          enabling quick recognition and categorization of the issue. "message"
          provides a more detailed description of the error, offering insights
          into the issue and potentially how to rectify it.
        type: list<PhoneErrorsItem>
      warnings:
        docs: >-
          Array of warnings associated with the device. Each warning object
          within the array contains two fields: "warning_code" and "message."
          "warning_code" is a string that uniquely identifies the type of
          warning, enabling quick recognition and categorization of the issue.
          "message" provides a more detailed description of the warning,
          offering insights into the issue and potentially how to rectify it.
        type: list<PhoneWarningsItem>
      created_at:
        type: datetime
        docs: Date and time at which the device object was created.
      is_managed:
        type: boolean
        docs: Indicates whether Seam manages the device.
      custom_metadata: map<string, PhoneCustomMetadataValue>
      can_remotely_unlock: optional<boolean>
      can_remotely_lock: optional<boolean>
      can_program_offline_access_codes: optional<boolean>
      can_program_online_access_codes: optional<boolean>
      can_simulate_removal: optional<boolean>
      can_simulate_connection: optional<boolean>
      can_simulate_disconnection: optional<boolean>
    source:
      openapi: ../openapi.json
  UserIdentity:
    properties:
      user_identity_id:
        type: string
        validation:
          format: uuid
      user_identity_key:
        type: optional<nullable<string>>
        validation:
          minLength: 1
      email_address:
        type: optional<nullable<string>>
        validation:
          format: email
      phone_number: optional<nullable<string>>
      display_name:
        type: string
        validation:
          minLength: 1
      full_name:
        type: optional<nullable<string>>
        validation:
          minLength: 1
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  Network:
    properties:
      network_id:
        type: string
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      display_name: string
      created_at: datetime
    source:
      openapi: ../openapi.json
",
    },
    "accessCodes.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/create",
              "docs": undefined,
              "errors": [
                "root.CreateAccessCodesRequestBadRequestError",
                "root.CreateAccessCodesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "common_code_key": "common_code_key",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_backup": true,
                        "is_backup_access_code_available": true,
                        "is_external_modification_allowed": true,
                        "is_managed": true,
                        "is_offline_access_code": true,
                        "is_one_time_use": true,
                        "is_scheduled_on_device": true,
                        "is_waiting_for_code_assignment": true,
                        "name": "name",
                        "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "setting",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/create",
              "request": {
                "body": {
                  "properties": {
                    "allow_external_modification": "optional<boolean>",
                    "attempt_for_offline_device": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 9,
                        "minLength": 4,
                        "pattern": "^\d+$",
                      },
                    },
                    "common_code_key": "optional<string>",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_at": "optional<string>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "is_offline_access_code": "optional<boolean>",
                    "is_one_time_use": "optional<boolean>",
                    "max_time_rounding": {
                      "default": "1hour",
                      "type": "optional<CreateAccessCodesRequestMaxTimeRounding>",
                    },
                    "name": "optional<string>",
                    "prefer_native_scheduling": "optional<boolean>",
                    "starts_at": "optional<string>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                    "use_backup_access_code_pool": "optional<boolean>",
                    "use_offline_access_code": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateAccessCodesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_code",
                "status-code": 200,
                "type": "CreateAccessCodesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create_multiple": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/create_multiple",
              "docs": undefined,
              "errors": [
                "root.CreateMultipleAccessCodesRequestBadRequestError",
                "root.CreateMultipleAccessCodesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_ids": [
                      "device_ids",
                    ],
                  },
                  "response": {
                    "body": {
                      "access_codes": [
                        {
                          "access_code_id": "access_code_id",
                          "code": "code",
                          "common_code_key": "common_code_key",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "ends_at": "2024-01-15T09:30:00Z",
                          "errors": {
                            "key": "value",
                          },
                          "is_backup": true,
                          "is_backup_access_code_available": true,
                          "is_external_modification_allowed": true,
                          "is_managed": true,
                          "is_offline_access_code": true,
                          "is_one_time_use": true,
                          "is_scheduled_on_device": true,
                          "is_waiting_for_code_assignment": true,
                          "name": "name",
                          "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                          "starts_at": "2024-01-15T09:30:00Z",
                          "status": "setting",
                          "type": "time_bound",
                          "warnings": {
                            "key": "value",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/create_multiple",
              "request": {
                "body": {
                  "properties": {
                    "allow_external_modification": "optional<boolean>",
                    "attempt_for_offline_device": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "behavior_when_code_cannot_be_shared": {
                      "default": "throw",
                      "type": "optional<CreateMultipleAccessCodesRequestBehaviorWhenCodeCannotBeShared>",
                    },
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 9,
                        "minLength": 4,
                        "pattern": "^\d+$",
                      },
                    },
                    "device_ids": "list<string>",
                    "ends_at": "optional<string>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "is_offline_access_code": "optional<boolean>",
                    "is_one_time_use": "optional<boolean>",
                    "max_time_rounding": {
                      "default": "1hour",
                      "type": "optional<CreateMultipleAccessCodesRequestMaxTimeRounding>",
                    },
                    "name": "optional<string>",
                    "prefer_native_scheduling": "optional<boolean>",
                    "preferred_code_length": "optional<double>",
                    "starts_at": "optional<string>",
                    "use_backup_access_code_pool": "optional<boolean>",
                    "use_offline_access_code": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateMultipleAccessCodesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_codes",
                "status-code": 200,
                "type": "CreateMultipleAccessCodesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteAccessCodesRequestBadRequestError",
                "root.DeleteAccessCodesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/delete",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteAccessCodesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteAccessCodesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "generate_code": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/generate_code",
              "docs": undefined,
              "errors": [
                "root.GenerateCodeAccessCodesRequestBadRequestError",
                "root.GenerateCodeAccessCodesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "generated_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "common_code_key": "common_code_key",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_backup": true,
                        "is_backup_access_code_available": true,
                        "is_external_modification_allowed": true,
                        "is_managed": true,
                        "is_offline_access_code": true,
                        "is_one_time_use": true,
                        "is_scheduled_on_device": true,
                        "is_waiting_for_code_assignment": true,
                        "name": "name",
                        "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "setting",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/generate_code",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GenerateCodeAccessCodesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "generated_code",
                "status-code": 200,
                "type": "GenerateCodeAccessCodesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "access_token": [],
                },
                {
                  "user_session": [],
                },
                {
                  "client_session": [],
                },
              ],
              "display-name": "/access_codes/get",
              "docs": undefined,
              "errors": [
                "root.GetAccessCodesRequestBadRequestError",
                "root.GetAccessCodesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "common_code_key": "common_code_key",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_backup": true,
                        "is_backup_access_code_available": true,
                        "is_external_modification_allowed": true,
                        "is_managed": true,
                        "is_offline_access_code": true,
                        "is_one_time_use": true,
                        "is_scheduled_on_device": true,
                        "is_waiting_for_code_assignment": true,
                        "name": "name",
                        "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "setting",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/get",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "code": "optional<string>",
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetAccessCodesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_code",
                "status-code": 200,
                "type": "GetAccessCodesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/list",
              "docs": undefined,
              "errors": [
                "root.ListAccessCodesRequestBadRequestError",
                "root.ListAccessCodesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "access_codes": [
                        {
                          "access_code_id": "access_code_id",
                          "code": "code",
                          "common_code_key": "common_code_key",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "ends_at": "2024-01-15T09:30:00Z",
                          "errors": {
                            "key": "value",
                          },
                          "is_backup": true,
                          "is_backup_access_code_available": true,
                          "is_external_modification_allowed": true,
                          "is_managed": true,
                          "is_offline_access_code": true,
                          "is_one_time_use": true,
                          "is_scheduled_on_device": true,
                          "is_waiting_for_code_assignment": true,
                          "name": "name",
                          "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                          "starts_at": "2024-01-15T09:30:00Z",
                          "status": "setting",
                          "type": "time_bound",
                          "warnings": {
                            "key": "value",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/list",
              "request": {
                "body": {
                  "properties": {
                    "access_code_ids": "optional<list<string>>",
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListAccessCodesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_codes",
                "status-code": 200,
                "type": "ListAccessCodesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "pull_backup_access_code": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/pull_backup_access_code",
              "docs": undefined,
              "errors": [
                "root.PullBackupAccessCodeAccessCodesRequestBadRequestError",
                "root.PullBackupAccessCodeAccessCodesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "backup_access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "common_code_key": "common_code_key",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_backup": true,
                        "is_backup_access_code_available": true,
                        "is_external_modification_allowed": true,
                        "is_managed": true,
                        "is_offline_access_code": true,
                        "is_one_time_use": true,
                        "is_scheduled_on_device": true,
                        "is_waiting_for_code_assignment": true,
                        "name": "name",
                        "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "setting",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/pull_backup_access_code",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "PullBackupAccessCodeAccessCodesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "backup_access_code",
                "status-code": 200,
                "type": "PullBackupAccessCodeAccessCodesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/update",
              "docs": undefined,
              "errors": [
                "root.UpdateAccessCodesRequestBadRequestError",
                "root.UpdateAccessCodesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/update",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "allow_external_modification": "optional<boolean>",
                    "attempt_for_offline_device": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 9,
                        "minLength": 4,
                        "pattern": "^\d+$",
                      },
                    },
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_at": "optional<string>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "is_managed": "optional<boolean>",
                    "is_offline_access_code": "optional<boolean>",
                    "is_one_time_use": "optional<boolean>",
                    "max_time_rounding": {
                      "default": "1hour",
                      "type": "optional<UpdateAccessCodesRequestMaxTimeRounding>",
                    },
                    "name": "optional<string>",
                    "prefer_native_scheduling": "optional<boolean>",
                    "starts_at": "optional<string>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                    "type": "optional<UpdateAccessCodesRequestType>",
                    "use_backup_access_code_pool": "optional<boolean>",
                    "use_offline_access_code": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateAccessCodesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateAccessCodesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateAccessCodesRequestMaxTimeRounding": {
            "default": "1hour",
            "enum": [
              {
                "name": "OneHour",
                "value": "1hour",
              },
              {
                "name": "OneDay",
                "value": "1day",
              },
              {
                "name": "OneH",
                "value": "1h",
              },
              {
                "name": "OneD",
                "value": "1d",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateAccessCodesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_code": "root.AccessCode",
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateMultipleAccessCodesRequestBehaviorWhenCodeCannotBeShared": {
            "default": "throw",
            "enum": [
              "throw",
              "create_random_code",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateMultipleAccessCodesRequestMaxTimeRounding": {
            "default": "1hour",
            "enum": [
              {
                "name": "OneHour",
                "value": "1hour",
              },
              {
                "name": "OneDay",
                "value": "1day",
              },
              {
                "name": "OneH",
                "value": "1h",
              },
              {
                "name": "OneD",
                "value": "1d",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateMultipleAccessCodesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_codes": "list<root.AccessCode>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteAccessCodesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GenerateCodeAccessCodesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "generated_code": "root.AccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetAccessCodesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_code": "root.AccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListAccessCodesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_codes": "list<root.AccessCode>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PullBackupAccessCodeAccessCodesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "backup_access_code": "root.AccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateAccessCodesRequestMaxTimeRounding": {
            "default": "1hour",
            "enum": [
              {
                "name": "OneHour",
                "value": "1hour",
              },
              {
                "name": "OneDay",
                "value": "1day",
              },
              {
                "name": "OneH",
                "value": "1h",
              },
              {
                "name": "OneD",
                "value": "1d",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateAccessCodesRequestType": {
            "enum": [
              "ongoing",
              "time_bound",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateAccessCodesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  CreateAccessCodesRequestMaxTimeRounding:
    enum:
      - value: 1hour
        name: OneHour
      - value: 1day
        name: OneDay
      - value: 1h
        name: OneH
      - value: 1d
        name: OneD
    default: 1hour
    inline: true
    source:
      openapi: ../openapi.json
  CreateAccessCodesResponse:
    properties:
      action_attempt: root.ActionAttempt
      access_code: root.AccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  CreateMultipleAccessCodesRequestBehaviorWhenCodeCannotBeShared:
    enum:
      - throw
      - create_random_code
    default: throw
    inline: true
    source:
      openapi: ../openapi.json
  CreateMultipleAccessCodesRequestMaxTimeRounding:
    enum:
      - value: 1hour
        name: OneHour
      - value: 1day
        name: OneDay
      - value: 1h
        name: OneH
      - value: 1d
        name: OneD
    default: 1hour
    inline: true
    source:
      openapi: ../openapi.json
  CreateMultipleAccessCodesResponse:
    properties:
      access_codes: list<root.AccessCode>
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteAccessCodesResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  GenerateCodeAccessCodesResponse:
    properties:
      generated_code: root.AccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  GetAccessCodesResponse:
    properties:
      access_code: root.AccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  ListAccessCodesResponse:
    properties:
      access_codes: list<root.AccessCode>
      ok: boolean
    source:
      openapi: ../openapi.json
  PullBackupAccessCodeAccessCodesResponse:
    properties:
      backup_access_code: root.AccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateAccessCodesRequestMaxTimeRounding:
    enum:
      - value: 1hour
        name: OneHour
      - value: 1day
        name: OneDay
      - value: 1h
        name: OneH
      - value: 1d
        name: OneD
    default: 1hour
    inline: true
    source:
      openapi: ../openapi.json
  UpdateAccessCodesRequestType:
    enum:
      - ongoing
      - time_bound
    inline: true
    source:
      openapi: ../openapi.json
  UpdateAccessCodesResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /access_codes/create
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/create
      request:
        name: CreateAccessCodesRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            name: optional<string>
            starts_at: optional<string>
            ends_at: optional<string>
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
                minLength: 4
                maxLength: 9
            sync:
              type: optional<boolean>
              default: false
            attempt_for_offline_device:
              type: optional<boolean>
              default: true
            common_code_key: optional<string>
            prefer_native_scheduling: optional<boolean>
            use_backup_access_code_pool: optional<boolean>
            allow_external_modification: optional<boolean>
            is_external_modification_allowed: optional<boolean>
            use_offline_access_code: optional<boolean>
            is_offline_access_code: optional<boolean>
            is_one_time_use: optional<boolean>
            max_time_rounding:
              type: optional<CreateAccessCodesRequestMaxTimeRounding>
              default: 1hour
        content-type: application/json
      response:
        docs: OK
        type: CreateAccessCodesResponse
        status-code: 200
        property: access_code
      errors:
        - root.CreateAccessCodesRequestBadRequestError
        - root.CreateAccessCodesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              access_code:
                common_code_key: common_code_key
                is_scheduled_on_device: true
                type: time_bound
                is_waiting_for_code_assignment: true
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: setting
                is_backup_access_code_available: true
                is_backup: true
                pulled_backup_access_code_id: pulled_backup_access_code_id
                is_external_modification_allowed: true
                is_one_time_use: true
                is_offline_access_code: true
              ok: true
    create_multiple:
      path: /access_codes/create_multiple
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/create_multiple
      request:
        name: CreateMultipleAccessCodesRequest
        body:
          properties:
            device_ids: list<string>
            behavior_when_code_cannot_be_shared:
              type: >-
                optional<CreateMultipleAccessCodesRequestBehaviorWhenCodeCannotBeShared>
              default: throw
            preferred_code_length: optional<double>
            name: optional<string>
            starts_at: optional<string>
            ends_at: optional<string>
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
                minLength: 4
                maxLength: 9
            attempt_for_offline_device:
              type: optional<boolean>
              default: true
            prefer_native_scheduling: optional<boolean>
            use_backup_access_code_pool: optional<boolean>
            allow_external_modification: optional<boolean>
            is_external_modification_allowed: optional<boolean>
            use_offline_access_code: optional<boolean>
            is_offline_access_code: optional<boolean>
            is_one_time_use: optional<boolean>
            max_time_rounding:
              type: optional<CreateMultipleAccessCodesRequestMaxTimeRounding>
              default: 1hour
        content-type: application/json
      response:
        docs: OK
        type: CreateMultipleAccessCodesResponse
        status-code: 200
        property: access_codes
      errors:
        - root.CreateMultipleAccessCodesRequestBadRequestError
        - root.CreateMultipleAccessCodesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_ids:
              - device_ids
          response:
            body:
              access_codes:
                - common_code_key: common_code_key
                  is_scheduled_on_device: true
                  type: time_bound
                  is_waiting_for_code_assignment: true
                  access_code_id: access_code_id
                  device_id: device_id
                  name: name
                  code: code
                  created_at: '2024-01-15T09:30:00Z'
                  errors:
                    key: value
                  warnings:
                    key: value
                  is_managed: true
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                  status: setting
                  is_backup_access_code_available: true
                  is_backup: true
                  pulled_backup_access_code_id: pulled_backup_access_code_id
                  is_external_modification_allowed: true
                  is_one_time_use: true
                  is_offline_access_code: true
              ok: true
    delete:
      path: /access_codes/delete
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/delete
      request:
        name: DeleteAccessCodesRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: DeleteAccessCodesResponse
        status-code: 200
      errors:
        - root.DeleteAccessCodesRequestBadRequestError
        - root.DeleteAccessCodesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            access_code_id: access_code_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    generate_code:
      path: /access_codes/generate_code
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/generate_code
      request:
        name: GenerateCodeAccessCodesRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GenerateCodeAccessCodesResponse
        status-code: 200
        property: generated_code
      errors:
        - root.GenerateCodeAccessCodesRequestBadRequestError
        - root.GenerateCodeAccessCodesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              generated_code:
                common_code_key: common_code_key
                is_scheduled_on_device: true
                type: time_bound
                is_waiting_for_code_assignment: true
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: setting
                is_backup_access_code_available: true
                is_backup: true
                pulled_backup_access_code_id: pulled_backup_access_code_id
                is_external_modification_allowed: true
                is_one_time_use: true
                is_offline_access_code: true
              ok: true
    get:
      path: /access_codes/get
      method: POST
      auth:
        - api_key: []
        - access_token: []
        - user_session: []
        - client_session: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/get
      request:
        name: GetAccessCodesRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_id:
              type: optional<string>
              validation:
                format: uuid
            code: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: GetAccessCodesResponse
        status-code: 200
        property: access_code
      errors:
        - root.GetAccessCodesRequestBadRequestError
        - root.GetAccessCodesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              access_code:
                common_code_key: common_code_key
                is_scheduled_on_device: true
                type: time_bound
                is_waiting_for_code_assignment: true
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: setting
                is_backup_access_code_available: true
                is_backup: true
                pulled_backup_access_code_id: pulled_backup_access_code_id
                is_external_modification_allowed: true
                is_one_time_use: true
                is_offline_access_code: true
              ok: true
    list:
      path: /access_codes/list
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/list
      request:
        name: ListAccessCodesRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_ids: optional<list<string>>
            user_identifier_key: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: ListAccessCodesResponse
        status-code: 200
        property: access_codes
      errors:
        - root.ListAccessCodesRequestBadRequestError
        - root.ListAccessCodesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              access_codes:
                - common_code_key: common_code_key
                  is_scheduled_on_device: true
                  type: time_bound
                  is_waiting_for_code_assignment: true
                  access_code_id: access_code_id
                  device_id: device_id
                  name: name
                  code: code
                  created_at: '2024-01-15T09:30:00Z'
                  errors:
                    key: value
                  warnings:
                    key: value
                  is_managed: true
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                  status: setting
                  is_backup_access_code_available: true
                  is_backup: true
                  pulled_backup_access_code_id: pulled_backup_access_code_id
                  is_external_modification_allowed: true
                  is_one_time_use: true
                  is_offline_access_code: true
              ok: true
    pull_backup_access_code:
      path: /access_codes/pull_backup_access_code
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/pull_backup_access_code
      request:
        name: PullBackupAccessCodeAccessCodesRequest
        body:
          properties:
            access_code_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: PullBackupAccessCodeAccessCodesResponse
        status-code: 200
        property: backup_access_code
      errors:
        - root.PullBackupAccessCodeAccessCodesRequestBadRequestError
        - root.PullBackupAccessCodeAccessCodesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            access_code_id: access_code_id
          response:
            body:
              backup_access_code:
                common_code_key: common_code_key
                is_scheduled_on_device: true
                type: time_bound
                is_waiting_for_code_assignment: true
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: setting
                is_backup_access_code_available: true
                is_backup: true
                pulled_backup_access_code_id: pulled_backup_access_code_id
                is_external_modification_allowed: true
                is_one_time_use: true
                is_offline_access_code: true
              ok: true
    update:
      path: /access_codes/update
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/update
      request:
        name: UpdateAccessCodesRequest
        body:
          properties:
            name: optional<string>
            starts_at: optional<string>
            ends_at: optional<string>
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
                minLength: 4
                maxLength: 9
            sync:
              type: optional<boolean>
              default: false
            attempt_for_offline_device:
              type: optional<boolean>
              default: true
            prefer_native_scheduling: optional<boolean>
            use_backup_access_code_pool: optional<boolean>
            allow_external_modification: optional<boolean>
            is_external_modification_allowed: optional<boolean>
            use_offline_access_code: optional<boolean>
            is_offline_access_code: optional<boolean>
            is_one_time_use: optional<boolean>
            max_time_rounding:
              type: optional<UpdateAccessCodesRequestMaxTimeRounding>
              default: 1hour
            access_code_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: optional<string>
              validation:
                format: uuid
            type: optional<UpdateAccessCodesRequestType>
            is_managed: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: UpdateAccessCodesResponse
        status-code: 200
      errors:
        - root.UpdateAccessCodesRequestBadRequestError
        - root.UpdateAccessCodesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            access_code_id: access_code_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "accessCodes/simulate.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create_unmanaged_access_code": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/simulate/create_unmanaged_access_code",
              "docs": undefined,
              "errors": [
                "root.CreateUnmanagedAccessCodeSimulateRequestBadRequestError",
                "root.CreateUnmanagedAccessCodeSimulateRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "code": "code",
                    "device_id": "device_id",
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_managed": true,
                        "name": "name",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "set",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/simulate/create_unmanaged_access_code",
              "request": {
                "body": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": 8,
                        "minLength": 4,
                        "pattern": "^\d+$",
                      },
                    },
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateUnmanagedAccessCodeSimulateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_code",
                "status-code": 200,
                "type": "CreateUnmanagedAccessCodeSimulateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateUnmanagedAccessCodeSimulateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_code": "root.UnmanagedAccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  CreateUnmanagedAccessCodeSimulateResponse:
    properties:
      access_code: root.UnmanagedAccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    create_unmanaged_access_code:
      path: /access_codes/simulate/create_unmanaged_access_code
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/simulate/create_unmanaged_access_code
      request:
        name: CreateUnmanagedAccessCodeSimulateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            name: string
            code:
              type: string
              validation:
                pattern: ^\d+$
                minLength: 4
                maxLength: 8
        content-type: application/json
      response:
        docs: OK
        type: CreateUnmanagedAccessCodeSimulateResponse
        status-code: 200
        property: access_code
      errors:
        - root.CreateUnmanagedAccessCodeSimulateRequestBadRequestError
        - root.CreateUnmanagedAccessCodeSimulateRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
            name: name
            code: code
          response:
            body:
              access_code:
                type: time_bound
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: set
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "accessCodes/unmanaged.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "convert_to_managed": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/unmanaged/convert_to_managed",
              "docs": undefined,
              "errors": [
                "root.ConvertToManagedUnmanagedRequestBadRequestError",
                "root.ConvertToManagedUnmanagedRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/convert_to_managed",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "allow_external_modification": "optional<boolean>",
                    "force": "optional<boolean>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConvertToManagedUnmanagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "ConvertToManagedUnmanagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/unmanaged/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteUnmanagedRequestBadRequestError",
                "root.DeleteUnmanagedRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/delete",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteUnmanagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteUnmanagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/unmanaged/get",
              "docs": undefined,
              "errors": [
                "root.GetUnmanagedRequestBadRequestError",
                "root.GetUnmanagedRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_managed": true,
                        "name": "name",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "set",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/get",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "code": "optional<string>",
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetUnmanagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_code",
                "status-code": 200,
                "type": "GetUnmanagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/unmanaged/list",
              "docs": undefined,
              "errors": [
                "root.ListUnmanagedRequestBadRequestError",
                "root.ListUnmanagedRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "access_codes": [
                        {
                          "access_code_id": "access_code_id",
                          "code": "code",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "ends_at": "2024-01-15T09:30:00Z",
                          "errors": {
                            "key": "value",
                          },
                          "is_managed": true,
                          "name": "name",
                          "starts_at": "2024-01-15T09:30:00Z",
                          "status": "set",
                          "type": "time_bound",
                          "warnings": {
                            "key": "value",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/list",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListUnmanagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_codes",
                "status-code": 200,
                "type": "ListUnmanagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/access_codes/unmanaged/update",
              "docs": undefined,
              "errors": [
                "root.UpdateUnmanagedRequestBadRequestError",
                "root.UpdateUnmanagedRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "access_code_id": "access_code_id",
                    "is_managed": true,
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/update",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "allow_external_modification": "optional<boolean>",
                    "force": "optional<boolean>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "is_managed": "boolean",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateUnmanagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateUnmanagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ConvertToManagedUnmanagedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteUnmanagedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetUnmanagedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_code": "root.UnmanagedAccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUnmanagedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_codes": "list<root.UnmanagedAccessCode>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateUnmanagedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  ConvertToManagedUnmanagedResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteUnmanagedResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  GetUnmanagedResponse:
    properties:
      access_code: root.UnmanagedAccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  ListUnmanagedResponse:
    properties:
      access_codes: list<root.UnmanagedAccessCode>
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateUnmanagedResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    convert_to_managed:
      path: /access_codes/unmanaged/convert_to_managed
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/convert_to_managed
      request:
        name: ConvertToManagedUnmanagedRequest
        body:
          properties:
            access_code_id:
              type: string
              validation:
                format: uuid
            is_external_modification_allowed: optional<boolean>
            allow_external_modification: optional<boolean>
            force: optional<boolean>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: ConvertToManagedUnmanagedResponse
        status-code: 200
      errors:
        - root.ConvertToManagedUnmanagedRequestBadRequestError
        - root.ConvertToManagedUnmanagedRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            access_code_id: access_code_id
          response:
            body:
              ok: true
    delete:
      path: /access_codes/unmanaged/delete
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/delete
      request:
        name: DeleteUnmanagedRequest
        body:
          properties:
            access_code_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: DeleteUnmanagedResponse
        status-code: 200
      errors:
        - root.DeleteUnmanagedRequestBadRequestError
        - root.DeleteUnmanagedRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            access_code_id: access_code_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    get:
      path: /access_codes/unmanaged/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/get
      request:
        name: GetUnmanagedRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_id:
              type: optional<string>
              validation:
                format: uuid
            code: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: GetUnmanagedResponse
        status-code: 200
        property: access_code
      errors:
        - root.GetUnmanagedRequestBadRequestError
        - root.GetUnmanagedRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              access_code:
                type: time_bound
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: set
              ok: true
    list:
      path: /access_codes/unmanaged/list
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/list
      request:
        name: ListUnmanagedRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            user_identifier_key: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: ListUnmanagedResponse
        status-code: 200
        property: access_codes
      errors:
        - root.ListUnmanagedRequestBadRequestError
        - root.ListUnmanagedRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              access_codes:
                - type: time_bound
                  access_code_id: access_code_id
                  device_id: device_id
                  name: name
                  code: code
                  created_at: '2024-01-15T09:30:00Z'
                  errors:
                    key: value
                  warnings:
                    key: value
                  is_managed: true
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                  status: set
              ok: true
    update:
      path: /access_codes/unmanaged/update
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/update
      request:
        name: UpdateUnmanagedRequest
        body:
          properties:
            access_code_id:
              type: string
              validation:
                format: uuid
            is_managed: boolean
            allow_external_modification: optional<boolean>
            is_external_modification_allowed: optional<boolean>
            force: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: UpdateUnmanagedResponse
        status-code: 200
      errors:
        - root.UpdateUnmanagedRequestBadRequestError
        - root.UpdateUnmanagedRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            access_code_id: access_code_id
            is_managed: true
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/accessGroups.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "add_user": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/access_groups/add_user",
              "docs": undefined,
              "errors": [
                "root.AddUserAccessGroupsRequestBadRequestError",
                "root.AddUserAccessGroupsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/add_user",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AddUserAccessGroupsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "AddUserAccessGroupsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/access_groups/get",
              "docs": undefined,
              "errors": [
                "root.GetAccessGroupsRequestBadRequestError",
                "root.GetAccessGroupsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                  },
                  "response": {
                    "body": {
                      "acs_access_group": {
                        "access_group_type": "pti_unit",
                        "access_group_type_display_name": "access_group_type_display_name",
                        "acs_access_group_id": "acs_access_group_id",
                        "acs_system_id": "acs_system_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "external_type": "pti_unit",
                        "external_type_display_name": "external_type_display_name",
                        "name": "name",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetAccessGroupsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_access_group",
                "status-code": 200,
                "type": "GetAccessGroupsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/access_groups/list",
              "docs": undefined,
              "errors": [
                "root.ListAccessGroupsRequestBadRequestError",
                "root.ListAccessGroupsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "acs_access_groups": [
                        {
                          "access_group_type": "pti_unit",
                          "access_group_type_display_name": "access_group_type_display_name",
                          "acs_access_group_id": "acs_access_group_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "external_type": "pti_unit",
                          "external_type_display_name": "external_type_display_name",
                          "name": "name",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/list",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListAccessGroupsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_access_groups",
                "status-code": 200,
                "type": "ListAccessGroupsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_users": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/access_groups/list_users",
              "docs": undefined,
              "errors": [
                "root.ListUsersAccessGroupsRequestBadRequestError",
                "root.ListUsersAccessGroupsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                  },
                  "response": {
                    "body": {
                      "acs_users": [
                        {
                          "access_schedule": {
                            "ends_at": "2024-01-15T09:30:00Z",
                            "starts_at": "2024-01-15T09:30:00Z",
                          },
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "email": "email",
                          "email_address": "email_address",
                          "external_type": "pti_user",
                          "external_type_display_name": "external_type_display_name",
                          "full_name": "full_name",
                          "hid_acs_system_id": "hid_acs_system_id",
                          "is_suspended": true,
                          "phone_number": "phone_number",
                          "user_identity_email_address": "user_identity_email_address",
                          "user_identity_full_name": "user_identity_full_name",
                          "user_identity_id": "user_identity_id",
                          "user_identity_phone_number": "user_identity_phone_number",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/list_users",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListUsersAccessGroupsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_users",
                "status-code": 200,
                "type": "ListUsersAccessGroupsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove_user": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/access_groups/remove_user",
              "docs": undefined,
              "errors": [
                "root.RemoveUserAccessGroupsRequestBadRequestError",
                "root.RemoveUserAccessGroupsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/remove_user",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RemoveUserAccessGroupsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "RemoveUserAccessGroupsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "AddUserAccessGroupsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetAccessGroupsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_access_group": "root.AcsAccessGroup",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListAccessGroupsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_access_groups": "list<root.AcsAccessGroup>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUsersAccessGroupsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_users": "list<root.AcsUser>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RemoveUserAccessGroupsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  AddUserAccessGroupsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetAccessGroupsResponse:
    properties:
      acs_access_group: root.AcsAccessGroup
      ok: boolean
    source:
      openapi: ../openapi.json
  ListAccessGroupsResponse:
    properties:
      acs_access_groups: list<root.AcsAccessGroup>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListUsersAccessGroupsResponse:
    properties:
      acs_users: list<root.AcsUser>
      ok: boolean
    source:
      openapi: ../openapi.json
  RemoveUserAccessGroupsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    add_user:
      path: /acs/access_groups/add_user
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/add_user
      request:
        name: AddUserAccessGroupsRequest
        body:
          properties:
            acs_access_group_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AddUserAccessGroupsResponse
        status-code: 200
      errors:
        - root.AddUserAccessGroupsRequestBadRequestError
        - root.AddUserAccessGroupsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_access_group_id: acs_access_group_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    get:
      path: /acs/access_groups/get
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/get
      request:
        name: GetAccessGroupsRequest
        body:
          properties:
            acs_access_group_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetAccessGroupsResponse
        status-code: 200
        property: acs_access_group
      errors:
        - root.GetAccessGroupsRequestBadRequestError
        - root.GetAccessGroupsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_access_group_id: acs_access_group_id
          response:
            body:
              acs_access_group:
                acs_access_group_id: acs_access_group_id
                acs_system_id: acs_system_id
                workspace_id: workspace_id
                name: name
                access_group_type: pti_unit
                access_group_type_display_name: access_group_type_display_name
                display_name: display_name
                external_type: pti_unit
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
              ok: true
    list:
      path: /acs/access_groups/list
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/list
      request:
        name: ListAccessGroupsRequest
        body:
          properties:
            acs_system_id:
              type: optional<string>
              validation:
                format: uuid
            acs_user_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListAccessGroupsResponse
        status-code: 200
        property: acs_access_groups
      errors:
        - root.ListAccessGroupsRequestBadRequestError
        - root.ListAccessGroupsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              acs_access_groups:
                - acs_access_group_id: acs_access_group_id
                  acs_system_id: acs_system_id
                  workspace_id: workspace_id
                  name: name
                  access_group_type: pti_unit
                  access_group_type_display_name: access_group_type_display_name
                  display_name: display_name
                  external_type: pti_unit
                  external_type_display_name: external_type_display_name
                  created_at: '2024-01-15T09:30:00Z'
              ok: true
    list_users:
      path: /acs/access_groups/list_users
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/list_users
      request:
        name: ListUsersAccessGroupsRequest
        body:
          properties:
            acs_access_group_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListUsersAccessGroupsResponse
        status-code: 200
        property: acs_users
      errors:
        - root.ListUsersAccessGroupsRequestBadRequestError
        - root.ListUsersAccessGroupsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_access_group_id: acs_access_group_id
          response:
            body:
              acs_users:
                - acs_user_id: acs_user_id
                  acs_system_id: acs_system_id
                  hid_acs_system_id: hid_acs_system_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  external_type: pti_user
                  external_type_display_name: external_type_display_name
                  is_suspended: true
                  access_schedule:
                    starts_at: '2024-01-15T09:30:00Z'
                    ends_at: '2024-01-15T09:30:00Z'
                  user_identity_id: user_identity_id
                  user_identity_full_name: user_identity_full_name
                  user_identity_email_address: user_identity_email_address
                  user_identity_phone_number: user_identity_phone_number
                  full_name: full_name
                  email: email
                  email_address: email_address
                  phone_number: phone_number
              ok: true
    remove_user:
      path: /acs/access_groups/remove_user
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/remove_user
      request:
        name: RemoveUserAccessGroupsRequest
        body:
          properties:
            acs_access_group_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: RemoveUserAccessGroupsResponse
        status-code: 200
      errors:
        - root.RemoveUserAccessGroupsRequestBadRequestError
        - root.RemoveUserAccessGroupsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_access_group_id: acs_access_group_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/credentialPools.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "list": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/credential_pools/list",
              "docs": undefined,
              "errors": [
                "root.ListCredentialPoolsRequestBadRequestError",
                "root.ListCredentialPoolsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_system_id": "acs_system_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential_pools": [
                        {
                          "acs_credential_pool_id": "acs_credential_pool_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "external_type": "hid_part_number",
                          "external_type_display_name": "external_type_display_name",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credential_pools/list",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListCredentialPoolsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credential_pools",
                "status-code": 200,
                "type": "ListCredentialPoolsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ListCredentialPoolsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential_pools": "list<root.AcsCredentialPool>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  ListCredentialPoolsResponse:
    properties:
      acs_credential_pools: list<root.AcsCredentialPool>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /acs/credential_pools/list
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credential_pools/list
      request:
        name: ListCredentialPoolsRequest
        body:
          properties:
            acs_system_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListCredentialPoolsResponse
        status-code: 200
        property: acs_credential_pools
      errors:
        - root.ListCredentialPoolsRequestBadRequestError
        - root.ListCredentialPoolsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_system_id: acs_system_id
          response:
            body:
              acs_credential_pools:
                - acs_credential_pool_id: acs_credential_pool_id
                  acs_system_id: acs_system_id
                  display_name: display_name
                  external_type: hid_part_number
                  external_type_display_name: external_type_display_name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/credentialProvisioningAutomations.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "launch": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/credential_provisioning_automations/launch",
              "docs": undefined,
              "errors": [
                "root.LaunchCredentialProvisioningAutomationsRequestBadRequestError",
                "root.LaunchCredentialProvisioningAutomationsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential_provisioning_automation": {
                        "acs_credential_provisioning_automation_id": "acs_credential_provisioning_automation_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                        "user_identity_id": "user_identity_id",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credential_provisioning_automations/launch",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_pool_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "create_credential_manager_user": "optional<boolean>",
                    "credential_manager_acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "credential_manager_acs_user_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LaunchCredentialProvisioningAutomationsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credential_provisioning_automation",
                "status-code": 200,
                "type": "LaunchCredentialProvisioningAutomationsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "LaunchCredentialProvisioningAutomationsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential_provisioning_automation": "root.AcsCredentialProvisioningAutomation",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  LaunchCredentialProvisioningAutomationsResponse:
    properties:
      acs_credential_provisioning_automation: root.AcsCredentialProvisioningAutomation
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    launch:
      path: /acs/credential_provisioning_automations/launch
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credential_provisioning_automations/launch
      request:
        name: LaunchCredentialProvisioningAutomationsRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            credential_manager_acs_system_id:
              type: string
              validation:
                format: uuid
            acs_credential_pool_id:
              type: optional<string>
              validation:
                format: uuid
            create_credential_manager_user: optional<boolean>
            credential_manager_acs_user_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: LaunchCredentialProvisioningAutomationsResponse
        status-code: 200
        property: acs_credential_provisioning_automation
      errors:
        - root.LaunchCredentialProvisioningAutomationsRequestBadRequestError
        - root.LaunchCredentialProvisioningAutomationsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
            credential_manager_acs_system_id: credential_manager_acs_system_id
          response:
            body:
              acs_credential_provisioning_automation:
                acs_credential_provisioning_automation_id: acs_credential_provisioning_automation_id
                credential_manager_acs_system_id: credential_manager_acs_system_id
                user_identity_id: user_identity_id
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/credentials.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "assign": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/credentials/assign",
              "docs": undefined,
              "errors": [
                "root.AssignCredentialsRequestBadRequestError",
                "root.AssignCredentialsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/assign",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AssignCredentialsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "AssignCredentialsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/credentials/create",
              "docs": undefined,
              "errors": [
                "root.CreateCredentialsRequestBadRequestError",
                "root.CreateCredentialsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "access_method": "code",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/create",
              "request": {
                "body": {
                  "properties": {
                    "access_method": "CreateCredentialsRequestAccessMethod",
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "allowed_acs_entrance_ids": "optional<list<string>>",
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^\d+$",
                      },
                    },
                    "credential_manager_acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_at": "optional<datetime>",
                    "is_multi_phone_sync_credential": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                    "starts_at": "optional<datetime>",
                    "visionline_metadata": "optional<CreateCredentialsRequestVisionlineMetadata>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateCredentialsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credential",
                "status-code": 200,
                "type": "CreateCredentialsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/credentials/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteCredentialsRequestBadRequestError",
                "root.DeleteCredentialsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/delete",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteCredentialsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteCredentialsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/credentials/get",
              "docs": undefined,
              "errors": [
                "root.GetCredentialsRequestBadRequestError",
                "root.GetCredentialsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetCredentialsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credential",
                "status-code": 200,
                "type": "GetCredentialsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/acs/credentials/list",
              "docs": undefined,
              "errors": [
                "root.ListCredentialsRequestBadRequestError",
                "root.ListCredentialsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "acs_credentials": [
                        {
                          "access_method": "code",
                          "acs_credential_id": "acs_credential_id",
                          "acs_credential_pool_id": "acs_credential_pool_id",
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "code": "code",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "ends_at": "ends_at",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "external_type": "pti_card",
                          "external_type_display_name": "external_type_display_name",
                          "is_latest_desired_state_synced_with_provider": true,
                          "is_multi_phone_sync_credential": true,
                          "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                          "parent_acs_credential_id": "parent_acs_credential_id",
                          "starts_at": "starts_at",
                          "visionline_metadata": {
                            "card_function_type": "guest",
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/list",
              "request": {
                "body": {
                  "properties": {
                    "is_multi_phone_sync_credential": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListCredentialsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credentials",
                "status-code": 200,
                "type": "ListCredentialsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_accessible_entrances": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/acs/credentials/list_accessible_entrances",
              "docs": undefined,
              "errors": [
                "root.ListAccessibleEntrancesCredentialsRequestBadRequestError",
                "root.ListAccessibleEntrancesCredentialsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                  },
                  "response": {
                    "body": {
                      "acs_entrances": [
                        {
                          "acs_entrance_id": "acs_entrance_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "latch_metadata": {
                            "accessibility_type": "accessibility_type",
                            "door_name": "door_name",
                            "door_type": "door_type",
                            "is_connected": true,
                          },
                          "visionline_metadata": {
                            "door_category": "entrance",
                            "door_name": "door_name",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/list_accessible_entrances",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListAccessibleEntrancesCredentialsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_entrances",
                "status-code": 200,
                "type": "ListAccessibleEntrancesCredentialsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unassign": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/credentials/unassign",
              "docs": undefined,
              "errors": [
                "root.UnassignCredentialsRequestBadRequestError",
                "root.UnassignCredentialsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/unassign",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnassignCredentialsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UnassignCredentialsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/credentials/update",
              "docs": undefined,
              "errors": [
                "root.UpdateCredentialsRequestBadRequestError",
                "root.UpdateCredentialsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/update",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": "string",
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^\d+$",
                      },
                    },
                    "ends_at": "optional<datetime>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateCredentialsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateCredentialsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "AssignCredentialsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateCredentialsRequestAccessMethod": {
            "enum": [
              "code",
              "card",
              "mobile_key",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateCredentialsRequestVisionlineMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "assa_abloy_credential_service_mobile_endpoint_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "card_format": "optional<CreateCredentialsRequestVisionlineMetadataCardFormat>",
              "card_function_type": {
                "default": "guest",
                "type": "optional<CreateCredentialsRequestVisionlineMetadataCardFunctionType>",
              },
              "is_override_key": {
                "docs": "
          ---
          deprecated: use override.
          ---
        ",
                "type": "optional<boolean>",
              },
              "joiner_acs_credential_ids": "optional<list<string>>",
              "override": "optional<boolean>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateCredentialsRequestVisionlineMetadataCardFormat": {
            "enum": [
              "TLCode",
              "rfid48",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateCredentialsRequestVisionlineMetadataCardFunctionType": {
            "default": "guest",
            "enum": [
              "guest",
              "staff",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateCredentialsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteCredentialsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetCredentialsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListAccessibleEntrancesCredentialsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_entrances": "list<root.AcsEntrance>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListCredentialsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credentials": "list<root.AcsCredential>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnassignCredentialsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateCredentialsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  AssignCredentialsResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
  CreateCredentialsRequestAccessMethod:
    enum:
      - code
      - card
      - mobile_key
    inline: true
    source:
      openapi: ../openapi.json
  CreateCredentialsRequestVisionlineMetadataCardFormat:
    enum:
      - TLCode
      - rfid48
    inline: true
    source:
      openapi: ../openapi.json
  CreateCredentialsRequestVisionlineMetadataCardFunctionType:
    enum:
      - guest
      - staff
    default: guest
    inline: true
    source:
      openapi: ../openapi.json
  CreateCredentialsRequestVisionlineMetadata:
    properties:
      assa_abloy_credential_service_mobile_endpoint_id:
        type: optional<string>
        validation:
          format: uuid
      card_format: optional<CreateCredentialsRequestVisionlineMetadataCardFormat>
      card_function_type:
        type: optional<CreateCredentialsRequestVisionlineMetadataCardFunctionType>
        default: guest
      is_override_key:
        type: optional<boolean>
        docs: |2-

                    ---
                    deprecated: use override.
                    ---
                  
      override: optional<boolean>
      joiner_acs_credential_ids: optional<list<string>>
    source:
      openapi: ../openapi.json
    inline: true
  CreateCredentialsResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteCredentialsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetCredentialsResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
  ListCredentialsResponse:
    properties:
      acs_credentials: list<root.AcsCredential>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListAccessibleEntrancesCredentialsResponse:
    properties:
      acs_entrances: list<root.AcsEntrance>
      ok: boolean
    source:
      openapi: ../openapi.json
  UnassignCredentialsResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateCredentialsResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    assign:
      path: /acs/credentials/assign
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/assign
      request:
        name: AssignCredentialsRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AssignCredentialsResponse
        status-code: 200
      errors:
        - root.AssignCredentialsRequestBadRequestError
        - root.AssignCredentialsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
    create:
      path: /acs/credentials/create
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/create
      request:
        name: CreateCredentialsRequest
        body:
          properties:
            credential_manager_acs_system_id:
              type: optional<string>
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
            access_method: CreateCredentialsRequestAccessMethod
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
            is_multi_phone_sync_credential:
              type: optional<boolean>
              default: false
            allowed_acs_entrance_ids: optional<list<string>>
            visionline_metadata: optional<CreateCredentialsRequestVisionlineMetadata>
            starts_at: optional<datetime>
            ends_at: optional<datetime>
        content-type: application/json
      response:
        docs: OK
        type: CreateCredentialsResponse
        status-code: 200
        property: acs_credential
      errors:
        - root.CreateCredentialsRequestBadRequestError
        - root.CreateCredentialsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
            access_method: code
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
    delete:
      path: /acs/credentials/delete
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/delete
      request:
        name: DeleteCredentialsRequest
        body:
          properties:
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DeleteCredentialsResponse
        status-code: 200
      errors:
        - root.DeleteCredentialsRequestBadRequestError
        - root.DeleteCredentialsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_credential_id: acs_credential_id
          response:
            body:
              ok: true
    get:
      path: /acs/credentials/get
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/get
      request:
        name: GetCredentialsRequest
        body:
          properties:
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetCredentialsResponse
        status-code: 200
        property: acs_credential
      errors:
        - root.GetCredentialsRequestBadRequestError
        - root.GetCredentialsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
    list:
      path: /acs/credentials/list
      method: POST
      auth:
        - api_key: []
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/list
      request:
        name: ListCredentialsRequest
        body:
          properties:
            is_multi_phone_sync_credential: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: ListCredentialsResponse
        status-code: 200
        property: acs_credentials
      errors:
        - root.ListCredentialsRequestBadRequestError
        - root.ListCredentialsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              acs_credentials:
                - acs_credential_id: acs_credential_id
                  acs_user_id: acs_user_id
                  acs_credential_pool_id: acs_credential_pool_id
                  acs_system_id: acs_system_id
                  parent_acs_credential_id: parent_acs_credential_id
                  display_name: display_name
                  code: code
                  access_method: code
                  external_type: pti_card
                  external_type_display_name: external_type_display_name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  starts_at: starts_at
                  ends_at: ends_at
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  is_multi_phone_sync_credential: true
                  is_latest_desired_state_synced_with_provider: true
                  latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                  visionline_metadata:
                    card_function_type: guest
              ok: true
    list_accessible_entrances:
      path: /acs/credentials/list_accessible_entrances
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/list_accessible_entrances
      request:
        name: ListAccessibleEntrancesCredentialsRequest
        body:
          properties:
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListAccessibleEntrancesCredentialsResponse
        status-code: 200
        property: acs_entrances
      errors:
        - root.ListAccessibleEntrancesCredentialsRequestBadRequestError
        - root.ListAccessibleEntrancesCredentialsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_entrances:
                - acs_system_id: acs_system_id
                  acs_entrance_id: acs_entrance_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  errors:
                    - error_code: error_code
                      message: message
                  latch_metadata:
                    accessibility_type: accessibility_type
                    door_name: door_name
                    door_type: door_type
                    is_connected: true
                  visionline_metadata:
                    door_name: door_name
                    door_category: entrance
              ok: true
    unassign:
      path: /acs/credentials/unassign
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/unassign
      request:
        name: UnassignCredentialsRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UnassignCredentialsResponse
        status-code: 200
      errors:
        - root.UnassignCredentialsRequestBadRequestError
        - root.UnassignCredentialsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
    update:
      path: /acs/credentials/update
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/update
      request:
        name: UpdateCredentialsRequest
        body:
          properties:
            acs_credential_id: string
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
            ends_at: optional<datetime>
        content-type: application/json
      response:
        docs: OK
        type: UpdateCredentialsResponse
        status-code: 200
      errors:
        - root.UpdateCredentialsRequestBadRequestError
        - root.UpdateCredentialsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/entrances.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "access_token": [],
                },
                {
                  "user_session": [],
                },
                {
                  "client_session": [],
                },
              ],
              "display-name": "/acs/entrances/get",
              "docs": undefined,
              "errors": [
                "root.GetEntrancesRequestBadRequestError",
                "root.GetEntrancesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_entrance_id": "acs_entrance_id",
                  },
                  "response": {
                    "body": {
                      "acs_entrance": {
                        "acs_entrance_id": "acs_entrance_id",
                        "acs_system_id": "acs_system_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "latch_metadata": {
                          "accessibility_type": "accessibility_type",
                          "door_name": "door_name",
                          "door_type": "door_type",
                          "is_connected": true,
                        },
                        "visionline_metadata": {
                          "door_category": "entrance",
                          "door_name": "door_name",
                          "profiles": [
                            {
                              "visionline_door_profile_id": "visionline_door_profile_id",
                              "visionline_door_profile_type": "BLE",
                            },
                          ],
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/entrances/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_entrance_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetEntrancesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_entrance",
                "status-code": 200,
                "type": "GetEntrancesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "grant_access": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/acs/entrances/grant_access",
              "docs": undefined,
              "errors": [
                "root.GrantAccessEntrancesRequestBadRequestError",
                "root.GrantAccessEntrancesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_entrance_id": "acs_entrance_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/entrances/grant_access",
              "request": {
                "body": {
                  "properties": {
                    "acs_entrance_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GrantAccessEntrancesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "GrantAccessEntrancesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/acs/entrances/list",
              "docs": undefined,
              "errors": [
                "root.ListEntrancesRequestBadRequestError",
                "root.ListEntrancesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "acs_entrances": [
                        {
                          "acs_entrance_id": "acs_entrance_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "latch_metadata": {
                            "accessibility_type": "accessibility_type",
                            "door_name": "door_name",
                            "door_type": "door_type",
                            "is_connected": true,
                          },
                          "visionline_metadata": {
                            "door_category": "entrance",
                            "door_name": "door_name",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/entrances/list",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListEntrancesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_entrances",
                "status-code": 200,
                "type": "ListEntrancesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_credentials_with_access": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/entrances/list_credentials_with_access",
              "docs": undefined,
              "errors": [
                "root.ListCredentialsWithAccessEntrancesRequestBadRequestError",
                "root.ListCredentialsWithAccessEntrancesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_entrance_id": "acs_entrance_id",
                  },
                  "response": {
                    "body": {
                      "acs_credentials": [
                        {
                          "access_method": "code",
                          "acs_credential_id": "acs_credential_id",
                          "acs_credential_pool_id": "acs_credential_pool_id",
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "code": "code",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "ends_at": "ends_at",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "external_type": "pti_card",
                          "external_type_display_name": "external_type_display_name",
                          "is_latest_desired_state_synced_with_provider": true,
                          "is_multi_phone_sync_credential": true,
                          "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                          "parent_acs_credential_id": "parent_acs_credential_id",
                          "starts_at": "starts_at",
                          "visionline_metadata": {
                            "card_function_type": "guest",
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/entrances/list_credentials_with_access",
              "request": {
                "body": {
                  "properties": {
                    "acs_entrance_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "include_if": "optional<list<literal<"visionline_metadata.is_valid">>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListCredentialsWithAccessEntrancesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credentials",
                "status-code": 200,
                "type": "ListCredentialsWithAccessEntrancesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "GetEntrancesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_entrance": "root.AcsEntrance",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GrantAccessEntrancesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListCredentialsWithAccessEntrancesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_credentials": "list<root.AcsCredential>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListEntrancesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_entrances": "list<root.AcsEntrance>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  GetEntrancesResponse:
    properties:
      acs_entrance: root.AcsEntrance
      ok: boolean
    source:
      openapi: ../openapi.json
  GrantAccessEntrancesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  ListEntrancesResponse:
    properties:
      acs_entrances: list<root.AcsEntrance>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListCredentialsWithAccessEntrancesResponse:
    properties:
      acs_credentials: list<root.AcsCredential>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /acs/entrances/get
      method: POST
      auth:
        - api_key: []
        - access_token: []
        - user_session: []
        - client_session: []
      source:
        openapi: ../openapi.json
      display-name: /acs/entrances/get
      request:
        name: GetEntrancesRequest
        body:
          properties:
            acs_entrance_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetEntrancesResponse
        status-code: 200
        property: acs_entrance
      errors:
        - root.GetEntrancesRequestBadRequestError
        - root.GetEntrancesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_entrance_id: acs_entrance_id
          response:
            body:
              acs_entrance:
                acs_system_id: acs_system_id
                acs_entrance_id: acs_entrance_id
                created_at: '2024-01-15T09:30:00Z'
                display_name: display_name
                errors:
                  - error_code: error_code
                    message: message
                latch_metadata:
                  accessibility_type: accessibility_type
                  door_name: door_name
                  door_type: door_type
                  is_connected: true
                visionline_metadata:
                  door_name: door_name
                  door_category: entrance
                  profiles:
                    - visionline_door_profile_id: visionline_door_profile_id
                      visionline_door_profile_type: BLE
              ok: true
    grant_access:
      path: /acs/entrances/grant_access
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /acs/entrances/grant_access
      request:
        name: GrantAccessEntrancesRequest
        body:
          properties:
            acs_entrance_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GrantAccessEntrancesResponse
        status-code: 200
      errors:
        - root.GrantAccessEntrancesRequestBadRequestError
        - root.GrantAccessEntrancesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_entrance_id: acs_entrance_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    list:
      path: /acs/entrances/list
      method: POST
      auth:
        - api_key: []
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /acs/entrances/list
      request:
        name: ListEntrancesRequest
        body:
          properties:
            acs_system_id:
              type: optional<string>
              validation:
                format: uuid
            acs_credential_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListEntrancesResponse
        status-code: 200
        property: acs_entrances
      errors:
        - root.ListEntrancesRequestBadRequestError
        - root.ListEntrancesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              acs_entrances:
                - acs_system_id: acs_system_id
                  acs_entrance_id: acs_entrance_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  errors:
                    - error_code: error_code
                      message: message
                  latch_metadata:
                    accessibility_type: accessibility_type
                    door_name: door_name
                    door_type: door_type
                    is_connected: true
                  visionline_metadata:
                    door_name: door_name
                    door_category: entrance
              ok: true
    list_credentials_with_access:
      path: /acs/entrances/list_credentials_with_access
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/entrances/list_credentials_with_access
      request:
        name: ListCredentialsWithAccessEntrancesRequest
        body:
          properties:
            acs_entrance_id:
              type: string
              validation:
                format: uuid
            include_if: optional<list<literal<"visionline_metadata.is_valid">>>
        content-type: application/json
      response:
        docs: OK
        type: ListCredentialsWithAccessEntrancesResponse
        status-code: 200
        property: acs_credentials
      errors:
        - root.ListCredentialsWithAccessEntrancesRequestBadRequestError
        - root.ListCredentialsWithAccessEntrancesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_entrance_id: acs_entrance_id
          response:
            body:
              acs_credentials:
                - acs_credential_id: acs_credential_id
                  acs_user_id: acs_user_id
                  acs_credential_pool_id: acs_credential_pool_id
                  acs_system_id: acs_system_id
                  parent_acs_credential_id: parent_acs_credential_id
                  display_name: display_name
                  code: code
                  access_method: code
                  external_type: pti_card
                  external_type_display_name: external_type_display_name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  starts_at: starts_at
                  ends_at: ends_at
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  is_multi_phone_sync_credential: true
                  is_latest_desired_state_synced_with_provider: true
                  latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                  visionline_metadata:
                    card_function_type: guest
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/systems.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/systems/get",
              "docs": undefined,
              "errors": [
                "root.GetSystemsRequestBadRequestError",
                "root.GetSystemsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_system_id": "acs_system_id",
                  },
                  "response": {
                    "body": {
                      "acs_system": {
                        "acs_system_id": "acs_system_id",
                        "can_add_acs_users_to_acs_access_groups": true,
                        "can_automate_enrollment": true,
                        "can_create_acs_access_groups": true,
                        "can_remove_acs_users_from_acs_access_groups": true,
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "errors": [
                          {
                            "created_at": "2024-01-15T09:30:00Z",
                            "error_code": "seam_bridge_disconnected",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_site",
                        "external_type_display_name": "external_type_display_name",
                        "image_alt_text": "image_alt_text",
                        "image_url": "image_url",
                        "name": "name",
                        "system_type": "pti_site",
                        "system_type_display_name": "system_type_display_name",
                        "warnings": [
                          {},
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/systems/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetSystemsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_system",
                "status-code": 200,
                "type": "GetSystemsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/systems/list",
              "docs": undefined,
              "errors": [
                "root.ListSystemsRequestBadRequestError",
                "root.ListSystemsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "acs_systems": [
                        {
                          "acs_system_id": "acs_system_id",
                          "can_add_acs_users_to_acs_access_groups": true,
                          "can_automate_enrollment": true,
                          "can_create_acs_access_groups": true,
                          "can_remove_acs_users_from_acs_access_groups": true,
                          "connected_account_ids": [
                            "connected_account_ids",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "errors": [
                            {
                              "created_at": "2024-01-15T09:30:00Z",
                              "error_code": "seam_bridge_disconnected",
                              "message": "message",
                            },
                          ],
                          "external_type": "pti_site",
                          "external_type_display_name": "external_type_display_name",
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "name": "name",
                          "system_type": "pti_site",
                          "system_type_display_name": "system_type_display_name",
                          "warnings": [
                            {},
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/systems/list",
              "request": {
                "body": {
                  "properties": {
                    "connected_account_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListSystemsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_systems",
                "status-code": 200,
                "type": "ListSystemsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_compatible_credential_manager_acs_systems": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/systems/list_compatible_credential_manager_acs_systems",
              "docs": undefined,
              "errors": [
                "root.ListCompatibleCredentialManagerAcsSystemsSystemsRequestBadRequestError",
                "root.ListCompatibleCredentialManagerAcsSystemsSystemsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_system_id": "acs_system_id",
                  },
                  "response": {
                    "body": {
                      "acs_systems": [
                        {
                          "acs_system_id": "acs_system_id",
                          "can_add_acs_users_to_acs_access_groups": true,
                          "can_automate_enrollment": true,
                          "can_create_acs_access_groups": true,
                          "can_remove_acs_users_from_acs_access_groups": true,
                          "connected_account_ids": [
                            "connected_account_ids",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "errors": [
                            {
                              "created_at": "2024-01-15T09:30:00Z",
                              "error_code": "seam_bridge_disconnected",
                              "message": "message",
                            },
                          ],
                          "external_type": "pti_site",
                          "external_type_display_name": "external_type_display_name",
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "name": "name",
                          "system_type": "pti_site",
                          "system_type_display_name": "system_type_display_name",
                          "warnings": [
                            {},
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/systems/list_compatible_credential_manager_acs_systems",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListCompatibleCredentialManagerAcsSystemsSystemsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_systems",
                "status-code": 200,
                "type": "ListCompatibleCredentialManagerAcsSystemsSystemsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "GetSystemsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_system": "root.AcsSystem",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListCompatibleCredentialManagerAcsSystemsSystemsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_systems": "list<root.AcsSystem>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListSystemsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_systems": "list<root.AcsSystem>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  GetSystemsResponse:
    properties:
      acs_system: root.AcsSystem
      ok: boolean
    source:
      openapi: ../openapi.json
  ListSystemsResponse:
    properties:
      acs_systems: list<root.AcsSystem>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListCompatibleCredentialManagerAcsSystemsSystemsResponse:
    properties:
      acs_systems: list<root.AcsSystem>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /acs/systems/get
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/systems/get
      request:
        name: GetSystemsRequest
        body:
          properties:
            acs_system_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetSystemsResponse
        status-code: 200
        property: acs_system
      errors:
        - root.GetSystemsRequestBadRequestError
        - root.GetSystemsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_system_id: acs_system_id
          response:
            body:
              acs_system:
                acs_system_id: acs_system_id
                external_type: pti_site
                external_type_display_name: external_type_display_name
                system_type: pti_site
                system_type_display_name: system_type_display_name
                name: name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                connected_account_ids:
                  - connected_account_ids
                image_url: image_url
                image_alt_text: image_alt_text
                errors:
                  - created_at: '2024-01-15T09:30:00Z'
                    message: message
                    error_code: seam_bridge_disconnected
                warnings:
                  - {}
                can_automate_enrollment: true
                can_create_acs_access_groups: true
                can_remove_acs_users_from_acs_access_groups: true
                can_add_acs_users_to_acs_access_groups: true
              ok: true
    list:
      path: /acs/systems/list
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/systems/list
      request:
        name: ListSystemsRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListSystemsResponse
        status-code: 200
        property: acs_systems
      errors:
        - root.ListSystemsRequestBadRequestError
        - root.ListSystemsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              acs_systems:
                - acs_system_id: acs_system_id
                  external_type: pti_site
                  external_type_display_name: external_type_display_name
                  system_type: pti_site
                  system_type_display_name: system_type_display_name
                  name: name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  connected_account_ids:
                    - connected_account_ids
                  image_url: image_url
                  image_alt_text: image_alt_text
                  errors:
                    - created_at: '2024-01-15T09:30:00Z'
                      message: message
                      error_code: seam_bridge_disconnected
                  warnings:
                    - {}
                  can_automate_enrollment: true
                  can_create_acs_access_groups: true
                  can_remove_acs_users_from_acs_access_groups: true
                  can_add_acs_users_to_acs_access_groups: true
              ok: true
    list_compatible_credential_manager_acs_systems:
      path: /acs/systems/list_compatible_credential_manager_acs_systems
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/systems/list_compatible_credential_manager_acs_systems
      request:
        name: ListCompatibleCredentialManagerAcsSystemsSystemsRequest
        body:
          properties:
            acs_system_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListCompatibleCredentialManagerAcsSystemsSystemsResponse
        status-code: 200
        property: acs_systems
      errors:
        - >-
          root.ListCompatibleCredentialManagerAcsSystemsSystemsRequestBadRequestError
        - >-
          root.ListCompatibleCredentialManagerAcsSystemsSystemsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_system_id: acs_system_id
          response:
            body:
              acs_systems:
                - acs_system_id: acs_system_id
                  external_type: pti_site
                  external_type_display_name: external_type_display_name
                  system_type: pti_site
                  system_type_display_name: system_type_display_name
                  name: name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  connected_account_ids:
                    - connected_account_ids
                  image_url: image_url
                  image_alt_text: image_alt_text
                  errors:
                    - created_at: '2024-01-15T09:30:00Z'
                      message: message
                      error_code: seam_bridge_disconnected
                  warnings:
                    - {}
                  can_automate_enrollment: true
                  can_create_acs_access_groups: true
                  can_remove_acs_users_from_acs_access_groups: true
                  can_add_acs_users_to_acs_access_groups: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/users.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "add_to_access_group": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/users/add_to_access_group",
              "docs": undefined,
              "errors": [
                "root.AddToAccessGroupUsersRequestBadRequestError",
                "root.AddToAccessGroupUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/add_to_access_group",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AddToAccessGroupUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "AddToAccessGroupUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/users/create",
              "docs": undefined,
              "errors": [
                "root.CreateUsersRequestBadRequestError",
                "root.CreateUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_system_id": "acs_system_id",
                  },
                  "response": {
                    "body": {
                      "acs_user": {
                        "access_schedule": {
                          "ends_at": "2024-01-15T09:30:00Z",
                          "starts_at": "2024-01-15T09:30:00Z",
                        },
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "email": "email",
                        "email_address": "email_address",
                        "external_type": "pti_user",
                        "external_type_display_name": "external_type_display_name",
                        "full_name": "full_name",
                        "hid_acs_system_id": "hid_acs_system_id",
                        "is_suspended": true,
                        "phone_number": "phone_number",
                        "user_identity_email_address": "user_identity_email_address",
                        "user_identity_full_name": "user_identity_full_name",
                        "user_identity_id": "user_identity_id",
                        "user_identity_phone_number": "user_identity_phone_number",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/create",
              "request": {
                "body": {
                  "properties": {
                    "access_schedule": "optional<CreateUsersRequestAccessSchedule>",
                    "acs_access_group_ids": "optional<list<string>>",
                    "acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "email": {
                      "docs": "
    ---
    deprecated: use email_address.
    ---
    ",
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "email_address": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "full_name": "optional<string>",
                    "phone_number": "optional<nullable<string>>",
                    "user_identity_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_user",
                "status-code": 200,
                "type": "CreateUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/users/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteUsersRequestBadRequestError",
                "root.DeleteUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/delete",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/users/get",
              "docs": undefined,
              "errors": [
                "root.GetUsersRequestBadRequestError",
                "root.GetUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_user": {
                        "access_schedule": {
                          "ends_at": "2024-01-15T09:30:00Z",
                          "starts_at": "2024-01-15T09:30:00Z",
                        },
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "email": "email",
                        "email_address": "email_address",
                        "external_type": "pti_user",
                        "external_type_display_name": "external_type_display_name",
                        "full_name": "full_name",
                        "hid_acs_system_id": "hid_acs_system_id",
                        "is_suspended": true,
                        "phone_number": "phone_number",
                        "user_identity_email_address": "user_identity_email_address",
                        "user_identity_full_name": "user_identity_full_name",
                        "user_identity_id": "user_identity_id",
                        "user_identity_phone_number": "user_identity_phone_number",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_user",
                "status-code": 200,
                "type": "GetUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/users/list",
              "docs": undefined,
              "errors": [
                "root.ListUsersRequestBadRequestError",
                "root.ListUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "acs_users": [
                        {
                          "access_schedule": {
                            "ends_at": "2024-01-15T09:30:00Z",
                            "starts_at": "2024-01-15T09:30:00Z",
                          },
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "email": "email",
                          "email_address": "email_address",
                          "external_type": "pti_user",
                          "external_type_display_name": "external_type_display_name",
                          "full_name": "full_name",
                          "hid_acs_system_id": "hid_acs_system_id",
                          "is_suspended": true,
                          "phone_number": "phone_number",
                          "user_identity_email_address": "user_identity_email_address",
                          "user_identity_full_name": "user_identity_full_name",
                          "user_identity_id": "user_identity_id",
                          "user_identity_phone_number": "user_identity_phone_number",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/list",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_email_address": "optional<string>",
                    "user_identity_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_phone_number": "optional<nullable<string>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_users",
                "status-code": 200,
                "type": "ListUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_accessible_entrances": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/users/list_accessible_entrances",
              "docs": undefined,
              "errors": [
                "root.ListAccessibleEntrancesUsersRequestBadRequestError",
                "root.ListAccessibleEntrancesUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_entrances": [
                        {
                          "acs_entrance_id": "acs_entrance_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "latch_metadata": {
                            "accessibility_type": "accessibility_type",
                            "door_name": "door_name",
                            "door_type": "door_type",
                            "is_connected": true,
                          },
                          "visionline_metadata": {
                            "door_category": "entrance",
                            "door_name": "door_name",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/list_accessible_entrances",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListAccessibleEntrancesUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_entrances",
                "status-code": 200,
                "type": "ListAccessibleEntrancesUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove_from_access_group": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/users/remove_from_access_group",
              "docs": undefined,
              "errors": [
                "root.RemoveFromAccessGroupUsersRequestBadRequestError",
                "root.RemoveFromAccessGroupUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/remove_from_access_group",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RemoveFromAccessGroupUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "RemoveFromAccessGroupUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "revoke_access_to_all_entrances": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/acs/users/revoke_access_to_all_entrances",
              "docs": undefined,
              "errors": [
                "root.RevokeAccessToAllEntrancesUsersRequestBadRequestError",
                "root.RevokeAccessToAllEntrancesUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/revoke_access_to_all_entrances",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RevokeAccessToAllEntrancesUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "RevokeAccessToAllEntrancesUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "suspend": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/acs/users/suspend",
              "docs": undefined,
              "errors": [
                "root.SuspendUsersRequestBadRequestError",
                "root.SuspendUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/suspend",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SuspendUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "SuspendUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unsuspend": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/acs/users/unsuspend",
              "docs": undefined,
              "errors": [
                "root.UnsuspendUsersRequestBadRequestError",
                "root.UnsuspendUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/unsuspend",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnsuspendUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UnsuspendUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/acs/users/update",
              "docs": undefined,
              "errors": [
                "root.UpdateUsersRequestBadRequestError",
                "root.UpdateUsersRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/update",
              "request": {
                "body": {
                  "properties": {
                    "access_schedule": "optional<UpdateUsersRequestAccessSchedule>",
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "email": {
                      "docs": "
    ---
    deprecated: use email_address.
    ---
    ",
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "email_address": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "full_name": "optional<string>",
                    "hid_acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "phone_number": "optional<nullable<string>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "AddToAccessGroupUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateUsersRequestAccessSchedule": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "ends_at": "datetime",
              "starts_at": "datetime",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_user": "root.AcsUser",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_user": "root.AcsUser",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListAccessibleEntrancesUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_entrances": "list<root.AcsEntrance>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_users": "list<root.AcsUser>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RemoveFromAccessGroupUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RevokeAccessToAllEntrancesUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SuspendUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnsuspendUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateUsersRequestAccessSchedule": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "ends_at": "datetime",
              "starts_at": "datetime",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateUsersResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  AddToAccessGroupUsersResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  CreateUsersRequestAccessSchedule:
    properties:
      starts_at: datetime
      ends_at: datetime
    source:
      openapi: ../openapi.json
    inline: true
  CreateUsersResponse:
    properties:
      acs_user: root.AcsUser
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteUsersResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetUsersResponse:
    properties:
      acs_user: root.AcsUser
      ok: boolean
    source:
      openapi: ../openapi.json
  ListUsersResponse:
    properties:
      acs_users: list<root.AcsUser>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListAccessibleEntrancesUsersResponse:
    properties:
      acs_entrances: list<root.AcsEntrance>
      ok: boolean
    source:
      openapi: ../openapi.json
  RemoveFromAccessGroupUsersResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  RevokeAccessToAllEntrancesUsersResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  SuspendUsersResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UnsuspendUsersResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateUsersRequestAccessSchedule:
    properties:
      starts_at: datetime
      ends_at: datetime
    source:
      openapi: ../openapi.json
    inline: true
  UpdateUsersResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    add_to_access_group:
      path: /acs/users/add_to_access_group
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/add_to_access_group
      request:
        name: AddToAccessGroupUsersRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
            acs_access_group_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AddToAccessGroupUsersResponse
        status-code: 200
      errors:
        - root.AddToAccessGroupUsersRequestBadRequestError
        - root.AddToAccessGroupUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
            acs_access_group_id: acs_access_group_id
          response:
            body:
              ok: true
    create:
      path: /acs/users/create
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/create
      request:
        name: CreateUsersRequest
        body:
          properties:
            acs_system_id:
              type: string
              validation:
                format: uuid
            acs_access_group_ids: optional<list<string>>
            user_identity_id:
              type: optional<string>
              validation:
                format: uuid
            access_schedule: optional<CreateUsersRequestAccessSchedule>
            full_name: optional<string>
            email:
              type: optional<string>
              docs: |2-

                    ---
                    deprecated: use email_address.
                    ---
                    
              validation:
                format: email
            phone_number: optional<nullable<string>>
            email_address:
              type: optional<string>
              validation:
                format: email
        content-type: application/json
      response:
        docs: OK
        type: CreateUsersResponse
        status-code: 200
        property: acs_user
      errors:
        - root.CreateUsersRequestBadRequestError
        - root.CreateUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_system_id: acs_system_id
          response:
            body:
              acs_user:
                acs_user_id: acs_user_id
                acs_system_id: acs_system_id
                hid_acs_system_id: hid_acs_system_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                display_name: display_name
                external_type: pti_user
                external_type_display_name: external_type_display_name
                is_suspended: true
                access_schedule:
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                user_identity_id: user_identity_id
                user_identity_full_name: user_identity_full_name
                user_identity_email_address: user_identity_email_address
                user_identity_phone_number: user_identity_phone_number
                full_name: full_name
                email: email
                email_address: email_address
                phone_number: phone_number
              ok: true
    delete:
      path: /acs/users/delete
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/delete
      request:
        name: DeleteUsersRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DeleteUsersResponse
        status-code: 200
      errors:
        - root.DeleteUsersRequestBadRequestError
        - root.DeleteUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    get:
      path: /acs/users/get
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/get
      request:
        name: GetUsersRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetUsersResponse
        status-code: 200
        property: acs_user
      errors:
        - root.GetUsersRequestBadRequestError
        - root.GetUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
          response:
            body:
              acs_user:
                acs_user_id: acs_user_id
                acs_system_id: acs_system_id
                hid_acs_system_id: hid_acs_system_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                display_name: display_name
                external_type: pti_user
                external_type_display_name: external_type_display_name
                is_suspended: true
                access_schedule:
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                user_identity_id: user_identity_id
                user_identity_full_name: user_identity_full_name
                user_identity_email_address: user_identity_email_address
                user_identity_phone_number: user_identity_phone_number
                full_name: full_name
                email: email
                email_address: email_address
                phone_number: phone_number
              ok: true
    list:
      path: /acs/users/list
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/list
      request:
        name: ListUsersRequest
        body:
          properties:
            user_identity_id:
              type: optional<string>
              validation:
                format: uuid
            user_identity_phone_number: optional<nullable<string>>
            user_identity_email_address: optional<string>
            acs_system_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListUsersResponse
        status-code: 200
        property: acs_users
      errors:
        - root.ListUsersRequestBadRequestError
        - root.ListUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              acs_users:
                - acs_user_id: acs_user_id
                  acs_system_id: acs_system_id
                  hid_acs_system_id: hid_acs_system_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  external_type: pti_user
                  external_type_display_name: external_type_display_name
                  is_suspended: true
                  access_schedule:
                    starts_at: '2024-01-15T09:30:00Z'
                    ends_at: '2024-01-15T09:30:00Z'
                  user_identity_id: user_identity_id
                  user_identity_full_name: user_identity_full_name
                  user_identity_email_address: user_identity_email_address
                  user_identity_phone_number: user_identity_phone_number
                  full_name: full_name
                  email: email
                  email_address: email_address
                  phone_number: phone_number
              ok: true
    list_accessible_entrances:
      path: /acs/users/list_accessible_entrances
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/list_accessible_entrances
      request:
        name: ListAccessibleEntrancesUsersRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListAccessibleEntrancesUsersResponse
        status-code: 200
        property: acs_entrances
      errors:
        - root.ListAccessibleEntrancesUsersRequestBadRequestError
        - root.ListAccessibleEntrancesUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
          response:
            body:
              acs_entrances:
                - acs_system_id: acs_system_id
                  acs_entrance_id: acs_entrance_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  errors:
                    - error_code: error_code
                      message: message
                  latch_metadata:
                    accessibility_type: accessibility_type
                    door_name: door_name
                    door_type: door_type
                    is_connected: true
                  visionline_metadata:
                    door_name: door_name
                    door_category: entrance
              ok: true
    remove_from_access_group:
      path: /acs/users/remove_from_access_group
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/remove_from_access_group
      request:
        name: RemoveFromAccessGroupUsersRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
            acs_access_group_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: RemoveFromAccessGroupUsersResponse
        status-code: 200
      errors:
        - root.RemoveFromAccessGroupUsersRequestBadRequestError
        - root.RemoveFromAccessGroupUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
            acs_access_group_id: acs_access_group_id
          response:
            body:
              ok: true
    revoke_access_to_all_entrances:
      path: /acs/users/revoke_access_to_all_entrances
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/revoke_access_to_all_entrances
      request:
        name: RevokeAccessToAllEntrancesUsersRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: RevokeAccessToAllEntrancesUsersResponse
        status-code: 200
      errors:
        - root.RevokeAccessToAllEntrancesUsersRequestBadRequestError
        - root.RevokeAccessToAllEntrancesUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    suspend:
      path: /acs/users/suspend
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/suspend
      request:
        name: SuspendUsersRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: SuspendUsersResponse
        status-code: 200
      errors:
        - root.SuspendUsersRequestBadRequestError
        - root.SuspendUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    unsuspend:
      path: /acs/users/unsuspend
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/unsuspend
      request:
        name: UnsuspendUsersRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UnsuspendUsersResponse
        status-code: 200
      errors:
        - root.UnsuspendUsersRequestBadRequestError
        - root.UnsuspendUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    update:
      path: /acs/users/update
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /acs/users/update
      request:
        name: UpdateUsersRequest
        body:
          properties:
            access_schedule: optional<UpdateUsersRequestAccessSchedule>
            acs_user_id:
              type: string
              validation:
                format: uuid
            full_name: optional<string>
            email:
              type: optional<string>
              docs: |2-

                    ---
                    deprecated: use email_address.
                    ---
                    
              validation:
                format: email
            phone_number: optional<nullable<string>>
            email_address:
              type: optional<string>
              validation:
                format: email
            hid_acs_system_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UpdateUsersResponse
        status-code: 200
      errors:
        - root.UpdateUsersRequestBadRequestError
        - root.UpdateUsersRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "actionAttempts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/action_attempts/get",
              "docs": undefined,
              "errors": [
                "root.GetActionAttemptsRequestBadRequestError",
                "root.GetActionAttemptsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "action_attempt_id": "action_attempt_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/action_attempts/get",
              "request": {
                "body": {
                  "properties": {
                    "action_attempt_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetActionAttemptsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "GetActionAttemptsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/action_attempts/list",
              "docs": undefined,
              "errors": [
                "root.ListActionAttemptsRequestBadRequestError",
                "root.ListActionAttemptsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "action_attempt_ids": [
                      "action_attempt_ids",
                    ],
                  },
                  "response": {
                    "body": {
                      "action_attempts": [
                        {
                          "action_attempt_id": "action_attempt_id",
                          "action_type": "LOCK_DOOR",
                          "error": "error",
                          "result": "result",
                          "status": "pending",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/action_attempts/list",
              "request": {
                "body": {
                  "properties": {
                    "action_attempt_ids": "list<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListActionAttemptsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempts",
                "status-code": 200,
                "type": "ListActionAttemptsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "GetActionAttemptsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListActionAttemptsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempts": "list<root.ActionAttempt>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  GetActionAttemptsResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  ListActionAttemptsResponse:
    properties:
      action_attempts: list<root.ActionAttempt>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /action_attempts/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /action_attempts/get
      request:
        name: GetActionAttemptsRequest
        body:
          properties:
            action_attempt_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetActionAttemptsResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.GetActionAttemptsRequestBadRequestError
        - root.GetActionAttemptsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            action_attempt_id: action_attempt_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    list:
      path: /action_attempts/list
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /action_attempts/list
      request:
        name: ListActionAttemptsRequest
        body:
          properties:
            action_attempt_ids: list<string>
        content-type: application/json
      response:
        docs: OK
        type: ListActionAttemptsResponse
        status-code: 200
        property: action_attempts
      errors:
        - root.ListActionAttemptsRequestBadRequestError
        - root.ListActionAttemptsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            action_attempt_ids:
              - action_attempt_ids
          response:
            body:
              action_attempts:
                - action_attempt_id: action_attempt_id
                  status: pending
                  result: result
                  error: error
                  action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "clientSessions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": undefined,
              "display-name": "/client_sessions/create",
              "docs": undefined,
              "errors": [
                "root.CreateClientSessionsRequestBadRequestError",
                "root.CreateClientSessionsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "client_session": {
                        "client_session_id": "client_session_id",
                        "connect_webview_ids": [
                          "connect_webview_ids",
                        ],
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_count": 1.1,
                        "token": "token",
                        "user_identifier_key": "user_identifier_key",
                        "user_identity_ids": [
                          "user_identity_ids",
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/create",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_ids": "optional<list<string>>",
                    "connected_account_ids": "optional<list<string>>",
                    "expires_at": "optional<nullable<datetime>>",
                    "user_identifier_key": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_ids": "optional<list<string>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateClientSessionsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "client_session",
                "status-code": 200,
                "type": "CreateClientSessionsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/client_sessions/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteClientSessionsRequestBadRequestError",
                "root.DeleteClientSessionsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "client_session_id": "client_session_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/delete",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteClientSessionsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteClientSessionsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/client_sessions/get",
              "docs": undefined,
              "errors": [
                "root.GetClientSessionsRequestBadRequestError",
                "root.GetClientSessionsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "client_session": {
                        "client_session_id": "client_session_id",
                        "connect_webview_ids": [
                          "connect_webview_ids",
                        ],
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_count": 1.1,
                        "token": "token",
                        "user_identifier_key": "user_identifier_key",
                        "user_identity_ids": [
                          "user_identity_ids",
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/get",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": "optional<string>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetClientSessionsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "client_session",
                "status-code": 200,
                "type": "GetClientSessionsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_or_create": {
              "auth": undefined,
              "display-name": "/client_sessions/get_or_create",
              "docs": undefined,
              "errors": [
                "root.GetOrCreateClientSessionsRequestBadRequestError",
                "root.GetOrCreateClientSessionsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "client_session": {
                        "client_session_id": "client_session_id",
                        "connect_webview_ids": [
                          "connect_webview_ids",
                        ],
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_count": 1.1,
                        "token": "token",
                        "user_identifier_key": "user_identifier_key",
                        "user_identity_ids": [
                          "user_identity_ids",
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/get_or_create",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_ids": "optional<list<string>>",
                    "connected_account_ids": "optional<list<string>>",
                    "expires_at": "optional<nullable<datetime>>",
                    "user_identifier_key": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_ids": "optional<list<string>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetOrCreateClientSessionsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "client_session",
                "status-code": 200,
                "type": "GetOrCreateClientSessionsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "grant_access": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/client_sessions/grant_access",
              "docs": undefined,
              "errors": [
                "root.GrantAccessClientSessionsRequestBadRequestError",
                "root.GrantAccessClientSessionsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "client_session": {
                        "client_session_id": "client_session_id",
                        "connect_webview_ids": [
                          "connect_webview_ids",
                        ],
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_count": 1.1,
                        "token": "token",
                        "user_identifier_key": "user_identifier_key",
                        "user_identity_ids": [
                          "user_identity_ids",
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/grant_access",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": "optional<string>",
                    "connect_webview_ids": "optional<list<string>>",
                    "connected_account_ids": "optional<list<string>>",
                    "user_identifier_key": "optional<string>",
                    "user_identity_ids": "optional<list<string>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GrantAccessClientSessionsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "GrantAccessClientSessionsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/client_sessions/list",
              "docs": undefined,
              "errors": [
                "root.ListClientSessionsRequestBadRequestError",
                "root.ListClientSessionsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "client_sessions": [
                        {
                          "client_session_id": "client_session_id",
                          "connect_webview_ids": [
                            "connect_webview_ids",
                          ],
                          "connected_account_ids": [
                            "connected_account_ids",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_count": 1.1,
                          "token": "token",
                          "user_identifier_key": "user_identifier_key",
                          "user_identity_ids": [
                            "user_identity_ids",
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/list",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": "optional<string>",
                    "connect_webview_id": "optional<string>",
                    "user_identifier_key": "optional<string>",
                    "user_identity_id": "optional<string>",
                    "without_user_identifier_key": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListClientSessionsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "client_sessions",
                "status-code": 200,
                "type": "ListClientSessionsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "revoke": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/client_sessions/revoke",
              "docs": undefined,
              "errors": [
                "root.RevokeClientSessionsRequestBadRequestError",
                "root.RevokeClientSessionsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "client_session_id": "client_session_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/revoke",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RevokeClientSessionsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "RevokeClientSessionsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateClientSessionsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_session": "root.ClientSession",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteClientSessionsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetClientSessionsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_session": "root.ClientSession",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetOrCreateClientSessionsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_session": "root.ClientSession",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GrantAccessClientSessionsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_session": "root.ClientSession",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListClientSessionsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_sessions": "list<root.ClientSession>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RevokeClientSessionsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  CreateClientSessionsResponse:
    properties:
      client_session: root.ClientSession
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteClientSessionsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetClientSessionsResponse:
    properties:
      client_session: root.ClientSession
      ok: boolean
    source:
      openapi: ../openapi.json
  GetOrCreateClientSessionsResponse:
    properties:
      client_session: root.ClientSession
      ok: boolean
    source:
      openapi: ../openapi.json
  GrantAccessClientSessionsResponse:
    properties:
      client_session: root.ClientSession
      ok: boolean
    source:
      openapi: ../openapi.json
  ListClientSessionsResponse:
    properties:
      client_sessions: list<root.ClientSession>
      ok: boolean
    source:
      openapi: ../openapi.json
  RevokeClientSessionsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /client_sessions/create
      method: POST
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/create
      request:
        name: CreateClientSessionsRequest
        body:
          properties:
            user_identifier_key:
              type: optional<string>
              validation:
                minLength: 1
            connect_webview_ids: optional<list<string>>
            connected_account_ids: optional<list<string>>
            user_identity_ids: optional<list<string>>
            expires_at: optional<nullable<datetime>>
        content-type: application/json
      response:
        docs: OK
        type: CreateClientSessionsResponse
        status-code: 200
        property: client_session
      errors:
        - root.CreateClientSessionsRequestBadRequestError
        - root.CreateClientSessionsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              client_session:
                client_session_id: client_session_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                token: token
                user_identifier_key: user_identifier_key
                device_count: 1.1
                connected_account_ids:
                  - connected_account_ids
                connect_webview_ids:
                  - connect_webview_ids
                user_identity_ids:
                  - user_identity_ids
              ok: true
    delete:
      path: /client_sessions/delete
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/delete
      request:
        name: DeleteClientSessionsRequest
        body:
          properties:
            client_session_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DeleteClientSessionsResponse
        status-code: 200
      errors:
        - root.DeleteClientSessionsRequestBadRequestError
        - root.DeleteClientSessionsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            client_session_id: client_session_id
          response:
            body:
              ok: true
    get:
      path: /client_sessions/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/get
      request:
        name: GetClientSessionsRequest
        body:
          properties:
            client_session_id: optional<string>
            user_identifier_key: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: GetClientSessionsResponse
        status-code: 200
        property: client_session
      errors:
        - root.GetClientSessionsRequestBadRequestError
        - root.GetClientSessionsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              client_session:
                client_session_id: client_session_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                token: token
                user_identifier_key: user_identifier_key
                device_count: 1.1
                connected_account_ids:
                  - connected_account_ids
                connect_webview_ids:
                  - connect_webview_ids
                user_identity_ids:
                  - user_identity_ids
              ok: true
    get_or_create:
      path: /client_sessions/get_or_create
      method: POST
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/get_or_create
      request:
        name: GetOrCreateClientSessionsRequest
        body:
          properties:
            user_identifier_key:
              type: optional<string>
              validation:
                minLength: 1
            connect_webview_ids: optional<list<string>>
            connected_account_ids: optional<list<string>>
            user_identity_ids: optional<list<string>>
            expires_at: optional<nullable<datetime>>
        content-type: application/json
      response:
        docs: OK
        type: GetOrCreateClientSessionsResponse
        status-code: 200
        property: client_session
      errors:
        - root.GetOrCreateClientSessionsRequestBadRequestError
        - root.GetOrCreateClientSessionsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              client_session:
                client_session_id: client_session_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                token: token
                user_identifier_key: user_identifier_key
                device_count: 1.1
                connected_account_ids:
                  - connected_account_ids
                connect_webview_ids:
                  - connect_webview_ids
                user_identity_ids:
                  - user_identity_ids
              ok: true
    grant_access:
      path: /client_sessions/grant_access
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/grant_access
      request:
        name: GrantAccessClientSessionsRequest
        body:
          properties:
            client_session_id: optional<string>
            user_identifier_key: optional<string>
            connected_account_ids: optional<list<string>>
            connect_webview_ids: optional<list<string>>
            user_identity_ids: optional<list<string>>
        content-type: application/json
      response:
        docs: OK
        type: GrantAccessClientSessionsResponse
        status-code: 200
      errors:
        - root.GrantAccessClientSessionsRequestBadRequestError
        - root.GrantAccessClientSessionsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              client_session:
                client_session_id: client_session_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                token: token
                user_identifier_key: user_identifier_key
                device_count: 1.1
                connected_account_ids:
                  - connected_account_ids
                connect_webview_ids:
                  - connect_webview_ids
                user_identity_ids:
                  - user_identity_ids
              ok: true
    list:
      path: /client_sessions/list
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/list
      request:
        name: ListClientSessionsRequest
        body:
          properties:
            client_session_id: optional<string>
            user_identifier_key: optional<string>
            connect_webview_id: optional<string>
            without_user_identifier_key: optional<boolean>
            user_identity_id: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: ListClientSessionsResponse
        status-code: 200
        property: client_sessions
      errors:
        - root.ListClientSessionsRequestBadRequestError
        - root.ListClientSessionsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              client_sessions:
                - client_session_id: client_session_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  token: token
                  user_identifier_key: user_identifier_key
                  device_count: 1.1
                  connected_account_ids:
                    - connected_account_ids
                  connect_webview_ids:
                    - connect_webview_ids
                  user_identity_ids:
                    - user_identity_ids
              ok: true
    revoke:
      path: /client_sessions/revoke
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/revoke
      request:
        name: RevokeClientSessionsRequest
        body:
          properties:
            client_session_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: RevokeClientSessionsResponse
        status-code: 200
      errors:
        - root.RevokeClientSessionsRequestBadRequestError
        - root.RevokeClientSessionsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            client_session_id: client_session_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "connectWebviews.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/connect_webviews/create",
              "docs": undefined,
              "errors": [
                "root.CreateConnectWebviewsRequestBadRequestError",
                "root.CreateConnectWebviewsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "connect_webview": {
                        "accepted_devices": [
                          "accepted_devices",
                        ],
                        "accepted_providers": [
                          "accepted_providers",
                        ],
                        "any_device_allowed": true,
                        "any_provider_allowed": true,
                        "authorized_at": "2024-01-15T09:30:00Z",
                        "automatically_manage_new_devices": true,
                        "connect_webview_id": "connect_webview_id",
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "custom_redirect_failure_url": "custom_redirect_failure_url",
                        "custom_redirect_url": "custom_redirect_url",
                        "device_selection_mode": "none",
                        "login_successful": true,
                        "selected_provider": "selected_provider",
                        "status": "pending",
                        "url": "url",
                        "wait_for_device_creation": true,
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connect_webviews/create",
              "request": {
                "body": {
                  "properties": {
                    "accepted_providers": "optional<list<CreateConnectWebviewsRequestAcceptedProvidersItem>>",
                    "automatically_manage_new_devices": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "custom_metadata": "optional<map<string, optional<nullable<CreateConnectWebviewsRequestCustomMetadataValue>>>>",
                    "custom_redirect_failure_url": "optional<string>",
                    "custom_redirect_url": "optional<string>",
                    "device_selection_mode": "optional<CreateConnectWebviewsRequestDeviceSelectionMode>",
                    "provider_category": "optional<CreateConnectWebviewsRequestProviderCategory>",
                    "wait_for_device_creation": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateConnectWebviewsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connect_webview",
                "status-code": 200,
                "type": "CreateConnectWebviewsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/connect_webviews/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteConnectWebviewsRequestBadRequestError",
                "root.DeleteConnectWebviewsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "connect_webview_id": "connect_webview_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connect_webviews/delete",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteConnectWebviewsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteConnectWebviewsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/connect_webviews/get",
              "docs": undefined,
              "errors": [
                "root.GetConnectWebviewsRequestBadRequestError",
                "root.GetConnectWebviewsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "connect_webview_id": "connect_webview_id",
                  },
                  "response": {
                    "body": {
                      "connect_webview": {
                        "accepted_devices": [
                          "accepted_devices",
                        ],
                        "accepted_providers": [
                          "accepted_providers",
                        ],
                        "any_device_allowed": true,
                        "any_provider_allowed": true,
                        "authorized_at": "2024-01-15T09:30:00Z",
                        "automatically_manage_new_devices": true,
                        "connect_webview_id": "connect_webview_id",
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "custom_redirect_failure_url": "custom_redirect_failure_url",
                        "custom_redirect_url": "custom_redirect_url",
                        "device_selection_mode": "none",
                        "login_successful": true,
                        "selected_provider": "selected_provider",
                        "status": "pending",
                        "url": "url",
                        "wait_for_device_creation": true,
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connect_webviews/get",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetConnectWebviewsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connect_webview",
                "status-code": 200,
                "type": "GetConnectWebviewsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/connect_webviews/list",
              "docs": undefined,
              "errors": [
                "root.ListConnectWebviewsRequestBadRequestError",
                "root.ListConnectWebviewsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "connect_webviews": [
                        {
                          "accepted_devices": [
                            "accepted_devices",
                          ],
                          "accepted_providers": [
                            "accepted_providers",
                          ],
                          "any_device_allowed": true,
                          "any_provider_allowed": true,
                          "authorized_at": "2024-01-15T09:30:00Z",
                          "automatically_manage_new_devices": true,
                          "connect_webview_id": "connect_webview_id",
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "custom_redirect_failure_url": "custom_redirect_failure_url",
                          "custom_redirect_url": "custom_redirect_url",
                          "device_selection_mode": "none",
                          "login_successful": true,
                          "selected_provider": "selected_provider",
                          "status": "pending",
                          "url": "url",
                          "wait_for_device_creation": true,
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connect_webviews/list",
              "request": {
                "body": {
                  "properties": {
                    "custom_metadata_has": {
                      "docs": "Returns devices where the webview's custom_metadata contains all of the provided key/value pairs.",
                      "type": "optional<map<string, ListConnectWebviewsRequestCustomMetadataHasValue>>",
                    },
                    "limit": {
                      "default": 500,
                      "type": "optional<nullable<double>>",
                    },
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListConnectWebviewsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connect_webviews",
                "status-code": 200,
                "type": "ListConnectWebviewsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateConnectWebviewsRequestAcceptedProvidersItem": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "schlage",
              "smartthings",
              "yale",
              "genie",
              "doorking",
              "salto",
              "lockly",
              "ttlock",
              "linear",
              "noiseaware",
              "nuki",
              "seam_relay_admin",
              "igloo",
              "kwikset",
              "minut",
              "my_2n",
              "controlbyweb",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "four_suites",
              "dormakaba_oracode",
              "pti",
              "wyze",
              "seam_passport",
              "visionline",
              "assa_abloy_credential_service",
              "seam_bridge",
              "tedee",
              "honeywell_resideo",
              "latch",
              "yale_access",
              "hid_cm",
              "google_nest",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateConnectWebviewsRequestCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 500,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "boolean",
              "optional<nullable<string>>",
            ],
          },
          "CreateConnectWebviewsRequestDeviceSelectionMode": {
            "enum": [
              "none",
              "single",
              "multiple",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateConnectWebviewsRequestProviderCategory": {
            "enum": [
              "stable",
              "consumer_smartlocks",
              "thermostats",
              "noise_sensors",
              "access_control_systems",
              "internal_beta",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateConnectWebviewsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "connect_webview": "root.ConnectWebview",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteConnectWebviewsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetConnectWebviewsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "connect_webview": "root.ConnectWebview",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListConnectWebviewsRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ListConnectWebviewsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "connect_webviews": "list<root.ConnectWebview>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  CreateConnectWebviewsRequestDeviceSelectionMode:
    enum:
      - none
      - single
      - multiple
    inline: true
    source:
      openapi: ../openapi.json
  CreateConnectWebviewsRequestAcceptedProvidersItem:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - schlage
      - smartthings
      - yale
      - genie
      - doorking
      - salto
      - lockly
      - ttlock
      - linear
      - noiseaware
      - nuki
      - seam_relay_admin
      - igloo
      - kwikset
      - minut
      - my_2n
      - controlbyweb
      - nest
      - igloohome
      - ecobee
      - hubitat
      - four_suites
      - dormakaba_oracode
      - pti
      - wyze
      - seam_passport
      - visionline
      - assa_abloy_credential_service
      - seam_bridge
      - tedee
      - honeywell_resideo
      - latch
      - yale_access
      - hid_cm
      - google_nest
    inline: true
    source:
      openapi: ../openapi.json
  CreateConnectWebviewsRequestProviderCategory:
    enum:
      - stable
      - consumer_smartlocks
      - thermostats
      - noise_sensors
      - access_control_systems
      - internal_beta
    inline: true
    source:
      openapi: ../openapi.json
  CreateConnectWebviewsRequestCustomMetadataValue:
    discriminated: false
    union:
      - type: string
        validation:
          maxLength: 500
      - boolean
      - optional<nullable<string>>
    source:
      openapi: ../openapi.json
    inline: true
  CreateConnectWebviewsResponse:
    properties:
      connect_webview: root.ConnectWebview
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteConnectWebviewsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetConnectWebviewsResponse:
    properties:
      connect_webview: root.ConnectWebview
      ok: boolean
    source:
      openapi: ../openapi.json
  ListConnectWebviewsRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  ListConnectWebviewsResponse:
    properties:
      connect_webviews: list<root.ConnectWebview>
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /connect_webviews/create
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /connect_webviews/create
      request:
        name: CreateConnectWebviewsRequest
        body:
          properties:
            device_selection_mode: optional<CreateConnectWebviewsRequestDeviceSelectionMode>
            custom_redirect_url: optional<string>
            custom_redirect_failure_url: optional<string>
            accepted_providers: optional<list<CreateConnectWebviewsRequestAcceptedProvidersItem>>
            provider_category: optional<CreateConnectWebviewsRequestProviderCategory>
            custom_metadata: >-
              optional<map<string,
              optional<nullable<CreateConnectWebviewsRequestCustomMetadataValue>>>>
            automatically_manage_new_devices:
              type: optional<boolean>
              default: true
            wait_for_device_creation:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: CreateConnectWebviewsResponse
        status-code: 200
        property: connect_webview
      errors:
        - root.CreateConnectWebviewsRequestBadRequestError
        - root.CreateConnectWebviewsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              connect_webview:
                connect_webview_id: connect_webview_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                connected_account_id: connected_account_id
                url: url
                device_selection_mode: none
                accepted_providers:
                  - accepted_providers
                accepted_devices:
                  - accepted_devices
                any_device_allowed: true
                any_provider_allowed: true
                login_successful: true
                status: pending
                custom_redirect_url: custom_redirect_url
                custom_redirect_failure_url: custom_redirect_failure_url
                custom_metadata:
                  key: value
                automatically_manage_new_devices: true
                wait_for_device_creation: true
                authorized_at: '2024-01-15T09:30:00Z'
                selected_provider: selected_provider
              ok: true
    delete:
      path: /connect_webviews/delete
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /connect_webviews/delete
      request:
        name: DeleteConnectWebviewsRequest
        body:
          properties:
            connect_webview_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DeleteConnectWebviewsResponse
        status-code: 200
      errors:
        - root.DeleteConnectWebviewsRequestBadRequestError
        - root.DeleteConnectWebviewsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            connect_webview_id: connect_webview_id
          response:
            body:
              ok: true
    get:
      path: /connect_webviews/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /connect_webviews/get
      request:
        name: GetConnectWebviewsRequest
        body:
          properties:
            connect_webview_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetConnectWebviewsResponse
        status-code: 200
        property: connect_webview
      errors:
        - root.GetConnectWebviewsRequestBadRequestError
        - root.GetConnectWebviewsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            connect_webview_id: connect_webview_id
          response:
            body:
              connect_webview:
                connect_webview_id: connect_webview_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                connected_account_id: connected_account_id
                url: url
                device_selection_mode: none
                accepted_providers:
                  - accepted_providers
                accepted_devices:
                  - accepted_devices
                any_device_allowed: true
                any_provider_allowed: true
                login_successful: true
                status: pending
                custom_redirect_url: custom_redirect_url
                custom_redirect_failure_url: custom_redirect_failure_url
                custom_metadata:
                  key: value
                automatically_manage_new_devices: true
                wait_for_device_creation: true
                authorized_at: '2024-01-15T09:30:00Z'
                selected_provider: selected_provider
              ok: true
    list:
      path: /connect_webviews/list
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /connect_webviews/list
      request:
        name: ListConnectWebviewsRequest
        body:
          properties:
            user_identifier_key: optional<string>
            custom_metadata_has:
              type: >-
                optional<map<string,
                ListConnectWebviewsRequestCustomMetadataHasValue>>
              docs: >-
                Returns devices where the webview's custom_metadata contains all
                of the provided key/value pairs.
            limit:
              type: optional<nullable<double>>
              default: 500
        content-type: application/json
      response:
        docs: OK
        type: ListConnectWebviewsResponse
        status-code: 200
        property: connect_webviews
      errors:
        - root.ListConnectWebviewsRequestBadRequestError
        - root.ListConnectWebviewsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              connect_webviews:
                - connect_webview_id: connect_webview_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  connected_account_id: connected_account_id
                  url: url
                  device_selection_mode: none
                  accepted_providers:
                    - accepted_providers
                  accepted_devices:
                    - accepted_devices
                  any_device_allowed: true
                  any_provider_allowed: true
                  login_successful: true
                  status: pending
                  custom_redirect_url: custom_redirect_url
                  custom_redirect_failure_url: custom_redirect_failure_url
                  custom_metadata:
                    key: value
                  automatically_manage_new_devices: true
                  wait_for_device_creation: true
                  authorized_at: '2024-01-15T09:30:00Z'
                  selected_provider: selected_provider
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "connectedAccounts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "delete": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/connected_accounts/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteConnectedAccountsRequestBadRequestError",
                "root.DeleteConnectedAccountsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "connected_account_id": "connected_account_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connected_accounts/delete",
              "request": {
                "body": {
                  "properties": {
                    "connected_account_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteConnectedAccountsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteConnectedAccountsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/connected_accounts/get",
              "docs": undefined,
              "errors": [
                "root.GetConnectedAccountsRequestBadRequestError",
                "root.GetConnectedAccountsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "connected_account_id": "connected_account_id",
                  },
                  "response": {
                    "body": {
                      "connected_account": {
                        "account_type": "account_type",
                        "account_type_display_name": "account_type_display_name",
                        "automatically_manage_new_devices": true,
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "errors": {
                          "key": "value",
                        },
                        "user_identifier": {
                          "api_url": "api_url",
                          "email": "email",
                          "exclusive": true,
                          "phone": "phone",
                          "username": "username",
                        },
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connected_accounts/get",
              "request": {
                "body": "GetConnectedAccountsRequest",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK",
                "property": "connected_account",
                "status-code": 200,
                "type": "GetConnectedAccountsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/connected_accounts/list",
              "docs": undefined,
              "errors": [
                "root.ListConnectedAccountsRequestBadRequestError",
                "root.ListConnectedAccountsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "connected_accounts": [
                        {
                          "account_type": "account_type",
                          "account_type_display_name": "account_type_display_name",
                          "automatically_manage_new_devices": true,
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "errors": {
                            "key": "value",
                          },
                          "warnings": {
                            "key": "value",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connected_accounts/list",
              "request": {
                "body": {
                  "properties": {
                    "custom_metadata_has": {
                      "docs": "Returns devices where the account's custom_metadata contains all of the provided key/value pairs.",
                      "type": "optional<map<string, ListConnectedAccountsRequestCustomMetadataHasValue>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListConnectedAccountsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connected_accounts",
                "status-code": 200,
                "type": "ListConnectedAccountsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/connected_accounts/update",
              "docs": undefined,
              "errors": [
                "root.UpdateConnectedAccountsRequestBadRequestError",
                "root.UpdateConnectedAccountsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "connected_account_id": "connected_account_id",
                  },
                  "response": {
                    "body": {
                      "connected_account": {
                        "account_type": "account_type",
                        "account_type_display_name": "account_type_display_name",
                        "automatically_manage_new_devices": true,
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "errors": {
                          "key": "value",
                        },
                        "user_identifier": {
                          "api_url": "api_url",
                          "email": "email",
                          "exclusive": true,
                          "phone": "phone",
                          "username": "username",
                        },
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connected_accounts/update",
              "request": {
                "body": {
                  "properties": {
                    "automatically_manage_new_devices": "optional<boolean>",
                    "connected_account_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "custom_metadata": "optional<map<string, optional<nullable<UpdateConnectedAccountsRequestCustomMetadataValue>>>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateConnectedAccountsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connected_account",
                "status-code": 200,
                "type": "UpdateConnectedAccountsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "DeleteConnectedAccountsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetConnectedAccountsRequest": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "GetConnectedAccountsRequestConnectedAccountId",
              "GetConnectedAccountsRequestEmail",
            ],
          },
          "GetConnectedAccountsRequestConnectedAccountId": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "connected_account_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetConnectedAccountsRequestEmail": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "email": {
                "type": "string",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetConnectedAccountsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "connected_account": "root.ConnectedAccount",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListConnectedAccountsRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ListConnectedAccountsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "connected_accounts": "list<root.ConnectedAccount>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateConnectedAccountsRequestCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 500,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "boolean",
              "optional<nullable<string>>",
            ],
          },
          "UpdateConnectedAccountsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "connected_account": "root.ConnectedAccount",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  DeleteConnectedAccountsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetConnectedAccountsRequestConnectedAccountId:
    properties:
      connected_account_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
    inline: true
  GetConnectedAccountsRequestEmail:
    properties:
      email:
        type: string
        validation:
          format: email
    source:
      openapi: ../openapi.json
    inline: true
  GetConnectedAccountsRequest:
    discriminated: false
    union:
      - GetConnectedAccountsRequestConnectedAccountId
      - GetConnectedAccountsRequestEmail
    source:
      openapi: ../openapi.json
  GetConnectedAccountsResponse:
    properties:
      connected_account: root.ConnectedAccount
      ok: boolean
    source:
      openapi: ../openapi.json
  ListConnectedAccountsRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  ListConnectedAccountsResponse:
    properties:
      connected_accounts: list<root.ConnectedAccount>
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateConnectedAccountsRequestCustomMetadataValue:
    discriminated: false
    union:
      - type: string
        validation:
          maxLength: 500
      - boolean
      - optional<nullable<string>>
    source:
      openapi: ../openapi.json
    inline: true
  UpdateConnectedAccountsResponse:
    properties:
      connected_account: root.ConnectedAccount
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    delete:
      path: /connected_accounts/delete
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /connected_accounts/delete
      request:
        name: DeleteConnectedAccountsRequest
        body:
          properties:
            connected_account_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: DeleteConnectedAccountsResponse
        status-code: 200
      errors:
        - root.DeleteConnectedAccountsRequestBadRequestError
        - root.DeleteConnectedAccountsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            connected_account_id: connected_account_id
          response:
            body:
              ok: true
    get:
      path: /connected_accounts/get
      method: POST
      auth:
        - client_session: []
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /connected_accounts/get
      request:
        body: GetConnectedAccountsRequest
        content-type: application/json
      response:
        docs: OK
        type: GetConnectedAccountsResponse
        status-code: 200
        property: connected_account
      errors:
        - root.GetConnectedAccountsRequestBadRequestError
        - root.GetConnectedAccountsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            connected_account_id: connected_account_id
          response:
            body:
              connected_account:
                connected_account_id: connected_account_id
                created_at: '2024-01-15T09:30:00Z'
                user_identifier:
                  username: username
                  api_url: api_url
                  email: email
                  phone: phone
                  exclusive: true
                account_type: account_type
                account_type_display_name: account_type_display_name
                errors:
                  key: value
                warnings:
                  key: value
                custom_metadata:
                  key: value
                automatically_manage_new_devices: true
              ok: true
    list:
      path: /connected_accounts/list
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /connected_accounts/list
      request:
        name: ListConnectedAccountsRequest
        body:
          properties:
            custom_metadata_has:
              type: >-
                optional<map<string,
                ListConnectedAccountsRequestCustomMetadataHasValue>>
              docs: >-
                Returns devices where the account's custom_metadata contains all
                of the provided key/value pairs.
        content-type: application/json
      response:
        docs: OK
        type: ListConnectedAccountsResponse
        status-code: 200
        property: connected_accounts
      errors:
        - root.ListConnectedAccountsRequestBadRequestError
        - root.ListConnectedAccountsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              connected_accounts:
                - connected_account_id: connected_account_id
                  created_at: '2024-01-15T09:30:00Z'
                  account_type: account_type
                  account_type_display_name: account_type_display_name
                  errors:
                    key: value
                  warnings:
                    key: value
                  custom_metadata:
                    key: value
                  automatically_manage_new_devices: true
              ok: true
    update:
      path: /connected_accounts/update
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /connected_accounts/update
      request:
        name: UpdateConnectedAccountsRequest
        body:
          properties:
            connected_account_id:
              type: string
              validation:
                format: uuid
            automatically_manage_new_devices: optional<boolean>
            custom_metadata: >-
              optional<map<string,
              optional<nullable<UpdateConnectedAccountsRequestCustomMetadataValue>>>>
        content-type: application/json
      response:
        docs: OK
        type: UpdateConnectedAccountsResponse
        status-code: 200
        property: connected_account
      errors:
        - root.UpdateConnectedAccountsRequestBadRequestError
        - root.UpdateConnectedAccountsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            connected_account_id: connected_account_id
          response:
            body:
              connected_account:
                connected_account_id: connected_account_id
                created_at: '2024-01-15T09:30:00Z'
                user_identifier:
                  username: username
                  api_url: api_url
                  email: email
                  phone: phone
                  exclusive: true
                account_type: account_type
                account_type_display_name: account_type_display_name
                errors:
                  key: value
                warnings:
                  key: value
                custom_metadata:
                  key: value
                automatically_manage_new_devices: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "devices.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "delete": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/devices/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteDevicesRequestBadRequestError",
                "root.DeleteDevicesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/delete",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteDevicesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteDevicesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/devices/get",
              "docs": undefined,
              "errors": [
                "root.GetDevicesRequestBadRequestError",
                "root.GetDevicesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "device": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "_experimental_supported_code_from_access_codes_lengths": [
                            1.1,
                          ],
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "appearance": {
                            "name": "name",
                          },
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                          "august_metadata": {
                            "has_keypad": true,
                            "house_name": "house_name",
                            "lock_id": "lock_id",
                            "lock_name": "lock_name",
                          },
                          "avigilon_alta_metadata": {
                            "entry_name": "entry_name",
                            "entry_relays_total_count": 1.1,
                            "org_name": "org_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                            "zone_id": 1.1,
                            "zone_name": "zone_name",
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "brivo_metadata": {
                            "device_name": "device_name",
                          },
                          "code_constraints": [
                            {
                              "constraint_type": "no_zeros",
                            },
                          ],
                          "controlbyweb_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "relay_name": null,
                          },
                          "currently_triggering_noise_threshold_ids": [
                            "currently_triggering_noise_threshold_ids",
                          ],
                          "door_open": true,
                          "dormakaba_oracode_metadata": {
                            "door_id": 1.1,
                            "door_is_wireless": true,
                            "door_name": "door_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                          },
                          "ecobee_metadata": {
                            "device_name": "device_name",
                            "ecobee_device_id": "ecobee_device_id",
                          },
                          "four_suites_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                            "reclose_delay_in_seconds": 1.1,
                          },
                          "genie_metadata": {
                            "device_name": "device_name",
                            "door_name": "door_name",
                          },
                          "has_direct_power": true,
                          "has_native_entry_events": true,
                          "honeywell_resideo_metadata": {
                            "device_name": "device_name",
                            "honeywell_resideo_device_id": "honeywell_resideo_device_id",
                          },
                          "hubitat_metadata": {
                            "device_id": "device_id",
                            "device_label": "device_label",
                            "device_name": "device_name",
                          },
                          "igloo_metadata": {
                            "bridge_id": "bridge_id",
                            "device_id": "device_id",
                          },
                          "igloohome_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "keypad_battery": {
                            "level": 1.1,
                          },
                          "kwikset_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "model_number": "model_number",
                          },
                          "locked": true,
                          "lockly_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "manufacturer": "manufacturer",
                          "max_active_codes_supported": 1.1,
                          "minut_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "latest_sensor_values": {
                              "accelerometer_z": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "humidity": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "pressure": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "sound": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "temperature": {
                                "time": "time",
                                "value": 1.1,
                              },
                            },
                          },
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "nest_metadata": {
                            "custom_name": "custom_name",
                            "device_name": "device_name",
                            "nest_device_id": "nest_device_id",
                          },
                          "noise_level_decibels": 1.1,
                          "noiseaware_metadata": {
                            "device_id": "device_id",
                            "device_model": "indoor",
                            "device_name": "device_name",
                            "noise_level_decibel": 1.1,
                            "noise_level_nrs": 1.1,
                          },
                          "nuki_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                          "salto_metadata": {
                            "battery_level": "battery_level",
                            "customer_reference": "customer_reference",
                            "lock_id": "lock_id",
                            "lock_type": "lock_type",
                            "locked_state": "locked_state",
                          },
                          "schlage_metadata": {
                            "access_code_length": null,
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "seam_bridge_metadata": {
                            "device_num": 1.1,
                            "name": "name",
                          },
                          "serial_number": "serial_number",
                          "smartthings_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "supported_code_lengths": [
                            1.1,
                          ],
                          "supports_accessory_keypad": true,
                          "supports_backup_access_code_pool": true,
                          "supports_offline_access_codes": true,
                          "tedee_metadata": {
                            "bridge_id": 1.1,
                            "bridge_name": "bridge_name",
                            "device_id": 1.1,
                            "device_model": "device_model",
                            "device_name": "device_name",
                            "serial_number": "serial_number",
                          },
                          "ttlock_metadata": {
                            "feature_value": "feature_value",
                            "lock_alias": "lock_alias",
                            "lock_id": 1.1,
                          },
                          "two_n_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                          },
                          "wyze_metadata": {
                            "device_id": "device_id",
                            "device_info_model": "device_info_model",
                            "device_name": "device_name",
                            "product_model": "product_model",
                            "product_name": "product_name",
                            "product_type": "product_type",
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetDevicesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "device",
                "status-code": 200,
                "type": "GetDevicesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/devices/list",
              "docs": undefined,
              "errors": [
                "root.ListDevicesRequestBadRequestError",
                "root.ListDevicesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "location": {},
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/list",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_id": {
                      "docs": "List all devices owned by this connected account",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_ids": "optional<list<string>>",
                    "created_before": "optional<nullable<datetime>>",
                    "custom_metadata_has": "optional<map<string, ListDevicesRequestCustomMetadataHasValue>>",
                    "device_ids": "optional<list<string>>",
                    "device_type": "optional<ListDevicesRequestDeviceType>",
                    "device_types": "optional<list<ListDevicesRequestDeviceTypesItem>>",
                    "exclude_if": "optional<list<ListDevicesRequestExcludeIfItem>>",
                    "include_if": "optional<list<ListDevicesRequestIncludeIfItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<nullable<double>>",
                    },
                    "manufacturer": "optional<ListDevicesRequestManufacturer>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListDevicesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "devices",
                "status-code": 200,
                "type": "ListDevicesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_device_providers": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/devices/list_device_providers",
              "docs": undefined,
              "errors": [
                "root.ListDeviceProvidersDevicesRequestBadRequestError",
                "root.ListDeviceProvidersDevicesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "device_providers": [
                        {
                          "device_provider_name": "akuvox",
                          "display_name": "display_name",
                          "image_url": "image_url",
                          "provider_categories": [
                            "stable",
                          ],
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/list_device_providers",
              "request": {
                "body": {
                  "properties": {
                    "provider_category": "optional<ListDeviceProvidersDevicesRequestProviderCategory>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListDeviceProvidersDevicesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "device_providers",
                "status-code": 200,
                "type": "ListDeviceProvidersDevicesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/devices/update",
              "docs": undefined,
              "errors": [
                "root.UpdateDevicesRequestBadRequestError",
                "root.UpdateDevicesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/update",
              "request": {
                "body": {
                  "properties": {
                    "custom_metadata": "optional<map<string, optional<nullable<UpdateDevicesRequestCustomMetadataValue>>>>",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "is_managed": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "name": "optional<nullable<string>>",
                    "properties": "optional<UpdateDevicesRequestProperties>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateDevicesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateDevicesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "DeleteDevicesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetDevicesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "device": "root.Device",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListDeviceProvidersDevicesRequestProviderCategory": {
            "enum": [
              "stable",
              "consumer_smartlocks",
              "thermostats",
              "noise_sensors",
              "access_control_systems",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListDeviceProvidersDevicesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "device_providers": "list<root.DeviceProvider>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListDevicesRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ListDevicesRequestDeviceType": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListDevicesRequestDeviceTypesItem": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListDevicesRequestExcludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListDevicesRequestIncludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListDevicesRequestManufacturer": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "doorking",
              "four_suites",
              "genie",
              "igloo",
              "keywe",
              "kwikset",
              "linear",
              "lockly",
              "nuki",
              "philia",
              "salto",
              "samsung",
              "schlage",
              "seam",
              "unknown",
              "wyze",
              "yale",
              "minut",
              "two_n",
              "ttlock",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "controlbyweb",
              "smartthings",
              "dormakaba_oracode",
              "tedee",
              "honeywell_resideo",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListDevicesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "devices": "list<root.Device>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateDevicesRequestCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 500,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "boolean",
              "optional<nullable<string>>",
            ],
          },
          "UpdateDevicesRequestProperties": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "name": "optional<nullable<string>>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateDevicesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  DeleteDevicesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetDevicesResponse:
    properties:
      device: root.Device
      ok: boolean
    source:
      openapi: ../openapi.json
  ListDevicesRequestDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    inline: true
    source:
      openapi: ../openapi.json
  ListDevicesRequestDeviceTypesItem:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    inline: true
    source:
      openapi: ../openapi.json
  ListDevicesRequestManufacturer:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - doorking
      - four_suites
      - genie
      - igloo
      - keywe
      - kwikset
      - linear
      - lockly
      - nuki
      - philia
      - salto
      - samsung
      - schlage
      - seam
      - unknown
      - wyze
      - yale
      - minut
      - two_n
      - ttlock
      - nest
      - igloohome
      - ecobee
      - hubitat
      - controlbyweb
      - smartthings
      - dormakaba_oracode
      - tedee
      - honeywell_resideo
    inline: true
    source:
      openapi: ../openapi.json
  ListDevicesRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  ListDevicesRequestIncludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    inline: true
    source:
      openapi: ../openapi.json
  ListDevicesRequestExcludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    inline: true
    source:
      openapi: ../openapi.json
  ListDevicesResponse:
    properties:
      devices: list<root.Device>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListDeviceProvidersDevicesRequestProviderCategory:
    enum:
      - stable
      - consumer_smartlocks
      - thermostats
      - noise_sensors
      - access_control_systems
    inline: true
    source:
      openapi: ../openapi.json
  ListDeviceProvidersDevicesResponse:
    properties:
      device_providers: list<root.DeviceProvider>
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateDevicesRequestProperties:
    properties:
      name: optional<nullable<string>>
    source:
      openapi: ../openapi.json
    inline: true
  UpdateDevicesRequestCustomMetadataValue:
    discriminated: false
    union:
      - type: string
        validation:
          maxLength: 500
      - boolean
      - optional<nullable<string>>
    source:
      openapi: ../openapi.json
    inline: true
  UpdateDevicesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    delete:
      path: /devices/delete
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /devices/delete
      request:
        name: DeleteDevicesRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DeleteDevicesResponse
        status-code: 200
      errors:
        - root.DeleteDevicesRequestBadRequestError
        - root.DeleteDevicesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              ok: true
    get:
      path: /devices/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /devices/get
      request:
        name: GetDevicesRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            name: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: GetDevicesResponse
        status-code: 200
        property: device
      errors:
        - root.GetDevicesRequestBadRequestError
        - root.GetDevicesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              device:
                device_id: device_id
                device_type: akuvox_lock
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  online: true
                  name: name
                  accessory_keypad:
                    is_connected: true
                  appearance:
                    name: name
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                  has_direct_power: true
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  serial_number: serial_number
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  supports_accessory_keypad: true
                  supports_offline_access_codes: true
                  noise_level_decibels: 1.1
                  currently_triggering_noise_threshold_ids:
                    - currently_triggering_noise_threshold_ids
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                  august_metadata:
                    lock_id: lock_id
                    lock_name: lock_name
                    house_name: house_name
                    has_keypad: true
                  avigilon_alta_metadata:
                    entry_name: entry_name
                    org_name: org_name
                    zone_id: 1.1
                    zone_name: zone_name
                    site_id: 1.1
                    site_name: site_name
                    entry_relays_total_count: 1.1
                  schlage_metadata:
                    device_id: device_id
                    device_name: device_name
                    access_code_length: null
                  smartthings_metadata:
                    device_id: device_id
                    device_name: device_name
                  lockly_metadata:
                    device_id: device_id
                    device_name: device_name
                  nuki_metadata:
                    device_id: device_id
                    device_name: device_name
                  kwikset_metadata:
                    device_id: device_id
                    device_name: device_name
                    model_number: model_number
                  salto_metadata:
                    lock_id: lock_id
                    customer_reference: customer_reference
                    lock_type: lock_type
                    battery_level: battery_level
                    locked_state: locked_state
                  genie_metadata:
                    device_name: device_name
                    door_name: door_name
                  brivo_metadata:
                    device_name: device_name
                  igloo_metadata:
                    device_id: device_id
                    bridge_id: bridge_id
                  noiseaware_metadata:
                    device_model: indoor
                    noise_level_nrs: 1.1
                    noise_level_decibel: 1.1
                    device_name: device_name
                    device_id: device_id
                  minut_metadata:
                    device_id: device_id
                    device_name: device_name
                    latest_sensor_values:
                      temperature:
                        time: time
                        value: 1.1
                      sound:
                        time: time
                        value: 1.1
                      humidity:
                        time: time
                        value: 1.1
                      pressure:
                        time: time
                        value: 1.1
                      accelerometer_z:
                        time: time
                        value: 1.1
                  four_suites_metadata:
                    device_id: 1.1
                    device_name: device_name
                    reclose_delay_in_seconds: 1.1
                  two_n_metadata:
                    device_id: 1.1
                    device_name: device_name
                  controlbyweb_metadata:
                    device_id: device_id
                    device_name: device_name
                    relay_name: null
                  ttlock_metadata:
                    lock_id: 1.1
                    lock_alias: lock_alias
                    feature_value: feature_value
                  seam_bridge_metadata:
                    device_num: 1.1
                    name: name
                  igloohome_metadata:
                    device_id: device_id
                    device_name: device_name
                  nest_metadata:
                    nest_device_id: nest_device_id
                    device_name: device_name
                    custom_name: custom_name
                  ecobee_metadata:
                    ecobee_device_id: ecobee_device_id
                    device_name: device_name
                  honeywell_resideo_metadata:
                    honeywell_resideo_device_id: honeywell_resideo_device_id
                    device_name: device_name
                  hubitat_metadata:
                    device_id: device_id
                    device_name: device_name
                    device_label: device_label
                  dormakaba_oracode_metadata:
                    door_id: 1.1
                    door_name: door_name
                    door_is_wireless: true
                    site_id: 1.1
                    site_name: site_name
                  wyze_metadata:
                    device_id: device_id
                    device_name: device_name
                    product_name: product_name
                    product_type: product_type
                    product_model: product_model
                    device_info_model: device_info_model
                  tedee_metadata:
                    device_id: 1.1
                    serial_number: serial_number
                    device_name: device_name
                    device_model: device_model
                    bridge_id: 1.1
                    bridge_name: bridge_name
                  _experimental_supported_code_from_access_codes_lengths:
                    - 1.1
                  code_constraints:
                    - constraint_type: no_zeros
                  supported_code_lengths:
                    - 1.1
                  max_active_codes_supported: 1.1
                  supports_backup_access_code_pool: true
                  has_native_entry_events: true
                  locked: true
                  keypad_battery:
                    level: 1.1
                  door_open: true
                location:
                  location_name: location_name
                  timezone: timezone
                connected_account_id: connected_account_id
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
    list:
      path: /devices/list
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /devices/list
      request:
        name: ListDevicesRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              docs: List all devices owned by this connected account
              validation:
                format: uuid
            connected_account_ids: optional<list<string>>
            connect_webview_id:
              type: optional<string>
              validation:
                format: uuid
            device_type: optional<ListDevicesRequestDeviceType>
            device_types: optional<list<ListDevicesRequestDeviceTypesItem>>
            manufacturer: optional<ListDevicesRequestManufacturer>
            device_ids: optional<list<string>>
            limit:
              type: optional<nullable<double>>
              default: 500
            created_before: optional<nullable<datetime>>
            user_identifier_key: optional<string>
            custom_metadata_has: optional<map<string, ListDevicesRequestCustomMetadataHasValue>>
            include_if: optional<list<ListDevicesRequestIncludeIfItem>>
            exclude_if: optional<list<ListDevicesRequestExcludeIfItem>>
        content-type: application/json
      response:
        docs: OK
        type: ListDevicesResponse
        status-code: 200
        property: devices
      errors:
        - root.ListDevicesRequestBadRequestError
        - root.ListDevicesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  location: {}
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    list_device_providers:
      path: /devices/list_device_providers
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /devices/list_device_providers
      request:
        name: ListDeviceProvidersDevicesRequest
        body:
          properties:
            provider_category: optional<ListDeviceProvidersDevicesRequestProviderCategory>
        content-type: application/json
      response:
        docs: OK
        type: ListDeviceProvidersDevicesResponse
        status-code: 200
        property: device_providers
      errors:
        - root.ListDeviceProvidersDevicesRequestBadRequestError
        - root.ListDeviceProvidersDevicesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              device_providers:
                - device_provider_name: akuvox
                  display_name: display_name
                  image_url: image_url
                  provider_categories:
                    - stable
              ok: true
    update:
      path: /devices/update
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /devices/update
      request:
        name: UpdateDevicesRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            properties: optional<UpdateDevicesRequestProperties>
            name: optional<nullable<string>>
            is_managed:
              type: optional<boolean>
              default: true
            custom_metadata: >-
              optional<map<string,
              optional<nullable<UpdateDevicesRequestCustomMetadataValue>>>>
        content-type: application/json
      response:
        docs: OK
        type: UpdateDevicesResponse
        status-code: 200
      errors:
        - root.UpdateDevicesRequestBadRequestError
        - root.UpdateDevicesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "devices/simulate.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "connect": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/devices/simulate/connect",
              "docs": undefined,
              "errors": [
                "root.ConnectSimulateRequestBadRequestError",
                "root.ConnectSimulateRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/simulate/connect",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConnectSimulateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "ConnectSimulateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "disconnect": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/devices/simulate/disconnect",
              "docs": undefined,
              "errors": [
                "root.DisconnectSimulateRequestBadRequestError",
                "root.DisconnectSimulateRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/simulate/disconnect",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DisconnectSimulateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DisconnectSimulateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/devices/simulate/remove",
              "docs": undefined,
              "errors": [
                "root.RemoveSimulateRequestBadRequestError",
                "root.RemoveSimulateRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/simulate/remove",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RemoveSimulateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "RemoveSimulateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ConnectSimulateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DisconnectSimulateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RemoveSimulateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  ConnectSimulateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  DisconnectSimulateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  RemoveSimulateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    connect:
      path: /devices/simulate/connect
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /devices/simulate/connect
      request:
        name: ConnectSimulateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ConnectSimulateResponse
        status-code: 200
      errors:
        - root.ConnectSimulateRequestBadRequestError
        - root.ConnectSimulateRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              ok: true
    disconnect:
      path: /devices/simulate/disconnect
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /devices/simulate/disconnect
      request:
        name: DisconnectSimulateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DisconnectSimulateResponse
        status-code: 200
      errors:
        - root.DisconnectSimulateRequestBadRequestError
        - root.DisconnectSimulateRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              ok: true
    remove:
      path: /devices/simulate/remove
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /devices/simulate/remove
      request:
        name: RemoveSimulateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: RemoveSimulateResponse
        status-code: 200
      errors:
        - root.RemoveSimulateRequestBadRequestError
        - root.RemoveSimulateRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "devices/unmanaged.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/devices/unmanaged/get",
              "docs": undefined,
              "errors": [
                "root.GetUnmanagedRequestBadRequestError",
                "root.GetUnmanagedRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "device": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "properties": {
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "manufacturer": "manufacturer",
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/unmanaged/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetUnmanagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "device",
                "status-code": 200,
                "type": "GetUnmanagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/devices/unmanaged/list",
              "docs": undefined,
              "errors": [
                "root.ListUnmanagedRequestBadRequestError",
                "root.ListUnmanagedRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "properties": {
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/unmanaged/list",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_id": {
                      "docs": "List all devices owned by this connected account",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_ids": "optional<list<string>>",
                    "created_before": "optional<nullable<datetime>>",
                    "custom_metadata_has": "optional<map<string, ListUnmanagedRequestCustomMetadataHasValue>>",
                    "device_ids": "optional<list<string>>",
                    "device_type": "optional<ListUnmanagedRequestDeviceType>",
                    "device_types": "optional<list<ListUnmanagedRequestDeviceTypesItem>>",
                    "exclude_if": "optional<list<ListUnmanagedRequestExcludeIfItem>>",
                    "include_if": "optional<list<ListUnmanagedRequestIncludeIfItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<nullable<double>>",
                    },
                    "manufacturer": "optional<ListUnmanagedRequestManufacturer>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListUnmanagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "devices",
                "status-code": 200,
                "type": "ListUnmanagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/devices/unmanaged/update",
              "docs": undefined,
              "errors": [
                "root.UpdateUnmanagedRequestBadRequestError",
                "root.UpdateUnmanagedRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                    "is_managed": true,
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/unmanaged/update",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "is_managed": "boolean",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateUnmanagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateUnmanagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "GetUnmanagedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "device": "root.UnmanagedDevice",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUnmanagedRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ListUnmanagedRequestDeviceType": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUnmanagedRequestDeviceTypesItem": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUnmanagedRequestExcludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUnmanagedRequestIncludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUnmanagedRequestManufacturer": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "doorking",
              "four_suites",
              "genie",
              "igloo",
              "keywe",
              "kwikset",
              "linear",
              "lockly",
              "nuki",
              "philia",
              "salto",
              "samsung",
              "schlage",
              "seam",
              "unknown",
              "wyze",
              "yale",
              "minut",
              "two_n",
              "ttlock",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "controlbyweb",
              "smartthings",
              "dormakaba_oracode",
              "tedee",
              "honeywell_resideo",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUnmanagedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "devices": "list<root.UnmanagedDevice>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateUnmanagedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  GetUnmanagedResponse:
    properties:
      device: root.UnmanagedDevice
      ok: boolean
    source:
      openapi: ../openapi.json
  ListUnmanagedRequestDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    inline: true
    source:
      openapi: ../openapi.json
  ListUnmanagedRequestDeviceTypesItem:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    inline: true
    source:
      openapi: ../openapi.json
  ListUnmanagedRequestManufacturer:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - doorking
      - four_suites
      - genie
      - igloo
      - keywe
      - kwikset
      - linear
      - lockly
      - nuki
      - philia
      - salto
      - samsung
      - schlage
      - seam
      - unknown
      - wyze
      - yale
      - minut
      - two_n
      - ttlock
      - nest
      - igloohome
      - ecobee
      - hubitat
      - controlbyweb
      - smartthings
      - dormakaba_oracode
      - tedee
      - honeywell_resideo
    inline: true
    source:
      openapi: ../openapi.json
  ListUnmanagedRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  ListUnmanagedRequestIncludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    inline: true
    source:
      openapi: ../openapi.json
  ListUnmanagedRequestExcludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    inline: true
    source:
      openapi: ../openapi.json
  ListUnmanagedResponse:
    properties:
      devices: list<root.UnmanagedDevice>
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateUnmanagedResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /devices/unmanaged/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /devices/unmanaged/get
      request:
        name: GetUnmanagedRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            name: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: GetUnmanagedResponse
        status-code: 200
        property: device
      errors:
        - root.GetUnmanagedRequestBadRequestError
        - root.GetUnmanagedRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              device:
                device_id: device_id
                device_type: akuvox_lock
                connected_account_id: connected_account_id
                capabilities_supported:
                  - access_code
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                properties:
                  accessory_keypad:
                    is_connected: true
                  name: name
                  online: true
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
    list:
      path: /devices/unmanaged/list
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /devices/unmanaged/list
      request:
        name: ListUnmanagedRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              docs: List all devices owned by this connected account
              validation:
                format: uuid
            connected_account_ids: optional<list<string>>
            connect_webview_id:
              type: optional<string>
              validation:
                format: uuid
            device_type: optional<ListUnmanagedRequestDeviceType>
            device_types: optional<list<ListUnmanagedRequestDeviceTypesItem>>
            manufacturer: optional<ListUnmanagedRequestManufacturer>
            device_ids: optional<list<string>>
            limit:
              type: optional<nullable<double>>
              default: 500
            created_before: optional<nullable<datetime>>
            user_identifier_key: optional<string>
            custom_metadata_has: optional<map<string, ListUnmanagedRequestCustomMetadataHasValue>>
            include_if: optional<list<ListUnmanagedRequestIncludeIfItem>>
            exclude_if: optional<list<ListUnmanagedRequestExcludeIfItem>>
        content-type: application/json
      response:
        docs: OK
        type: ListUnmanagedResponse
        status-code: 200
        property: devices
      errors:
        - root.ListUnmanagedRequestBadRequestError
        - root.ListUnmanagedRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  connected_account_id: connected_account_id
                  capabilities_supported:
                    - access_code
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  properties:
                    name: name
                    online: true
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    update:
      path: /devices/unmanaged/update
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /devices/unmanaged/update
      request:
        name: UpdateUnmanagedRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            is_managed: boolean
        content-type: application/json
      response:
        docs: OK
        type: UpdateUnmanagedResponse
        status-code: 200
      errors:
        - root.UpdateUnmanagedRequestBadRequestError
        - root.UpdateUnmanagedRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
            is_managed: true
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "events.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/events/get",
              "docs": undefined,
              "errors": [
                "root.GetEventsRequestBadRequestError",
                "root.GetEventsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "event": {
                        "acs_credential_id": "acs_credential_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "action_attempt_id": "action_attempt_id",
                        "client_session_id": "client_session_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "enrollment_automation_id": "enrollment_automation_id",
                        "event_id": "event_id",
                        "event_type": "event_type",
                        "occurred_at": "2024-01-15T09:30:00Z",
                        "workspace_id": "workspace_id",
                      },
                      "message": "message",
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/events/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "event_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "event_type": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetEventsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "event",
                "status-code": 200,
                "type": "GetEventsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/events/list",
              "docs": undefined,
              "errors": [
                "root.ListEventsRequestBadRequestError",
                "root.ListEventsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "events": [
                        {
                          "acs_credential_id": "acs_credential_id",
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "action_attempt_id": "action_attempt_id",
                          "client_session_id": "client_session_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "enrollment_automation_id": "enrollment_automation_id",
                          "event_id": "event_id",
                          "event_type": "event_type",
                          "occurred_at": "2024-01-15T09:30:00Z",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/events/list",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "access_code_ids": "optional<list<string>>",
                    "between": "optional<list<ListEventsRequestBetweenItem>>",
                    "connected_account_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "device_ids": "optional<list<string>>",
                    "event_type": "optional<ListEventsRequestEventType>",
                    "event_types": "optional<list<ListEventsRequestEventTypesItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<nullable<double>>",
                    },
                    "since": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListEventsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "events",
                "status-code": 200,
                "type": "ListEventsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "GetEventsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "event": "optional<root.Event>",
              "message": "optional<string>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListEventsRequestBetweenItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "datetime",
            ],
          },
          "ListEventsRequestEventType": {
            "enum": [
              {
                "name": "DeviceAccessoryKeypadConnected",
                "value": "device.accessory_keypad_connected",
              },
              {
                "name": "DeviceAccessoryKeypadDisconnected",
                "value": "device.accessory_keypad_disconnected",
              },
              {
                "name": "DeviceConnected",
                "value": "device.connected",
              },
              {
                "name": "DeviceUnmanagedConnected",
                "value": "device.unmanaged.connected",
              },
              {
                "name": "DeviceDisconnected",
                "value": "device.disconnected",
              },
              {
                "name": "DeviceUnmanagedDisconnected",
                "value": "device.unmanaged.disconnected",
              },
              {
                "name": "DeviceConvertedToUnmanaged",
                "value": "device.converted_to_unmanaged",
              },
              {
                "name": "DeviceUnmanagedConvertedToManaged",
                "value": "device.unmanaged.converted_to_managed",
              },
              {
                "name": "DeviceRemoved",
                "value": "device.removed",
              },
              {
                "name": "DeviceDeleted",
                "value": "device.deleted",
              },
              {
                "name": "DeviceTampered",
                "value": "device.tampered",
              },
              {
                "name": "DeviceLowBattery",
                "value": "device.low_battery",
              },
              {
                "name": "DeviceBatteryStatusChanged",
                "value": "device.battery_status_changed",
              },
              {
                "name": "DeviceThirdPartyIntegrationDetected",
                "value": "device.third_party_integration_detected",
              },
              {
                "name": "DeviceThirdPartyIntegrationNoLongerDetected",
                "value": "device.third_party_integration_no_longer_detected",
              },
              {
                "name": "DeviceSaltoPrivacyModeActivated",
                "value": "device.salto.privacy_mode_activated",
              },
              {
                "name": "DeviceSaltoPrivacyModeDeactivated",
                "value": "device.salto.privacy_mode_deactivated",
              },
              {
                "name": "DeviceConnectionBecameFlaky",
                "value": "device.connection_became_flaky",
              },
              {
                "name": "DeviceConnectionStabilized",
                "value": "device.connection_stabilized",
              },
              {
                "name": "DeviceErrorSubscriptionRequired",
                "value": "device.error.subscription_required",
              },
              {
                "name": "DeviceErrorSubscriptionRequiredResolved",
                "value": "device.error.subscription_required.resolved",
              },
              {
                "name": "AccessCodeCreated",
                "value": "access_code.created",
              },
              {
                "name": "AccessCodeChanged",
                "value": "access_code.changed",
              },
              {
                "name": "AccessCodeScheduledOnDevice",
                "value": "access_code.scheduled_on_device",
              },
              {
                "name": "AccessCodeSetOnDevice",
                "value": "access_code.set_on_device",
              },
              {
                "name": "AccessCodeDeleted",
                "value": "access_code.deleted",
              },
              {
                "name": "AccessCodeRemovedFromDevice",
                "value": "access_code.removed_from_device",
              },
              {
                "name": "AccessCodeFailedToSetOnDevice",
                "value": "access_code.failed_to_set_on_device",
              },
              {
                "name": "AccessCodeDelayInSettingOnDevice",
                "value": "access_code.delay_in_setting_on_device",
              },
              {
                "name": "AccessCodeFailedToRemoveFromDevice",
                "value": "access_code.failed_to_remove_from_device",
              },
              {
                "name": "AccessCodeDelayInRemovingFromDevice",
                "value": "access_code.delay_in_removing_from_device",
              },
              {
                "name": "AccessCodeDeletedExternalToSeam",
                "value": "access_code.deleted_external_to_seam",
              },
              {
                "name": "AccessCodeModifiedExternalToSeam",
                "value": "access_code.modified_external_to_seam",
              },
              {
                "name": "AccessCodeUnmanagedConvertedToManaged",
                "value": "access_code.unmanaged.converted_to_managed",
              },
              {
                "name": "AccessCodeUnmanagedFailedToConvertToManaged",
                "value": "access_code.unmanaged.failed_to_convert_to_managed",
              },
              {
                "name": "AccessCodeUnmanagedCreated",
                "value": "access_code.unmanaged.created",
              },
              {
                "name": "AccessCodeUnmanagedRemoved",
                "value": "access_code.unmanaged.removed",
              },
              {
                "name": "LockLocked",
                "value": "lock.locked",
              },
              {
                "name": "LockUnlocked",
                "value": "lock.unlocked",
              },
              {
                "name": "PhoneDeactivated",
                "value": "phone.deactivated",
              },
              {
                "name": "ConnectedAccountConnected",
                "value": "connected_account.connected",
              },
              {
                "name": "ConnectedAccountSuccessfulLogin",
                "value": "connected_account.successful_login",
              },
              {
                "name": "ConnectedAccountCreated",
                "value": "connected_account.created",
              },
              {
                "name": "ConnectedAccountDeleted",
                "value": "connected_account.deleted",
              },
              {
                "name": "ConnectedAccountDisconnected",
                "value": "connected_account.disconnected",
              },
              {
                "name": "ConnectedAccountCompletedFirstSync",
                "value": "connected_account.completed_first_sync",
              },
              {
                "name": "ConnectedAccountCompletedFirstSyncAfterReconnection",
                "value": "connected_account.completed_first_sync_after_reconnection",
              },
              {
                "name": "NoiseSensorNoiseThresholdTriggered",
                "value": "noise_sensor.noise_threshold_triggered",
              },
              {
                "name": "AccessCodeBackupAccessCodePulled",
                "value": "access_code.backup_access_code_pulled",
              },
              {
                "name": "AcsSystemConnected",
                "value": "acs_system.connected",
              },
              {
                "name": "AcsUserDeleted",
                "value": "acs_user.deleted",
              },
              {
                "name": "AcsCredentialDeleted",
                "value": "acs_credential.deleted",
              },
              {
                "name": "EnrollmentAutomationDeleted",
                "value": "enrollment_automation.deleted",
              },
              {
                "name": "ClientSessionDeleted",
                "value": "client_session.deleted",
              },
              {
                "name": "ActionAttemptLockDoorSucceeded",
                "value": "action_attempt.lock_door.succeeded",
              },
              {
                "name": "ActionAttemptLockDoorFailed",
                "value": "action_attempt.lock_door.failed",
              },
              {
                "name": "ActionAttemptUnlockDoorSucceeded",
                "value": "action_attempt.unlock_door.succeeded",
              },
              {
                "name": "ActionAttemptUnlockDoorFailed",
                "value": "action_attempt.unlock_door.failed",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListEventsRequestEventTypesItem": {
            "enum": [
              {
                "name": "DeviceAccessoryKeypadConnected",
                "value": "device.accessory_keypad_connected",
              },
              {
                "name": "DeviceAccessoryKeypadDisconnected",
                "value": "device.accessory_keypad_disconnected",
              },
              {
                "name": "DeviceConnected",
                "value": "device.connected",
              },
              {
                "name": "DeviceUnmanagedConnected",
                "value": "device.unmanaged.connected",
              },
              {
                "name": "DeviceDisconnected",
                "value": "device.disconnected",
              },
              {
                "name": "DeviceUnmanagedDisconnected",
                "value": "device.unmanaged.disconnected",
              },
              {
                "name": "DeviceConvertedToUnmanaged",
                "value": "device.converted_to_unmanaged",
              },
              {
                "name": "DeviceUnmanagedConvertedToManaged",
                "value": "device.unmanaged.converted_to_managed",
              },
              {
                "name": "DeviceRemoved",
                "value": "device.removed",
              },
              {
                "name": "DeviceDeleted",
                "value": "device.deleted",
              },
              {
                "name": "DeviceTampered",
                "value": "device.tampered",
              },
              {
                "name": "DeviceLowBattery",
                "value": "device.low_battery",
              },
              {
                "name": "DeviceBatteryStatusChanged",
                "value": "device.battery_status_changed",
              },
              {
                "name": "DeviceThirdPartyIntegrationDetected",
                "value": "device.third_party_integration_detected",
              },
              {
                "name": "DeviceThirdPartyIntegrationNoLongerDetected",
                "value": "device.third_party_integration_no_longer_detected",
              },
              {
                "name": "DeviceSaltoPrivacyModeActivated",
                "value": "device.salto.privacy_mode_activated",
              },
              {
                "name": "DeviceSaltoPrivacyModeDeactivated",
                "value": "device.salto.privacy_mode_deactivated",
              },
              {
                "name": "DeviceConnectionBecameFlaky",
                "value": "device.connection_became_flaky",
              },
              {
                "name": "DeviceConnectionStabilized",
                "value": "device.connection_stabilized",
              },
              {
                "name": "DeviceErrorSubscriptionRequired",
                "value": "device.error.subscription_required",
              },
              {
                "name": "DeviceErrorSubscriptionRequiredResolved",
                "value": "device.error.subscription_required.resolved",
              },
              {
                "name": "AccessCodeCreated",
                "value": "access_code.created",
              },
              {
                "name": "AccessCodeChanged",
                "value": "access_code.changed",
              },
              {
                "name": "AccessCodeScheduledOnDevice",
                "value": "access_code.scheduled_on_device",
              },
              {
                "name": "AccessCodeSetOnDevice",
                "value": "access_code.set_on_device",
              },
              {
                "name": "AccessCodeDeleted",
                "value": "access_code.deleted",
              },
              {
                "name": "AccessCodeRemovedFromDevice",
                "value": "access_code.removed_from_device",
              },
              {
                "name": "AccessCodeFailedToSetOnDevice",
                "value": "access_code.failed_to_set_on_device",
              },
              {
                "name": "AccessCodeDelayInSettingOnDevice",
                "value": "access_code.delay_in_setting_on_device",
              },
              {
                "name": "AccessCodeFailedToRemoveFromDevice",
                "value": "access_code.failed_to_remove_from_device",
              },
              {
                "name": "AccessCodeDelayInRemovingFromDevice",
                "value": "access_code.delay_in_removing_from_device",
              },
              {
                "name": "AccessCodeDeletedExternalToSeam",
                "value": "access_code.deleted_external_to_seam",
              },
              {
                "name": "AccessCodeModifiedExternalToSeam",
                "value": "access_code.modified_external_to_seam",
              },
              {
                "name": "AccessCodeUnmanagedConvertedToManaged",
                "value": "access_code.unmanaged.converted_to_managed",
              },
              {
                "name": "AccessCodeUnmanagedFailedToConvertToManaged",
                "value": "access_code.unmanaged.failed_to_convert_to_managed",
              },
              {
                "name": "AccessCodeUnmanagedCreated",
                "value": "access_code.unmanaged.created",
              },
              {
                "name": "AccessCodeUnmanagedRemoved",
                "value": "access_code.unmanaged.removed",
              },
              {
                "name": "LockLocked",
                "value": "lock.locked",
              },
              {
                "name": "LockUnlocked",
                "value": "lock.unlocked",
              },
              {
                "name": "PhoneDeactivated",
                "value": "phone.deactivated",
              },
              {
                "name": "ConnectedAccountConnected",
                "value": "connected_account.connected",
              },
              {
                "name": "ConnectedAccountSuccessfulLogin",
                "value": "connected_account.successful_login",
              },
              {
                "name": "ConnectedAccountCreated",
                "value": "connected_account.created",
              },
              {
                "name": "ConnectedAccountDeleted",
                "value": "connected_account.deleted",
              },
              {
                "name": "ConnectedAccountDisconnected",
                "value": "connected_account.disconnected",
              },
              {
                "name": "ConnectedAccountCompletedFirstSync",
                "value": "connected_account.completed_first_sync",
              },
              {
                "name": "ConnectedAccountCompletedFirstSyncAfterReconnection",
                "value": "connected_account.completed_first_sync_after_reconnection",
              },
              {
                "name": "NoiseSensorNoiseThresholdTriggered",
                "value": "noise_sensor.noise_threshold_triggered",
              },
              {
                "name": "AccessCodeBackupAccessCodePulled",
                "value": "access_code.backup_access_code_pulled",
              },
              {
                "name": "AcsSystemConnected",
                "value": "acs_system.connected",
              },
              {
                "name": "AcsUserDeleted",
                "value": "acs_user.deleted",
              },
              {
                "name": "AcsCredentialDeleted",
                "value": "acs_credential.deleted",
              },
              {
                "name": "EnrollmentAutomationDeleted",
                "value": "enrollment_automation.deleted",
              },
              {
                "name": "ClientSessionDeleted",
                "value": "client_session.deleted",
              },
              {
                "name": "ActionAttemptLockDoorSucceeded",
                "value": "action_attempt.lock_door.succeeded",
              },
              {
                "name": "ActionAttemptLockDoorFailed",
                "value": "action_attempt.lock_door.failed",
              },
              {
                "name": "ActionAttemptUnlockDoorSucceeded",
                "value": "action_attempt.unlock_door.succeeded",
              },
              {
                "name": "ActionAttemptUnlockDoorFailed",
                "value": "action_attempt.unlock_door.failed",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListEventsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "events": "list<root.Event>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  GetEventsResponse:
    properties:
      event: optional<root.Event>
      message: optional<string>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListEventsRequestBetweenItem:
    discriminated: false
    union:
      - string
      - datetime
    source:
      openapi: ../openapi.json
    inline: true
  ListEventsRequestEventType:
    enum:
      - value: device.accessory_keypad_connected
        name: DeviceAccessoryKeypadConnected
      - value: device.accessory_keypad_disconnected
        name: DeviceAccessoryKeypadDisconnected
      - value: device.connected
        name: DeviceConnected
      - value: device.unmanaged.connected
        name: DeviceUnmanagedConnected
      - value: device.disconnected
        name: DeviceDisconnected
      - value: device.unmanaged.disconnected
        name: DeviceUnmanagedDisconnected
      - value: device.converted_to_unmanaged
        name: DeviceConvertedToUnmanaged
      - value: device.unmanaged.converted_to_managed
        name: DeviceUnmanagedConvertedToManaged
      - value: device.removed
        name: DeviceRemoved
      - value: device.deleted
        name: DeviceDeleted
      - value: device.tampered
        name: DeviceTampered
      - value: device.low_battery
        name: DeviceLowBattery
      - value: device.battery_status_changed
        name: DeviceBatteryStatusChanged
      - value: device.third_party_integration_detected
        name: DeviceThirdPartyIntegrationDetected
      - value: device.third_party_integration_no_longer_detected
        name: DeviceThirdPartyIntegrationNoLongerDetected
      - value: device.salto.privacy_mode_activated
        name: DeviceSaltoPrivacyModeActivated
      - value: device.salto.privacy_mode_deactivated
        name: DeviceSaltoPrivacyModeDeactivated
      - value: device.connection_became_flaky
        name: DeviceConnectionBecameFlaky
      - value: device.connection_stabilized
        name: DeviceConnectionStabilized
      - value: device.error.subscription_required
        name: DeviceErrorSubscriptionRequired
      - value: device.error.subscription_required.resolved
        name: DeviceErrorSubscriptionRequiredResolved
      - value: access_code.created
        name: AccessCodeCreated
      - value: access_code.changed
        name: AccessCodeChanged
      - value: access_code.scheduled_on_device
        name: AccessCodeScheduledOnDevice
      - value: access_code.set_on_device
        name: AccessCodeSetOnDevice
      - value: access_code.deleted
        name: AccessCodeDeleted
      - value: access_code.removed_from_device
        name: AccessCodeRemovedFromDevice
      - value: access_code.failed_to_set_on_device
        name: AccessCodeFailedToSetOnDevice
      - value: access_code.delay_in_setting_on_device
        name: AccessCodeDelayInSettingOnDevice
      - value: access_code.failed_to_remove_from_device
        name: AccessCodeFailedToRemoveFromDevice
      - value: access_code.delay_in_removing_from_device
        name: AccessCodeDelayInRemovingFromDevice
      - value: access_code.deleted_external_to_seam
        name: AccessCodeDeletedExternalToSeam
      - value: access_code.modified_external_to_seam
        name: AccessCodeModifiedExternalToSeam
      - value: access_code.unmanaged.converted_to_managed
        name: AccessCodeUnmanagedConvertedToManaged
      - value: access_code.unmanaged.failed_to_convert_to_managed
        name: AccessCodeUnmanagedFailedToConvertToManaged
      - value: access_code.unmanaged.created
        name: AccessCodeUnmanagedCreated
      - value: access_code.unmanaged.removed
        name: AccessCodeUnmanagedRemoved
      - value: lock.locked
        name: LockLocked
      - value: lock.unlocked
        name: LockUnlocked
      - value: phone.deactivated
        name: PhoneDeactivated
      - value: connected_account.connected
        name: ConnectedAccountConnected
      - value: connected_account.successful_login
        name: ConnectedAccountSuccessfulLogin
      - value: connected_account.created
        name: ConnectedAccountCreated
      - value: connected_account.deleted
        name: ConnectedAccountDeleted
      - value: connected_account.disconnected
        name: ConnectedAccountDisconnected
      - value: connected_account.completed_first_sync
        name: ConnectedAccountCompletedFirstSync
      - value: connected_account.completed_first_sync_after_reconnection
        name: ConnectedAccountCompletedFirstSyncAfterReconnection
      - value: noise_sensor.noise_threshold_triggered
        name: NoiseSensorNoiseThresholdTriggered
      - value: access_code.backup_access_code_pulled
        name: AccessCodeBackupAccessCodePulled
      - value: acs_system.connected
        name: AcsSystemConnected
      - value: acs_user.deleted
        name: AcsUserDeleted
      - value: acs_credential.deleted
        name: AcsCredentialDeleted
      - value: enrollment_automation.deleted
        name: EnrollmentAutomationDeleted
      - value: client_session.deleted
        name: ClientSessionDeleted
      - value: action_attempt.lock_door.succeeded
        name: ActionAttemptLockDoorSucceeded
      - value: action_attempt.lock_door.failed
        name: ActionAttemptLockDoorFailed
      - value: action_attempt.unlock_door.succeeded
        name: ActionAttemptUnlockDoorSucceeded
      - value: action_attempt.unlock_door.failed
        name: ActionAttemptUnlockDoorFailed
    inline: true
    source:
      openapi: ../openapi.json
  ListEventsRequestEventTypesItem:
    enum:
      - value: device.accessory_keypad_connected
        name: DeviceAccessoryKeypadConnected
      - value: device.accessory_keypad_disconnected
        name: DeviceAccessoryKeypadDisconnected
      - value: device.connected
        name: DeviceConnected
      - value: device.unmanaged.connected
        name: DeviceUnmanagedConnected
      - value: device.disconnected
        name: DeviceDisconnected
      - value: device.unmanaged.disconnected
        name: DeviceUnmanagedDisconnected
      - value: device.converted_to_unmanaged
        name: DeviceConvertedToUnmanaged
      - value: device.unmanaged.converted_to_managed
        name: DeviceUnmanagedConvertedToManaged
      - value: device.removed
        name: DeviceRemoved
      - value: device.deleted
        name: DeviceDeleted
      - value: device.tampered
        name: DeviceTampered
      - value: device.low_battery
        name: DeviceLowBattery
      - value: device.battery_status_changed
        name: DeviceBatteryStatusChanged
      - value: device.third_party_integration_detected
        name: DeviceThirdPartyIntegrationDetected
      - value: device.third_party_integration_no_longer_detected
        name: DeviceThirdPartyIntegrationNoLongerDetected
      - value: device.salto.privacy_mode_activated
        name: DeviceSaltoPrivacyModeActivated
      - value: device.salto.privacy_mode_deactivated
        name: DeviceSaltoPrivacyModeDeactivated
      - value: device.connection_became_flaky
        name: DeviceConnectionBecameFlaky
      - value: device.connection_stabilized
        name: DeviceConnectionStabilized
      - value: device.error.subscription_required
        name: DeviceErrorSubscriptionRequired
      - value: device.error.subscription_required.resolved
        name: DeviceErrorSubscriptionRequiredResolved
      - value: access_code.created
        name: AccessCodeCreated
      - value: access_code.changed
        name: AccessCodeChanged
      - value: access_code.scheduled_on_device
        name: AccessCodeScheduledOnDevice
      - value: access_code.set_on_device
        name: AccessCodeSetOnDevice
      - value: access_code.deleted
        name: AccessCodeDeleted
      - value: access_code.removed_from_device
        name: AccessCodeRemovedFromDevice
      - value: access_code.failed_to_set_on_device
        name: AccessCodeFailedToSetOnDevice
      - value: access_code.delay_in_setting_on_device
        name: AccessCodeDelayInSettingOnDevice
      - value: access_code.failed_to_remove_from_device
        name: AccessCodeFailedToRemoveFromDevice
      - value: access_code.delay_in_removing_from_device
        name: AccessCodeDelayInRemovingFromDevice
      - value: access_code.deleted_external_to_seam
        name: AccessCodeDeletedExternalToSeam
      - value: access_code.modified_external_to_seam
        name: AccessCodeModifiedExternalToSeam
      - value: access_code.unmanaged.converted_to_managed
        name: AccessCodeUnmanagedConvertedToManaged
      - value: access_code.unmanaged.failed_to_convert_to_managed
        name: AccessCodeUnmanagedFailedToConvertToManaged
      - value: access_code.unmanaged.created
        name: AccessCodeUnmanagedCreated
      - value: access_code.unmanaged.removed
        name: AccessCodeUnmanagedRemoved
      - value: lock.locked
        name: LockLocked
      - value: lock.unlocked
        name: LockUnlocked
      - value: phone.deactivated
        name: PhoneDeactivated
      - value: connected_account.connected
        name: ConnectedAccountConnected
      - value: connected_account.successful_login
        name: ConnectedAccountSuccessfulLogin
      - value: connected_account.created
        name: ConnectedAccountCreated
      - value: connected_account.deleted
        name: ConnectedAccountDeleted
      - value: connected_account.disconnected
        name: ConnectedAccountDisconnected
      - value: connected_account.completed_first_sync
        name: ConnectedAccountCompletedFirstSync
      - value: connected_account.completed_first_sync_after_reconnection
        name: ConnectedAccountCompletedFirstSyncAfterReconnection
      - value: noise_sensor.noise_threshold_triggered
        name: NoiseSensorNoiseThresholdTriggered
      - value: access_code.backup_access_code_pulled
        name: AccessCodeBackupAccessCodePulled
      - value: acs_system.connected
        name: AcsSystemConnected
      - value: acs_user.deleted
        name: AcsUserDeleted
      - value: acs_credential.deleted
        name: AcsCredentialDeleted
      - value: enrollment_automation.deleted
        name: EnrollmentAutomationDeleted
      - value: client_session.deleted
        name: ClientSessionDeleted
      - value: action_attempt.lock_door.succeeded
        name: ActionAttemptLockDoorSucceeded
      - value: action_attempt.lock_door.failed
        name: ActionAttemptLockDoorFailed
      - value: action_attempt.unlock_door.succeeded
        name: ActionAttemptUnlockDoorSucceeded
      - value: action_attempt.unlock_door.failed
        name: ActionAttemptUnlockDoorFailed
    inline: true
    source:
      openapi: ../openapi.json
  ListEventsResponse:
    properties:
      events: list<root.Event>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /events/get
      method: POST
      auth:
        - client_session: []
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /events/get
      request:
        name: GetEventsRequest
        body:
          properties:
            event_id:
              type: optional<string>
              validation:
                format: uuid
            event_type: optional<string>
            device_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetEventsResponse
        status-code: 200
        property: event
      errors:
        - root.GetEventsRequestBadRequestError
        - root.GetEventsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              event:
                event_id: event_id
                device_id: device_id
                action_attempt_id: action_attempt_id
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_system_id: acs_system_id
                client_session_id: client_session_id
                enrollment_automation_id: enrollment_automation_id
                event_type: event_type
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                occurred_at: '2024-01-15T09:30:00Z'
              message: message
              ok: true
    list:
      path: /events/list
      method: POST
      auth:
        - client_session: []
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /events/list
      request:
        name: ListEventsRequest
        body:
          properties:
            since: optional<string>
            between: optional<list<ListEventsRequestBetweenItem>>
            device_id:
              type: optional<string>
              validation:
                format: uuid
            device_ids: optional<list<string>>
            access_code_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_ids: optional<list<string>>
            event_type: optional<ListEventsRequestEventType>
            event_types: optional<list<ListEventsRequestEventTypesItem>>
            connected_account_id:
              type: optional<string>
              validation:
                format: uuid
            limit:
              type: optional<nullable<double>>
              default: 500
        content-type: application/json
      response:
        docs: OK
        type: ListEventsResponse
        status-code: 200
        property: events
      errors:
        - root.ListEventsRequestBadRequestError
        - root.ListEventsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              events:
                - event_id: event_id
                  device_id: device_id
                  action_attempt_id: action_attempt_id
                  acs_credential_id: acs_credential_id
                  acs_user_id: acs_user_id
                  acs_system_id: acs_system_id
                  client_session_id: client_session_id
                  enrollment_automation_id: enrollment_automation_id
                  event_type: event_type
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  occurred_at: '2024-01-15T09:30:00Z'
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "locks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/locks/get",
              "docs": undefined,
              "errors": [
                "root.GetLocksRequestBadRequestError",
                "root.GetLocksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "device": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "_experimental_supported_code_from_access_codes_lengths": [
                            1.1,
                          ],
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "appearance": {
                            "name": "name",
                          },
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                          "august_metadata": {
                            "has_keypad": true,
                            "house_name": "house_name",
                            "lock_id": "lock_id",
                            "lock_name": "lock_name",
                          },
                          "avigilon_alta_metadata": {
                            "entry_name": "entry_name",
                            "entry_relays_total_count": 1.1,
                            "org_name": "org_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                            "zone_id": 1.1,
                            "zone_name": "zone_name",
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "brivo_metadata": {
                            "device_name": "device_name",
                          },
                          "code_constraints": [
                            {
                              "constraint_type": "no_zeros",
                            },
                          ],
                          "controlbyweb_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "relay_name": null,
                          },
                          "currently_triggering_noise_threshold_ids": [
                            "currently_triggering_noise_threshold_ids",
                          ],
                          "door_open": true,
                          "dormakaba_oracode_metadata": {
                            "door_id": 1.1,
                            "door_is_wireless": true,
                            "door_name": "door_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                          },
                          "ecobee_metadata": {
                            "device_name": "device_name",
                            "ecobee_device_id": "ecobee_device_id",
                          },
                          "four_suites_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                            "reclose_delay_in_seconds": 1.1,
                          },
                          "genie_metadata": {
                            "device_name": "device_name",
                            "door_name": "door_name",
                          },
                          "has_direct_power": true,
                          "has_native_entry_events": true,
                          "honeywell_resideo_metadata": {
                            "device_name": "device_name",
                            "honeywell_resideo_device_id": "honeywell_resideo_device_id",
                          },
                          "hubitat_metadata": {
                            "device_id": "device_id",
                            "device_label": "device_label",
                            "device_name": "device_name",
                          },
                          "igloo_metadata": {
                            "bridge_id": "bridge_id",
                            "device_id": "device_id",
                          },
                          "igloohome_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "keypad_battery": {
                            "level": 1.1,
                          },
                          "kwikset_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "model_number": "model_number",
                          },
                          "locked": true,
                          "lockly_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "manufacturer": "manufacturer",
                          "max_active_codes_supported": 1.1,
                          "minut_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "latest_sensor_values": {
                              "accelerometer_z": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "humidity": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "pressure": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "sound": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "temperature": {
                                "time": "time",
                                "value": 1.1,
                              },
                            },
                          },
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "nest_metadata": {
                            "custom_name": "custom_name",
                            "device_name": "device_name",
                            "nest_device_id": "nest_device_id",
                          },
                          "noise_level_decibels": 1.1,
                          "noiseaware_metadata": {
                            "device_id": "device_id",
                            "device_model": "indoor",
                            "device_name": "device_name",
                            "noise_level_decibel": 1.1,
                            "noise_level_nrs": 1.1,
                          },
                          "nuki_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                          "salto_metadata": {
                            "battery_level": "battery_level",
                            "customer_reference": "customer_reference",
                            "lock_id": "lock_id",
                            "lock_type": "lock_type",
                            "locked_state": "locked_state",
                          },
                          "schlage_metadata": {
                            "access_code_length": null,
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "seam_bridge_metadata": {
                            "device_num": 1.1,
                            "name": "name",
                          },
                          "serial_number": "serial_number",
                          "smartthings_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "supported_code_lengths": [
                            1.1,
                          ],
                          "supports_accessory_keypad": true,
                          "supports_backup_access_code_pool": true,
                          "supports_offline_access_codes": true,
                          "tedee_metadata": {
                            "bridge_id": 1.1,
                            "bridge_name": "bridge_name",
                            "device_id": 1.1,
                            "device_model": "device_model",
                            "device_name": "device_name",
                            "serial_number": "serial_number",
                          },
                          "ttlock_metadata": {
                            "feature_value": "feature_value",
                            "lock_alias": "lock_alias",
                            "lock_id": 1.1,
                          },
                          "two_n_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                          },
                          "wyze_metadata": {
                            "device_id": "device_id",
                            "device_info_model": "device_info_model",
                            "device_name": "device_name",
                            "product_model": "product_model",
                            "product_name": "product_name",
                            "product_type": "product_type",
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "lock": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "_experimental_supported_code_from_access_codes_lengths": [
                            1.1,
                          ],
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "appearance": {
                            "name": "name",
                          },
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                          "august_metadata": {
                            "has_keypad": true,
                            "house_name": "house_name",
                            "lock_id": "lock_id",
                            "lock_name": "lock_name",
                          },
                          "avigilon_alta_metadata": {
                            "entry_name": "entry_name",
                            "entry_relays_total_count": 1.1,
                            "org_name": "org_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                            "zone_id": 1.1,
                            "zone_name": "zone_name",
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "brivo_metadata": {
                            "device_name": "device_name",
                          },
                          "code_constraints": [
                            {
                              "constraint_type": "no_zeros",
                            },
                          ],
                          "controlbyweb_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "relay_name": null,
                          },
                          "currently_triggering_noise_threshold_ids": [
                            "currently_triggering_noise_threshold_ids",
                          ],
                          "door_open": true,
                          "dormakaba_oracode_metadata": {
                            "door_id": 1.1,
                            "door_is_wireless": true,
                            "door_name": "door_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                          },
                          "ecobee_metadata": {
                            "device_name": "device_name",
                            "ecobee_device_id": "ecobee_device_id",
                          },
                          "four_suites_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                            "reclose_delay_in_seconds": 1.1,
                          },
                          "genie_metadata": {
                            "device_name": "device_name",
                            "door_name": "door_name",
                          },
                          "has_direct_power": true,
                          "has_native_entry_events": true,
                          "honeywell_resideo_metadata": {
                            "device_name": "device_name",
                            "honeywell_resideo_device_id": "honeywell_resideo_device_id",
                          },
                          "hubitat_metadata": {
                            "device_id": "device_id",
                            "device_label": "device_label",
                            "device_name": "device_name",
                          },
                          "igloo_metadata": {
                            "bridge_id": "bridge_id",
                            "device_id": "device_id",
                          },
                          "igloohome_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "keypad_battery": {
                            "level": 1.1,
                          },
                          "kwikset_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "model_number": "model_number",
                          },
                          "locked": true,
                          "lockly_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "manufacturer": "manufacturer",
                          "max_active_codes_supported": 1.1,
                          "minut_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "latest_sensor_values": {
                              "accelerometer_z": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "humidity": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "pressure": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "sound": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "temperature": {
                                "time": "time",
                                "value": 1.1,
                              },
                            },
                          },
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "nest_metadata": {
                            "custom_name": "custom_name",
                            "device_name": "device_name",
                            "nest_device_id": "nest_device_id",
                          },
                          "noise_level_decibels": 1.1,
                          "noiseaware_metadata": {
                            "device_id": "device_id",
                            "device_model": "indoor",
                            "device_name": "device_name",
                            "noise_level_decibel": 1.1,
                            "noise_level_nrs": 1.1,
                          },
                          "nuki_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                          "salto_metadata": {
                            "battery_level": "battery_level",
                            "customer_reference": "customer_reference",
                            "lock_id": "lock_id",
                            "lock_type": "lock_type",
                            "locked_state": "locked_state",
                          },
                          "schlage_metadata": {
                            "access_code_length": null,
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "seam_bridge_metadata": {
                            "device_num": 1.1,
                            "name": "name",
                          },
                          "serial_number": "serial_number",
                          "smartthings_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "supported_code_lengths": [
                            1.1,
                          ],
                          "supports_accessory_keypad": true,
                          "supports_backup_access_code_pool": true,
                          "supports_offline_access_codes": true,
                          "tedee_metadata": {
                            "bridge_id": 1.1,
                            "bridge_name": "bridge_name",
                            "device_id": 1.1,
                            "device_model": "device_model",
                            "device_name": "device_name",
                            "serial_number": "serial_number",
                          },
                          "ttlock_metadata": {
                            "feature_value": "feature_value",
                            "lock_alias": "lock_alias",
                            "lock_id": 1.1,
                          },
                          "two_n_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                          },
                          "wyze_metadata": {
                            "device_id": "device_id",
                            "device_info_model": "device_info_model",
                            "device_name": "device_name",
                            "product_model": "product_model",
                            "product_name": "product_name",
                            "product_type": "product_type",
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/locks/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetLocksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "device",
                "status-code": 200,
                "type": "GetLocksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/locks/list",
              "docs": undefined,
              "errors": [
                "root.ListLocksRequestBadRequestError",
                "root.ListLocksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "location": {},
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "locks": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "location": {},
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/locks/list",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_id": {
                      "docs": "List all devices owned by this connected account",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_ids": "optional<list<string>>",
                    "created_before": "optional<nullable<datetime>>",
                    "custom_metadata_has": "optional<map<string, ListLocksRequestCustomMetadataHasValue>>",
                    "device_ids": "optional<list<string>>",
                    "device_type": "optional<ListLocksRequestDeviceType>",
                    "device_types": "optional<list<ListLocksRequestDeviceTypesItem>>",
                    "exclude_if": "optional<list<ListLocksRequestExcludeIfItem>>",
                    "include_if": "optional<list<ListLocksRequestIncludeIfItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<nullable<double>>",
                    },
                    "manufacturer": "optional<ListLocksRequestManufacturer>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListLocksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "devices",
                "status-code": 200,
                "type": "ListLocksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "lock_door": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/locks/lock_door",
              "docs": undefined,
              "errors": [
                "root.LockDoorLocksRequestBadRequestError",
                "root.LockDoorLocksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/locks/lock_door",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LockDoorLocksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "LockDoorLocksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unlock_door": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/locks/unlock_door",
              "docs": undefined,
              "errors": [
                "root.UnlockDoorLocksRequestBadRequestError",
                "root.UnlockDoorLocksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/locks/unlock_door",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnlockDoorLocksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "UnlockDoorLocksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "GetLocksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "device": "root.Device",
              "lock": "root.Device",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListLocksRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ListLocksRequestDeviceType": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListLocksRequestDeviceTypesItem": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListLocksRequestExcludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListLocksRequestIncludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListLocksRequestManufacturer": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "doorking",
              "four_suites",
              "genie",
              "igloo",
              "keywe",
              "kwikset",
              "linear",
              "lockly",
              "nuki",
              "philia",
              "salto",
              "samsung",
              "schlage",
              "seam",
              "unknown",
              "wyze",
              "yale",
              "minut",
              "two_n",
              "ttlock",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "controlbyweb",
              "smartthings",
              "dormakaba_oracode",
              "tedee",
              "honeywell_resideo",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListLocksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "devices": "list<root.Device>",
              "locks": "list<root.Device>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LockDoorLocksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnlockDoorLocksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  GetLocksResponse:
    properties:
      lock: root.Device
      device: root.Device
      ok: boolean
    source:
      openapi: ../openapi.json
  ListLocksRequestDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    inline: true
    source:
      openapi: ../openapi.json
  ListLocksRequestDeviceTypesItem:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    inline: true
    source:
      openapi: ../openapi.json
  ListLocksRequestManufacturer:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - doorking
      - four_suites
      - genie
      - igloo
      - keywe
      - kwikset
      - linear
      - lockly
      - nuki
      - philia
      - salto
      - samsung
      - schlage
      - seam
      - unknown
      - wyze
      - yale
      - minut
      - two_n
      - ttlock
      - nest
      - igloohome
      - ecobee
      - hubitat
      - controlbyweb
      - smartthings
      - dormakaba_oracode
      - tedee
      - honeywell_resideo
    inline: true
    source:
      openapi: ../openapi.json
  ListLocksRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  ListLocksRequestIncludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    inline: true
    source:
      openapi: ../openapi.json
  ListLocksRequestExcludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    inline: true
    source:
      openapi: ../openapi.json
  ListLocksResponse:
    properties:
      locks: list<root.Device>
      devices: list<root.Device>
      ok: boolean
    source:
      openapi: ../openapi.json
  LockDoorLocksResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  UnlockDoorLocksResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /locks/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /locks/get
      request:
        name: GetLocksRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            name: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: GetLocksResponse
        status-code: 200
        property: device
      errors:
        - root.GetLocksRequestBadRequestError
        - root.GetLocksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              lock:
                device_id: device_id
                device_type: akuvox_lock
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  online: true
                  name: name
                  accessory_keypad:
                    is_connected: true
                  appearance:
                    name: name
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                  has_direct_power: true
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  serial_number: serial_number
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  supports_accessory_keypad: true
                  supports_offline_access_codes: true
                  noise_level_decibels: 1.1
                  currently_triggering_noise_threshold_ids:
                    - currently_triggering_noise_threshold_ids
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                  august_metadata:
                    lock_id: lock_id
                    lock_name: lock_name
                    house_name: house_name
                    has_keypad: true
                  avigilon_alta_metadata:
                    entry_name: entry_name
                    org_name: org_name
                    zone_id: 1.1
                    zone_name: zone_name
                    site_id: 1.1
                    site_name: site_name
                    entry_relays_total_count: 1.1
                  schlage_metadata:
                    device_id: device_id
                    device_name: device_name
                    access_code_length: null
                  smartthings_metadata:
                    device_id: device_id
                    device_name: device_name
                  lockly_metadata:
                    device_id: device_id
                    device_name: device_name
                  nuki_metadata:
                    device_id: device_id
                    device_name: device_name
                  kwikset_metadata:
                    device_id: device_id
                    device_name: device_name
                    model_number: model_number
                  salto_metadata:
                    lock_id: lock_id
                    customer_reference: customer_reference
                    lock_type: lock_type
                    battery_level: battery_level
                    locked_state: locked_state
                  genie_metadata:
                    device_name: device_name
                    door_name: door_name
                  brivo_metadata:
                    device_name: device_name
                  igloo_metadata:
                    device_id: device_id
                    bridge_id: bridge_id
                  noiseaware_metadata:
                    device_model: indoor
                    noise_level_nrs: 1.1
                    noise_level_decibel: 1.1
                    device_name: device_name
                    device_id: device_id
                  minut_metadata:
                    device_id: device_id
                    device_name: device_name
                    latest_sensor_values:
                      temperature:
                        time: time
                        value: 1.1
                      sound:
                        time: time
                        value: 1.1
                      humidity:
                        time: time
                        value: 1.1
                      pressure:
                        time: time
                        value: 1.1
                      accelerometer_z:
                        time: time
                        value: 1.1
                  four_suites_metadata:
                    device_id: 1.1
                    device_name: device_name
                    reclose_delay_in_seconds: 1.1
                  two_n_metadata:
                    device_id: 1.1
                    device_name: device_name
                  controlbyweb_metadata:
                    device_id: device_id
                    device_name: device_name
                    relay_name: null
                  ttlock_metadata:
                    lock_id: 1.1
                    lock_alias: lock_alias
                    feature_value: feature_value
                  seam_bridge_metadata:
                    device_num: 1.1
                    name: name
                  igloohome_metadata:
                    device_id: device_id
                    device_name: device_name
                  nest_metadata:
                    nest_device_id: nest_device_id
                    device_name: device_name
                    custom_name: custom_name
                  ecobee_metadata:
                    ecobee_device_id: ecobee_device_id
                    device_name: device_name
                  honeywell_resideo_metadata:
                    honeywell_resideo_device_id: honeywell_resideo_device_id
                    device_name: device_name
                  hubitat_metadata:
                    device_id: device_id
                    device_name: device_name
                    device_label: device_label
                  dormakaba_oracode_metadata:
                    door_id: 1.1
                    door_name: door_name
                    door_is_wireless: true
                    site_id: 1.1
                    site_name: site_name
                  wyze_metadata:
                    device_id: device_id
                    device_name: device_name
                    product_name: product_name
                    product_type: product_type
                    product_model: product_model
                    device_info_model: device_info_model
                  tedee_metadata:
                    device_id: 1.1
                    serial_number: serial_number
                    device_name: device_name
                    device_model: device_model
                    bridge_id: 1.1
                    bridge_name: bridge_name
                  _experimental_supported_code_from_access_codes_lengths:
                    - 1.1
                  code_constraints:
                    - constraint_type: no_zeros
                  supported_code_lengths:
                    - 1.1
                  max_active_codes_supported: 1.1
                  supports_backup_access_code_pool: true
                  has_native_entry_events: true
                  locked: true
                  keypad_battery:
                    level: 1.1
                  door_open: true
                location:
                  location_name: location_name
                  timezone: timezone
                connected_account_id: connected_account_id
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              device:
                device_id: device_id
                device_type: akuvox_lock
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  online: true
                  name: name
                  accessory_keypad:
                    is_connected: true
                  appearance:
                    name: name
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                  has_direct_power: true
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  serial_number: serial_number
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  supports_accessory_keypad: true
                  supports_offline_access_codes: true
                  noise_level_decibels: 1.1
                  currently_triggering_noise_threshold_ids:
                    - currently_triggering_noise_threshold_ids
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                  august_metadata:
                    lock_id: lock_id
                    lock_name: lock_name
                    house_name: house_name
                    has_keypad: true
                  avigilon_alta_metadata:
                    entry_name: entry_name
                    org_name: org_name
                    zone_id: 1.1
                    zone_name: zone_name
                    site_id: 1.1
                    site_name: site_name
                    entry_relays_total_count: 1.1
                  schlage_metadata:
                    device_id: device_id
                    device_name: device_name
                    access_code_length: null
                  smartthings_metadata:
                    device_id: device_id
                    device_name: device_name
                  lockly_metadata:
                    device_id: device_id
                    device_name: device_name
                  nuki_metadata:
                    device_id: device_id
                    device_name: device_name
                  kwikset_metadata:
                    device_id: device_id
                    device_name: device_name
                    model_number: model_number
                  salto_metadata:
                    lock_id: lock_id
                    customer_reference: customer_reference
                    lock_type: lock_type
                    battery_level: battery_level
                    locked_state: locked_state
                  genie_metadata:
                    device_name: device_name
                    door_name: door_name
                  brivo_metadata:
                    device_name: device_name
                  igloo_metadata:
                    device_id: device_id
                    bridge_id: bridge_id
                  noiseaware_metadata:
                    device_model: indoor
                    noise_level_nrs: 1.1
                    noise_level_decibel: 1.1
                    device_name: device_name
                    device_id: device_id
                  minut_metadata:
                    device_id: device_id
                    device_name: device_name
                    latest_sensor_values:
                      temperature:
                        time: time
                        value: 1.1
                      sound:
                        time: time
                        value: 1.1
                      humidity:
                        time: time
                        value: 1.1
                      pressure:
                        time: time
                        value: 1.1
                      accelerometer_z:
                        time: time
                        value: 1.1
                  four_suites_metadata:
                    device_id: 1.1
                    device_name: device_name
                    reclose_delay_in_seconds: 1.1
                  two_n_metadata:
                    device_id: 1.1
                    device_name: device_name
                  controlbyweb_metadata:
                    device_id: device_id
                    device_name: device_name
                    relay_name: null
                  ttlock_metadata:
                    lock_id: 1.1
                    lock_alias: lock_alias
                    feature_value: feature_value
                  seam_bridge_metadata:
                    device_num: 1.1
                    name: name
                  igloohome_metadata:
                    device_id: device_id
                    device_name: device_name
                  nest_metadata:
                    nest_device_id: nest_device_id
                    device_name: device_name
                    custom_name: custom_name
                  ecobee_metadata:
                    ecobee_device_id: ecobee_device_id
                    device_name: device_name
                  honeywell_resideo_metadata:
                    honeywell_resideo_device_id: honeywell_resideo_device_id
                    device_name: device_name
                  hubitat_metadata:
                    device_id: device_id
                    device_name: device_name
                    device_label: device_label
                  dormakaba_oracode_metadata:
                    door_id: 1.1
                    door_name: door_name
                    door_is_wireless: true
                    site_id: 1.1
                    site_name: site_name
                  wyze_metadata:
                    device_id: device_id
                    device_name: device_name
                    product_name: product_name
                    product_type: product_type
                    product_model: product_model
                    device_info_model: device_info_model
                  tedee_metadata:
                    device_id: 1.1
                    serial_number: serial_number
                    device_name: device_name
                    device_model: device_model
                    bridge_id: 1.1
                    bridge_name: bridge_name
                  _experimental_supported_code_from_access_codes_lengths:
                    - 1.1
                  code_constraints:
                    - constraint_type: no_zeros
                  supported_code_lengths:
                    - 1.1
                  max_active_codes_supported: 1.1
                  supports_backup_access_code_pool: true
                  has_native_entry_events: true
                  locked: true
                  keypad_battery:
                    level: 1.1
                  door_open: true
                location:
                  location_name: location_name
                  timezone: timezone
                connected_account_id: connected_account_id
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
    list:
      path: /locks/list
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /locks/list
      request:
        name: ListLocksRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              docs: List all devices owned by this connected account
              validation:
                format: uuid
            connected_account_ids: optional<list<string>>
            connect_webview_id:
              type: optional<string>
              validation:
                format: uuid
            device_type: optional<ListLocksRequestDeviceType>
            device_types: optional<list<ListLocksRequestDeviceTypesItem>>
            manufacturer: optional<ListLocksRequestManufacturer>
            device_ids: optional<list<string>>
            limit:
              type: optional<nullable<double>>
              default: 500
            created_before: optional<nullable<datetime>>
            user_identifier_key: optional<string>
            custom_metadata_has: optional<map<string, ListLocksRequestCustomMetadataHasValue>>
            include_if: optional<list<ListLocksRequestIncludeIfItem>>
            exclude_if: optional<list<ListLocksRequestExcludeIfItem>>
        content-type: application/json
      response:
        docs: OK
        type: ListLocksResponse
        status-code: 200
        property: devices
      errors:
        - root.ListLocksRequestBadRequestError
        - root.ListLocksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              locks:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  location: {}
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  location: {}
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    lock_door:
      path: /locks/lock_door
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /locks/lock_door
      request:
        name: LockDoorLocksRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: LockDoorLocksResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.LockDoorLocksRequestBadRequestError
        - root.LockDoorLocksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    unlock_door:
      path: /locks/unlock_door
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /locks/unlock_door
      request:
        name: UnlockDoorLocksRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: UnlockDoorLocksResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.UnlockDoorLocksRequestBadRequestError
        - root.UnlockDoorLocksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "networks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/networks/get",
              "docs": undefined,
              "errors": [
                "root.GetNetworksRequestBadRequestError",
                "root.GetNetworksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "network_id": "network_id",
                  },
                  "response": {
                    "body": {
                      "network": {
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "network_id": "network_id",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/networks/get",
              "request": {
                "body": {
                  "properties": {
                    "network_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetNetworksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "network",
                "status-code": 200,
                "type": "GetNetworksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/networks/list",
              "docs": undefined,
              "errors": [
                "root.ListNetworksRequestBadRequestError",
                "root.ListNetworksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "networks": [
                        {
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "network_id": "network_id",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/networks/list",
              "request": {
                "body": {
                  "properties": {},
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListNetworksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "networks",
                "status-code": 200,
                "type": "ListNetworksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "GetNetworksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "network": "root.Network",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListNetworksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "networks": "list<root.Network>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  GetNetworksResponse:
    properties:
      network: root.Network
      ok: boolean
    source:
      openapi: ../openapi.json
  ListNetworksResponse:
    properties:
      networks: list<root.Network>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /networks/get
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /networks/get
      request:
        name: GetNetworksRequest
        body:
          properties:
            network_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetNetworksResponse
        status-code: 200
        property: network
      errors:
        - root.GetNetworksRequestBadRequestError
        - root.GetNetworksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            network_id: network_id
          response:
            body:
              network:
                network_id: network_id
                workspace_id: workspace_id
                display_name: display_name
                created_at: '2024-01-15T09:30:00Z'
              ok: true
    list:
      path: /networks/list
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /networks/list
      request:
        name: ListNetworksRequest
        body:
          properties: {}
        content-type: application/json
      response:
        docs: OK
        type: ListNetworksResponse
        status-code: 200
        property: networks
      errors:
        - root.ListNetworksRequestBadRequestError
        - root.ListNetworksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              networks:
                - network_id: network_id
                  workspace_id: workspace_id
                  display_name: display_name
                  created_at: '2024-01-15T09:30:00Z'
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "noiseSensors/noiseThresholds.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/noise_sensors/noise_thresholds/create",
              "docs": undefined,
              "errors": [
                "root.CreateNoiseThresholdsRequestBadRequestError",
                "root.CreateNoiseThresholdsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                    "ends_daily_at": "ends_daily_at",
                    "starts_daily_at": "starts_daily_at",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "noise_threshold": {
                        "device_id": "device_id",
                        "ends_daily_at": "ends_daily_at",
                        "name": "name",
                        "noise_threshold_decibels": 1.1,
                        "noise_threshold_id": "noise_threshold_id",
                        "noise_threshold_nrs": 1.1,
                        "starts_daily_at": "starts_daily_at",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/create",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_daily_at": "string",
                    "name": "optional<string>",
                    "noise_threshold_decibels": "optional<double>",
                    "noise_threshold_nrs": "optional<double>",
                    "starts_daily_at": "string",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateNoiseThresholdsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "noise_threshold",
                "status-code": 200,
                "type": "CreateNoiseThresholdsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/noise_sensors/noise_thresholds/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteNoiseThresholdsRequestBadRequestError",
                "root.DeleteNoiseThresholdsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                    "noise_threshold_id": "noise_threshold_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/delete",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "noise_threshold_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteNoiseThresholdsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteNoiseThresholdsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/noise_sensors/noise_thresholds/get",
              "docs": undefined,
              "errors": [
                "root.GetNoiseThresholdsRequestBadRequestError",
                "root.GetNoiseThresholdsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "noise_threshold_id": "noise_threshold_id",
                  },
                  "response": {
                    "body": {
                      "noise_threshold": {
                        "device_id": "device_id",
                        "ends_daily_at": "ends_daily_at",
                        "name": "name",
                        "noise_threshold_decibels": 1.1,
                        "noise_threshold_id": "noise_threshold_id",
                        "noise_threshold_nrs": 1.1,
                        "starts_daily_at": "starts_daily_at",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/get",
              "request": {
                "body": {
                  "properties": {
                    "noise_threshold_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetNoiseThresholdsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "noise_threshold",
                "status-code": 200,
                "type": "GetNoiseThresholdsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/noise_sensors/noise_thresholds/list",
              "docs": undefined,
              "errors": [
                "root.ListNoiseThresholdsRequestBadRequestError",
                "root.ListNoiseThresholdsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "noise_thresholds": [
                        {
                          "device_id": "device_id",
                          "ends_daily_at": "ends_daily_at",
                          "name": "name",
                          "noise_threshold_decibels": 1.1,
                          "noise_threshold_id": "noise_threshold_id",
                          "noise_threshold_nrs": 1.1,
                          "starts_daily_at": "starts_daily_at",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/list",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "is_programmed": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListNoiseThresholdsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "noise_thresholds",
                "status-code": 200,
                "type": "ListNoiseThresholdsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/noise_sensors/noise_thresholds/update",
              "docs": undefined,
              "errors": [
                "root.UpdateNoiseThresholdsRequestBadRequestError",
                "root.UpdateNoiseThresholdsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                    "noise_threshold_id": "noise_threshold_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/update",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_daily_at": "optional<string>",
                    "name": "optional<string>",
                    "noise_threshold_decibels": "optional<double>",
                    "noise_threshold_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "noise_threshold_nrs": "optional<double>",
                    "starts_daily_at": "optional<string>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateNoiseThresholdsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateNoiseThresholdsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateNoiseThresholdsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "noise_threshold": "root.NoiseThreshold",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteNoiseThresholdsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetNoiseThresholdsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "noise_threshold": "root.NoiseThreshold",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListNoiseThresholdsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "noise_thresholds": "list<root.NoiseThreshold>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateNoiseThresholdsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  CreateNoiseThresholdsResponse:
    properties:
      action_attempt: root.ActionAttempt
      noise_threshold: root.NoiseThreshold
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteNoiseThresholdsResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  GetNoiseThresholdsResponse:
    properties:
      noise_threshold: root.NoiseThreshold
      ok: boolean
    source:
      openapi: ../openapi.json
  ListNoiseThresholdsResponse:
    properties:
      noise_thresholds: list<root.NoiseThreshold>
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateNoiseThresholdsResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /noise_sensors/noise_thresholds/create
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/create
      request:
        name: CreateNoiseThresholdsRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
            name: optional<string>
            starts_daily_at: string
            ends_daily_at: string
            noise_threshold_decibels: optional<double>
            noise_threshold_nrs: optional<double>
        content-type: application/json
      response:
        docs: OK
        type: CreateNoiseThresholdsResponse
        status-code: 200
        property: noise_threshold
      errors:
        - root.CreateNoiseThresholdsRequestBadRequestError
        - root.CreateNoiseThresholdsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
            starts_daily_at: starts_daily_at
            ends_daily_at: ends_daily_at
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              noise_threshold:
                noise_threshold_id: noise_threshold_id
                device_id: device_id
                name: name
                noise_threshold_nrs: 1.1
                starts_daily_at: starts_daily_at
                ends_daily_at: ends_daily_at
                noise_threshold_decibels: 1.1
              ok: true
    delete:
      path: /noise_sensors/noise_thresholds/delete
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/delete
      request:
        name: DeleteNoiseThresholdsRequest
        body:
          properties:
            noise_threshold_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: DeleteNoiseThresholdsResponse
        status-code: 200
      errors:
        - root.DeleteNoiseThresholdsRequestBadRequestError
        - root.DeleteNoiseThresholdsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            noise_threshold_id: noise_threshold_id
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    get:
      path: /noise_sensors/noise_thresholds/get
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/get
      request:
        name: GetNoiseThresholdsRequest
        body:
          properties:
            noise_threshold_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetNoiseThresholdsResponse
        status-code: 200
        property: noise_threshold
      errors:
        - root.GetNoiseThresholdsRequestBadRequestError
        - root.GetNoiseThresholdsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            noise_threshold_id: noise_threshold_id
          response:
            body:
              noise_threshold:
                noise_threshold_id: noise_threshold_id
                device_id: device_id
                name: name
                noise_threshold_nrs: 1.1
                starts_daily_at: starts_daily_at
                ends_daily_at: ends_daily_at
                noise_threshold_decibels: 1.1
              ok: true
    list:
      path: /noise_sensors/noise_thresholds/list
      method: POST
      auth:
        - client_session: []
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/list
      request:
        name: ListNoiseThresholdsRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            is_programmed: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: ListNoiseThresholdsResponse
        status-code: 200
        property: noise_thresholds
      errors:
        - root.ListNoiseThresholdsRequestBadRequestError
        - root.ListNoiseThresholdsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              noise_thresholds:
                - noise_threshold_id: noise_threshold_id
                  device_id: device_id
                  name: name
                  noise_threshold_nrs: 1.1
                  starts_daily_at: starts_daily_at
                  ends_daily_at: ends_daily_at
                  noise_threshold_decibels: 1.1
              ok: true
    update:
      path: /noise_sensors/noise_thresholds/update
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/update
      request:
        name: UpdateNoiseThresholdsRequest
        body:
          properties:
            noise_threshold_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
            name: optional<string>
            starts_daily_at: optional<string>
            ends_daily_at: optional<string>
            noise_threshold_decibels: optional<double>
            noise_threshold_nrs: optional<double>
        content-type: application/json
      response:
        docs: OK
        type: UpdateNoiseThresholdsResponse
        status-code: 200
      errors:
        - root.UpdateNoiseThresholdsRequestBadRequestError
        - root.UpdateNoiseThresholdsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            noise_threshold_id: noise_threshold_id
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "noiseSensors/simulate.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "trigger_noise_threshold": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/noise_sensors/simulate/trigger_noise_threshold",
              "docs": undefined,
              "errors": [
                "root.TriggerNoiseThresholdSimulateRequestBadRequestError",
                "root.TriggerNoiseThresholdSimulateRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/simulate/trigger_noise_threshold",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TriggerNoiseThresholdSimulateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "TriggerNoiseThresholdSimulateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "TriggerNoiseThresholdSimulateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  TriggerNoiseThresholdSimulateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    trigger_noise_threshold:
      path: /noise_sensors/simulate/trigger_noise_threshold
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/simulate/trigger_noise_threshold
      request:
        name: TriggerNoiseThresholdSimulateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: TriggerNoiseThresholdSimulateResponse
        status-code: 200
      errors:
        - root.TriggerNoiseThresholdSimulateRequestBadRequestError
        - root.TriggerNoiseThresholdSimulateRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "phones.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deactivate": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/phones/deactivate",
              "docs": undefined,
              "errors": [
                "root.DeactivatePhonesRequestBadRequestError",
                "root.DeactivatePhonesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/phones/deactivate",
              "request": {
                "body": {
                  "properties": {
                    "device_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeactivatePhonesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeactivatePhonesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/phones/list",
              "docs": undefined,
              "errors": [
                "root.ListPhonesRequestBadRequestError",
                "root.ListPhonesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "phones": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "android_phone",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "location": {},
                          "nickname": "nickname",
                          "properties": {},
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/phones/list",
              "request": {
                "body": {
                  "properties": {
                    "owner_user_identity_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListPhonesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "phones",
                "status-code": 200,
                "type": "ListPhonesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "DeactivatePhonesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListPhonesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "phones": "list<root.Phone>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  DeactivatePhonesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  ListPhonesResponse:
    properties:
      phones: list<root.Phone>
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    deactivate:
      path: /phones/deactivate
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /phones/deactivate
      request:
        name: DeactivatePhonesRequest
        body:
          properties:
            device_id: string
        content-type: application/json
      response:
        docs: OK
        type: DeactivatePhonesResponse
        status-code: 200
      errors:
        - root.DeactivatePhonesRequestBadRequestError
        - root.DeactivatePhonesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              ok: true
    list:
      path: /phones/list
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /phones/list
      request:
        name: ListPhonesRequest
        body:
          properties:
            owner_user_identity_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListPhonesResponse
        status-code: 200
        property: phones
      errors:
        - root.ListPhonesRequestBadRequestError
        - root.ListPhonesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              phones:
                - device_id: device_id
                  device_type: android_phone
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties: {}
                  location: {}
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "phones/simulate.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create_sandbox_phone": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/phones/simulate/create_sandbox_phone",
              "docs": undefined,
              "errors": [
                "root.CreateSandboxPhoneSimulateRequestBadRequestError",
                "root.CreateSandboxPhoneSimulateRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "phone": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "android_phone",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/phones/simulate/create_sandbox_phone",
              "request": {
                "body": {
                  "properties": {
                    "assa_abloy_metadata": "optional<CreateSandboxPhoneSimulateRequestAssaAbloyMetadata>",
                    "custom_sdk_installation_id": "optional<string>",
                    "phone_metadata": "optional<CreateSandboxPhoneSimulateRequestPhoneMetadata>",
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateSandboxPhoneSimulateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "phone",
                "status-code": 200,
                "type": "CreateSandboxPhoneSimulateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateSandboxPhoneSimulateRequestAssaAbloyMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "application_version": {
                "default": "1.0.0",
                "type": "optional<string>",
              },
              "ble_capability": {
                "default": true,
                "type": "optional<boolean>",
              },
              "hce_capability": {
                "default": false,
                "type": "optional<boolean>",
              },
              "nfc_capability": {
                "default": false,
                "type": "optional<boolean>",
              },
              "seos_applet_version": {
                "default": "1.0.0",
                "type": "optional<string>",
              },
              "seos_tsm_endpoint_id": {
                "default": 1,
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateSandboxPhoneSimulateRequestPhoneMetadata": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "device_manufacturer": {
                "default": "Samsung",
                "type": "optional<string>",
              },
              "device_model": {
                "default": "Samsung Galaxy S10",
                "type": "optional<string>",
              },
              "operating_system": {
                "default": "android",
                "type": "optional<CreateSandboxPhoneSimulateRequestPhoneMetadataOperatingSystem>",
              },
              "os_version": {
                "default": "10",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateSandboxPhoneSimulateRequestPhoneMetadataOperatingSystem": {
            "default": "android",
            "enum": [
              "android",
              "ios",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateSandboxPhoneSimulateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "phone": "root.Phone",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  CreateSandboxPhoneSimulateRequestPhoneMetadataOperatingSystem:
    enum:
      - android
      - ios
    default: android
    inline: true
    source:
      openapi: ../openapi.json
  CreateSandboxPhoneSimulateRequestPhoneMetadata:
    properties:
      operating_system:
        type: >-
          optional<CreateSandboxPhoneSimulateRequestPhoneMetadataOperatingSystem>
        default: android
      os_version:
        type: optional<string>
        default: '10'
      device_manufacturer:
        type: optional<string>
        default: Samsung
      device_model:
        type: optional<string>
        default: Samsung Galaxy S10
    source:
      openapi: ../openapi.json
    inline: true
  CreateSandboxPhoneSimulateRequestAssaAbloyMetadata:
    properties:
      ble_capability:
        type: optional<boolean>
        default: true
      hce_capability:
        type: optional<boolean>
        default: false
      nfc_capability:
        type: optional<boolean>
        default: false
      application_version:
        type: optional<string>
        default: 1.0.0
      seos_applet_version:
        type: optional<string>
        default: 1.0.0
      seos_tsm_endpoint_id:
        type: optional<double>
        default: 1
    source:
      openapi: ../openapi.json
    inline: true
  CreateSandboxPhoneSimulateResponse:
    properties:
      phone: root.Phone
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create_sandbox_phone:
      path: /phones/simulate/create_sandbox_phone
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /phones/simulate/create_sandbox_phone
      request:
        name: CreateSandboxPhoneSimulateRequest
        body:
          properties:
            custom_sdk_installation_id: optional<string>
            user_identity_id:
              type: string
              validation:
                format: uuid
            phone_metadata: optional<CreateSandboxPhoneSimulateRequestPhoneMetadata>
            assa_abloy_metadata: optional<CreateSandboxPhoneSimulateRequestAssaAbloyMetadata>
        content-type: application/json
      response:
        docs: OK
        type: CreateSandboxPhoneSimulateResponse
        status-code: 200
        property: phone
      errors:
        - root.CreateSandboxPhoneSimulateRequestBadRequestError
        - root.CreateSandboxPhoneSimulateRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
          response:
            body:
              phone:
                device_id: device_id
                device_type: android_phone
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                location:
                  location_name: location_name
                  timezone: timezone
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "thermostats.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "cool": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/cool",
              "docs": undefined,
              "errors": [
                "root.CoolThermostatsRequestBadRequestError",
                "root.CoolThermostatsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/cool",
              "request": {
                "body": {
                  "properties": {
                    "cooling_set_point_celsius": "optional<double>",
                    "cooling_set_point_fahrenheit": "optional<double>",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CoolThermostatsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "CoolThermostatsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/get",
              "docs": undefined,
              "errors": [
                "root.GetThermostatsRequestBadRequestError",
                "root.GetThermostatsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "thermostat": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "_experimental_supported_code_from_access_codes_lengths": [
                            1.1,
                          ],
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "appearance": {
                            "name": "name",
                          },
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                          "august_metadata": {
                            "has_keypad": true,
                            "house_name": "house_name",
                            "lock_id": "lock_id",
                            "lock_name": "lock_name",
                          },
                          "avigilon_alta_metadata": {
                            "entry_name": "entry_name",
                            "entry_relays_total_count": 1.1,
                            "org_name": "org_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                            "zone_id": 1.1,
                            "zone_name": "zone_name",
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "brivo_metadata": {
                            "device_name": "device_name",
                          },
                          "code_constraints": [
                            {
                              "constraint_type": "no_zeros",
                            },
                          ],
                          "controlbyweb_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "relay_name": null,
                          },
                          "currently_triggering_noise_threshold_ids": [
                            "currently_triggering_noise_threshold_ids",
                          ],
                          "door_open": true,
                          "dormakaba_oracode_metadata": {
                            "door_id": 1.1,
                            "door_is_wireless": true,
                            "door_name": "door_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                          },
                          "ecobee_metadata": {
                            "device_name": "device_name",
                            "ecobee_device_id": "ecobee_device_id",
                          },
                          "four_suites_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                            "reclose_delay_in_seconds": 1.1,
                          },
                          "genie_metadata": {
                            "device_name": "device_name",
                            "door_name": "door_name",
                          },
                          "has_direct_power": true,
                          "has_native_entry_events": true,
                          "honeywell_resideo_metadata": {
                            "device_name": "device_name",
                            "honeywell_resideo_device_id": "honeywell_resideo_device_id",
                          },
                          "hubitat_metadata": {
                            "device_id": "device_id",
                            "device_label": "device_label",
                            "device_name": "device_name",
                          },
                          "igloo_metadata": {
                            "bridge_id": "bridge_id",
                            "device_id": "device_id",
                          },
                          "igloohome_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "keypad_battery": {
                            "level": 1.1,
                          },
                          "kwikset_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "model_number": "model_number",
                          },
                          "locked": true,
                          "lockly_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "manufacturer": "manufacturer",
                          "max_active_codes_supported": 1.1,
                          "minut_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "latest_sensor_values": {
                              "accelerometer_z": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "humidity": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "pressure": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "sound": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "temperature": {
                                "time": "time",
                                "value": 1.1,
                              },
                            },
                          },
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "nest_metadata": {
                            "custom_name": "custom_name",
                            "device_name": "device_name",
                            "nest_device_id": "nest_device_id",
                          },
                          "noise_level_decibels": 1.1,
                          "noiseaware_metadata": {
                            "device_id": "device_id",
                            "device_model": "indoor",
                            "device_name": "device_name",
                            "noise_level_decibel": 1.1,
                            "noise_level_nrs": 1.1,
                          },
                          "nuki_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                          "salto_metadata": {
                            "battery_level": "battery_level",
                            "customer_reference": "customer_reference",
                            "lock_id": "lock_id",
                            "lock_type": "lock_type",
                            "locked_state": "locked_state",
                          },
                          "schlage_metadata": {
                            "access_code_length": null,
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "seam_bridge_metadata": {
                            "device_num": 1.1,
                            "name": "name",
                          },
                          "serial_number": "serial_number",
                          "smartthings_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "supported_code_lengths": [
                            1.1,
                          ],
                          "supports_accessory_keypad": true,
                          "supports_backup_access_code_pool": true,
                          "supports_offline_access_codes": true,
                          "tedee_metadata": {
                            "bridge_id": 1.1,
                            "bridge_name": "bridge_name",
                            "device_id": 1.1,
                            "device_model": "device_model",
                            "device_name": "device_name",
                            "serial_number": "serial_number",
                          },
                          "ttlock_metadata": {
                            "feature_value": "feature_value",
                            "lock_alias": "lock_alias",
                            "lock_id": 1.1,
                          },
                          "two_n_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                          },
                          "wyze_metadata": {
                            "device_id": "device_id",
                            "device_info_model": "device_info_model",
                            "device_name": "device_name",
                            "product_model": "product_model",
                            "product_name": "product_name",
                            "product_type": "product_type",
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetThermostatsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "thermostat",
                "status-code": 200,
                "type": "GetThermostatsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "heat": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/heat",
              "docs": undefined,
              "errors": [
                "root.HeatThermostatsRequestBadRequestError",
                "root.HeatThermostatsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/heat",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "heating_set_point_celsius": "optional<double>",
                    "heating_set_point_fahrenheit": "optional<double>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "HeatThermostatsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "HeatThermostatsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "heat_cool": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/heat_cool",
              "docs": undefined,
              "errors": [
                "root.HeatCoolThermostatsRequestBadRequestError",
                "root.HeatCoolThermostatsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/heat_cool",
              "request": {
                "body": {
                  "properties": {
                    "cooling_set_point_celsius": "optional<double>",
                    "cooling_set_point_fahrenheit": "optional<double>",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "heating_set_point_celsius": "optional<double>",
                    "heating_set_point_fahrenheit": "optional<double>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "HeatCoolThermostatsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "HeatCoolThermostatsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "client_session": [],
                },
              ],
              "display-name": "/thermostats/list",
              "docs": undefined,
              "errors": [
                "root.ListThermostatsRequestBadRequestError",
                "root.ListThermostatsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "thermostats": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "location": {},
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/list",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_id": {
                      "docs": "List all devices owned by this connected account",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_ids": "optional<list<string>>",
                    "created_before": "optional<nullable<datetime>>",
                    "custom_metadata_has": "optional<map<string, ListThermostatsRequestCustomMetadataHasValue>>",
                    "device_ids": "optional<list<string>>",
                    "device_type": "optional<ListThermostatsRequestDeviceType>",
                    "device_types": "optional<list<ListThermostatsRequestDeviceTypesItem>>",
                    "exclude_if": "optional<list<ListThermostatsRequestExcludeIfItem>>",
                    "include_if": "optional<list<ListThermostatsRequestIncludeIfItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<nullable<double>>",
                    },
                    "manufacturer": "optional<ListThermostatsRequestManufacturer>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListThermostatsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "thermostats",
                "status-code": 200,
                "type": "ListThermostatsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "off": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/off",
              "docs": undefined,
              "errors": [
                "root.OffThermostatsRequestBadRequestError",
                "root.OffThermostatsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/off",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OffThermostatsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "OffThermostatsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "set_fan_mode": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/set_fan_mode",
              "docs": undefined,
              "errors": [
                "root.SetFanModeThermostatsRequestBadRequestError",
                "root.SetFanModeThermostatsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/set_fan_mode",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "fan_mode": "optional<SetFanModeThermostatsRequestFanMode>",
                    "fan_mode_setting": "optional<SetFanModeThermostatsRequestFanModeSetting>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SetFanModeThermostatsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "SetFanModeThermostatsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "client_session": [],
                },
              ],
              "display-name": "/thermostats/update",
              "docs": undefined,
              "errors": [
                "root.UpdateThermostatsRequestBadRequestError",
                "root.UpdateThermostatsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "default_climate_setting": {},
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/update",
              "request": {
                "body": {
                  "properties": {
                    "default_climate_setting": "UpdateThermostatsRequestDefaultClimateSetting",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateThermostatsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateThermostatsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CoolThermostatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetThermostatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "thermostat": "root.Device",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "HeatCoolThermostatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "HeatThermostatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListThermostatsRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ListThermostatsRequestDeviceType": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListThermostatsRequestDeviceTypesItem": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListThermostatsRequestExcludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListThermostatsRequestIncludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListThermostatsRequestManufacturer": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "doorking",
              "four_suites",
              "genie",
              "igloo",
              "keywe",
              "kwikset",
              "linear",
              "lockly",
              "nuki",
              "philia",
              "salto",
              "samsung",
              "schlage",
              "seam",
              "unknown",
              "wyze",
              "yale",
              "minut",
              "two_n",
              "ttlock",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "controlbyweb",
              "smartthings",
              "dormakaba_oracode",
              "tedee",
              "honeywell_resideo",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListThermostatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "thermostats": "list<root.Device>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "OffThermostatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SetFanModeThermostatsRequestFanMode": {
            "enum": [
              "auto",
              "on",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SetFanModeThermostatsRequestFanModeSetting": {
            "enum": [
              "auto",
              "on",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SetFanModeThermostatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateThermostatsRequestDefaultClimateSetting": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "automatic_cooling_enabled": "optional<boolean>",
              "automatic_heating_enabled": "optional<boolean>",
              "cooling_set_point_celsius": "optional<double>",
              "cooling_set_point_fahrenheit": "optional<double>",
              "heating_set_point_celsius": "optional<double>",
              "heating_set_point_fahrenheit": "optional<double>",
              "hvac_mode_setting": "optional<UpdateThermostatsRequestDefaultClimateSettingHvacModeSetting>",
              "manual_override_allowed": "optional<boolean>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateThermostatsRequestDefaultClimateSettingHvacModeSetting": {
            "enum": [
              "off",
              "heat",
              "cool",
              "heat_cool",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateThermostatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  CoolThermostatsResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  GetThermostatsResponse:
    properties:
      thermostat: root.Device
      ok: boolean
    source:
      openapi: ../openapi.json
  HeatThermostatsResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  HeatCoolThermostatsResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  ListThermostatsRequestDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    inline: true
    source:
      openapi: ../openapi.json
  ListThermostatsRequestDeviceTypesItem:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    inline: true
    source:
      openapi: ../openapi.json
  ListThermostatsRequestManufacturer:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - doorking
      - four_suites
      - genie
      - igloo
      - keywe
      - kwikset
      - linear
      - lockly
      - nuki
      - philia
      - salto
      - samsung
      - schlage
      - seam
      - unknown
      - wyze
      - yale
      - minut
      - two_n
      - ttlock
      - nest
      - igloohome
      - ecobee
      - hubitat
      - controlbyweb
      - smartthings
      - dormakaba_oracode
      - tedee
      - honeywell_resideo
    inline: true
    source:
      openapi: ../openapi.json
  ListThermostatsRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
    inline: true
  ListThermostatsRequestIncludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    inline: true
    source:
      openapi: ../openapi.json
  ListThermostatsRequestExcludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    inline: true
    source:
      openapi: ../openapi.json
  ListThermostatsResponse:
    properties:
      thermostats: list<root.Device>
      ok: boolean
    source:
      openapi: ../openapi.json
  OffThermostatsResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  SetFanModeThermostatsRequestFanMode:
    enum:
      - auto
      - 'on'
    inline: true
    source:
      openapi: ../openapi.json
  SetFanModeThermostatsRequestFanModeSetting:
    enum:
      - auto
      - 'on'
    inline: true
    source:
      openapi: ../openapi.json
  SetFanModeThermostatsResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateThermostatsRequestDefaultClimateSettingHvacModeSetting:
    enum:
      - 'off'
      - heat
      - cool
      - heat_cool
    inline: true
    source:
      openapi: ../openapi.json
  UpdateThermostatsRequestDefaultClimateSetting:
    properties:
      automatic_heating_enabled: optional<boolean>
      automatic_cooling_enabled: optional<boolean>
      hvac_mode_setting: optional<UpdateThermostatsRequestDefaultClimateSettingHvacModeSetting>
      cooling_set_point_celsius: optional<double>
      heating_set_point_celsius: optional<double>
      cooling_set_point_fahrenheit: optional<double>
      heating_set_point_fahrenheit: optional<double>
      manual_override_allowed: optional<boolean>
    source:
      openapi: ../openapi.json
    inline: true
  UpdateThermostatsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    cool:
      path: /thermostats/cool
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/cool
      request:
        name: CoolThermostatsRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            cooling_set_point_celsius: optional<double>
            cooling_set_point_fahrenheit: optional<double>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: CoolThermostatsResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.CoolThermostatsRequestBadRequestError
        - root.CoolThermostatsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    get:
      path: /thermostats/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/get
      request:
        name: GetThermostatsRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            name: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: GetThermostatsResponse
        status-code: 200
        property: thermostat
      errors:
        - root.GetThermostatsRequestBadRequestError
        - root.GetThermostatsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              thermostat:
                device_id: device_id
                device_type: akuvox_lock
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  online: true
                  name: name
                  accessory_keypad:
                    is_connected: true
                  appearance:
                    name: name
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                  has_direct_power: true
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  serial_number: serial_number
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  supports_accessory_keypad: true
                  supports_offline_access_codes: true
                  noise_level_decibels: 1.1
                  currently_triggering_noise_threshold_ids:
                    - currently_triggering_noise_threshold_ids
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                  august_metadata:
                    lock_id: lock_id
                    lock_name: lock_name
                    house_name: house_name
                    has_keypad: true
                  avigilon_alta_metadata:
                    entry_name: entry_name
                    org_name: org_name
                    zone_id: 1.1
                    zone_name: zone_name
                    site_id: 1.1
                    site_name: site_name
                    entry_relays_total_count: 1.1
                  schlage_metadata:
                    device_id: device_id
                    device_name: device_name
                    access_code_length: null
                  smartthings_metadata:
                    device_id: device_id
                    device_name: device_name
                  lockly_metadata:
                    device_id: device_id
                    device_name: device_name
                  nuki_metadata:
                    device_id: device_id
                    device_name: device_name
                  kwikset_metadata:
                    device_id: device_id
                    device_name: device_name
                    model_number: model_number
                  salto_metadata:
                    lock_id: lock_id
                    customer_reference: customer_reference
                    lock_type: lock_type
                    battery_level: battery_level
                    locked_state: locked_state
                  genie_metadata:
                    device_name: device_name
                    door_name: door_name
                  brivo_metadata:
                    device_name: device_name
                  igloo_metadata:
                    device_id: device_id
                    bridge_id: bridge_id
                  noiseaware_metadata:
                    device_model: indoor
                    noise_level_nrs: 1.1
                    noise_level_decibel: 1.1
                    device_name: device_name
                    device_id: device_id
                  minut_metadata:
                    device_id: device_id
                    device_name: device_name
                    latest_sensor_values:
                      temperature:
                        time: time
                        value: 1.1
                      sound:
                        time: time
                        value: 1.1
                      humidity:
                        time: time
                        value: 1.1
                      pressure:
                        time: time
                        value: 1.1
                      accelerometer_z:
                        time: time
                        value: 1.1
                  four_suites_metadata:
                    device_id: 1.1
                    device_name: device_name
                    reclose_delay_in_seconds: 1.1
                  two_n_metadata:
                    device_id: 1.1
                    device_name: device_name
                  controlbyweb_metadata:
                    device_id: device_id
                    device_name: device_name
                    relay_name: null
                  ttlock_metadata:
                    lock_id: 1.1
                    lock_alias: lock_alias
                    feature_value: feature_value
                  seam_bridge_metadata:
                    device_num: 1.1
                    name: name
                  igloohome_metadata:
                    device_id: device_id
                    device_name: device_name
                  nest_metadata:
                    nest_device_id: nest_device_id
                    device_name: device_name
                    custom_name: custom_name
                  ecobee_metadata:
                    ecobee_device_id: ecobee_device_id
                    device_name: device_name
                  honeywell_resideo_metadata:
                    honeywell_resideo_device_id: honeywell_resideo_device_id
                    device_name: device_name
                  hubitat_metadata:
                    device_id: device_id
                    device_name: device_name
                    device_label: device_label
                  dormakaba_oracode_metadata:
                    door_id: 1.1
                    door_name: door_name
                    door_is_wireless: true
                    site_id: 1.1
                    site_name: site_name
                  wyze_metadata:
                    device_id: device_id
                    device_name: device_name
                    product_name: product_name
                    product_type: product_type
                    product_model: product_model
                    device_info_model: device_info_model
                  tedee_metadata:
                    device_id: 1.1
                    serial_number: serial_number
                    device_name: device_name
                    device_model: device_model
                    bridge_id: 1.1
                    bridge_name: bridge_name
                  _experimental_supported_code_from_access_codes_lengths:
                    - 1.1
                  code_constraints:
                    - constraint_type: no_zeros
                  supported_code_lengths:
                    - 1.1
                  max_active_codes_supported: 1.1
                  supports_backup_access_code_pool: true
                  has_native_entry_events: true
                  locked: true
                  keypad_battery:
                    level: 1.1
                  door_open: true
                location:
                  location_name: location_name
                  timezone: timezone
                connected_account_id: connected_account_id
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
    heat:
      path: /thermostats/heat
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/heat
      request:
        name: HeatThermostatsRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            heating_set_point_celsius: optional<double>
            heating_set_point_fahrenheit: optional<double>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: HeatThermostatsResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.HeatThermostatsRequestBadRequestError
        - root.HeatThermostatsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    heat_cool:
      path: /thermostats/heat_cool
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/heat_cool
      request:
        name: HeatCoolThermostatsRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            heating_set_point_celsius: optional<double>
            heating_set_point_fahrenheit: optional<double>
            cooling_set_point_celsius: optional<double>
            cooling_set_point_fahrenheit: optional<double>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: HeatCoolThermostatsResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.HeatCoolThermostatsRequestBadRequestError
        - root.HeatCoolThermostatsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    list:
      path: /thermostats/list
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
        - client_session: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/list
      request:
        name: ListThermostatsRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              docs: List all devices owned by this connected account
              validation:
                format: uuid
            connected_account_ids: optional<list<string>>
            connect_webview_id:
              type: optional<string>
              validation:
                format: uuid
            device_type: optional<ListThermostatsRequestDeviceType>
            device_types: optional<list<ListThermostatsRequestDeviceTypesItem>>
            manufacturer: optional<ListThermostatsRequestManufacturer>
            device_ids: optional<list<string>>
            limit:
              type: optional<nullable<double>>
              default: 500
            created_before: optional<nullable<datetime>>
            user_identifier_key: optional<string>
            custom_metadata_has: >-
              optional<map<string,
              ListThermostatsRequestCustomMetadataHasValue>>
            include_if: optional<list<ListThermostatsRequestIncludeIfItem>>
            exclude_if: optional<list<ListThermostatsRequestExcludeIfItem>>
        content-type: application/json
      response:
        docs: OK
        type: ListThermostatsResponse
        status-code: 200
        property: thermostats
      errors:
        - root.ListThermostatsRequestBadRequestError
        - root.ListThermostatsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              thermostats:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  location: {}
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    'off':
      path: /thermostats/off
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/off
      request:
        name: OffThermostatsRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: OffThermostatsResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.OffThermostatsRequestBadRequestError
        - root.OffThermostatsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    set_fan_mode:
      path: /thermostats/set_fan_mode
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/set_fan_mode
      request:
        name: SetFanModeThermostatsRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            fan_mode: optional<SetFanModeThermostatsRequestFanMode>
            fan_mode_setting: optional<SetFanModeThermostatsRequestFanModeSetting>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: SetFanModeThermostatsResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.SetFanModeThermostatsRequestBadRequestError
        - root.SetFanModeThermostatsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    update:
      path: /thermostats/update
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
        - client_session: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/update
      request:
        name: UpdateThermostatsRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            default_climate_setting: UpdateThermostatsRequestDefaultClimateSetting
        content-type: application/json
      response:
        docs: OK
        type: UpdateThermostatsResponse
        status-code: 200
      errors:
        - root.UpdateThermostatsRequestBadRequestError
        - root.UpdateThermostatsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
            default_climate_setting: {}
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "thermostats/climateSettingSchedules.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/climate_setting_schedules/create",
              "docs": undefined,
              "errors": [
                "root.CreateClimateSettingSchedulesRequestBadRequestError",
                "root.CreateClimateSettingSchedulesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                    "schedule_ends_at": "schedule_ends_at",
                    "schedule_starts_at": "schedule_starts_at",
                  },
                  "response": {
                    "body": {
                      "climate_setting_schedule": {
                        "automatic_cooling_enabled": true,
                        "automatic_heating_enabled": true,
                        "climate_setting_schedule_id": "climate_setting_schedule_id",
                        "cooling_set_point_celsius": 1.1,
                        "cooling_set_point_fahrenheit": 1.1,
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "errors": {
                          "key": "value",
                        },
                        "heating_set_point_celsius": 1.1,
                        "heating_set_point_fahrenheit": 1.1,
                        "hvac_mode_setting": "off",
                        "manual_override_allowed": true,
                        "name": "name",
                        "schedule_ends_at": "schedule_ends_at",
                        "schedule_starts_at": "schedule_starts_at",
                        "schedule_type": "time_bound",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/create",
              "request": {
                "body": {
                  "properties": {
                    "automatic_cooling_enabled": "optional<boolean>",
                    "automatic_heating_enabled": "optional<boolean>",
                    "cooling_set_point_celsius": "optional<double>",
                    "cooling_set_point_fahrenheit": "optional<double>",
                    "device_id": "string",
                    "heating_set_point_celsius": "optional<double>",
                    "heating_set_point_fahrenheit": "optional<double>",
                    "hvac_mode_setting": "optional<CreateClimateSettingSchedulesRequestHvacModeSetting>",
                    "manual_override_allowed": "optional<boolean>",
                    "name": "optional<string>",
                    "schedule_ends_at": "string",
                    "schedule_starts_at": "string",
                    "schedule_type": "optional<literal<"time_bound">>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateClimateSettingSchedulesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "climate_setting_schedule",
                "status-code": 200,
                "type": "CreateClimateSettingSchedulesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/climate_setting_schedules/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteClimateSettingSchedulesRequestBadRequestError",
                "root.DeleteClimateSettingSchedulesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "climate_setting_schedule_id": "climate_setting_schedule_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/delete",
              "request": {
                "body": {
                  "properties": {
                    "climate_setting_schedule_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteClimateSettingSchedulesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteClimateSettingSchedulesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/climate_setting_schedules/get",
              "docs": undefined,
              "errors": [
                "root.GetClimateSettingSchedulesRequestBadRequestError",
                "root.GetClimateSettingSchedulesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "climate_setting_schedule": {
                        "automatic_cooling_enabled": true,
                        "automatic_heating_enabled": true,
                        "climate_setting_schedule_id": "climate_setting_schedule_id",
                        "cooling_set_point_celsius": 1.1,
                        "cooling_set_point_fahrenheit": 1.1,
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "errors": {
                          "key": "value",
                        },
                        "heating_set_point_celsius": 1.1,
                        "heating_set_point_fahrenheit": 1.1,
                        "hvac_mode_setting": "off",
                        "manual_override_allowed": true,
                        "name": "name",
                        "schedule_ends_at": "schedule_ends_at",
                        "schedule_starts_at": "schedule_starts_at",
                        "schedule_type": "time_bound",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/get",
              "request": {
                "body": {
                  "properties": {
                    "climate_setting_schedule_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetClimateSettingSchedulesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "climate_setting_schedule",
                "status-code": 200,
                "type": "GetClimateSettingSchedulesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/thermostats/climate_setting_schedules/list",
              "docs": undefined,
              "errors": [
                "root.ListClimateSettingSchedulesRequestBadRequestError",
                "root.ListClimateSettingSchedulesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "climate_setting_schedules": [
                        {
                          "automatic_cooling_enabled": true,
                          "automatic_heating_enabled": true,
                          "climate_setting_schedule_id": "climate_setting_schedule_id",
                          "cooling_set_point_celsius": 1.1,
                          "cooling_set_point_fahrenheit": 1.1,
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "errors": {
                            "key": "value",
                          },
                          "heating_set_point_celsius": 1.1,
                          "heating_set_point_fahrenheit": 1.1,
                          "hvac_mode_setting": "off",
                          "manual_override_allowed": true,
                          "name": "name",
                          "schedule_ends_at": "schedule_ends_at",
                          "schedule_starts_at": "schedule_starts_at",
                          "schedule_type": "time_bound",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/list",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListClimateSettingSchedulesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "climate_setting_schedules",
                "status-code": 200,
                "type": "ListClimateSettingSchedulesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/thermostats/climate_setting_schedules/update",
              "docs": undefined,
              "errors": [
                "root.UpdateClimateSettingSchedulesRequestBadRequestError",
                "root.UpdateClimateSettingSchedulesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "climate_setting_schedule_id": "climate_setting_schedule_id",
                  },
                  "response": {
                    "body": {
                      "climate_setting_schedule": {
                        "automatic_cooling_enabled": true,
                        "automatic_heating_enabled": true,
                        "climate_setting_schedule_id": "climate_setting_schedule_id",
                        "cooling_set_point_celsius": 1.1,
                        "cooling_set_point_fahrenheit": 1.1,
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "errors": {
                          "key": "value",
                        },
                        "heating_set_point_celsius": 1.1,
                        "heating_set_point_fahrenheit": 1.1,
                        "hvac_mode_setting": "off",
                        "manual_override_allowed": true,
                        "name": "name",
                        "schedule_ends_at": "schedule_ends_at",
                        "schedule_starts_at": "schedule_starts_at",
                        "schedule_type": "time_bound",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/update",
              "request": {
                "body": {
                  "properties": {
                    "automatic_cooling_enabled": "optional<boolean>",
                    "automatic_heating_enabled": "optional<boolean>",
                    "climate_setting_schedule_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "cooling_set_point_celsius": "optional<double>",
                    "cooling_set_point_fahrenheit": "optional<double>",
                    "heating_set_point_celsius": "optional<double>",
                    "heating_set_point_fahrenheit": "optional<double>",
                    "hvac_mode_setting": "optional<UpdateClimateSettingSchedulesRequestHvacModeSetting>",
                    "manual_override_allowed": "optional<boolean>",
                    "name": "optional<string>",
                    "schedule_ends_at": "optional<string>",
                    "schedule_starts_at": "optional<string>",
                    "schedule_type": "optional<literal<"time_bound">>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateClimateSettingSchedulesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateClimateSettingSchedulesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateClimateSettingSchedulesRequestHvacModeSetting": {
            "enum": [
              "off",
              "heat",
              "cool",
              "heat_cool",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateClimateSettingSchedulesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "climate_setting_schedule": "root.ClimateSettingSchedule",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteClimateSettingSchedulesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetClimateSettingSchedulesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "climate_setting_schedule": "root.ClimateSettingSchedule",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListClimateSettingSchedulesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "climate_setting_schedules": "list<root.ClimateSettingSchedule>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateClimateSettingSchedulesRequestHvacModeSetting": {
            "enum": [
              "off",
              "heat",
              "cool",
              "heat_cool",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateClimateSettingSchedulesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "climate_setting_schedule": "root.ClimateSettingSchedule",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  CreateClimateSettingSchedulesRequestHvacModeSetting:
    enum:
      - 'off'
      - heat
      - cool
      - heat_cool
    inline: true
    source:
      openapi: ../openapi.json
  CreateClimateSettingSchedulesResponse:
    properties:
      climate_setting_schedule: root.ClimateSettingSchedule
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteClimateSettingSchedulesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetClimateSettingSchedulesResponse:
    properties:
      climate_setting_schedule: root.ClimateSettingSchedule
      ok: boolean
    source:
      openapi: ../openapi.json
  ListClimateSettingSchedulesResponse:
    properties:
      climate_setting_schedules: list<root.ClimateSettingSchedule>
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateClimateSettingSchedulesRequestHvacModeSetting:
    enum:
      - 'off'
      - heat
      - cool
      - heat_cool
    inline: true
    source:
      openapi: ../openapi.json
  UpdateClimateSettingSchedulesResponse:
    properties:
      climate_setting_schedule: root.ClimateSettingSchedule
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /thermostats/climate_setting_schedules/create
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/create
      request:
        name: CreateClimateSettingSchedulesRequest
        body:
          properties:
            schedule_type: optional<literal<"time_bound">>
            device_id: string
            name: optional<string>
            schedule_starts_at: string
            schedule_ends_at: string
            automatic_heating_enabled: optional<boolean>
            automatic_cooling_enabled: optional<boolean>
            hvac_mode_setting: optional<CreateClimateSettingSchedulesRequestHvacModeSetting>
            cooling_set_point_celsius: optional<double>
            heating_set_point_celsius: optional<double>
            cooling_set_point_fahrenheit: optional<double>
            heating_set_point_fahrenheit: optional<double>
            manual_override_allowed: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: CreateClimateSettingSchedulesResponse
        status-code: 200
        property: climate_setting_schedule
      errors:
        - root.CreateClimateSettingSchedulesRequestBadRequestError
        - root.CreateClimateSettingSchedulesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
            schedule_starts_at: schedule_starts_at
            schedule_ends_at: schedule_ends_at
          response:
            body:
              climate_setting_schedule:
                climate_setting_schedule_id: climate_setting_schedule_id
                schedule_type: time_bound
                device_id: device_id
                name: name
                schedule_starts_at: schedule_starts_at
                schedule_ends_at: schedule_ends_at
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                automatic_heating_enabled: true
                automatic_cooling_enabled: true
                hvac_mode_setting: 'off'
                cooling_set_point_celsius: 1.1
                heating_set_point_celsius: 1.1
                cooling_set_point_fahrenheit: 1.1
                heating_set_point_fahrenheit: 1.1
                manual_override_allowed: true
              ok: true
    delete:
      path: /thermostats/climate_setting_schedules/delete
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/delete
      request:
        name: DeleteClimateSettingSchedulesRequest
        body:
          properties:
            climate_setting_schedule_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DeleteClimateSettingSchedulesResponse
        status-code: 200
      errors:
        - root.DeleteClimateSettingSchedulesRequestBadRequestError
        - root.DeleteClimateSettingSchedulesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            climate_setting_schedule_id: climate_setting_schedule_id
          response:
            body:
              ok: true
    get:
      path: /thermostats/climate_setting_schedules/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/get
      request:
        name: GetClimateSettingSchedulesRequest
        body:
          properties:
            climate_setting_schedule_id:
              type: optional<string>
              validation:
                format: uuid
            device_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetClimateSettingSchedulesResponse
        status-code: 200
        property: climate_setting_schedule
      errors:
        - root.GetClimateSettingSchedulesRequestBadRequestError
        - root.GetClimateSettingSchedulesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              climate_setting_schedule:
                climate_setting_schedule_id: climate_setting_schedule_id
                schedule_type: time_bound
                device_id: device_id
                name: name
                schedule_starts_at: schedule_starts_at
                schedule_ends_at: schedule_ends_at
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                automatic_heating_enabled: true
                automatic_cooling_enabled: true
                hvac_mode_setting: 'off'
                cooling_set_point_celsius: 1.1
                heating_set_point_celsius: 1.1
                cooling_set_point_fahrenheit: 1.1
                heating_set_point_fahrenheit: 1.1
                manual_override_allowed: true
              ok: true
    list:
      path: /thermostats/climate_setting_schedules/list
      method: POST
      auth:
        - api_key: []
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/list
      request:
        name: ListClimateSettingSchedulesRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            user_identifier_key: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: ListClimateSettingSchedulesResponse
        status-code: 200
        property: climate_setting_schedules
      errors:
        - root.ListClimateSettingSchedulesRequestBadRequestError
        - root.ListClimateSettingSchedulesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            device_id: device_id
          response:
            body:
              climate_setting_schedules:
                - climate_setting_schedule_id: climate_setting_schedule_id
                  schedule_type: time_bound
                  device_id: device_id
                  name: name
                  schedule_starts_at: schedule_starts_at
                  schedule_ends_at: schedule_ends_at
                  created_at: '2024-01-15T09:30:00Z'
                  errors:
                    key: value
                  automatic_heating_enabled: true
                  automatic_cooling_enabled: true
                  hvac_mode_setting: 'off'
                  cooling_set_point_celsius: 1.1
                  heating_set_point_celsius: 1.1
                  cooling_set_point_fahrenheit: 1.1
                  heating_set_point_fahrenheit: 1.1
                  manual_override_allowed: true
              ok: true
    update:
      path: /thermostats/climate_setting_schedules/update
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/update
      request:
        name: UpdateClimateSettingSchedulesRequest
        body:
          properties:
            climate_setting_schedule_id:
              type: string
              validation:
                format: uuid
            schedule_type: optional<literal<"time_bound">>
            name: optional<string>
            schedule_starts_at: optional<string>
            schedule_ends_at: optional<string>
            automatic_heating_enabled: optional<boolean>
            automatic_cooling_enabled: optional<boolean>
            hvac_mode_setting: optional<UpdateClimateSettingSchedulesRequestHvacModeSetting>
            cooling_set_point_celsius: optional<double>
            heating_set_point_celsius: optional<double>
            cooling_set_point_fahrenheit: optional<double>
            heating_set_point_fahrenheit: optional<double>
            manual_override_allowed: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: UpdateClimateSettingSchedulesResponse
        status-code: 200
      errors:
        - root.UpdateClimateSettingSchedulesRequestBadRequestError
        - root.UpdateClimateSettingSchedulesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            climate_setting_schedule_id: climate_setting_schedule_id
          response:
            body:
              climate_setting_schedule:
                climate_setting_schedule_id: climate_setting_schedule_id
                schedule_type: time_bound
                device_id: device_id
                name: name
                schedule_starts_at: schedule_starts_at
                schedule_ends_at: schedule_ends_at
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                automatic_heating_enabled: true
                automatic_cooling_enabled: true
                hvac_mode_setting: 'off'
                cooling_set_point_celsius: 1.1
                heating_set_point_celsius: 1.1
                cooling_set_point_fahrenheit: 1.1
                heating_set_point_fahrenheit: 1.1
                manual_override_allowed: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "userIdentities.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "add_acs_user": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/add_acs_user",
              "docs": undefined,
              "errors": [
                "root.AddAcsUserUserIdentitiesRequestBadRequestError",
                "root.AddAcsUserUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/add_acs_user",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AddAcsUserUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "AddAcsUserUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/create",
              "docs": undefined,
              "errors": [
                "root.CreateUserIdentitiesRequestBadRequestError",
                "root.CreateUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "user_identity": {
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "email_address": "email_address",
                        "full_name": "full_name",
                        "phone_number": "phone_number",
                        "user_identity_id": "user_identity_id",
                        "user_identity_key": "user_identity_key",
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/create",
              "request": {
                "body": {
                  "properties": {
                    "email_address": {
                      "type": "optional<nullable<string>>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "full_name": {
                      "type": "optional<nullable<string>>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "phone_number": "optional<nullable<string>>",
                    "user_identity_key": {
                      "type": "optional<nullable<string>>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "user_identity",
                "status-code": 200,
                "type": "CreateUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteUserIdentitiesRequestBadRequestError",
                "root.DeleteUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/delete",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/get",
              "docs": undefined,
              "errors": [
                "root.GetUserIdentitiesRequestBadRequestError",
                "root.GetUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "user_identity": {
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "email_address": "email_address",
                        "full_name": "full_name",
                        "phone_number": "phone_number",
                        "user_identity_id": "user_identity_id",
                        "user_identity_key": "user_identity_key",
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/get",
              "request": {
                "body": "GetUserIdentitiesRequest",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK",
                "property": "user_identity",
                "status-code": 200,
                "type": "GetUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "grant_access_to_device": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/grant_access_to_device",
              "docs": undefined,
              "errors": [
                "root.GrantAccessToDeviceUserIdentitiesRequestBadRequestError",
                "root.GrantAccessToDeviceUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/grant_access_to_device",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GrantAccessToDeviceUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "GrantAccessToDeviceUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/list",
              "docs": undefined,
              "errors": [
                "root.ListUserIdentitiesRequestBadRequestError",
                "root.ListUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "user_identities": [
                        {
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "email_address": "email_address",
                          "full_name": "full_name",
                          "phone_number": "phone_number",
                          "user_identity_id": "user_identity_id",
                          "user_identity_key": "user_identity_key",
                          "workspace_id": "workspace_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/list",
              "request": {
                "body": {
                  "properties": {
                    "credential_manager_acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "user_identities",
                "status-code": 200,
                "type": "ListUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_accessible_devices": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/list_accessible_devices",
              "docs": undefined,
              "errors": [
                "root.ListAccessibleDevicesUserIdentitiesRequestBadRequestError",
                "root.ListAccessibleDevicesUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "accessible_devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "location": {},
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "location": {},
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/list_accessible_devices",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListAccessibleDevicesUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "devices",
                "status-code": 200,
                "type": "ListAccessibleDevicesUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_acs_systems": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/user_identities/list_acs_systems",
              "docs": undefined,
              "errors": [
                "root.ListAcsSystemsUserIdentitiesRequestBadRequestError",
                "root.ListAcsSystemsUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "acs_systems": [
                        {
                          "acs_system_id": "acs_system_id",
                          "can_add_acs_users_to_acs_access_groups": true,
                          "can_automate_enrollment": true,
                          "can_create_acs_access_groups": true,
                          "can_remove_acs_users_from_acs_access_groups": true,
                          "connected_account_ids": [
                            "connected_account_ids",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "errors": [
                            {
                              "created_at": "2024-01-15T09:30:00Z",
                              "error_code": "seam_bridge_disconnected",
                              "message": "message",
                            },
                          ],
                          "external_type": "pti_site",
                          "external_type_display_name": "external_type_display_name",
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "name": "name",
                          "system_type": "pti_site",
                          "system_type_display_name": "system_type_display_name",
                          "warnings": [
                            {},
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/list_acs_systems",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListAcsSystemsUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_systems",
                "status-code": 200,
                "type": "ListAcsSystemsUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_acs_users": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/list_acs_users",
              "docs": undefined,
              "errors": [
                "root.ListAcsUsersUserIdentitiesRequestBadRequestError",
                "root.ListAcsUsersUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "acs_users": [
                        {
                          "access_schedule": {
                            "ends_at": "2024-01-15T09:30:00Z",
                            "starts_at": "2024-01-15T09:30:00Z",
                          },
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "email": "email",
                          "email_address": "email_address",
                          "external_type": "pti_user",
                          "external_type_display_name": "external_type_display_name",
                          "full_name": "full_name",
                          "hid_acs_system_id": "hid_acs_system_id",
                          "is_suspended": true,
                          "phone_number": "phone_number",
                          "user_identity_email_address": "user_identity_email_address",
                          "user_identity_full_name": "user_identity_full_name",
                          "user_identity_id": "user_identity_id",
                          "user_identity_phone_number": "user_identity_phone_number",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/list_acs_users",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListAcsUsersUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_users",
                "status-code": 200,
                "type": "ListAcsUsersUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove_acs_user": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/remove_acs_user",
              "docs": undefined,
              "errors": [
                "root.RemoveAcsUserUserIdentitiesRequestBadRequestError",
                "root.RemoveAcsUserUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "acs_user_id": "acs_user_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/remove_acs_user",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RemoveAcsUserUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "RemoveAcsUserUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "revoke_access_to_device": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/user_identities/revoke_access_to_device",
              "docs": undefined,
              "errors": [
                "root.RevokeAccessToDeviceUserIdentitiesRequestBadRequestError",
                "root.RevokeAccessToDeviceUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "device_id": "device_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/revoke_access_to_device",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RevokeAccessToDeviceUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "RevokeAccessToDeviceUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/user_identities/update",
              "docs": undefined,
              "errors": [
                "root.UpdateUserIdentitiesRequestBadRequestError",
                "root.UpdateUserIdentitiesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/update",
              "request": {
                "body": {
                  "properties": {
                    "email_address": {
                      "type": "optional<nullable<string>>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "full_name": {
                      "type": "optional<nullable<string>>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "phone_number": "optional<nullable<string>>",
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_key": {
                      "type": "optional<nullable<string>>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateUserIdentitiesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateUserIdentitiesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "AddAcsUserUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "user_identity": "root.UserIdentity",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetUserIdentitiesRequest": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "GetUserIdentitiesRequestUserIdentityId",
              "GetUserIdentitiesRequestUserIdentityKey",
            ],
          },
          "GetUserIdentitiesRequestUserIdentityId": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetUserIdentitiesRequestUserIdentityKey": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "user_identity_key": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "user_identity": "root.UserIdentity",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GrantAccessToDeviceUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListAccessibleDevicesUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accessible_devices": {
                "docs": "
      ---
      deprecated: use devices.
      ---
    ",
                "type": "list<root.Device>",
              },
              "devices": "list<root.Device>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListAcsSystemsUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_systems": "list<root.AcsSystem>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListAcsUsersUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acs_users": "list<root.AcsUser>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "user_identities": "list<root.UserIdentity>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RemoveAcsUserUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RevokeAccessToDeviceUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateUserIdentitiesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  AddAcsUserUserIdentitiesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  CreateUserIdentitiesResponse:
    properties:
      user_identity: root.UserIdentity
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteUserIdentitiesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetUserIdentitiesRequestUserIdentityId:
    properties:
      user_identity_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
    inline: true
  GetUserIdentitiesRequestUserIdentityKey:
    properties:
      user_identity_key: string
    source:
      openapi: ../openapi.json
    inline: true
  GetUserIdentitiesRequest:
    discriminated: false
    union:
      - GetUserIdentitiesRequestUserIdentityId
      - GetUserIdentitiesRequestUserIdentityKey
    source:
      openapi: ../openapi.json
  GetUserIdentitiesResponse:
    properties:
      user_identity: root.UserIdentity
      ok: boolean
    source:
      openapi: ../openapi.json
  GrantAccessToDeviceUserIdentitiesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  ListUserIdentitiesResponse:
    properties:
      user_identities: list<root.UserIdentity>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListAccessibleDevicesUserIdentitiesResponse:
    properties:
      devices: list<root.Device>
      accessible_devices:
        docs: |2-

                ---
                deprecated: use devices.
                ---
              
        type: list<root.Device>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListAcsSystemsUserIdentitiesResponse:
    properties:
      acs_systems: list<root.AcsSystem>
      ok: boolean
    source:
      openapi: ../openapi.json
  ListAcsUsersUserIdentitiesResponse:
    properties:
      acs_users: list<root.AcsUser>
      ok: boolean
    source:
      openapi: ../openapi.json
  RemoveAcsUserUserIdentitiesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  RevokeAccessToDeviceUserIdentitiesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateUserIdentitiesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    add_acs_user:
      path: /user_identities/add_acs_user
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/add_acs_user
      request:
        name: AddAcsUserUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AddAcsUserUserIdentitiesResponse
        status-code: 200
      errors:
        - root.AddAcsUserUserIdentitiesRequestBadRequestError
        - root.AddAcsUserUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    create:
      path: /user_identities/create
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/create
      request:
        name: CreateUserIdentitiesRequest
        body:
          properties:
            user_identity_key:
              type: optional<nullable<string>>
              validation:
                minLength: 1
            email_address:
              type: optional<nullable<string>>
              validation:
                format: email
            phone_number: optional<nullable<string>>
            full_name:
              type: optional<nullable<string>>
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: OK
        type: CreateUserIdentitiesResponse
        status-code: 200
        property: user_identity
      errors:
        - root.CreateUserIdentitiesRequestBadRequestError
        - root.CreateUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              user_identity:
                user_identity_id: user_identity_id
                user_identity_key: user_identity_key
                email_address: email_address
                phone_number: phone_number
                display_name: display_name
                full_name: full_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
              ok: true
    delete:
      path: /user_identities/delete
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/delete
      request:
        name: DeleteUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DeleteUserIdentitiesResponse
        status-code: 200
      errors:
        - root.DeleteUserIdentitiesRequestBadRequestError
        - root.DeleteUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
          response:
            body:
              ok: true
    get:
      path: /user_identities/get
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/get
      request:
        body: GetUserIdentitiesRequest
        content-type: application/json
      response:
        docs: OK
        type: GetUserIdentitiesResponse
        status-code: 200
        property: user_identity
      errors:
        - root.GetUserIdentitiesRequestBadRequestError
        - root.GetUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
          response:
            body:
              user_identity:
                user_identity_id: user_identity_id
                user_identity_key: user_identity_key
                email_address: email_address
                phone_number: phone_number
                display_name: display_name
                full_name: full_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
              ok: true
    grant_access_to_device:
      path: /user_identities/grant_access_to_device
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/grant_access_to_device
      request:
        name: GrantAccessToDeviceUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GrantAccessToDeviceUserIdentitiesResponse
        status-code: 200
      errors:
        - root.GrantAccessToDeviceUserIdentitiesRequestBadRequestError
        - root.GrantAccessToDeviceUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
            device_id: device_id
          response:
            body:
              ok: true
    list:
      path: /user_identities/list
      method: POST
      auth:
        - api_key: []
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/list
      request:
        name: ListUserIdentitiesRequest
        body:
          properties:
            credential_manager_acs_system_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListUserIdentitiesResponse
        status-code: 200
        property: user_identities
      errors:
        - root.ListUserIdentitiesRequestBadRequestError
        - root.ListUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request: {}
          response:
            body:
              user_identities:
                - user_identity_id: user_identity_id
                  user_identity_key: user_identity_key
                  email_address: email_address
                  phone_number: phone_number
                  display_name: display_name
                  full_name: full_name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
              ok: true
    list_accessible_devices:
      path: /user_identities/list_accessible_devices
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/list_accessible_devices
      request:
        name: ListAccessibleDevicesUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListAccessibleDevicesUserIdentitiesResponse
        status-code: 200
        property: devices
      errors:
        - root.ListAccessibleDevicesUserIdentitiesRequestBadRequestError
        - root.ListAccessibleDevicesUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
          response:
            body:
              devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  location: {}
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              accessible_devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  location: {}
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    list_acs_systems:
      path: /user_identities/list_acs_systems
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/list_acs_systems
      request:
        name: ListAcsSystemsUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListAcsSystemsUserIdentitiesResponse
        status-code: 200
        property: acs_systems
      errors:
        - root.ListAcsSystemsUserIdentitiesRequestBadRequestError
        - root.ListAcsSystemsUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
          response:
            body:
              acs_systems:
                - acs_system_id: acs_system_id
                  external_type: pti_site
                  external_type_display_name: external_type_display_name
                  system_type: pti_site
                  system_type_display_name: system_type_display_name
                  name: name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  connected_account_ids:
                    - connected_account_ids
                  image_url: image_url
                  image_alt_text: image_alt_text
                  errors:
                    - created_at: '2024-01-15T09:30:00Z'
                      message: message
                      error_code: seam_bridge_disconnected
                  warnings:
                    - {}
                  can_automate_enrollment: true
                  can_create_acs_access_groups: true
                  can_remove_acs_users_from_acs_access_groups: true
                  can_add_acs_users_to_acs_access_groups: true
              ok: true
    list_acs_users:
      path: /user_identities/list_acs_users
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/list_acs_users
      request:
        name: ListAcsUsersUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListAcsUsersUserIdentitiesResponse
        status-code: 200
        property: acs_users
      errors:
        - root.ListAcsUsersUserIdentitiesRequestBadRequestError
        - root.ListAcsUsersUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
          response:
            body:
              acs_users:
                - acs_user_id: acs_user_id
                  acs_system_id: acs_system_id
                  hid_acs_system_id: hid_acs_system_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  external_type: pti_user
                  external_type_display_name: external_type_display_name
                  is_suspended: true
                  access_schedule:
                    starts_at: '2024-01-15T09:30:00Z'
                    ends_at: '2024-01-15T09:30:00Z'
                  user_identity_id: user_identity_id
                  user_identity_full_name: user_identity_full_name
                  user_identity_email_address: user_identity_email_address
                  user_identity_phone_number: user_identity_phone_number
                  full_name: full_name
                  email: email
                  email_address: email_address
                  phone_number: phone_number
              ok: true
    remove_acs_user:
      path: /user_identities/remove_acs_user
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/remove_acs_user
      request:
        name: RemoveAcsUserUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: RemoveAcsUserUserIdentitiesResponse
        status-code: 200
      errors:
        - root.RemoveAcsUserUserIdentitiesRequestBadRequestError
        - root.RemoveAcsUserUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    revoke_access_to_device:
      path: /user_identities/revoke_access_to_device
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/revoke_access_to_device
      request:
        name: RevokeAccessToDeviceUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: RevokeAccessToDeviceUserIdentitiesResponse
        status-code: 200
      errors:
        - root.RevokeAccessToDeviceUserIdentitiesRequestBadRequestError
        - root.RevokeAccessToDeviceUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
            device_id: device_id
          response:
            body:
              ok: true
    update:
      path: /user_identities/update
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/update
      request:
        name: UpdateUserIdentitiesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            user_identity_key:
              type: optional<nullable<string>>
              validation:
                minLength: 1
            email_address:
              type: optional<nullable<string>>
              validation:
                format: email
            phone_number: optional<nullable<string>>
            full_name:
              type: optional<nullable<string>>
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: OK
        type: UpdateUserIdentitiesResponse
        status-code: 200
      errors:
        - root.UpdateUserIdentitiesRequestBadRequestError
        - root.UpdateUserIdentitiesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "userIdentities/enrollmentAutomations.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "delete": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/user_identities/enrollment_automations/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteEnrollmentAutomationsRequestBadRequestError",
                "root.DeleteEnrollmentAutomationsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "enrollment_automation_id": "enrollment_automation_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/enrollment_automations/delete",
              "request": {
                "body": {
                  "properties": {
                    "enrollment_automation_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteEnrollmentAutomationsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteEnrollmentAutomationsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/user_identities/enrollment_automations/get",
              "docs": undefined,
              "errors": [
                "root.GetEnrollmentAutomationsRequestBadRequestError",
                "root.GetEnrollmentAutomationsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "enrollment_automation_id": "enrollment_automation_id",
                  },
                  "response": {
                    "body": {
                      "enrollment_automation": {
                        "created_at": "2024-01-15T09:30:00Z",
                        "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                        "enrollment_automation_id": "enrollment_automation_id",
                        "user_identity_id": "user_identity_id",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/enrollment_automations/get",
              "request": {
                "body": {
                  "properties": {
                    "enrollment_automation_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetEnrollmentAutomationsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "enrollment_automation",
                "status-code": 200,
                "type": "GetEnrollmentAutomationsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "launch": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/user_identities/enrollment_automations/launch",
              "docs": undefined,
              "errors": [
                "root.LaunchEnrollmentAutomationsRequestBadRequestError",
                "root.LaunchEnrollmentAutomationsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "enrollment_automation": {
                        "acs_credential_provisioning_automation_id": "acs_credential_provisioning_automation_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                        "enrollment_automation_id": "enrollment_automation_id",
                        "user_identity_id": "user_identity_id",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/enrollment_automations/launch",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_pool_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "create_credential_manager_user": "optional<boolean>",
                    "credential_manager_acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "credential_manager_acs_user_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LaunchEnrollmentAutomationsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "enrollment_automation",
                "status-code": 200,
                "type": "LaunchEnrollmentAutomationsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
                {
                  "api_key": [],
                },
              ],
              "display-name": "/user_identities/enrollment_automations/list",
              "docs": undefined,
              "errors": [
                "root.ListEnrollmentAutomationsRequestBadRequestError",
                "root.ListEnrollmentAutomationsRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "enrollment_automations": [
                        {
                          "created_at": "2024-01-15T09:30:00Z",
                          "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                          "enrollment_automation_id": "enrollment_automation_id",
                          "user_identity_id": "user_identity_id",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/enrollment_automations/list",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ListEnrollmentAutomationsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "enrollment_automations",
                "status-code": 200,
                "type": "ListEnrollmentAutomationsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "DeleteEnrollmentAutomationsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetEnrollmentAutomationsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "enrollment_automation": "root.EnrollmentAutomation",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LaunchEnrollmentAutomationsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "enrollment_automation": "LaunchEnrollmentAutomationsResponseEnrollmentAutomation",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LaunchEnrollmentAutomationsResponseEnrollmentAutomation": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "acs_credential_provisioning_automation_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "credential_manager_acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "enrollment_automation_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListEnrollmentAutomationsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "enrollment_automations": "list<root.EnrollmentAutomation>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  DeleteEnrollmentAutomationsResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetEnrollmentAutomationsResponse:
    properties:
      enrollment_automation: root.EnrollmentAutomation
      ok: boolean
    source:
      openapi: ../openapi.json
  LaunchEnrollmentAutomationsResponseEnrollmentAutomation:
    properties:
      acs_credential_provisioning_automation_id:
        type: string
        validation:
          format: uuid
      credential_manager_acs_system_id:
        type: string
        validation:
          format: uuid
      user_identity_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
      enrollment_automation_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
    inline: true
  LaunchEnrollmentAutomationsResponse:
    properties:
      enrollment_automation: LaunchEnrollmentAutomationsResponseEnrollmentAutomation
      ok: boolean
    source:
      openapi: ../openapi.json
  ListEnrollmentAutomationsResponse:
    properties:
      enrollment_automations: list<root.EnrollmentAutomation>
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    delete:
      path: /user_identities/enrollment_automations/delete
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/enrollment_automations/delete
      request:
        name: DeleteEnrollmentAutomationsRequest
        body:
          properties:
            enrollment_automation_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DeleteEnrollmentAutomationsResponse
        status-code: 200
      errors:
        - root.DeleteEnrollmentAutomationsRequestBadRequestError
        - root.DeleteEnrollmentAutomationsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            enrollment_automation_id: enrollment_automation_id
          response:
            body:
              ok: true
    get:
      path: /user_identities/enrollment_automations/get
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/enrollment_automations/get
      request:
        name: GetEnrollmentAutomationsRequest
        body:
          properties:
            enrollment_automation_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: GetEnrollmentAutomationsResponse
        status-code: 200
        property: enrollment_automation
      errors:
        - root.GetEnrollmentAutomationsRequestBadRequestError
        - root.GetEnrollmentAutomationsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            enrollment_automation_id: enrollment_automation_id
          response:
            body:
              enrollment_automation:
                credential_manager_acs_system_id: credential_manager_acs_system_id
                user_identity_id: user_identity_id
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                enrollment_automation_id: enrollment_automation_id
              ok: true
    launch:
      path: /user_identities/enrollment_automations/launch
      method: POST
      auth:
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/enrollment_automations/launch
      request:
        name: LaunchEnrollmentAutomationsRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            credential_manager_acs_system_id:
              type: string
              validation:
                format: uuid
            acs_credential_pool_id:
              type: optional<string>
              validation:
                format: uuid
            create_credential_manager_user: optional<boolean>
            credential_manager_acs_user_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: LaunchEnrollmentAutomationsResponse
        status-code: 200
        property: enrollment_automation
      errors:
        - root.LaunchEnrollmentAutomationsRequestBadRequestError
        - root.LaunchEnrollmentAutomationsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
            credential_manager_acs_system_id: credential_manager_acs_system_id
          response:
            body:
              enrollment_automation:
                acs_credential_provisioning_automation_id: acs_credential_provisioning_automation_id
                credential_manager_acs_system_id: credential_manager_acs_system_id
                user_identity_id: user_identity_id
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                enrollment_automation_id: enrollment_automation_id
              ok: true
    list:
      path: /user_identities/enrollment_automations/list
      method: POST
      auth:
        - client_session: []
        - pat_with_workspace: []
        - console_session: []
        - api_key: []
      source:
        openapi: ../openapi.json
      display-name: /user_identities/enrollment_automations/list
      request:
        name: ListEnrollmentAutomationsRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ListEnrollmentAutomationsResponse
        status-code: 200
        property: enrollment_automations
      errors:
        - root.ListEnrollmentAutomationsRequestBadRequestError
        - root.ListEnrollmentAutomationsRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            user_identity_id: user_identity_id
          response:
            body:
              enrollment_automations:
                - credential_manager_acs_system_id: credential_manager_acs_system_id
                  user_identity_id: user_identity_id
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  enrollment_automation_id: enrollment_automation_id
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "webhooks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/webhooks/create",
              "docs": undefined,
              "errors": [
                "root.CreateWebhooksRequestBadRequestError",
                "root.CreateWebhooksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "url": "url",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "webhook": {
                        "event_types": [
                          "event_types",
                        ],
                        "secret": "secret",
                        "url": "url",
                        "webhook_id": "webhook_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/create",
              "request": {
                "body": {
                  "properties": {
                    "event_types": "optional<list<string>>",
                    "url": {
                      "type": "string",
                      "validation": {
                        "format": "uri",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateWebhooksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "webhook",
                "status-code": 200,
                "type": "CreateWebhooksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/webhooks/delete",
              "docs": undefined,
              "errors": [
                "root.DeleteWebhooksRequestBadRequestError",
                "root.DeleteWebhooksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "webhook_id": "webhook_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/delete",
              "request": {
                "body": {
                  "properties": {
                    "webhook_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DeleteWebhooksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DeleteWebhooksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/webhooks/get",
              "docs": undefined,
              "errors": [
                "root.GetWebhooksRequestBadRequestError",
                "root.GetWebhooksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "webhook_id": "webhook_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "webhook": {
                        "event_types": [
                          "event_types",
                        ],
                        "secret": "secret",
                        "url": "url",
                        "webhook_id": "webhook_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/get",
              "request": {
                "body": {
                  "properties": {
                    "webhook_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GetWebhooksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "webhook",
                "status-code": 200,
                "type": "GetWebhooksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/webhooks/list",
              "docs": undefined,
              "errors": [
                "root.ListWebhooksRequestBadRequestError",
                "root.ListWebhooksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "webhooks": [
                        {
                          "event_types": [
                            "event_types",
                          ],
                          "secret": "secret",
                          "url": "url",
                          "webhook_id": "webhook_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/list",
              "response": {
                "docs": "OK",
                "property": "webhooks",
                "status-code": 200,
                "type": "ListWebhooksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/webhooks/update",
              "docs": undefined,
              "errors": [
                "root.UpdateWebhooksRequestBadRequestError",
                "root.UpdateWebhooksRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "event_types": [
                      "event_types",
                    ],
                    "webhook_id": "webhook_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/update",
              "request": {
                "body": {
                  "properties": {
                    "event_types": "list<string>",
                    "webhook_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateWebhooksRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "UpdateWebhooksResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateWebhooksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "webhook": "root.Webhook",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeleteWebhooksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetWebhooksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "webhook": "root.Webhook",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListWebhooksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "webhooks": "list<root.Webhook>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateWebhooksResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  CreateWebhooksResponse:
    properties:
      webhook: root.Webhook
      ok: boolean
    source:
      openapi: ../openapi.json
  DeleteWebhooksResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  GetWebhooksResponse:
    properties:
      webhook: root.Webhook
      ok: boolean
    source:
      openapi: ../openapi.json
  ListWebhooksResponse:
    properties:
      webhooks: list<root.Webhook>
      ok: boolean
    source:
      openapi: ../openapi.json
  UpdateWebhooksResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /webhooks/create
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /webhooks/create
      request:
        name: CreateWebhooksRequest
        body:
          properties:
            url:
              type: string
              validation:
                format: uri
            event_types: optional<list<string>>
        content-type: application/json
      response:
        docs: OK
        type: CreateWebhooksResponse
        status-code: 200
        property: webhook
      errors:
        - root.CreateWebhooksRequestBadRequestError
        - root.CreateWebhooksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            url: url
          response:
            body:
              webhook:
                webhook_id: webhook_id
                url: url
                event_types:
                  - event_types
                secret: secret
              ok: true
    delete:
      path: /webhooks/delete
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /webhooks/delete
      request:
        name: DeleteWebhooksRequest
        body:
          properties:
            webhook_id: string
        content-type: application/json
      response:
        docs: OK
        type: DeleteWebhooksResponse
        status-code: 200
      errors:
        - root.DeleteWebhooksRequestBadRequestError
        - root.DeleteWebhooksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            webhook_id: webhook_id
          response:
            body:
              ok: true
    get:
      path: /webhooks/get
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /webhooks/get
      request:
        name: GetWebhooksRequest
        body:
          properties:
            webhook_id: string
        content-type: application/json
      response:
        docs: OK
        type: GetWebhooksResponse
        status-code: 200
        property: webhook
      errors:
        - root.GetWebhooksRequestBadRequestError
        - root.GetWebhooksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            webhook_id: webhook_id
          response:
            body:
              webhook:
                webhook_id: webhook_id
                url: url
                event_types:
                  - event_types
                secret: secret
              ok: true
    list:
      path: /webhooks/list
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /webhooks/list
      response:
        docs: OK
        type: ListWebhooksResponse
        status-code: 200
        property: webhooks
      errors:
        - root.ListWebhooksRequestBadRequestError
        - root.ListWebhooksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          response:
            body:
              webhooks:
                - webhook_id: webhook_id
                  url: url
                  event_types:
                    - event_types
                  secret: secret
              ok: true
    update:
      path: /webhooks/update
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /webhooks/update
      request:
        name: UpdateWebhooksRequest
        body:
          properties:
            webhook_id: string
            event_types: list<string>
        content-type: application/json
      response:
        docs: OK
        type: UpdateWebhooksResponse
        status-code: 200
      errors:
        - root.UpdateWebhooksRequestBadRequestError
        - root.UpdateWebhooksRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            webhook_id: webhook_id
            event_types:
              - event_types
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "workspaces.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": [
                {
                  "pat_without_workspace": [],
                },
              ],
              "display-name": "/workspaces/create",
              "docs": undefined,
              "errors": [
                "root.CreateWorkspacesRequestBadRequestError",
                "root.CreateWorkspacesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "workspace": {
                        "company_name": "company_name",
                        "connect_partner_name": "connect_partner_name",
                        "is_sandbox": true,
                        "name": "name",
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/workspaces/create",
              "request": {
                "body": {
                  "properties": {
                    "company_name": "optional<string>",
                    "connect_partner_name": {
                      "docs": "
    ---
    deprecated: use company_name
    ---
  ",
                      "type": "optional<nullable<string>>",
                    },
                    "is_sandbox": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                    "name": "string",
                    "webview_logo_shape": "optional<CreateWorkspacesRequestWebviewLogoShape>",
                    "webview_primary_button_color": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateWorkspacesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "workspace",
                "status-code": 200,
                "type": "CreateWorkspacesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "user_session": [],
                },
                {
                  "client_session": [],
                },
                {
                  "pat_with_workspace": [],
                },
              ],
              "display-name": "/workspaces/get",
              "docs": undefined,
              "errors": [
                "root.GetWorkspacesRequestBadRequestError",
                "root.GetWorkspacesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "workspace": {
                        "company_name": "company_name",
                        "connect_partner_name": "connect_partner_name",
                        "is_sandbox": true,
                        "name": "name",
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/workspaces/get",
              "response": {
                "docs": "OK",
                "property": "workspace",
                "status-code": 200,
                "type": "GetWorkspacesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": [
                {
                  "pat_with_workspace": [],
                },
                {
                  "pat_without_workspace": [],
                },
                {
                  "user_session": [],
                },
                {
                  "user_session_without_workspace": [],
                },
                {
                  "api_key": [],
                },
                {
                  "client_session": [],
                },
              ],
              "display-name": "/workspaces/list",
              "docs": undefined,
              "errors": [
                "root.ListWorkspacesRequestBadRequestError",
                "root.ListWorkspacesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "workspaces": [
                        {
                          "company_name": "company_name",
                          "connect_partner_name": "connect_partner_name",
                          "is_sandbox": true,
                          "name": "name",
                          "workspace_id": "workspace_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/workspaces/list",
              "response": {
                "docs": "OK",
                "property": "workspaces",
                "status-code": 200,
                "type": "ListWorkspacesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "reset_sandbox": {
              "auth": [
                {
                  "api_key": [],
                },
                {
                  "pat_with_workspace": [],
                },
                {
                  "console_session": [],
                },
              ],
              "display-name": "/workspaces/reset_sandbox",
              "docs": undefined,
              "errors": [
                "root.ResetSandboxWorkspacesRequestBadRequestError",
                "root.ResetSandboxWorkspacesRequestUnauthorizedError",
              ],
              "examples": [
                {
                  "headers": {
                    "client-session-token": "[object Object]",
                    "seam-client-session-token": "[object Object]",
                    "seam-workspace": "[object Object]",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/workspaces/reset_sandbox",
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "status-code": 200,
                "type": "ResetSandboxWorkspacesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateWorkspacesRequestWebviewLogoShape": {
            "enum": [
              "circle",
              "square",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateWorkspacesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "workspace": "root.Workspace",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GetWorkspacesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "workspace": "root.Workspace",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ListWorkspacesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ok": "boolean",
              "workspaces": "list<root.Workspace>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResetSandboxWorkspacesResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  CreateWorkspacesRequestWebviewLogoShape:
    enum:
      - circle
      - square
    inline: true
    source:
      openapi: ../openapi.json
  CreateWorkspacesResponse:
    properties:
      workspace: root.Workspace
      ok: boolean
    source:
      openapi: ../openapi.json
  GetWorkspacesResponse:
    properties:
      workspace: root.Workspace
      ok: boolean
    source:
      openapi: ../openapi.json
  ListWorkspacesResponse:
    properties:
      workspaces: list<root.Workspace>
      ok: boolean
    source:
      openapi: ../openapi.json
  ResetSandboxWorkspacesResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /workspaces/create
      method: POST
      auth:
        - pat_without_workspace: []
      source:
        openapi: ../openapi.json
      display-name: /workspaces/create
      request:
        name: CreateWorkspacesRequest
        body:
          properties:
            name: string
            company_name: optional<string>
            connect_partner_name:
              type: optional<nullable<string>>
              docs: |2-

                    ---
                    deprecated: use company_name
                    ---
                  
            is_sandbox:
              type: optional<boolean>
              default: false
            webview_primary_button_color: optional<string>
            webview_logo_shape: optional<CreateWorkspacesRequestWebviewLogoShape>
        content-type: application/json
      response:
        docs: OK
        type: CreateWorkspacesResponse
        status-code: 200
        property: workspace
      errors:
        - root.CreateWorkspacesRequestBadRequestError
        - root.CreateWorkspacesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          request:
            name: name
          response:
            body:
              workspace:
                workspace_id: workspace_id
                name: name
                company_name: company_name
                is_sandbox: true
                connect_partner_name: connect_partner_name
              ok: true
    get:
      path: /workspaces/get
      method: POST
      auth:
        - api_key: []
        - user_session: []
        - client_session: []
        - pat_with_workspace: []
      source:
        openapi: ../openapi.json
      display-name: /workspaces/get
      response:
        docs: OK
        type: GetWorkspacesResponse
        status-code: 200
        property: workspace
      errors:
        - root.GetWorkspacesRequestBadRequestError
        - root.GetWorkspacesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          response:
            body:
              workspace:
                workspace_id: workspace_id
                name: name
                company_name: company_name
                is_sandbox: true
                connect_partner_name: connect_partner_name
              ok: true
    list:
      path: /workspaces/list
      method: POST
      auth:
        - pat_with_workspace: []
        - pat_without_workspace: []
        - user_session: []
        - user_session_without_workspace: []
        - api_key: []
        - client_session: []
      source:
        openapi: ../openapi.json
      display-name: /workspaces/list
      response:
        docs: OK
        type: ListWorkspacesResponse
        status-code: 200
        property: workspaces
      errors:
        - root.ListWorkspacesRequestBadRequestError
        - root.ListWorkspacesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          response:
            body:
              workspaces:
                - workspace_id: workspace_id
                  name: name
                  company_name: company_name
                  is_sandbox: true
                  connect_partner_name: connect_partner_name
              ok: true
    reset_sandbox:
      path: /workspaces/reset_sandbox
      method: POST
      auth:
        - api_key: []
        - pat_with_workspace: []
        - console_session: []
      source:
        openapi: ../openapi.json
      display-name: /workspaces/reset_sandbox
      response:
        docs: OK
        type: ResetSandboxWorkspacesResponse
        status-code: 200
        property: action_attempt
      errors:
        - root.ResetSandboxWorkspacesRequestBadRequestError
        - root.ResetSandboxWorkspacesRequestUnauthorizedError
      examples:
        - headers:
            seam-workspace: '[object Object]'
            seam-client-session-token: '[object Object]'
            client-session-token: '[object Object]'
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BearerAuthScheme",
      "auth-schemes": {
        "BearerAuthScheme": {
          "scheme": "bearer",
        },
      },
      "default-environment": "Default",
      "display-name": "Seam Connect",
      "environments": {
        "Default": "https://connect.getseam.com",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "headers": {
        "client-session-token": {
          "env": undefined,
          "name": "clientSessionToken",
          "type": "string",
        },
        "seam-client-session-token": {
          "env": undefined,
          "name": "seamClientSessionToken",
          "type": "string",
        },
        "seam-workspace": {
          "env": undefined,
          "name": "seamWorkspace",
          "type": "string",
        },
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Seam Connect
environments:
  Default: https://connect.getseam.com
default-environment: Default
auth-schemes:
  BearerAuthScheme:
    scheme: bearer
auth: BearerAuthScheme
headers:
  seam-workspace:
    type: string
    name: seamWorkspace
  seam-client-session-token:
    type: string
    name: seamClientSessionToken
  client-session-token:
    type: string
    name: clientSessionToken
",
  },
}