{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "BadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "TooManyRequestsError": {
            "docs": "Too Many Requests",
            "status-code": 429,
            "type": "unknown",
          },
          "UnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get-business-user-userId": {
              "auth": true,
              "display-name": "Retrieve a Business User",
              "docs": "### GET Business User

`/business/user` endpoint allows you to operate on the [Business User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

Calling `GET /business/user/{userId}` will return the entire User payload and rule execution results for the User with the corresponding `userId`",
              "errors": [
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "name": "example-2",
                  "path-parameters": {
                    "userId": "userId",
                  },
                  "response": {
                    "body": {
                      "acquisitionChannel": "ORGANIC",
                      "allowedPaymentMethods": [
                        "ACH",
                      ],
                      "createdTimestamp": 1641654664000,
                      "directors": [
                        {
                          "contactDetails": {
                            "addresses": [
                              {
                                "addressLines": [
                                  "Klara-Franke Str 20",
                                ],
                                "city": "Berlin",
                                "country": "Germany",
                                "postcode": "10557",
                                "state": "Berlin",
                                "tags": [
                                  {
                                    "key": "customKey",
                                    "value": "customValue",
                                  },
                                ],
                              },
                            ],
                            "contactNumbers": [
                              "+371 123132",
                            ],
                            "emailIds": [
                              "baran@flagright.com",
                            ],
                            "websites": [
                              "flagright.com",
                            ],
                          },
                          "generalDetails": {
                            "countryOfNationality": "DE",
                            "countryOfResidence": "US",
                            "dateOfBirth": "1991-01-01",
                            "name": {
                              "firstName": "Baran",
                              "lastName": "Ozkan",
                              "middleName": "Realblood",
                            },
                          },
                          "legalDocuments": [
                            {
                              "documentExpirationDate": 1839939034000,
                              "documentIssuedCountry": "DE",
                              "documentIssuedDate": 1639939034000,
                              "documentNumber": "Z9431P",
                              "documentType": "passport",
                              "nameOnDocument": {
                                "firstName": "Baran",
                                "lastName": "Ozkan",
                                "middleName": "Realblood",
                              },
                              "tags": [
                                {
                                  "key": "customerType",
                                  "value": "wallet",
                                },
                              ],
                            },
                          ],
                          "pepStatus": [
                            {
                              "isPepHit": true,
                            },
                          ],
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "kycStatusDetails": {
                        "reason": "reason",
                        "status": "SUCCESSFUL",
                      },
                      "legalEntity": {
                        "companyFinancialDetails": {
                          "expectedTransactionAmountPerMonth": {
                            "amountCurrency": "GBP",
                            "amountValue": 800,
                          },
                          "expectedTurnoverPerMonth": {
                            "amountCurrency": "USD",
                            "amountValue": 8000,
                          },
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                        "companyGeneralDetails": {
                          "businessIndustry": [
                            "Farming",
                          ],
                          "legalName": "Ozkan Hazelnut Export JSC",
                          "mainProductsServicesSold": [
                            "Hazelnut",
                          ],
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                          "userRegistrationStatus": "REGISTERED",
                          "userSegment": "SOLE_PROPRIETORSHIP",
                        },
                        "companyRegistrationDetails": {
                          "dateOfRegistration": "dateOfRegistration",
                          "legalEntityType": "legalEntityType",
                          "registrationCountry": "DE",
                          "registrationIdentifier": "PSJ554342",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                          "taxIdentifier": "taxIdentifier",
                        },
                        "contactDetails": {
                          "addresses": [
                            {
                              "addressLines": [
                                "Klara-Franke Str 20",
                              ],
                              "city": "Berlin",
                              "country": "Germany",
                              "postcode": "10557",
                              "state": "Berlin",
                              "tags": [
                                {
                                  "key": "customKey",
                                  "value": "customValue",
                                },
                              ],
                            },
                          ],
                          "contactNumbers": [
                            "contactNumbers",
                          ],
                          "emailIds": [
                            "emailIds",
                          ],
                          "faxNumbers": [
                            "faxNumbers",
                          ],
                          "websites": [
                            "websites",
                          ],
                        },
                        "reasonForAccountOpening": [
                          "string",
                        ],
                      },
                      "linkedEntities": {
                        "childUserIds": [
                          "childUserIds",
                        ],
                        "parentUserId": "parentUserId",
                      },
                      "mccDetails": {
                        "code": 1.1,
                        "description": "description",
                      },
                      "riskLevel": "VERY_HIGH",
                      "savedPaymentDetails": [
                        {
                          "checkIdentifier": "savedPaymentDetails",
                          "checkNumber": "savedPaymentDetails",
                          "deliveryStatus": "COMPLETED",
                          "etaTimestamp": 1.1,
                          "method": "CHECK",
                          "name": "savedPaymentDetails",
                          "shippingAddress": {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        },
                      ],
                      "shareHolders": [
                        {
                          "contactDetails": {
                            "addresses": [
                              {
                                "addressLines": [
                                  "Klara-Franke Str 20",
                                ],
                                "city": "Berlin",
                                "country": "Germany",
                                "postcode": "10557",
                                "state": "Berlin",
                                "tags": [
                                  {
                                    "key": "customKey",
                                    "value": "customValue",
                                  },
                                ],
                              },
                            ],
                            "contactNumbers": [
                              "+371 123132",
                            ],
                            "emailIds": [
                              "baran@flagright.com",
                            ],
                            "websites": [
                              "flagright.com",
                            ],
                          },
                          "generalDetails": {
                            "countryOfNationality": "DE",
                            "countryOfResidence": "US",
                            "dateOfBirth": "1991-01-01",
                            "name": {
                              "firstName": "Baran",
                              "lastName": "Ozkan",
                              "middleName": "Realblood",
                            },
                          },
                          "legalDocuments": [
                            {
                              "documentExpirationDate": 1839939034000,
                              "documentIssuedCountry": "DE",
                              "documentIssuedDate": 1639939034000,
                              "documentNumber": "Z9431P",
                              "documentType": "passport",
                              "nameOnDocument": {
                                "firstName": "Baran",
                                "lastName": "Ozkan",
                                "middleName": "Realblood",
                              },
                              "tags": [
                                {
                                  "key": "customerType",
                                  "value": "wallet",
                                },
                              ],
                            },
                          ],
                          "pepStatus": [
                            {
                              "isPepHit": true,
                            },
                          ],
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "transactionLimits": {
                        "maximumDailyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumMonthlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumQuarterlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumWeeklyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumYearlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                      },
                      "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                      "userStateDetails": {
                        "reason": "reason",
                        "state": "UNACCEPTABLE",
                        "userId": "userId",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/business/users/{userId}",
              "path-parameters": {
                "userId": {
                  "docs": "",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "Business",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get-consumer-transaction": {
              "auth": true,
              "display-name": "Retrieve a Transaction",
              "docs": "### GET Transactions

`/transactions` endpoint allows you to operate on the [Transaction entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction).

Calling `GET /transactions/{transactionId}` will return the entire transaction payload and rule execution results for the transaction with the corresponding `transactionId`",
              "errors": [
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "name": "example-1",
                  "path-parameters": {
                    "transactionId": "transactionId",
                  },
                  "response": {
                    "body": {
                      "destinationAmountDetails": {
                        "country": "IN",
                        "transactionAmount": 68351.34,
                        "transactionCurrency": "INR",
                      },
                      "destinationPaymentDetails": {
                        "checkIdentifier": "destinationPaymentDetails",
                        "checkNumber": "destinationPaymentDetails",
                        "deliveryStatus": "COMPLETED",
                        "etaTimestamp": 1.1,
                        "method": "CHECK",
                        "name": "destinationPaymentDetails",
                        "shippingAddress": {
                          "addressLines": [
                            "Klara-Franke Str 20",
                          ],
                          "city": "Berlin",
                          "country": "Germany",
                          "postcode": "10557",
                          "state": "Berlin",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      },
                      "destinationUserId": "9350a2611e0771cba03310f74bf6",
                      "deviceData": {
                        "appVersion": "1.1.0",
                        "batteryLevel": 95,
                        "deviceIdentifier": "3c49f915d04485e34caba",
                        "deviceLatitude": 13.0033,
                        "deviceLongitude": 76.1004,
                        "deviceMaker": "ASUS",
                        "deviceModel": "Zenphone M2 Pro Max",
                        "deviceYear": "2018",
                        "ipAddress": "10.23.191.2",
                        "operatingSystem": "Android 11.2",
                        "vpnUsed": false,
                      },
                      "executedRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleHit": true,
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "hitRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "originAmountDetails": {
                        "country": "DE",
                        "transactionAmount": 800,
                        "transactionCurrency": "EUR",
                      },
                      "originPaymentDetails": {
                        "checkIdentifier": "originPaymentDetails",
                        "checkNumber": "originPaymentDetails",
                        "deliveryStatus": "COMPLETED",
                        "etaTimestamp": 1.1,
                        "method": "CHECK",
                        "name": "originPaymentDetails",
                        "shippingAddress": {
                          "addressLines": [
                            "Klara-Franke Str 20",
                          ],
                          "city": "Berlin",
                          "country": "Germany",
                          "postcode": "10557",
                          "state": "Berlin",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      },
                      "originUserId": "8650a2611d0771cba03310f74bf6",
                      "productType": "productType",
                      "promotionCodeUsed": true,
                      "reference": "loan repayment",
                      "relatedTransactionIds": [
                        "relatedTransactionIds",
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "timestamp": 1641654664000,
                      "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                      "transactionState": "CREATED",
                      "type": "DEPOSIT",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/transactions/{transactionId}",
              "path-parameters": {
                "transactionId": {
                  "docs": "Unique Transaction Identifier",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "TransactionWithRulesResult",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get-consumer-user": {
              "auth": true,
              "display-name": "Retrieve a Consumer User",
              "docs": "### GET Consumer User

`/consumer/user` endpoint allows you to operate on the [Consumer User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

Calling `GET /consumer/user/{userId}` will return the entire user payload and rule execution results for the user with the corresponding `userId`",
              "errors": [
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "name": "example-1",
                  "path-parameters": {
                    "userId": "userId",
                  },
                  "response": {
                    "body": {
                      "acquisitionChannel": "ORGANIC",
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+37112345432",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "faxNumbers": [
                          "faxNumbers",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "createdTimestamp": 1641654664000,
                      "kycStatusDetails": {
                        "reason": "reason",
                        "status": "SUCCESSFUL",
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                          "pepCountry": "pepCountry",
                        },
                      ],
                      "reasonForAccountOpening": [
                        "reasonForAccountOpening",
                      ],
                      "riskLevel": "VERY_HIGH",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "transactionLimits": {
                        "maximumDailyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumMonthlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumQuarterlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumWeeklyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumYearlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                      },
                      "userDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "gender": "M",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                      "userSegment": "RETAIL",
                      "userStateDetails": {
                        "reason": "reason",
                        "state": "UNACCEPTABLE",
                        "userId": "userId",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/consumer/users/{userId}",
              "path-parameters": {
                "userId": {
                  "docs": "",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "User",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post-business-user": {
              "auth": true,
              "display-name": "Create a Business User",
              "docs": "## POST Business User

`/business/user` endpoint allows you to operate on the [Business user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

### Payload


Each consumer Business entity needs three mandatory fields:

* `userId` - Unique identifier for the user
* `legalEntity` - Details of the business legal entity (CompanyGeneralDetails, FinancialDetails etc) - only `legalName`in `CompanyGeneralDetails` is mandatory
* `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system",
              "errors": [
                "BadRequestError",
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "name": "example-1",
                  "request": {
                    "createdTimestamp": 1.1,
                    "userId": "userId",
                  },
                  "response": {
                    "body": {
                      "executedRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleHit": true,
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "hitRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "FRAUD",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "message": "message",
                      "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/business/users",
              "request": {
                "body": "Business",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "PostBusinessUserResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post-business-user-event": {
              "auth": true,
              "display-name": "Create a Business User Event",
              "docs": "## POST Business User Events

`/events/business/user` endpoint allows you to operate on the Business User Events entity.

User events are created after the initial `POST /business/users` call (which creates a user) and are used to:

* Update the STATE and KYC Status of the user, using the `userStateDetails` or `kycStatusDetails` field
* Update the user details, using the `updatedBusinessUserAttributes` field.

> If you have neither of the above two use cases, you do not need to use user events. 

### Payload

Each user event needs three mandatory fields:

* `timestamp`- the timestamp of when the event was created or occured in your system
* `userId` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique `eventId` to the request body.
",
              "errors": [
                "BadRequestError",
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "request": {
                    "timestamp": 1.1,
                    "userId": "userId",
                  },
                  "response": {
                    "body": {
                      "acquisitionChannel": "ORGANIC",
                      "allowedPaymentMethods": [
                        "ACH",
                      ],
                      "createdTimestamp": 1.1,
                      "directors": [
                        {
                          "contactDetails": {
                            "addresses": [
                              {
                                "addressLines": [
                                  "Klara-Franke Str 20",
                                ],
                                "city": "Berlin",
                                "country": "Germany",
                                "postcode": "10557",
                                "state": "Berlin",
                                "tags": [
                                  {
                                    "key": "customKey",
                                    "value": "customValue",
                                  },
                                ],
                              },
                            ],
                            "contactNumbers": [
                              "+371 123132",
                            ],
                            "emailIds": [
                              "baran@flagright.com",
                            ],
                            "websites": [
                              "flagright.com",
                            ],
                          },
                          "generalDetails": {
                            "countryOfNationality": "DE",
                            "countryOfResidence": "US",
                            "dateOfBirth": "1991-01-01",
                            "name": {
                              "firstName": "Baran",
                              "lastName": "Ozkan",
                              "middleName": "Realblood",
                            },
                          },
                          "legalDocuments": [
                            {
                              "documentExpirationDate": 1839939034000,
                              "documentIssuedCountry": "DE",
                              "documentIssuedDate": 1639939034000,
                              "documentNumber": "Z9431P",
                              "documentType": "passport",
                              "nameOnDocument": {
                                "firstName": "Baran",
                                "lastName": "Ozkan",
                                "middleName": "Realblood",
                              },
                              "tags": [
                                {
                                  "key": "customerType",
                                  "value": "wallet",
                                },
                              ],
                            },
                          ],
                          "pepStatus": [
                            {
                              "isPepHit": true,
                            },
                          ],
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "executedRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleHit": true,
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "hitRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "FRAUD",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "kycStatusDetails": {
                        "reason": "reason",
                        "status": "SUCCESSFUL",
                      },
                      "legalEntity": {
                        "companyFinancialDetails": {
                          "expectedTransactionAmountPerMonth": {
                            "amountCurrency": "GBP",
                            "amountValue": 800,
                          },
                          "expectedTurnoverPerMonth": {
                            "amountCurrency": "USD",
                            "amountValue": 8000,
                          },
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                        "companyGeneralDetails": {
                          "businessIndustry": [
                            "Farming",
                          ],
                          "legalName": "Ozkan Hazelnut Export JSC",
                          "mainProductsServicesSold": [
                            "Hazelnut",
                          ],
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                          "userRegistrationStatus": "REGISTERED",
                          "userSegment": "SOLE_PROPRIETORSHIP",
                        },
                        "companyRegistrationDetails": {
                          "dateOfRegistration": "dateOfRegistration",
                          "legalEntityType": "legalEntityType",
                          "registrationCountry": "DE",
                          "registrationIdentifier": "PSJ554342",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                          "taxIdentifier": "taxIdentifier",
                        },
                        "contactDetails": {
                          "addresses": [
                            {
                              "addressLines": [
                                "Klara-Franke Str 20",
                              ],
                              "city": "Berlin",
                              "country": "Germany",
                              "postcode": "10557",
                              "state": "Berlin",
                              "tags": [
                                {
                                  "key": "customKey",
                                  "value": "customValue",
                                },
                              ],
                            },
                          ],
                          "contactNumbers": [
                            "contactNumbers",
                          ],
                          "emailIds": [
                            "emailIds",
                          ],
                          "faxNumbers": [
                            "faxNumbers",
                          ],
                          "websites": [
                            "websites",
                          ],
                        },
                        "reasonForAccountOpening": [
                          "reasonForAccountOpening",
                        ],
                      },
                      "linkedEntities": {
                        "childUserIds": [
                          "childUserIds",
                        ],
                        "parentUserId": "parentUserId",
                      },
                      "mccDetails": {
                        "code": 1.1,
                        "description": "description",
                      },
                      "riskLevel": "VERY_HIGH",
                      "savedPaymentDetails": [
                        {
                          "checkIdentifier": "savedPaymentDetails",
                          "checkNumber": "savedPaymentDetails",
                          "deliveryStatus": "COMPLETED",
                          "etaTimestamp": 1.1,
                          "method": "CHECK",
                          "name": "savedPaymentDetails",
                          "shippingAddress": {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        },
                      ],
                      "shareHolders": [
                        {
                          "contactDetails": {
                            "addresses": [
                              {
                                "addressLines": [
                                  "Klara-Franke Str 20",
                                ],
                                "city": "Berlin",
                                "country": "Germany",
                                "postcode": "10557",
                                "state": "Berlin",
                                "tags": [
                                  {
                                    "key": "customKey",
                                    "value": "customValue",
                                  },
                                ],
                              },
                            ],
                            "contactNumbers": [
                              "+371 123132",
                            ],
                            "emailIds": [
                              "baran@flagright.com",
                            ],
                            "websites": [
                              "flagright.com",
                            ],
                          },
                          "generalDetails": {
                            "countryOfNationality": "DE",
                            "countryOfResidence": "US",
                            "dateOfBirth": "1991-01-01",
                            "name": {
                              "firstName": "Baran",
                              "lastName": "Ozkan",
                              "middleName": "Realblood",
                            },
                          },
                          "legalDocuments": [
                            {
                              "documentExpirationDate": 1839939034000,
                              "documentIssuedCountry": "DE",
                              "documentIssuedDate": 1639939034000,
                              "documentNumber": "Z9431P",
                              "documentType": "passport",
                              "nameOnDocument": {
                                "firstName": "Baran",
                                "lastName": "Ozkan",
                                "middleName": "Realblood",
                              },
                              "tags": [
                                {
                                  "key": "customerType",
                                  "value": "wallet",
                                },
                              ],
                            },
                          ],
                          "pepStatus": [
                            {
                              "isPepHit": true,
                            },
                          ],
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "transactionLimits": {
                        "maximumDailyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumMonthlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumQuarterlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumWeeklyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumYearlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                      },
                      "userId": "userId",
                      "userStateDetails": {
                        "reason": "reason",
                        "state": "UNACCEPTABLE",
                        "userId": "userId",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/events/business/user",
              "request": {
                "body": {
                  "properties": {
                    "eventDescription": {
                      "docs": "Event description",
                      "type": "optional<string>",
                    },
                    "eventId": {
                      "docs": "Unique event ID",
                      "type": "optional<string>",
                    },
                    "reason": {
                      "docs": "Reason for the event or a state change",
                      "type": "optional<string>",
                    },
                    "timestamp": {
                      "docs": "Timestamp of the event",
                      "type": "double",
                      "validation": {
                        "exclusiveMax": undefined,
                        "exclusiveMin": undefined,
                        "max": 4133890801000,
                        "min": 1262300400000,
                        "multipleOf": undefined,
                      },
                    },
                    "updatedBusinessUserAttributes": {
                      "type": "optional<BusinessOptional>",
                    },
                    "userId": {
                      "docs": "Transaction ID the event pertains to",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "BusinessUserEvent",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "BusinessWithRulesResult",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post-consumer-transaction": {
              "auth": true,
              "display-name": "Verify a Transaction",
              "docs": "## POST Transactions

`/transactions` endpoint allows you to operate on the [Transaction entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction)

In order to pass the payload of a transaction to Flagright and verify the transaciton, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup. 


### Payload

Here are some of the most used payload fields explained (you can find the full payload [schema below](https://docs.flagright.com/docs/flagright-api/87742ed31b30e-verify-a-transaction#request-body) with 1 line descriptions):

* `type`: Type of transaction (Ex: `WITHDRAWAL`, `DEPOSIT`, `TRANSFER` etc). 
* `transactionId` - Unique Identifier for the transaction. Flagright API will generate a `transactionId` if this field is left empty
* `timestamp` - UNIX timestamp in *milliseconds* of when the transaction took place
* `transactionState` - The state of the transaction, set to `CREATED` by default. [More details here](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships-in-the-api#transaction-lifecycle-through-transaction-events)
* `originUserId` - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the [create a consumer user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user) or [create a business user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user) endpoint
* `destinationUserId` - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the [create a consumer user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user) or [create a business user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user) endpoint
* `originAmountDetails` - Details of the amount being sent from the origin
* `destinationAmountDetails` - Details of the amount being received at the destination
* `originPaymentDetails` - Payment details (if any) used at the origin (ex: `CARD`, `IBAN`, `WALLET` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.
* `destinationPaymentDetails` - Payment details (if any) used at the destination (ex: `CARD`, `IBAN`, `WALLET` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.",
              "errors": [
                "BadRequestError",
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "name": "example-1",
                  "request": {
                    "destinationAmountDetails": {
                      "country": "IN",
                      "transactionAmount": 68351.34,
                      "transactionCurrency": "INR",
                    },
                    "destinationPaymentDetails": {
                      "method": "CHECK",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                    "destinationUserId": "9350a2611e0771cba03310f74bf6",
                    "deviceData": {
                      "appVersion": "1.1.0",
                      "batteryLevel": 95,
                      "deviceIdentifier": "3c49f915d04485e34caba",
                      "deviceLatitude": 13.0033,
                      "deviceLongitude": 76.1004,
                      "deviceMaker": "ASUS",
                      "deviceModel": "Zenphone M2 Pro Max",
                      "deviceYear": "2018",
                      "ipAddress": "10.23.191.2",
                      "operatingSystem": "Android 11.2",
                      "vpnUsed": false,
                    },
                    "originAmountDetails": {
                      "country": "DE",
                      "transactionAmount": 800,
                      "transactionCurrency": "EUR",
                    },
                    "originPaymentDetails": {
                      "method": "CHECK",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                    "originUserId": "8650a2611d0771cba03310f74bf6",
                    "promotionCodeUsed": true,
                    "reference": "loan repayment",
                    "tags": [
                      {
                        "key": "customKey",
                        "value": "customValue",
                      },
                    ],
                    "timestamp": 1641654664000,
                    "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                  },
                  "response": {
                    "body": {
                      "executedRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleHit": true,
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "hitRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "message": "message",
                      "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/transactions",
              "request": {
                "body": "Transaction",
                "content-type": "application/json",
                "name": "PostConsumerTransactionRequest",
                "query-parameters": {
                  "validateDestinationUserId": {
                    "docs": "Boolean string whether Flagright should validate if provided destinationUserId exist. True by default",
                    "type": "optional<string>",
                  },
                  "validateOriginUserId": {
                    "docs": "Boolean string whether Flagright should validate if provided originUserId exist. True by default",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "PostConsumerTransactionResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post-consumer-user": {
              "auth": true,
              "display-name": "Create a Consumer User",
              "docs": "## POST Consumer User

`/consumer/user` endpoint allows you to operate on the [Consumer user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

### Payload

Each consumer User entity needs three mandatory fields:

* `userId` - Unique identifier for the user
* `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system
",
              "errors": [
                "BadRequestError",
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "name": "example-1",
                  "request": {
                    "contactDetails": {
                      "addresses": [
                        {
                          "addressLines": [
                            "Klara-Franke Str 20",
                          ],
                          "city": "Berlin",
                          "country": "Germany",
                          "postcode": "10557",
                          "state": "Berlin",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "contactNumbers": [
                        "+37112345432",
                      ],
                      "emailIds": [
                        "baran@flagright.com",
                      ],
                      "websites": [
                        "flagright.com",
                      ],
                    },
                    "createdTimestamp": 1641654664000,
                    "legalDocuments": [
                      {
                        "documentExpirationDate": 1839939034000,
                        "documentIssuedCountry": "DE",
                        "documentIssuedDate": 1639939034000,
                        "documentNumber": "Z9431P",
                        "documentType": "passport",
                        "tags": [
                          {
                            "key": "customerType",
                            "value": "wallet",
                          },
                        ],
                      },
                    ],
                    "tags": [
                      {
                        "key": "customKey",
                        "value": "customValue",
                      },
                    ],
                    "userDetails": {
                      "countryOfNationality": "DE",
                      "countryOfResidence": "US",
                      "dateOfBirth": "1991-01-01",
                      "name": {
                        "firstName": "Baran",
                        "lastName": "Ozkan",
                        "middleName": "Realblood",
                      },
                    },
                    "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                  },
                  "response": {
                    "body": {
                      "executedRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleHit": true,
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "hitRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "FRAUD",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "message": "message",
                      "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/consumer/users",
              "request": {
                "body": {
                  "type": "User",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "PostConsumerUserResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post-transaction-event": {
              "auth": true,
              "display-name": "Create a Transaction Event",
              "docs": "## POST Transaction Events

`/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-event)

Transaction events are created after the initial `POST /transactions` call (which creates a transaction) and are used to:

* Update the STATE of the transaction, using the `transactionState` field and manage the [Transaction Lifecycle](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-lifecycle-through-transaction-events)
* Update the transaction details, using the `updatedTransactionAttributes` field.

> If you have neither of the above two use cases, you do not need to use transaction events. 

### Payload

Each transaction event needs three mandatory fields:

* `transactionState` - STATE of the transaction -> value is set to `CREATED` after `POST /transactions` call
* `timestamp`- the timestamp of when the event was created or occured in your system
* `transactionId` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique `eventId` to the request body.
",
              "errors": [
                "BadRequestError",
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "name": "example-1",
                  "request": {
                    "eventDescription": "Transaction created",
                    "eventId": "aaeeb166147a406b957dd9147a406b957",
                    "metaData": {
                      "batteryLevel": 76.3,
                      "deviceLatitude": 13.009711,
                      "deviceLongitude": 76.102898,
                      "ipAddress": "79.144.2.20",
                      "vpnUsed": true,
                    },
                    "timestamp": 1431231244001,
                    "transactionId": "443dea26147a406b957d9ee3a1247b11",
                    "transactionState": "SUCCESSFUL",
                  },
                  "response": {
                    "body": {
                      "eventId": "7b80a539eea6e78acbd6d458e5971482",
                      "executedRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleHit": true,
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "hitRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "transaction": {
                        "destinationAmountDetails": {
                          "country": "IN",
                          "transactionAmount": 68351.34,
                          "transactionCurrency": "INR",
                        },
                        "destinationPaymentDetails": {
                          "checkIdentifier": "destinationPaymentDetails",
                          "checkNumber": "destinationPaymentDetails",
                          "deliveryStatus": "COMPLETED",
                          "etaTimestamp": 1.1,
                          "method": "CHECK",
                          "name": "destinationPaymentDetails",
                          "shippingAddress": {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        },
                        "destinationUserId": "9350a2611e0771cba03310f74bf6",
                        "deviceData": {
                          "appVersion": "1.1.0",
                          "batteryLevel": 95,
                          "deviceIdentifier": "3c49f915d04485e34caba",
                          "deviceLatitude": 13.0033,
                          "deviceLongitude": 76.1004,
                          "deviceMaker": "ASUS",
                          "deviceModel": "Zenphone M2 Pro Max",
                          "deviceYear": "2018",
                          "ipAddress": "10.23.191.2",
                          "operatingSystem": "Android 11.2",
                          "vpnUsed": false,
                        },
                        "originAmountDetails": {
                          "country": "DE",
                          "transactionAmount": 800,
                          "transactionCurrency": "EUR",
                        },
                        "originPaymentDetails": {
                          "checkIdentifier": "originPaymentDetails",
                          "checkNumber": "originPaymentDetails",
                          "deliveryStatus": "COMPLETED",
                          "etaTimestamp": 1.1,
                          "method": "CHECK",
                          "name": "originPaymentDetails",
                          "shippingAddress": {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        },
                        "originUserId": "8650a2611d0771cba03310f74bf6",
                        "productType": "productType",
                        "promotionCodeUsed": true,
                        "reference": "loan repayment",
                        "relatedTransactionIds": [
                          "relatedTransactionIds",
                        ],
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                        "timestamp": 1641654664000,
                        "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                        "transactionState": "CREATED",
                        "type": "DEPOSIT",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/events/transaction",
              "request": {
                "body": {
                  "properties": {
                    "eventDescription": {
                      "docs": "Event description",
                      "type": "optional<string>",
                    },
                    "eventId": {
                      "docs": "Unique event ID",
                      "type": "optional<string>",
                    },
                    "metaData": "optional<DeviceData>",
                    "reason": {
                      "docs": "Reason for the event or a state change",
                      "type": "optional<string>",
                    },
                    "timestamp": {
                      "docs": "Timestamp of the event",
                      "type": "double",
                      "validation": {
                        "exclusiveMax": undefined,
                        "exclusiveMin": undefined,
                        "max": 4133890801000,
                        "min": 1262300400000,
                        "multipleOf": undefined,
                      },
                    },
                    "transactionId": {
                      "docs": "Transaction ID the event pertains to",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "transactionState": {
                      "type": "TransactionState",
                    },
                    "updatedTransactionAttributes": "optional<TransactionUpdatable>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TransactionEvent",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "TransactionEventMonitoringResult",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post-user-event": {
              "auth": true,
              "display-name": "Create a Consumer User Event",
              "docs": "## POST Consumer User Events

`/events/consumer/user` endpoint allows you to operate on the Consumer User Events entity.

User events are created after the initial `POST /consumer/users` call (which creates a user) and are used to:

* Update the STATE and KYC Status of the user, using the `userStateDetails` or `kycStatusDetails` field
* Update the user details, using the `updatedConsumerUserAttributes` field.

> If you have neither of the above two use cases, you do not need to use user events. 

### Payload

Each user event needs three mandatory fields:

* `timestamp`- the timestamp of when the event was created or occured in your system
* `userId` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique `eventId` to the request body.
",
              "errors": [
                "BadRequestError",
                "UnauthorizedError",
                "TooManyRequestsError",
              ],
              "examples": [
                {
                  "request": {
                    "timestamp": 1.1,
                    "userId": "userId",
                  },
                  "response": {
                    "body": {
                      "acquisitionChannel": "ORGANIC",
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "contactNumbers",
                        ],
                        "emailIds": [
                          "emailIds",
                        ],
                        "faxNumbers": [
                          "faxNumbers",
                        ],
                        "websites": [
                          "websites",
                        ],
                      },
                      "createdTimestamp": 1.1,
                      "executedRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "AML",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleHit": true,
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "hitRules": [
                        {
                          "labels": [
                            "UNEXPECTED_BEHAVIOR",
                          ],
                          "nature": "FRAUD",
                          "ruleAction": "BLOCK",
                          "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                          "ruleId": "R-1a",
                          "ruleInstanceId": "ruleInstanceId",
                          "ruleName": "Proof of funds for high value transactions",
                        },
                      ],
                      "kycStatusDetails": {
                        "reason": "reason",
                        "status": "SUCCESSFUL",
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                          "pepCountry": "pepCountry",
                        },
                      ],
                      "reasonForAccountOpening": [
                        "reasonForAccountOpening",
                      ],
                      "riskLevel": "VERY_HIGH",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "transactionLimits": {
                        "maximumDailyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumMonthlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumQuarterlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumWeeklyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                        "maximumYearlyTransactionLimit": {
                          "amountCurrency": "GBP",
                          "amountValue": 800,
                        },
                      },
                      "userDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "gender": "M",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "userId": "userId",
                      "userSegment": "RETAIL",
                      "userStateDetails": {
                        "reason": "reason",
                        "state": "UNACCEPTABLE",
                        "userId": "userId",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/events/consumer/user",
              "request": {
                "body": {
                  "properties": {
                    "eventDescription": {
                      "docs": "Event description",
                      "type": "optional<string>",
                    },
                    "eventId": {
                      "docs": "Unique event ID",
                      "type": "optional<string>",
                    },
                    "reason": {
                      "docs": "Reason for the event or a state change",
                      "type": "optional<string>",
                    },
                    "timestamp": {
                      "docs": "Timestamp of the event",
                      "type": "double",
                      "validation": {
                        "exclusiveMax": undefined,
                        "exclusiveMin": undefined,
                        "max": 4133890801000,
                        "min": 1262300400000,
                        "multipleOf": undefined,
                      },
                    },
                    "updatedConsumerUserAttributes": {
                      "type": "optional<UserOptional>",
                    },
                    "userId": {
                      "docs": "Transaction ID the event pertains to",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConsumerUserEvent",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "UserWithRulesResult",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "ACHDetails": {
            "docs": "Model for ACH payment method",
            "inline": undefined,
            "properties": {
              "accountNumber": {
                "docs": "Bank account number of the individual",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "bankAddress": {
                "type": "optional<Address>",
              },
              "bankName": {
                "docs": "Name of the bank",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "beneficiaryName": {
                "docs": "Beneficiary name of the account",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Name of the account holder",
                "type": "optional<string>",
              },
              "routingNumber": {
                "docs": "Routing number of the bank",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ACHPaymentMethod": {
            "docs": "Classify the method of payment as "ACH" for ACHDetails",
            "type": "literal<"ACH">",
          },
          "AcquisitionChannel": {
            "docs": "Model for User acquisition channel",
            "enum": [
              "ORGANIC",
              "PAID",
              "REFERRAL",
              "OFFLINE",
              "GATHERING",
              "UNKNOWN",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Address": {
            "docs": "Model for standardized address",
            "inline": undefined,
            "properties": {
              "addressLines": {
                "docs": "Address lines of the user's residence address",
                "type": "list<unknown>",
              },
              "city": {
                "docs": "City of the user's residence address",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "country": {
                "docs": "User's country of residence",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "postcode": {
                "docs": "Post code of the user's residence address",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "state": {
                "docs": "State of the user's residence address",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AlertClosedDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "alertId": {
                "type": "optional<string>",
              },
              "comment": {
                "type": "optional<string>",
              },
              "reasonDescriptionForOther": {
                "type": "optional<list<string>>",
              },
              "reasons": {
                "type": "optional<list<string>>",
              },
              "ruleDescription": {
                "type": "optional<string>",
              },
              "ruleId": {
                "type": "optional<string>",
              },
              "ruleInstanceId": {
                "type": "optional<string>",
              },
              "ruleName": {
                "type": "optional<string>",
              },
              "status": {
                "type": "optional<string>",
              },
              "transactionIds": {
                "type": "optional<list<string>>",
              },
              "userId": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Amount": {
            "docs": "Model for amount",
            "inline": undefined,
            "properties": {
              "amountCurrency": {
                "type": "CurrencyCode",
              },
              "amountValue": {
                "docs": "Numerical value of the transaction",
                "type": "double",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Business": {
            "docs": undefined,
            "extends": [
              "BusinessBase",
              "BusinessOptional",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BusinessBase": {
            "docs": "Model for a business user base fields",
            "inline": undefined,
            "properties": {
              "createdTimestamp": {
                "docs": "Timestamp when the user was created",
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 4133890801000,
                  "min": 1262300400000,
                  "multipleOf": undefined,
                },
              },
              "userId": {
                "docs": "Unique user ID for the user",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BusinessEntityLink": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "childUserIds": {
                "type": "optional<list<string>>",
              },
              "parentUserId": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BusinessOptional": {
            "docs": "Model for a business user - optional fields",
            "inline": undefined,
            "properties": {
              "acquisitionChannel": {
                "type": "optional<AcquisitionChannel>",
              },
              "allowedPaymentMethods": {
                "type": "optional<list<PaymentMethod>>",
              },
              "directors": {
                "docs": "Director(s) of the company. Must be at least one",
                "type": "optional<list<Person>>",
              },
              "kycStatusDetails": {
                "type": "optional<KYCStatusDetails>",
              },
              "legalEntity": {
                "type": "optional<LegalEntity>",
              },
              "linkedEntities": {
                "type": "optional<BusinessEntityLink>",
              },
              "mccDetails": {
                "type": "optional<MCCDetails>",
              },
              "riskLevel": {
                "type": "optional<RiskLevel>",
              },
              "savedPaymentDetails": {
                "type": "optional<list<BusinessOptionalSavedPaymentDetailsItem>>",
              },
              "shareHolders": {
                "docs": "Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual",
                "type": "optional<list<Person>>",
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
              "transactionLimits": {
                "type": "optional<TransactionLimits>",
              },
              "userStateDetails": {
                "type": "optional<UserStateDetails>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BusinessOptionalSavedPaymentDetailsItem": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "method",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "ACH": {
                "type": "ACHDetails",
              },
              "CARD": {
                "type": "CardDetails",
              },
              "CHECK": {
                "type": "CheckDetails",
              },
              "GENERIC_BANK_ACCOUNT": {
                "type": "GenericBankAccountDetails",
              },
              "IBAN": {
                "type": "IBANDetails",
              },
              "MPESA": {
                "type": "MpesaDetails",
              },
              "SWIFT": {
                "type": "SWIFTDetails",
              },
              "UPI": {
                "type": "UPIDetails",
              },
              "WALLET": {
                "type": "WalletDetails",
              },
            },
          },
          "BusinessUsersResponse": {
            "docs": "Model for business user risk score response",
            "inline": undefined,
            "properties": {
              "userId": {
                "docs": "user ID the risk score pertains to",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BusinessWithRulesResult": {
            "docs": "Model for business payload with rules result",
            "extends": [
              "Business",
            ],
            "inline": undefined,
            "properties": {
              "executedRules": "optional<list<ExecutedRulesResult>>",
              "hitRules": "optional<list<HitRulesDetails>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CardDetails": {
            "docs": "Model for credit or debit card details",
            "inline": undefined,
            "properties": {
              "3dsDone": {
                "docs": "Whether 3ds was successfully enforced for the transaction",
                "name": "_3dsDone",
                "type": "optional<boolean>",
              },
              "cardAuthenticated": {
                "docs": "Authentication of Card",
                "type": "optional<boolean>",
              },
              "cardBrand": {
                "docs": "Brand of Card",
                "type": "optional<CardDetailsCardBrand>",
              },
              "cardExpiry": {
                "type": "optional<CardExpiry>",
              },
              "cardFingerprint": {
                "docs": "Unique card fingerprint that helps identify a specific card without having to use explicit card number. This is likely available at your card payment scheme provider",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "cardFunding": {
                "docs": "Funding of Card",
                "type": "optional<CardDetailsCardFunding>",
              },
              "cardIssuedCountry": {
                "type": "optional<CountryCode>",
              },
              "cardLast4Digits": {
                "docs": "Last 4 digits of Card",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 4,
                  "minLength": 4,
                  "pattern": undefined,
                },
              },
              "cardType": {
                "type": "optional<CardDetailsCardType>",
              },
              "merchantDetails": {
                "type": "optional<CardMerchantDetails>",
              },
              "nameOnCard": {
                "type": "optional<ConsumerName>",
              },
              "paymentChannel": {
                "type": "optional<string>",
              },
              "transactionReferenceField": {
                "docs": "Reference for the transaction",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CardDetailsCardBrand": {
            "docs": "Brand of Card",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMERICAN_EXPRESS",
              "DISCOVER",
              "UNIONPAY",
              "RUPAY",
              "JCB",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CardDetailsCardFunding": {
            "docs": "Funding of Card",
            "enum": [
              "CREDIT",
              "DEBIT",
              "PREPAID",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CardDetailsCardType": {
            "enum": [
              "VIRTUAL",
              "PHYSICAL",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CardExpiry": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "month": {
                "type": "optional<double>",
              },
              "year": {
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CardMerchantDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "MCC": {
                "type": "optional<string>",
              },
              "category": {
                "type": "optional<string>",
              },
              "city": {
                "type": "optional<string>",
              },
              "country": {
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 2,
                  "minLength": 2,
                  "pattern": undefined,
                },
              },
              "id": {
                "type": "optional<string>",
              },
              "postCode": {
                "type": "optional<string>",
              },
              "state": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CardPaymentMethod": {
            "docs": "Classify the method of payment as "Card" for CardDetails
",
            "type": "literal<"CARD">",
          },
          "CaseClosedDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "caseId": {
                "type": "optional<string>",
              },
              "comment": {
                "type": "optional<string>",
              },
              "reasonDescriptionForOther": {
                "type": "optional<list<string>>",
              },
              "reasons": {
                "type": "optional<list<string>>",
              },
              "status": {
                "type": "optional<string>",
              },
              "transactionIds": {
                "type": "optional<list<string>>",
              },
              "userId": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CaseManagementEvent": {
            "docs": "Model for case management events",
            "inline": undefined,
            "properties": {
              "caseStatus": {
                "docs": "Status of a case. E.g. Open, Closed etc.",
                "type": "CaseManagementEventCaseStatus",
              },
              "caseStatusReason": {
                "docs": "Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.",
                "type": "CaseManagementEventCaseStatusReason",
              },
              "caseStatusReasonDescription": {
                "docs": "Case status reason description",
                "type": "optional<string>",
              },
              "eventId": {
                "docs": "Event ID the case pertains to",
                "type": "optional<string>",
              },
              "timestamp": {
                "docs": "Timestamp of the event",
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 1262300400000,
                  "multipleOf": undefined,
                },
              },
              "transactionId": {
                "docs": "Transaction ID the case pertains to",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "userId": {
                "docs": "User ID the case pertains to",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CaseManagementEventCaseStatus": {
            "docs": "Status of a case. E.g. Open, Closed etc.",
            "enum": [
              "CLOSED",
              "HIT",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CaseManagementEventCaseStatusReason": {
            "docs": "Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.",
            "enum": [
              "FALSE_POSITIVE",
              "INVESTIGATION_COMPLETED",
              "DOCUMENTS_COLLECTED",
              "OTHER",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CheckDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "checkIdentifier": {
                "type": "optional<string>",
              },
              "checkNumber": {
                "type": "optional<string>",
              },
              "deliveryStatus": {
                "type": "optional<CheckDetailsDeliveryStatus>",
              },
              "etaTimestamp": {
                "type": "optional<double>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 1262300400000,
                  "multipleOf": undefined,
                },
              },
              "name": {
                "type": "optional<string>",
              },
              "shippingAddress": {
                "type": "optional<Address>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CheckDetailsDeliveryStatus": {
            "enum": [
              "COMPLETED",
              "PENDING",
              "SETTLED",
              "CANCELED",
              "REFUND",
              "DECLINED",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CheckPaymentMethod": {
            "docs": "Classify the method of payment as "CHECK" for CheckDetails",
            "type": "literal<"CHECK">",
          },
          "CompanyFinancialDetails": {
            "docs": "Model for business user company financial details",
            "inline": undefined,
            "properties": {
              "expectedTransactionAmountPerMonth": {
                "type": "optional<Amount>",
              },
              "expectedTurnoverPerMonth": {
                "type": "optional<Amount>",
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CompanyGeneralDetails": {
            "docs": "Model for business user company general details",
            "inline": undefined,
            "properties": {
              "businessIndustry": {
                "docs": "The industry the business operates in for a business customer",
                "type": "optional<list<string>>",
              },
              "legalName": {
                "docs": "Legal name of the company",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "mainProductsServicesSold": {
                "docs": "The key products and services provided by the company",
                "type": "optional<list<string>>",
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
              "userRegistrationStatus": {
                "type": "optional<UserRegistrationStatus>",
              },
              "userSegment": {
                "docs": "Segmentation of the business user",
                "type": "optional<CompanyGeneralDetailsUserSegment>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CompanyGeneralDetailsUserSegment": {
            "docs": "Segmentation of the business user",
            "enum": [
              "SOLE_PROPRIETORSHIP",
              "SMB",
              "SMALL",
              "MEDIUM",
              "LARGE",
              "UNKNOWN",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CompanyRegistrationDetails": {
            "docs": "Model for business user company registration details",
            "inline": undefined,
            "properties": {
              "dateOfRegistration": {
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^(\d{4}-\d{2}-\d{2})*$",
                },
              },
              "legalEntityType": {
                "docs": "Type of legal entity. Ex: Limited Liability",
                "type": "optional<string>",
              },
              "registrationCountry": {
                "type": "CountryCode",
              },
              "registrationIdentifier": {
                "docs": "Commercial registry registration number for the company in its registration country",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
              "taxIdentifier": {
                "docs": "Tax ID number of the registered entity",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ConsumerName": {
            "docs": "Model for a generic consumer name",
            "inline": undefined,
            "properties": {
              "firstName": {
                "docs": "First name of the user",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "lastName": {
                "docs": "Last name of the user",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "middleName": {
                "docs": "Middle name of the user",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ConsumerUsersResponse": {
            "docs": "Model for consumer user risk score response",
            "inline": undefined,
            "properties": {
              "userId": {
                "docs": "user ID the risk score pertains to",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ContactDetails": {
            "docs": "Model for business user contact information details",
            "inline": undefined,
            "properties": {
              "addresses": {
                "docs": "Address(es) of the company",
                "type": "optional<list<Address>>",
              },
              "contactNumbers": {
                "docs": "Phone numbers to contact a given business customer",
                "type": "optional<list<string>>",
              },
              "emailIds": {
                "docs": "Email addresses of the contacts for a given business customer",
                "type": "optional<list<string>>",
              },
              "faxNumbers": {
                "docs": "Fax numbers to contact a business customer",
                "type": "optional<list<string>>",
              },
              "websites": {
                "docs": "Website of the company",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CountryCode": {
            "enum": [
              "AF",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BQ",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "CV",
              "KH",
              "CM",
              "CA",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CD",
              "CG",
              "CK",
              "CR",
              "HR",
              "CU",
              "CW",
              "CY",
              "CZ",
              "CI",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "SZ",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KP",
              "KR",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MK",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RO",
              "RU",
              "RW",
              "RE",
              "BL",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SX",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "SS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TM",
              "TC",
              "TV",
              "TR",
              "UG",
              "UA",
              "AE",
              "GB",
              "UM",
              "US",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW",
              "AX",
              {
                "name": "NOT_APPLICABLE",
                "value": "N/A",
              },
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CurrencyCode": {
            "enum": [
              {
                "name": "OneInch",
                "value": "1INCH",
              },
              "AAVE",
              "ADA",
              "AED",
              "AFN",
              "ALGO",
              "ALL",
              "AMD",
              "AMP",
              "ANG",
              "AOA",
              "AR",
              "ARS",
              "ATOM",
              "AUD",
              "AVAX",
              "AWG",
              "AXS",
              "AZN",
              "BAM",
              "BAT",
              "BBD",
              "BCH",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BNB",
              "BND",
              "BOB",
              "BRL",
              "BSD",
              "BSV",
              "BTC",
              "BTCB",
              "BTG",
              "BTN",
              "BUSD",
              "BWP",
              "BYN",
              "BYR",
              "BZD",
              "CAD",
              "CAKE",
              "CDF",
              "CELO",
              "CHF",
              "CHZ",
              "CLF",
              "CLP",
              "CNY",
              "COMP",
              "COP",
              "CRC",
              "CRO",
              "CRV",
              "CUC",
              "CUP",
              "CVE",
              "CVX",
              "CZK",
              "DAI",
              "DASH",
              "DCR",
              "DFI",
              "DJF",
              "DKK",
              "DOGE",
              "DOP",
              "DOT",
              "DZD",
              "EGLD",
              "EGP",
              "ENJ",
              "EOS",
              "ERN",
              "ETB",
              "ETC",
              "ETH",
              "EUR",
              "FEI",
              "FIL",
              "FJD",
              "FKP",
              "FLOW",
              "FRAX",
              "FTM",
              "FTT",
              "GALA",
              "GBP",
              "GEL",
              "GGP",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GNO",
              "GRT",
              "GT",
              "GTQ",
              "GYD",
              "HBAR",
              "HKD",
              "HNL",
              "HNT",
              "HOT",
              "HRK",
              "HT",
              "HTG",
              "HUF",
              "ICP",
              "IDR",
              "ILS",
              "IMP",
              "INJ",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JEP",
              "JMD",
              "JOD",
              "JPY",
              "KAVA",
              "KCS",
              "KDA",
              "KES",
              "KGS",
              "KHR",
              "KLAY",
              "KMF",
              "KNC",
              "KPW",
              "KRW",
              "KSM",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LEO",
              "LINK",
              "LKR",
              "LRC",
              "LRD",
              "LSL",
              "LTC",
              "LTL",
              "LUNA",
              "LVL",
              "LYD",
              "MAD",
              "MANA",
              "MATIC",
              "MDL",
              "MGA",
              "MINA",
              "MIOTA",
              "MKD",
              "MKR",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MYR",
              "MZN",
              "NAD",
              "NEAR",
              "NEO",
              "NEXO",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OKB",
              "OMR",
              "ONE",
              "PAB",
              "PAXG",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "QNT",
              "QTUM",
              "RON",
              "RSD",
              "RUB",
              "RUNE",
              "RWF",
              "SAND",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHIB",
              "SHP",
              "SLE",
              "SLL",
              "SOL",
              "SOS",
              "SRD",
              "STD",
              "STX",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "THETA",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRX",
              "TRY",
              "TTD",
              "TTT",
              "TUSD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "UNI",
              "USD",
              "USDC",
              "USDP",
              "USDT",
              "UYU",
              "UZS",
              "VEF",
              "VET",
              "VND",
              "VUV",
              "WAVES",
              "WBTC",
              "WEMIX",
              "WST",
              "XAF",
              "XAG",
              "XAU",
              "XCD",
              "XCH",
              "XDC",
              "XDR",
              "XEC",
              "XEM",
              "XLM",
              "XMR",
              "XOF",
              "XPF",
              "XRP",
              "XTZ",
              "YER",
              "ZAR",
              "ZEC",
              "ZIL",
              "ZMK",
              "ZMW",
              "ZWL",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Date": {
            "docs": "Model for date",
            "inline": undefined,
            "properties": {
              "day": {
                "docs": "Day of date",
                "type": "double",
              },
              "month": {
                "docs": "Month of date",
                "type": "double",
              },
              "year": {
                "docs": "Year of date",
                "type": "double",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DeviceData": {
            "docs": "Model for device data",
            "inline": undefined,
            "properties": {
              "appVersion": {
                "docs": "The version of the app your user is using on their device at a given timestamp for an event or transaction",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "batteryLevel": {
                "docs": "Battery level of the device used for a transaction or event at a given timestamp",
                "type": "optional<double>",
              },
              "deviceIdentifier": {
                "docs": "Device identifier number",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "deviceLatitude": {
                "docs": "Device latitude at a give timestamp for an event or transaction",
                "type": "optional<double>",
              },
              "deviceLongitude": {
                "docs": "Device longitude at a give timestamp for an event or transaction",
                "type": "optional<double>",
              },
              "deviceMaker": {
                "docs": "The maker of the device at a given timestamp for an event or transaction",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "deviceModel": {
                "docs": "The model of the device at a given timestamp for an event or transaction",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "deviceYear": {
                "docs": "The year the device was manufactured at a given timestamp for an event or transaction",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ipAddress": {
                "docs": "IP address of the device at a given timestamp for an event or transaction",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "operatingSystem": {
                "docs": "Operating system of the device at a given timestamp for an event or transaction",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "vpnUsed": {
                "docs": "Whether VPN was used at a given timestamp for an event or transaction",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ExecutedRulesResult": {
            "docs": "Model for list of executed rules",
            "inline": undefined,
            "properties": {
              "labels": {
                "type": "optional<list<RuleLabels>>",
              },
              "nature": {
                "type": "optional<RuleNature>",
              },
              "ruleAction": {
                "type": "RuleAction",
              },
              "ruleDescription": {
                "docs": "Description of the rule",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ruleHit": "boolean",
              "ruleHitMeta": {
                "type": "optional<RuleHitMeta>",
              },
              "ruleId": {
                "docs": "Unique rule identifier",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ruleInstanceId": "string",
              "ruleName": {
                "docs": "Name of the rule",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FailedRulesResult": {
            "docs": "Model for list of rules failed execution. It means rules could not be run",
            "inline": undefined,
            "properties": {
              "failureException": {
                "type": "RuleFailureException",
              },
              "ruleDescription": {
                "docs": "Description of the rule",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ruleId": {
                "docs": "Unique rule identifier",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ruleName": {
                "docs": "Name of the rule",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FalsePositiveDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "confidenceScore": "double",
              "isFalsePositive": "boolean",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "GeneralBankAccountPaymentMethod": {
            "docs": "Classify the method of payment as "GENERIC_BANK_ACCOUNT" for GenericBankAccountDetails",
            "type": "literal<"GENERIC_BANK_ACCOUNT">",
          },
          "GenericBankAccountDetails": {
            "docs": "Model for any generic bank account",
            "inline": undefined,
            "properties": {
              "accountNumber": {
                "docs": "Bank account number",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "accountType": {
                "docs": "Bank account type. E.g. Checking, Savings etc.",
                "type": "optional<string>",
              },
              "bankAddress": {
                "type": "optional<Address>",
              },
              "bankCode": {
                "docs": "Unique identifier of the bank. In some countries, this can be the same as the bank's SWIFT code",
                "type": "optional<string>",
              },
              "bankName": {
                "docs": "Name of the bank",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "name": {
                "docs": "Name of the account holder",
                "type": "optional<string>",
              },
              "paymentChannel": {
                "type": "optional<string>",
              },
              "specialInstructions": {
                "docs": "Special instructions to be specified if any",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "HitRulesDetails": {
            "docs": "Model for list of hit rules",
            "inline": undefined,
            "properties": {
              "labels": {
                "type": "optional<list<RuleLabels>>",
              },
              "nature": {
                "type": "optional<RuleNature>",
              },
              "ruleAction": {
                "type": "RuleAction",
              },
              "ruleDescription": {
                "docs": "Description of the rule",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ruleHitMeta": {
                "type": "optional<RuleHitMeta>",
              },
              "ruleId": {
                "docs": "Unique rule identifier",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ruleInstanceId": "string",
              "ruleName": {
                "docs": "Name of the rule",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "IBANDetails": {
            "docs": "Standardized model for Bank Details",
            "inline": undefined,
            "properties": {
              "BIC": {
                "docs": "Identifier for the bank. Can be routing number, BIK number, SWIFT code, BIC number etc.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "IBAN": {
                "docs": "Account number of the user. Can be account number, IBAN number etc.",
                "type": "optional<string>",
              },
              "bankAddress": {
                "type": "optional<Address>",
              },
              "bankBranchCode": {
                "docs": "Branch code of the bank. In some countries, this can be the same as the bank's SWIFT code",
                "type": "optional<string>",
              },
              "bankName": {
                "docs": "Name of the bank",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "country": {
                "type": "optional<CountryCode>",
              },
              "name": {
                "docs": "Name of the bank account holder",
                "type": "optional<string>",
              },
              "paymentChannel": {
                "type": "optional<string>",
              },
              "tags": {
                "type": "optional<Tag>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "IBANPaymentMethod": {
            "docs": "Classify the method of payment as "IBAN" for IBANDetails
",
            "type": "literal<"IBAN">",
          },
          "KYCStatus": {
            "enum": [
              "SUCCESSFUL",
              "FAILED",
              "NOT_STARTED",
              "IN_PROGRESS",
              "MANUAL_REVIEW",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "KYCStatusDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "reason": {
                "type": "optional<string>",
              },
              "status": {
                "type": "optional<KYCStatus>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LegalDocument": {
            "docs": "LegalDocument model generalizes User's identity document type (ex: Passport)",
            "inline": undefined,
            "properties": {
              "documentExpirationDate": {
                "docs": "User's identity document expiration date (UNIX timestamp in milliseconds)",
                "type": "optional<double>",
              },
              "documentIssuedCountry": {
                "type": "CountryCode",
              },
              "documentIssuedDate": {
                "docs": "User's identity document issuance date (UNIX timestamp in milliseconds)",
                "type": "optional<double>",
              },
              "documentNumber": {
                "docs": "User's unique identity document number such as passport number",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "documentType": {
                "docs": "User's identity document type such as passport, national ID etc.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "nameOnDocument": {
                "type": "optional<ConsumerName>",
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LegalEntity": {
            "docs": "Model for business user legal entity details",
            "inline": undefined,
            "properties": {
              "companyFinancialDetails": {
                "type": "optional<CompanyFinancialDetails>",
              },
              "companyGeneralDetails": {
                "type": "CompanyGeneralDetails",
              },
              "companyRegistrationDetails": {
                "type": "optional<CompanyRegistrationDetails>",
              },
              "contactDetails": {
                "type": "optional<ContactDetails>",
              },
              "reasonForAccountOpening": {
                "docs": "Reason for opening the account at financial institution",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListData": {
            "docs": "Payload of a list, new or existed",
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "List items",
                "type": "optional<list<ListItem>>",
              },
              "metadata": {
                "type": "optional<ListMetadata>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListExisted": {
            "docs": "List with ID and header",
            "inline": undefined,
            "properties": {
              "header": {
                "type": "ListHeader",
              },
              "items": {
                "docs": "List items",
                "type": "list<ListItem>",
              },
              "listId": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListHeader": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdTimestamp": "double",
              "listId": "string",
              "listType": "ListType",
              "metadata": {
                "type": "optional<ListMetadata>",
              },
              "size": "double",
              "subtype": "ListSubtype",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListItem": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "key": "string",
              "metadata": {
                "type": "optional<ListKeyMetadata>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListKeyMetadata": {
            "type": "map<string, unknown>",
          },
          "ListMetadata": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "checksum": {
                "type": "optional<string>",
              },
              "description": {
                "docs": "List description",
                "type": "optional<string>",
              },
              "name": {
                "docs": "List name",
                "type": "optional<string>",
              },
              "status": {
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListSubtype": {
            "enum": [
              "USER_ID",
              "CARD_FINGERPRINT_NUMBER",
              "IBAN_NUMBER",
              "BANK_ACCOUNT_NUMBER",
              "ACH_ACCOUNT_NUMBER",
              "SWIFT_ACCOUNT_NUMBER",
              "BIC",
              "BANK_SWIFT_CODE",
              "UPI_IDENTIFYING_NUMBER",
              "IP_ADDRESS",
              "STRING",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListType": {
            "enum": [
              "WHITELIST",
              "BLACKLIST",
              "FLAGRIGHT_LIBRARY",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MCCDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "Merchant code",
                "type": "double",
              },
              "description": {
                "docs": "Merchant Description",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MpesaDetails": {
            "docs": "Model for Mpesa payment method",
            "inline": undefined,
            "properties": {
              "businessShortCode": {
                "docs": "Business code",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "phoneNumber": {
                "docs": "Contact Number of the account holder",
                "type": "string",
              },
              "transactionType": {
                "docs": "Type of transaction",
                "type": "MpesaDetailsTransactionType",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MpesaDetailsTransactionType": {
            "docs": "Type of transaction",
            "enum": [
              "CustomerPayBillOnline",
              "CustomerBuyGoodsOnline",
              "SalaryPayment",
              "BusinessPayment",
              "PromotionPayment",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MpesaPaymentMethod": {
            "docs": "Classify the method of payment as "Mpesa" for MpesaDetails",
            "type": "literal<"MPESA">",
          },
          "PEPStatus": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isPepHit": "boolean",
              "pepCountry": {
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 2,
                  "minLength": 2,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentMethod": {
            "enum": [
              "ACH",
              "CARD",
              "IBAN",
              "UPI",
              "GENERIC_BANK_ACCOUNT",
              "MPESA",
              "SWIFT",
              "WALLET",
              "CHECK",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Person": {
            "docs": "Model for a generic individual - different from User model by not having userId field",
            "inline": undefined,
            "properties": {
              "contactDetails": {
                "type": "optional<ContactDetails>",
              },
              "generalDetails": {
                "type": "UserDetails",
              },
              "legalDocuments": {
                "docs": "User's legal identity documents - See Document Model for details",
                "type": "optional<list<LegalDocument>>",
              },
              "pepStatus": {
                "type": "optional<list<PEPStatus>>",
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PostBusinessUserResponse": {
            "docs": undefined,
            "extends": [
              "RulesResults",
            ],
            "inline": undefined,
            "properties": {
              "message": "optional<string>",
              "userId": {
                "docs": "user ID the risk score pertains to",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PostConsumerTransactionResponse": {
            "docs": undefined,
            "extends": [
              "TransactionMonitoringResult",
            ],
            "inline": undefined,
            "properties": {
              "message": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PostConsumerUserResponse": {
            "docs": undefined,
            "extends": [
              "RulesResults",
            ],
            "inline": undefined,
            "properties": {
              "message": "optional<string>",
              "userId": {
                "docs": "user ID the risk score pertains to",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskLevel": {
            "enum": [
              "VERY_HIGH",
              "HIGH",
              "MEDIUM",
              "LOW",
              "VERY_LOW",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskScoringResult": {
            "docs": "Model for results from Risk Scoring",
            "inline": undefined,
            "properties": {
              "customerRiskAssessment": {
                "docs": "Quantified dynamic risk score",
                "type": "optional<double>",
              },
              "kycRiskScore": {
                "docs": "Quantified KYC risk score",
                "type": "double",
              },
              "transactionRiskScore": {
                "docs": "Quantified action risk score",
                "type": "double",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RuleAction": {
            "docs": "Model for rule action if a rule is hit. This is returned in the API response and can be configured on Console by operational accounts like a Compliance Analyst",
            "enum": [
              "ALLOW",
              "FLAG",
              "BLOCK",
              "SUSPEND",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RuleFailureException": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "exceptionDescription": {
                "docs": "Name of the rule",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "exceptionName": {
                "docs": "Unique rule identifier",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RuleHitDirection": {
            "enum": [
              "ORIGIN",
              "DESTINATION",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RuleHitMeta": {
            "docs": "Details of rule execution, for internal purposes only",
            "inline": undefined,
            "properties": {
              "falsePositiveDetails": "optional<FalsePositiveDetails>",
              "hitDirections": "optional<list<RuleHitDirection>>",
              "sanctionsDetails": "optional<list<SanctionsDetails>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RuleLabels": {
            "enum": [
              "UNEXPECTED_BEHAVIOR",
              "ILLICIT_GAINS_CHECK",
              "RFI_TRIGGER",
              "EDD_TRIGGER",
              "KYC_TRIGGER",
              "SCAM",
              "ABUSE",
              "ACCOUNT_TAKEOVER",
              "DISPUTE",
              "SANCTIONS",
              "SANCTIONS_PEP",
              "SANCTIONS_PEP_ADVERSE_MEDIA",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RuleNature": {
            "enum": [
              "AML",
              "FRAUD",
              "CTF",
              "SCREENING",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RulesResults": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "executedRules": {
                "docs": "Unique transaction identifier",
                "type": "list<ExecutedRulesResult>",
              },
              "hitRules": {
                "docs": "Unique transaction identifier",
                "type": "list<HitRulesDetails>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SWIFTDetails": {
            "docs": "Model for SWIFT payment method",
            "inline": undefined,
            "properties": {
              "accountNumber": {
                "docs": "Account number",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "accountType": {
                "docs": "Account type. E.g. Checking, Savings etc.",
                "type": "optional<string>",
              },
              "bankAddress": {
                "type": "optional<Address>",
              },
              "bankName": {
                "docs": "Name of the bank",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "name": {
                "docs": "Name of the account holder",
                "type": "optional<string>",
              },
              "specialInstructions": {
                "docs": "Special instructions if any",
                "type": "optional<string>",
              },
              "swiftCode": {
                "docs": "SWIFT code of the financial institution",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SWIFTPaymentMethod": {
            "docs": "Classify the method of payment as "SWIFT" for SWIFTDetails",
            "type": "literal<"SWIFT">",
          },
          "SanctionsDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "entityType": {
                "type": "optional<SanctionsDetailsEntityType>",
              },
              "name": "string",
              "searchId": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SanctionsDetailsEntityType": {
            "enum": [
              "CONSUMER_NAME",
              "LEGAL_NAME",
              "SHAREHOLDER",
              "DIRECTOR",
              "NAME_ON_CARD",
              "PAYMENT_NAME",
              "PAYMENT_BENEFICIARY_NAME",
              "BANK_NAME",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Tag": {
            "docs": "Generic key-value pair model to append a custom variable being sent to Flagright API",
            "inline": undefined,
            "properties": {
              "key": {
                "docs": "Key value when you are creating a custom variable",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "value": {
                "docs": "Value for a given key when you are creating a custom variable",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Thing": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "publishedAt": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Transaction": {
            "docs": undefined,
            "extends": [
              "TransactionBase",
              "TransactionUpdatable",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionAmountDetails": {
            "docs": "Model for transaction amount details",
            "inline": undefined,
            "properties": {
              "country": {
                "type": "optional<CountryCode>",
              },
              "transactionAmount": {
                "docs": "Amount of the transaction",
                "type": "double",
              },
              "transactionCurrency": {
                "type": "CurrencyCode",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionAmountLimit": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "day": {
                "type": "optional<Amount>",
              },
              "month": {
                "type": "optional<Amount>",
              },
              "week": {
                "type": "optional<Amount>",
              },
              "year": {
                "type": "optional<Amount>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionBase": {
            "docs": "Model for transaction base Payload",
            "inline": undefined,
            "properties": {
              "destinationUserId": {
                "docs": "UserId for transaction's destination. In other words, where the value is being transferred to.",
                "type": "optional<string>",
              },
              "originUserId": {
                "docs": "UserId for where the transaction originates from",
                "type": "optional<string>",
              },
              "timestamp": {
                "docs": "Timestamp of when transaction took place",
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 4133890801000,
                  "min": 1262300400000,
                  "multipleOf": undefined,
                },
              },
              "transactionId": {
                "docs": "Unique transaction identifier",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "type": {
                "type": "optional<TransactionType>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionCountLimit": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "day": {
                "type": "optional<double>",
              },
              "month": {
                "type": "optional<double>",
              },
              "week": {
                "type": "optional<double>",
              },
              "year": {
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionEventMonitoringResult": {
            "docs": undefined,
            "extends": [
              "RulesResults",
            ],
            "inline": undefined,
            "properties": {
              "eventId": "string",
              "transaction": "Transaction",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionLimit": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "averageTransactionAmountLimit": {
                "type": "optional<TransactionAmountLimit>",
              },
              "transactionAmountLimit": {
                "type": "optional<TransactionAmountLimit>",
              },
              "transactionCountLimit": {
                "type": "optional<TransactionCountLimit>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionLimits": {
            "docs": "Model for transaction limits for a given user",
            "inline": undefined,
            "properties": {
              "maximumDailyTransactionLimit": {
                "type": "optional<Amount>",
              },
              "maximumMonthlyTransactionLimit": {
                "type": "optional<Amount>",
              },
              "maximumQuarterlyTransactionLimit": {
                "type": "optional<Amount>",
              },
              "maximumTransactionLimit": {
                "type": "optional<Amount>",
              },
              "maximumWeeklyTransactionLimit": {
                "type": "optional<Amount>",
              },
              "maximumYearlyTransactionLimit": {
                "type": "optional<Amount>",
              },
              "paymentMethodLimits": {
                "type": "optional<TransactionLimitsPaymentMethodLimits>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionLimitsPaymentMethodLimits": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "ACH": "optional<TransactionLimit>",
              "CARD": "optional<TransactionLimit>",
              "CHECK": "optional<TransactionLimit>",
              "GENERIC_BANK_ACCOUNT": "optional<TransactionLimit>",
              "IBAN": "optional<TransactionLimit>",
              "MPESA": "optional<TransactionLimit>",
              "SWIFT": "optional<TransactionLimit>",
              "UPI": "optional<TransactionLimit>",
              "WALLET": "optional<TransactionLimit>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionMonitoringResult": {
            "docs": undefined,
            "extends": [
              "RulesResults",
            ],
            "inline": undefined,
            "properties": {
              "transactionId": {
                "docs": "Transaction ID that the results pertain to",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionState": {
            "docs": "Model for transaction states. E.g. Processing, Refunded, Successful etc.",
            "enum": [
              "CREATED",
              "PROCESSING",
              "SENT",
              "EXPIRED",
              "DECLINED",
              "SUSPENDED",
              "REFUNDED",
              "SUCCESSFUL",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionType": {
            "enum": [
              "DEPOSIT",
              "TRANSFER",
              "EXTERNAL_PAYMENT",
              "WITHDRAWAL",
              "REFUND",
              "OTHER",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionUpdatable": {
            "docs": "Model for transaction additional payload",
            "inline": undefined,
            "properties": {
              "destinationAmountDetails": {
                "type": "optional<TransactionAmountDetails>",
              },
              "destinationPaymentDetails": {
                "docs": "Payment details of the destination. It can be a bank account number, wallet ID, card fingerprint etc.",
                "type": "optional<TransactionUpdatableDestinationPaymentDetails>",
              },
              "deviceData": {
                "type": "optional<DeviceData>",
              },
              "originAmountDetails": {
                "type": "optional<TransactionAmountDetails>",
              },
              "originPaymentDetails": {
                "docs": "Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.",
                "type": "optional<TransactionUpdatableOriginPaymentDetails>",
              },
              "productType": {
                "docs": "Type of produce being used by the consumer (ex wallets, payments etc)",
                "type": "optional<string>",
              },
              "promotionCodeUsed": {
                "docs": "Whether a promotion code was used or not the transaction",
                "type": "optional<boolean>",
              },
              "reference": {
                "docs": "Reference field for the transaction indicating the purpose of the transaction etc.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "relatedTransactionIds": {
                "docs": "IDs of transactions related to this transaction. Ex: refund, split bills",
                "type": "optional<list<string>>",
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
              "transactionState": {
                "type": "optional<TransactionState>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionUpdatableDestinationPaymentDetails": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "method",
            "docs": "Payment details of the destination. It can be a bank account number, wallet ID, card fingerprint etc.",
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "ACH": {
                "type": "ACHDetails",
              },
              "CARD": {
                "type": "CardDetails",
              },
              "CHECK": {
                "type": "CheckDetails",
              },
              "GENERIC_BANK_ACCOUNT": {
                "type": "GenericBankAccountDetails",
              },
              "IBAN": {
                "type": "IBANDetails",
              },
              "MPESA": {
                "type": "MpesaDetails",
              },
              "SWIFT": {
                "type": "SWIFTDetails",
              },
              "UPI": {
                "type": "UPIDetails",
              },
              "WALLET": {
                "type": "WalletDetails",
              },
            },
          },
          "TransactionUpdatableOriginPaymentDetails": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "method",
            "docs": "Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.",
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "ACH": {
                "type": "ACHDetails",
              },
              "CARD": {
                "type": "CardDetails",
              },
              "CHECK": {
                "type": "CheckDetails",
              },
              "GENERIC_BANK_ACCOUNT": {
                "type": "GenericBankAccountDetails",
              },
              "IBAN": {
                "type": "IBANDetails",
              },
              "MPESA": {
                "type": "MpesaDetails",
              },
              "SWIFT": {
                "type": "SWIFTDetails",
              },
              "UPI": {
                "type": "UPIDetails",
              },
              "WALLET": {
                "type": "WalletDetails",
              },
            },
          },
          "TransactionWithRulesResult": {
            "docs": "Model for transaction payload with rules result",
            "extends": [
              "Transaction",
            ],
            "inline": undefined,
            "properties": {
              "executedRules": "list<ExecutedRulesResult>",
              "hitRules": "list<HitRulesDetails>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UPIDetails": {
            "docs": "Model for UPI payment method",
            "inline": undefined,
            "properties": {
              "bankProvider": {
                "docs": "Bank provider name",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "interfaceProvider": {
                "docs": "Interface provider name",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "name": {
                "docs": "Name of the account holder",
                "type": "optional<string>",
              },
              "upiID": {
                "docs": "UPI Id number",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UPIPaymentMethod": {
            "docs": "Classify the method of payment as "UPI" for UPIDetails",
            "type": "literal<"UPI">",
          },
          "User": {
            "docs": "Model for User details",
            "extends": [
              "UserBase",
              "UserOptional",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserBase": {
            "docs": "Model for User details",
            "inline": undefined,
            "properties": {
              "createdTimestamp": {
                "docs": "Timestamp when userId is created",
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 4133890801000,
                  "min": 1262300400000,
                  "multipleOf": undefined,
                },
              },
              "userDetails": {
                "type": "optional<UserDetails>",
              },
              "userId": {
                "docs": "Unique user ID",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserDetails": {
            "docs": "Model for consumer user personal details",
            "inline": undefined,
            "properties": {
              "countryOfNationality": {
                "type": "optional<CountryCode>",
              },
              "countryOfResidence": {
                "type": "optional<CountryCode>",
              },
              "dateOfBirth": {
                "docs": "Date of birth of the user (YYYY-MM-DD)",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^(\d{4}-\d{2}-\d{2})*$",
                },
              },
              "gender": {
                "docs": "Gender of the individual - Male, Female or Non-Binary",
                "type": "optional<UserDetailsGender>",
              },
              "name": {
                "type": "ConsumerName",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserDetailsGender": {
            "docs": "Gender of the individual - Male, Female or Non-Binary",
            "enum": [
              "M",
              "F",
              "NB",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserMonitoringResult": {
            "docs": undefined,
            "extends": [
              "RulesResults",
            ],
            "inline": undefined,
            "properties": {
              "userId": {
                "docs": "User ID that the results pertain to",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserOptional": {
            "docs": "Model for User details",
            "inline": undefined,
            "properties": {
              "acquisitionChannel": {
                "type": "optional<AcquisitionChannel>",
              },
              "contactDetails": {
                "type": "optional<ContactDetails>",
              },
              "kycStatusDetails": {
                "type": "optional<KYCStatusDetails>",
              },
              "legalDocuments": {
                "docs": "User's legal identity documents - See Document Model for details",
                "type": "optional<list<LegalDocument>>",
              },
              "pepStatus": {
                "type": "optional<list<PEPStatus>>",
              },
              "reasonForAccountOpening": {
                "type": "optional<list<string>>",
              },
              "riskLevel": {
                "type": "optional<RiskLevel>",
              },
              "tags": {
                "docs": "Additional information that can be added via tags",
                "type": "optional<list<Tag>>",
              },
              "transactionLimits": {
                "type": "optional<TransactionLimits>",
              },
              "userSegment": {
                "type": "optional<UserOptionalUserSegment>",
              },
              "userStateDetails": {
                "type": "optional<UserStateDetails>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserOptionalUserSegment": {
            "enum": [
              "RETAIL",
              "PROFESSIONAL",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserRegistrationStatus": {
            "enum": [
              "REGISTERED",
              "UNREGISTERED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserState": {
            "enum": [
              "UNACCEPTABLE",
              "UNDECIDED",
              "TERMINATED",
              "ACTIVE",
              "INACTIVE",
              "DORMANT",
              "CREATED",
              "DELETED",
              "SUSPENDED",
              "BLOCKED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserStateDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "reason": {
                "type": "optional<string>",
              },
              "state": {
                "type": "UserState",
              },
              "userId": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserWithRulesResult": {
            "docs": "Model for consumer user payload with rules result",
            "extends": [
              "User",
            ],
            "inline": undefined,
            "properties": {
              "executedRules": "optional<list<ExecutedRulesResult>>",
              "hitRules": "optional<list<HitRulesDetails>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WalletDetails": {
            "docs": "Standardized model for a Generic wallet transaction",
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "Name of the account holder for a specific wallet",
                "type": "optional<string>",
              },
              "paymentChannel": {
                "docs": "Payment Channel used through wallet",
                "type": "optional<string>",
              },
              "tags": {
                "type": "optional<Tag>",
              },
              "walletId": {
                "docs": "Unique ID of the wallet",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "walletPhoneNumber": {
                "docs": "Phone number associated with the wallet, if any",
                "type": "optional<string>",
              },
              "walletType": {
                "docs": "Wallet type if there are various types of wallets belonging to the same user. E.g. Checking, savings, vault, different currency wallets etc.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WalletPaymentMethod": {
            "docs": "Classify the method of payment as "Wallet" for WalletDetails",
            "type": "literal<"WALLET">",
          },
          "WebhookEvent": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdTimestamp": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 1262300400000,
                  "multipleOf": undefined,
                },
              },
              "data": {
                "type": "UserStateDetails",
              },
              "id": "string",
              "type": {
                "type": "WebhookEventType",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhookEventType": {
            "enum": [
              "CASE_CLOSED",
              "USER_STATE_UPDATED",
              "ALERT_CLOSED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "types:
  PostConsumerTransactionResponse:
    properties:
      message: optional<string>
    extends:
      - TransactionMonitoringResult
    source:
      openapi: ../openapi.yml
  PostConsumerUserResponse:
    properties:
      message: optional<string>
      userId:
        type: string
        docs: user ID the risk score pertains to
        validation:
          minLength: 1
    extends:
      - RulesResults
    source:
      openapi: ../openapi.yml
  PostBusinessUserResponse:
    properties:
      message: optional<string>
      userId:
        type: string
        docs: user ID the risk score pertains to
        validation:
          minLength: 1
    extends:
      - RulesResults
    source:
      openapi: ../openapi.yml
  Address:
    docs: Model for standardized address
    properties:
      addressLines:
        docs: Address lines of the user's residence address
        type: list<unknown>
      postcode:
        type: string
        docs: Post code of the user's residence address
        validation:
          minLength: 1
      city:
        type: string
        docs: City of the user's residence address
        validation:
          minLength: 1
      state:
        type: optional<string>
        docs: State of the user's residence address
        validation:
          minLength: 1
      country:
        type: string
        docs: User's country of residence
        validation:
          minLength: 1
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
    source:
      openapi: ../openapi.yml
  UserBase:
    docs: Model for User details
    properties:
      userId:
        type: string
        docs: Unique user ID
        validation:
          minLength: 1
      userDetails:
        type: optional<UserDetails>
      createdTimestamp:
        type: double
        docs: Timestamp when userId is created
        validation:
          min: 1262300400000
          max: 4133890801000
    source:
      openapi: ../openapi.yml
  UserOptionalUserSegment:
    enum:
      - RETAIL
      - PROFESSIONAL
    inline: true
    source:
      openapi: ../openapi.yml
  UserOptional:
    docs: Model for User details
    properties:
      userStateDetails:
        type: optional<UserStateDetails>
      kycStatusDetails:
        type: optional<KYCStatusDetails>
      legalDocuments:
        type: optional<list<LegalDocument>>
        docs: User's legal identity documents - See Document Model for details
      contactDetails:
        type: optional<ContactDetails>
      transactionLimits:
        type: optional<TransactionLimits>
      riskLevel:
        type: optional<RiskLevel>
      acquisitionChannel:
        type: optional<AcquisitionChannel>
      reasonForAccountOpening:
        type: optional<list<string>>
      userSegment:
        type: optional<UserOptionalUserSegment>
      pepStatus:
        type: optional<list<PEPStatus>>
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
    source:
      openapi: ../openapi.yml
  User:
    docs: Model for User details
    properties: {}
    extends:
      - UserBase
      - UserOptional
    source:
      openapi: ../openapi.yml
  Person:
    docs: >-
      Model for a generic individual - different from User model by not having
      userId field
    properties:
      generalDetails:
        type: UserDetails
      legalDocuments:
        type: optional<list<LegalDocument>>
        docs: User's legal identity documents - See Document Model for details
      contactDetails:
        type: optional<ContactDetails>
      pepStatus:
        type: optional<list<PEPStatus>>
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
    source:
      openapi: ../openapi.yml
  LegalDocument:
    docs: >-
      LegalDocument model generalizes User's identity document type (ex:
      Passport)
    properties:
      documentType:
        type: string
        docs: User's identity document type such as passport, national ID etc.
        validation:
          minLength: 1
      documentNumber:
        type: string
        docs: User's unique identity document number such as passport number
        validation:
          minLength: 1
      documentIssuedDate:
        type: optional<double>
        docs: >-
          User's identity document issuance date (UNIX timestamp in
          milliseconds)
      documentExpirationDate:
        type: optional<double>
        docs: >-
          User's identity document expiration date (UNIX timestamp in
          milliseconds)
      documentIssuedCountry:
        type: CountryCode
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
      nameOnDocument:
        type: optional<ConsumerName>
    source:
      openapi: ../openapi.yml
  Tag:
    docs: >-
      Generic key-value pair model to append a custom variable being sent to
      Flagright API
    properties:
      key:
        type: string
        docs: Key value when you are creating a custom variable
        validation:
          minLength: 1
      value:
        type: string
        docs: Value for a given key when you are creating a custom variable
        validation:
          minLength: 1
    source:
      openapi: ../openapi.yml
  Transaction:
    properties: {}
    extends:
      - TransactionBase
      - TransactionUpdatable
    source:
      openapi: ../openapi.yml
  TransactionUpdatableOriginPaymentDetails:
    discriminant: method
    base-properties: {}
    docs: >-
      Payment details of the origin. It can be a bank account number, wallet ID,
      card fingerprint etc.
    union:
      CARD:
        type: CardDetails
      GENERIC_BANK_ACCOUNT:
        type: GenericBankAccountDetails
      IBAN:
        type: IBANDetails
      ACH:
        type: ACHDetails
      SWIFT:
        type: SWIFTDetails
      MPESA:
        type: MpesaDetails
      UPI:
        type: UPIDetails
      WALLET:
        type: WalletDetails
      CHECK:
        type: CheckDetails
    source:
      openapi: ../openapi.yml
  TransactionUpdatableDestinationPaymentDetails:
    discriminant: method
    base-properties: {}
    docs: >-
      Payment details of the destination. It can be a bank account number,
      wallet ID, card fingerprint etc.
    union:
      CARD:
        type: CardDetails
      GENERIC_BANK_ACCOUNT:
        type: GenericBankAccountDetails
      IBAN:
        type: IBANDetails
      ACH:
        type: ACHDetails
      UPI:
        type: UPIDetails
      WALLET:
        type: WalletDetails
      SWIFT:
        type: SWIFTDetails
      MPESA:
        type: MpesaDetails
      CHECK:
        type: CheckDetails
    source:
      openapi: ../openapi.yml
  TransactionUpdatable:
    docs: Model for transaction additional payload
    properties:
      transactionState:
        type: optional<TransactionState>
      originAmountDetails:
        type: optional<TransactionAmountDetails>
      destinationAmountDetails:
        type: optional<TransactionAmountDetails>
      originPaymentDetails:
        type: optional<TransactionUpdatableOriginPaymentDetails>
        docs: >-
          Payment details of the origin. It can be a bank account number, wallet
          ID, card fingerprint etc.
      destinationPaymentDetails:
        type: optional<TransactionUpdatableDestinationPaymentDetails>
        docs: >-
          Payment details of the destination. It can be a bank account number,
          wallet ID, card fingerprint etc.
      relatedTransactionIds:
        type: optional<list<string>>
        docs: >-
          IDs of transactions related to this transaction. Ex: refund, split
          bills
      productType:
        type: optional<string>
        docs: Type of produce being used by the consumer (ex wallets, payments etc)
      promotionCodeUsed:
        type: optional<boolean>
        docs: Whether a promotion code was used or not the transaction
      reference:
        type: optional<string>
        docs: >-
          Reference field for the transaction indicating the purpose of the
          transaction etc.
        validation:
          minLength: 1
      deviceData:
        type: optional<DeviceData>
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
    source:
      openapi: ../openapi.yml
  TransactionBase:
    docs: Model for transaction base Payload
    properties:
      type:
        type: optional<TransactionType>
      transactionId:
        type: string
        docs: Unique transaction identifier
        validation:
          minLength: 1
      timestamp:
        type: double
        docs: Timestamp of when transaction took place
        validation:
          min: 1262300400000
          max: 4133890801000
      originUserId:
        type: optional<string>
        docs: UserId for where the transaction originates from
      destinationUserId:
        type: optional<string>
        docs: >-
          UserId for transaction's destination. In other words, where the value
          is being transferred to.
    source:
      openapi: ../openapi.yml
  TransactionWithRulesResult:
    docs: Model for transaction payload with rules result
    properties:
      executedRules: list<ExecutedRulesResult>
      hitRules: list<HitRulesDetails>
    extends:
      - Transaction
    source:
      openapi: ../openapi.yml
  DeviceData:
    docs: Model for device data
    properties:
      batteryLevel:
        type: optional<double>
        docs: >-
          Battery level of the device used for a transaction or event at a given
          timestamp
      deviceLatitude:
        type: optional<double>
        docs: Device latitude at a give timestamp for an event or transaction
      deviceLongitude:
        type: optional<double>
        docs: Device longitude at a give timestamp for an event or transaction
      ipAddress:
        type: optional<string>
        docs: >-
          IP address of the device at a given timestamp for an event or
          transaction
        validation:
          minLength: 1
      deviceIdentifier:
        type: optional<string>
        docs: Device identifier number
        validation:
          minLength: 1
      vpnUsed:
        type: optional<boolean>
        docs: Whether VPN was used at a given timestamp for an event or transaction
      operatingSystem:
        type: optional<string>
        docs: >-
          Operating system of the device at a given timestamp for an event or
          transaction
        validation:
          minLength: 1
      deviceMaker:
        type: optional<string>
        docs: >-
          The maker of the device at a given timestamp for an event or
          transaction
        validation:
          minLength: 1
      deviceModel:
        type: optional<string>
        docs: >-
          The model of the device at a given timestamp for an event or
          transaction
        validation:
          minLength: 1
      deviceYear:
        type: optional<string>
        docs: >-
          The year the device was manufactured at a given timestamp for an event
          or transaction
        validation:
          minLength: 1
      appVersion:
        type: optional<string>
        docs: >-
          The version of the app your user is using on their device at a given
          timestamp for an event or transaction
        validation:
          minLength: 1
    source:
      openapi: ../openapi.yml
  TransactionMonitoringResult:
    properties:
      transactionId:
        type: string
        docs: Transaction ID that the results pertain to
    extends:
      - RulesResults
    source:
      openapi: ../openapi.yml
  TransactionEventMonitoringResult:
    properties:
      eventId: string
      transaction: Transaction
    extends:
      - RulesResults
    source:
      openapi: ../openapi.yml
  UserMonitoringResult:
    properties:
      userId:
        type: string
        docs: User ID that the results pertain to
    extends:
      - RulesResults
    source:
      openapi: ../openapi.yml
  RulesResults:
    properties:
      executedRules:
        docs: Unique transaction identifier
        type: list<ExecutedRulesResult>
      hitRules:
        docs: Unique transaction identifier
        type: list<HitRulesDetails>
    source:
      openapi: ../openapi.yml
  ExecutedRulesResult:
    docs: Model for list of executed rules
    properties:
      ruleId:
        type: string
        docs: Unique rule identifier
        validation:
          minLength: 1
      ruleInstanceId: string
      ruleName:
        type: string
        docs: Name of the rule
        validation:
          minLength: 1
      ruleDescription:
        type: string
        docs: Description of the rule
        validation:
          minLength: 1
      ruleAction:
        type: RuleAction
      ruleHit: boolean
      ruleHitMeta:
        type: optional<RuleHitMeta>
      labels:
        type: optional<list<RuleLabels>>
      nature:
        type: optional<RuleNature>
    source:
      openapi: ../openapi.yml
  HitRulesDetails:
    docs: Model for list of hit rules
    properties:
      ruleId:
        type: string
        docs: Unique rule identifier
        validation:
          minLength: 1
      ruleInstanceId: string
      ruleName:
        type: string
        docs: Name of the rule
        validation:
          minLength: 1
      ruleDescription:
        type: string
        docs: Description of the rule
        validation:
          minLength: 1
      ruleAction:
        type: RuleAction
      ruleHitMeta:
        type: optional<RuleHitMeta>
      labels:
        type: optional<list<RuleLabels>>
      nature:
        type: optional<RuleNature>
    source:
      openapi: ../openapi.yml
  FailedRulesResult:
    docs: Model for list of rules failed execution. It means rules could not be run
    properties:
      ruleId:
        type: string
        docs: Unique rule identifier
        validation:
          minLength: 1
      ruleName:
        type: string
        docs: Name of the rule
        validation:
          minLength: 1
      ruleDescription:
        type: string
        docs: Description of the rule
        validation:
          minLength: 1
      failureException:
        type: RuleFailureException
    source:
      openapi: ../openapi.yml
  RuleFailureException:
    properties:
      exceptionName:
        type: string
        docs: Unique rule identifier
        validation:
          minLength: 1
      exceptionDescription:
        type: string
        docs: Name of the rule
        validation:
          minLength: 1
    source:
      openapi: ../openapi.yml
  RiskScoringResult:
    docs: Model for results from Risk Scoring
    properties:
      kycRiskScore:
        type: double
        docs: Quantified KYC risk score
      transactionRiskScore:
        type: double
        docs: Quantified action risk score
      customerRiskAssessment:
        type: optional<double>
        docs: Quantified dynamic risk score
    source:
      openapi: ../openapi.yml
  ConsumerName:
    docs: Model for a generic consumer name
    properties:
      firstName:
        type: string
        docs: First name of the user
        validation:
          minLength: 1
      middleName:
        type: optional<string>
        docs: Middle name of the user
        validation:
          minLength: 1
      lastName:
        type: optional<string>
        docs: Last name of the user
        validation:
          minLength: 1
    source:
      openapi: ../openapi.yml
  TransactionAmountDetails:
    docs: Model for transaction amount details
    properties:
      transactionAmount:
        type: double
        docs: Amount of the transaction
      transactionCurrency:
        type: CurrencyCode
      country:
        type: optional<CountryCode>
    source:
      openapi: ../openapi.yml
  Amount:
    docs: Model for amount
    properties:
      amountValue:
        type: double
        docs: Numerical value of the transaction
      amountCurrency:
        type: CurrencyCode
    source:
      openapi: ../openapi.yml
  LegalEntity:
    docs: Model for business user legal entity details
    properties:
      companyGeneralDetails:
        type: CompanyGeneralDetails
      companyFinancialDetails:
        type: optional<CompanyFinancialDetails>
      companyRegistrationDetails:
        type: optional<CompanyRegistrationDetails>
      reasonForAccountOpening:
        type: optional<list<string>>
        docs: Reason for opening the account at financial institution
      contactDetails:
        type: optional<ContactDetails>
    source:
      openapi: ../openapi.yml
  ContactDetails:
    docs: Model for business user contact information details
    properties:
      emailIds:
        type: optional<list<string>>
        docs: Email addresses of the contacts for a given business customer
      contactNumbers:
        type: optional<list<string>>
        docs: Phone numbers to contact a given business customer
      faxNumbers:
        type: optional<list<string>>
        docs: Fax numbers to contact a business customer
      websites:
        type: optional<list<string>>
        docs: Website of the company
      addresses:
        type: optional<list<Address>>
        docs: Address(es) of the company
    source:
      openapi: ../openapi.yml
  CompanyFinancialDetails:
    docs: Model for business user company financial details
    properties:
      expectedTransactionAmountPerMonth:
        type: optional<Amount>
      expectedTurnoverPerMonth:
        type: optional<Amount>
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
    source:
      openapi: ../openapi.yml
  UserDetailsGender:
    enum:
      - M
      - F
      - NB
    docs: Gender of the individual - Male, Female or Non-Binary
    inline: true
    source:
      openapi: ../openapi.yml
  UserDetails:
    docs: Model for consumer user personal details
    properties:
      name:
        type: ConsumerName
      dateOfBirth:
        type: optional<string>
        docs: Date of birth of the user (YYYY-MM-DD)
        validation:
          pattern: ^(\d{4}-\d{2}-\d{2})*$
      countryOfResidence:
        type: optional<CountryCode>
      countryOfNationality:
        type: optional<CountryCode>
      gender:
        type: optional<UserDetailsGender>
        docs: Gender of the individual - Male, Female or Non-Binary
    source:
      openapi: ../openapi.yml
  UserRegistrationStatus:
    enum:
      - REGISTERED
      - UNREGISTERED
    source:
      openapi: ../openapi.yml
  CompanyGeneralDetailsUserSegment:
    enum:
      - SOLE_PROPRIETORSHIP
      - SMB
      - SMALL
      - MEDIUM
      - LARGE
      - UNKNOWN
    docs: Segmentation of the business user
    inline: true
    source:
      openapi: ../openapi.yml
  CompanyGeneralDetails:
    docs: Model for business user company general details
    properties:
      legalName:
        type: string
        docs: Legal name of the company
        validation:
          minLength: 1
      businessIndustry:
        type: optional<list<string>>
        docs: The industry the business operates in for a business customer
      mainProductsServicesSold:
        type: optional<list<string>>
        docs: The key products and services provided by the company
      userSegment:
        type: optional<CompanyGeneralDetailsUserSegment>
        docs: Segmentation of the business user
      userRegistrationStatus:
        type: optional<UserRegistrationStatus>
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
    source:
      openapi: ../openapi.yml
  CompanyRegistrationDetails:
    docs: Model for business user company registration details
    properties:
      registrationIdentifier:
        type: string
        docs: >-
          Commercial registry registration number for the company in its
          registration country
        validation:
          minLength: 1
      registrationCountry:
        type: CountryCode
      taxIdentifier:
        type: optional<string>
        docs: Tax ID number of the registered entity
      legalEntityType:
        type: optional<string>
        docs: 'Type of legal entity. Ex: Limited Liability'
      dateOfRegistration:
        type: optional<string>
        validation:
          pattern: ^(\d{4}-\d{2}-\d{2})*$
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
    source:
      openapi: ../openapi.yml
  Business:
    properties: {}
    extends:
      - BusinessBase
      - BusinessOptional
    source:
      openapi: ../openapi.yml
  BusinessBase:
    docs: Model for a business user base fields
    properties:
      userId:
        type: string
        docs: Unique user ID for the user
        validation:
          minLength: 1
      createdTimestamp:
        type: double
        docs: Timestamp when the user was created
        validation:
          min: 1262300400000
          max: 4133890801000
    source:
      openapi: ../openapi.yml
  BusinessOptionalSavedPaymentDetailsItem:
    discriminant: method
    base-properties: {}
    union:
      CARD:
        type: CardDetails
      GENERIC_BANK_ACCOUNT:
        type: GenericBankAccountDetails
      IBAN:
        type: IBANDetails
      ACH:
        type: ACHDetails
      SWIFT:
        type: SWIFTDetails
      MPESA:
        type: MpesaDetails
      UPI:
        type: UPIDetails
      WALLET:
        type: WalletDetails
      CHECK:
        type: CheckDetails
    source:
      openapi: ../openapi.yml
  BusinessOptional:
    docs: Model for a business user - optional fields
    properties:
      userStateDetails:
        type: optional<UserStateDetails>
      kycStatusDetails:
        type: optional<KYCStatusDetails>
      legalEntity:
        type: optional<LegalEntity>
      shareHolders:
        type: optional<list<Person>>
        docs: >-
          Shareholders (beneficiaries) of the company that hold at least 25%
          ownership. Can be another company or an individual
      directors:
        type: optional<list<Person>>
        docs: Director(s) of the company. Must be at least one
      transactionLimits:
        type: optional<TransactionLimits>
      riskLevel:
        type: optional<RiskLevel>
      allowedPaymentMethods:
        type: optional<list<PaymentMethod>>
      linkedEntities:
        type: optional<BusinessEntityLink>
      acquisitionChannel:
        type: optional<AcquisitionChannel>
      savedPaymentDetails:
        type: optional<list<BusinessOptionalSavedPaymentDetailsItem>>
      mccDetails:
        type: optional<MCCDetails>
      tags:
        type: optional<list<Tag>>
        docs: Additional information that can be added via tags
    source:
      openapi: ../openapi.yml
  BusinessUsersResponse:
    docs: Model for business user risk score response
    properties:
      userId:
        type: string
        docs: user ID the risk score pertains to
        validation:
          minLength: 1
    source:
      openapi: ../openapi.yml
  ConsumerUsersResponse:
    docs: Model for consumer user risk score response
    properties:
      userId:
        type: string
        docs: user ID the risk score pertains to
        validation:
          minLength: 1
    source:
      openapi: ../openapi.yml
  CardDetailsCardBrand:
    enum:
      - VISA
      - MASTERCARD
      - AMERICAN_EXPRESS
      - DISCOVER
      - UNIONPAY
      - RUPAY
      - JCB
    docs: Brand of Card
    inline: true
    source:
      openapi: ../openapi.yml
  CardDetailsCardFunding:
    enum:
      - CREDIT
      - DEBIT
      - PREPAID
    docs: Funding of Card
    inline: true
    source:
      openapi: ../openapi.yml
  CardDetailsCardType:
    enum:
      - VIRTUAL
      - PHYSICAL
    inline: true
    source:
      openapi: ../openapi.yml
  CardDetails:
    docs: Model for credit or debit card details
    properties:
      cardFingerprint:
        type: optional<string>
        docs: >-
          Unique card fingerprint that helps identify a specific card without
          having to use explicit card number. This is likely available at your
          card payment scheme provider
        validation:
          minLength: 1
      cardIssuedCountry:
        type: optional<CountryCode>
      transactionReferenceField:
        type: optional<string>
        docs: Reference for the transaction
        validation:
          minLength: 1
      3dsDone:
        type: optional<boolean>
        docs: Whether 3ds was successfully enforced for the transaction
        name: _3dsDone
      nameOnCard:
        type: optional<ConsumerName>
      cardExpiry:
        type: optional<CardExpiry>
      cardLast4Digits:
        type: optional<string>
        docs: Last 4 digits of Card
        validation:
          minLength: 4
          maxLength: 4
      cardBrand:
        type: optional<CardDetailsCardBrand>
        docs: Brand of Card
      cardFunding:
        type: optional<CardDetailsCardFunding>
        docs: Funding of Card
      cardAuthenticated:
        type: optional<boolean>
        docs: Authentication of Card
      paymentChannel:
        type: optional<string>
      cardType:
        type: optional<CardDetailsCardType>
      merchantDetails:
        type: optional<CardMerchantDetails>
    source:
      openapi: ../openapi.yml
  IBANDetails:
    docs: Standardized model for Bank Details
    properties:
      BIC:
        type: optional<string>
        docs: >-
          Identifier for the bank. Can be routing number, BIK number, SWIFT
          code, BIC number etc.
        validation:
          minLength: 1
      bankName:
        type: optional<string>
        docs: Name of the bank
        validation:
          minLength: 1
      bankAddress:
        type: optional<Address>
      country:
        type: optional<CountryCode>
      IBAN:
        type: optional<string>
        docs: Account number of the user. Can be account number, IBAN number etc.
      name:
        type: optional<string>
        docs: Name of the bank account holder
      tags:
        type: optional<Tag>
      bankBranchCode:
        type: optional<string>
        docs: >-
          Branch code of the bank. In some countries, this can be the same as
          the bank's SWIFT code
      paymentChannel:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  WalletDetails:
    docs: Standardized model for a Generic wallet transaction
    properties:
      walletType:
        type: string
        docs: >-
          Wallet type if there are various types of wallets belonging to the
          same user. E.g. Checking, savings, vault, different currency wallets
          etc.
      walletId:
        type: optional<string>
        docs: Unique ID of the wallet
        validation:
          minLength: 1
      paymentChannel:
        type: optional<string>
        docs: Payment Channel used through wallet
      name:
        type: optional<string>
        docs: Name of the account holder for a specific wallet
      tags:
        type: optional<Tag>
      walletPhoneNumber:
        type: optional<string>
        docs: Phone number associated with the wallet, if any
    source:
      openapi: ../openapi.yml
  ACHDetails:
    docs: Model for ACH payment method
    properties:
      routingNumber:
        type: optional<string>
        docs: Routing number of the bank
        validation:
          minLength: 1
      accountNumber:
        type: optional<string>
        docs: Bank account number of the individual
        validation:
          minLength: 1
      bankName:
        type: optional<string>
        docs: Name of the bank
        validation:
          minLength: 1
      name:
        type: optional<string>
        docs: Name of the account holder
      bankAddress:
        type: optional<Address>
      beneficiaryName:
        type: optional<string>
        docs: Beneficiary name of the account
    source:
      openapi: ../openapi.yml
  SWIFTDetails:
    docs: Model for SWIFT payment method
    properties:
      swiftCode:
        type: optional<string>
        docs: SWIFT code of the financial institution
        validation:
          minLength: 1
      accountNumber:
        type: optional<string>
        docs: Account number
        validation:
          minLength: 1
      accountType:
        type: optional<string>
        docs: Account type. E.g. Checking, Savings etc.
      bankName:
        type: optional<string>
        docs: Name of the bank
        validation:
          minLength: 1
      name:
        type: optional<string>
        docs: Name of the account holder
      bankAddress:
        type: optional<Address>
      specialInstructions:
        type: optional<string>
        docs: Special instructions if any
    source:
      openapi: ../openapi.yml
  MpesaDetailsTransactionType:
    enum:
      - CustomerPayBillOnline
      - CustomerBuyGoodsOnline
      - SalaryPayment
      - BusinessPayment
      - PromotionPayment
    docs: Type of transaction
    inline: true
    source:
      openapi: ../openapi.yml
  MpesaDetails:
    docs: Model for Mpesa payment method
    properties:
      businessShortCode:
        type: string
        docs: Business code
        validation:
          minLength: 1
      transactionType:
        type: MpesaDetailsTransactionType
        docs: Type of transaction
      phoneNumber:
        type: string
        docs: Contact Number of the account holder
    source:
      openapi: ../openapi.yml
  GenericBankAccountDetails:
    docs: Model for any generic bank account
    properties:
      accountNumber:
        type: optional<string>
        docs: Bank account number
        validation:
          minLength: 1
      accountType:
        type: optional<string>
        docs: Bank account type. E.g. Checking, Savings etc.
      bankName:
        type: optional<string>
        docs: Name of the bank
        validation:
          minLength: 1
      bankCode:
        type: optional<string>
        docs: >-
          Unique identifier of the bank. In some countries, this can be the same
          as the bank's SWIFT code
      name:
        type: optional<string>
        docs: Name of the account holder
      bankAddress:
        type: optional<Address>
      specialInstructions:
        type: optional<string>
        docs: Special instructions to be specified if any
      paymentChannel:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  UPIDetails:
    docs: Model for UPI payment method
    properties:
      upiID:
        type: string
        docs: UPI Id number
        validation:
          minLength: 1
      bankProvider:
        type: optional<string>
        docs: Bank provider name
        validation:
          minLength: 1
      interfaceProvider:
        type: optional<string>
        docs: Interface provider name
        validation:
          minLength: 1
      name:
        type: optional<string>
        docs: Name of the account holder
    source:
      openapi: ../openapi.yml
  TransactionLimitsPaymentMethodLimits:
    properties:
      ACH: optional<TransactionLimit>
      CARD: optional<TransactionLimit>
      IBAN: optional<TransactionLimit>
      UPI: optional<TransactionLimit>
      GENERIC_BANK_ACCOUNT: optional<TransactionLimit>
      MPESA: optional<TransactionLimit>
      SWIFT: optional<TransactionLimit>
      WALLET: optional<TransactionLimit>
      CHECK: optional<TransactionLimit>
    source:
      openapi: ../openapi.yml
    inline: true
  TransactionLimits:
    docs: Model for transaction limits for a given user
    properties:
      maximumDailyTransactionLimit:
        type: optional<Amount>
      maximumWeeklyTransactionLimit:
        type: optional<Amount>
      maximumMonthlyTransactionLimit:
        type: optional<Amount>
      maximumQuarterlyTransactionLimit:
        type: optional<Amount>
      maximumTransactionLimit:
        type: optional<Amount>
      maximumYearlyTransactionLimit:
        type: optional<Amount>
      paymentMethodLimits:
        type: optional<TransactionLimitsPaymentMethodLimits>
    source:
      openapi: ../openapi.yml
  RuleAction:
    enum:
      - ALLOW
      - FLAG
      - BLOCK
      - SUSPEND
    docs: >-
      Model for rule action if a rule is hit. This is returned in the API
      response and can be configured on Console by operational accounts like a
      Compliance Analyst
    source:
      openapi: ../openapi.yml
  RuleHitMeta:
    docs: Details of rule execution, for internal purposes only
    properties:
      hitDirections: optional<list<RuleHitDirection>>
      falsePositiveDetails: optional<FalsePositiveDetails>
      sanctionsDetails: optional<list<SanctionsDetails>>
    source:
      openapi: ../openapi.yml
  RuleHitDirection:
    enum:
      - ORIGIN
      - DESTINATION
    source:
      openapi: ../openapi.yml
  RuleNature:
    enum:
      - AML
      - FRAUD
      - CTF
      - SCREENING
    source:
      openapi: ../openapi.yml
  RuleLabels:
    enum:
      - UNEXPECTED_BEHAVIOR
      - ILLICIT_GAINS_CHECK
      - RFI_TRIGGER
      - EDD_TRIGGER
      - KYC_TRIGGER
      - SCAM
      - ABUSE
      - ACCOUNT_TAKEOVER
      - DISPUTE
      - SANCTIONS
      - SANCTIONS_PEP
      - SANCTIONS_PEP_ADVERSE_MEDIA
    source:
      openapi: ../openapi.yml
  CaseManagementEventCaseStatus:
    enum:
      - CLOSED
      - HIT
    docs: Status of a case. E.g. Open, Closed etc.
    inline: true
    source:
      openapi: ../openapi.yml
  CaseManagementEventCaseStatusReason:
    enum:
      - FALSE_POSITIVE
      - INVESTIGATION_COMPLETED
      - DOCUMENTS_COLLECTED
      - OTHER
    docs: >-
      Case status reason. E.g. Closed & False Positive, Closed & Investigation
      Completed etc.
    inline: true
    source:
      openapi: ../openapi.yml
  CaseManagementEvent:
    docs: Model for case management events
    properties:
      caseStatus:
        type: CaseManagementEventCaseStatus
        docs: Status of a case. E.g. Open, Closed etc.
      timestamp:
        type: double
        docs: Timestamp of the event
        validation:
          min: 1262300400000
      caseStatusReason:
        type: CaseManagementEventCaseStatusReason
        docs: >-
          Case status reason. E.g. Closed & False Positive, Closed &
          Investigation Completed etc.
      transactionId:
        type: optional<string>
        docs: Transaction ID the case pertains to
        validation:
          minLength: 1
      userId:
        type: optional<string>
        docs: User ID the case pertains to
      eventId:
        type: optional<string>
        docs: Event ID the case pertains to
      caseStatusReasonDescription:
        type: optional<string>
        docs: Case status reason description
    source:
      openapi: ../openapi.yml
  Date:
    docs: Model for date
    properties:
      day:
        type: double
        docs: Day of date
      month:
        type: double
        docs: Month of date
      year:
        type: double
        docs: Year of date
    source:
      openapi: ../openapi.yml
  TransactionState:
    enum:
      - CREATED
      - PROCESSING
      - SENT
      - EXPIRED
      - DECLINED
      - SUSPENDED
      - REFUNDED
      - SUCCESSFUL
    docs: Model for transaction states. E.g. Processing, Refunded, Successful etc.
    source:
      openapi: ../openapi.yml
  AcquisitionChannel:
    enum:
      - ORGANIC
      - PAID
      - REFERRAL
      - OFFLINE
      - GATHERING
      - UNKNOWN
    docs: Model for User acquisition channel
    source:
      openapi: ../openapi.yml
  UPIPaymentMethod:
    type: literal<"UPI">
    docs: Classify the method of payment as "UPI" for UPIDetails
  IBANPaymentMethod:
    type: literal<"IBAN">
    docs: |
      Classify the method of payment as "IBAN" for IBANDetails
  CardPaymentMethod:
    type: literal<"CARD">
    docs: |
      Classify the method of payment as "Card" for CardDetails
  WalletPaymentMethod:
    type: literal<"WALLET">
    docs: Classify the method of payment as "Wallet" for WalletDetails
  ACHPaymentMethod:
    type: literal<"ACH">
    docs: Classify the method of payment as "ACH" for ACHDetails
  SWIFTPaymentMethod:
    type: literal<"SWIFT">
    docs: Classify the method of payment as "SWIFT" for SWIFTDetails
  CheckPaymentMethod:
    type: literal<"CHECK">
    docs: Classify the method of payment as "CHECK" for CheckDetails
  MpesaPaymentMethod:
    type: literal<"MPESA">
    docs: Classify the method of payment as "Mpesa" for MpesaDetails
  GeneralBankAccountPaymentMethod:
    type: literal<"GENERIC_BANK_ACCOUNT">
    docs: >-
      Classify the method of payment as "GENERIC_BANK_ACCOUNT" for
      GenericBankAccountDetails
  UserState:
    enum:
      - UNACCEPTABLE
      - UNDECIDED
      - TERMINATED
      - ACTIVE
      - INACTIVE
      - DORMANT
      - CREATED
      - DELETED
      - SUSPENDED
      - BLOCKED
    source:
      openapi: ../openapi.yml
  KYCStatus:
    enum:
      - SUCCESSFUL
      - FAILED
      - NOT_STARTED
      - IN_PROGRESS
      - MANUAL_REVIEW
    source:
      openapi: ../openapi.yml
  PEPStatus:
    properties:
      isPepHit: boolean
      pepCountry:
        type: optional<string>
        validation:
          minLength: 2
          maxLength: 2
    source:
      openapi: ../openapi.yml
  KYCStatusDetails:
    properties:
      reason:
        type: optional<string>
      status:
        type: optional<KYCStatus>
    source:
      openapi: ../openapi.yml
  UserStateDetails:
    properties:
      userId:
        type: optional<string>
      reason:
        type: optional<string>
      state:
        type: UserState
    source:
      openapi: ../openapi.yml
  CaseClosedDetails:
    properties:
      caseId:
        type: optional<string>
      status:
        type: optional<string>
      reasons:
        type: optional<list<string>>
      reasonDescriptionForOther:
        type: optional<list<string>>
      comment:
        type: optional<string>
      userId:
        type: optional<string>
      transactionIds:
        type: optional<list<string>>
    source:
      openapi: ../openapi.yml
  AlertClosedDetails:
    properties:
      alertId:
        type: optional<string>
      status:
        type: optional<string>
      reasons:
        type: optional<list<string>>
      reasonDescriptionForOther:
        type: optional<list<string>>
      comment:
        type: optional<string>
      userId:
        type: optional<string>
      transactionIds:
        type: optional<list<string>>
      ruleName:
        type: optional<string>
      ruleDescription:
        type: optional<string>
      ruleId:
        type: optional<string>
      ruleInstanceId:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  RiskLevel:
    enum:
      - VERY_HIGH
      - HIGH
      - MEDIUM
      - LOW
      - VERY_LOW
    source:
      openapi: ../openapi.yml
  CardExpiry:
    properties:
      month:
        type: optional<double>
      year:
        type: optional<double>
    source:
      openapi: ../openapi.yml
  TransactionType:
    enum:
      - DEPOSIT
      - TRANSFER
      - EXTERNAL_PAYMENT
      - WITHDRAWAL
      - REFUND
      - OTHER
    source:
      openapi: ../openapi.yml
  WebhookEvent:
    properties:
      id: string
      type:
        type: WebhookEventType
      data:
        type: UserStateDetails
      createdTimestamp:
        type: double
        validation:
          min: 1262300400000
    source:
      openapi: ../openapi.yml
  WebhookEventType:
    enum:
      - CASE_CLOSED
      - USER_STATE_UPDATED
      - ALERT_CLOSED
    source:
      openapi: ../openapi.yml
  ListType:
    enum:
      - WHITELIST
      - BLACKLIST
      - FLAGRIGHT_LIBRARY
    source:
      openapi: ../openapi.yml
  ListSubtype:
    enum:
      - USER_ID
      - CARD_FINGERPRINT_NUMBER
      - IBAN_NUMBER
      - BANK_ACCOUNT_NUMBER
      - ACH_ACCOUNT_NUMBER
      - SWIFT_ACCOUNT_NUMBER
      - BIC
      - BANK_SWIFT_CODE
      - UPI_IDENTIFYING_NUMBER
      - IP_ADDRESS
      - STRING
    source:
      openapi: ../openapi.yml
  ListKeyMetadata:
    type: map<string, unknown>
  ListData:
    docs: Payload of a list, new or existed
    properties:
      metadata:
        type: optional<ListMetadata>
      items:
        type: optional<list<ListItem>>
        docs: List items
    source:
      openapi: ../openapi.yml
  ListItem:
    properties:
      key: string
      metadata:
        type: optional<ListKeyMetadata>
    source:
      openapi: ../openapi.yml
  ListMetadata:
    properties:
      name:
        type: optional<string>
        docs: List name
      description:
        type: optional<string>
        docs: List description
      status:
        type: optional<boolean>
      checksum:
        type: optional<string>
    extra-properties: true
    source:
      openapi: ../openapi.yml
  ListExisted:
    docs: List with ID and header
    properties:
      listId: string
      header:
        type: ListHeader
      items:
        docs: List items
        type: list<ListItem>
    source:
      openapi: ../openapi.yml
  ListHeader:
    properties:
      listId: string
      listType: ListType
      subtype: ListSubtype
      metadata:
        type: optional<ListMetadata>
      createdTimestamp: double
      size: double
    source:
      openapi: ../openapi.yml
  PaymentMethod:
    enum:
      - ACH
      - CARD
      - IBAN
      - UPI
      - GENERIC_BANK_ACCOUNT
      - MPESA
      - SWIFT
      - WALLET
      - CHECK
    source:
      openapi: ../openapi.yml
  CardMerchantDetails:
    properties:
      id:
        type: optional<string>
      category:
        type: optional<string>
      MCC:
        type: optional<string>
      city:
        type: optional<string>
      country:
        type: optional<string>
        validation:
          minLength: 2
          maxLength: 2
      state:
        type: optional<string>
      postCode:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  CheckDetailsDeliveryStatus:
    enum:
      - COMPLETED
      - PENDING
      - SETTLED
      - CANCELED
      - REFUND
      - DECLINED
    inline: true
    source:
      openapi: ../openapi.yml
  CheckDetails:
    properties:
      checkNumber:
        type: optional<string>
      checkIdentifier:
        type: optional<string>
      name:
        type: optional<string>
      deliveryStatus:
        type: optional<CheckDetailsDeliveryStatus>
      etaTimestamp:
        type: optional<double>
        validation:
          min: 1262300400000
      shippingAddress:
        type: optional<Address>
    source:
      openapi: ../openapi.yml
  CountryCode:
    enum:
      - AF
      - AL
      - DZ
      - AS
      - AD
      - AO
      - AI
      - AQ
      - AG
      - AR
      - AM
      - AW
      - AU
      - AT
      - AZ
      - BS
      - BH
      - BD
      - BB
      - BY
      - BE
      - BZ
      - BJ
      - BM
      - BT
      - BO
      - BQ
      - BA
      - BW
      - BV
      - BR
      - IO
      - BN
      - BG
      - BF
      - BI
      - CV
      - KH
      - CM
      - CA
      - KY
      - CF
      - TD
      - CL
      - CN
      - CX
      - CC
      - CO
      - KM
      - CD
      - CG
      - CK
      - CR
      - HR
      - CU
      - CW
      - CY
      - CZ
      - CI
      - DK
      - DJ
      - DM
      - DO
      - EC
      - EG
      - SV
      - GQ
      - ER
      - EE
      - SZ
      - ET
      - FK
      - FO
      - FJ
      - FI
      - FR
      - GF
      - PF
      - TF
      - GA
      - GM
      - GE
      - DE
      - GH
      - GI
      - GR
      - GL
      - GD
      - GP
      - GU
      - GT
      - GG
      - GN
      - GW
      - GY
      - HT
      - HM
      - VA
      - HN
      - HK
      - HU
      - IS
      - IN
      - ID
      - IR
      - IQ
      - IE
      - IM
      - IL
      - IT
      - JM
      - JP
      - JE
      - JO
      - KZ
      - KE
      - KI
      - KP
      - KR
      - KW
      - KG
      - LA
      - LV
      - LB
      - LS
      - LR
      - LY
      - LI
      - LT
      - LU
      - MO
      - MG
      - MW
      - MY
      - MV
      - ML
      - MT
      - MH
      - MQ
      - MR
      - MU
      - YT
      - MX
      - FM
      - MD
      - MC
      - MN
      - ME
      - MS
      - MA
      - MZ
      - MM
      - NA
      - NR
      - NP
      - NL
      - NC
      - NZ
      - NI
      - NE
      - NG
      - NU
      - NF
      - MK
      - MP
      - 'NO'
      - OM
      - PK
      - PW
      - PS
      - PA
      - PG
      - PY
      - PE
      - PH
      - PN
      - PL
      - PT
      - PR
      - QA
      - RO
      - RU
      - RW
      - RE
      - BL
      - SH
      - KN
      - LC
      - MF
      - PM
      - VC
      - WS
      - SM
      - ST
      - SA
      - SN
      - RS
      - SC
      - SL
      - SG
      - SX
      - SK
      - SI
      - SB
      - SO
      - ZA
      - GS
      - SS
      - ES
      - LK
      - SD
      - SR
      - SJ
      - SE
      - CH
      - SY
      - TW
      - TJ
      - TZ
      - TH
      - TL
      - TG
      - TK
      - TO
      - TT
      - TN
      - TM
      - TC
      - TV
      - TR
      - UG
      - UA
      - AE
      - GB
      - UM
      - US
      - UY
      - UZ
      - VU
      - VE
      - VN
      - VG
      - VI
      - WF
      - EH
      - YE
      - ZM
      - ZW
      - AX
      - value: N/A
        name: NOT_APPLICABLE
    source:
      openapi: ../openapi.yml
  CurrencyCode:
    enum:
      - value: 1INCH
        name: OneInch
      - AAVE
      - ADA
      - AED
      - AFN
      - ALGO
      - ALL
      - AMD
      - AMP
      - ANG
      - AOA
      - AR
      - ARS
      - ATOM
      - AUD
      - AVAX
      - AWG
      - AXS
      - AZN
      - BAM
      - BAT
      - BBD
      - BCH
      - BDT
      - BGN
      - BHD
      - BIF
      - BMD
      - BNB
      - BND
      - BOB
      - BRL
      - BSD
      - BSV
      - BTC
      - BTCB
      - BTG
      - BTN
      - BUSD
      - BWP
      - BYN
      - BYR
      - BZD
      - CAD
      - CAKE
      - CDF
      - CELO
      - CHF
      - CHZ
      - CLF
      - CLP
      - CNY
      - COMP
      - COP
      - CRC
      - CRO
      - CRV
      - CUC
      - CUP
      - CVE
      - CVX
      - CZK
      - DAI
      - DASH
      - DCR
      - DFI
      - DJF
      - DKK
      - DOGE
      - DOP
      - DOT
      - DZD
      - EGLD
      - EGP
      - ENJ
      - EOS
      - ERN
      - ETB
      - ETC
      - ETH
      - EUR
      - FEI
      - FIL
      - FJD
      - FKP
      - FLOW
      - FRAX
      - FTM
      - FTT
      - GALA
      - GBP
      - GEL
      - GGP
      - GHS
      - GIP
      - GMD
      - GNF
      - GNO
      - GRT
      - GT
      - GTQ
      - GYD
      - HBAR
      - HKD
      - HNL
      - HNT
      - HOT
      - HRK
      - HT
      - HTG
      - HUF
      - ICP
      - IDR
      - ILS
      - IMP
      - INJ
      - INR
      - IQD
      - IRR
      - ISK
      - JEP
      - JMD
      - JOD
      - JPY
      - KAVA
      - KCS
      - KDA
      - KES
      - KGS
      - KHR
      - KLAY
      - KMF
      - KNC
      - KPW
      - KRW
      - KSM
      - KWD
      - KYD
      - KZT
      - LAK
      - LBP
      - LEO
      - LINK
      - LKR
      - LRC
      - LRD
      - LSL
      - LTC
      - LTL
      - LUNA
      - LVL
      - LYD
      - MAD
      - MANA
      - MATIC
      - MDL
      - MGA
      - MINA
      - MIOTA
      - MKD
      - MKR
      - MMK
      - MNT
      - MOP
      - MRO
      - MUR
      - MVR
      - MWK
      - MXN
      - MYR
      - MZN
      - NAD
      - NEAR
      - NEO
      - NEXO
      - NGN
      - NIO
      - NOK
      - NPR
      - NZD
      - OKB
      - OMR
      - ONE
      - PAB
      - PAXG
      - PEN
      - PGK
      - PHP
      - PKR
      - PLN
      - PYG
      - QAR
      - QNT
      - QTUM
      - RON
      - RSD
      - RUB
      - RUNE
      - RWF
      - SAND
      - SAR
      - SBD
      - SCR
      - SDG
      - SEK
      - SGD
      - SHIB
      - SHP
      - SLE
      - SLL
      - SOL
      - SOS
      - SRD
      - STD
      - STX
      - SVC
      - SYP
      - SZL
      - THB
      - THETA
      - TJS
      - TMT
      - TND
      - TOP
      - TRX
      - TRY
      - TTD
      - TTT
      - TUSD
      - TWD
      - TZS
      - UAH
      - UGX
      - UNI
      - USD
      - USDC
      - USDP
      - USDT
      - UYU
      - UZS
      - VEF
      - VET
      - VND
      - VUV
      - WAVES
      - WBTC
      - WEMIX
      - WST
      - XAF
      - XAG
      - XAU
      - XCD
      - XCH
      - XDC
      - XDR
      - XEC
      - XEM
      - XLM
      - XMR
      - XOF
      - XPF
      - XRP
      - XTZ
      - YER
      - ZAR
      - ZEC
      - ZIL
      - ZMK
      - ZMW
      - ZWL
    source:
      openapi: ../openapi.yml
  MCCDetails:
    properties:
      code:
        type: double
        docs: Merchant code
      description:
        type: optional<string>
        docs: Merchant Description
    source:
      openapi: ../openapi.yml
  TransactionCountLimit:
    properties:
      day:
        type: optional<double>
      week:
        type: optional<double>
      month:
        type: optional<double>
      year:
        type: optional<double>
    source:
      openapi: ../openapi.yml
  TransactionAmountLimit:
    properties:
      day:
        type: optional<Amount>
      week:
        type: optional<Amount>
      month:
        type: optional<Amount>
      year:
        type: optional<Amount>
    source:
      openapi: ../openapi.yml
  TransactionLimit:
    properties:
      transactionCountLimit:
        type: optional<TransactionCountLimit>
      transactionAmountLimit:
        type: optional<TransactionAmountLimit>
      averageTransactionAmountLimit:
        type: optional<TransactionAmountLimit>
    source:
      openapi: ../openapi.yml
  FalsePositiveDetails:
    properties:
      isFalsePositive: boolean
      confidenceScore: double
    source:
      openapi: ../openapi.yml
  SanctionsDetails:
    properties:
      name: string
      searchId: string
      entityType:
        type: optional<SanctionsDetailsEntityType>
    source:
      openapi: ../openapi.yml
  SanctionsDetailsEntityType:
    enum:
      - CONSUMER_NAME
      - LEGAL_NAME
      - SHAREHOLDER
      - DIRECTOR
      - NAME_ON_CARD
      - PAYMENT_NAME
      - PAYMENT_BENEFICIARY_NAME
      - BANK_NAME
    source:
      openapi: ../openapi.yml
  BusinessEntityLink:
    properties:
      parentUserId:
        type: optional<string>
      childUserIds:
        type: optional<list<string>>
    source:
      openapi: ../openapi.yml
  UserWithRulesResult:
    docs: Model for consumer user payload with rules result
    properties:
      executedRules: optional<list<ExecutedRulesResult>>
      hitRules: optional<list<HitRulesDetails>>
    extends:
      - User
    source:
      openapi: ../openapi.yml
  BusinessWithRulesResult:
    docs: Model for business payload with rules result
    properties:
      executedRules: optional<list<ExecutedRulesResult>>
      hitRules: optional<list<HitRulesDetails>>
    extends:
      - Business
    source:
      openapi: ../openapi.yml
  Thing:
    properties:
      publishedAt: optional<string>
    source:
      openapi: ../openapi.yml
errors:
  BadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
  TooManyRequestsError:
    status-code: 429
    type: unknown
    docs: Too Many Requests
service:
  auth: false
  base-path: ''
  endpoints:
    post-consumer-transaction:
      path: /transactions
      method: POST
      auth: true
      docs: >-
        ## POST Transactions


        `/transactions` endpoint allows you to operate on the [Transaction
        entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction)


        In order to pass the payload of a transaction to Flagright and verify
        the transaciton, you will need to call this endpoint with the
        transaction payload. Not all fields are mandatory, you will only need to
        pass in the fields that you have and are relevant for your compliance
        setup. 



        ### Payload


        Here are some of the most used payload fields explained (you can find
        the full payload [schema
        below](https://docs.flagright.com/docs/flagright-api/87742ed31b30e-verify-a-transaction#request-body)
        with 1 line descriptions):


        * `type`: Type of transaction (Ex: `WITHDRAWAL`, `DEPOSIT`, `TRANSFER`
        etc). 

        * `transactionId` - Unique Identifier for the transaction. Flagright API
        will generate a `transactionId` if this field is left empty

        * `timestamp` - UNIX timestamp in *milliseconds* of when the transaction
        took place

        * `transactionState` - The state of the transaction, set to `CREATED` by
        default. [More details
        here](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships-in-the-api#transaction-lifecycle-through-transaction-events)

        * `originUserId` - Unique identifier (if any) of the user who is sending
        the money. This user must be created within the Flagright system before
        using the [create a consumer
        user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user)
        or [create a business
        user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user)
        endpoint

        * `destinationUserId` - Unique identifier (if any) of the user who is
        receiving the money. This user must be created within the Flagright
        system before using the [create a consumer
        user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user)
        or [create a business
        user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user)
        endpoint

        * `originAmountDetails` - Details of the amount being sent from the
        origin

        * `destinationAmountDetails` - Details of the amount being received at
        the destination

        * `originPaymentDetails` - Payment details (if any) used at the origin
        (ex: `CARD`, `IBAN`, `WALLET` etc). You can click on the dropdown next
        to the field in the schema below to view all supported payment types.

        * `destinationPaymentDetails` - Payment details (if any) used at the
        destination (ex: `CARD`, `IBAN`, `WALLET` etc). You can click on the
        dropdown next to the field in the schema below to view all supported
        payment types.
      source:
        openapi: ../openapi.yml
      display-name: Verify a Transaction
      request:
        body: Transaction
        query-parameters:
          validateOriginUserId:
            type: optional<string>
            docs: >-
              Boolean string whether Flagright should validate if provided
              originUserId exist. True by default
          validateDestinationUserId:
            type: optional<string>
            docs: >-
              Boolean string whether Flagright should validate if provided
              destinationUserId exist. True by default
        name: PostConsumerTransactionRequest
        content-type: application/json
      response:
        docs: Created
        type: PostConsumerTransactionResponse
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - name: example-1
          request:
            originAmountDetails:
              transactionAmount: 800
              transactionCurrency: EUR
              country: DE
            destinationAmountDetails:
              transactionAmount: 68351.34
              transactionCurrency: INR
              country: IN
            originPaymentDetails:
              method: CHECK
              shippingAddress:
                addressLines:
                  - Klara-Franke Str 20
                postcode: '10557'
                city: Berlin
                state: Berlin
                country: Germany
                tags:
                  - key: customKey
                    value: customValue
            destinationPaymentDetails:
              method: CHECK
              shippingAddress:
                addressLines:
                  - Klara-Franke Str 20
                postcode: '10557'
                city: Berlin
                state: Berlin
                country: Germany
                tags:
                  - key: customKey
                    value: customValue
            promotionCodeUsed: true
            reference: loan repayment
            deviceData:
              batteryLevel: 95
              deviceLatitude: 13.0033
              deviceLongitude: 76.1004
              ipAddress: 10.23.191.2
              deviceIdentifier: 3c49f915d04485e34caba
              vpnUsed: false
              operatingSystem: Android 11.2
              deviceMaker: ASUS
              deviceModel: Zenphone M2 Pro Max
              deviceYear: '2018'
              appVersion: 1.1.0
            tags:
              - key: customKey
                value: customValue
            transactionId: 7b80a539eea6e78acbd6d458e5971482
            timestamp: 1641654664000
            originUserId: 8650a2611d0771cba03310f74bf6
            destinationUserId: 9350a2611e0771cba03310f74bf6
          response:
            body:
              executedRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  ruleHit: true
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              hitRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              transactionId: 7b80a539eea6e78acbd6d458e5971482
              message: message
    get-consumer-transaction:
      path: /transactions/{transactionId}
      method: GET
      auth: true
      docs: >-
        ### GET Transactions


        `/transactions` endpoint allows you to operate on the [Transaction
        entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction).


        Calling `GET /transactions/{transactionId}` will return the entire
        transaction payload and rule execution results for the transaction with
        the corresponding `transactionId`
      source:
        openapi: ../openapi.yml
      path-parameters:
        transactionId:
          type: string
          docs: Unique Transaction Identifier
      display-name: Retrieve a Transaction
      response:
        docs: OK
        type: TransactionWithRulesResult
        status-code: 200
      errors:
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - name: example-1
          path-parameters:
            transactionId: transactionId
          response:
            body:
              transactionState: CREATED
              originAmountDetails:
                transactionAmount: 800
                transactionCurrency: EUR
                country: DE
              destinationAmountDetails:
                transactionAmount: 68351.34
                transactionCurrency: INR
                country: IN
              originPaymentDetails:
                method: CHECK
                checkNumber: originPaymentDetails
                checkIdentifier: originPaymentDetails
                name: originPaymentDetails
                deliveryStatus: COMPLETED
                etaTimestamp: 1.1
                shippingAddress:
                  addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
              destinationPaymentDetails:
                method: CHECK
                checkNumber: destinationPaymentDetails
                checkIdentifier: destinationPaymentDetails
                name: destinationPaymentDetails
                deliveryStatus: COMPLETED
                etaTimestamp: 1.1
                shippingAddress:
                  addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
              relatedTransactionIds:
                - relatedTransactionIds
              productType: productType
              promotionCodeUsed: true
              reference: loan repayment
              deviceData:
                batteryLevel: 95
                deviceLatitude: 13.0033
                deviceLongitude: 76.1004
                ipAddress: 10.23.191.2
                deviceIdentifier: 3c49f915d04485e34caba
                vpnUsed: false
                operatingSystem: Android 11.2
                deviceMaker: ASUS
                deviceModel: Zenphone M2 Pro Max
                deviceYear: '2018'
                appVersion: 1.1.0
              tags:
                - key: customKey
                  value: customValue
              type: DEPOSIT
              transactionId: 7b80a539eea6e78acbd6d458e5971482
              timestamp: 1641654664000
              originUserId: 8650a2611d0771cba03310f74bf6
              destinationUserId: 9350a2611e0771cba03310f74bf6
              executedRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  ruleHit: true
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              hitRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
    post-transaction-event:
      path: /events/transaction
      method: POST
      auth: true
      docs: >
        ## POST Transaction Events


        `/events/transaction` endpoint allows you to operate on the [Transaction
        Events
        entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-event)


        Transaction events are created after the initial `POST /transactions`
        call (which creates a transaction) and are used to:


        * Update the STATE of the transaction, using the `transactionState`
        field and manage the [Transaction
        Lifecycle](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-lifecycle-through-transaction-events)

        * Update the transaction details, using the
        `updatedTransactionAttributes` field.


        > If you have neither of the above two use cases, you do not need to use
        transaction events. 


        ### Payload


        Each transaction event needs three mandatory fields:


        * `transactionState` - STATE of the transaction -> value is set to
        `CREATED` after `POST /transactions` call

        * `timestamp`- the timestamp of when the event was created or occured in
        your system

        * `transactionId` - The ID of the transaction for which this event is
        generated. 


        In order to make individual events retrievable, you also need to pass in
        a unique `eventId` to the request body.
      source:
        openapi: ../openapi.yml
      display-name: Create a Transaction Event
      request:
        name: TransactionEvent
        body:
          properties:
            transactionState:
              type: TransactionState
            timestamp:
              type: double
              docs: Timestamp of the event
              validation:
                min: 1262300400000
                max: 4133890801000
            transactionId:
              type: string
              docs: Transaction ID the event pertains to
              validation:
                minLength: 1
            eventId:
              type: optional<string>
              docs: Unique event ID
            reason:
              type: optional<string>
              docs: Reason for the event or a state change
            eventDescription:
              type: optional<string>
              docs: Event description
            updatedTransactionAttributes: optional<TransactionUpdatable>
            metaData: optional<DeviceData>
        content-type: application/json
      response:
        docs: Created
        type: TransactionEventMonitoringResult
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - name: example-1
          request:
            transactionState: SUCCESSFUL
            timestamp: 1431231244001
            transactionId: 443dea26147a406b957d9ee3a1247b11
            eventId: aaeeb166147a406b957dd9147a406b957
            eventDescription: Transaction created
            metaData:
              batteryLevel: 76.3
              deviceLatitude: 13.009711
              deviceLongitude: 76.102898
              ipAddress: 79.144.2.20
              vpnUsed: true
          response:
            body:
              executedRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  ruleHit: true
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              hitRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              eventId: 7b80a539eea6e78acbd6d458e5971482
              transaction:
                transactionState: CREATED
                originAmountDetails:
                  transactionAmount: 800
                  transactionCurrency: EUR
                  country: DE
                destinationAmountDetails:
                  transactionAmount: 68351.34
                  transactionCurrency: INR
                  country: IN
                originPaymentDetails:
                  method: CHECK
                  checkNumber: originPaymentDetails
                  checkIdentifier: originPaymentDetails
                  name: originPaymentDetails
                  deliveryStatus: COMPLETED
                  etaTimestamp: 1.1
                  shippingAddress:
                    addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
                destinationPaymentDetails:
                  method: CHECK
                  checkNumber: destinationPaymentDetails
                  checkIdentifier: destinationPaymentDetails
                  name: destinationPaymentDetails
                  deliveryStatus: COMPLETED
                  etaTimestamp: 1.1
                  shippingAddress:
                    addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
                relatedTransactionIds:
                  - relatedTransactionIds
                productType: productType
                promotionCodeUsed: true
                reference: loan repayment
                deviceData:
                  batteryLevel: 95
                  deviceLatitude: 13.0033
                  deviceLongitude: 76.1004
                  ipAddress: 10.23.191.2
                  deviceIdentifier: 3c49f915d04485e34caba
                  vpnUsed: false
                  operatingSystem: Android 11.2
                  deviceMaker: ASUS
                  deviceModel: Zenphone M2 Pro Max
                  deviceYear: '2018'
                  appVersion: 1.1.0
                tags:
                  - key: customKey
                    value: customValue
                type: DEPOSIT
                transactionId: 7b80a539eea6e78acbd6d458e5971482
                timestamp: 1641654664000
                originUserId: 8650a2611d0771cba03310f74bf6
                destinationUserId: 9350a2611e0771cba03310f74bf6
    post-consumer-user:
      path: /consumer/users
      method: POST
      auth: true
      docs: >
        ## POST Consumer User


        `/consumer/user` endpoint allows you to operate on the [Consumer user
        entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)


        In order to pass the payload of a User to Flagright and verify the User,
        you will need to call this endpoint with the User payload. Not all
        fields are mandatory, you will only need to pass in the fields that you
        have and are relevant for your compliance setup.


        ### Payload


        Each consumer User entity needs three mandatory fields:


        * `userId` - Unique identifier for the user

        * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the
        User is created in your system
      source:
        openapi: ../openapi.yml
      display-name: Create a Consumer User
      request:
        body:
          type: User
        content-type: application/json
      response:
        docs: Created
        type: PostConsumerUserResponse
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - name: example-1
          request:
            legalDocuments:
              - documentType: passport
                documentNumber: Z9431P
                documentIssuedDate: 1639939034000
                documentExpirationDate: 1839939034000
                documentIssuedCountry: DE
                tags:
                  - key: customerType
                    value: wallet
            contactDetails:
              emailIds:
                - baran@flagright.com
              contactNumbers:
                - '+37112345432'
              websites:
                - flagright.com
              addresses:
                - addressLines:
                    - Klara-Franke Str 20
                  postcode: '10557'
                  city: Berlin
                  state: Berlin
                  country: Germany
                  tags:
                    - key: customKey
                      value: customValue
            tags:
              - key: customKey
                value: customValue
            userId: 96647cfd9e8fe66ee0f3362e011e34e8
            userDetails:
              name:
                firstName: Baran
                middleName: Realblood
                lastName: Ozkan
              dateOfBirth: '1991-01-01'
              countryOfResidence: US
              countryOfNationality: DE
            createdTimestamp: 1641654664000
          response:
            body:
              executedRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  ruleHit: true
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              hitRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: FRAUD
              userId: 96647cfd9e8fe66ee0f3362e011e34e8
              message: message
    get-consumer-user:
      path: /consumer/users/{userId}
      method: GET
      auth: true
      docs: >-
        ### GET Consumer User


        `/consumer/user` endpoint allows you to operate on the [Consumer User
        entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).


        Calling `GET /consumer/user/{userId}` will return the entire user
        payload and rule execution results for the user with the corresponding
        `userId`
      source:
        openapi: ../openapi.yml
      path-parameters:
        userId:
          type: string
          docs: ''
      display-name: Retrieve a Consumer User
      response:
        docs: OK
        type: User
        status-code: 200
      errors:
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - name: example-1
          path-parameters:
            userId: userId
          response:
            body:
              userStateDetails:
                userId: userId
                reason: reason
                state: UNACCEPTABLE
              kycStatusDetails:
                reason: reason
                status: SUCCESSFUL
              legalDocuments:
                - documentType: passport
                  documentNumber: Z9431P
                  documentIssuedDate: 1639939034000
                  documentExpirationDate: 1839939034000
                  documentIssuedCountry: DE
                  tags:
                    - key: customerType
                      value: wallet
                  nameOnDocument:
                    firstName: Baran
                    middleName: Realblood
                    lastName: Ozkan
              contactDetails:
                emailIds:
                  - baran@flagright.com
                contactNumbers:
                  - '+37112345432'
                faxNumbers:
                  - faxNumbers
                websites:
                  - flagright.com
                addresses:
                  - addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
              transactionLimits:
                maximumDailyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumWeeklyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumMonthlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumQuarterlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumYearlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
              riskLevel: VERY_HIGH
              acquisitionChannel: ORGANIC
              reasonForAccountOpening:
                - reasonForAccountOpening
              userSegment: RETAIL
              pepStatus:
                - isPepHit: true
                  pepCountry: pepCountry
              tags:
                - key: customKey
                  value: customValue
              userId: 96647cfd9e8fe66ee0f3362e011e34e8
              userDetails:
                name:
                  firstName: Baran
                  middleName: Realblood
                  lastName: Ozkan
                dateOfBirth: '1991-01-01'
                countryOfResidence: US
                countryOfNationality: DE
                gender: M
              createdTimestamp: 1641654664000
    post-business-user:
      path: /business/users
      method: POST
      auth: true
      docs: >-
        ## POST Business User


        `/business/user` endpoint allows you to operate on the [Business user
        entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)


        In order to pass the payload of a User to Flagright and verify the User,
        you will need to call this endpoint with the User payload. Not all
        fields are mandatory, you will only need to pass in the fields that you
        have and are relevant for your compliance setup.


        ### Payload



        Each consumer Business entity needs three mandatory fields:


        * `userId` - Unique identifier for the user

        * `legalEntity` - Details of the business legal entity
        (CompanyGeneralDetails, FinancialDetails etc) - only `legalName`in
        `CompanyGeneralDetails` is mandatory

        * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the
        User is created in your system
      source:
        openapi: ../openapi.yml
      display-name: Create a Business User
      request:
        body: Business
        content-type: application/json
      response:
        docs: Created
        type: PostBusinessUserResponse
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - name: example-1
          request:
            userId: userId
            createdTimestamp: 1.1
          response:
            body:
              executedRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  ruleHit: true
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              hitRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: FRAUD
              userId: 96647cfd9e8fe66ee0f3362e011e34e8
              message: message
    get-business-user-userId:
      path: /business/users/{userId}
      method: GET
      auth: true
      docs: >-
        ### GET Business User


        `/business/user` endpoint allows you to operate on the [Business User
        entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).


        Calling `GET /business/user/{userId}` will return the entire User
        payload and rule execution results for the User with the corresponding
        `userId`
      source:
        openapi: ../openapi.yml
      path-parameters:
        userId:
          type: string
          docs: ''
      display-name: Retrieve a Business User
      response:
        docs: OK
        type: Business
        status-code: 200
      errors:
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - name: example-2
          path-parameters:
            userId: userId
          response:
            body:
              userStateDetails:
                userId: userId
                reason: reason
                state: UNACCEPTABLE
              kycStatusDetails:
                reason: reason
                status: SUCCESSFUL
              legalEntity:
                companyGeneralDetails:
                  legalName: Ozkan Hazelnut Export JSC
                  businessIndustry:
                    - Farming
                  mainProductsServicesSold:
                    - Hazelnut
                  userSegment: SOLE_PROPRIETORSHIP
                  userRegistrationStatus: REGISTERED
                  tags:
                    - key: customKey
                      value: customValue
                companyFinancialDetails:
                  expectedTransactionAmountPerMonth:
                    amountValue: 800
                    amountCurrency: GBP
                  expectedTurnoverPerMonth:
                    amountValue: 8000
                    amountCurrency: USD
                  tags:
                    - key: customKey
                      value: customValue
                companyRegistrationDetails:
                  registrationIdentifier: PSJ554342
                  registrationCountry: DE
                  taxIdentifier: taxIdentifier
                  legalEntityType: legalEntityType
                  dateOfRegistration: dateOfRegistration
                  tags:
                    - key: customKey
                      value: customValue
                reasonForAccountOpening:
                  - string
                contactDetails:
                  emailIds:
                    - emailIds
                  contactNumbers:
                    - contactNumbers
                  faxNumbers:
                    - faxNumbers
                  websites:
                    - websites
                  addresses:
                    - addressLines:
                        - Klara-Franke Str 20
                      postcode: '10557'
                      city: Berlin
                      state: Berlin
                      country: Germany
                      tags:
                        - key: customKey
                          value: customValue
              shareHolders:
                - generalDetails:
                    name:
                      firstName: Baran
                      middleName: Realblood
                      lastName: Ozkan
                    dateOfBirth: '1991-01-01'
                    countryOfResidence: US
                    countryOfNationality: DE
                  legalDocuments:
                    - documentType: passport
                      documentNumber: Z9431P
                      documentIssuedDate: 1639939034000
                      documentExpirationDate: 1839939034000
                      documentIssuedCountry: DE
                      tags:
                        - key: customerType
                          value: wallet
                      nameOnDocument:
                        firstName: Baran
                        middleName: Realblood
                        lastName: Ozkan
                  contactDetails:
                    emailIds:
                      - baran@flagright.com
                    contactNumbers:
                      - +371 123132
                    websites:
                      - flagright.com
                    addresses:
                      - addressLines:
                          - Klara-Franke Str 20
                        postcode: '10557'
                        city: Berlin
                        state: Berlin
                        country: Germany
                        tags:
                          - key: customKey
                            value: customValue
                  pepStatus:
                    - isPepHit: true
                  tags:
                    - key: customKey
                      value: customValue
              directors:
                - generalDetails:
                    name:
                      firstName: Baran
                      middleName: Realblood
                      lastName: Ozkan
                    dateOfBirth: '1991-01-01'
                    countryOfResidence: US
                    countryOfNationality: DE
                  legalDocuments:
                    - documentType: passport
                      documentNumber: Z9431P
                      documentIssuedDate: 1639939034000
                      documentExpirationDate: 1839939034000
                      documentIssuedCountry: DE
                      tags:
                        - key: customerType
                          value: wallet
                      nameOnDocument:
                        firstName: Baran
                        middleName: Realblood
                        lastName: Ozkan
                  contactDetails:
                    emailIds:
                      - baran@flagright.com
                    contactNumbers:
                      - +371 123132
                    websites:
                      - flagright.com
                    addresses:
                      - addressLines:
                          - Klara-Franke Str 20
                        postcode: '10557'
                        city: Berlin
                        state: Berlin
                        country: Germany
                        tags:
                          - key: customKey
                            value: customValue
                  pepStatus:
                    - isPepHit: true
                  tags:
                    - key: customKey
                      value: customValue
              transactionLimits:
                maximumDailyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumWeeklyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumMonthlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumQuarterlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumYearlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
              riskLevel: VERY_HIGH
              allowedPaymentMethods:
                - ACH
              linkedEntities:
                parentUserId: parentUserId
                childUserIds:
                  - childUserIds
              acquisitionChannel: ORGANIC
              savedPaymentDetails:
                - method: CHECK
                  checkNumber: savedPaymentDetails
                  checkIdentifier: savedPaymentDetails
                  name: savedPaymentDetails
                  deliveryStatus: COMPLETED
                  etaTimestamp: 1.1
                  shippingAddress:
                    addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
              mccDetails:
                code: 1.1
                description: description
              tags:
                - key: customKey
                  value: customValue
              userId: 96647cfd9e8fe66ee0f3362e011e34e8
              createdTimestamp: 1641654664000
    post-user-event:
      path: /events/consumer/user
      method: POST
      auth: true
      docs: >
        ## POST Consumer User Events


        `/events/consumer/user` endpoint allows you to operate on the Consumer
        User Events entity.


        User events are created after the initial `POST /consumer/users` call
        (which creates a user) and are used to:


        * Update the STATE and KYC Status of the user, using the
        `userStateDetails` or `kycStatusDetails` field

        * Update the user details, using the `updatedConsumerUserAttributes`
        field.


        > If you have neither of the above two use cases, you do not need to use
        user events. 


        ### Payload


        Each user event needs three mandatory fields:


        * `timestamp`- the timestamp of when the event was created or occured in
        your system

        * `userId` - The ID of the transaction for which this event is
        generated. 


        In order to make individual events retrievable, you also need to pass in
        a unique `eventId` to the request body.
      source:
        openapi: ../openapi.yml
      display-name: Create a Consumer User Event
      request:
        name: ConsumerUserEvent
        body:
          properties:
            timestamp:
              type: double
              docs: Timestamp of the event
              validation:
                min: 1262300400000
                max: 4133890801000
            userId:
              type: string
              docs: Transaction ID the event pertains to
              validation:
                minLength: 1
            eventId:
              type: optional<string>
              docs: Unique event ID
            reason:
              type: optional<string>
              docs: Reason for the event or a state change
            eventDescription:
              type: optional<string>
              docs: Event description
            updatedConsumerUserAttributes:
              type: optional<UserOptional>
        content-type: application/json
      response:
        docs: Created
        type: UserWithRulesResult
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - request:
            timestamp: 1.1
            userId: userId
          response:
            body:
              userStateDetails:
                userId: userId
                reason: reason
                state: UNACCEPTABLE
              kycStatusDetails:
                reason: reason
                status: SUCCESSFUL
              legalDocuments:
                - documentType: passport
                  documentNumber: Z9431P
                  documentIssuedDate: 1639939034000
                  documentExpirationDate: 1839939034000
                  documentIssuedCountry: DE
                  tags:
                    - key: customerType
                      value: wallet
                  nameOnDocument:
                    firstName: Baran
                    middleName: Realblood
                    lastName: Ozkan
              contactDetails:
                emailIds:
                  - emailIds
                contactNumbers:
                  - contactNumbers
                faxNumbers:
                  - faxNumbers
                websites:
                  - websites
                addresses:
                  - addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
              transactionLimits:
                maximumDailyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumWeeklyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumMonthlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumQuarterlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumYearlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
              riskLevel: VERY_HIGH
              acquisitionChannel: ORGANIC
              reasonForAccountOpening:
                - reasonForAccountOpening
              userSegment: RETAIL
              pepStatus:
                - isPepHit: true
                  pepCountry: pepCountry
              tags:
                - key: customKey
                  value: customValue
              userId: userId
              userDetails:
                name:
                  firstName: Baran
                  middleName: Realblood
                  lastName: Ozkan
                dateOfBirth: '1991-01-01'
                countryOfResidence: US
                countryOfNationality: DE
                gender: M
              createdTimestamp: 1.1
              executedRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  ruleHit: true
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              hitRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: FRAUD
    post-business-user-event:
      path: /events/business/user
      method: POST
      auth: true
      docs: >
        ## POST Business User Events


        `/events/business/user` endpoint allows you to operate on the Business
        User Events entity.


        User events are created after the initial `POST /business/users` call
        (which creates a user) and are used to:


        * Update the STATE and KYC Status of the user, using the
        `userStateDetails` or `kycStatusDetails` field

        * Update the user details, using the `updatedBusinessUserAttributes`
        field.


        > If you have neither of the above two use cases, you do not need to use
        user events. 


        ### Payload


        Each user event needs three mandatory fields:


        * `timestamp`- the timestamp of when the event was created or occured in
        your system

        * `userId` - The ID of the transaction for which this event is
        generated. 


        In order to make individual events retrievable, you also need to pass in
        a unique `eventId` to the request body.
      source:
        openapi: ../openapi.yml
      display-name: Create a Business User Event
      request:
        name: BusinessUserEvent
        body:
          properties:
            timestamp:
              type: double
              docs: Timestamp of the event
              validation:
                min: 1262300400000
                max: 4133890801000
            userId:
              type: string
              docs: Transaction ID the event pertains to
              validation:
                minLength: 1
            eventId:
              type: optional<string>
              docs: Unique event ID
            reason:
              type: optional<string>
              docs: Reason for the event or a state change
            eventDescription:
              type: optional<string>
              docs: Event description
            updatedBusinessUserAttributes:
              type: optional<BusinessOptional>
        content-type: application/json
      response:
        docs: Created
        type: BusinessWithRulesResult
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - TooManyRequestsError
      examples:
        - request:
            timestamp: 1.1
            userId: userId
          response:
            body:
              userStateDetails:
                userId: userId
                reason: reason
                state: UNACCEPTABLE
              kycStatusDetails:
                reason: reason
                status: SUCCESSFUL
              legalEntity:
                companyGeneralDetails:
                  legalName: Ozkan Hazelnut Export JSC
                  businessIndustry:
                    - Farming
                  mainProductsServicesSold:
                    - Hazelnut
                  userSegment: SOLE_PROPRIETORSHIP
                  userRegistrationStatus: REGISTERED
                  tags:
                    - key: customKey
                      value: customValue
                companyFinancialDetails:
                  expectedTransactionAmountPerMonth:
                    amountValue: 800
                    amountCurrency: GBP
                  expectedTurnoverPerMonth:
                    amountValue: 8000
                    amountCurrency: USD
                  tags:
                    - key: customKey
                      value: customValue
                companyRegistrationDetails:
                  registrationIdentifier: PSJ554342
                  registrationCountry: DE
                  taxIdentifier: taxIdentifier
                  legalEntityType: legalEntityType
                  dateOfRegistration: dateOfRegistration
                  tags:
                    - key: customKey
                      value: customValue
                reasonForAccountOpening:
                  - reasonForAccountOpening
                contactDetails:
                  emailIds:
                    - emailIds
                  contactNumbers:
                    - contactNumbers
                  faxNumbers:
                    - faxNumbers
                  websites:
                    - websites
                  addresses:
                    - addressLines:
                        - Klara-Franke Str 20
                      postcode: '10557'
                      city: Berlin
                      state: Berlin
                      country: Germany
                      tags:
                        - key: customKey
                          value: customValue
              shareHolders:
                - generalDetails:
                    name:
                      firstName: Baran
                      middleName: Realblood
                      lastName: Ozkan
                    dateOfBirth: '1991-01-01'
                    countryOfResidence: US
                    countryOfNationality: DE
                  legalDocuments:
                    - documentType: passport
                      documentNumber: Z9431P
                      documentIssuedDate: 1639939034000
                      documentExpirationDate: 1839939034000
                      documentIssuedCountry: DE
                      tags:
                        - key: customerType
                          value: wallet
                      nameOnDocument:
                        firstName: Baran
                        middleName: Realblood
                        lastName: Ozkan
                  contactDetails:
                    emailIds:
                      - baran@flagright.com
                    contactNumbers:
                      - +371 123132
                    websites:
                      - flagright.com
                    addresses:
                      - addressLines:
                          - Klara-Franke Str 20
                        postcode: '10557'
                        city: Berlin
                        state: Berlin
                        country: Germany
                        tags:
                          - key: customKey
                            value: customValue
                  pepStatus:
                    - isPepHit: true
                  tags:
                    - key: customKey
                      value: customValue
              directors:
                - generalDetails:
                    name:
                      firstName: Baran
                      middleName: Realblood
                      lastName: Ozkan
                    dateOfBirth: '1991-01-01'
                    countryOfResidence: US
                    countryOfNationality: DE
                  legalDocuments:
                    - documentType: passport
                      documentNumber: Z9431P
                      documentIssuedDate: 1639939034000
                      documentExpirationDate: 1839939034000
                      documentIssuedCountry: DE
                      tags:
                        - key: customerType
                          value: wallet
                      nameOnDocument:
                        firstName: Baran
                        middleName: Realblood
                        lastName: Ozkan
                  contactDetails:
                    emailIds:
                      - baran@flagright.com
                    contactNumbers:
                      - +371 123132
                    websites:
                      - flagright.com
                    addresses:
                      - addressLines:
                          - Klara-Franke Str 20
                        postcode: '10557'
                        city: Berlin
                        state: Berlin
                        country: Germany
                        tags:
                          - key: customKey
                            value: customValue
                  pepStatus:
                    - isPepHit: true
                  tags:
                    - key: customKey
                      value: customValue
              transactionLimits:
                maximumDailyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumWeeklyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumMonthlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumQuarterlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
                maximumYearlyTransactionLimit:
                  amountValue: 800
                  amountCurrency: GBP
              riskLevel: VERY_HIGH
              allowedPaymentMethods:
                - ACH
              linkedEntities:
                parentUserId: parentUserId
                childUserIds:
                  - childUserIds
              acquisitionChannel: ORGANIC
              savedPaymentDetails:
                - method: CHECK
                  checkNumber: savedPaymentDetails
                  checkIdentifier: savedPaymentDetails
                  name: savedPaymentDetails
                  deliveryStatus: COMPLETED
                  etaTimestamp: 1.1
                  shippingAddress:
                    addressLines:
                      - Klara-Franke Str 20
                    postcode: '10557'
                    city: Berlin
                    state: Berlin
                    country: Germany
                    tags:
                      - key: customKey
                        value: customValue
              mccDetails:
                code: 1.1
                description: description
              tags:
                - key: customKey
                  value: customValue
              userId: userId
              createdTimestamp: 1.1
              executedRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  ruleHit: true
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: AML
              hitRules:
                - ruleId: R-1a
                  ruleInstanceId: ruleInstanceId
                  ruleName: Proof of funds for high value transactions
                  ruleDescription: >-
                    If a user makes a remittance transaction >= 1800 in EUR -
                    ask for proof of funds
                  ruleAction: BLOCK
                  labels:
                    - UNEXPECTED_BEHAVIOR
                  nature: FRAUD
  source:
    openapi: ../openapi.yml
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "x-api-key",
      "auth-schemes": {
        "x-api-key": {
          "header": "x-api-key",
          "name": "apiKey",
          "type": "string",
        },
      },
      "default-environment": "Default",
      "display-name": "Flagright API",
      "environments": {
        "Default": "https://sandbox.api.flagright.com",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Flagright API
environments:
  Default: https://sandbox.api.flagright.com
default-environment: Default
auth-schemes:
  x-api-key:
    header: x-api-key
    name: apiKey
    type: string
auth: x-api-key
",
  },
}