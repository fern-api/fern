{
  "title": "Hume AI Batch API",
  "description": "The Batch API provides access to Hume models through an asynchronous job-based interface. You can submit a job to have many different files processed in parallel. The status of a job can then be checked with the job ID. Email notifications are available to alert on completed jobs.",
  "servers": [
    {
      "url": "https://api.hume.ai"
    }
  ],
  "websocketServers": [
    {
      "name": "prod",
      "url": "wss://api.hume.ai/v0/evi"
    }
  ],
  "tags": {
    "tagsById": {
      "Start Job": {
        "id": "Start Job"
      },
      "Get Job Predictions": {
        "id": "Get Job Predictions"
      },
      "List Jobs": {
        "id": "List Jobs"
      }
    },
    "orderedTagIds": [
      "Start Job",
      "Get Job Predictions",
      "List Jobs"
    ]
  },
  "hasEndpointsMarkedInternal": false,
  "endpoints": [
    {
      "summary": "List Jobs",
      "audiences": [],
      "operationId": "list_jobs",
      "tags": [
        "List Jobs"
      ],
      "pathParameters": [],
      "queryParameters": [
        {
          "description": "The maximum number of jobs to include in the response.",
          "name": "limit",
          "schema": {
            "generatedName": "ListJobsRequestLimit",
            "value": {
              "schema": {
                "default": 50,
                "type": "int"
              },
              "generatedName": "ListJobsRequestLimit",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        },
        {
          "description": "Include only jobs with these statuses.",
          "name": "status",
          "schema": {
            "generatedName": "ListJobsRequestStatus",
            "value": {
              "value": {
                "generatedName": "ListJobsRequestStatusItem",
                "schema": "Status",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "ListJobsRequestStatus",
              "groupName": [],
              "type": "array"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        },
        {
          "description": "Include only jobs that were created before or after `timestamp_ms`.",
          "name": "when",
          "schema": {
            "generatedName": "ListJobsRequestWhen",
            "value": {
              "generatedName": "ListJobsRequestWhen",
              "schema": "When",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        },
        {
          "description": "Defaults to the current date and time. See `when`.",
          "name": "timestamp_ms",
          "schema": {
            "generatedName": "ListJobsRequestTimestampMs",
            "value": {
              "schema": {
                "default": null,
                "type": "int64"
              },
              "generatedName": "ListJobsRequestTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        },
        {
          "description": "The job timestamp to sort by.",
          "name": "sort_by",
          "schema": {
            "generatedName": "ListJobsRequestSortBy",
            "value": {
              "generatedName": "ListJobsRequestSortBy",
              "schema": "SortBy",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        },
        {
          "description": "The sort direction.",
          "name": "direction",
          "schema": {
            "generatedName": "ListJobsRequestDirection",
            "value": {
              "generatedName": "ListJobsRequestDirection",
              "schema": "Direction",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        }
      ],
      "headers": [],
      "generatedRequestName": "ListJobsRequest",
      "response": {
        "description": "",
        "schema": {
          "value": {
            "generatedName": "ListJobsResponseItem",
            "schema": "Job_Request",
            "source": {
              "file": "../openapi.yaml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "generatedName": "ListJobsResponse",
          "groupName": [],
          "type": "array"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {},
      "servers": [],
      "description": "Sort and filter jobs.",
      "authed": true,
      "method": "GET",
      "path": "/v0/batch/jobs",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "value": [
                {
                  "properties": {
                    "user_id": {
                      "value": {
                        "value": "user_id",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "job_id": {
                      "value": {
                        "value": "job_id",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "request": {
                      "properties": {
                        "urls": {
                          "value": [
                            {
                              "value": {
                                "value": "urls",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        },
                        "callback_url": {
                          "value": {
                            "value": "callback_url",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "notify": {
                          "value": {
                            "value": true,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "files": {
                          "value": [
                            {
                              "properties": {
                                "md5sum": {
                                  "value": {
                                    "value": "md5sum",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "state": {
                      "value": {
                        "value": {
                          "created_timestamp_ms": {
                            "value": {
                              "value": 1000000,
                              "type": "int64"
                            },
                            "type": "primitive"
                          },
                          "status": {
                            "value": {
                              "value": "QUEUED",
                              "type": "string"
                            },
                            "type": "primitive"
                          }
                        },
                        "type": "discriminated"
                      },
                      "type": "oneOf"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "array"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yaml",
        "type": "openapi"
      }
    },
    {
      "summary": "Start Job",
      "audiences": [],
      "operationId": "start_job",
      "tags": [
        "Start Job"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "StartJobRequest",
      "request": {
        "schema": {
          "generatedName": "StartJobRequest",
          "schema": "BaseRequest",
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json; charset=utf-8",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "",
        "schema": {
          "generatedName": "StartJobResponse",
          "schema": "JobId",
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {},
      "servers": [],
      "description": "Start a new batch job.",
      "authed": true,
      "method": "POST",
      "path": "/v0/batch/jobs",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {},
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "job_id": {
                  "value": {
                    "value": "job_id",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yaml",
        "type": "openapi"
      }
    },
    {
      "summary": "Get Job Predictions",
      "audiences": [],
      "operationId": "get_job_predictions",
      "tags": [
        "Get Job Predictions"
      ],
      "pathParameters": [
        {
          "name": "id",
          "schema": {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "generatedName": "GetJobPredictionsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "GetJobPredictionsRequest",
      "response": {
        "description": "",
        "schema": {
          "value": {
            "generatedName": "GetJobPredictionsResponseItem",
            "schema": "SourceResult",
            "source": {
              "file": "../openapi.yaml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "generatedName": "GetJobPredictionsResponse",
          "groupName": [],
          "type": "array"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {},
      "servers": [],
      "description": "Get the JSON predictions of a completed job.",
      "authed": true,
      "method": "GET",
      "path": "/v0/batch/jobs/{id}/predictions",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "value": [
                {
                  "properties": {
                    "source": {
                      "value": {
                        "value": {
                          "url": {
                            "value": {
                              "value": "url",
                              "type": "string"
                            },
                            "type": "primitive"
                          },
                          "type": {
                            "value": {
                              "value": "url",
                              "type": "string"
                            },
                            "type": "primitive"
                          }
                        },
                        "type": "discriminated"
                      },
                      "type": "oneOf"
                    },
                    "results": {
                      "properties": {
                        "predictions": {
                          "value": [
                            {
                              "properties": {
                                "file": {
                                  "value": {
                                    "value": "file",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "models": {
                                  "properties": {},
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        },
                        "errors": {
                          "value": [
                            {
                              "properties": {
                                "message": {
                                  "value": {
                                    "value": "message",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "file": {
                                  "value": {
                                    "value": "file",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "error": {
                      "value": {
                        "value": "error",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "array"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yaml",
        "type": "openapi"
      }
    },
    {
      "summary": "Get Job Artifacts",
      "audiences": [],
      "operationId": "get_job_artifacts",
      "tags": [
        "Get Job Predictions"
      ],
      "pathParameters": [
        {
          "name": "id",
          "schema": {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "generatedName": "GetJobArtifactsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "GetJobArtifactsRequest",
      "response": {
        "description": "",
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "file"
      },
      "errors": {},
      "servers": [],
      "description": "Get the artifacts ZIP of a completed job.",
      "authed": true,
      "method": "GET",
      "path": "/v0/batch/jobs/{id}/artifacts",
      "examples": [],
      "source": {
        "file": "../openapi.yaml",
        "type": "openapi"
      }
    },
    {
      "summary": "Get Job Details",
      "audiences": [],
      "operationId": "get_job",
      "tags": [
        "Get Job Predictions"
      ],
      "pathParameters": [
        {
          "name": "id",
          "schema": {
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "generatedName": "GetJobRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "GetJobRequest",
      "response": {
        "description": "",
        "schema": {
          "generatedName": "GetJobResponse",
          "schema": "Job_Request",
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {},
      "servers": [],
      "description": "Get the request details and state of a given job.",
      "authed": true,
      "method": "GET",
      "path": "/v0/batch/jobs/{id}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "user_id": {
                  "value": {
                    "value": "user_id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "job_id": {
                  "value": {
                    "value": "job_id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "request": {
                  "properties": {
                    "models": {
                      "properties": {
                        "burst": {
                          "value": [
                            {
                              "key": {
                                "value": "key",
                                "type": "string"
                              },
                              "value": {
                                "value": {
                                  "value": {
                                    "value": "value",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "type": "unknown"
                              }
                            }
                          ],
                          "type": "map"
                        },
                        "facemesh": {
                          "value": [
                            {
                              "key": {
                                "value": "key",
                                "type": "string"
                              },
                              "value": {
                                "value": {
                                  "value": {
                                    "value": "value",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "type": "unknown"
                              }
                            }
                          ],
                          "type": "map"
                        }
                      },
                      "type": "object"
                    },
                    "transcription": {
                      "properties": {
                        "language": {
                          "value": "zh",
                          "type": "enum"
                        }
                      },
                      "type": "object"
                    },
                    "urls": {
                      "value": [
                        {
                          "value": {
                            "value": "urls",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      ],
                      "type": "array"
                    },
                    "callback_url": {
                      "value": {
                        "value": "callback_url",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "notify": {
                      "value": {
                        "value": true,
                        "type": "boolean"
                      },
                      "type": "primitive"
                    },
                    "files": {
                      "value": [
                        {
                          "properties": {
                            "md5sum": {
                              "value": {
                                "value": "md5sum",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "state": {
                  "value": {
                    "value": {
                      "created_timestamp_ms": {
                        "value": {
                          "value": 1000000,
                          "type": "int64"
                        },
                        "type": "primitive"
                      },
                      "status": {
                        "value": {
                          "value": "QUEUED",
                          "type": "string"
                        },
                        "type": "primitive"
                      }
                    },
                    "type": "discriminated"
                  },
                  "type": "oneOf"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yaml",
        "type": "openapi"
      }
    }
  ],
  "webhooks": [],
  "channels": {
    "/chat": {
      "audiences": [],
      "handshake": {
        "headers": [],
        "queryParameters": [
          {
            "name": "config_id",
            "schema": {
              "generatedName": "WebsocketConfigId",
              "title": "Config Id",
              "description": "The unique identifier for an EVI configuration.\n\nInclude this ID in your connection request to equip EVI with the Prompt, Language Model, Voice, and Tools associated with the specified configuration. If omitted, EVI will apply [default configuration settings](/docs/empathic-voice-interface-evi/configuration#default-configuration).\n\nFor help obtaining this ID, see our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration).",
              "value": {
                "description": "The unique identifier for an EVI configuration.\n\nInclude this ID in your connection request to equip EVI with the Prompt, Language Model, Voice, and Tools associated with the specified configuration. If omitted, EVI will apply [default configuration settings](/docs/empathic-voice-interface-evi/configuration#default-configuration).\n\nFor help obtaining this ID, see our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration).",
                "schema": {
                  "type": "string"
                },
                "generatedName": "WebsocketConfigId",
                "title": "Config Id",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "description": "The unique identifier for an EVI configuration.\n\nInclude this ID in your connection request to equip EVI with the Prompt, Language Model, Voice, and Tools associated with the specified configuration. If omitted, EVI will apply [default configuration settings](/docs/empathic-voice-interface-evi/configuration#default-configuration).\n\nFor help obtaining this ID, see our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration).",
            "source": {
              "file": "../asyncapi.json",
              "type": "openapi"
            }
          },
          {
            "name": "config_version",
            "schema": {
              "generatedName": "WebsocketConfigVersion",
              "title": "Config Version",
              "description": "The version number of the EVI configuration specified by the `config_id`.\n\nConfigs, as well as Prompts and Tools, are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nInclude this parameter to apply a specific version of an EVI configuration. If omitted, the latest version will be applied.",
              "value": {
                "description": "The version number of the EVI configuration specified by the `config_id`.\n\nConfigs, as well as Prompts and Tools, are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nInclude this parameter to apply a specific version of an EVI configuration. If omitted, the latest version will be applied.",
                "schema": {
                  "type": "int"
                },
                "generatedName": "WebsocketConfigVersion",
                "title": "Config Version",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "description": "The version number of the EVI configuration specified by the `config_id`.\n\nConfigs, as well as Prompts and Tools, are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nInclude this parameter to apply a specific version of an EVI configuration. If omitted, the latest version will be applied.",
            "source": {
              "file": "../asyncapi.json",
              "type": "openapi"
            }
          },
          {
            "name": "resumed_chat_group_id",
            "schema": {
              "generatedName": "WebsocketResumedChatGroupId",
              "title": "Resumed Chat Group Id",
              "description": "The unique identifier for a Chat Group. Use this field to preserve context from a previous Chat session.\n\nA Chat represents a single session from opening to closing a WebSocket connection. In contrast, a Chat Group is a series of resumed Chats that collectively represent a single conversation spanning multiple sessions. Each Chat includes a Chat Group ID, which is used to preserve the context of previous Chat sessions when starting a new one.\n\nIncluding the Chat Group ID in the `resumed_chat_group_id` query parameter is useful for seamlessly resuming a Chat after unexpected network disconnections and for picking up conversations exactly where you left off at a later time. This ensures preserved context across multiple sessions.\n\nThere are three ways to obtain the Chat Group ID:\n\n- [Chat Metadata](/reference/empathic-voice-interface-evi/chat/chat#receive.Chat%20Metadata.type): Upon establishing a WebSocket connection with EVI, the user receives a Chat Metadata message. This message contains a `chat_group_id`, which can be used to resume conversations within this chat group in future sessions.\n\n- [List Chats endpoint](/reference/empathic-voice-interface-evi/chats/list-chats): Use the GET `/v0/evi/chats` endpoint to obtain the Chat Group ID of individual Chat sessions. This endpoint lists all available Chat sessions and their associated Chat Group ID.\n\n- [List Chat Groups endpoint](/reference/empathic-voice-interface-evi/chat-groups/list-chat-groups): Use the GET `/v0/evi/chat_groups` endpoint to obtain the Chat Group IDs of all Chat Groups associated with an API key. This endpoint returns a list of all available chat groups.",
              "value": {
                "description": "The unique identifier for a Chat Group. Use this field to preserve context from a previous Chat session.\n\nA Chat represents a single session from opening to closing a WebSocket connection. In contrast, a Chat Group is a series of resumed Chats that collectively represent a single conversation spanning multiple sessions. Each Chat includes a Chat Group ID, which is used to preserve the context of previous Chat sessions when starting a new one.\n\nIncluding the Chat Group ID in the `resumed_chat_group_id` query parameter is useful for seamlessly resuming a Chat after unexpected network disconnections and for picking up conversations exactly where you left off at a later time. This ensures preserved context across multiple sessions.\n\nThere are three ways to obtain the Chat Group ID:\n\n- [Chat Metadata](/reference/empathic-voice-interface-evi/chat/chat#receive.Chat%20Metadata.type): Upon establishing a WebSocket connection with EVI, the user receives a Chat Metadata message. This message contains a `chat_group_id`, which can be used to resume conversations within this chat group in future sessions.\n\n- [List Chats endpoint](/reference/empathic-voice-interface-evi/chats/list-chats): Use the GET `/v0/evi/chats` endpoint to obtain the Chat Group ID of individual Chat sessions. This endpoint lists all available Chat sessions and their associated Chat Group ID.\n\n- [List Chat Groups endpoint](/reference/empathic-voice-interface-evi/chat-groups/list-chat-groups): Use the GET `/v0/evi/chat_groups` endpoint to obtain the Chat Group IDs of all Chat Groups associated with an API key. This endpoint returns a list of all available chat groups.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "WebsocketResumedChatGroupId",
                "title": "Resumed Chat Group Id",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "description": "The unique identifier for a Chat Group. Use this field to preserve context from a previous Chat session.\n\nA Chat represents a single session from opening to closing a WebSocket connection. In contrast, a Chat Group is a series of resumed Chats that collectively represent a single conversation spanning multiple sessions. Each Chat includes a Chat Group ID, which is used to preserve the context of previous Chat sessions when starting a new one.\n\nIncluding the Chat Group ID in the `resumed_chat_group_id` query parameter is useful for seamlessly resuming a Chat after unexpected network disconnections and for picking up conversations exactly where you left off at a later time. This ensures preserved context across multiple sessions.\n\nThere are three ways to obtain the Chat Group ID:\n\n- [Chat Metadata](/reference/empathic-voice-interface-evi/chat/chat#receive.Chat%20Metadata.type): Upon establishing a WebSocket connection with EVI, the user receives a Chat Metadata message. This message contains a `chat_group_id`, which can be used to resume conversations within this chat group in future sessions.\n\n- [List Chats endpoint](/reference/empathic-voice-interface-evi/chats/list-chats): Use the GET `/v0/evi/chats` endpoint to obtain the Chat Group ID of individual Chat sessions. This endpoint lists all available Chat sessions and their associated Chat Group ID.\n\n- [List Chat Groups endpoint](/reference/empathic-voice-interface-evi/chat-groups/list-chat-groups): Use the GET `/v0/evi/chat_groups` endpoint to obtain the Chat Group IDs of all Chat Groups associated with an API key. This endpoint returns a list of all available chat groups.",
            "source": {
              "file": "../asyncapi.json",
              "type": "openapi"
            }
          },
          {
            "name": "verbose_transcription",
            "schema": {
              "generatedName": "WebsocketVerboseTranscription",
              "title": "Verbose Transcription",
              "description": "A flag to enable verbose transcription. Set this query parameter to `\"true\"` to have unfinalized user transcripts be sent to the client as interim `UserMessage` messages.",
              "value": {
                "description": "A flag to enable verbose transcription. Set this query parameter to `\"true\"` to have unfinalized user transcripts be sent to the client as interim `UserMessage` messages.",
                "schema": {
                  "default": false,
                  "type": "boolean"
                },
                "generatedName": "WebsocketVerboseTranscription",
                "title": "Verbose Transcription",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "description": "A flag to enable verbose transcription. Set this query parameter to `\"true\"` to have unfinalized user transcripts be sent to the client as interim `UserMessage` messages.",
            "source": {
              "file": "../asyncapi.json",
              "type": "openapi"
            }
          },
          {
            "name": "access_token",
            "schema": {
              "generatedName": "WebsocketAccessToken",
              "title": "Access Token",
              "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
              "value": {
                "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
                "schema": {
                  "default": "",
                  "type": "string"
                },
                "generatedName": "WebsocketAccessToken",
                "title": "Access Token",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
            "source": {
              "file": "../asyncapi.json",
              "type": "openapi"
            }
          }
        ],
        "pathParameters": []
      },
      "groupName": [
        "/chat"
      ],
      "publish": {
        "value": {
          "generatedName": "PublishEvent",
          "schemas": [
            {
              "generatedName": "WebsocketZero",
              "schema": "AudioInput",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketOne",
              "schema": "SessionSettings",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketTwo",
              "schema": "UserInput",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketThree",
              "schema": "AssistantInput",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketFour",
              "schema": "ToolResponseMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketFive",
              "schema": "ToolErrorMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketSix",
              "schema": "PauseAssistantMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketSeven",
              "schema": "ResumeAssistantMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            }
          ],
          "source": {
            "file": "../asyncapi.json",
            "type": "openapi"
          },
          "type": "undiscriminated"
        },
        "type": "oneOf"
      },
      "subscribe": {
        "value": {
          "generatedName": "SubscribeEvent",
          "schemas": [
            {
              "generatedName": "WebsocketZero",
              "schema": "AssistantEnd",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketOne",
              "schema": "AssistantMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketTwo",
              "schema": "AudioOutput",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketThree",
              "schema": "ChatMetadata",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketFour",
              "schema": "Error",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketFive",
              "schema": "UserInterruption",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketSix",
              "schema": "UserMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketSeven",
              "schema": "ToolCallMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketEight",
              "schema": "ToolResponseMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "generatedName": "WebsocketNine",
              "schema": "ToolErrorMessage",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            }
          ],
          "source": {
            "file": "../asyncapi.json",
            "type": "openapi"
          },
          "type": "undiscriminated"
        },
        "type": "oneOf"
      },
      "servers": [
        {
          "name": "prod",
          "url": "wss://api.hume.ai/v0/evi"
        }
      ],
      "path": "/chat",
      "examples": [
        {
          "queryParameters": [],
          "headers": [],
          "messages": [
            {
              "messageType": "publish",
              "payload": {
                "properties": {
                  "type": {
                    "value": {
                      "value": "audio_input",
                      "type": "string"
                    },
                    "type": "literal"
                  },
                  "data": {
                    "value": {
                      "value": "data",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            },
            {
              "messageType": "subscribe",
              "payload": {
                "properties": {
                  "type": {
                    "value": {
                      "value": "assistant_end",
                      "type": "string"
                    },
                    "type": "literal"
                  }
                },
                "type": "object"
              }
            }
          ]
        }
      ],
      "source": {
        "file": "../asyncapi.json",
        "type": "openapi"
      }
    }
  },
  "groupedSchemas": {
    "rootSchemas": {
      "BaseRequest": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "baseRequestModels",
            "key": "models",
            "schema": {
              "generatedName": "baseRequestModels",
              "value": {
                "generatedName": "BaseRequestModels",
                "schema": "Models",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "baseRequestTranscription",
            "key": "transcription",
            "schema": {
              "generatedName": "baseRequestTranscription",
              "value": {
                "generatedName": "BaseRequestTranscription",
                "schema": "Transcription",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "baseRequestUrls",
            "key": "urls",
            "schema": {
              "generatedName": "baseRequestUrls",
              "value": {
                "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                "value": {
                  "schema": {
                    "format": "url",
                    "type": "string"
                  },
                  "generatedName": "BaseRequestUrlsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "BaseRequestUrls",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "baseRequestCallbackUrl",
            "key": "callback_url",
            "schema": {
              "generatedName": "baseRequestCallbackUrl",
              "value": {
                "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "generatedName": "BaseRequestCallbackUrl",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "baseRequestNotify",
            "key": "notify",
            "schema": {
              "generatedName": "baseRequestNotify",
              "value": {
                "description": "Whether to send an email notification to the user upon job failure.",
                "schema": {
                  "default": false,
                  "type": "boolean"
                },
                "generatedName": "BaseRequestNotify",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "BaseRequest",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Bcp47Tag": {
        "generatedName": "Bcp47Tag",
        "values": [
          {
            "generatedName": "zh",
            "value": "zh",
            "casing": {}
          },
          {
            "generatedName": "da",
            "value": "da",
            "casing": {}
          },
          {
            "generatedName": "nl",
            "value": "nl",
            "casing": {}
          },
          {
            "generatedName": "en",
            "value": "en",
            "casing": {}
          },
          {
            "generatedName": "EnAu",
            "value": "en-AU",
            "casing": {}
          },
          {
            "generatedName": "EnIn",
            "value": "en-IN",
            "casing": {}
          },
          {
            "generatedName": "EnNz",
            "value": "en-NZ",
            "casing": {}
          },
          {
            "generatedName": "EnGb",
            "value": "en-GB",
            "casing": {}
          },
          {
            "generatedName": "fr",
            "value": "fr",
            "casing": {}
          },
          {
            "generatedName": "FrCa",
            "value": "fr-CA",
            "casing": {}
          },
          {
            "generatedName": "de",
            "value": "de",
            "casing": {}
          },
          {
            "generatedName": "hi",
            "value": "hi",
            "casing": {}
          },
          {
            "generatedName": "HiLatn",
            "value": "hi-Latn",
            "casing": {}
          },
          {
            "generatedName": "id",
            "value": "id",
            "casing": {}
          },
          {
            "generatedName": "it",
            "value": "it",
            "casing": {}
          },
          {
            "generatedName": "ja",
            "value": "ja",
            "casing": {}
          },
          {
            "generatedName": "ko",
            "value": "ko",
            "casing": {}
          },
          {
            "generatedName": "no",
            "value": "no",
            "casing": {}
          },
          {
            "generatedName": "pl",
            "value": "pl",
            "casing": {}
          },
          {
            "generatedName": "pt",
            "value": "pt",
            "casing": {}
          },
          {
            "generatedName": "PtBr",
            "value": "pt-BR",
            "casing": {}
          },
          {
            "generatedName": "PtPt",
            "value": "pt-PT",
            "casing": {}
          },
          {
            "generatedName": "ru",
            "value": "ru",
            "casing": {}
          },
          {
            "generatedName": "es",
            "value": "es",
            "casing": {}
          },
          {
            "generatedName": "Es419",
            "value": "es-419",
            "casing": {}
          },
          {
            "generatedName": "sv",
            "value": "sv",
            "casing": {}
          },
          {
            "generatedName": "ta",
            "value": "ta",
            "casing": {}
          },
          {
            "generatedName": "tr",
            "value": "tr",
            "casing": {}
          },
          {
            "generatedName": "uk",
            "value": "uk",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "BoundingBox": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "boundingBoxX",
            "key": "x",
            "schema": {
              "description": "x-coordinate of bounding box top left corner.",
              "schema": {
                "type": "double"
              },
              "generatedName": "BoundingBoxX",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "boundingBoxY",
            "key": "y",
            "schema": {
              "description": "y-coordinate of bounding box top left corner.",
              "schema": {
                "type": "double"
              },
              "generatedName": "BoundingBoxY",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "boundingBoxW",
            "key": "w",
            "schema": {
              "description": "Bounding box width.",
              "schema": {
                "type": "double"
              },
              "generatedName": "BoundingBoxW",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "boundingBoxH",
            "key": "h",
            "schema": {
              "description": "Bounding box height.",
              "schema": {
                "type": "double"
              },
              "generatedName": "BoundingBoxH",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "A bounding box around a face.",
        "generatedName": "BoundingBox",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "BurstPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "burstPredictionTime",
            "key": "time",
            "schema": {
              "generatedName": "BurstPredictionTime",
              "schema": "TimeInterval",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "burstPredictionEmotions",
            "key": "emotions",
            "schema": {
              "description": "A high-dimensional embedding in emotion space.",
              "value": {
                "generatedName": "BurstPredictionEmotionsItem",
                "schema": "EmotionScore",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "BurstPredictionEmotions",
              "title": "Emotions Scores",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "burstPredictionDescriptions",
            "key": "descriptions",
            "schema": {
              "description": "Modality-specific descriptive features and their scores.",
              "value": {
                "generatedName": "BurstPredictionDescriptionsItem",
                "schema": "DescriptionsScore",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "BurstPredictionDescriptions",
              "title": "Descriptions Scores",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "BurstPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Completed": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "completedCreatedTimestampMs",
            "key": "created_timestamp_ms",
            "schema": {
              "description": "When this job was created (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "CompletedCreatedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "completedStartedTimestampMs",
            "key": "started_timestamp_ms",
            "schema": {
              "description": "When this job started (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "CompletedStartedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "completedEndedTimestampMs",
            "key": "ended_timestamp_ms",
            "schema": {
              "description": "When this job ended (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "CompletedEndedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "completedNumPredictions",
            "key": "num_predictions",
            "schema": {
              "description": "The number of predictions that were generated by this job.",
              "schema": {
                "type": "int"
              },
              "generatedName": "CompletedNumPredictions",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "completedNumErrors",
            "key": "num_errors",
            "schema": {
              "description": "The number of errors that occurred while running this job.",
              "schema": {
                "type": "int"
              },
              "generatedName": "CompletedNumErrors",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Completed",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "DescriptionsScore": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "descriptionsScoreName",
            "key": "name",
            "schema": {
              "description": "Name of the descriptive feature being expressed.",
              "schema": {
                "type": "string"
              },
              "generatedName": "DescriptionsScoreName",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "descriptionsScoreScore",
            "key": "score",
            "schema": {
              "description": "Embedding value for the descriptive feature being expressed.",
              "schema": {
                "type": "string"
              },
              "generatedName": "DescriptionsScoreScore",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "DescriptionsScore",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Direction": {
        "generatedName": "Direction",
        "values": [
          {
            "generatedName": "asc",
            "value": "asc",
            "casing": {}
          },
          {
            "generatedName": "desc",
            "value": "desc",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "EmotionScore": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "emotionScoreName",
            "key": "name",
            "schema": {
              "description": "Name of the emotion being expressed.",
              "schema": {
                "type": "string"
              },
              "generatedName": "EmotionScoreName",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "emotionScoreScore",
            "key": "score",
            "schema": {
              "description": "Embedding value for the emotion being expressed.",
              "schema": {
                "type": "string"
              },
              "generatedName": "EmotionScoreScore",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "EmotionScore",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Empty": {
        "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
        "key": {
          "schema": {
            "type": "string"
          },
          "generatedName": "EmptyKey",
          "groupName": [],
          "type": "primitive"
        },
        "value": {
          "generatedName": "EmptyValue",
          "type": "unknown"
        },
        "generatedName": "Empty",
        "groupName": [],
        "type": "map"
      },
      "Error": {
        "description": "When provided, the output is an error message.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "ErrorType",
              "title": "Type",
              "value": {
                "value": "error",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; for a Web Socket Error message, this must be `error`.\n\nThis message indicates a disruption in the WebSocket connection, such as an unexpected disconnection, protocol error, or data transmission issue.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "errorType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "Error",
              "generatedName": "errorCustomSessionId",
              "title": "Error",
              "value": {
                "generatedName": "ErrorCustomSessionId",
                "value": {
                  "generatedName": "ErrorCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "errorCustomSessionId"
          },
          {
            "key": "code",
            "schema": {
              "nameOverride": "Code",
              "generatedName": "ErrorCode",
              "title": "Code",
              "schema": {
                "type": "string"
              },
              "description": "Error code. Identifies the type of error encountered.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "errorCode"
          },
          {
            "key": "slug",
            "schema": {
              "nameOverride": "Slug",
              "generatedName": "ErrorSlug",
              "title": "Slug",
              "schema": {
                "type": "string"
              },
              "description": "Short, human-readable identifier and description for the error. See a complete list of error slugs on the [Errors page](/docs/resources/errors).",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "errorSlug"
          },
          {
            "key": "message",
            "schema": {
              "nameOverride": "Message",
              "generatedName": "ErrorMessage",
              "title": "Message",
              "schema": {
                "type": "string"
              },
              "description": "Detailed description of the error.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "errorMessage"
          }
        ],
        "nameOverride": "Error",
        "generatedName": "Error",
        "title": "Error",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "Face": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "faceFpsPred",
            "key": "fps_pred",
            "schema": {
              "generatedName": "faceFpsPred",
              "value": {
                "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame.",
                "schema": {
                  "default": 3,
                  "type": "double"
                },
                "generatedName": "FaceFpsPred",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "faceProbThreshold",
            "key": "prob_threshold",
            "schema": {
              "generatedName": "faceProbThreshold",
              "value": {
                "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                "schema": {
                  "default": 0.99,
                  "minimum": 0,
                  "maximum": 1,
                  "type": "double"
                },
                "generatedName": "FaceProbThreshold",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "faceIdentifyFaces",
            "key": "identify_faces",
            "schema": {
              "generatedName": "faceIdentifyFaces",
              "value": {
                "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID.",
                "schema": {
                  "default": false,
                  "type": "boolean"
                },
                "generatedName": "FaceIdentifyFaces",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "faceMinFaceSize",
            "key": "min_face_size",
            "schema": {
              "generatedName": "faceMinFaceSize",
              "value": {
                "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                "schema": {
                  "type": "uint64"
                },
                "generatedName": "FaceMinFaceSize",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "faceFacs",
            "key": "facs",
            "schema": {
              "generatedName": "faceFacs",
              "value": {
                "generatedName": "FaceFacs",
                "schema": "Empty",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "faceDescriptions",
            "key": "descriptions",
            "schema": {
              "generatedName": "faceDescriptions",
              "value": {
                "generatedName": "FaceDescriptions",
                "schema": "Empty",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "faceSaveFaces",
            "key": "save_faces",
            "schema": {
              "generatedName": "faceSaveFaces",
              "value": {
                "description": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
                "schema": {
                  "default": false,
                  "type": "boolean"
                },
                "generatedName": "FaceSaveFaces",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Face",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "FacePrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "facePredictionFrame",
            "key": "frame",
            "schema": {
              "description": "Frame number",
              "schema": {
                "type": "uint64"
              },
              "generatedName": "FacePredictionFrame",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "facePredictionTime",
            "key": "time",
            "schema": {
              "description": "Time in seconds when face detection occurred.",
              "schema": {
                "type": "double"
              },
              "generatedName": "FacePredictionTime",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "facePredictionProb",
            "key": "prob",
            "schema": {
              "description": "The predicted probability that a detected face was actually a face.",
              "schema": {
                "type": "double"
              },
              "generatedName": "FacePredictionProb",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "facePredictionBox",
            "key": "box",
            "schema": {
              "generatedName": "FacePredictionBox",
              "schema": "BoundingBox",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "facePredictionEmotions",
            "key": "emotions",
            "schema": {
              "description": "A high-dimensional embedding in emotion space.",
              "value": {
                "generatedName": "FacePredictionEmotionsItem",
                "schema": "EmotionScore",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "FacePredictionEmotions",
              "title": "Emotions Scores",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "facePredictionFacs",
            "key": "facs",
            "schema": {
              "generatedName": "facePredictionFacs",
              "value": {
                "description": "FACS 2.0 features and their scores.",
                "value": {
                  "generatedName": "FacePredictionFacsItem",
                  "schema": "FacsScore",
                  "source": {
                    "file": "../openapi.yaml",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "FacePredictionFacs",
                "title": "FACS 2.0 Scores",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "facePredictionDescriptions",
            "key": "descriptions",
            "schema": {
              "generatedName": "facePredictionDescriptions",
              "value": {
                "description": "Modality-specific descriptive features and their scores.",
                "value": {
                  "generatedName": "FacePredictionDescriptionsItem",
                  "schema": "DescriptionsScore",
                  "source": {
                    "file": "../openapi.yaml",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "FacePredictionDescriptions",
                "title": "Descriptions Scores",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FacePrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "FacemeshPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "facemeshPredictionEmotions",
            "key": "emotions",
            "schema": {
              "description": "A high-dimensional embedding in emotion space.",
              "value": {
                "generatedName": "FacemeshPredictionEmotionsItem",
                "schema": "EmotionScore",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "FacemeshPredictionEmotions",
              "title": "Emotions Scores",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FacemeshPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "FacsScore": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "facsScoreName",
            "key": "name",
            "schema": {
              "description": "Name of the FACS 2.0 feature being expressed.",
              "schema": {
                "type": "string"
              },
              "generatedName": "FacsScoreName",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "facsScoreScore",
            "key": "score",
            "schema": {
              "description": "Embedding value for the FACS 2.0 feature being expressed.",
              "schema": {
                "type": "string"
              },
              "generatedName": "FacsScoreScore",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FacsScore",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Failed": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "failedCreatedTimestampMs",
            "key": "created_timestamp_ms",
            "schema": {
              "description": "When this job was created (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "FailedCreatedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "failedStartedTimestampMs",
            "key": "started_timestamp_ms",
            "schema": {
              "description": "When this job started (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "FailedStartedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "failedEndedTimestampMs",
            "key": "ended_timestamp_ms",
            "schema": {
              "description": "When this job ended (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "FailedEndedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "failedMessage",
            "key": "message",
            "schema": {
              "description": "An error message.",
              "schema": {
                "type": "string"
              },
              "generatedName": "FailedMessage",
              "title": "Error Message",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Failed",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "File": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fileFilename",
            "key": "filename",
            "schema": {
              "generatedName": "fileFilename",
              "value": {
                "description": "The name of the file.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "FileFilename",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileContentType",
            "key": "content_type",
            "schema": {
              "generatedName": "fileContentType",
              "value": {
                "description": "The content type of the file.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "FileContentType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileMd5Sum",
            "key": "md5sum",
            "schema": {
              "description": "The MD5 checksum of the file.",
              "schema": {
                "type": "string"
              },
              "generatedName": "FileMd5Sum",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "File",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Granularity": {
        "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
        "generatedName": "Granularity",
        "values": [
          {
            "generatedName": "word",
            "value": "word",
            "casing": {}
          },
          {
            "generatedName": "sentence",
            "value": "sentence",
            "casing": {}
          },
          {
            "generatedName": "utterance",
            "value": "utterance",
            "casing": {}
          },
          {
            "generatedName": "conversational_turn",
            "value": "conversational_turn",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "GroupedPredictions_BurstPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "groupedPredictionsBurstPredictionId",
            "key": "id",
            "schema": {
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GroupedPredictionsBurstPredictionId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupedPredictionsBurstPredictionPredictions",
            "key": "predictions",
            "schema": {
              "value": {
                "generatedName": "GroupedPredictionsBurstPredictionPredictionsItem",
                "schema": "BurstPrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "GroupedPredictionsBurstPredictionPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "GroupedPredictionsBurstPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "GroupedPredictions_FacePrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "groupedPredictionsFacePredictionId",
            "key": "id",
            "schema": {
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GroupedPredictionsFacePredictionId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupedPredictionsFacePredictionPredictions",
            "key": "predictions",
            "schema": {
              "value": {
                "generatedName": "GroupedPredictionsFacePredictionPredictionsItem",
                "schema": "FacePrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "GroupedPredictionsFacePredictionPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "GroupedPredictionsFacePrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "GroupedPredictions_FacemeshPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "groupedPredictionsFacemeshPredictionId",
            "key": "id",
            "schema": {
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GroupedPredictionsFacemeshPredictionId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupedPredictionsFacemeshPredictionPredictions",
            "key": "predictions",
            "schema": {
              "value": {
                "generatedName": "GroupedPredictionsFacemeshPredictionPredictionsItem",
                "schema": "FacemeshPrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "GroupedPredictionsFacemeshPredictionPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "GroupedPredictionsFacemeshPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "GroupedPredictions_LanguagePrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "groupedPredictionsLanguagePredictionId",
            "key": "id",
            "schema": {
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GroupedPredictionsLanguagePredictionId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupedPredictionsLanguagePredictionPredictions",
            "key": "predictions",
            "schema": {
              "value": {
                "generatedName": "GroupedPredictionsLanguagePredictionPredictionsItem",
                "schema": "LanguagePrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "GroupedPredictionsLanguagePredictionPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "GroupedPredictionsLanguagePrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "GroupedPredictions_NerPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "groupedPredictionsNerPredictionId",
            "key": "id",
            "schema": {
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GroupedPredictionsNerPredictionId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupedPredictionsNerPredictionPredictions",
            "key": "predictions",
            "schema": {
              "value": {
                "generatedName": "GroupedPredictionsNerPredictionPredictionsItem",
                "schema": "NerPrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "GroupedPredictionsNerPredictionPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "GroupedPredictionsNerPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "GroupedPredictions_ProsodyPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "groupedPredictionsProsodyPredictionId",
            "key": "id",
            "schema": {
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GroupedPredictionsProsodyPredictionId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupedPredictionsProsodyPredictionPredictions",
            "key": "predictions",
            "schema": {
              "value": {
                "generatedName": "GroupedPredictionsProsodyPredictionPredictionsItem",
                "schema": "ProsodyPrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "GroupedPredictionsProsodyPredictionPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "GroupedPredictionsProsodyPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "InProgress": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "inProgressCreatedTimestampMs",
            "key": "created_timestamp_ms",
            "schema": {
              "description": "When this job was created (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "InProgressCreatedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "inProgressStartedTimestampMs",
            "key": "started_timestamp_ms",
            "schema": {
              "description": "When this job started (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "InProgressStartedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "InProgress",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Job_Request": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "jobRequestUserId",
            "key": "user_id",
            "schema": {
              "description": "Your user ID.",
              "schema": {
                "format": "uuid",
                "type": "string"
              },
              "generatedName": "JobRequestUserId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "jobRequestJobId",
            "key": "job_id",
            "schema": {
              "description": "The ID associated with this job.",
              "schema": {
                "format": "uuid",
                "type": "string"
              },
              "generatedName": "JobRequestJobId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "jobRequestRequest",
            "key": "request",
            "schema": {
              "generatedName": "JobRequestRequest",
              "schema": "Request",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "jobRequestState",
            "key": "state",
            "schema": {
              "generatedName": "JobRequestState",
              "schema": "State",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "JobRequest",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "JobId": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "jobIdJobId",
            "key": "job_id",
            "schema": {
              "description": "The ID of the started job.",
              "schema": {
                "format": "uuid",
                "type": "string"
              },
              "generatedName": "JobIdJobId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "JobId",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Language": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "languageGranularity",
            "key": "granularity",
            "schema": {
              "generatedName": "languageGranularity",
              "value": {
                "generatedName": "LanguageGranularity",
                "schema": "Granularity",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "languageIdentifySpeakers",
            "key": "identify_speakers",
            "schema": {
              "generatedName": "languageIdentifySpeakers",
              "value": {
                "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                "schema": {
                  "default": false,
                  "type": "boolean"
                },
                "generatedName": "LanguageIdentifySpeakers",
                "title": "Identify Speakers",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "languageSentiment",
            "key": "sentiment",
            "schema": {
              "generatedName": "languageSentiment",
              "value": {
                "generatedName": "LanguageSentiment",
                "schema": "Empty",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "languageToxicity",
            "key": "toxicity",
            "schema": {
              "generatedName": "languageToxicity",
              "value": {
                "generatedName": "LanguageToxicity",
                "schema": "Empty",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Language",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LanguagePrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "languagePredictionText",
            "key": "text",
            "schema": {
              "description": "A segment of text (like a word or a sentence).",
              "schema": {
                "type": "string"
              },
              "generatedName": "LanguagePredictionText",
              "nameOverride": "Text",
              "title": "Text",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "languagePredictionPosition",
            "key": "position",
            "schema": {
              "generatedName": "LanguagePredictionPosition",
              "schema": "PositionInterval",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "languagePredictionTime",
            "key": "time",
            "schema": {
              "generatedName": "languagePredictionTime",
              "value": {
                "generatedName": "LanguagePredictionTime",
                "schema": "TimeInterval",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "languagePredictionConfidence",
            "key": "confidence",
            "schema": {
              "generatedName": "languagePredictionConfidence",
              "value": {
                "description": "Value between `0.0` and `1.0` that indicates our transcription model’s relative confidence in this text.",
                "schema": {
                  "type": "double"
                },
                "generatedName": "LanguagePredictionConfidence",
                "nameOverride": "Confidence",
                "title": "Confidence",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "languagePredictionSpeakerConfidence",
            "key": "speaker_confidence",
            "schema": {
              "generatedName": "languagePredictionSpeakerConfidence",
              "value": {
                "description": "Value between `0.0` and `1.0` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
                "schema": {
                  "type": "double"
                },
                "generatedName": "LanguagePredictionSpeakerConfidence",
                "title": "Speaker Confidence",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "languagePredictionEmotions",
            "key": "emotions",
            "schema": {
              "description": "A high-dimensional embedding in emotion space.",
              "value": {
                "generatedName": "LanguagePredictionEmotionsItem",
                "schema": "EmotionScore",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "LanguagePredictionEmotions",
              "title": "Emotions Scores",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "languagePredictionSentiment",
            "key": "sentiment",
            "schema": {
              "generatedName": "languagePredictionSentiment",
              "value": {
                "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
                "value": {
                  "generatedName": "LanguagePredictionSentimentItem",
                  "schema": "SentimentScore",
                  "source": {
                    "file": "../openapi.yaml",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "LanguagePredictionSentiment",
                "title": "Sentiment Scores",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "languagePredictionToxicity",
            "key": "toxicity",
            "schema": {
              "generatedName": "languagePredictionToxicity",
              "value": {
                "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`.",
                "value": {
                  "generatedName": "LanguagePredictionToxicityItem",
                  "schema": "ToxicityScore",
                  "source": {
                    "file": "../openapi.yaml",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "LanguagePredictionToxicity",
                "title": "Toxicity Scores",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LanguagePrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Models": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "modelsFace",
            "key": "face",
            "schema": {
              "generatedName": "modelsFace",
              "value": {
                "generatedName": "ModelsFace",
                "schema": "Face",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsBurst",
            "key": "burst",
            "schema": {
              "generatedName": "modelsBurst",
              "value": {
                "generatedName": "ModelsBurst",
                "schema": "Empty",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsProsody",
            "key": "prosody",
            "schema": {
              "generatedName": "modelsProsody",
              "value": {
                "generatedName": "ModelsProsody",
                "schema": "Prosody",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsLanguage",
            "key": "language",
            "schema": {
              "generatedName": "modelsLanguage",
              "value": {
                "generatedName": "ModelsLanguage",
                "schema": "Language",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsNer",
            "key": "ner",
            "schema": {
              "generatedName": "modelsNer",
              "value": {
                "generatedName": "ModelsNer",
                "schema": "Ner",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsFacemesh",
            "key": "facemesh",
            "schema": {
              "generatedName": "modelsFacemesh",
              "value": {
                "generatedName": "ModelsFacemesh",
                "schema": "Empty",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Models",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "ModelsPredictions": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "modelsPredictionsFace",
            "key": "face",
            "schema": {
              "generatedName": "modelsPredictionsFace",
              "value": {
                "generatedName": "ModelsPredictionsFace",
                "schema": "Predictions_optional_Null_FacePrediction",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsPredictionsBurst",
            "key": "burst",
            "schema": {
              "generatedName": "modelsPredictionsBurst",
              "value": {
                "generatedName": "ModelsPredictionsBurst",
                "schema": "Predictions_optional_Null_BurstPrediction",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsPredictionsProsody",
            "key": "prosody",
            "schema": {
              "generatedName": "modelsPredictionsProsody",
              "value": {
                "generatedName": "ModelsPredictionsProsody",
                "schema": "Predictions_optional_TranscriptionMetadata_ProsodyPrediction",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsPredictionsLanguage",
            "key": "language",
            "schema": {
              "generatedName": "modelsPredictionsLanguage",
              "value": {
                "generatedName": "ModelsPredictionsLanguage",
                "schema": "Predictions_optional_TranscriptionMetadata_LanguagePrediction",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsPredictionsNer",
            "key": "ner",
            "schema": {
              "generatedName": "modelsPredictionsNer",
              "value": {
                "generatedName": "ModelsPredictionsNer",
                "schema": "Predictions_optional_TranscriptionMetadata_NerPrediction",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "modelsPredictionsFacemesh",
            "key": "facemesh",
            "schema": {
              "generatedName": "modelsPredictionsFacemesh",
              "value": {
                "generatedName": "ModelsPredictionsFacemesh",
                "schema": "Predictions_optional_Null_FacemeshPrediction",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ModelsPredictions",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Ner": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "nerIdentifySpeakers",
            "key": "identify_speakers",
            "schema": {
              "generatedName": "nerIdentifySpeakers",
              "value": {
                "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                "schema": {
                  "default": false,
                  "type": "boolean"
                },
                "generatedName": "NerIdentifySpeakers",
                "title": "Identify Speakers",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Ner",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "NerPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "nerPredictionEntity",
            "key": "entity",
            "schema": {
              "description": "The recognized topic or entity.",
              "schema": {
                "type": "string"
              },
              "generatedName": "NerPredictionEntity",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionPosition",
            "key": "position",
            "schema": {
              "generatedName": "NerPredictionPosition",
              "schema": "PositionInterval",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionEntityConfidence",
            "key": "entity_confidence",
            "schema": {
              "description": "Our NER model's relative confidence in the recognized topic or entity.",
              "schema": {
                "type": "double"
              },
              "generatedName": "NerPredictionEntityConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionSupport",
            "key": "support",
            "schema": {
              "description": "A measure of how often the entity is linked to by other entities.",
              "schema": {
                "type": "double"
              },
              "generatedName": "NerPredictionSupport",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionUri",
            "key": "uri",
            "schema": {
              "description": "A URL which provides more information about the recognized topic or entity.",
              "schema": {
                "type": "string"
              },
              "generatedName": "NerPredictionUri",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionLinkWord",
            "key": "link_word",
            "schema": {
              "description": "The specific word to which the emotion predictions are linked.",
              "schema": {
                "type": "string"
              },
              "generatedName": "NerPredictionLinkWord",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionTime",
            "key": "time",
            "schema": {
              "generatedName": "nerPredictionTime",
              "value": {
                "generatedName": "NerPredictionTime",
                "schema": "TimeInterval",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionConfidence",
            "key": "confidence",
            "schema": {
              "generatedName": "nerPredictionConfidence",
              "value": {
                "description": "Value between `0.0` and `1.0` that indicates our transcription model’s relative confidence in this text.",
                "schema": {
                  "type": "double"
                },
                "generatedName": "NerPredictionConfidence",
                "nameOverride": "Confidence",
                "title": "Confidence",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionSpeakerConfidence",
            "key": "speaker_confidence",
            "schema": {
              "generatedName": "nerPredictionSpeakerConfidence",
              "value": {
                "description": "Value between `0.0` and `1.0` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
                "schema": {
                  "type": "double"
                },
                "generatedName": "NerPredictionSpeakerConfidence",
                "title": "Speaker Confidence",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "nerPredictionEmotions",
            "key": "emotions",
            "schema": {
              "description": "A high-dimensional embedding in emotion space.",
              "value": {
                "generatedName": "NerPredictionEmotionsItem",
                "schema": "EmotionScore",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "NerPredictionEmotions",
              "title": "Emotions Scores",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "NerPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Null": {
        "description": "No associated metadata for this model. Value will be `null`.",
        "key": {
          "schema": {
            "type": "string"
          },
          "generatedName": "NullKey",
          "groupName": [],
          "type": "primitive"
        },
        "value": {
          "generatedName": "NullValue",
          "type": "unknown"
        },
        "generatedName": "Null",
        "groupName": [],
        "type": "map"
      },
      "PositionInterval": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "positionIntervalBegin",
            "key": "begin",
            "schema": {
              "description": "The index of the first character in the text segment, inclusive.",
              "schema": {
                "type": "uint64"
              },
              "generatedName": "PositionIntervalBegin",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "positionIntervalEnd",
            "key": "end",
            "schema": {
              "description": "The index of the last character in the text segment, exclusive.",
              "schema": {
                "type": "uint64"
              },
              "generatedName": "PositionIntervalEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
        "generatedName": "PositionInterval",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Prediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "predictionFile",
            "key": "file",
            "schema": {
              "description": "A file path relative to the top level source URL or file.",
              "schema": {
                "type": "string"
              },
              "generatedName": "PredictionFile",
              "nameOverride": "File",
              "title": "File",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "predictionModels",
            "key": "models",
            "schema": {
              "generatedName": "PredictionModels",
              "schema": "ModelsPredictions",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Prediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Predictions_optional_Null_BurstPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "predictionsOptionalNullBurstPredictionMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "predictionsOptionalNullBurstPredictionMetadata",
              "value": {
                "generatedName": "PredictionsOptionalNullBurstPredictionMetadata",
                "schema": "Null",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "predictionsOptionalNullBurstPredictionGroupedPredictions",
            "key": "grouped_predictions",
            "schema": {
              "value": {
                "generatedName": "PredictionsOptionalNullBurstPredictionGroupedPredictionsItem",
                "schema": "GroupedPredictions_BurstPrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "PredictionsOptionalNullBurstPredictionGroupedPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "PredictionsOptionalNullBurstPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Predictions_optional_Null_FacePrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "predictionsOptionalNullFacePredictionMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "predictionsOptionalNullFacePredictionMetadata",
              "value": {
                "generatedName": "PredictionsOptionalNullFacePredictionMetadata",
                "schema": "Null",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "predictionsOptionalNullFacePredictionGroupedPredictions",
            "key": "grouped_predictions",
            "schema": {
              "value": {
                "generatedName": "PredictionsOptionalNullFacePredictionGroupedPredictionsItem",
                "schema": "GroupedPredictions_FacePrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "PredictionsOptionalNullFacePredictionGroupedPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "PredictionsOptionalNullFacePrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Predictions_optional_Null_FacemeshPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "predictionsOptionalNullFacemeshPredictionMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "predictionsOptionalNullFacemeshPredictionMetadata",
              "value": {
                "generatedName": "PredictionsOptionalNullFacemeshPredictionMetadata",
                "schema": "Null",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "predictionsOptionalNullFacemeshPredictionGroupedPredictions",
            "key": "grouped_predictions",
            "schema": {
              "value": {
                "generatedName": "PredictionsOptionalNullFacemeshPredictionGroupedPredictionsItem",
                "schema": "GroupedPredictions_FacemeshPrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "PredictionsOptionalNullFacemeshPredictionGroupedPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "PredictionsOptionalNullFacemeshPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Predictions_optional_TranscriptionMetadata_LanguagePrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "predictionsOptionalTranscriptionMetadataLanguagePredictionMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "predictionsOptionalTranscriptionMetadataLanguagePredictionMetadata",
              "value": {
                "generatedName": "PredictionsOptionalTranscriptionMetadataLanguagePredictionMetadata",
                "schema": "TranscriptionMetadata",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "predictionsOptionalTranscriptionMetadataLanguagePredictionGroupedPredictions",
            "key": "grouped_predictions",
            "schema": {
              "value": {
                "generatedName": "PredictionsOptionalTranscriptionMetadataLanguagePredictionGroupedPredictionsItem",
                "schema": "GroupedPredictions_LanguagePrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "PredictionsOptionalTranscriptionMetadataLanguagePredictionGroupedPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Predictions_optional_TranscriptionMetadata_NerPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "predictionsOptionalTranscriptionMetadataNerPredictionMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "predictionsOptionalTranscriptionMetadataNerPredictionMetadata",
              "value": {
                "generatedName": "PredictionsOptionalTranscriptionMetadataNerPredictionMetadata",
                "schema": "TranscriptionMetadata",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "predictionsOptionalTranscriptionMetadataNerPredictionGroupedPredictions",
            "key": "grouped_predictions",
            "schema": {
              "value": {
                "generatedName": "PredictionsOptionalTranscriptionMetadataNerPredictionGroupedPredictionsItem",
                "schema": "GroupedPredictions_NerPrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "PredictionsOptionalTranscriptionMetadataNerPredictionGroupedPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "PredictionsOptionalTranscriptionMetadataNerPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Predictions_optional_TranscriptionMetadata_ProsodyPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "predictionsOptionalTranscriptionMetadataProsodyPredictionMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "predictionsOptionalTranscriptionMetadataProsodyPredictionMetadata",
              "value": {
                "generatedName": "PredictionsOptionalTranscriptionMetadataProsodyPredictionMetadata",
                "schema": "TranscriptionMetadata",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "predictionsOptionalTranscriptionMetadataProsodyPredictionGroupedPredictions",
            "key": "grouped_predictions",
            "schema": {
              "value": {
                "generatedName": "PredictionsOptionalTranscriptionMetadataProsodyPredictionGroupedPredictionsItem",
                "schema": "GroupedPredictions_ProsodyPrediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "PredictionsOptionalTranscriptionMetadataProsodyPredictionGroupedPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Prosody": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "prosodyGranularity",
            "key": "granularity",
            "schema": {
              "generatedName": "prosodyGranularity",
              "value": {
                "generatedName": "ProsodyGranularity",
                "schema": "Granularity",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "prosodyIdentifySpeakers",
            "key": "identify_speakers",
            "schema": {
              "generatedName": "prosodyIdentifySpeakers",
              "value": {
                "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                "schema": {
                  "default": false,
                  "type": "boolean"
                },
                "generatedName": "ProsodyIdentifySpeakers",
                "title": "Identify Speakers",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "prosodyWindow",
            "key": "window",
            "schema": {
              "generatedName": "prosodyWindow",
              "value": {
                "generatedName": "ProsodyWindow",
                "schema": "Window",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "NOTE: the `granularity` field is ignored if transcription is not enabled or if the `window` field has been set.",
        "generatedName": "Prosody",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "ProsodyPrediction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "prosodyPredictionText",
            "key": "text",
            "schema": {
              "generatedName": "prosodyPredictionText",
              "value": {
                "description": "A segment of text (like a word or a sentence).",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ProsodyPredictionText",
                "nameOverride": "Text",
                "title": "Text",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "prosodyPredictionTime",
            "key": "time",
            "schema": {
              "generatedName": "ProsodyPredictionTime",
              "schema": "TimeInterval",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "prosodyPredictionConfidence",
            "key": "confidence",
            "schema": {
              "generatedName": "prosodyPredictionConfidence",
              "value": {
                "description": "Value between `0.0` and `1.0` that indicates our transcription model’s relative confidence in this text.",
                "schema": {
                  "type": "double"
                },
                "generatedName": "ProsodyPredictionConfidence",
                "nameOverride": "Confidence",
                "title": "Confidence",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "prosodyPredictionSpeakerConfidence",
            "key": "speaker_confidence",
            "schema": {
              "generatedName": "prosodyPredictionSpeakerConfidence",
              "value": {
                "description": "Value between `0.0` and `1.0` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
                "schema": {
                  "type": "double"
                },
                "generatedName": "ProsodyPredictionSpeakerConfidence",
                "title": "Speaker Confidence",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "prosodyPredictionEmotions",
            "key": "emotions",
            "schema": {
              "description": "A high-dimensional embedding in emotion space.",
              "value": {
                "generatedName": "ProsodyPredictionEmotionsItem",
                "schema": "EmotionScore",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "ProsodyPredictionEmotions",
              "title": "Emotions Scores",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ProsodyPrediction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Queued": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "queuedCreatedTimestampMs",
            "key": "created_timestamp_ms",
            "schema": {
              "description": "When this job was created (Unix timestamp in milliseconds).",
              "schema": {
                "type": "int64"
              },
              "generatedName": "QueuedCreatedTimestampMs",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Queued",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Request": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestModels",
            "key": "models",
            "schema": {
              "generatedName": "requestModels",
              "value": {
                "generatedName": "RequestModels",
                "schema": "Models",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestTranscription",
            "key": "transcription",
            "schema": {
              "generatedName": "requestTranscription",
              "value": {
                "generatedName": "RequestTranscription",
                "schema": "Transcription",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestUrls",
            "key": "urls",
            "schema": {
              "generatedName": "requestUrls",
              "value": {
                "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                "value": {
                  "schema": {
                    "format": "url",
                    "type": "string"
                  },
                  "generatedName": "RequestUrlsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "RequestUrls",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestCallbackUrl",
            "key": "callback_url",
            "schema": {
              "generatedName": "requestCallbackUrl",
              "value": {
                "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "generatedName": "RequestCallbackUrl",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestNotify",
            "key": "notify",
            "schema": {
              "generatedName": "requestNotify",
              "value": {
                "description": "Whether to send an email notification to the user upon job completion/failure.",
                "schema": {
                  "default": false,
                  "type": "boolean"
                },
                "generatedName": "RequestNotify",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestFiles",
            "key": "files",
            "schema": {
              "value": {
                "generatedName": "RequestFilesItem",
                "schema": "File",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "RequestFiles",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Request",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Results": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "resultsPredictions",
            "key": "predictions",
            "schema": {
              "value": {
                "generatedName": "ResultsPredictionsItem",
                "schema": "Prediction",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "ResultsPredictions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "resultsErrors",
            "key": "errors",
            "schema": {
              "value": {
                "generatedName": "ResultsErrorsItem",
                "schema": "Error",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "ResultsErrors",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Results",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "SentimentScore": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "sentimentScoreName",
            "key": "name",
            "schema": {
              "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)",
              "schema": {
                "type": "string"
              },
              "generatedName": "SentimentScoreName",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sentimentScoreScore",
            "key": "score",
            "schema": {
              "description": "Prediction for this level of sentiment",
              "schema": {
                "type": "string"
              },
              "generatedName": "SentimentScoreScore",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "SentimentScore",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "SortBy": {
        "generatedName": "SortBy",
        "values": [
          {
            "generatedName": "created",
            "value": "created",
            "casing": {}
          },
          {
            "generatedName": "started",
            "value": "started",
            "casing": {}
          },
          {
            "generatedName": "ended",
            "value": "ended",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "Source": {
        "value": {
          "commonProperties": [],
          "discriminantProperty": "type",
          "generatedName": "Source",
          "schemas": {
            "url": {
              "generatedName": "ComponentsSchemasSourceUrl",
              "schema": "Source_Url",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "file": {
              "generatedName": "ComponentsSchemasSourceFile",
              "schema": "Source_File",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            }
          },
          "groupName": [],
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          },
          "type": "discriminated"
        },
        "type": "oneOf"
      },
      "SourceResult": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "sourceResultSource",
            "key": "source",
            "schema": {
              "generatedName": "SourceResultSource",
              "schema": "Source",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "sourceResultResults",
            "key": "results",
            "schema": {
              "generatedName": "sourceResultResults",
              "value": {
                "generatedName": "SourceResultResults",
                "schema": "Results",
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "sourceResultError",
            "key": "error",
            "schema": {
              "generatedName": "sourceResultError",
              "value": {
                "description": "An error message.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SourceResultError",
                "title": "Error Message",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "SourceResult",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Source_File": {
        "allOf": [
          {
            "generatedName": "File",
            "schema": "File",
            "source": {
              "file": "../openapi.yaml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [],
        "allOfPropertyConflicts": [],
        "generatedName": "SourceFile",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Source_Url": {
        "allOf": [
          {
            "generatedName": "Url",
            "schema": "Url",
            "source": {
              "file": "../openapi.yaml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [],
        "allOfPropertyConflicts": [],
        "generatedName": "SourceUrl",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Url": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "urlUrl",
            "key": "url",
            "schema": {
              "description": "The URL of the source media file.",
              "schema": {
                "type": "string"
              },
              "generatedName": "UrlUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Url",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "State": {
        "value": {
          "commonProperties": [],
          "discriminantProperty": "status",
          "generatedName": "State",
          "schemas": {
            "QUEUED": {
              "generatedName": "ComponentsSchemasStateQueued",
              "schema": "State_Queued",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "IN_PROGRESS": {
              "generatedName": "ComponentsSchemasStateInProgress",
              "schema": "State_InProgress",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "COMPLETED": {
              "generatedName": "ComponentsSchemasStateCompleted",
              "schema": "State_Completed",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "FAILED": {
              "generatedName": "ComponentsSchemasStateFailed",
              "schema": "State_Failed",
              "source": {
                "file": "../openapi.yaml",
                "type": "openapi"
              },
              "type": "reference"
            }
          },
          "groupName": [],
          "source": {
            "file": "../openapi.yaml",
            "type": "openapi"
          },
          "type": "discriminated"
        },
        "type": "oneOf"
      },
      "State_Completed": {
        "allOf": [
          {
            "generatedName": "Completed",
            "schema": "Completed",
            "source": {
              "file": "../openapi.yaml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [],
        "allOfPropertyConflicts": [],
        "generatedName": "StateCompleted",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "State_Failed": {
        "allOf": [
          {
            "generatedName": "Failed",
            "schema": "Failed",
            "source": {
              "file": "../openapi.yaml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [],
        "allOfPropertyConflicts": [],
        "generatedName": "StateFailed",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "State_InProgress": {
        "allOf": [
          {
            "generatedName": "InProgress",
            "schema": "InProgress",
            "source": {
              "file": "../openapi.yaml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [],
        "allOfPropertyConflicts": [],
        "generatedName": "StateInProgress",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "State_Queued": {
        "allOf": [
          {
            "generatedName": "Queued",
            "schema": "Queued",
            "source": {
              "file": "../openapi.yaml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [],
        "allOfPropertyConflicts": [],
        "generatedName": "StateQueued",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Status": {
        "generatedName": "Status",
        "values": [
          {
            "generatedName": "QUEUED",
            "value": "QUEUED",
            "casing": {}
          },
          {
            "generatedName": "IN_PROGRESS",
            "value": "IN_PROGRESS",
            "casing": {}
          },
          {
            "generatedName": "COMPLETED",
            "value": "COMPLETED",
            "casing": {}
          },
          {
            "generatedName": "FAILED",
            "value": "FAILED",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "TimeInterval": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "timeIntervalBegin",
            "key": "begin",
            "schema": {
              "description": "Beginning of time range in seconds.",
              "schema": {
                "type": "double"
              },
              "generatedName": "TimeIntervalBegin",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "timeIntervalEnd",
            "key": "end",
            "schema": {
              "description": "End of time range in seconds.",
              "schema": {
                "type": "double"
              },
              "generatedName": "TimeIntervalEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "A time range with a beginning and end, measured in seconds.",
        "generatedName": "TimeInterval",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "ToxicityScore": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "toxicityScoreName",
            "key": "name",
            "schema": {
              "description": "Category of toxicity.",
              "schema": {
                "type": "string"
              },
              "generatedName": "ToxicityScoreName",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "toxicityScoreScore",
            "key": "score",
            "schema": {
              "description": "Prediction for this category of toxicity",
              "schema": {
                "type": "string"
              },
              "generatedName": "ToxicityScoreScore",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ToxicityScore",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Transcription": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptionLanguage",
            "key": "language",
            "schema": {
              "generatedName": "transcriptionLanguage",
              "value": {
                "generatedName": "TranscriptionLanguage",
                "schema": "Bcp47Tag",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Transcription",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "TranscriptionMetadata": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptionMetadataConfidence",
            "key": "confidence",
            "schema": {
              "description": "Value between `0.0` and `1.0` indicating our transcription model’s relative confidence in the transcription of your media file.",
              "schema": {
                "type": "double"
              },
              "generatedName": "TranscriptionMetadataConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptionMetadataDetectedLanguage",
            "key": "detected_language",
            "schema": {
              "generatedName": "transcriptionMetadataDetectedLanguage",
              "value": {
                "generatedName": "TranscriptionMetadataDetectedLanguage",
                "schema": "Bcp47Tag",
                "groupName": [],
                "source": {
                  "file": "../openapi.yaml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "Transcription metadata for your media file.",
        "generatedName": "TranscriptionMetadata",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "When": {
        "generatedName": "When",
        "values": [
          {
            "generatedName": "created_before",
            "value": "created_before",
            "casing": {}
          },
          {
            "generatedName": "created_after",
            "value": "created_after",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "Window": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "windowLength",
            "key": "length",
            "schema": {
              "generatedName": "windowLength",
              "value": {
                "description": "The length of the sliding window.",
                "schema": {
                  "default": 4,
                  "minimum": 0.5,
                  "type": "double"
                },
                "generatedName": "WindowLength",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "windowStep",
            "key": "step",
            "schema": {
              "generatedName": "windowStep",
              "value": {
                "description": "The step size of the sliding window.",
                "schema": {
                  "default": 1,
                  "minimum": 0.5,
                  "type": "double"
                },
                "generatedName": "WindowStep",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Window",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yaml",
          "type": "openapi"
        },
        "type": "object"
      },
      "AssistantInput": {
        "description": "When provided, the input is spoken by EVI.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "AssistantInputType",
              "title": "Type",
              "value": {
                "value": "assistant_input",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; must be `assistant_input` for our server to correctly identify and process it as an Assistant Input message.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantInputType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "AssistantInput",
              "generatedName": "assistantInputCustomSessionId",
              "title": "AssistantInput",
              "value": {
                "generatedName": "AssistantInputCustomSessionId",
                "value": {
                  "generatedName": "AssistantInputCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantInputCustomSessionId"
          },
          {
            "key": "text",
            "schema": {
              "nameOverride": "Text",
              "generatedName": "AssistantInputText",
              "title": "Text",
              "schema": {
                "type": "string"
              },
              "description": "Assistant text to synthesize into spoken audio and insert into the conversation.\n\nEVI uses this text to generate spoken audio using our proprietary expressive text-to-speech model. Our model adds appropriate emotional inflections and tones to the text based on the user’s expressions and the context of the conversation. The synthesized audio is streamed back to the user as an [Assistant Message](/reference/empathic-voice-interface-evi/chat/chat#receive.Assistant%20Message.type).",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantInputText"
          }
        ],
        "nameOverride": "AssistantInput",
        "generatedName": "AssistantInput",
        "title": "AssistantInput",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "AudioConfiguration": {
        "properties": [
          {
            "key": "encoding",
            "schema": {
              "generatedName": "AudioConfigurationEncoding",
              "schema": "Encoding",
              "description": "Encoding format of the audio input, such as `linear16`.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioConfigurationEncoding",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "channels",
            "schema": {
              "nameOverride": "Channels",
              "generatedName": "AudioConfigurationChannels",
              "title": "Channels",
              "schema": {
                "type": "int"
              },
              "description": "Number of audio channels.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioConfigurationChannels"
          },
          {
            "key": "sample_rate",
            "schema": {
              "generatedName": "AudioConfigurationSampleRate",
              "title": "Sample Rate",
              "schema": {
                "type": "int"
              },
              "description": "Audio sample rate. Number of samples per second in the audio input, measured in Hertz.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioConfigurationSampleRate"
          }
        ],
        "nameOverride": "AudioConfiguration",
        "generatedName": "AudioConfiguration",
        "title": "AudioConfiguration",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "AudioInput": {
        "description": "When provided, the input is audio.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "AudioInputType",
              "title": "Type",
              "value": {
                "value": "audio_input",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; must be `audio_input` for our server to correctly identify and process it as an Audio Input message.\n\nThis message is used for sending audio input data to EVI for processing and expression measurement. Audio data should be sent as a continuous stream, encoded in Base64.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioInputType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "AudioInput",
              "generatedName": "audioInputCustomSessionId",
              "title": "AudioInput",
              "value": {
                "generatedName": "AudioInputCustomSessionId",
                "value": {
                  "generatedName": "AudioInputCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioInputCustomSessionId"
          },
          {
            "key": "data",
            "schema": {
              "nameOverride": "Data",
              "generatedName": "AudioInputData",
              "title": "Data",
              "schema": {
                "format": "base64",
                "type": "string"
              },
              "description": "Base64 encoded audio input to insert into the conversation.\n\nThe content of an Audio Input message is treated as the user’s speech to EVI and must be streamed continuously. Pre-recorded audio files are not supported.\n\nFor optimal transcription quality, the audio data should be transmitted in small chunks.\n\nHume recommends streaming audio with a buffer window of 20 milliseconds (ms), or 100 milliseconds (ms) for web applications.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioInputData"
          }
        ],
        "nameOverride": "AudioInput",
        "generatedName": "AudioInput",
        "title": "AudioInput",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "BuiltInTool": {
        "nameOverride": "BuiltInTool",
        "generatedName": "BuiltInTool",
        "title": "BuiltInTool",
        "values": [
          {
            "generatedName": "web_search",
            "value": "web_search",
            "casing": {}
          },
          {
            "generatedName": "hang_up",
            "value": "hang_up",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "BuiltinToolConfig": {
        "properties": [
          {
            "key": "name",
            "schema": {
              "generatedName": "BuiltinToolConfigName",
              "schema": "BuiltInTool",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "builtinToolConfigName",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "fallback_content",
            "schema": {
              "nameOverride": "BuiltinToolConfig",
              "generatedName": "builtinToolConfigFallbackContent",
              "title": "BuiltinToolConfig",
              "value": {
                "generatedName": "BuiltinToolConfigFallbackContent",
                "value": {
                  "generatedName": "BuiltinToolConfigFallbackContent",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Optional text passed to the supplemental LLM if the tool call fails. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "builtinToolConfigFallbackContent"
          }
        ],
        "nameOverride": "BuiltinToolConfig",
        "generatedName": "BuiltinToolConfig",
        "title": "BuiltinToolConfig",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "Context": {
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Context",
              "generatedName": "contextType",
              "title": "Context",
              "value": {
                "generatedName": "ContextType",
                "schema": "ContextType",
                "description": "The persistence level of the injected context. Specifies how long the injected context will remain active in the session.\n\nThere are three possible context types:\n\n- **Persistent**: The context is appended to all user messages for the duration of the session.\n\n- **Temporary**: The context is appended only to the next user message.\n\n - **Editable**: The original context is updated to reflect the new context.\n\n If the type is not specified, it will default to `temporary`.",
                "source": {
                  "file": "../asyncapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "contextType",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "text",
            "schema": {
              "nameOverride": "Text",
              "generatedName": "ContextText",
              "title": "Text",
              "schema": {
                "type": "string"
              },
              "description": "The context to be injected into the conversation. Helps inform the LLM's response by providing relevant information about the ongoing conversation.\n\nThis text will be appended to the end of user messages based on the chosen persistence level. For example, if you want to remind EVI of its role as a helpful weather assistant, the context you insert will be appended to the end of user messages as `{Context: You are a helpful weather assistant}`.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "contextText"
          }
        ],
        "nameOverride": "Context",
        "generatedName": "Context",
        "title": "Context",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ContextType": {
        "nameOverride": "ContextType",
        "generatedName": "ContextType",
        "title": "ContextType",
        "values": [
          {
            "generatedName": "editable",
            "value": "editable",
            "casing": {}
          },
          {
            "generatedName": "persistent",
            "value": "persistent",
            "casing": {}
          },
          {
            "generatedName": "temporary",
            "value": "temporary",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "Encoding": {
        "nameOverride": "Encoding",
        "generatedName": "Encoding",
        "title": "Encoding",
        "value": {
          "value": "linear16",
          "type": "string"
        },
        "groupName": [],
        "type": "literal"
      },
      "ErrorLevel": {
        "nameOverride": "ErrorLevel",
        "generatedName": "ErrorLevel",
        "title": "ErrorLevel",
        "value": {
          "value": "warn",
          "type": "string"
        },
        "groupName": [],
        "type": "literal"
      },
      "PauseAssistantMessage": {
        "description": "Pause responses from EVI. Chat history is still saved and sent after resuming. ",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "PauseAssistantMessage",
              "generatedName": "pauseAssistantMessageType",
              "title": "PauseAssistantMessage",
              "value": {
                "nameOverride": "Type",
                "generatedName": "PauseAssistantMessageType",
                "title": "Type",
                "value": {
                  "value": "pause_assistant_message",
                  "type": "string"
                },
                "groupName": [],
                "description": "The type of message sent through the socket; must be `pause_assistant_message` for our server to correctly identify and process it as a Pause Assistant message.\n\nOnce this message is sent, EVI will not respond until a [Resume Assistant message](/reference/empathic-voice-interface-evi/chat/chat#send.Resume%20Assistant%20Message.type) is sent. When paused, EVI won’t respond, but transcriptions of your audio inputs will still be recorded.",
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "pauseAssistantMessageType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "PauseAssistantMessage",
              "generatedName": "pauseAssistantMessageCustomSessionId",
              "title": "PauseAssistantMessage",
              "value": {
                "generatedName": "PauseAssistantMessageCustomSessionId",
                "value": {
                  "generatedName": "PauseAssistantMessageCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "pauseAssistantMessageCustomSessionId"
          }
        ],
        "nameOverride": "PauseAssistantMessage",
        "generatedName": "PauseAssistantMessage",
        "title": "PauseAssistantMessage",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResumeAssistantMessage": {
        "description": "Resume responses from EVI. Chat history sent while paused will now be sent. ",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "ResumeAssistantMessage",
              "generatedName": "resumeAssistantMessageType",
              "title": "ResumeAssistantMessage",
              "value": {
                "nameOverride": "Type",
                "generatedName": "ResumeAssistantMessageType",
                "title": "Type",
                "value": {
                  "value": "resume_assistant_message",
                  "type": "string"
                },
                "groupName": [],
                "description": "The type of message sent through the socket; must be `resume_assistant_message` for our server to correctly identify and process it as a Resume Assistant message.\n\nUpon resuming, if any audio input was sent during the pause, EVI will retain context from all messages sent but only respond to the last user message. (e.g., If you ask EVI two questions while paused and then send a `resume_assistant_message`, EVI will respond to the second question and have added the first question to its conversation context.)",
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "resumeAssistantMessageType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "ResumeAssistantMessage",
              "generatedName": "resumeAssistantMessageCustomSessionId",
              "title": "ResumeAssistantMessage",
              "value": {
                "generatedName": "ResumeAssistantMessageCustomSessionId",
                "value": {
                  "generatedName": "ResumeAssistantMessageCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "resumeAssistantMessageCustomSessionId"
          }
        ],
        "nameOverride": "ResumeAssistantMessage",
        "generatedName": "ResumeAssistantMessage",
        "title": "ResumeAssistantMessage",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "SessionSettings": {
        "description": "Settings for this chat session.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "SessionSettingsType",
              "title": "Type",
              "value": {
                "value": "session_settings",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; must be `session_settings` for our server to correctly identify and process it as a Session Settings message.\n\nSession settings are temporary and apply only to the current Chat session. These settings can be adjusted dynamically based on the requirements of each session to ensure optimal performance and user experience.\n\nFor more information, please refer to the [Session Settings section](/docs/empathic-voice-interface-evi/configuration#session-settings) on the EVI Configuration page.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsCustomSessionId",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsCustomSessionId",
                "value": {
                  "generatedName": "SessionSettingsCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Unique identifier for the session. Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.\n\nIf included, the response sent from Hume to your backend will include this ID. This allows you to correlate frontend users with their incoming messages.\n\nIt is recommended to pass a `custom_session_id` if you are using a Custom Language Model. Please see our guide to [using a custom language model](/docs/empathic-voice-interface-evi/custom-language-model) with EVI to learn more.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsCustomSessionId"
          },
          {
            "key": "system_prompt",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsSystemPrompt",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsSystemPrompt",
                "value": {
                  "generatedName": "SessionSettingsSystemPrompt",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Instructions used to shape EVI’s behavior, responses, and style for the session.\n\nWhen included in a Session Settings message, the provided Prompt overrides the existing one specified in the EVI configuration. If no Prompt was defined in the configuration, this Prompt will be the one used for the session.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting).",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsSystemPrompt"
          },
          {
            "key": "context",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsContext",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsContext",
                "value": {
                  "generatedName": "SessionSettingsContext",
                  "schema": "Context",
                  "source": {
                    "file": "../asyncapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "description": "Allows developers to inject additional context into the conversation, which is appended to the end of user messages for the session.\n\nWhen included in a Session Settings message, the provided context can be used to remind the LLM of its role in every user message, prevent it from forgetting important details, or add new relevant information to the conversation.\n\nSet to `null` to disable context injection.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsContext"
          },
          {
            "key": "audio",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsAudio",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsAudio",
                "value": {
                  "generatedName": "SessionSettingsAudio",
                  "schema": "AudioConfiguration",
                  "source": {
                    "file": "../asyncapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "description": "Configuration details for the audio input used during the session. Ensures the audio is being correctly set up for processing.\n\nThis optional field is only required when the audio input is encoded in PCM Linear 16 (16-bit, little-endian, signed PCM WAV data). For detailed instructions on how to configure session settings for PCM Linear 16 audio, please refer to the [Session Settings section](/docs/empathic-voice-interface-evi/configuration#session-settings) on the EVI Configuration page.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsAudio"
          },
          {
            "key": "language_model_api_key",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsLanguageModelApiKey",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsLanguageModelApiKey",
                "value": {
                  "generatedName": "SessionSettingsLanguageModelApiKey",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Third party API key for the supplemental language model.\n\nWhen provided, EVI will use this key instead of Hume’s API key for the supplemental LLM. This allows you to bypass rate limits and utilize your own API key as needed.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsLanguageModelApiKey"
          },
          {
            "key": "tools",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsTools",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsTools",
                "value": {
                  "generatedName": "SessionSettingsTools",
                  "value": {
                    "generatedName": "SessionSettingsToolsItem",
                    "schema": "Tool",
                    "source": {
                      "file": "../asyncapi.json",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "groupName": [],
                  "type": "array"
                },
                "description": "List of user-defined tools to enable for the session.\n\nTools are resources used by EVI to perform various tasks, such as searching the web or calling external APIs. Built-in tools, like web search, are natively integrated, while user-defined tools are created and invoked by the user. To learn more, see our [Tool Use Guide](/docs/empathic-voice-interface-evi/tool-use).",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsTools"
          },
          {
            "key": "builtin_tools",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsBuiltinTools",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsBuiltinTools",
                "value": {
                  "generatedName": "SessionSettingsBuiltinTools",
                  "value": {
                    "generatedName": "SessionSettingsBuiltinToolsItem",
                    "schema": "BuiltinToolConfig",
                    "source": {
                      "file": "../asyncapi.json",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "groupName": [],
                  "type": "array"
                },
                "description": "List of built-in tools to enable for the session.\n\nTools are resources used by EVI to perform various tasks, such as searching the web or calling external APIs. Built-in tools, like web search, are natively integrated, while user-defined tools are created and invoked by the user. To learn more, see our [Tool Use Guide](/docs/empathic-voice-interface-evi/tool-use).\n\nCurrently, the only built-in tool Hume provides is **Web Search**. When enabled, Web Search equips EVI with the ability to search the web for up-to-date information.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsBuiltinTools"
          },
          {
            "key": "metadata",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsMetadata",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsMetadata",
                "value": {
                  "generatedName": "SessionSettingsMetadata",
                  "key": {
                    "generatedName": "SessionSettingsMetadataKey",
                    "schema": {
                      "type": "string"
                    },
                    "groupName": []
                  },
                  "value": {
                    "generatedName": "SessionSettingsMetadataValue",
                    "groupName": [],
                    "type": "unknown"
                  },
                  "groupName": [],
                  "type": "map"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsMetadata"
          },
          {
            "key": "variables",
            "schema": {
              "nameOverride": "SessionSettings",
              "generatedName": "sessionSettingsVariables",
              "title": "SessionSettings",
              "value": {
                "generatedName": "SessionSettingsVariables",
                "value": {
                  "generatedName": "SessionSettingsVariables",
                  "key": {
                    "generatedName": "SessionSettingsVariablesKey",
                    "schema": {
                      "type": "string"
                    }
                  },
                  "value": {
                    "generatedName": "SessionSettingsVariablesValue",
                    "value": {
                      "generatedName": "SessionSettingsVariablesValue",
                      "schema": {
                        "type": "string"
                      },
                      "groupName": [],
                      "type": "primitive"
                    },
                    "groupName": [],
                    "inline": true,
                    "type": "nullable"
                  },
                  "groupName": [],
                  "type": "map"
                },
                "description": "Dynamic values that can be used to populate EVI prompts.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "sessionSettingsVariables"
          }
        ],
        "nameOverride": "SessionSettings",
        "generatedName": "SessionSettings",
        "title": "SessionSettings",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "Tool": {
        "properties": [
          {
            "key": "type",
            "schema": {
              "generatedName": "ToolType",
              "schema": "ToolType",
              "description": "Type of tool. Set to `function` for user-defined tools.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolType",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "name",
            "schema": {
              "nameOverride": "Name",
              "generatedName": "ToolName",
              "title": "Name",
              "schema": {
                "type": "string"
              },
              "description": "Name of the user-defined tool to be enabled.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolName"
          },
          {
            "key": "parameters",
            "schema": {
              "nameOverride": "Parameters",
              "generatedName": "ToolParameters",
              "title": "Parameters",
              "schema": {
                "type": "string"
              },
              "description": "Parameters of the tool. Is a stringified JSON schema.\n\nThese parameters define the inputs needed for the tool’s execution, including the expected data type and description for each input field. Structured as a JSON schema, this format ensures the tool receives data in the expected format.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolParameters"
          },
          {
            "key": "description",
            "schema": {
              "nameOverride": "Tool",
              "generatedName": "toolDescription",
              "title": "Tool",
              "value": {
                "generatedName": "ToolDescription",
                "value": {
                  "generatedName": "ToolDescription",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "An optional description of what the tool does, used by the supplemental LLM to choose when and how to call the function.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolDescription"
          },
          {
            "key": "fallback_content",
            "schema": {
              "nameOverride": "Tool",
              "generatedName": "toolFallbackContent",
              "title": "Tool",
              "value": {
                "generatedName": "ToolFallbackContent",
                "value": {
                  "generatedName": "ToolFallbackContent",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Optional text passed to the supplemental LLM if the tool call fails. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolFallbackContent"
          }
        ],
        "nameOverride": "Tool",
        "generatedName": "Tool",
        "title": "Tool",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ToolErrorMessage": {
        "description": "When provided, the output is a function call error.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "ToolErrorMessage",
              "generatedName": "toolErrorMessageType",
              "title": "ToolErrorMessage",
              "value": {
                "nameOverride": "Type",
                "generatedName": "ToolErrorMessageType",
                "title": "Type",
                "value": {
                  "value": "tool_error",
                  "type": "string"
                },
                "groupName": [],
                "description": "The type of message sent through the socket; for a Tool Error message, this must be `tool_error`.\n\nUpon receiving a [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type) and failing to invoke the function, this message is sent to notify EVI of the tool's failure.",
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolErrorMessageType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "ToolErrorMessage",
              "generatedName": "toolErrorMessageCustomSessionId",
              "title": "ToolErrorMessage",
              "value": {
                "generatedName": "ToolErrorMessageCustomSessionId",
                "value": {
                  "generatedName": "ToolErrorMessageCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolErrorMessageCustomSessionId"
          },
          {
            "key": "tool_type",
            "schema": {
              "nameOverride": "ToolErrorMessage",
              "generatedName": "toolErrorMessageToolType",
              "title": "ToolErrorMessage",
              "value": {
                "generatedName": "ToolErrorMessageToolType",
                "value": {
                  "generatedName": "ToolErrorMessageToolType",
                  "schema": "ToolType",
                  "source": {
                    "file": "../asyncapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "description": "Type of tool called. Either `builtin` for natively implemented tools, like web search, or `function` for user-defined tools.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolErrorMessageToolType"
          },
          {
            "key": "tool_call_id",
            "schema": {
              "generatedName": "ToolErrorMessageToolCallId",
              "title": "Tool Call Id",
              "schema": {
                "type": "string"
              },
              "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the Tool Error message is linked to the appropriate tool call request. The specified `tool_call_id` must match the one received in the [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type).",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolErrorMessageToolCallId"
          },
          {
            "key": "content",
            "schema": {
              "nameOverride": "ToolErrorMessage",
              "generatedName": "toolErrorMessageContent",
              "title": "ToolErrorMessage",
              "value": {
                "generatedName": "ToolErrorMessageContent",
                "value": {
                  "generatedName": "ToolErrorMessageContent",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the tool errors.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolErrorMessageContent"
          },
          {
            "key": "error",
            "schema": {
              "nameOverride": "Error",
              "generatedName": "ToolErrorMessageError",
              "title": "Error",
              "schema": {
                "type": "string"
              },
              "description": "Error message from the tool call, not exposed to the LLM or user.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolErrorMessageError"
          },
          {
            "key": "code",
            "schema": {
              "nameOverride": "ToolErrorMessage",
              "generatedName": "toolErrorMessageCode",
              "title": "ToolErrorMessage",
              "value": {
                "generatedName": "ToolErrorMessageCode",
                "value": {
                  "generatedName": "ToolErrorMessageCode",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Error code. Identifies the type of error encountered.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolErrorMessageCode"
          },
          {
            "key": "level",
            "schema": {
              "nameOverride": "ToolErrorMessage",
              "generatedName": "toolErrorMessageLevel",
              "title": "ToolErrorMessage",
              "value": {
                "generatedName": "ToolErrorMessageLevel",
                "value": {
                  "generatedName": "ToolErrorMessageLevel",
                  "schema": "ErrorLevel",
                  "source": {
                    "file": "../asyncapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "description": "Indicates the severity of an error; for a Tool Error message, this must be `warn` to signal an unexpected event.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolErrorMessageLevel"
          }
        ],
        "nameOverride": "ToolErrorMessage",
        "generatedName": "ToolErrorMessage",
        "title": "ToolErrorMessage",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ToolResponseMessage": {
        "description": "When provided, the output is a function call response.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "ToolResponseMessage",
              "generatedName": "toolResponseMessageType",
              "title": "ToolResponseMessage",
              "value": {
                "nameOverride": "Type",
                "generatedName": "ToolResponseMessageType",
                "title": "Type",
                "value": {
                  "value": "tool_response",
                  "type": "string"
                },
                "groupName": [],
                "description": "The type of message sent through the socket; for a Tool Response message, this must be `tool_response`.\n\nUpon receiving a [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type) and successfully invoking the function, this message is sent to convey the result of the function call back to EVI.",
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolResponseMessageType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "ToolResponseMessage",
              "generatedName": "toolResponseMessageCustomSessionId",
              "title": "ToolResponseMessage",
              "value": {
                "generatedName": "ToolResponseMessageCustomSessionId",
                "value": {
                  "generatedName": "ToolResponseMessageCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolResponseMessageCustomSessionId"
          },
          {
            "key": "tool_call_id",
            "schema": {
              "generatedName": "ToolResponseMessageToolCallId",
              "title": "Tool Call Id",
              "schema": {
                "type": "string"
              },
              "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the correct response is linked to the appropriate request. The specified `tool_call_id` must match the one received in the [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.tool_call_id).",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolResponseMessageToolCallId"
          },
          {
            "key": "content",
            "schema": {
              "nameOverride": "Content",
              "generatedName": "ToolResponseMessageContent",
              "title": "Content",
              "schema": {
                "type": "string"
              },
              "description": "Return value of the tool call. Contains the output generated by the tool to pass back to EVI.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolResponseMessageContent"
          },
          {
            "key": "tool_name",
            "schema": {
              "nameOverride": "ToolResponseMessage",
              "generatedName": "toolResponseMessageToolName",
              "title": "ToolResponseMessage",
              "value": {
                "generatedName": "ToolResponseMessageToolName",
                "value": {
                  "generatedName": "ToolResponseMessageToolName",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolResponseMessageToolName"
          },
          {
            "key": "tool_type",
            "schema": {
              "nameOverride": "ToolResponseMessage",
              "generatedName": "toolResponseMessageToolType",
              "title": "ToolResponseMessage",
              "value": {
                "generatedName": "ToolResponseMessageToolType",
                "value": {
                  "generatedName": "ToolResponseMessageToolType",
                  "schema": "ToolType",
                  "source": {
                    "file": "../asyncapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolResponseMessageToolType"
          }
        ],
        "nameOverride": "ToolResponseMessage",
        "generatedName": "ToolResponseMessage",
        "title": "ToolResponseMessage",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ToolType": {
        "nameOverride": "ToolType",
        "generatedName": "ToolType",
        "title": "ToolType",
        "values": [
          {
            "generatedName": "builtin",
            "value": "builtin",
            "casing": {}
          },
          {
            "generatedName": "function",
            "value": "function",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "UserInput": {
        "description": "User text to insert into the conversation. Text sent through a User Input message is treated as the user’s speech to EVI. EVI processes this input and provides a corresponding response.\n\nExpression measurement results are not available for User Input messages, as the prosody model relies on audio input and cannot process text alone.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "UserInputType",
              "title": "Type",
              "value": {
                "value": "user_input",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; must be `user_input` for our server to correctly identify and process it as a User Input message.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userInputType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "UserInput",
              "generatedName": "userInputCustomSessionId",
              "title": "UserInput",
              "value": {
                "generatedName": "UserInputCustomSessionId",
                "value": {
                  "generatedName": "UserInputCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userInputCustomSessionId"
          },
          {
            "key": "text",
            "schema": {
              "nameOverride": "Text",
              "generatedName": "UserInputText",
              "title": "Text",
              "schema": {
                "type": "string"
              },
              "description": "User text to insert into the conversation. Text sent through a User Input message is treated as the user’s speech to EVI. EVI processes this input and provides a corresponding response.\n\nExpression measurement results are not available for User Input messages, as the prosody model relies on audio input and cannot process text alone.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userInputText"
          }
        ],
        "nameOverride": "UserInput",
        "generatedName": "UserInput",
        "title": "UserInput",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "AssistantEnd": {
        "description": "When provided, the output is an assistant end message.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "AssistantEndType",
              "title": "Type",
              "value": {
                "value": "assistant_end",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; for an Assistant End message, this must be `assistant_end`.\n\nThis message indicates the conclusion of the assistant’s response, signaling that the assistant has finished speaking for the current conversational turn.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantEndType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "AssistantEnd",
              "generatedName": "assistantEndCustomSessionId",
              "title": "AssistantEnd",
              "value": {
                "generatedName": "AssistantEndCustomSessionId",
                "value": {
                  "generatedName": "AssistantEndCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantEndCustomSessionId"
          }
        ],
        "nameOverride": "AssistantEnd",
        "generatedName": "AssistantEnd",
        "title": "AssistantEnd",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "AssistantMessage": {
        "description": "When provided, the output is an assistant message.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "AssistantMessageType",
              "title": "Type",
              "value": {
                "value": "assistant_message",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; for an Assistant Message, this must be `assistant_message`.\n\nThis message contains both a transcript of the assistant’s response and the expression measurement predictions of the assistant’s audio output.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantMessageType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "AssistantMessage",
              "generatedName": "assistantMessageCustomSessionId",
              "title": "AssistantMessage",
              "value": {
                "generatedName": "AssistantMessageCustomSessionId",
                "value": {
                  "generatedName": "AssistantMessageCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantMessageCustomSessionId"
          },
          {
            "key": "id",
            "schema": {
              "nameOverride": "AssistantMessage",
              "generatedName": "assistantMessageId",
              "title": "AssistantMessage",
              "value": {
                "nameOverride": "Id",
                "generatedName": "AssistantMessageId",
                "title": "Id",
                "schema": {
                  "type": "string"
                },
                "description": "ID of the assistant message. Allows the Assistant Message to be tracked and referenced.",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantMessageId"
          },
          {
            "key": "message",
            "schema": {
              "generatedName": "AssistantMessageMessage",
              "schema": "ChatMessage",
              "description": "Transcript of the message.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantMessageMessage",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "models",
            "schema": {
              "generatedName": "AssistantMessageModels",
              "schema": "Inference",
              "description": "Inference model results.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantMessageModels",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "from_text",
            "schema": {
              "generatedName": "AssistantMessageFromText",
              "title": "From Text",
              "schema": {
                "type": "boolean"
              },
              "description": "Indicates if this message was inserted into the conversation as text from an [Assistant Input message](/reference/empathic-voice-interface-evi/chat/chat#send.Assistant%20Input.text).",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "assistantMessageFromText"
          }
        ],
        "nameOverride": "AssistantMessage",
        "generatedName": "AssistantMessage",
        "title": "AssistantMessage",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "AudioOutput": {
        "description": "The type of message sent through the socket; for an Audio Output message, this must be `audio_output`.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "AudioOutputType",
              "title": "Type",
              "value": {
                "value": "audio_output",
                "type": "string"
              },
              "groupName": [],
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioOutputType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "AudioOutput",
              "generatedName": "audioOutputCustomSessionId",
              "title": "AudioOutput",
              "value": {
                "generatedName": "AudioOutputCustomSessionId",
                "value": {
                  "generatedName": "AudioOutputCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioOutputCustomSessionId"
          },
          {
            "key": "id",
            "schema": {
              "nameOverride": "Id",
              "generatedName": "AudioOutputId",
              "title": "Id",
              "schema": {
                "type": "string"
              },
              "description": "ID of the audio output. Allows the Audio Output message to be tracked and referenced.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioOutputId"
          },
          {
            "key": "index",
            "schema": {
              "nameOverride": "Index",
              "generatedName": "AudioOutputIndex",
              "title": "Index",
              "schema": {
                "type": "int"
              },
              "description": "Index of the chunk of audio relative to the whole audio segment.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioOutputIndex"
          },
          {
            "key": "data",
            "schema": {
              "nameOverride": "Data",
              "generatedName": "AudioOutputData",
              "title": "Data",
              "schema": {
                "format": "base64",
                "type": "string"
              },
              "description": "Base64 encoded audio output. This encoded audio is transmitted to the client, where it can be decoded and played back as part of the user interaction.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioOutputData"
          },
          {
            "key": "is_final_chunk",
            "schema": {
              "generatedName": "AudioOutputIsFinalChunk",
              "title": "Is Final Chunk",
              "schema": {
                "type": "boolean"
              },
              "description": "This AudioOutput contains the final chunk for this particular segment.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "audioOutputIsFinalChunk"
          }
        ],
        "nameOverride": "AudioOutput",
        "generatedName": "AudioOutput",
        "title": "AudioOutput",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ChatMessage": {
        "properties": [
          {
            "key": "role",
            "schema": {
              "generatedName": "ChatMessageRole",
              "schema": "Role",
              "description": "Role of who is providing the message.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMessageRole",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "content",
            "schema": {
              "nameOverride": "ChatMessage",
              "generatedName": "chatMessageContent",
              "title": "ChatMessage",
              "value": {
                "generatedName": "ChatMessageContent",
                "value": {
                  "generatedName": "ChatMessageContent",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Transcript of the message.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMessageContent"
          },
          {
            "key": "tool_call",
            "schema": {
              "nameOverride": "ChatMessage",
              "generatedName": "chatMessageToolCall",
              "title": "ChatMessage",
              "value": {
                "generatedName": "ChatMessageToolCall",
                "value": {
                  "generatedName": "ChatMessageToolCall",
                  "schema": "ToolCallMessage",
                  "source": {
                    "file": "../asyncapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "description": "Function call name and arguments.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMessageToolCall"
          },
          {
            "key": "tool_result",
            "schema": {
              "nameOverride": "ChatMessage",
              "generatedName": "chatMessageToolResult",
              "title": "ChatMessage",
              "value": {
                "generatedName": "ChatMessageToolResult",
                "title": "Tool Result",
                "value": {
                  "value": {
                    "description": "Function call response from client.",
                    "generatedName": "ChatMessageToolResult",
                    "title": "Tool Result",
                    "schemas": [
                      {
                        "generatedName": "ChatMessageToolResultZero",
                        "schema": "ToolResponseMessage",
                        "source": {
                          "file": "../asyncapi.json",
                          "type": "openapi"
                        },
                        "type": "reference"
                      },
                      {
                        "generatedName": "ChatMessageToolResultOne",
                        "schema": "ToolErrorMessage",
                        "source": {
                          "file": "../asyncapi.json",
                          "type": "openapi"
                        },
                        "type": "reference"
                      }
                    ],
                    "groupName": [],
                    "source": {
                      "file": "../asyncapi.json",
                      "type": "openapi"
                    },
                    "type": "undiscriminated"
                  },
                  "type": "oneOf"
                },
                "description": "Function call response from client.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMessageToolResult"
          }
        ],
        "nameOverride": "ChatMessage",
        "generatedName": "ChatMessage",
        "title": "ChatMessage",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ChatMetadata": {
        "description": "When provided, the output is a chat metadata message.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "ChatMetadataType",
              "title": "Type",
              "value": {
                "value": "chat_metadata",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; for a Chat Metadata message, this must be `chat_metadata`.\n\nThe Chat Metadata message is the first message you receive after establishing a connection with EVI and contains important identifiers for the current Chat session.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMetadataType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "ChatMetadata",
              "generatedName": "chatMetadataCustomSessionId",
              "title": "ChatMetadata",
              "value": {
                "generatedName": "ChatMetadataCustomSessionId",
                "value": {
                  "generatedName": "ChatMetadataCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMetadataCustomSessionId"
          },
          {
            "key": "chat_group_id",
            "schema": {
              "generatedName": "ChatMetadataChatGroupId",
              "title": "Chat Group Id",
              "schema": {
                "type": "string"
              },
              "description": "ID of the Chat Group.\n\nUsed to resume a Chat when passed in the [resumed_chat_group_id](/reference/empathic-voice-interface-evi/chat/chat#request.query.resumed_chat_group_id) query parameter of a subsequent connection request. This allows EVI to continue the conversation from where it left off within the Chat Group.\n\nLearn more about [supporting chat resumability](/docs/empathic-voice-interface-evi/faq#does-evi-support-chat-resumability) from the EVI FAQ.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMetadataChatGroupId"
          },
          {
            "key": "chat_id",
            "schema": {
              "generatedName": "ChatMetadataChatId",
              "title": "Chat Id",
              "schema": {
                "type": "string"
              },
              "description": "ID of the Chat session. Allows the Chat session to be tracked and referenced.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMetadataChatId"
          },
          {
            "key": "request_id",
            "schema": {
              "generatedName": "ChatMetadataRequestId",
              "value": {
                "generatedName": "ChatMetadataRequestId",
                "schema": {
                  "type": "string"
                },
                "groupName": [],
                "type": "primitive"
              },
              "description": "ID of the initiating request.",
              "groupName": [],
              "type": "nullable"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "chatMetadataRequestId"
          }
        ],
        "nameOverride": "ChatMetadata",
        "generatedName": "ChatMetadata",
        "title": "ChatMetadata",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "EmotionScores": {
        "properties": [
          {
            "key": "Admiration",
            "schema": {
              "nameOverride": "Admiration",
              "generatedName": "EmotionScoresAdmiration",
              "title": "Admiration",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresAdmiration"
          },
          {
            "key": "Adoration",
            "schema": {
              "nameOverride": "Adoration",
              "generatedName": "EmotionScoresAdoration",
              "title": "Adoration",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresAdoration"
          },
          {
            "key": "Aesthetic Appreciation",
            "schema": {
              "generatedName": "EmotionScoresAestheticAppreciation",
              "title": "Aesthetic Appreciation",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresAestheticAppreciation"
          },
          {
            "key": "Amusement",
            "schema": {
              "nameOverride": "Amusement",
              "generatedName": "EmotionScoresAmusement",
              "title": "Amusement",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresAmusement"
          },
          {
            "key": "Anger",
            "schema": {
              "nameOverride": "Anger",
              "generatedName": "EmotionScoresAnger",
              "title": "Anger",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresAnger"
          },
          {
            "key": "Anxiety",
            "schema": {
              "nameOverride": "Anxiety",
              "generatedName": "EmotionScoresAnxiety",
              "title": "Anxiety",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresAnxiety"
          },
          {
            "key": "Awe",
            "schema": {
              "nameOverride": "Awe",
              "generatedName": "EmotionScoresAwe",
              "title": "Awe",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresAwe"
          },
          {
            "key": "Awkwardness",
            "schema": {
              "nameOverride": "Awkwardness",
              "generatedName": "EmotionScoresAwkwardness",
              "title": "Awkwardness",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresAwkwardness"
          },
          {
            "key": "Boredom",
            "schema": {
              "nameOverride": "Boredom",
              "generatedName": "EmotionScoresBoredom",
              "title": "Boredom",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresBoredom"
          },
          {
            "key": "Calmness",
            "schema": {
              "nameOverride": "Calmness",
              "generatedName": "EmotionScoresCalmness",
              "title": "Calmness",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresCalmness"
          },
          {
            "key": "Concentration",
            "schema": {
              "nameOverride": "Concentration",
              "generatedName": "EmotionScoresConcentration",
              "title": "Concentration",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresConcentration"
          },
          {
            "key": "Confusion",
            "schema": {
              "nameOverride": "Confusion",
              "generatedName": "EmotionScoresConfusion",
              "title": "Confusion",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresConfusion"
          },
          {
            "key": "Contemplation",
            "schema": {
              "nameOverride": "Contemplation",
              "generatedName": "EmotionScoresContemplation",
              "title": "Contemplation",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresContemplation"
          },
          {
            "key": "Contempt",
            "schema": {
              "nameOverride": "Contempt",
              "generatedName": "EmotionScoresContempt",
              "title": "Contempt",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresContempt"
          },
          {
            "key": "Contentment",
            "schema": {
              "nameOverride": "Contentment",
              "generatedName": "EmotionScoresContentment",
              "title": "Contentment",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresContentment"
          },
          {
            "key": "Craving",
            "schema": {
              "nameOverride": "Craving",
              "generatedName": "EmotionScoresCraving",
              "title": "Craving",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresCraving"
          },
          {
            "key": "Desire",
            "schema": {
              "nameOverride": "Desire",
              "generatedName": "EmotionScoresDesire",
              "title": "Desire",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresDesire"
          },
          {
            "key": "Determination",
            "schema": {
              "nameOverride": "Determination",
              "generatedName": "EmotionScoresDetermination",
              "title": "Determination",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresDetermination"
          },
          {
            "key": "Disappointment",
            "schema": {
              "nameOverride": "Disappointment",
              "generatedName": "EmotionScoresDisappointment",
              "title": "Disappointment",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresDisappointment"
          },
          {
            "key": "Disgust",
            "schema": {
              "nameOverride": "Disgust",
              "generatedName": "EmotionScoresDisgust",
              "title": "Disgust",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresDisgust"
          },
          {
            "key": "Distress",
            "schema": {
              "nameOverride": "Distress",
              "generatedName": "EmotionScoresDistress",
              "title": "Distress",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresDistress"
          },
          {
            "key": "Doubt",
            "schema": {
              "nameOverride": "Doubt",
              "generatedName": "EmotionScoresDoubt",
              "title": "Doubt",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresDoubt"
          },
          {
            "key": "Ecstasy",
            "schema": {
              "nameOverride": "Ecstasy",
              "generatedName": "EmotionScoresEcstasy",
              "title": "Ecstasy",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresEcstasy"
          },
          {
            "key": "Embarrassment",
            "schema": {
              "nameOverride": "Embarrassment",
              "generatedName": "EmotionScoresEmbarrassment",
              "title": "Embarrassment",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresEmbarrassment"
          },
          {
            "key": "Empathic Pain",
            "schema": {
              "generatedName": "EmotionScoresEmpathicPain",
              "title": "Empathic Pain",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresEmpathicPain"
          },
          {
            "key": "Entrancement",
            "schema": {
              "nameOverride": "Entrancement",
              "generatedName": "EmotionScoresEntrancement",
              "title": "Entrancement",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresEntrancement"
          },
          {
            "key": "Envy",
            "schema": {
              "nameOverride": "Envy",
              "generatedName": "EmotionScoresEnvy",
              "title": "Envy",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresEnvy"
          },
          {
            "key": "Excitement",
            "schema": {
              "nameOverride": "Excitement",
              "generatedName": "EmotionScoresExcitement",
              "title": "Excitement",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresExcitement"
          },
          {
            "key": "Fear",
            "schema": {
              "nameOverride": "Fear",
              "generatedName": "EmotionScoresFear",
              "title": "Fear",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresFear"
          },
          {
            "key": "Guilt",
            "schema": {
              "nameOverride": "Guilt",
              "generatedName": "EmotionScoresGuilt",
              "title": "Guilt",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresGuilt"
          },
          {
            "key": "Horror",
            "schema": {
              "nameOverride": "Horror",
              "generatedName": "EmotionScoresHorror",
              "title": "Horror",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresHorror"
          },
          {
            "key": "Interest",
            "schema": {
              "nameOverride": "Interest",
              "generatedName": "EmotionScoresInterest",
              "title": "Interest",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresInterest"
          },
          {
            "key": "Joy",
            "schema": {
              "nameOverride": "Joy",
              "generatedName": "EmotionScoresJoy",
              "title": "Joy",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresJoy"
          },
          {
            "key": "Love",
            "schema": {
              "nameOverride": "Love",
              "generatedName": "EmotionScoresLove",
              "title": "Love",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresLove"
          },
          {
            "key": "Nostalgia",
            "schema": {
              "nameOverride": "Nostalgia",
              "generatedName": "EmotionScoresNostalgia",
              "title": "Nostalgia",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresNostalgia"
          },
          {
            "key": "Pain",
            "schema": {
              "nameOverride": "Pain",
              "generatedName": "EmotionScoresPain",
              "title": "Pain",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresPain"
          },
          {
            "key": "Pride",
            "schema": {
              "nameOverride": "Pride",
              "generatedName": "EmotionScoresPride",
              "title": "Pride",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresPride"
          },
          {
            "key": "Realization",
            "schema": {
              "nameOverride": "Realization",
              "generatedName": "EmotionScoresRealization",
              "title": "Realization",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresRealization"
          },
          {
            "key": "Relief",
            "schema": {
              "nameOverride": "Relief",
              "generatedName": "EmotionScoresRelief",
              "title": "Relief",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresRelief"
          },
          {
            "key": "Romance",
            "schema": {
              "nameOverride": "Romance",
              "generatedName": "EmotionScoresRomance",
              "title": "Romance",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresRomance"
          },
          {
            "key": "Sadness",
            "schema": {
              "nameOverride": "Sadness",
              "generatedName": "EmotionScoresSadness",
              "title": "Sadness",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresSadness"
          },
          {
            "key": "Satisfaction",
            "schema": {
              "nameOverride": "Satisfaction",
              "generatedName": "EmotionScoresSatisfaction",
              "title": "Satisfaction",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresSatisfaction"
          },
          {
            "key": "Shame",
            "schema": {
              "nameOverride": "Shame",
              "generatedName": "EmotionScoresShame",
              "title": "Shame",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresShame"
          },
          {
            "key": "Surprise (negative)",
            "schema": {
              "generatedName": "EmotionScoresSurpriseNegative",
              "title": "Surprise (Negative)",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresSurpriseNegative"
          },
          {
            "key": "Surprise (positive)",
            "schema": {
              "generatedName": "EmotionScoresSurprisePositive",
              "title": "Surprise (Positive)",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresSurprisePositive"
          },
          {
            "key": "Sympathy",
            "schema": {
              "nameOverride": "Sympathy",
              "generatedName": "EmotionScoresSympathy",
              "title": "Sympathy",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresSympathy"
          },
          {
            "key": "Tiredness",
            "schema": {
              "nameOverride": "Tiredness",
              "generatedName": "EmotionScoresTiredness",
              "title": "Tiredness",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresTiredness"
          },
          {
            "key": "Triumph",
            "schema": {
              "nameOverride": "Triumph",
              "generatedName": "EmotionScoresTriumph",
              "title": "Triumph",
              "schema": {
                "type": "double"
              },
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "emotionScoresTriumph"
          }
        ],
        "nameOverride": "EmotionScores",
        "generatedName": "EmotionScores",
        "title": "EmotionScores",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "Inference": {
        "properties": [
          {
            "key": "prosody",
            "schema": {
              "generatedName": "InferenceProsody",
              "value": {
                "generatedName": "InferenceProsody",
                "schema": "ProsodyInference",
                "source": {
                  "file": "../asyncapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "description": "Prosody model inference results.\n\nEVI uses the prosody model to measure 48 emotions related to speech and vocal characteristics within a given expression.",
              "groupName": [],
              "type": "nullable"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "inferenceProsody"
          }
        ],
        "nameOverride": "Inference",
        "generatedName": "Inference",
        "title": "Inference",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "MillisecondInterval": {
        "properties": [
          {
            "key": "begin",
            "schema": {
              "nameOverride": "Begin",
              "generatedName": "MillisecondIntervalBegin",
              "title": "Begin",
              "schema": {
                "type": "int"
              },
              "description": "Start time of the interval in milliseconds.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "millisecondIntervalBegin"
          },
          {
            "key": "end",
            "schema": {
              "nameOverride": "End",
              "generatedName": "MillisecondIntervalEnd",
              "title": "End",
              "schema": {
                "type": "int"
              },
              "description": "End time of the interval in milliseconds.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "millisecondIntervalEnd"
          }
        ],
        "nameOverride": "MillisecondInterval",
        "generatedName": "MillisecondInterval",
        "title": "MillisecondInterval",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ProsodyInference": {
        "properties": [
          {
            "key": "scores",
            "schema": {
              "generatedName": "ProsodyInferenceScores",
              "schema": "EmotionScores",
              "description": "The confidence scores for 48 emotions within the detected expression of an audio sample.\n\nScores typically range from 0 to 1, with higher values indicating a stronger confidence level in the measured attribute.\n\nSee our guide on [interpreting expression measurement results](/docs/expression-measurement/faq#how-do-i-interpret-my-results) to learn more.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "prosodyInferenceScores",
            "readonly": false,
            "writeonly": false
          }
        ],
        "nameOverride": "ProsodyInference",
        "generatedName": "ProsodyInference",
        "title": "ProsodyInference",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "Role": {
        "nameOverride": "Role",
        "generatedName": "Role",
        "title": "Role",
        "values": [
          {
            "generatedName": "assistant",
            "value": "assistant",
            "casing": {}
          },
          {
            "generatedName": "system",
            "value": "system",
            "casing": {}
          },
          {
            "generatedName": "user",
            "value": "user",
            "casing": {}
          },
          {
            "generatedName": "all",
            "value": "all",
            "casing": {}
          },
          {
            "generatedName": "tool",
            "value": "tool",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "ToolCallMessage": {
        "description": "When provided, the output is a tool call.",
        "properties": [
          {
            "key": "name",
            "schema": {
              "nameOverride": "Name",
              "generatedName": "ToolCallMessageName",
              "title": "Name",
              "schema": {
                "type": "string"
              },
              "description": "Name of the tool called.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolCallMessageName"
          },
          {
            "key": "parameters",
            "schema": {
              "nameOverride": "Parameters",
              "generatedName": "ToolCallMessageParameters",
              "title": "Parameters",
              "schema": {
                "type": "string"
              },
              "description": "Parameters of the tool call. Is a stringified JSON schema.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolCallMessageParameters"
          },
          {
            "key": "tool_call_id",
            "schema": {
              "generatedName": "ToolCallMessageToolCallId",
              "title": "Tool Call Id",
              "schema": {
                "type": "string"
              },
              "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the correct response is linked to the appropriate request.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolCallMessageToolCallId"
          },
          {
            "key": "type",
            "schema": {
              "nameOverride": "ToolCallMessage",
              "generatedName": "toolCallMessageType",
              "title": "ToolCallMessage",
              "value": {
                "nameOverride": "Type",
                "generatedName": "ToolCallMessageType",
                "title": "Type",
                "value": {
                  "value": "tool_call",
                  "type": "string"
                },
                "groupName": [],
                "description": "The type of message sent through the socket; for a Tool Call message, this must be `tool_call`.\n\nThis message indicates that the supplemental LLM has detected a need to invoke the specified tool.",
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolCallMessageType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "ToolCallMessage",
              "generatedName": "toolCallMessageCustomSessionId",
              "title": "ToolCallMessage",
              "value": {
                "generatedName": "ToolCallMessageCustomSessionId",
                "value": {
                  "generatedName": "ToolCallMessageCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolCallMessageCustomSessionId"
          },
          {
            "key": "tool_type",
            "schema": {
              "generatedName": "ToolCallMessageToolType",
              "schema": "ToolType",
              "description": "Type of tool called. Either `builtin` for natively implemented tools, like web search, or `function` for user-defined tools.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolCallMessageToolType",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "response_required",
            "schema": {
              "generatedName": "ToolCallMessageResponseRequired",
              "title": "Response Required",
              "schema": {
                "type": "boolean"
              },
              "description": "Indicates whether a response to the tool call is required from the developer, either in the form of a [Tool Response message](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Response%20Message.type) or a [Tool Error message](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Error%20Message.type).",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "toolCallMessageResponseRequired"
          }
        ],
        "nameOverride": "ToolCallMessage",
        "generatedName": "ToolCallMessage",
        "title": "ToolCallMessage",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "UserInterruption": {
        "description": "When provided, the output is an interruption.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "UserInterruptionType",
              "title": "Type",
              "value": {
                "value": "user_interruption",
                "type": "string"
              },
              "groupName": [],
              "description": "The type of message sent through the socket; for a User Interruption message, this must be `user_interruption`.\n\nThis message indicates the user has interrupted the assistant’s response. EVI detects the interruption in real-time and sends this message to signal the interruption event. This message allows the system to stop the current audio playback, clear the audio queue, and prepare to handle new user input.",
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userInterruptionType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "UserInterruption",
              "generatedName": "userInterruptionCustomSessionId",
              "title": "UserInterruption",
              "value": {
                "generatedName": "UserInterruptionCustomSessionId",
                "value": {
                  "generatedName": "UserInterruptionCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userInterruptionCustomSessionId"
          },
          {
            "key": "time",
            "schema": {
              "nameOverride": "Time",
              "generatedName": "UserInterruptionTime",
              "title": "Time",
              "schema": {
                "type": "int"
              },
              "description": "Unix timestamp of the detected user interruption.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userInterruptionTime"
          }
        ],
        "nameOverride": "UserInterruption",
        "generatedName": "UserInterruption",
        "title": "UserInterruption",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "UserMessage": {
        "description": "When provided, the output is a user message.",
        "properties": [
          {
            "key": "type",
            "schema": {
              "nameOverride": "Type",
              "generatedName": "UserMessageType",
              "title": "Type",
              "value": {
                "value": "user_message",
                "type": "string"
              },
              "groupName": [],
              "type": "literal"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userMessageType"
          },
          {
            "key": "custom_session_id",
            "schema": {
              "nameOverride": "UserMessage",
              "generatedName": "userMessageCustomSessionId",
              "title": "UserMessage",
              "value": {
                "generatedName": "UserMessageCustomSessionId",
                "value": {
                  "generatedName": "UserMessageCustomSessionId",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userMessageCustomSessionId"
          },
          {
            "key": "message",
            "schema": {
              "generatedName": "UserMessageMessage",
              "schema": "ChatMessage",
              "description": "Transcript of the message.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userMessageMessage",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "models",
            "schema": {
              "generatedName": "UserMessageModels",
              "schema": "Inference",
              "description": "Inference model results.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userMessageModels",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "time",
            "schema": {
              "generatedName": "UserMessageTime",
              "schema": "MillisecondInterval",
              "description": "Start and End time of user message.",
              "source": {
                "file": "../asyncapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userMessageTime",
            "readonly": false,
            "writeonly": false
          },
          {
            "key": "from_text",
            "schema": {
              "generatedName": "UserMessageFromText",
              "title": "From Text",
              "schema": {
                "type": "boolean"
              },
              "description": "Indicates if this message was inserted into the conversation as text from a [User Input](/reference/empathic-voice-interface-evi/chat/chat#send.User%20Input.text) message.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userMessageFromText"
          },
          {
            "key": "interim",
            "schema": {
              "nameOverride": "Interim",
              "generatedName": "UserMessageInterim",
              "title": "Interim",
              "schema": {
                "type": "boolean"
              },
              "description": "Indicates if this message contains an immediate and unfinalized transcript of the user's audio input. If it does, words may be repeated across successive UserMessage messages as our transcription model becomes more confident about what was said with additional context. Interim messages are useful to detect if the user is interrupting during audio playback on the client. Even without a finalized transcription, along with `UserInterrupt` messages, interim `UserMessages` are useful for detecting if the user is interrupting during audio playback on the client, signaling to stop playback in your application.",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "conflict": {},
            "generatedName": "userMessageInterim"
          }
        ],
        "nameOverride": "UserMessage",
        "generatedName": "UserMessage",
        "title": "UserMessage",
        "allOf": [],
        "allOfPropertyConflicts": [],
        "groupName": [],
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../asyncapi.json",
          "type": "openapi"
        },
        "type": "object"
      }
    },
    "namespacedSchemas": {}
  },
  "variables": {},
  "nonRequestReferencedSchemas": {},
  "securitySchemes": {
    "Authentication": {
      "headerName": "X-Hume-Api-Key",
      "type": "header"
    }
  },
  "globalHeaders": [],
  "idempotencyHeaders": [],
  "groups": {}
}