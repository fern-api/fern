{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "BadRequestError": {
            "docs": "400 Bad Request.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": [
                  {
                    "code": "invalid_link",
                    "message": "This link doesn't have stored credentials hence it can't be switched to recurrent mode"",
                    "request_id": "9e7b283c6efa449c9c028a16b5c249fb",
                  },
                ],
              },
            ],
            "status-code": 400,
            "type": "list<BadRequestErrorBodyItem>",
          },
          "ForbiddenError": {
            "docs": "Access to Belvo API denied",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": [
                  {
                    "code": "access_to_resource_denied",
                    "message": "You don't have access to this resource.",
                    "request_id": "9e7b283c6efa449c9c028a16b5c249fb",
                  },
                ],
              },
            ],
            "status-code": 403,
            "type": "list<AccessToResourceDenied>",
          },
          "InternalServerError": {
            "docs": "Unexpected Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": [
                  {
                    "code": "unexpected_error",
                    "message": "Belvo is unable to process the request due to an internal system issue or to an unsupported response from an institution",
                    "request_id": "9e7b283c6efa449c9c028a16b5c249fb",
                  },
                ],
              },
            ],
            "status-code": 500,
            "type": "list<UnexpectedError>",
          },
          "NotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": [
                  {
                    "code": "not_found",
                    "message": "Not found",
                    "request_id": "9e7b283c6efa449c9c028a16b5c249fb",
                  },
                ],
              },
            ],
            "status-code": 404,
            "type": "list<NotFoundErrorBody>",
          },
          "PreconditionError": {
            "docs": "MFA Token Required",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": [
                  {
                    "code": "token_required",
                    "expiry": 9600,
                    "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                    "message": "A MFA token is required by the institution to login",
                    "request_id": "8c7b283c6efa449c9c028a16b5c249fa",
                    "session": "2675b703b9d4451f8d4861a3eee54449",
                  },
                ],
              },
            ],
            "status-code": 428,
            "type": "list<TokenRequiredResponse>",
          },
          "RequestTimeoutError": {
            "docs": "Request Timeout",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": [
                  {
                    "code": "request_timeout",
                    "message": "The request timed out, you can retry asking for less data by changing your query parameters",
                    "request_id": "9e7b283c6efa449c9c028a16b5c249fb",
                  },
                ],
              },
            ],
            "status-code": 408,
            "type": "list<RequestTimeoutErrorBody>",
          },
          "UnauthorizedError": {
            "docs": "Authentication to Belvo API failed",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": [
                  {
                    "code": "authentication_failed",
                    "message": "Invalid Secret Keys",
                    "request_id": "9e7b283c6efa449c9c028a16b5c249fb",
                  },
                ],
              },
            ],
            "status-code": 401,
            "type": "list<UnauthorizedErrorBody>",
          },
        },
        "types": {
          "AccessToResourceDenied": {
            "docs": "This error occurs when you try to access Belvo's resource without the correct permissions.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`access_to_resource_denied`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#403-access_to_resource_denied" target="_blank">403 access_to_resource_denied</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `access_to_resource_denied` errors, the description is:
  
  - `You don't have access to this resource.`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Account": {
            "docs": "Details regarding the account.

**Note**: For our recurring expenses resource, this account relates to the account that was analyzed to generate the recurring expenses report.
",
            "inline": undefined,
            "properties": {
              "balance": "AccountsBalance",
              "balance_type": {
                "docs": "Indicates whether this account is either an `ASSET` or a `LIABILITY`. You can consider the balance of an `ASSET` as being positive, while the balance of a `LIABILITY` as negative.
",
                "type": "optional<string>",
              },
              "bank_product_id": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*

*The institution's product ID for the account type.*
",
                "type": "optional<string>",
              },
              "category": "optional<EnumAccountCategory>",
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "datetime",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "credit_data": "optional<AccountsCreditData>",
              "currency": {
                "docs": "The currency of the account. For example:
- üáßüá∑ BRL (Brazilian Real)
- üá®üá¥ COP (Colombian Peso)
- üá≤üáΩ MXN (Mexican Peso)

 Please note that other currencies other than in the list above may be returned.",
                "type": "optional<string>",
              },
              "funds_data": {
                "docs": "One or more funds that contribute to the the pension account.",
                "type": "optional<list<AccountsFundsData>>",
              },
              "id": {
                "docs": "The unique identifier created by Belvo used to reference the current account.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": "optional<InstitutionAccount>",
              "internal_identification": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*

*The institution's internal identification for the account.*
",
                "type": "optional<string>",
              },
              "last_accessed_at": {
                "docs": "The ISO-8601 timestamp of Belvo's most recent successful access to the institution for the given link.",
                "type": "optional<datetime>",
              },
              "link": {
                "docs": "The `link.id` the account belongs to.",
                "type": "optional<string>",
              },
              "loan_data": "optional<AccountsLoanData>",
              "name": {
                "docs": "The account name, as given by the institution.",
                "type": "optional<string>",
              },
              "number": {
                "docs": "The account number, as designated by the institution.",
                "type": "optional<string>",
              },
              "public_identification_name": {
                "docs": "The public name for the type of identification. For example: `"CLABE"`.

‚ÑπÔ∏è For üáßüá∑ Brazilian savings and checking accounts, this field will be `AGENCY/ACCOUNT`.
",
                "type": "optional<string>",
              },
              "public_identification_value": {
                "docs": "The value for the `public_identification_name`.

‚ÑπÔ∏è For üáßüá∑ Brazilian savings and checking accounts, this field will be the agency and bank account number, separated by a slash.
For example: `0444/45722-0`.
",
                "type": "optional<string>",
              },
              "receivables_data": "optional<AccountsReceivablesData>",
              "type": {
                "docs": "The account type, as designated by the institution.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsBalance": {
            "docs": "Details regarding the current and available balances for the account.
",
            "inline": undefined,
            "properties": {
              "available": {
                "docs": "The balance that the account owner can use.
- **üí∞ Checking and saving accounts**:

The available balance may be different to the `current` balance due to pending transactions.
- **üí≥ Credit cards**:

The credit amount the user still has available for the current period. The `available` balance may be different to the `current` balance due to pending transactions or future instalments.
- **üè° Loan accounts**:

The present value required to pay off the loan, as provided by the institution.

**Note:** If the institution does not provide this value, we return `null`.",
                "type": "optional<float>",
              },
              "current": {
                "docs": "The current balance is calculated differently according to the type of account.

- **üí∞ Checking and saving accounts**:

The user's account balance at the `collected_at` timestamp.
- **üí≥ Credit cards**:

The amount the user has spent in the current card billing period (see `credit_data.cutting_date` for information on when the current billing period finishes).
- **üè° Loan accounts**:

The amount remaining to pay on the users's loan (same as `loan_data.outstanding_balance`).",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsCreditData": {
            "docs": "The credit options associated with this account.",
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "credit_limit": {
                "docs": "The maximum amount of credit the owner can receive.",
                "type": "optional<float>",
              },
              "cutting_date": {
                "docs": "The closing date of the credit period.",
                "type": "optional<string>",
              },
              "end_date": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*
",
                "type": "optional<string>",
              },
              "interest_rate": {
                "docs": "The annualized interest rate of the credit.",
                "type": "optional<float>",
              },
              "last_payment_date": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*


*The date when the last credit payment was made.*
",
                "type": "optional<string>",
              },
              "minimum_payment": {
                "docs": "The minimum amount to be paid on the `next_payment_date`.",
                "type": "optional<float>",
              },
              "monthly_payment": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*

*The recurrent monthly payment, if applicable.*
",
                "type": "optional<double>",
              },
              "next_payment_date": {
                "docs": "The due date for the next payment (`YYYY-MM-DD`).",
                "type": "optional<string>",
              },
              "no_interest_payment": {
                "docs": "The minimum amount required to pay to avoid generating interest.",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsFundsData": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "balance": {
                "docs": "The amount in the fund.",
                "type": "optional<float>",
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "name": {
                "docs": "The pension fund name.",
                "type": "optional<string>",
              },
              "percentage": {
                "docs": "How much this fund, as a percentage, contributes to the pension account's total.",
                "type": "optional<float>",
              },
              "public_identifications": {
                "docs": "The fund's public IDs.",
                "type": "optional<list<AccountsFundsDataPublicIdentifications>>",
              },
              "type": {
                "docs": "Type of pension fund.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsFundsDataPublicIdentifications": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The type of identification number for the fund.",
                "type": "string",
              },
              "value": {
                "docs": "The fund's identification number.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsLoanData": {
            "docs": "The loan options associated with this account.",
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "datetime",
              },
              "contract_amount": {
                "docs": "The initial total loan amount, calculated by the institution, when the contract was signed. This amount includes the principal + interest + taxes + fees.",
                "type": "optional<float>",
              },
              "contract_end_date": {
                "docs": "The date when the loan is expected to be completed.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "contract_number": {
                "docs": "The contract number of the loan, as given by the institution.",
                "type": "optional<string>",
              },
              "contract_start_date": {
                "docs": "The date when the loan contract was signed (`YYYY-MM-DD`).",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "credit_limit": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

Please see `principal` instead.
",
                "type": "optional<double>",
              },
              "cutting_date": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

The closing date of the loan period.
",
                "type": "optional<string>",
              },
              "cutting_day": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

The closing day of the month for the loan.
",
                "type": "optional<string>",
              },
              "fees": {
                "docs": "Breakdown of the fees applied to the loan.",
                "type": "optional<list<optional<AccountsLoanDataFees>>>",
              },
              "interest_rate": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

Please see the `interest_rates` object instead.
",
                "type": "optional<double>",
              },
              "interest_rates": {
                "docs": "Breakdown of the interest applied to the loan.",
                "type": "optional<list<AccountsLoanDataInterestRate>>",
              },
              "last_payment_date": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

The date when the last loan payment was made.
",
                "type": "optional<string>",
              },
              "last_period_balance": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

Please see `outstanding_balance` instead.
",
                "type": "optional<double>",
              },
              "limit_day": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

Please see `payment_day` instead.
",
                "type": "optional<string>",
              },
              "loan_type": {
                "docs": "The type of the loan, according to the institution.",
                "type": "optional<string>",
              },
              "monthly_payment": {
                "docs": "The recurrent monthly payment, if applicable.",
                "type": "optional<float>",
              },
              "no_interest_payment": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

The minimum amount required to pay to avoid generating interest.
",
                "type": "optional<double>",
              },
              "number_of_installments_outstanding": {
                "docs": "The number of installments left to pay.",
                "type": "optional<integer>",
              },
              "number_of_installments_total": {
                "docs": "The total number of installments required to pay the loan.",
                "type": "optional<integer>",
              },
              "outstanding_balance": {
                "docs": "The amount remaining to pay in total, including interest.",
                "type": "optional<float>",
              },
              "outstanding_principal": {
                "docs": "Outstanding loan amount, that is, how much remains to pay on the principal (not including interest).
",
                "type": "optional<float>",
              },
              "payment_day": {
                "docs": "The day of the month by which the owner needs to pay the loan (`YYYY-MM-DD`).",
                "type": "optional<string>",
              },
              "principal": {
                "docs": "Total amount of the loan (the amount the user receives).",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsLoanDataFees": {
            "docs": "Breakdown of the fees applied to the loan.",
            "inline": undefined,
            "properties": {
              "type": "EnumLoanDataFeeType",
              "value": {
                "docs": "The total value of the fee. Same currency of the Loan.
",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsLoanDataInterestRate": {
            "docs": "Breakdown of the interest applied to the loan.",
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The name of the type of interest rate applied to the loan.",
                "type": "optional<string>",
              },
              "type": "optional<EnumLoanDataInterestRateType>",
              "value": {
                "docs": "The interest rate (in percent or currency value).",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "An array of Account objects.",
                "type": "optional<list<optional<Account>>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountsReceivablesData": {
            "docs": "Additional details regarding the receivables account, if applicable.",
            "inline": undefined,
            "properties": {
              "anticipated": {
                "docs": "The amount that the owner of the account received earlier than contracted.",
                "type": "optional<float>",
              },
              "available": {
                "docs": "The amount that the owner of the account will receive according to an established date.",
                "type": "optional<float>",
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "datetime",
              },
              "current": {
                "docs": "The total sum of all receivables (`available` + `anticipated`)",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AnnualCostsAndDeductionsStatementBusiness": {
            "docs": "Object containing the reported annual costs and applicable deductions.",
            "inline": undefined,
            "properties": {
              "administration_expenses": {
                "docs": "Total costs of the company related to training, company offsites, or similar.",
                "type": "float",
              },
              "costs": {
                "docs": "Total costs for the company to operate.",
                "type": "float",
              },
              "distribution_and_sales_expenses": {
                "docs": "Total costs the company incurred in order to distribute or sell their product.",
                "type": "float",
              },
              "financial_expenses": {
                "docs": "Total value of any fees incurred by the company to operate (such as bank fees).",
                "type": "float",
              },
              "total_costs_and_deductible_expenses": {
                "docs": "Total value of all costs and dedictible expenses.",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AnnualIncomeStatementBusiness": {
            "docs": "Object containing the reported annual incomes, deductions, and final balances of the tax payer.",
            "inline": undefined,
            "properties": {
              "dividends": {
                "docs": "Total income that the company generated from dividends.",
                "type": "float",
              },
              "gross_income_from_ordinary_activities": {
                "docs": "Total gross income that the company generated from their main economic activity.",
                "type": "float",
              },
              "other_income": {
                "docs": "Total income that the company generated from activities not associated with their main economic activity.",
                "type": "float",
              },
              "returns_rebates_and_discounts_on_sales": {
                "docs": "Total value of cancelled orders, corrected invoices, or similar, that can be discounted from the `total_gross_income`.",
                "type": "float",
              },
              "total_gross_income": {
                "docs": "Total gross income the company generated.",
                "type": "float",
              },
              "total_net_income": {
                "docs": "Total net income of the company, taking into account `returns_rebates_and_discounts_on_sales`.",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AnnualIncomeStatementIndividual": {
            "docs": "Object containing the reported annual incomes, deductions, and final balances of the tax payer.",
            "inline": undefined,
            "properties": {
              "annual_totals": "AnnualTotalsIndividual",
              "gross_income": "GrossIncomeIndividual",
              "net_income": "NetIncomeIndividual",
              "non_taxable_income": "NonTaxableIncomeIndividual",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AnnualTotalsIndividual": {
            "docs": "Object containing the tax payers total exempt, deducted, and ordinary net incomes.",
            "inline": undefined,
            "properties": {
              "total_applicable_deductions": {
                "docs": "Total deductions that the taxpayer can apply to their income, according to the institution.",
                "type": "float",
              },
              "total_exempt_income": {
                "docs": "Total income that is not taxable, according to the institution.",
                "type": "float",
              },
              "total_exemptions_and_deductions": {
                "docs": "Sum total of all exempt and deductions that can be applied to the taxpayer's income.",
                "type": "float",
              },
              "total_ordinary_net_income": {
                "docs": "Sum total of the taxpayer's income (gross income - exemptions - deductions).",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AsynchronousAccepted202": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "request_id": {
                "docs": "The unique ID for this request. We recommend you store this value to later identify which webhook event relates to an asynchronous request.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BUSINESS": {
            "docs": "Details about the OFPI payment method.",
            "inline": undefined,
            "properties": {
              "open_finance": "PaymentIntentPaymentMethodDetailsBodyBusinessOfpi",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BadRequestErrorBodyItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "InvalidAccessMode",
              },
              {
                "type": "TooManySessionsError",
              },
              {
                "type": "LoginError",
              },
              {
                "type": "SessionExpiredError",
              },
              {
                "type": "ValidationError",
              },
              {
                "type": "InstitutionDownError",
              },
              {
                "type": "InstitutionUnavailableError",
              },
              {
                "type": "InstitutionInactiveError",
              },
              {
                "type": "UnsupportedOperationError",
              },
              {
                "type": "InvalidLinkError",
              },
              {
                "type": "UnconfirmedLinkError",
              },
            ],
          },
          "Balance": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account": "optional<Account>",
              "balance": {
                "docs": "The funds available in the account by the end of the `value_date`.",
                "type": "optional<float>",
              },
              "collected_at": {
                "availability": "deprecated",
                "docs": "This field has been deprecated.

The ISO-8601 timestamp when the data point was collected.
",
                "type": "optional<datetime>",
              },
              "current_balance": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated. Please use the `balance` field instead.*
",
                "type": "optional<double>",
              },
              "id": {
                "docs": "Belvo's unique ID for the balance request.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "statement": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*

*The ID of the banking statement used to extract the `balance`.*
",
                "type": "optional<string>",
              },
              "value_date": {
                "docs": "The date when the `balance` was available, in `YYYY-MM-DD` format.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BalancesPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of balance objects.",
                "type": "optional<list<Balance>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountBusinessPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was first created in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "customer": {
                "docs": "Belvo's unique ID for the customer associated with the bank account.
For `BUSINESS` bank accounts, this field is `null`.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "details": {
                "docs": "For PSE, this field will return an empty object.",
                "type": "map<string, unknown>",
              },
              "holder": {
                "type": "Business",
              },
              "id": {
                "docs": "Belvo's unique ID for the current bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": {
                "docs": "Belvo's unique ID for the institution that the bank account is created in.
For `BUSINESS` bank accounts that Belvo creates for organizations, this field is `null`.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "metadata": {
                "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.

‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
                "type": "optional<map<string, unknown>>",
              },
              "number": {
                "docs": "The bank account number of the payment beneficiary.
",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountDetailsOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_type": "EnumBankAccountPixAccountTypeOfpi",
              "agency": {
                "docs": "The agency (branch number) of the institution where the account was created.",
                "type": "string",
              },
              "country": "EnumPaymentsCountry",
              "number": {
                "docs": "The bank account number.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountDetailsOfpiPix": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "country": "EnumPaymentsCountry",
              "pix_key": {
                "docs": "The PIX key identifier of the bank account.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountDetailsOpenFinance": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_type": "EnumBankAccountPixAccountTypeOfpi",
              "agency": {
                "docs": "The agency (branch number) of the institution where the account was created.",
                "type": "string",
              },
              "country": "EnumPaymentsCountry",
              "number": {
                "docs": "The bank account number.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountDetailsOpenFinancePix": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "country": "EnumPaymentsCountry",
              "pix_key": {
                "docs": "The PIX key identifier of the bank account.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountHolderRequestOfpiInformation": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "BUSINESS",
              },
              {
                "type": "INDIVIDUAL",
              },
            ],
          },
          "BankAccountInformationContentPse": {
            "docs": "Information about the payer's institution",
            "inline": undefined,
            "properties": {
              "payer_institution": {
                "docs": "Belvo's unique identifier for the payer‚Äôs institution.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountInformationPse": {
            "docs": "Information about the payer's bank account. Belvo returns this object when the payer's bank account information is not saved in the Belvo database.",
            "inline": undefined,
            "properties": {
              "bank_account_information": {
                "type": "optional<BankAccountInformationContentPse>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountOfpiResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "customer": {
                "docs": "Belvo's unique ID for the customer associated with the bank account.
For `BUSINESS` bank accounts, this field is `null`.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "details": "BankAccountOfpiResponseDetails",
              "holder": {
                "type": "OFPI",
              },
              "id": {
                "docs": "Belvo's unique ID for the current bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": {
                "docs": "Belvo's unique ID for the institution that the bank account is created in.
For `BUSINESS` bank accounts that Belvo creates for organizations, this field is `null`.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountOfpiResponseDetails": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "BankAccountDetailsOfpi",
              },
              {
                "type": "BankAccountDetailsOfpiPix",
              },
            ],
          },
          "BankAccountPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of bank account objects.",
                "type": "optional<list<BankAccountPaginatedResponseResultsItem>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankAccountPaginatedResponseResultsItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "BankAccountOfpiResponse",
              },
              "BankAccountPseResponse",
            ],
          },
          "BankAccountPseResponse": {
            "type": "BankAccountBusinessPse",
          },
          "BeneficiaryBankAccountOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "details": {
                "type": "optional<BeneficiaryBankAccountOfpiDetails>",
              },
              "holder": {
                "type": "OFPI",
              },
              "id": {
                "docs": "Belvo's unique ID for the beneficiary bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": "PaymentInstitution",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BeneficiaryBankAccountOfpiDetails": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "BankAccountDetailsOpenFinance",
              },
              {
                "type": "BankAccountDetailsOpenFinancePix",
              },
            ],
          },
          "BeneficiaryBankAccountPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "holder": {
                "type": "optional<Business>",
              },
              "id": {
                "docs": "Belvo's unique ID for the beneficiary bank account.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": {
                "docs": "Belvo's unique ID for the institution that the bank account is created in.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "number": {
                "docs": "The bank account number.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Business": {
            "docs": "Details regarding the business bank account holder.",
            "inline": undefined,
            "properties": {
              "Information": {
                "type": "optional<PSE>",
              },
              "type": "EnumBankAccountHolderTypePse",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Categorization": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "transactions": {
                "docs": "An array of enriched transaction objects.",
                "type": "optional<list<CategorizationBody>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CategorizationBody": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_category": "EnumCategorizationAccountCategory",
              "account_holder_id": {
                "docs": "The unique ID for the account holder in your system.",
                "type": "string",
              },
              "account_holder_type": "EnumCategorizationAccountHolderType",
              "account_id": {
                "docs": "The unique ID for the account where the transaction occurred in your system.",
                "type": "string",
              },
              "amount": {
                "docs": "The transaction amount.",
                "type": "float",
              },
              "category": "optional<EnumCategorizationTransactionCategory>",
              "currency": {
                "docs": "The currency of the account, in ISO-4217 format. For example:
- üáßüá∑ BRL (Brazilian Real)
- üá®üá¥ COP (Colombian Peso)
- üá≤üáΩ MXN (Mexican Peso)",
                "type": "string",
              },
              "description": {
                "docs": "The description of the transaction.",
                "type": "string",
              },
              "institution": {
                "docs": "The institution where the account is registered.

>**Note:** This is the name that you use in your system to identify an institution.",
                "type": "string",
              },
              "mcc": {
                "docs": "The four-digit ISO 18245 Merchant Category Code (MCC). We only return this value when `account_type` = `CREDIT_CARD`.",
                "type": "optional<integer>",
              },
              "merchant": "optional<CategorizationMerchantData>",
              "subcategory": "optional<EnumCategorizationTransactionSubcategory>",
              "transaction_id": {
                "docs": "The unique ID for the transaction in your system.",
                "type": "string",
              },
              "type": "EnumCategorizationTransactionType",
              "value_date": {
                "docs": "The date when the transaction occurred, in `YYYY-MM-DD` format.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CategorizationBodyRequest": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_category": "EnumCategorizationAccountCategory",
              "account_holder_id": {
                "docs": "Your unique ID for the account holder.",
                "type": "string",
              },
              "account_holder_type": "EnumCategorizationAccountHolderType",
              "account_id": {
                "docs": "Your unique ID for the account where the transaction occurred.",
                "type": "string",
              },
              "amount": {
                "docs": "The transaction amount.",
                "type": "float",
              },
              "currency": {
                "docs": "The currency of the account, in ISO-4217 format. For example: - üáßüá∑ BRL (Brazilian Real) - üá®üá¥ COP (Colombian Peso) - üá≤üáΩ MXN (Mexican Peso)",
                "type": "string",
              },
              "description": {
                "docs": "The description of the transaction.",
                "type": "string",
              },
              "institution": {
                "docs": "The institution where the account is registered.

>**Note:** This is the name that you use in your system to identify an institution.",
                "type": "string",
              },
              "mcc": {
                "docs": "The four-digit ISO 18245 Merchant Category Code (MCC). Only required when `account_category` = `CREDIT_CARD`.",
                "type": "optional<integer>",
              },
              "transaction_id": {
                "docs": "Your unique ID for the transaction.",
                "type": "string",
              },
              "type": "EnumCategorizationTransactionType",
              "value_date": {
                "docs": "The date when the transaction occurred, in `YYYY-MM-DD` format.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CategorizationMerchantData": {
            "docs": "Additional data regarding the merchant involved in the transaction.
",
            "inline": undefined,
            "properties": {
              "logo": {
                "docs": "The URL to the merchant's logo.",
                "type": "optional<string>",
              },
              "merchant_name": {
                "docs": "The name of the merchant.",
                "type": "optional<string>",
              },
              "website": {
                "docs": "The URL to the merchant's website.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Charge": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "The amount of the charge.
",
                "type": "optional<string>",
              },
              "beneficiary": {
                "docs": "Belvo's unique ID used to identify the beneficiary‚Äôs bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the charge.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "currency": "optional<EnumPaymentsCurrency>",
              "customer": {
                "docs": "Belvo's unique ID for the customer that the charge was created for.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "docs": "The description of the payment.
",
                "type": "optional<string>",
              },
              "failure_code": {
                "docs": "Error code that explains the reason behind a payment being unsuccessful (if applicable).
",
                "type": "optional<string>",
              },
              "failure_message": {
                "docs": "Further information regarding the `failure_code`.
",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Belvo's unique ID for the current charge.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "metadata": {
                "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.

‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
                "type": "map<string, unknown>",
              },
              "payment_intent": {
                "docs": "The `payment_intent.id` associated with this charge.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payment_method_details": "ChargePaymentMethodDetails",
              "payment_method_information": {
                "type": "PSE",
              },
              "payment_method_type": "optional<EnumPaymentLinkAllowedPaymentMethod>",
              "provider": "EnumPaymentLinkProvider",
              "status": {
                "docs": "The current status of the charge.
",
                "type": "ChargeStatus",
              },
              "transactions": {
                "docs": "An array of Transaction objects relating to the charge.",
                "type": "optional<list<PaymentTransaction>>",
              },
              "updated_at": {
                "docs": "The ISO-8601 timestamp of when the status of the charge was last updated.
",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChargePaymentMethodDetails": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "PSE",
              },
              {
                "type": "OFPI",
              },
            ],
          },
          "ChargePaymentMethodDetailsOfpiContent": {
            "docs": "Information about the payer of a PSE payment.",
            "inline": undefined,
            "properties": {
              "beneficiary_bank_account": {
                "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payer_institution": {
                "docs": "Unique identifier for the payer‚Äôs institution.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChargePaymentMethodDetailsPseContent": {
            "docs": "Information about the payer of a PSE payment.",
            "inline": undefined,
            "properties": {
              "payer_bank_account": {
                "docs": "Belvo's unique ID used to identify the customer‚Äôs bank account.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payer_institution": {
                "docs": "Unique identifier for the payer‚Äôs institution.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChargeStatus": {
            "docs": "The current status of the charge.
",
            "enum": [
              "PENDING",
              "SUCCEEDED",
              "FAILED",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CreateBankAccountOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "details": {
                "docs": "Information regarding the bank account.",
                "type": "CreateBankAccountOfpiDetails",
              },
              "holder": {
                "docs": "Information regarding the individual bank account holder.",
                "type": "OFPI",
              },
              "institution": {
                "docs": "Belvo's unique ID for the institution that the bank account is created in.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CreateBankAccountOfpiDetails": {
            "discriminated": false,
            "docs": "Information regarding the bank account.",
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "BankAccountDetailsOfpi",
              },
              {
                "type": "BankAccountDetailsOfpiPix",
              },
            ],
          },
          "CreateBankAccountPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "holder": {
                "docs": "Information regarding the business bank account holder.",
                "type": "PSE",
              },
              "metadata": {
                "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.

‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
                "type": "optional<map<string, unknown>>",
              },
              "number": {
                "docs": "The bank account number of the payment beneficiary.
",
                "type": "string",
              },
              "providers": {
                "docs": "Information about the payment service provider, required in order to establish a connection and process requests. For PSE, the value must be `payments_way`.",
                "type": "PSE",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CreateCustomerOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "address": {
                "docs": "The customer's physical address.
",
                "type": "optional<string>",
              },
              "country": "EnumPaymentsCountry",
              "customer_type": "EnumCustomerType",
              "email": {
                "docs": "The customer's email address.
",
                "type": "string",
              },
              "identifier": {
                "docs": "The document number of the customer's ID.
",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 25,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "identifier_type": "EnumCustomerIdentifierTypeOfpi",
              "name": {
                "docs": "The full name of the customer you want to create.
",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 200,
                  "minLength": 5,
                  "pattern": undefined,
                },
              },
              "phone": {
                "docs": "The customer's phone number.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CreateCustomerPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "address": {
                "docs": "The customer's physical address.
",
                "type": "optional<string>",
              },
              "country": "EnumPaymentsCountry",
              "customer_type": "EnumCustomerType",
              "email": {
                "docs": "The customer's email address.
",
                "type": "string",
              },
              "identifier": {
                "docs": "The document number of the customer's ID.
",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 25,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "identifier_type": "EnumCustomerIdentifierTypePse",
              "name": {
                "docs": "The full name of the customer you want to create.
",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 200,
                  "minLength": 5,
                  "pattern": undefined,
                },
              },
              "phone": {
                "docs": "The customer's phone number.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CreatePaymentLinkOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowed_payment_method_types": {
                "docs": "A list of payment method types allowed in this payment intent. For OFPI, this value must be set to `open_finance`.",
                "type": "list<EnumPaymentLinkAllowedPaymentMethod>",
              },
              "amount": {
                "docs": "Amount to be paid by your customer. For OFPI, you can send through numbers with up to two decimal points, separated by a `.` period. For example: `1234.12`

**Note:** You can send through this value either as a string or an float. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `1234.12`.
",
                "type": "CreatePaymentLinkOfpiAmount",
              },
              "callback_urls": {
                "type": "optional<PaymentLinkCallbackUrls>",
              },
              "customer": {
                "docs": "Belvo's unique ID to reference the customer.
",
                "type": "string",
              },
              "description": {
                "docs": "The description of the payment.
",
                "type": "string",
              },
              "expires_in": {
                "default": "7d",
                "docs": "The payment link expiration time. It allows the following formats to be sent through:

  - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.
  - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.
  - whole number + `d` for x amount of days. For example: `30d` for 30 days.

  ‚ÑπÔ∏è The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "\d+([mhd])",
                },
              },
              "payment_method_details": {
                "type": "OFPI",
              },
              "provider": "EnumPaymentLinkProvider",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CreatePaymentLinkOfpiAmount": {
            "discriminated": false,
            "docs": "Amount to be paid by your customer. For OFPI, you can send through numbers with up to two decimal points, separated by a `.` period. For example: `1234.12`

**Note:** You can send through this value either as a string or an float. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `1234.12`.
",
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "\d+(?:\.\d{1,2})?",
                },
              },
              "float",
            ],
          },
          "CreatePaymentLinkPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowed_payment_method_types": {
                "docs": "A list of payment method types allowed in this payment intent. For PSE, this value must be set to `pse`.",
                "type": "optional<list<EnumPaymentLinkAllowedPaymentMethod>>",
              },
              "amount": {
                "docs": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: `350000`.

**Note:** You can send this value either as a string or an integer. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `350000.00`.
",
                "type": "CreatePaymentLinkPseAmount",
              },
              "callback_urls": {
                "type": "optional<PaymentLinkCallbackUrls>",
              },
              "customer": {
                "docs": "Belvo's unique ID to reference the customer.
",
                "type": "string",
              },
              "description": {
                "docs": "The description of the payment.
",
                "type": "string",
              },
              "expires_in": {
                "default": "7d",
                "docs": "The payment link expiration time. It allows the following formats to be sent through:

  - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.
  - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.
  - whole number + `d` for x amount of days. For example: `30d` for 30 days.

  ‚ÑπÔ∏è The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "\d+([mhd])",
                },
              },
              "payment_method_details": {
                "type": "PSE",
              },
              "provider": "EnumPaymentLinkProvider",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CreatePaymentLinkPseAmount": {
            "discriminated": false,
            "docs": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: `350000`.

**Note:** You can send this value either as a string or an integer. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `350000.00`.
",
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[1-9]\d{0,9}",
                },
              },
              "long",
            ],
          },
          "CustomerOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "address": {
                "docs": "The customers physical address.
",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 150,
                  "minLength": 5,
                  "pattern": undefined,
                },
              },
              "country": "EnumPaymentsCountry",
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the customer.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "customer_type": "EnumCustomerType",
              "email": {
                "docs": "The customer's email address.
",
                "type": "string",
              },
              "id": {
                "docs": "Belvo's unique ID for the current customer.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "identifier": {
                "docs": "The document number of the customer's ID.
",
                "type": "string",
              },
              "identifier_type": "EnumCustomerIdentifierTypeOfpi",
              "name": {
                "docs": "The full name of the customer.
",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 200,
                  "minLength": 5,
                  "pattern": undefined,
                },
              },
              "phone": {
                "docs": "The customer's phone number.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CustomerPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of customer objects.",
                "type": "optional<list<CustomerPaginatedResponseResultsItem>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CustomerPaginatedResponseResultsItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "CustomerOfpi",
              },
              {
                "type": "CustomerPse",
              },
            ],
          },
          "CustomerPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "address": {
                "docs": "The customers physical address.


**Note:** Apart from the first two and last two characters, all the rest of the characters are masked.
",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 150,
                  "minLength": 5,
                  "pattern": undefined,
                },
              },
              "country": "EnumPaymentsCountry",
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the customer.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "customer_type": "EnumCustomerType",
              "email": {
                "docs": "The customer's email address.
",
                "type": "string",
              },
              "id": {
                "docs": "Belvo's unique ID for the current customer.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "identifier": {
                "docs": "The document number of the customer's ID.
",
                "type": "string",
              },
              "identifier_type": "EnumCustomerIdentifierTypePse",
              "name": {
                "docs": "The full name of the customer.
",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 200,
                  "minLength": 5,
                  "pattern": undefined,
                },
              },
              "phone": {
                "docs": "The customer's phone number.


**Note:** Apart from the first two and last two characters, all the rest of the characters are masked.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayConfirmationRequiredContentPse": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "payer_institution": {
                "type": "optional<PaymentInstitution>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayConfirmationRequiredOfpi": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "beneficiary_bank_account": {
                "type": "optional<BeneficiaryBankAccountOfpi>",
              },
              "payer_identifier": {
                "docs": "The payer's ID.",
                "type": "optional<string>",
              },
              "payer_institution": {
                "type": "optional<PaymentInstitution>",
              },
              "payer_name": {
                "docs": "The name of the payer.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayCredentialsRequiredContentPse": {
            "docs": "Object containing form fields for the required credentials (for example, `username` or `password`) in this step.",
            "inline": undefined,
            "properties": {
              "payer_institution": {
                "type": "optional<PaymentInstitution>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayCustomerBankAccountsContentPse": {
            "docs": "Object detailing what payment method information you need to display.",
            "inline": undefined,
            "properties": {
              "beneficiary_bank_account": {
                "type": "optional<BeneficiaryBankAccountPse>",
              },
              "customer_bank_accounts": {
                "docs": "Array of customer bank account objects.",
                "type": "optional<list<PaymentMethodInfoCustomerBankAccountsPse>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayPaymentFailed": {
            "docs": "Details regarding the payer institution.",
            "inline": undefined,
            "properties": {
              "payer_institution": "optional<PaymentInstitution>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayPaymentMethodInformationContentOfpi": {
            "docs": "Object detailing what payment method information you need to display.",
            "inline": undefined,
            "properties": {
              "institutions": {
                "docs": "An array of institution objects.",
                "type": "optional<list<PaymentInstitution>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayPaymentMethodInformationContentPse": {
            "docs": "Object detailing what payment method information you need to display.",
            "inline": undefined,
            "properties": {
              "customer_bank_accounts": {
                "docs": "Array of bank account objects.

**Note**: If there are no customer accounts saved in the Belvo database, we return an empty array.",
                "type": "optional<list<PaymentMethodInfoCustomerBankAccountsPse>>",
              },
              "institutions": {
                "docs": "An array of institution objects.",
                "type": "optional<list<PaymentInstitution>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayPaymentProcessing": {
            "docs": "Details regarding the payer institution.",
            "inline": undefined,
            "properties": {
              "payer_institution": "optional<PaymentInstitution>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayPaymentSucceeded": {
            "docs": "Details regarding the payer institution.",
            "inline": undefined,
            "properties": {
              "payer_institution": "optional<PaymentInstitution>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DisplayTokenRequiredContentPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "payer_institution": "optional<PaymentInstitution>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentIdBusiness": {
            "docs": "Object containing information about the ID document of the tax payer.",
            "inline": undefined,
            "properties": {
              "document_number": {
                "docs": "The number of the ID document.",
                "type": "string",
              },
              "document_type": {
                "docs": "The type of ID document.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentIdIndividual": {
            "docs": "Object containing information about the ID document of the tax payer.",
            "inline": undefined,
            "properties": {
              "document_number": {
                "docs": "The number of the ID document.",
                "type": "string",
              },
              "document_type": {
                "docs": "The type of ID document.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentInformationBusiness": {
            "docs": "Object containing detailed information about the fiscal document.",
            "inline": undefined,
            "properties": {
              "form_number": {
                "docs": "The institution-provided identifier for the tax declaration.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the tax document.",
                "type": "string",
              },
              "type": {
                "docs": "The type of tax declaration form. For DIAN, this will be either `110` or `210`.",
                "type": "string",
              },
              "year": {
                "docs": "The year of this tax declaration.
",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentInformationIndividual": {
            "docs": "Object containing detailed information about the fiscal document.",
            "inline": undefined,
            "properties": {
              "form_number": {
                "docs": "Institution-provided identifier for the tax declaration.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the tax document.",
                "type": "string",
              },
              "type": {
                "docs": "The type of tax declaration form. For DIAN, this will be either `110` or `210`.",
                "type": "string",
              },
              "year": {
                "docs": "The year of this tax declaration.
",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecord": {
            "docs": "Emploment record response payload",
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was initially created in Belvo's database.",
                "type": "optional<datetime>",
              },
              "employment_records": {
                "docs": "Details regarding the individual's employment history.",
                "type": "optional<list<EmploymentRecordDetail>>",
              },
              "files": {
                "docs": "Additional PDF binary files relating to the individual's employment.",
                "type": "optional<list<EmploymentRecordFile>>",
              },
              "id": {
                "docs": "The unique identifier created by Belvo for the current IMSS statement.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "internal_identification": {
                "docs": "Unique ID for user according to the institution. For IMSS Mexico, this is the CURP.",
                "type": "optional<string>",
              },
              "link": {
                "docs": "The unique identifier created by Belvo for the current user.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "personal_data": "optional<EmploymentRecordPersonalData>",
              "report_date": {
                "docs": "The date when the employment record report was generated, in `YYYY-MM-DD` format.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "social_security_summary": "optional<EmploymentRecordSocialSecuritySummary>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecordDetail": {
            "docs": "Details regarding the individual's employment history.",
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "currency": {
                "docs": "The three-letter currency code in which the salary is paid.
",
                "type": "optional<string>",
              },
              "employer": {
                "docs": "The official name of the employer.
",
                "type": "optional<string>",
              },
              "employer_id": {
                "docs": "The official ID of the employer, according to the country.
",
                "type": "optional<string>",
              },
              "employment_status_updates": {
                "docs": "Details regarding any employment changes of the individual.",
                "type": "optional<list<EmploymentRecordEmploymentStatusUpdates>>",
              },
              "end_date": {
                "docs": "Date when employment finished, in `YYYY-MM-DD` format.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "monthly_salary": {
                "docs": "The monthly salary of the individual, including any additional perks.
",
                "type": "optional<float>",
              },
              "most_recent_base_salary": {
                "docs": "The most recent base salary the individual earned.

For Mexico, this is the *daily* rate that the individual earned, including the perks that the individual is entitled to throughout the year.
",
                "type": "optional<float>",
              },
              "start_date": {
                "docs": "Date when employment started, in `YYYY-MM-DD` format.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "state": {
                "docs": "In what geographical state the individual was employed, according to the country.
",
                "type": "optional<string>",
              },
              "weeks_employed": {
                "docs": "Number of weeks that the individual was employed.
",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecordDocumentId": {
            "docs": "Details regarding the individual's ID documents.",
            "inline": undefined,
            "properties": {
              "document_number": {
                "docs": "The ID document's number (as a string).
",
                "type": "optional<string>",
              },
              "document_type": "optional<EnumEmploymentRecordDocumentType>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecordEmploymentStatusUpdates": {
            "docs": "Details regarding any employment changes of the individual.",
            "inline": undefined,
            "properties": {
              "base_salary": {
                "docs": "The base salary of the individual, current as of the `update_date`.
",
                "type": "optional<float>",
              },
              "event": "optional<EnumEmploymentRecordStatusUpdateEvents>",
              "update_date": {
                "docs": "The date that the employment event occured, in `YYYY-MM-DD` format.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecordEntitlement": {
            "docs": "Details regarding the benefits the individual is entitled to.",
            "inline": undefined,
            "properties": {
              "entitled_to_company_benefits": {
                "docs": "Indicates whether or not the individual is entitled to company benefits.
",
                "type": "optional<boolean>",
              },
              "entitled_to_health_insurance": {
                "docs": "Indicated whether or not the individual is entitled to health insurance.
",
                "type": "optional<boolean>",
              },
              "status": "optional<EnumEmploymentRecordStatus>",
              "valid_until": {
                "docs": "Date until when the individual is covered by health insurance and/or company benefits. If `null` the employee is currently working and no end date is required.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecordFile": {
            "docs": "Additional PDF binary files relating to the individual's employment.",
            "inline": undefined,
            "properties": {
              "type": {
                "docs": "The title of the document.
",
                "type": "optional<string>",
              },
              "value": {
                "docs": "The PDF binary of the file (as a string).
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecordPersonalData": {
            "docs": "Details regarding the personal information of the individual.",
            "inline": undefined,
            "properties": {
              "birth_date": {
                "docs": "The date of the birth of the individual, in `YYYY-MM-DD` format.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "document_ids": {
                "docs": "Details regarding the individual's ID documents.",
                "type": "optional<list<EmploymentRecordDocumentId>>",
              },
              "email": {
                "docs": "The email address of the individual (as provided in the initial POST request).
",
                "type": "optional<string>",
              },
              "entitlements": "optional<EmploymentRecordEntitlement>",
              "first_name": {
                "docs": "The first name of the individual.
",
                "type": "optional<string>",
              },
              "last_name": {
                "docs": "The last name of the individual.
",
                "type": "optional<string>",
              },
              "official_name": {
                "docs": "The legal name of the individual
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecordSocialSecuritySummary": {
            "docs": "Details regarding the individual's social security contributions.",
            "inline": undefined,
            "properties": {
              "weeks_contributed": {
                "docs": "Number of weeks the individual has contributed to their social security, based on the number of weeks the individual has worked according to IMSS.
",
                "type": "optional<integer>",
              },
              "weeks_redeemed": {
                "docs": "Number of weeks the individual needed to take out of their pension.
",
                "type": "optional<integer>",
              },
              "weeks_reinstated": {
                "docs": "Number of weeks the individual has paid back into their pension (*AFORE*), after having redeemed them previously.
",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EmploymentRecordsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of employment record objects.",
                "type": "optional<list<EmploymentRecord>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumAccountCategory": {
            "docs": "The type of account.
We return one of the following enum values:
  - `CHECKING_ACCOUNT`
  - `CREDIT_CARD`
  - `INVESTMENT_ACCOUNT`
  - `LOAN_ACCOUNT`
  - `PENSION_FUND_ACCOUNT`
  - `RECEIVABLES_ACCOUNT`
  - `SAVINGS_ACCOUNT`
  - `UNCATEGORIZED`
  - `null`
",
            "type": "optional<string>",
          },
          "EnumBankAccountHolderTypeOfpi": {
            "docs": "The type of bank account. Can be either `INDIVIDUAL` or `BUSINESS`.",
            "enum": [
              "INDIVIDUAL",
              "BUSINESS",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumBankAccountHolderTypePse": {
            "docs": "The type of bank account to create in Belvo. For business bank accounts, this field must the set to `BUSINESS`.",
            "type": "literal<"BUSINESS">",
          },
          "EnumBankAccountPixAccountTypeOfpi": {
            "docs": "The type of bank account. Can be either:

  - `CHECKINGS`
  - `SAVINGS`
  - `SALARY`",
            "enum": [
              "CHECKINGS",
              "SAVINGS",
              "SALARY",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumCategorizationAccountCategory": {
            "docs": "The type of account.
Can be either:
  - `CHECKING_ACCOUNT`
  - `CREDIT_CARD`
  - `LOAN_ACCOUNT`
  - `SAVINGS_ACCOUNT`",
            "enum": [
              "CHECKING_ACCOUNT",
              "CREDIT_CARD",
              "LOAN_ACCOUNT",
              "SAVINGS_ACCOUNT",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumCategorizationAccountHolderType": {
            "docs": "The type of account holder.
Can be either:

  - `INDIVIDUAL`
  - `BUSINESS`",
            "enum": [
              "INDIVIDUAL",
              "BUSINESS",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumCategorizationTransactionCategory": {
            "docs": "The name of the category to which this transaction belongs. For more info about this feature, check our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) article. 

We return one of the following enum values:

  - `Bills & Utilities`
  - `Credits & Loans`
  - `Deposits`
  - `Fees & Charges`
  - `Food & Groceries`
  - `Home & Life`
  - `Income & Payments`
  - `Insurance`
  - `Investments & Savings`
  - `Online Platforms & Leisure`
  - `Personal Shopping`
  - `Taxes`
  - `Transfers`
  - `Transport & Travel`
  - `Unknown`
  - `Withdrawal & ATM`
  - `null`
",
            "type": "optional<string>",
          },
          "EnumCategorizationTransactionSubcategory": {
            "docs": "The transactions subcategory. For more info about this feature, check our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) article. 

We return one of the following enum values:

  - `Electricity & Energy`
  - `Rent`
  - `Telecommunications`
  - `Water`
  - `Auto`
  - `Credit Card`
  - `Instalment`
  - `Interest & Charges`
  - `Mortgage`
  - `Pay Advance`
  - `Personal`
  - `Adjustments`
  - `Bank Fees`
  - `Chargeback`
  - `Refund`
  - `Blocked Balances`
  - `Alimony`
  - `Alcohol & Tobacco`
  - `Bakery & Coffee`
  - `Bars & Nightclubs`
  - `Convenience Store`
  - `Delivery`
  - `Groceries`
  - `Restaurants`
  - `Education`
  - `Gyms & Fitness`
  - `Hair & Beauty`
  - `Health`
  - `Home Decor & Appliances`
  - `Laundry & Dry Cleaning`
  - `Pharmacies`
  - `Professional Services`
  - `Veterinary Services`
  - `Freelance`
  - `Interest`
  - `Retirement`
  - `Salary`
  - `Government`
  - `Home Insurance`
  - `Auto Insurance`
  - `Health & Life Insurance`
  - `Savings`
  - `Fixed income`
  - `Equity`
  - `Investment Funds`
  - `Derivatives`
  - `Cryptocurrencies`
  - `Apps, Software and Cloud Services`
  - `Events, Parks and Museums`
  - `Gambling`
  - `Gaming`
  - `Lottery`
  - `Movie & Audio`
  - `Books & News`
  - `Clothing & Accessories`
  - `Department Store`
  - `Electronics`
  - `E-commerce`
  - `Gifts`
  - `Office Supplies`
  - `Pet Supplies`
  - `Auto Tax & Fees`
  - `Donation`
  - `Government Fees`
  - `Income Tax`
  - `Real Estate Tax & Fees`
  - `Tax Return`
  - `Accommodation`
  - `Auto Expenses`
  - `Auto Rental`
  - `Flights`
  - `Gas`
  - `Mileage Programs`
  - `Parking & Tolls`
  - `Public Transit`
  - `Taxis & Rideshares`
  - `Other`
  - `null`",
            "type": "optional<string>",
          },
          "EnumCategorizationTransactionType": {
            "docs": "The direction of the transaction.
Can be either:

  - `INFLOW` indicates a received transaction.
  - `OUTFLOW` indicates a sent transaction.",
            "enum": [
              "INFLOW",
              "OUTFLOW",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumCustomerIdentifierTypeOfpi": {
            "docs": "The customer's ID document type.

- üáßüá∑ Brazil options: `CPF` or `CNPJ`.
",
            "enum": [
              "CPF",
              "CNPJ",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumCustomerIdentifierTypePse": {
            "docs": "The customer's ID document type.

- üá®üá¥ Colombia options: `CC`, `PP`, `CE`, `TI`, or `NIT`.
",
            "enum": [
              "CC",
              "PP",
              "CE",
              "TI",
              "NIT",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumCustomerType": {
            "docs": "The type of customer. Can be either:

  - `INDIVIDUAL`
  - `BUSINESS`
    

**Notes:** For üá®üá¥ Colombia's PSE, you can only create customers of type `INDIVIDUAL`.
",
            "enum": [
              "INDIVIDUAL",
              "BUSINESS",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumEmploymentRecordDocumentType": {
            "docs": "The type of document related to the individual. We return one of the following values:

  - `NSS`
  - `CURP`
",
            "enum": [
              "NSS",
              "CURP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumEmploymentRecordStatus": {
            "docs": "Indicates whether or not the individual is currently `EMPLOYED` or `UNEMPLOYED`.
",
            "enum": [
              "EMPLOYED",
              "UNEMPLOYED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumEmploymentRecordStatusUpdateEvents": {
            "docs": "The event that caused the change in employment status or salary. We return one of the following values:
  
  - `DISMISSED_RESIGNED`
  - `SALARY_MODIFICATION`
  - `HIRED`
  - `VOLUNTARY_CONTRIBUTION`
  - `ABSENCE`
  - `SICK_LEAVE`
",
            "enum": [
              "DISMISSED_RESIGNED",
              "SALARY_MODIFICATION",
              "HIRED",
              "VOLUNTARY_CONTRIBUTION",
              "ABSENCE",
              "SICK_LEAVE",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumIncomeMinimumConfidenceLevelRequest": {
            "docs": "The minimum confidence level of the incomes you want to get information for.

You can send through one of the following values:

  - `HIGH`
  - `MEDIUM`
  - `LOW`
",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumIncomeSourceType": {
            "docs": "The type of source we generate income insights from.
We return one of the following enum values:

  - `BANK`
",
            "type": "literal<"BANK">",
          },
          "EnumIncomeStreamConfidence": {
            "docs": "Belvo's level of confidence for future incomes.

We return one of the following enum values:

  - `HIGH`
  - `MEDIUM`
  - `LOW`
",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumIncomeStreamFrequency": {
            "docs": "How often the income is received.

We return one of the following enum values:

  - `MONTHLY` - For transactions that occur once per month.
  - `FORTNIGHTLY` - For transactions that occur once every two weeks.
  - `WEEKLY` - For transactions that occur once per week.
  - `IRREGULAR` - For transactions that do not occur on a defined frequency pattern.
  - `SINGLE` - For transactions that occur only once and do not repeat.
",
            "enum": [
              "MONTHLY",
              "FORTNIGHTLY",
              "WEEKLY",
              "IRREGULAR",
              "SINGLE",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumIncomeStreamType": {
            "docs": "The type of income used in the calculations.

We return one of the following enum values:

  - `SALARY`
  - `GOVERNMENT`
  - `INTEREST`
  - `RENT`
  - `RETIREMENT`
  - `FREELANCE`
  - `ALTERNATIVE_INCOME`
  - `TRANSFER`
  - `DEPOSIT`
  - `UNKNOWN`
",
            "enum": [
              "SALARY",
              "GOVERNMENT",
              "INTEREST",
              "RENT",
              "RETIREMENT",
              "FREELANCE",
              "ALTERNATIVE_INCOME",
              "TRANSFER",
              "DEPOSIT",
              "UNKNOWN",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumIncomeVerificationAccountCategory": {
            "docs": "The type of account.
Can be either:
  - `CHECKING_ACCOUNT`
  - `SAVINGS_ACCOUNT`",
            "enum": [
              "CHECKING_ACCOUNT",
              "SAVINGS_ACCOUNT",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumIncomeVerificationAccountHolderType": {
            "docs": "The type of account holder. Can be:

  - `INDIVIDUAL`",
            "type": "literal<"INDIVIDUAL">",
          },
          "EnumIncomeVerificationType": {
            "docs": "The direction of the transaction:
  
- `INFLOW` indicates money coming into the account.
",
            "type": "optional<literal<"INFLOW">>",
          },
          "EnumInstitutionIntegrationType": {
            "docs": "The type of technology used to access the institution. We return one of the following values:

- `credentials`: Uses Belvo's scraping technology, combined with user credentials, to perform requests.
- `openbanking`: Uses the bank's openbanking API to perform requests.
",
            "enum": [
              "credentials",
              "openbanking",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumInstitutionStatus": {
            "docs": "Indicates whether Belvo's integration with the institution is currently active (`healthy`) or undergoing maintenance (`down`).
",
            "enum": [
              "healthy",
              "down",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumInstitutionType": {
            "docs": "The type of institution. We return one of the following values:

  - `bank`
  - `fiscal`
  - `employment`
",
            "enum": [
              "bank",
              "fiscal",
              "employment",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumInvestmentPortfolioInstrumentType": {
            "docs": "The instrument type. For more information about instruments, please see our [Investments DevPortal article](https://developers.belvo.com/docs/investments#instruments).

We return one of the following values:

  - `BOND`
  - `DEPOSIT`
  - `ETF`
  - `FUND`
  - `OTHER`
  - `PENSION`
  - `STOCK`
",
            "enum": [
              "BOND",
              "DEPOSIT",
              "ETF",
              "FUND",
              "OTHER",
              "PENSION",
              "STOCK",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumInvestmentPortfolioType": {
            "docs": "The portfolio type.

We return one of the following values:

  - `FIXED_INCOME`
  - `OTHER`
  - `PENSION`
  - `VARIABLE_INCOME`
",
            "enum": [
              "FIXED_INCOME",
              "OTHER",
              "PENSION",
              "VARIABLE_INCOME",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumInvoiceAllowedIncomeTypesRequest": {
            "docs": "The categories of the incomes you want to get information for. 
You can send through one or more of the following values:
  - `SALARY`
  - `GOVERNMENT`
  - `INTEREST`
  - `RENT`
  - `RETIREMENT`
  - `FREELANCE`
  - `ALTERNATIVE_INCOME`
  - `TRANSFER`
  - `DEPOSIT`
  - `UNKNOWN`",
            "enum": [
              "SALARY",
              "GOVERNMENT",
              "INTEREST",
              "RENT",
              "RETIREMENT",
              "FREELANCE",
              "ALTERNATIVE_INCOME",
              "TRANSFER",
              "DEPOSIT",
              "UNKNOWN",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumInvoiceDianInvoiceType": {
            "docs": "The fiscal institution's classification of the invoice.

For Colombia's DIAN, we return one of the following values:

  - `Factura Electr√≥nica de Venta`
",
            "type": "optional<literal<"Factura Electr√≥nica de Venta">>",
          },
          "EnumInvoiceDianPaymentMethod": {
            "docs": "The payment method used for this invoice, as defined by the legal entity of the country.

For DIAN Colombia, we return one of the following values:

  - `Contado`
  - `Cr√©dito`
  - `null`
",
            "type": "optional<string>",
          },
          "EnumInvoiceSatInvoiceType": {
            "docs": "The fiscal institution's classification of the invoice.

For Mexico's SAT, we return one of the following values:

  - `Egreso`
  - `Ingreso`
  - `N√≥mina`
  - `Pago`
  - `Traslado`
",
            "enum": [
              "Egreso",
              "Ingreso",
              {
                "name": "Nomina",
                "value": "N√≥mina",
              },
              "Pago",
              "Traslado",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumInvoiceSatPaymentMethod": {
            "docs": "The payment method code used for this invoice, as defined by the legal entity of the country.

- üá≤üáΩ Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-method). For Mexico, we return `PUE`, `PIP`, `PPD`, or `null`.
",
            "type": "optional<string>",
          },
          "EnumInvoiceType": {
            "docs": "The direction of the invoice (from the perspective of the Link owner).
- `OUTFLOW` indicates a sent invoice. - `INFLOW` indicates a received invoice.
",
            "type": "optional<string>",
          },
          "EnumLinkAccessModeRequest": {
            "default": "recurrent",
            "docs": "The type of link to create.

- Use `single` to do ad hoc one-time POST requests for accounts, owners, and transactions.
- Use `recurrent` to have Belvo access information on a recurrent basis so you always have fresh account, owner, balance, and transaction data.

For more information, see our [Links](https://developers.belvo.com/docs/links-and-institutions#links) article.
",
            "enum": [
              "single",
              "recurrent",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumLinkAccessModeResponse": {
            "docs": "The link type.
For more information, see our [Links](https://developers.belvo.com/docs/links-and-institutions#links) article.
We return one of the following enum values:
  - `single`
  - `recurrent`
  - `null`
",
            "type": "optional<string>",
          },
          "EnumLinkRefreshRate": {
            "default": "7d",
            "docs": "The update refresh rate for the recurrent link. For more information, check out our [recurrent link documentation](https://developers.belvo.com/docs/links-and-institutions#recurrent-links) in our DevPortal.
We return one of the following enum values:
  - `6h`
  - `12h`
  - `24h`
  - `7d` (default)
  - `30d` (once a month)
  - `null` (for single links)
",
            "type": "optional<string>",
          },
          "EnumLinkStatus": {
            "docs": "The current status of the link. For more information, see our [Link](https://developers.belvo.com/docs/links-and-institutions#links) article in the devportal.
We return one of the following values:
  - `valid`
  - `invalid`
  - `unconfirmed`
  - `token_required`
",
            "enum": [
              "valid",
              "invalid",
              "unconfirmed",
              "token_required",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumLoanDataFeeType": {
            "docs": "The type of fee. We return one of the following values:

  - `OPERATION_FEE`
  - `INSURANCE_FEE`
  - `OTHERS`
",
            "enum": [
              "OPERATION_FEE",
              "INSURANCE_FEE",
              "OTHERS",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumLoanDataInterestRateType": {
            "docs": "The period that the interest is applied to the loan. We return one of the following values:

  - `MONTHLY`
  - `YEARLY`
",
            "enum": [
              "MONTHLY",
              "YEARLY",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumPaymentIntentHolderTypePse": {
            "docs": "Type of bank account holder. For PSE, this value must be `INDIVIDUAL`.",
            "enum": [
              "INDIVIDUAL",
              "BUSINESS",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumPaymentIntentStatus": {
            "docs": "The current status of the payment intent.
",
            "enum": [
              "REQUIRES_PAYMENT_METHOD",
              "REQUIRES_ACTION",
              "SUCCEEDED",
              "PROCESSING",
              "FAILED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumPaymentLinkAllowedPaymentMethod": {
            "docs": "Selected payment method type.

  - For üáßüá∑ Brazil's OFPI, the value must be `open_finance`.  
  - For üá®üá¥ Colombia's PSE, the value must be `pse`.",
            "enum": [
              "open_finance",
              "pse",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumPaymentLinkProvider": {
            "docs": "The provider used for the payment link. 


- For üáßüá∑ Brazil's OFPI, the value must be `belvo`.  
- For üá®üá¥ Colombia's PSE, the value must be `payments_way`.
",
            "enum": [
              "belvo",
              "payments_way",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumPaymentLinksStatus": {
            "docs": "The current status of the payment link. Can be either:

  - `ACTIVE` meaning that the payment intent's status is either `REQUIRES_PAYMENT_METHOD`, `REQUIRES_ACTION`, or `PROCESSING`.
  - `INACTIVE` meaning that the payment intent's status is either `SUCCEEDED` or `FAILED`.

**Note:** You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
            "enum": [
              "ACTIVE",
              "INACTIVE",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumPaymentTransactionType": {
            "docs": "The direction of the transaction.

  - `INFLOW` indicates money coming into the account.
  - `OUTFLOW` indicates money coming out of the account.",
            "enum": [
              "INFLOW",
              "OUTFLOW",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumPaymentsCountry": {
            "docs": "The customer's country of residence.


-  BRA (üáßüá∑ Brazil)
-  COL (üá®üá¥ Colombia)
",
            "enum": [
              "BRA",
              "COL",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumPaymentsCurrency": {
            "docs": "The currency of the amount paid.


  - üáßüá∑ BRL (Brazilian Real)
  - üá®üá¥ COP (Colombian Peso)",
            "enum": [
              "BRL",
              "COP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumReceivableTransactionFeeType": {
            "docs": "The type of fee applied to the transaction. We return one of the following values:

  - `TRANSACTION_FEE`",
            "type": "optional<literal<"TRANSACTION_FEE">>",
          },
          "EnumReceivableTransactionStatus": {
            "docs": "The status of the transaction. Can be either:

  - `APPROVED`
  - `CANCELLED`
  - `REVERTED`
  - `UNCATEGORIZED`",
            "enum": [
              "APPROVED",
              "CANCELLED",
              "REVERTED",
              "UNCATEGORIZED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumReceivableTransactionType": {
            "docs": "The type of transaction. For example, whether the transaction was a `VISA_DEBIT` or a `MASTERCARD_CREDIT`.

We return one of the following values:

  - `VISA_CREDIT`
  - `VISA_DEBIT`
  - `MASTERCARD_CREDIT`
  - `MASTERCARD_DEBIT`
  - `ELO_CREDIT`
  - `ELO_DEBIT`
  - `null`
",
            "type": "optional<string>",
          },
          "EnumRecurringExpenseCategory": {
            "docs": "The transaction category for the recurring expense. For more information on the available categories, please see our [Transaction categorization documentation](https://developers.belvo.com/docs/banking#categorizing-transactions).

- `Online Platforms & Leisure` (Netflix, Spotify, Gym Memberships)
- `Bills & Utilities` (electricity, telephone, internet)
- `Credits & Loans` (credit card cash advances, student loan, watercraft lease)
- `Insurance` (home, car, and health & life insurance)
- `Transport & Travel` (Uber trip, airbnb, parking)
- `Taxes` (service fee, donation, court taxes)
",
            "enum": [
              {
                "name": "BillsUtilities",
                "value": "Bills & Utilities",
              },
              {
                "name": "CreditsLoans",
                "value": "Credits & Loans",
              },
              "Insurance",
              {
                "name": "OnlinePlatformsLeisure",
                "value": "Online Platforms & Leisure",
              },
              {
                "name": "TransportTravel",
                "value": "Transport & Travel",
              },
              "Taxes",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumRecurringExpenseFrequency": {
            "docs": "The frequency at which this recurring expense occurs.


‚ÑπÔ∏è **Note:** Belvo only identifies `MONTHLY` frequencies.
",
            "type": "literal<"MONTHLY">",
          },
          "EnumRecurringExpensePaymentType": {
            "docs": "The type of recurring expense. We return one of the following values:

  - `SUBSCRIPTION`
  - `REGULAR`
",
            "enum": [
              "SUBSCRIPTION",
              "REGULAR",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumTaxComplianceStatusOutcome": {
            "docs": "Indicates whether the taxpayer is complying to all their tax obligations (`POSITIVE`), if they are not (`NEGATIVE`), or have none to comply to (`NO_OBLIGATIONS`).",
            "enum": [
              "POSITIVE",
              "NEGATIVE",
              "NO_OBLIGATIONS",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumTaxRetentionPaymentStatus": {
            "docs": "Indicates whether or not the tax has been paid or not. Can be either:
  - `PAID`
  - `PROVISIONED`
",
            "enum": [
              "PAID",
              "PROVISIONED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumTaxRetentionReceiverNationality": {
            "docs": "Whether the invoice receiver is a Mexican national or not. If the receiver is not considered a Mexican national, the retained taxes can be calculated differently. Possible values:
  - `NATIONAL`
  - `FOREIGN`
",
            "enum": [
              "NATIONAL",
              "FOREIGN",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumTaxRetentionType": {
            "docs": "The type of tax retention in relation to the invoice (from the perspective of the Link owner).

- `OUTFLOW` relates to a tax retention for a sent invoice.
- `INFLOW` related to a tax retention for a received invoice.
",
            "enum": [
              "OUTFLOW",
              "INFLOW",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnumTransactionBillStatus": {
            "docs": "The status of the bill that the transaction appears on. Can be one of:

  - `PAID`: The bill has been paid in full.
  - `CLOSED`: The bill has been closed by the institution.
  - `OPEN`: The bill is currently open. (Note: This is the main bill that Belvo retrieves balance data from).
  - `FUTURE`: The bill is pending.
  - `null`: No bill status was identified.
  
‚ÑπÔ∏è Note: Some banks consider CLOSED as PAID.",
            "type": "optional<string>",
          },
          "EnumTransactionCategory": {
            "docs": "The name of the category to which this transaction belongs.

> **Get transaction categorization**
With [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions), we clean and categorize transactions for you, turning raw data into actionable insights. To enable this feature, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.

We return one of the following enum values:

  - `Bills & Utilities`
  - `Credits & Loans`
  - `Deposits`
  - `Fees & Charges`
  - `Food & Groceries`
  - `Home & Life`
  - `Income & Payments`
  - `Insurance`
  - `Investments & Savings`
  - `Online Platforms & Leisure`
  - `Personal Shopping`
  - `Taxes`
  - `Transfers`
  - `Transport & Travel`
  - `Unknown`*
  - `Withdrawal & ATM`
  - `null`


  \* For clients not using our Transaction Categorization product, we return `null` instead.
",
            "type": "optional<string>",
          },
          "EnumTransactionStatus": {
            "docs": "The status of the transaction. We return one of the following values:

  - `PENDING`
  - `PROCESSED`
  - `UNCATEGORIZED`
  - `null`
",
            "type": "optional<string>",
          },
          "EnumTransactionSubcategory": {
            "docs": "The transactions subcategory.

  > **Get transaction categorization**
  For clients not using our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions), we return `null` instead. To enable this feature, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.


We return one of the following enum values:

  - `Electricity & Energy`
  - `Rent`
  - `Telecommunications`
  - `Water`
  - `Auto`
  - `Credit Card`
  - `Instalment`
  - `Interest & Charges`
  - `Mortgage`
  - `Pay Advance`
  - `Personal`
  - `Adjustments`
  - `Bank Fees`
  - `Chargeback`
  - `Refund`
  - `Blocked Balances`
  - `Alimony`
  - `Alcohol & Tobacco`
  - `Bakery & Coffee`
  - `Bars & Nightclubs`
  - `Convenience Store`
  - `Delivery`
  - `Groceries`
  - `Restaurants`
  - `Education`
  - `Gyms & Fitness`
  - `Hair & Beauty`
  - `Health`
  - `Home Decor & Appliances`
  - `Laundry & Dry Cleaning`
  - `Pharmacies`
  - `Professional Services`
  - `Veterinary Services`
  - `Freelance`
  - `Interest`
  - `Retirement`
  - `Salary`
  - `Government`
  - `Home Insurance`
  - `Auto Insurance`
  - `Health & Life Insurance`
  - `Savings`
  - `Fixed income`
  - `Equity`
  - `Investment Funds`
  - `Derivatives`
  - `Cryptocurrencies`
  - `Apps, Software and Cloud Services`
  - `Events, Parks and Museums`
  - `Gambling`
  - `Gaming`
  - `Lottery`
  - `Movie & Audio`
  - `Books & News`
  - `Clothing & Accessories`
  - `Department Store`
  - `Electronics`
  - `E-commerce`
  - `Gifts`
  - `Office Supplies`
  - `Pet Supplies`
  - `Auto Tax & Fees`
  - `Donation`
  - `Government Fees`
  - `Income Tax`
  - `Real Estate Tax & Fees`
  - `Tax Return`
  - `Accommodation`
  - `Auto Expenses`
  - `Auto Rental`
  - `Flights`
  - `Gas`
  - `Mileage Programs`
  - `Parking & Tolls`
  - `Public Transit`
  - `Taxis & Rideshares`
  - `Other`
  - `null`",
            "type": "optional<string>",
          },
          "EnumTransactionType": {
            "docs": "The direction of the transaction:
- `INFLOW` indicates money coming into the account.
- `OUTFLOW` indicates money going out of the account.
- `null` when no information was present regarding the direction of the transaction.
",
            "type": "optional<string>",
          },
          "EquityStatementBusiness": {
            "docs": "Object containing the general fiscal situation of the taxpayer.",
            "inline": undefined,
            "properties": {
              "accounts_documents_and_finance_leases_receivable": {
                "docs": "Total of all payments the company expects to receive (for example, from partial invoices that have not been paid yet).",
                "type": "float",
              },
              "cash_and_cash_equivalents": {
                "docs": "Total cash (or cash equivalents) that the business currently holds at the end of the fiscal year.",
                "type": "float",
              },
              "debts": {
                "docs": "Total debts that the company currently has.",
                "type": "float",
              },
              "inventory": {
                "docs": "Total financial value of the company's sellable inventory.",
                "type": "float",
              },
              "investments_and_derivative_financial_instruments": {
                "docs": "Total value of all investments, stocks, or similar, that the company has.",
                "type": "float",
              },
              "property_plant_and_equipment_investment_properties": {
                "docs": "Total value of real estate, plant infrastructure, or equipment that has been purchased.",
                "type": "float",
              },
              "total_gross_equity": {
                "docs": "Total gross equity.",
                "type": "float",
              },
              "total_net_equity": {
                "docs": "The total net equity of the company (`total_gross_equity` - `debts`).",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EquityStatementIndividual": {
            "docs": "Object containing the general fiscal situation of the taxpayer.",
            "inline": undefined,
            "properties": {
              "total_debts": {
                "docs": "The total debts of the tax_payer",
                "type": "float",
              },
              "total_gross_equity": {
                "docs": "The total gross equity of the tax payer.",
                "type": "float",
              },
              "total_net_equity": {
                "docs": "The total net equity value of the taxpayer.",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EyodIncomeVerificationBodyRequest": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_category": "EnumIncomeVerificationAccountCategory",
              "account_holder_id": {
                "docs": "Your unique ID for the account holder, in UUID format.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "account_holder_type": "EnumIncomeVerificationAccountHolderType",
              "account_id": {
                "docs": "Your unique ID for the account where the transaction occurred.",
                "type": "string",
              },
              "amount": {
                "docs": "The income amount.",
                "type": "float",
              },
              "currency": {
                "docs": "The three-letter currency code of the income. For example:

  ‚Ä¢ üáßüá∑ BRL (Brazilian Real)
  ‚Ä¢ üá®üá¥ COP (Colombian Peso)
  ‚Ä¢ üá≤üáΩ MXN (Mexican Peso)",
                "type": "string",
              },
              "description": {
                "docs": "The description of the income.",
                "type": "string",
              },
              "institution": {
                "docs": "The institution where the account is registered.

**Note:** This is the name that you use in your system to identify the institution. For example BBVA Retail.",
                "type": "string",
              },
              "transaction_id": {
                "docs": "Your unique ID for the income.",
                "type": "string",
              },
              "type": "optional<EnumIncomeVerificationType>",
              "value_date": {
                "docs": "The date when the income transaction occurred, in `YYYY-MM-DD` format.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "GrossIncomeIndividual": {
            "docs": "Object containing the declared gross income of the tax payer.",
            "inline": undefined,
            "properties": {
              "capital_income": {
                "docs": "Income received from an investment (such as dividends or from renting a property).",
                "type": "float",
              },
              "earned_income": {
                "docs": "Income received from employment.",
                "type": "float",
              },
              "fee_based_income": {
                "docs": "Income received from emitted invoices (for example, income that independent contractors or freelancers receive).",
                "type": "float",
              },
              "non_labor_income": {
                "docs": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "HolderBankAccountInformationPse": {
            "docs": "Object with additional information about the individual that holds the bank account.",
            "inline": undefined,
            "properties": {
              "first_name": {
                "docs": "The account holder's first name.",
                "type": "optional<string>",
              },
              "last_name": {
                "docs": "The account holder's last name.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "HolderBankAccountPse": {
            "docs": "Details regarding the bank account holder.",
            "inline": undefined,
            "properties": {
              "information": "optional<HolderBankAccountInformationPse>",
              "type": "optional<EnumPaymentIntentHolderTypePse>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "HolderResponseOfpiInformation": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "BUSINESS",
              },
              {
                "type": "INDIVIDUAL",
              },
            ],
          },
          "INDIVIDUAL": {
            "docs": "Details about the OFPI payment method.",
            "inline": undefined,
            "properties": {
              "open_finance": "PaymentIntentPaymentMethodDetailsBodyIndividualOfpi",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Income": {
            "docs": "Income insights",
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was created in Belvo's database.",
                "type": "datetime",
              },
              "first_transaction_date": {
                "docs": "The date when the first transaction occurred, in `YYYY-MM-DD` format.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Belvo's unique identifier for the current income.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "income_source_type": "EnumIncomeSourceType",
              "income_streams": {
                "docs": "An array of enriched income stream objects.",
                "type": "list<IncomeStreamsBody>",
              },
              "last_transaction_date": {
                "docs": "The date when when the last transaction occurred, in `YYYY-MM-DD` format.
",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "link": {
                "docs": "The `link.id` the account belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "monthly_average": {
                "docs": "Average amount of income received per month across all the accounts for the specific user.
",
                "type": "float",
              },
              "monthly_average_high_confidence": {
                "docs": "Average amount of income received per month for the specific user with `HIGH` confidence.
",
                "type": "float",
              },
              "monthly_average_irregular": {
                "docs": "Average amount of irregular income (with a frequency of `SINGLE` or `IRREGULAR`) received per month for the specific user.
",
                "type": "float",
              },
              "monthly_average_low_confidence": {
                "docs": "Average amount of income received per month for the specific user with `LOW` confidence.
",
                "type": "float",
              },
              "monthly_average_medium_confidence": {
                "docs": "Average amount of income received per month for the specific user with `MEDIUM` confidence.
",
                "type": "float",
              },
              "monthly_average_regular": {
                "docs": "Average amount of regular income (with a frequency of `MONTHLY`, `FORTNIGHTLY`, or `WEEKLY`) received per month for the specific user.
",
                "type": "float",
              },
              "number_of_income_streams": {
                "docs": "Number of total income streams analized.
",
                "type": "integer",
              },
              "total_high_confidence": {
                "docs": "Total amount of income for the specific user with `HIGH` confidence.
",
                "type": "float",
              },
              "total_income_amount": {
                "docs": "Total amount of all income received for the specific user.
",
                "type": "float",
              },
              "total_irregular_income_amount": {
                "docs": "Total amount of irregular income (with a frequency of `SINGLE` or `IRREGULAR`) for the specific user.
",
                "type": "optional<float>",
              },
              "total_low_confidence": {
                "docs": "Total amount of income for the specific user with `LOW` confidence.
",
                "type": "float",
              },
              "total_medium_confidence": {
                "docs": "Total amount of income for the specific user with `MEDIUM` confidence.
",
                "type": "float",
              },
              "total_regular_income_amount": {
                "docs": "Total amount of regular income (with a frequency of `MONTHLY`, `FORTNIGHTLY`, `WEEKLY`) for the specific user.
",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "IncomeStreamsBody": {
            "docs": "A list of income streams for the account.

For each income stream, we provide additional insights such as:
- Frequency, stability, and confidence level of the income transactions.
- Key metrics about the transaction amounts.
‚ÑπÔ∏è If no income sources are found, we return an empty array.
",
            "inline": undefined,
            "properties": {
              "account_id": {
                "docs": "Unique ID for the bank account to be verified for income streams.",
                "type": "string",
              },
              "average_income_amount": {
                "docs": "The average income transaction amount from the source.
",
                "type": "float",
              },
              "confidence": "EnumIncomeStreamConfidence",
              "currency": {
                "docs": "The three-letter currency code of the income. For example:

  ‚Ä¢ üáßüá∑ BRL (Brazilian Real)
  ‚Ä¢ üá®üá¥ COP (Colombian Peso)
  ‚Ä¢ üá≤üáΩ MXN (Mexican Peso)",
                "type": "string",
              },
              "frequency": "EnumIncomeStreamFrequency",
              "full_periods": {
                "docs": "Number of period units (based on *rolling months*) with data to perform calculations.

**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.
",
                "type": "integer",
              },
              "income_type": "EnumIncomeStreamType",
              "last_income_amount": {
                "docs": "The amount of the most recent income received from the source.
",
                "type": "float",
              },
              "last_income_date": {
                "docs": "The date when the most recent income from the stream was received, in `YYYY-MM-DD` format.
",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "last_income_description": "unknown",
              "lookback_periods": {
                "docs": "Number of period units (based on *rolling months*) used to generate insights and calculations.

**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.
",
                "type": "integer",
              },
              "monthly_average": {
                "docs": "The average amount of income received from the source over `lookback_periods`.
",
                "type": "float",
              },
              "number_of_incomes": {
                "docs": "Number of income transactions over the `lookback_periods`.
",
                "type": "integer",
              },
              "periods_with_income": {
                "docs": "Number of period units (based on *rolling months*) with at least one income available.

**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.
",
                "type": "integer",
              },
              "regularity": {
                "docs": "The regularity of the income basde in its frequency, with a range from 0 to 1, where 1 represents perfect regularity.

**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.
",
                "type": "optional<float>",
              },
              "stability": {
                "docs": "The stability of the income based on its amount, with a range from 0 to 1, where 1 represents perfect stability.

**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.
",
                "type": "optional<float>",
              },
              "trend": {
                "docs": "The income trend during a period of time calculated between last income and first income received, where:
  - a negative float means that the income trend is decreasing during the time period.
  - a positive float means that the income trend is increasing during the time period.

**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.
",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "IncomesPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of income objects.",
                "type": "optional<list<Income>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Institution": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "country_codes": {
                "docs": "The country codes where the institution is available, for example:
- üáßüá∑ BR (Brazil)
- üá®üá¥ CO (Colombia)
- üá≤üáΩ MX (Mexico)
",
                "type": "optional<list<string>>",
              },
              "display_name": {
                "docs": "The customer-facing name of the institution.",
                "type": "optional<string>",
              },
              "features": {
                "docs": "The features that the institution supports. If the institution has no special features, then Belvo returns an empty array.

Here is a list of the available features:
- `token_required` indicates that the institution may require a token during link creation or when making any other requests.
",
                "type": "optional<list<InstitutionsFeature>>",
              },
              "form_fields": "optional<list<InstitutionsFormField>>",
              "icon_logo": {
                "docs": "The URL of the institution's icon logo.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "The ID of the institution as designated by Belvo.",
                "type": "optional<integer>",
              },
              "integration_type": "optional<EnumInstitutionIntegrationType>",
              "logo": {
                "docs": "The URL of the institution's logo.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The name of the institution, as designated by Belvo.
Please see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names.",
                "type": "optional<string>",
              },
              "primary_color": {
                "docs": "The primary color on the institution's website.",
                "type": "optional<string>",
              },
              "resources": {
                "docs": "A list of Belvo resources that you can use with the institution. This list includes one or more of the following resources:

  - `ACCOUNTS`
  - `BALANCES`
  - `INCOMES`
  - `INVESTMENTS_PORTFOLIOS` 
  - `INVESTMENTS_TRANSACTIONS` *This field has been deprecated.*
  - `INVOICES`
  - `OWNERS`
  - `RECURRING_EXPENSES`
  - `RISK_INSIGHTS`
  - `TRANSACTIONS`
  - `TAX_COMPLIANCE_STATUS`
  - `TAX_STATUS`
  - `TAX_RETURNS`
",
                "type": "optional<list<string>>",
              },
              "status": "optional<EnumInstitutionStatus>",
              "text_logo": {
                "docs": "The URL of the institution's text logo.",
                "type": "optional<string>",
              },
              "type": "optional<EnumInstitutionType>",
              "website": {
                "docs": "The URL of the institution's website.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionAccount": {
            "docs": "Details regarding the institution.",
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The name of the institution, as designated by Belvo.
Please see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names.",
                "type": "optional<string>",
              },
              "type": "optional<EnumInstitutionType>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionDownError": {
            "docs": "This error occurs when the institution's website that you're trying to access is down due to maintenance or other issues, which means Belvo is unable to create new links or retrieve new data.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`institution_down`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_down" target="_blank">400 institution_down errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `institution_down` errors, the description is:
  
  - `The financial institution is down, try again later`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionFormField": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "label": {
                "docs": "The label of the form field. For example:
- Document
- Clave
- Token
",
                "type": "optional<string>",
              },
              "length": {
                "docs": "Number of digits allowed when the type is `token`.",
                "type": "optional<integer>",
              },
              "name": {
                "docs": "The username, password, or username type field.",
                "type": "optional<string>",
              },
              "optional": {
                "docs": "It indicates whether this form field is optional.",
                "type": "optional<boolean>",
              },
              "placeholder": {
                "docs": "The placeholder text in the form field.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The input type for the form field. For example, string.",
                "type": "optional<string>",
              },
              "validation": {
                "docs": "The type of input validation used for the field.",
                "type": "optional<string>",
              },
              "validation_message": {
                "docs": "The message displayed when an invalid input is provided in the form field.",
                "type": "optional<string>",
              },
              "values": {
                "docs": "Array of additional form field values.",
                "type": "optional<list<InstitutionsFormFieldValues>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionInactiveError": {
            "docs": "This error occurs when we (Belvo) have deactivated the institution in our API.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`institution_inactive`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_inactive" target="_blank">400 institution_inactive errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `institution_inactive` errors, the description is:
  
  - `The institution has been temporarily deactivated`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionUnavailableError": {
            "docs": "This error occurs when the institution's website that you're trying to access is down due to maintenance or other issues, which means Belvo is unable to create new links or retrieve new data.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`institution_unavailable`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_unavailable" target="_blank">400 institution_unavailable errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error.

For `institution_unavailable` errors, the description is:
  
  - `The financial institution is unavailable`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionsFeature": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "The description of the feature.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The name of the feature.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionsFormField": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "label": {
                "docs": "The label of the form field. For example:
- Client number
- Key Bancanet
- Document
",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The username, password, or username type field.",
                "type": "optional<string>",
              },
              "placeholder": {
                "docs": "The placeholder text in the form field.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The input type for the form field. For example, string.",
                "type": "optional<string>",
              },
              "validation": {
                "docs": "The type of input validation used for the field.",
                "type": "optional<string>",
              },
              "validation_message": {
                "docs": "The message displayed when an invalid input is provided in the form field.",
                "type": "optional<string>",
              },
              "values": {
                "docs": "If the form field is for documents, the institution may require additional input regarding the document type.",
                "type": "optional<list<InstitutionsFormFieldValues>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionsFormFieldValues": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "The code of the document.",
                "type": "optional<string>",
              },
              "label": {
                "docs": "The label for the field. For example:
- C√©dula de Ciudadan√≠a
- C√©dula de Extranjer√≠a
- Pasaporte
",
                "type": "optional<string>",
              },
              "placeholder": {
                "docs": "The placeholder text in the form field.",
                "type": "optional<string>",
              },
              "validation": {
                "docs": "The type of input validation used for the field.",
                "type": "optional<string>",
              },
              "validation_message": {
                "docs": "The message displayed when an invalid input is provided in the form field.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InstitutionsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of institution objects.",
                "type": "optional<list<Institution>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidAccessMode": {
            "docs": "This error occurs when you try to update a link from single to recurrent, but there are no login credentials stored for the user.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`invalid_access_mode_switch`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_access_mode_switch" target="_blank">400 invalid_access_mode_switch errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `invalid_access_mode_switch` errors, the description is:
  
  - `This link doesn't have stored credentials hence it can't be switched to recurrent mode"`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidLinkError": {
            "docs": "This error occurs when you try to access an account but the user credentials are no longer valid, prompting an error from the institution.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`invalid_link`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_link" target="_blank">400 invalid_link errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `invalid_link` errors, the description is:
  
  - `The link has been invalidated. You may need to update link credentials`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidPeriodError": {
            "docs": "This error occurs when you request incomes for a link within a given date range, however, the period between `date_from` and `date_to` is less than 90 days.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`invalid_period`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_period" target="_blank">400 invalid_period errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `invalid_period` errors, the description is:
  
  - `The number of days between date_from and date_to must be at least 90 days`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvestmentsPortfolio": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "balance_gross": {
                "docs": "The current gross total value of the entire portfolio and all its underlying instruments, as given by the institution.
",
                "type": "optional<float>",
              },
              "balance_net": {
                "docs": "The total current value of the entire portfolio and all its underlying instruments, as given by the institution.

‚ÑπÔ∏è **Note:** In Brazil, this is usually calculated based on the net value (that is, not including tax).
",
                "type": "optional<float>",
              },
              "balance_type": {
                "docs": "Indicates whether this account is either an `ASSET` or a `LIABILITY`. You can consider the balance of an `ASSET` as being positive, while the balance of a `LIABILITY` as negative.
",
                "type": "optional<string>",
              },
              "currency": {
                "docs": "The currency of the portfolio. For example:


- üáßüá∑ BRL (Brazilian Real)
- üá®üá¥ COP (Colombian Peso)
- üá≤üáΩ MXN (Mexican Peso)


Please note that other currencies other than in the list above may be returned.
",
                "type": "string",
              },
              "id": {
                "docs": "Belvo's unique ID for the current portfolio.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "instruments": {
                "docs": "An array of instruments that fall into the investment portfolio.",
                "type": "optional<list<optional<InvestmentsPortfolioInstrument>>>",
              },
              "name": {
                "docs": "The name of the portfolio, as given in the institution.
",
                "type": "string",
              },
              "type": "EnumInvestmentPortfolioType",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvestmentsPortfolioInstrument": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "average_acquisition_price": {
                "docs": "The average price of each share acquired in the instrument.",
                "type": "optional<float>",
              },
              "balance_gross": {
                "docs": "The total gross value of the instrument (including taxes).",
                "type": "optional<float>",
              },
              "balance_net": {
                "docs": "The total net value of the instrument (excluding taxes).",
                "type": "optional<float>",
              },
              "currency": {
                "docs": "The currency of the instrument. For example:

- üáßüá∑ BRL (Brazilian Real)
- üá®üá¥ COP (Colombian Peso)
- üá≤üáΩ MXN (Mexican Peso)
- üá∫üá∏ USD (US Dollar)


Please note that other currencies other than in the list above may be returned.
",
                "type": "string",
              },
              "fees": {
                "docs": "An array of fees that apply to the instrument.",
                "type": "optional<list<optional<InvestmentsPortfolioInstrumentFees>>>",
              },
              "id": {
                "docs": "Belvo's unique ID for the current instrument.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "interest_rates": {
                "docs": "An array of interest rates that apply to the instrument.",
                "type": "optional<list<optional<InvestmentsPortfolioInstrumentInterestRate>>>",
              },
              "name": {
                "docs": "The name of the instrument, as given by the institution.",
                "type": "string",
              },
              "open_date": {
                "docs": "The start date of the instrument. Only applicable for instruments of type `bond` or `savings`.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "price": {
                "docs": "The current price of one share in the instrument.",
                "type": "optional<float>",
              },
              "profit": {
                "docs": "The current profit earned in the instrument.",
                "type": "optional<float>",
              },
              "public_id": {
                "docs": "The public identifiers for the instrument.",
                "type": "optional<list<InvestmentsPortfolioInstrumentPublicId>>",
              },
              "quantity": {
                "docs": "The total amount of shares owned in the instrument.",
                "type": "optional<float>",
              },
              "redemption_conditions": {
                "docs": "An array of conditions that apply to the instrument in order to retrieve the final value.

For example, the due date, the liquidity date, the previdencia type, and so on.
",
                "type": "optional<list<optional<InvestmentsPortfolioInstrumentRedemptionConditions>>>",
              },
              "subtype": {
                "docs": "The subtype for the instrument, as given by the institution.",
                "type": "optional<string>",
              },
              "type": "EnumInvestmentPortfolioInstrumentType",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvestmentsPortfolioInstrumentFees": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "type": {
                "docs": "The fee type incurred when making the purchase of the instrument.",
                "type": "string",
              },
              "value": {
                "docs": "The value of `fees.type`. The currency of the fee is the same as the currency of the instrument.",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvestmentsPortfolioInstrumentInterestRate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "index": {
                "docs": "If applicable, the index type that the `interest_rates.value` is calculated against.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "How often the interest rate is calculated on the instrument.",
                "type": "string",
              },
              "value": {
                "docs": "The interest rate for the instrument, in percent.


‚ÑπÔ∏è  **Note:** If the `interest_rate.index` is present, this value is a percentage of the index. For example, if `interest_rate.index` = `CDI` and `interest_rate.value` = `90`, then the total interest rate applied is 90% of the CDI.
",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvestmentsPortfolioInstrumentPublicId": {
            "docs": "The public identifiers for the instrument.",
            "inline": undefined,
            "properties": {
              "type": {
                "docs": "The type of public identifier for the instrument.",
                "type": "string",
              },
              "value": {
                "docs": "The value of the `public_id.type`.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvestmentsPortfolioInstrumentRedemptionConditions": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "type": {
                "docs": "The name of the redemption condition.",
                "type": "string",
              },
              "value": {
                "docs": "The value of `redemption_conditions.type`.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvestmentsPortfoliosPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of investment portfolio objects.",
                "type": "optional<list<InvestmentsPortfolio>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoiceDetailDian": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "description": {
                "docs": "The description of the invoice item (an invoice can have one or more items).",
                "type": "optional<string>",
              },
              "pre_tax_amount": {
                "docs": "The total price for this item before tax is applied (`quantity` x `unit_amount`).",
                "type": "optional<float>",
              },
              "product_identification": {
                "docs": "The identification code of the product or the service, as defined by the legal entity in the country.
",
                "type": "optional<string>",
              },
              "quantity": {
                "docs": "The quantity of this invoice item.",
                "type": "optional<float>",
              },
              "tax_amount": {
                "docs": "The amount of tax for this invoice item (`pre_tax_amount` x `tax_percentage`).",
                "type": "optional<float>",
              },
              "tax_percentage": {
                "docs": "The tax percentage to apply.",
                "type": "optional<float>",
              },
              "tax_type": {
                "docs": "The item's tax type.",
                "type": "optional<string>",
              },
              "total_amount": {
                "docs": "The total price for this invoice item (`pre_tax_amount` + `tax_amount`).",
                "type": "optional<float>",
              },
              "unit_amount": {
                "docs": "The price of one singular item.",
                "type": "optional<float>",
              },
              "unit_code": {
                "docs": "The unit of measure, as defined by the legal entity in the country.
",
                "type": "optional<string>",
              },
              "unit_description": {
                "docs": "The description of the item, as defined by the legal entity in the country.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoiceDetailRetainedTaxSat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "retained_tax_amount": {
                "docs": "The amount of retained tax.",
                "type": "optional<float>",
              },
              "tax": {
                "docs": "The type of retained tax (for example, ISR, IVA or IEPS).",
                "type": "optional<string>",
              },
              "tax_percentage": {
                "docs": "The percentage of tax retained.",
                "type": "optional<float>",
              },
              "tax_type": {
                "docs": "**Note**: This field is not applicable for SAT Mexico and will return `null`.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoiceDetailSat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "description": {
                "docs": "The description of the invoice item (an invoice can have one or more items).",
                "type": "optional<string>",
              },
              "pre_tax_amount": {
                "docs": "The total price for this item before tax is applied (`quantity` x `unit_amount`).",
                "type": "optional<float>",
              },
              "product_identification": {
                "docs": "The identification code of the product or the service, as defined by the legal entity in the country.
- üá≤üáΩ [Mexico](http://200.57.3.89/Pys/catPyS.aspx)
",
                "type": "optional<string>",
              },
              "quantity": {
                "docs": "The quantity of this invoice item.",
                "type": "optional<integer>",
              },
              "retained_taxes": {
                "docs": "The retained tax on the invoice item.",
                "type": "optional<list<InvoiceDetailRetainedTaxSat>>",
              },
              "tax_amount": {
                "docs": "The amount of tax for this invoice item (`pre_tax_amount` x `tax_percentage`).",
                "type": "optional<float>",
              },
              "tax_percentage": {
                "docs": "The tax percentage to apply.",
                "type": "optional<float>",
              },
              "tax_type": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "total_amount": {
                "docs": "The total price for this invoice item (`pre_tax_amount` + `tax_amount`).",
                "type": "optional<float>",
              },
              "unit_amount": {
                "docs": "The price of one a singular item.",
                "type": "optional<float>",
              },
              "unit_code": {
                "docs": "The unit of measure, as defined by the legal entity in the country. 
- üá≤üáΩ Mexico [SAT catalog reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
",
                "type": "optional<string>",
              },
              "unit_description": {
                "docs": "The description of the item, as defined by the legal entity in the country.
- üá≤üáΩ Mexico [SAT catalog reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoiceDian": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "cancelation_status": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
                "type": "optional<string>",
              },
              "cancelation_update_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "certification_authority": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "certification_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "currency": {
                "docs": "The currency of the invoice. For example:
 
 - üáßüá∑ BRL (Brazilian Real)
 - üá®üá¥ COP (Colombian Peso)
 - üá≤üáΩ MXN (Mexican Peso)
 - üá∫üá∏ USD (United States Dollar)
",
                "type": "optional<string>",
              },
              "discount_amount": {
                "docs": "The total amount discounted in this invoice.
",
                "type": "optional<float>",
              },
              "exchange_rate": {
                "docs": "The exchange rate used in this invoice for the currency.
",
                "type": "optional<float>",
              },
              "expiration_date": {
                "docs": "Indicates when the invoice is set to expire.

For example: If the invoice is paid in installments, this field indicates the date when the installment is to be paid.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "folio": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Belvo's unique identifier for the current invoice.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "invoice_date": {
                "docs": "The date of the invoice.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "invoice_details": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "list<InvoiceDetailDian>",
              },
              "invoice_identification": {
                "docs": "The fiscal institution's unique ID for the invoice.",
                "type": "optional<string>",
              },
              "invoice_type": "optional<EnumInvoiceDianInvoiceType>",
              "link": {
                "docs": "The `link.id` the invoice belongs to.",
                "type": "optional<string>",
              },
              "payment_method": {
                "type": "optional<EnumInvoiceDianPaymentMethod>",
              },
              "payment_method_description": {
                "availability": "deprecated",
                "docs": "The description of the payment method used for this invoice.
",
                "type": "optional<string>",
              },
              "payment_type": {
                "docs": "The payment type code used for this invoice, as defined by the country legal entity.

For detailed information regarding DIAN's payment types, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
                "type": "optional<string>",
              },
              "payment_type_description": {
                "docs": "The description of the payment method used for this invoice.
",
                "type": "optional<string>",
              },
              "payments": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "list<InvoicesPaymentsDian>",
              },
              "payroll": "optional<InvoicesPayrollDian>",
              "place_of_issue": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "receiver_details": {
                "type": "optional<InvoicesReceiverDetailsDian>",
              },
              "receiver_id": {
                "docs": "The fiscal ID of the invoice receiver.",
                "type": "optional<string>",
              },
              "receiver_name": {
                "docs": "The name of the invoice receiver.",
                "type": "optional<string>",
              },
              "receiver_tax_fraud_status": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
                "type": "optional<string>",
              },
              "sender_details": {
                "type": "optional<InvoiceSenderDetailsDian>",
              },
              "sender_id": {
                "docs": "The fiscal ID of the invoice sender.",
                "type": "optional<string>",
              },
              "sender_name": {
                "docs": "The name of the invoice sender.",
                "type": "optional<string>",
              },
              "sender_tax_fraud_status": {
                "docs": "Indicates whether or not the sender is on a tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.
**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
                "type": "optional<string>",
              },
              "status": {
                "docs": "The status of the invoice. Can be one of:

  - *Vigente* (valid)
  - *Cancelado* (cancelled)
  - *Aprobado* (approved)",
                "type": "optional<string>",
              },
              "subtotal_amount": {
                "docs": "The pretax amount of this invoice (sum of each item's `pre_tax_amount`).
",
                "type": "optional<float>",
              },
              "tax_amount": {
                "docs": "The amount of tax for this invoice (sum of each item's `tax_amount`).
",
                "type": "optional<float>",
              },
              "total_amount": {
                "docs": "The total amount of the invoice (`subtotal_amount` + `tax_amount` - `discount_amount`)",
                "type": "optional<float>",
              },
              "type": "optional<EnumInvoiceType>",
              "usage": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "version": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "warnings": {
                "type": "optional<InvoiceWarningsDian>",
              },
              "xml": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoiceSenderDetailsDian": {
            "docs": "Details regarding the sender.
",
            "inline": undefined,
            "properties": {
              "address": {
                "docs": "The sender's address.
",
                "type": "optional<string>",
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "country": {
                "docs": "The country where the sender pays their taxes.
",
                "type": "optional<string>",
              },
              "email": {
                "docs": "The sender's email address.
",
                "type": "optional<string>",
              },
              "phone_number": {
                "docs": "The sender's phone number.
",
                "type": "optional<string>",
              },
              "regimen": {
                "docs": "The sender's regimen type.

For detailed information regarding DIAN's regimens, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
                "type": "optional<string>",
              },
              "tax_payer_type": {
                "docs": "Indicates if the sender is a business or an individual. Can be either:
  
  - `Persona Jur√≠dica`
  - `Persona Natural`
",
                "type": "optional<string>",
              },
              "tax_scheme": {
                "docs": "The sender's fiscal responsibilities.

For detailed information regarding DIAN's tax schemes, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoiceWarningsDian": {
            "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "message": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoiceWarningsSat": {
            "docs": "Object containing information about any warnings related to this invoice.
",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "The warning code.
",
                "type": "optional<string>",
              },
              "message": {
                "docs": "The description of the warning.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoiceWithIdSat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "cancelation_status": {
                "docs": "If the invoice is cancelled, this field indicates the status of the cancellation.",
                "type": "optional<string>",
              },
              "cancelation_update_date": {
                "docs": "The date of the invoice cancelation.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "certification_authority": {
                "docs": "The fiscal ID of the certification provider.
",
                "type": "optional<string>",
              },
              "certification_date": {
                "docs": "The date of the fiscal certification.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "currency": {
                "docs": "The currency of the invoice. For example:
 
 - üáßüá∑ BRL (Brazilian Real)
 - üá®üá¥ COP (Colombian Peso)
 - üá≤üáΩ MXN (Mexican Peso)
 - üá∫üá∏ USD (United States Dollar)
",
                "type": "optional<string>",
              },
              "discount_amount": {
                "docs": "The total amount discounted in this invoice.
",
                "type": "optional<float>",
              },
              "exchange_rate": {
                "docs": "The exchange rate used in this invoice for the currency.
",
                "type": "optional<float>",
              },
              "folio": {
                "docs": "The internal control number that the taxpayer assigns to the invoice.
",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Belvo's unique identifier used to reference the current invoice.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "invoice_date": {
                "docs": "The date of the invoice.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "invoice_details": {
                "docs": "A list of descriptions for each item (purchased product or service provided) in the invoice.
",
                "type": "list<InvoiceDetailSat>",
              },
              "invoice_identification": {
                "docs": "The fiscal institution's unique ID for the invoice.",
                "type": "optional<string>",
              },
              "invoice_type": "optional<EnumInvoiceSatInvoiceType>",
              "link": {
                "docs": "The `link.id` the invoice belongs to.",
                "type": "optional<string>",
              },
              "payment_method": {
                "type": "optional<EnumInvoiceSatPaymentMethod>",
              },
              "payment_method_description": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*

*The description of the payment method used for this invoice.*
",
                "type": "optional<string>",
              },
              "payment_type": {
                "docs": "The payment type code used for this invoice, as defined by the country legal entity.

- üá≤üáΩ Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
",
                "type": "optional<string>",
              },
              "payment_type_description": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*
",
                "type": "optional<string>",
              },
              "payments": {
                "docs": "A list detailing all the invoice payments.
",
                "type": "list<InvoicesPaymentsSat>",
              },
              "payroll": "optional<InvoicesPayrollSat>",
              "place_of_issue": {
                "docs": "The postcode of where the invoice was issued.
",
                "type": "optional<string>",
              },
              "receiver_blacklist_status": {
                "availability": "deprecated",
                "docs": "This field has been deprecated. Please use `receiver_tax_fraud_status` instead.
",
                "type": "optional<string>",
              },
              "receiver_id": {
                "docs": "The fiscal ID of the invoice receiver.",
                "type": "optional<string>",
              },
              "receiver_name": {
                "docs": "The name of the invoice receiver.",
                "type": "optional<string>",
              },
              "receiver_tax_fraud_status": {
                "docs": "Indicates whether or not the receiver is on SAT's tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.<br><br>
SAT updates the tax fraud list every three months. <br><br>
For more information regarding the reason's a taxpayer can be put on the tax fraud list, please see [Article 69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html) and [Article 69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html) of Mexico's C√≥digo Fiscal de la Federaci√≥n. <br><br>
Possible statuses are:
- `INVESTIGATING` <br> The fiscal institution has identified irregularities and open an investigation regarding the taxpayer. <br> - `DISMISSED` <br> The fiscal institution has investigated the taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The fiscal institution has confirmed that the taxpayer is guilty. <br> - `OVERTURNED` <br> The fiscal institution has reassessed a previously confirmed taxpayer and, based on new evidence, has taken the taxpayer off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br> The receiver or sender is not found in the list (in other words, they are complying with the fiscal institution's regulations).",
                "type": "optional<string>",
              },
              "sender_blacklist_status": {
                "availability": "deprecated",
                "docs": "This field has been deprecated. Please use `sender_tax_fraud_status` instead.
",
                "type": "optional<string>",
              },
              "sender_id": {
                "docs": "The fiscal ID of the invoice sender",
                "type": "optional<string>",
              },
              "sender_name": {
                "docs": "The name of the invoice sender.",
                "type": "optional<string>",
              },
              "sender_tax_fraud_status": {
                "docs": "Indicates whether or not the sender is on SAT's tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.<br><br>
SAT updates the tax fraud list every three months. <br><br>
For more information regarding the reason's a taxpayer can be put on the tax fraud list, please see [Article 69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html) and [Article 69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html) of Mexico's C√≥digo Fiscal de la Federaci√≥n. <br><br>
Possible statuses are:
- `INVESTIGATING` <br> The fiscal institution has identified irregularities and open an investigation regarding the taxpayer. <br> - `DISMISSED` <br> The fiscal institution has investigated the taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The fiscal institution has confirmed that the taxpayer is guilty. <br> - `OVERTURNED` <br> The fiscal institution has reassessed a previously confirmed taxpayer and, based on new evidence, has taken the taxpayer off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br> The receiver or sender is not found in the list (in other words, they are complying with the fiscal institution's regulations).",
                "type": "optional<string>",
              },
              "status": {
                "docs": "The status of the invoice. Can be either *Vigente* (valid) or *Cancelado* (cancelled).",
                "type": "optional<string>",
              },
              "subtotal_amount": {
                "docs": "The pretax amount of this invoice (sum of each item's `pre_tax_amount`).
",
                "type": "optional<float>",
              },
              "tax_amount": {
                "docs": "The amount of tax for this invoice (sum of each item's `tax_amount`).
",
                "type": "optional<float>",
              },
              "total_amount": {
                "docs": "The total amount of the invoice (`subtotal_amount` + `tax_amount` - `discount_amount`)",
                "type": "optional<float>",
              },
              "type": "optional<EnumInvoiceType>",
              "usage": {
                "docs": "The invoice's usage code, as defined by the legal entity of the country. 

- üá≤üáΩ Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#usage)
",
                "type": "optional<string>",
              },
              "version": {
                "docs": "The CFDI version of the invoice.
",
                "type": "optional<string>",
              },
              "warnings": {
                "type": "optional<InvoiceWarningsSat>",
              },
              "xml": {
                "docs": "XML of the invoice document.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesPaymentsDian": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<float>",
              },
              "beneficiary_account_number": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "beneficiary_rfc": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "currency": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<datetime>",
              },
              "exchange_rate": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "operation_number": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "payer_account_number": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "payer_bank_name": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "payer_rfc": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "payment_type": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "related_documents": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "list<InvoicesPaymentsRelatedDocumentsDian>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesPaymentsRelatedDocumentsDian": {
            "docs": "List of all the related deferred invoices affected by the payment.",
            "inline": undefined,
            "properties": {
              "amount_paid": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<float>",
              },
              "currency": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "invoice_identification": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "outstanding_balance": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<float>",
              },
              "partiality_number": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<integer>",
              },
              "payment_method": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "previous_balance": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesPaymentsRelatedDocumentsSat": {
            "docs": "List of all the related deferred invoices affected by the payment.",
            "inline": undefined,
            "properties": {
              "amount_paid": {
                "docs": "The amount paid in this installment.
",
                "type": "optional<float>",
              },
              "currency": {
                "docs": "The currency of the related invoice. For example:
    
- üáßüá∑ BRL (Brazilian Real)
- üá®üá¥ COP (Colombian Peso)
- üá≤üáΩ MXN (Mexican Peso)
  
  Please note that other currencies other than in the list above may be returned.
",
                "type": "optional<string>",
              },
              "invoice_identification": {
                "docs": "The fiscal institution's unique ID for the related deferred invoice.
",
                "type": "optional<string>",
              },
              "outstanding_balance": {
                "docs": "The amount remaining to be paid.
",
                "type": "optional<float>",
              },
              "partiality_number": {
                "docs": "The payment installment number.
",
                "type": "optional<integer>",
              },
              "payment_method": {
                "docs": "The payment method of the related invoice.
",
                "type": "optional<string>",
              },
              "previous_balance": {
                "docs": "The invoice amount before the payment.
",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesPaymentsSat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "The invoice amount, in the currency of the original invoice.
",
                "type": "optional<float>",
              },
              "beneficiary_account_number": {
                "docs": "The bank account number of the payment beneficiary.
",
                "type": "optional<string>",
              },
              "beneficiary_rfc": {
                "docs": "The fiscal ID of the payment beneficiary.
",
                "type": "optional<string>",
              },
              "currency": {
                "docs": "The currency of the payment. For example:

- üáßüá∑ BRL (Brazilian Real)
- üá®üá¥ COP (Colombian Peso)
- üá≤üáΩ MXN (Mexican Peso)

Please note that other currencies other than in the list above may be returned.
",
                "type": "optional<string>",
              },
              "date": {
                "docs": "ISO-8601 timestamp when the payment was made.
",
                "type": "optional<datetime>",
              },
              "exchange_rate": {
                "docs": "The `currency` to MXN currency exchange rate when the payment was made.
",
                "type": "optional<string>",
              },
              "operation_number": {
                "docs": "The fiscal institution's internal identifier for the operation.
",
                "type": "optional<string>",
              },
              "payer_account_number": {
                "docs": "The bank account number of the payment issuer.
",
                "type": "optional<string>",
              },
              "payer_bank_name": {
                "docs": "The banking institution that was used by the payment issuer.
",
                "type": "optional<string>",
              },
              "payer_rfc": {
                "docs": "The fiscal ID of the payment issuer.
",
                "type": "optional<string>",
              },
              "payment_type": {
                "docs": "Payment type code used for this invoice, as defined by the country's legal entity.

- üá≤üáΩ Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
",
                "type": "optional<string>",
              },
              "related_documents": {
                "docs": "A list of all the related deferred invoices affected by the payment.
",
                "type": "list<InvoicesPaymentsRelatedDocumentsSat>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesPayrollDian": {
            "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<float>",
              },
              "collected_at": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
                "type": "optional<datetime>",
              },
              "date_from": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "date_to": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "days": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<integer>",
              },
              "payment_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "type": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "version": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesPayrollSat": {
            "docs": "Details regarding the payroll payment. Only applicable for payroll invoices.
",
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "The total amount of the payroll payment.
",
                "type": "float",
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "date_from": {
                "docs": "The start date of the payment period.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "date_to": {
                "docs": "The end date of the payment period.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "days": {
                "docs": "The number of days covered by the payment.
",
                "type": "optional<integer>",
              },
              "payment_date": {
                "docs": "The payment date.
",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "type": {
                "docs": "The payroll type, as defined by the legal entity of the country.

- üá≤üáΩ Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payroll-type)
",
                "type": "optional<string>",
              },
              "version": {
                "docs": "The version of the payroll object.
",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesReceiverDetailsDian": {
            "docs": "Details regarding the receiver.
",
            "inline": undefined,
            "properties": {
              "address": {
                "docs": "The receiver's address.
",
                "type": "optional<string>",
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "country": {
                "docs": "The country where the receiver pays their taxes.
",
                "type": "optional<string>",
              },
              "email": {
                "docs": "The receiver's email address.
",
                "type": "optional<string>",
              },
              "phone_number": {
                "docs": "The receiver's phone number.
",
                "type": "optional<string>",
              },
              "regimen": {
                "docs": "The receiver's regimen type.

For detailed information regarding DIAN's regimens, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
                "type": "optional<string>",
              },
              "tax_payer_type": {
                "docs": "Indicates if the receiver is a business or an individual. Can be either:
  
  - `Persona Jur√≠dica`
  - `Persona Natural`
",
                "type": "optional<string>",
              },
              "tax_scheme": {
                "docs": "The receiver's fiscal responsibilities.

For detailed information regarding DIAN's tax schemes, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesResponsePaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of invoice objects.",
                "type": "optional<list<InvoicesResponsePaginatedResponseResultsItem>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvoicesResponsePaginatedResponseResultsItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "InvoiceWithIdSat",
              },
              {
                "type": "InvoiceDian",
              },
            ],
          },
          "LastErrorInvalidCredentials": {
            "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when the credentials that your customer provides are incorrect.",
            "inline": undefined,
            "properties": {
              "error_code": {
                "docs": "A unique error code (`invalid_credentials`) that allows you to classify and handle the error programmatically.",
                "type": "string",
              },
              "error_message": {
                "docs": "A short description of the error.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LastErrorInvalidToken": {
            "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when the MFA token your customer provides is invalid.",
            "inline": undefined,
            "properties": {
              "error_code": {
                "docs": "A unique error code (`invalid_token`) that allows you to classify and handle the error programmatically.",
                "type": "string",
              },
              "error_message": {
                "docs": "A short description of the error.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LastErrorLoginError": {
            "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened in the `pse_display_credentials_required` next step.",
            "inline": undefined,
            "properties": {
              "error_code": {
                "docs": "A unique error code (`login_error`) that allows you to classify and handle the error programmatically.",
                "type": "string",
              },
              "error_message": {
                "docs": "A short description of the error.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LastErrorPaymentError": {
            "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened during the payment intent process.",
            "inline": undefined,
            "properties": {
              "error_code": {
                "docs": "A unique error code (`payment_error`) that allows you to classify and handle the error programmatically.",
                "type": "string",
              },
              "error_message": {
                "docs": "A short description of the error.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LastErrorSessionExpired": {
            "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error occurs when you try to send a PATCH request after the session has already expired (the session expires after 10 minutes).",
            "inline": undefined,
            "properties": {
              "error_code": {
                "docs": "A unique error code (`session_expired`) that allows you to classify and handle the error programmatically.",
                "type": "string",
              },
              "error_message": {
                "docs": "A short description of the error.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LastErrorTwoFactor": {
            "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened in the `pse_display_token_required` next step.",
            "inline": undefined,
            "properties": {
              "error_code": {
                "docs": "A unique error code (`login_two_factor_error`) that allows you to classify and handle the error programmatically.",
                "type": "string",
              },
              "error_message": {
                "docs": "A short description of the error.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Link": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_mode": "optional<EnumLinkAccessModeResponse>",
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "created_by": {
                "docs": "The unique ID for the user that created this link.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "external_id": {
                "docs": "The `external_id` you provided as an additional identifier for the link. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 3,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Belvo's unique ID for the current Link.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": {
                "docs": "Belvo's name for the institution.
",
                "type": "optional<string>",
              },
              "institution_user_id": {
                "docs": "<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info:</strong> Only applicable for links created <b>after 08-02-2022</b>. </div>

A unique 44-character string that can be used to identify a user at a given institution.

üìö Check out our [Avoiding duplicated links](https://developers.belvo.com/docs/link-creation-best-practices#avoiding-duplicated-links) DevPortal article for more information and tips on how to use it.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[A-Za-z0-9\-=_]{44}",
                },
              },
              "last_accessed_at": {
                "docs": "The ISO-8601 timestamp of Belvo's most recent successful access to the institution for the given link.",
                "type": "optional<datetime>",
              },
              "refresh_rate": "optional<EnumLinkRefreshRate>",
              "status": "optional<EnumLinkStatus>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LoginError": {
            "docs": "This error can occur when:

  - the credentials that your user provides are incorrect or missing.
  - the MFA token your user provides is not supported by Belvo.
  - there is an issue with the institution that prevents logins.
  - the user's account is either locked or the user does not have permission to access their internet banking.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`login_error`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-login_error" target="_blank">400 login_error errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `login_error` errors, the description can be one of the following:

  - `Invalid credentials provided to login to the institution`
  - `A MFA token is required by the institution, but it's not supported yet by Belvo.`
  - `Impossible to login, something unexpected happened while logging into the institution. Try again later.`
  - `Login not attempted due to invalid credentials`
  - `Missing credentials to login to the institution`
  - `The user account access was forbidden by the institution`
  - `The user account is locked, user needs to contact the institution to unlock it`",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NeedsRedirectContent": {
            "docs": "Details regarding the payer institution.",
            "inline": undefined,
            "properties": {
              "payer_institution": "optional<PaymentInstitution>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NeedsRedirectContentPse": {
            "docs": "Details regarding the payer institution.",
            "inline": undefined,
            "properties": {
              "payer_institution": "optional<InstitutionFormField>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NetIncomeIndividual": {
            "docs": "Object containing the declared net income of the tax payer. The values are calculated as the `gross_income` - `non_taxable_income`.",
            "inline": undefined,
            "properties": {
              "capital_income": {
                "docs": "Income received from an investment (such as dividends or from renting a property).",
                "type": "float",
              },
              "earned_income": {
                "docs": "Income received from employment.",
                "type": "float",
              },
              "fee_based_income": {
                "docs": "Income received from emitted invoices (for example, income independent contractors or freelancers receive).",
                "type": "float",
              },
              "non_labor_income": {
                "docs": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayConfirmationRequiredOfpi": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "open_finance_display_confirmation_required": {
                "type": "optional<DisplayConfirmationRequiredOfpi>",
              },
              "ready_to_confirm": {
                "default": true,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayConfirmationRequiredPse": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "pse_display_confirmation_required": {
                "type": "optional<DisplayConfirmationRequiredContentPse>",
              },
              "ready_to_confirm": {
                "default": true,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayCredentialsRequiredPse": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "pse_display_credentials_required": {
                "type": "optional<DisplayCredentialsRequiredContentPse>",
              },
              "ready_to_confirm": {
                "default": false,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayCustomerBankAccountsPse": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "pse_display_customer_bank_accounts": {
                "type": "optional<DisplayCustomerBankAccountsContentPse>",
              },
              "ready_to_confirm": {
                "default": true,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayNeedsRedirectPse": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "pse_display_needs_redirect": {
                "type": "optional<NeedsRedirectContentPse>",
              },
              "ready_to_confirm": {
                "default": true,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayPaymentFailed": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "open_finance_display_payment_failed": {
                "type": "optional<DisplayPaymentFailed>",
              },
              "ready_to_confirm": {
                "default": false,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to `true`,you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayPaymentMethodInformation": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "open_finance_display_payment_method_information": {
                "type": "optional<DisplayPaymentMethodInformationContentOfpi>",
              },
              "ready_to_confirm": {
                "default": false,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayPaymentMethodInformationPse": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type. You'll need to send a PATCH request with the institution selected by the customer or their bank accounts (if there are accounts already saved in the Belvo database).",
            "inline": undefined,
            "properties": {
              "pse_display_payment_method_information": {
                "type": "optional<DisplayPaymentMethodInformationContentPse>",
              },
              "ready_to_confirm": {
                "default": false,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayPaymentProcessing": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "open_finance_display_payment_processing": {
                "type": "optional<DisplayPaymentProcessing>",
              },
              "ready_to_confirm": {
                "default": false,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayPaymentSucceeded": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "open_finance_display_payment_succeeded": {
                "type": "optional<DisplayPaymentSucceeded>",
              },
              "ready_to_confirm": {
                "default": false,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepDisplayTokenRequiredPse": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "pse_display_token_required": {
                "type": "optional<DisplayTokenRequiredContentPse>",
              },
              "ready_to_confirm": {
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. This value will return: 

  - `false` when a customer wants to pay for the very first time. This is so because you still need to input information about your customer in the following steps to process a payment successfully. 
  - `true` when a customer wants to pay and this is not their first time. This is so because the payment intent has all the information needed about the customer to process a payment. 


**Note:** When the value is `true`, you'll need to confirm the payment intent. You can do this by making a PATCH request sending through the parameter `confirm: true`.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NextStepNeedsRedirect": {
            "docs": "Object detailing the next steps you should follow for a specific `next_step` type.",
            "inline": undefined,
            "properties": {
              "open_finance_display_needs_redirect": {
                "type": "optional<NeedsRedirectContent>",
              },
              "ready_to_confirm": {
                "default": false,
                "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NonTaxableIncomeIndividual": {
            "docs": "Object containing the declared non-taxable income of the tax payer.",
            "inline": undefined,
            "properties": {
              "capital_income": {
                "docs": "Income received from an investment (such as dividends or from renting a property).",
                "type": "float",
              },
              "earned_income": {
                "docs": "Income received from employment.",
                "type": "float",
              },
              "fee_based_income": {
                "docs": "Income received from emitted invoices (for example, income independent contractors or freelancers receive).",
                "type": "float",
              },
              "non_labor_income": {
                "docs": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "NotFoundErrorBody": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`not_found`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#404-not_found" target="_blank">404 not_found errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `not_found` errors, the description is:
  
  - `Not found`",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OFPB": {
            "docs": "Details about the organization's bank account that will receive the payment.",
            "inline": undefined,
            "properties": {
              "beneficiary_bank_account": {
                "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "callback_url": {
                "docs": "The URL to your application that your customer will be directed to once they confirm the payment in their bank application.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OFPI": {
            "docs": "Details about the payment method.",
            "inline": undefined,
            "properties": {
              "open_finance": {
                "type": "optional<ChargePaymentMethodDetailsOfpiContent>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Owner": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "address": {
                "docs": "The accounts owners registered address.",
                "type": "optional<string>",
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "display_name": {
                "docs": "The full name of the owner, as provided by the bank.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 128,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "document_id": "optional<OwnerDocumentId>",
              "email": {
                "docs": "The account owner's registered email address.",
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": 256,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "first_name": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*

*The first name of the account owner.*
",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Belvo's unique identifier used to reference the current owner.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "internal_identification": {
                "docs": "The institution's internal identifier for the owner.",
                "type": "optional<string>",
              },
              "last_name": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*

*The last name of the account owner.*
",
                "type": "optional<string>",
              },
              "link": {
                "docs": "Belvo's unique ID for the current Link.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "phone_number": {
                "docs": "The account owner's registered phone number.",
                "type": "optional<string>",
              },
              "second_last_name": {
                "availability": "deprecated",
                "docs": "*This field has been deprecated.*

*The second last name of the account owner.*
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OwnerDocumentId": {
            "docs": "Information regarding the identification document the owner provided to the bank.",
            "inline": undefined,
            "properties": {
              "document_number": {
                "docs": "The document's identification number.",
                "type": "optional<string>",
              },
              "document_type": {
                "docs": "The type of document the owner provided to the institution to open the account. Common document types are:

üáßüá∑ Brazil
- `CPF` (*Cadastro de Pessoas F√≠sicas*)
- `CNPJ`(*Cadastro Nacional de Pessoas Jur√≠dicas*)

üá®üá¥ Colombia
- `CC`(*C√©dula de Ciudadan√≠a*)
- `NIT` (*N√∫mero de Identificaci√≥n Tributaria*)

üá≤üáΩ Mexico
- `CURP` (*Clave √önica de Registro de Poblaci√≥n*)
- `NISS` (*N√∫mero de Seguridad Social*)
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OwnersPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of owner objects.",
                "type": "optional<list<Owner>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PSE": {
            "docs": "Object with payment method details to create a payment intent.",
            "inline": undefined,
            "properties": {
              "pse": {
                "type": "PSE",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResponseLink": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": "optional<list<Link>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PatchBody": {
            "docs": "A JSON object containing a session UUID and a MFA token",
            "inline": undefined,
            "properties": {
              "link": {
                "docs": "The `link.id` you want to resume. Must be the same `link.id` as the one you receive in the 428 Token Required response that contains the `session` ID.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "save_data": {
                "default": true,
                "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                "type": "optional<boolean>",
              },
              "session": {
                "docs": "The session you want to resume. You need to use the `session` value that is provided in the 428 Token Required response that you receive after you make your POST request.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
              "token": {
                "docs": "The MFA token generated by the institution and required to continue a session.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PatchBodyWithoutSaveData": {
            "docs": "A JSON object containing a session UUID and a MFA token",
            "inline": undefined,
            "properties": {
              "link": {
                "docs": "The `link.id` you want to resume. Must be the same `link.id` as the one you receive in the 428 Token Required response that contains the `session` ID.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "session": {
                "docs": "The session you want to resume. You need to use the `session` value that is provided in the 428 Token Required response that you receive after you make your POST request.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
              "token": {
                "docs": "The MFA token generated by the institution and required to continue a session.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PatchPaymentIntentsBodyPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pse": {
                "type": "optional<PatchPaymentMethodDetailsPse>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PatchPaymentMethodDetailsPse": {
            "docs": "Object with required fields to fill information in the payment intent object. The information you need to send through depends on the next step Belvo returns in the response.",
            "inline": undefined,
            "properties": {
              "password": {
                "docs": "The password used to log in to the institution.

**Note**: You need to send through this information after you received the `pse_display_credentials_required` next step in the payment intent.",
                "type": "optional<string>",
              },
              "payer_bank_account": {
                "docs": "Belvo's unique identifier for the payer‚Äôs bank account.

**Note**: You need to send through this information after you received the `pse_display_customer_bank_accounts` next step in the payment intent.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payer_institution": {
                "docs": "Belvo's unique identifier for the payer‚Äôs institution.

**Note**: You need to send through this information after you received the `pse_display_payment_method_information` next step in the payment intent.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payer_token": {
                "docs": "The MFA token generated by the institution and required to continue the payment flow.

**Note**: You need to send through this information if you received the `pse_display_token_required` next step in the payment intent.",
                "type": "optional<string>",
              },
              "username": {
                "docs": "The username used to log in to the institution.

**Note**: You need to send through this information after you received the `pse_display_credentials_required` next step in the payment intent.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentInstitution": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "active": {
                "docs": "Indicates whether this institution is available for use or not.",
                "type": "optional<boolean>",
              },
              "country": "optional<EnumPaymentsCountry>",
              "display_name": {
                "docs": "The customer-facing name of the institution.",
                "type": "optional<string>",
              },
              "form_fields": "optional<list<InstitutionFormField>>",
              "icon_logo": {
                "docs": "The URL of the institution's icon logo.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Belvo's unique ID to reference the institution.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "legal_entity_name": {
                "docs": "The name of the legal entity of the institution, as registered with the relevant regulatory authority. Only applicable for üáßüá∑ Brazil OFPI.",
                "type": "optional<string>",
              },
              "logo": {
                "docs": "The URL of the institution's logo.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The name of the institution, as designated by Belvo.",
                "type": "optional<string>",
              },
              "primary_color": {
                "docs": "The primary color on the institution's website.",
                "type": "optional<string>",
              },
              "text_logo": {
                "docs": "The URL of the institution's text logo.",
                "type": "optional<string>",
              },
              "website": {
                "docs": "The URL of the institution's website.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentIntentOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowed_payment_method_types": {
                "docs": "A list of payment method types allowed in this payment intent. For OFPI, the value will be `open_finance`.",
                "type": "list<string>",
              },
              "amount": {
                "docs": "Amount to be paid by your customer.
",
                "type": "string",
              },
              "charges": {
                "availability": "deprecated",
                "docs": "An array of charge objects related to this paymnet intent. If no charges are associated, we return an empty array.

**Note**: The charges resource will be deprecated and removed from our API by end of Q1 2023. We recommend not using any data from this resource.",
                "type": "optional<list<Charge>>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created this payment intent.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "currency": "EnumPaymentsCurrency",
              "customer": {
                "docs": "Belvo's unique ID for the customer related to this payment intent.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "docs": "The description of the payment.
",
                "type": "string",
              },
              "failure_code": {
                "docs": "Error code that explains the reason behind a payment being unsuccessful (if applicable).
",
                "type": "optional<string>",
              },
              "failure_message": {
                "docs": "Further information regarding the `failure_code`.
",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Belvo's unique ID for the current payment intent.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "last_error": {
                "type": "LastErrorPaymentError",
              },
              "metadata": {
                "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.

‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
                "type": "optional<map<string, unknown>>",
              },
              "next_step": "PaymentIntentOfpiNextStep",
              "payment_method_details": "PaymentIntentOfpiPaymentMethodDetails",
              "payment_method_information": {
                "type": "OFPI",
              },
              "provider": "EnumPaymentLinkProvider",
              "selected_payment_method_type": "EnumPaymentLinkAllowedPaymentMethod",
              "status": "EnumPaymentIntentStatus",
              "updated_at": {
                "docs": "The ISO-8601 timestamp of when the payment intent was last updated.
",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentIntentOfpiNextStep": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "open_finance_display_confirmation_required": {
                "type": "NextStepDisplayConfirmationRequiredOfpi",
              },
              "open_finance_display_needs_redirect": {
                "type": "NextStepNeedsRedirect",
              },
              "open_finance_display_payment_failed": {
                "type": "NextStepDisplayPaymentFailed",
              },
              "open_finance_display_payment_method_information": {
                "type": "NextStepDisplayPaymentMethodInformation",
              },
              "open_finance_display_payment_processing": {
                "type": "NextStepDisplayPaymentProcessing",
              },
              "open_finance_display_payment_succeeded": {
                "type": "NextStepDisplayPaymentSucceeded",
              },
            },
          },
          "PaymentIntentOfpiPaymentMethodDetails": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "INDIVIDUAL",
              },
              {
                "type": "BUSINESS",
              },
            ],
          },
          "PaymentIntentPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of payment intent objects.",
                "type": "optional<list<PaymentIntentPse>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentIntentPaymentMethodDetailsBodyBusinessOfpi": {
            "docs": "Payment method type selected.",
            "inline": undefined,
            "properties": {
              "beneficiary_bank_account": {
                "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "callback_url": {
                "docs": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
                "type": "string",
              },
              "cpf": {
                "docs": "The customer's CPF number. Only required when the `customer_type` is `BUSINESS`.

**Note:** This value is obfuscated.",
                "type": "optional<string>",
              },
              "payer_institution": {
                "docs": "Belvo's unique ID to reference the payer's institution.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentIntentPaymentMethodDetailsBodyIndividualOfpi": {
            "docs": "Payment method type selected.",
            "inline": undefined,
            "properties": {
              "beneficiary_bank_account": {
                "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "callback_url": {
                "docs": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
                "type": "string",
              },
              "cpf": {
                "docs": "The customer's CPF number. Only required when the `customer_type` is `BUSINESS`.

**Note:** This value is obfuscated.",
                "type": "optional<string>",
              },
              "payer_institution": {
                "docs": "Belvo's unique ID to reference the payer's institution.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentIntentPaymentMethodDetailsBodyPse": {
            "docs": "Details about the payment method type selected.",
            "inline": undefined,
            "properties": {
              "belvo_flow": {
                "default": true,
                "docs": "This parameter determines the payment flow of the payment intent. By default, this is set to `true` and the payment intent created is processed using the Belvo's payment flow and Belvo-integrated institutions. When set to `false`, the payment intent process uses institutions not integrated into Belvo's flow.",
                "type": "boolean",
              },
              "beneficiary_bank_account": {
                "docs": "Belvo's unique ID used to identify the beneficiary‚Äôs bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "callback_url": {
                "docs": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
                "type": "string",
              },
              "password": {
                "docs": "The password used to log in to the institution. This value is obfuscated.",
                "type": "optional<string>",
              },
              "payer_bank_account": {
                "docs": "Belvo's unique ID used to identify the customer‚Äôs bank account.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payer_institution": {
                "docs": "Belvo's unique identifier for the payer‚Äôs institution.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "username": {
                "docs": "The username used to log in to the institution. This value is obfuscated.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentIntentPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowed_payment_method_types": {
                "docs": "A list of payment method types allowed in this payment intent. For PSE, the value will be `pse`.",
                "type": "list<EnumPaymentLinkAllowedPaymentMethod>",
              },
              "amount": {
                "docs": "Amount to be paid by your customer.
",
                "type": "string",
              },
              "charges": {
                "availability": "deprecated",
                "docs": "An array of charge objects related to this paymnet intent. If no charges are associated, we return an empty array.

**Note**: The charges resource will be deprecated and removed from our API by end of Q1 2023. We recommend not using any data from this resource.",
                "type": "optional<list<Charge>>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created this payment intent.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "currency": "EnumPaymentsCurrency",
              "customer": {
                "docs": "Belvo's unique ID for the customer related to this payment intent.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "docs": "The description of the payment.
",
                "type": "string",
              },
              "failure_code": {
                "docs": "Error code that explains the reason behind a payment being unsuccessful (if applicable).
",
                "type": "optional<string>",
              },
              "failure_message": {
                "docs": "Further information regarding the `failure_code`.
",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Belvo's unique ID for the current payment intent.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "last_error": "PaymentIntentPseLastError",
              "metadata": {
                "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.

‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
                "type": "optional<map<string, unknown>>",
              },
              "next_step": "PaymentIntentPseNextStep",
              "payment_method_details": {
                "type": "PSE",
              },
              "payment_method_information": {
                "type": "PSE",
              },
              "provider": "EnumPaymentLinkProvider",
              "selected_payment_method_type": "EnumPaymentLinkAllowedPaymentMethod",
              "status": "EnumPaymentIntentStatus",
              "updated_at": {
                "docs": "The ISO-8601 timestamp of when the payment intent was last updated.
",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentIntentPseLastError": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "LastErrorInvalidCredentials",
              },
              {
                "type": "LastErrorInvalidToken",
              },
              {
                "type": "LastErrorLoginError",
              },
              {
                "type": "LastErrorTwoFactor",
              },
              {
                "type": "LastErrorPaymentError",
              },
              {
                "type": "LastErrorSessionExpired",
              },
            ],
          },
          "PaymentIntentPseNextStep": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "pse_display_confirmation_required": {
                "type": "NextStepDisplayConfirmationRequiredPse",
              },
              "pse_display_credentials_required": {
                "type": "NextStepDisplayCredentialsRequiredPse",
              },
              "pse_display_customer_bank_accounts": {
                "type": "NextStepDisplayCustomerBankAccountsPse",
              },
              "pse_display_needs_redirect": {
                "type": "NextStepDisplayNeedsRedirectPse",
              },
              "pse_display_payment_method_information": {
                "type": "NextStepDisplayPaymentMethodInformationPse",
              },
              "pse_display_token_required": {
                "type": "NextStepDisplayTokenRequiredPse",
              },
            },
          },
          "PaymentLinkCallbackUrls": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "cancel": {
                "docs": "The URL that the user should be redirected to if they decide to cancel the payment process or if an error occurs.

**Note:** Not required if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
                "type": "optional<string>",
              },
              "success": {
                "docs": "The URL that the user should be redirected to when they complete the payment process successfully.

**Note:** Not required if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentLinkCallbackUrlsResponse": {
            "docs": "The URLs that the user should be redirected to.

**Note:** This field will return an empty object if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
            "inline": undefined,
            "properties": {
              "cancel": {
                "docs": "The URL that the user should be redirected to if they decide to cancel the payment process or if an error occurs.",
                "type": "optional<string>",
              },
              "success": {
                "docs": "The URL that the user should be redirected to when they complete the payment process successfully.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentLinkListOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_token": {
                "docs": "The Belvo-generated access token for the payment link.

**Note:** You'll need the `access_token` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
                "type": "optional<string>",
              },
              "callback_urls": {
                "type": "PaymentLinkCallbackUrlsResponse",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the payment link.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "expires_at": {
                "docs": "The ISO-8601 timestamp of when the payment link is set to expire.
",
                "type": "datetime",
              },
              "expires_in": {
                "docs": "The payment link expiration time.  ",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "\d+([mhd])",
                },
              },
              "id": {
                "docs": "Belvo's unique ID for the current payment link.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payment_intent": {
                "docs": "Belvo's unique ID for the payment intent. You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payment_url": {
                "docs": "The URL for the hosted-widget that will guide your user through the payments process.",
                "type": "string",
              },
              "status": "EnumPaymentLinksStatus",
              "updated_at": {
                "docs": "The ISO-8601 timestamp of when the payment link was last updated.
",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentLinkListPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_token": {
                "docs": "The Belvo-generated access token for the payment link.

**Note:** You'll need the `access_token` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
                "type": "optional<string>",
              },
              "callback_urls": {
                "type": "PaymentLinkCallbackUrlsResponse",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the payment link.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "expires_at": {
                "docs": "The ISO-8601 timestamp of when the payment link is set to expire.
",
                "type": "datetime",
              },
              "expires_in": {
                "docs": "The payment link expiration time.  ",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "\d+([mhd])",
                },
              },
              "id": {
                "docs": "Belvo's unique ID for the current payment link.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payment_intent": {
                "docs": "Belvo's unique ID for the payment intent. You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payment_url": {
                "docs": "The URL for the hosted-widget that will guide your user through the payments process.",
                "type": "string",
              },
              "status": "EnumPaymentLinksStatus",
              "updated_at": {
                "docs": "The ISO-8601 timestamp of when the payment link was last updated.
",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentLinkOfpi": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_token": {
                "docs": "The Belvo-generated access token for the payment link.

**Note:** You'll need the `access_token` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
                "type": "optional<string>",
              },
              "callback_urls": {
                "type": "PaymentLinkCallbackUrlsResponse",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the payment link.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "expires_at": {
                "docs": "The ISO-8601 timestamp of when the payment link is set to expire.
",
                "type": "datetime",
              },
              "expires_in": {
                "docs": "The payment link expiration time.  ",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "\d+([mhd])",
                },
              },
              "id": {
                "docs": "Belvo's unique ID for the current payment link.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payment_intent": {
                "type": "optional<PaymentIntentOfpi>",
              },
              "payment_url": {
                "docs": "The URL for the hosted-widget that will guide your user through the payments process.",
                "type": "string",
              },
              "status": "EnumPaymentLinksStatus",
              "updated_at": {
                "docs": "The ISO-8601 timestamp of when the payment link was last updated.
",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentLinkPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of bank account objects.",
                "type": "optional<list<PaymentLinkPaginatedResponseResultsItem>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentLinkPaginatedResponseResultsItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "PaymentLinkListOfpi",
              },
              {
                "type": "PaymentLinkListPse",
              },
            ],
          },
          "PaymentLinkPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_token": {
                "docs": "The Belvo-generated access token for the payment link.

**Note:** You'll need the `access_token` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
                "type": "optional<string>",
              },
              "callback_urls": {
                "type": "PaymentLinkCallbackUrlsResponse",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the payment link.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "expires_at": {
                "docs": "The ISO-8601 timestamp of when the payment link is set to expire.
",
                "type": "datetime",
              },
              "expires_in": {
                "docs": "The payment link expiration time. ",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "\d+([mhd])",
                },
              },
              "id": {
                "docs": "Belvo's unique ID for the current payment link.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payment_intent": {
                "type": "optional<PaymentIntentPse>",
              },
              "payment_url": {
                "docs": "The URL for the hosted-widget that will guide your user through the payments process.",
                "type": "string",
              },
              "status": "EnumPaymentLinksStatus",
              "updated_at": {
                "docs": "The ISO-8601 timestamp of when the payment link was last updated.
",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentMethodInfoCustomerBankAccountsPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "customer": {
                "docs": "Belvo's unique ID for the current customer.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "details": "optional<PaymentMethodInformationDetailsPse>",
              "holder": "optional<HolderBankAccountPse>",
              "id": {
                "docs": "Belvo's unique ID used to identify the customer‚Äôs bank account.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": "optional<PaymentInstitution>",
              "number": {
                "docs": "The customer's bank account number. This value is obfuscated.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentMethodInformationBodyOfpi": {
            "docs": "Payment method type selected.",
            "inline": undefined,
            "properties": {
              "end_to_end_id": {
                "docs": "A unique ID for the transaction in the Brazil's PIX payment system.",
                "type": "optional<string>",
              },
              "provider_request_id": {
                "docs": "Unique ID for the payment, as sent by the provider.",
                "type": "optional<string>",
              },
              "redirect_url": {
                "docs": "URL that redirects the user to the institution's website.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentMethodInformationBodyPse": {
            "docs": "Payment method type selected.",
            "inline": undefined,
            "properties": {
              "bank_payment_id": {
                "docs": "Unique payment ID provided the institution.",
                "type": "optional<string>",
              },
              "end_to_end_id": {
                "docs": "A unique ID for the transaction in Colombia's Payments Way system.",
                "type": "optional<string>",
              },
              "provider_request_id": {
                "docs": "Unique ID for the payment, as sent by the provider.",
                "type": "optional<string>",
              },
              "redirect_url": {
                "docs": "URL that redirects the user to the institution's website.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentMethodInformationDetailsPse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_type": {
                "docs": "The type of bank account. For example, `Ahorros` or `Corriente`.",
                "type": "optional<string>",
              },
              "country": "optional<EnumPaymentsCountry>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentTransaction": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "The transaction amount.


**Note**: The amount displayed is always positive as we indicate the direction of the transaction in `transaction_type` parameter.
",
                "type": "string",
              },
              "beneficiary": {
                "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID for the user that created the payment.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "currency": "EnumPaymentsCurrency",
              "customer": {
                "docs": "Belvo's unique ID for the customer asscociated with this transaction.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "docs": "The description of the payment.
",
                "type": "string",
              },
              "id": {
                "docs": "Belvo‚Äôs unique ID to reference the transaction.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "payer": "PaymentTransactionPayer",
              "payment_intent": {
                "docs": "The unique ID of the payment intent associated with the transaction.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "transaction_type": "EnumPaymentTransactionType",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentTransactionPayer": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "TransactionBankAccountOfpi",
              },
              {
                "type": "TransactionBankAccountPse",
              },
            ],
          },
          "PaymentWebhook": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "auth_header": {
                "docs": "The authentication header for the request. **Must** be set to `Authorization`.",
                "type": "optional<string>",
              },
              "auth_token": {
                "docs": "The authentication token you need to send webhook events. This value is obfuscated.",
                "type": "optional<string>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the webhook was created in our database.
",
                "type": "datetime",
              },
              "created_by": {
                "docs": "Belvo's unique ID of the user that created the webhook.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Belvo's unique ID for the webhook.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": "unknown",
              "url": {
                "docs": "The URL where webhook events should be sent to.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentsInstitutionsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of institution objects.",
                "type": "optional<list<PaymentInstitution>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentsTransactionsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of transaction objects.",
                "type": "optional<list<PaymentTransaction>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentsWay": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "form_id": {
                "docs": "Your unique Payments Way form ID.

**Note:** Belvo provides you with the Payments Way form ID during your onboarding process. If you don't have one yet, just reach out to us at payments-info@belvo.com and we'll give you a hand with this. üôÇ",
                "type": "integer",
              },
              "terminal_id": {
                "docs": "Your unique Payments Way terminal ID.

**Note:** Belvo provides you with the Payments Way terminal ID during your onboarding process. If you don't have one yet, just reach out to us at payments-info@belvo.com and we'll give you a hand with this. üôÇ",
                "type": "integer",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaymentsWebhooksPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of webhook objects.",
                "type": "optional<list<PaymentWebhook>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PensionIncomeStatementIndividual": {
            "docs": "Object containing the tax payer's total pension income.",
            "inline": undefined,
            "properties": {
              "net_pension_income": {
                "docs": "The total net pension of the taxpayer.",
                "type": "float",
              },
              "net_taxable_pension_income": {
                "docs": "The total taxable pension income of the taxpayer.",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ReceivablesTransaction": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account": "ReceivablesTransactionAccount",
              "collected_at": {
                "docs": "The ISO timestamp when the data point was collected.",
                "type": "datetime",
              },
              "created_at": {
                "docs": "The ISO timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "currency": {
                "docs": "The currency of the transaction. For example:
- üáßüá∑ BRL (Brazilian Real)
- üá®üá¥ COP (Colombian Peso)
- üá≤üáΩ MXN (Mexican Peso)

 Please note that currencies other than those listed above may be returned.",
                "type": "string",
              },
              "fees": "list<RecevablesTransactionFees>",
              "gross_amount": {
                "docs": "The total gross amount of the transaction.",
                "type": "optional<float>",
              },
              "id": {
                "docs": "Belvo's unique ID for the current receivable transaction.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution_transaction_id": {
                "docs": "Internal identification number that the acquirer uses to identify the transaction.
‚ÑπÔ∏è **Note**: For Brazil, this number is the NSU.",
                "type": "string",
              },
              "net_amount": {
                "docs": "The net amount of the transaction.",
                "type": "optional<float>",
              },
              "number_of_installments": "optional<ReceivablesTransactionNumberOfInstallments>",
              "status": "optional<EnumReceivableTransactionStatus>",
              "type": "optional<EnumReceivableTransactionType>",
              "value_date": {
                "docs": "The date that the transactions occurred, according to the institution, in `YYYY-MM-DD` format.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "value_hour": {
                "docs": "The time that the transaction occurred, according to the institution, in `HH:MM` format.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ReceivablesTransactionAccount": {
            "docs": "Basic information about the account associated with the transaction.",
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "Belvo's unique ID for the account associated with the transaction.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": "InstitutionAccount",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ReceivablesTransactionNumberOfInstallments": {
            "docs": "Details regarding the number of installments for the transaction, if applicable.",
            "inline": undefined,
            "properties": {
              "paid": {
                "docs": "The number of payments already made to pay the cost of the transaction.",
                "type": "optional<integer>",
              },
              "total": {
                "docs": "The number of payments required to pay the cost of the transaction.",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ReceivablesTransactionsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of receivables objects.",
                "type": "optional<list<ReceivablesTransaction>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RecevablesTransactionFees": {
            "docs": "Details regarding the fees applied to the transaction.",
            "inline": undefined,
            "properties": {
              "type": "optional<EnumReceivableTransactionFeeType>",
              "value": {
                "docs": "The value of `fees.type`.",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RecurringExpenseSourceTransaction": {
            "docs": "An array of minified transaction objects used to evaluate the recurring expense. If no transactions were found, we return an empty array.",
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "The transaction amount.",
                "type": "float",
              },
              "description": {
                "docs": "The description of the transaction provided by the institution. Usually, this is the text that the end user would see in the bank statement. The description can be an empty string.",
                "type": "optional<string>",
              },
              "value_date": {
                "docs": "The date when the transaction occurred, in `YYYY-MM-DD` format.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RecurringExpenses": {
            "docs": "Recurring expense insights.


‚ÑπÔ∏è If no recurring expense insights are found, we return an empty array.
",
            "inline": undefined,
            "properties": {
              "account": "optional<Account>",
              "average_transaction_amount": {
                "docs": "The average transaction amount of the recurring expense.",
                "type": "float",
              },
              "category": "EnumRecurringExpenseCategory",
              "days_since_last_transaction": {
                "docs": "Number of days since the last recurring expense occurred.

Based on the frequency, you can infer how many days until the next charge will occur.
",
                "type": "integer",
              },
              "frequency": "EnumRecurringExpenseFrequency",
              "id": {
                "docs": "Belvo's unique identifier used to reference the current recurring expense.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "median_transaction_amount": {
                "docs": "The median transaction amount of the recurring expense.",
                "type": "float",
              },
              "name": {
                "docs": "The name for the recurring expense.

‚ÑπÔ∏è **Note**: This information is taken from the description section of a transaction and then normalized to provide you with an easy-to-read name. As such, sometimes the name will reflect the merchant the payment is made to (for example, Netflix.com), while for other recurring expenses, this could be something like "Monthly payment to John".
",
                "type": "optional<string>",
              },
              "payment_type": "optional<EnumRecurringExpensePaymentType>",
              "transactions": {
                "docs": "An array of minified transaction objects used to evaluate the recurring expense. If no transactions were found, we return an empty array.",
                "type": "list<optional<RecurringExpenseSourceTransaction>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RecurringExpensesPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of recurring expense objects.",
                "type": "optional<list<RecurringExpenses>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ReportingId": {
            "docs": "Object containing information about where the tax payer reports their income.",
            "inline": undefined,
            "properties": {
              "reporting_type": {
                "docs": "The type of reporting ID. For DIAN, this is the sectional address code (*Codigo Dirrecion Seccional*)",
                "type": "string",
              },
              "reporting_value": {
                "docs": "The value of the reporting ID.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RequestTimeoutErrorBody": {
            "docs": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`request_timeout`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#408-request_timeout" target="_blank">408 request_timeout errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `request_timeout` errors, the description is:
  
  - `The request timed out, you can retry asking for less data by changing your query parameters`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RetentionBreakdown": {
            "docs": "A breakdown of the retained taxes",
            "inline": undefined,
            "properties": {
              "base_amount": {
                "docs": "The base amount that was used to calculate the tax retention.
",
                "type": "optional<float>",
              },
              "payment_status": "optional<EnumTaxRetentionPaymentStatus>",
              "retained_amount": {
                "docs": "The amount retained.
",
                "type": "optional<float>",
              },
              "tax_type": {
                "docs": "Optional attribute to indicate the type of tax withheld for the period or year according to the [SAT catalog](https://developers.belvo.com/docs/sat-catalogs#retention-code).
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskInsights": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accounts": {
                "docs": "An array of Belvo-generated account numbers (UUIDs) that were used during the risk insights analysis. If no accounts were found, we return an empty array.",
                "type": "optional<list<string>>",
              },
              "balances_metrics": "optional<RiskInsightsBalanceMetrics>",
              "cashflow_metrics": "optional<RiskInsightsCashflowMetrics>",
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "credit_cards_metrics": "optional<RiskInsightsCreditCardMetrics>",
              "id": {
                "docs": "Belvo's unique ID for the risk insights request.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "link": {
                "docs": "The `link.id` the risk insights analysis belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "loans_metrics": "optional<RiskInsightsLoansMetrics>",
              "transactions_metrics": "optional<RiskInsightsTransactionMetrics>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskInsightsBalanceMetrics": {
            "docs": "Balance metrics calculated based on the user's balances from checking and savings accounts.",
            "inline": undefined,
            "properties": {
              "balance_threshold_x": {
                "docs": "The threshold used to compute `days_balance_below_x_period`. Please note, this is value is country specific (both in terms of the amount and the currency).
",
                "type": "float",
              },
              "closing_balance": {
                "docs": "The balance of all the accounts at the `collected_at` time.
",
                "type": "optional<float>",
              },
              "days_balance_below_0_1m": {
                "docs": "The number of days that the total balance of the account is less than or equal to 0 in the last month.
",
                "type": "optional<integer>",
              },
              "days_balance_below_0_1w": {
                "docs": "The number of days that the total balance of the account is less than or equal to 0 in the last week.
",
                "type": "optional<integer>",
              },
              "days_balance_below_0_3m": {
                "docs": "The number of days that the total balance of the account is less than or equal to 0 in the last three months.
",
                "type": "optional<integer>",
              },
              "days_balance_below_x_1m": {
                "docs": "The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last month.
",
                "type": "optional<integer>",
              },
              "days_balance_below_x_1w": {
                "docs": "The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last week.
",
                "type": "optional<integer>",
              },
              "days_balance_below_x_3m": {
                "docs": "The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last three months.
",
                "type": "optional<integer>",
              },
              "max_balance_1m": {
                "docs": "The maximum balance in the period (one month).
",
                "type": "optional<float>",
              },
              "max_balance_1w": {
                "docs": "The maximum balance in the period (one week).
",
                "type": "optional<float>",
              },
              "max_balance_3m": {
                "docs": "The maximum balance in the period (three months).
",
                "type": "optional<float>",
              },
              "min_balance_1m": {
                "docs": "The minimum balance in the period (one month).
",
                "type": "optional<float>",
              },
              "min_balance_1w": {
                "docs": "The minimum balance in the period (one week).
",
                "type": "optional<float>",
              },
              "min_balance_3m": {
                "docs": "The minimum balance in the period (three months).
",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskInsightsCashflowMetrics": {
            "docs": "Aggregated metrics calculated based on the user's transactions from checking, savings, credit, and loan accounts.

However, internal transfers (transfers between accounts belonging to the same link) are not used in the calculation.
",
            "inline": undefined,
            "properties": {
              "positive_to_negative_ratio_1m": {
                "docs": "The ratio between sum_positive / sum_negative  in the last month (counted from the time of the request).

‚ÑπÔ∏è¬†If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.
",
                "type": "optional<float>",
              },
              "positive_to_negative_ratio_1w": {
                "docs": "The ratio between sum_positive / sum_negative  in the last week (counted from the time of the request).

‚ÑπÔ∏è¬†If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.

**Note**: In the case that there have been no outgoing transactions, the value will be `null`.
",
                "type": "optional<float>",
              },
              "positive_to_negative_ratio_3m": {
                "docs": "The ratio between sum_positive / sum_negative  in the last three months (counted from the time of the request).

‚ÑπÔ∏è¬†If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.
",
                "type": "optional<float>",
              },
              "sum_negative_1m": {
                "docs": "Sum total of all transactions leading to a negative cashflow in the last month (counted from the time of the request).
",
                "type": "optional<float>",
              },
              "sum_negative_1w": {
                "docs": "Sum total of all transactions leading to a negative cashflow in the last week (counted from the time of the request).
",
                "type": "optional<float>",
              },
              "sum_negative_3m": {
                "docs": "Sum total of all transactions leading to a negative cashflow in the last three months (counted from the time of the request).
",
                "type": "optional<float>",
              },
              "sum_positive_1m": {
                "docs": "Sum total of all transactions leading to a positive cashflow in the last month (counted from the time of the request).
",
                "type": "optional<float>",
              },
              "sum_positive_1w": {
                "docs": "Sum total of all transactions leading to a positive cashflow in the last week (counted from the time of the request).
",
                "type": "optional<float>",
              },
              "sum_positive_3m": {
                "docs": "Sum total of all transactions leading to a positive cashflow in the last three months (counted from the time of the request).
",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskInsightsCreditCardMetrics": {
            "docs": "Aggregated metrics calculated based on the link's credit card accounts.",
            "inline": undefined,
            "properties": {
              "num_accounts": {
                "docs": "Number of credit cards accounts associated to the link.
",
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "sum_credit_limit": {
                "docs": "Sum total of all credit cards' limits.
",
                "type": "optional<float>",
              },
              "sum_credit_used": {
                "docs": "Sum total of all credit used.
",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskInsightsLoansMetrics": {
            "docs": "Aggregated metrics calculated based on the user's loan accounts.",
            "inline": undefined,
            "properties": {
              "num_accounts": {
                "docs": "Number of loan accounts associated with the link.
",
                "type": "integer",
              },
              "sum_loans_monthly_payment": {
                "docs": "Sum total of the monthly payments for all the link's loan accounts.
",
                "type": "optional<float>",
              },
              "sum_loans_outstanding_principal": {
                "docs": "Sum total of the outstanding principal for all the link's loan accounts.
",
                "type": "optional<float>",
              },
              "sum_loans_principal": {
                "docs": "Sum total of the principal for all of the link's loan accounts.
",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskInsightsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of risk insights objects.",
                "type": "optional<list<RiskInsights>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RiskInsightsTransactionMetrics": {
            "docs": "Aggregated metrics calculated band on the user's transactions from checking, savings, credit card, and loan accounts.",
            "inline": undefined,
            "properties": {
              "max_incoming_amount_1m": {
                "docs": "The highest value inflow transaction in the last month.
",
                "type": "optional<float>",
              },
              "max_incoming_amount_1w": {
                "docs": "The highest value inflow transaction in the last week.
",
                "type": "optional<float>",
              },
              "max_incoming_amount_3m": {
                "docs": "The highest value inflow transaction in the last three months.
",
                "type": "optional<float>",
              },
              "max_outgoing_amount_1m": {
                "docs": "The highest value outflow transaction in the last month.
",
                "type": "optional<float>",
              },
              "max_outgoing_amount_1w": {
                "docs": "The highest value outflow transaction in the last week.
",
                "type": "optional<float>",
              },
              "max_outgoing_amount_3m": {
                "docs": "The highest value outflow transaction in the last three months.
",
                "type": "optional<float>",
              },
              "mean_incoming_amount_1m": {
                "docs": "The mean incoming value of all transactions in the last month.
",
                "type": "optional<float>",
              },
              "mean_incoming_amount_1w": {
                "docs": "The mean incoming value of all transactions in the last week.
",
                "type": "optional<float>",
              },
              "mean_incoming_amount_3m": {
                "docs": "The mean incoming value of all transactions in the last three months.
",
                "type": "optional<float>",
              },
              "mean_outgoing_amount_1m": {
                "docs": "The mean outgoing value of all transaction in the last month.
",
                "type": "optional<float>",
              },
              "mean_outgoing_amount_1w": {
                "docs": "The mean outgoing value of all transaction in the last week.
",
                "type": "optional<float>",
              },
              "mean_outgoing_amount_3m": {
                "docs": "The mean outgoing value of all transaction in the last three months.
",
                "type": "optional<float>",
              },
              "num_incoming_transactions_1m": {
                "default": 0,
                "docs": "The total number of inflow transactions for the last month.

‚ÑπÔ∏è **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
",
                "type": "integer",
              },
              "num_incoming_transactions_1w": {
                "default": 0,
                "docs": "The total number of inflow transactions for the last week.

‚ÑπÔ∏è **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
",
                "type": "integer",
              },
              "num_incoming_transactions_3m": {
                "default": 0,
                "docs": "The total number of inflow transactions for the last three months.

‚ÑπÔ∏è **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
",
                "type": "integer",
              },
              "num_outgoing_transactions_1m": {
                "default": 0,
                "docs": "To total number of outflow transactions in the last month.

‚ÑπÔ∏è **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
",
                "type": "integer",
              },
              "num_outgoing_transactions_1w": {
                "default": 0,
                "docs": "To total number of outflow transactions in the last week.

‚ÑπÔ∏è **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
",
                "type": "integer",
              },
              "num_outgoing_transactions_3m": {
                "default": 0,
                "docs": "To total number of outflow transactions in the last three months.

‚ÑπÔ∏è **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.

If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.
",
                "type": "integer",
              },
              "num_transactions_1m": {
                "default": 0,
                "docs": "The total number of transactions analyzed to determine the risk insights for the last month (incoming and outgoing).
",
                "type": "integer",
              },
              "num_transactions_1w": {
                "default": 0,
                "docs": "The total number of transactions analyzed to determine the risk insights for the last week (incoming and outgoing).
",
                "type": "integer",
              },
              "num_transactions_3m": {
                "default": 0,
                "docs": "The total number of transactions analyzed to determine the risk insights for the last three months (incoming and outgoing).
",
                "type": "integer",
              },
              "sum_incoming_amount_1m": {
                "docs": "The total sum of all inflow transactions for the last month.
",
                "type": "optional<float>",
              },
              "sum_incoming_amount_1w": {
                "docs": "The total sum of all inflow transactions for the last week.
",
                "type": "optional<float>",
              },
              "sum_incoming_amount_3m": {
                "docs": "The total sum of all inflow transactions for the last three months.
",
                "type": "optional<float>",
              },
              "sum_outgoing_amount_1m": {
                "docs": "The total sum of all outflow transactions for the last month.
",
                "type": "optional<float>",
              },
              "sum_outgoing_amount_1w": {
                "docs": "The total sum of all outflow transactions for the last week.
",
                "type": "optional<float>",
              },
              "sum_outgoing_amount_3m": {
                "docs": "The total sum of all outflow transactions for the last three months.
",
                "type": "optional<float>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SecretKeys": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the secret key was created.
",
                "type": "datetime",
              },
              "id": {
                "docs": "Belvo's unique ID for the Payments API `secretId`.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "last_used": {
                "docs": "The ISO-8601 timestamp of when the secret key was last used.
",
                "type": "datetime",
              },
              "password": {
                "docs": "Your Payments API `secretPassword`. This value is obfuscated.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SecretKeysPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of secret keys objects.",
                "type": "optional<list<SecretKeys>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionExpiredError": {
            "docs": "This error occurs when you try to resume a request session that has already expired. This is usually because the user took too long to provide their authentication token.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`session_expired`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-session_expired" target="_blank">400 session_expired errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `session_expired` errors, the description is:
  
  - `The session you are trying to resume has expired, please start again from register/retrieve endpoint`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "StandardRequest": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "link": {
                "docs": "The `link.id` that you want to get information for.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "save_data": {
                "default": true,
                "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                "type": "optional<boolean>",
              },
              "token": {
                "docs": "The OTP token generated by the bank.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxAssessmentBusiness": {
            "docs": "Object containing the calculated tax assessment of the tax payer. This includes the total taxable income, the income tax applied, and taxes already withheld.",
            "inline": undefined,
            "properties": {
              "fortuitous_profit_tax": {
                "docs": "The tax applied on your unexpected income (such as lottery wins or house sales).",
                "type": "float",
              },
              "net_income_tax": {
                "docs": "After additional deductions that you can apply, this will be the net income tax. If no further deduction are identified, this value will be the same as `total_tax_on_taxable_net_income`.",
                "type": "float",
              },
              "net_income_taxable": {
                "docs": "The net income on which tax can be applied.",
                "type": "float",
              },
              "total_balance_in_favor": {
                "docs": "How much the tax payer is expected to receive.",
                "type": "float",
              },
              "total_balance_payable": {
                "docs": "How much the tax payer is required to pay.",
                "type": "float",
              },
              "total_payment": {
                "docs": "The total the tax payer is required to pay, taking into account deductions and fiscal credits.",
                "type": "float",
              },
              "total_tax_due": {
                "docs": "After further deductions, this is the final calculated tax that the taxpayer is required to pay.",
                "type": "float",
              },
              "total_tax_on_taxable_net_income": {
                "docs": "The calculated total tax that can be applied on the tax payer's taxable income (total income - exemptions - deductions).",
                "type": "float",
              },
              "total_withholdings_for_the_taxable_year_to_be_declared": {
                "docs": "How much the tax payer has already paid througout the fiscal year.",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxAssessmentIndividual": {
            "docs": "Object containing the calculated tax assessment of the tax payer. This includes the total taxable income, the income tax applied, and taxes already withheld.",
            "inline": undefined,
            "properties": {
              "balance_payable": {
                "docs": "How much the tax payer is required to pay.",
                "type": "float",
              },
              "balance_refundable": {
                "docs": "How much the tax payer is expected to receive. For DIAN, this will count as credit for the next fiscal year (see `previous_year_balance`).",
                "type": "float",
              },
              "fortuitous_profit_tax": {
                "docs": "The tax applied on your unexpected income (such as lottery wins or house sales).",
                "type": "float",
              },
              "net_income_tax": {
                "docs": "After additional deductions that you can apply, this will be the net income tax. If not further deduction are identified, this value will be the same as `total_tax_on_taxable_net_income`.",
                "type": "float",
              },
              "previous_year_balance": {
                "docs": "Only applicable for DIAN.


The amount the tax payer has as a "credit" fromt he previous year (this is equal to the `balance_refundable`) of the previous year.
",
                "type": "float",
              },
              "total_payment": {
                "docs": "The total the tax payer is required to pay, taking into account deductions and fiscal credits.",
                "type": "float",
              },
              "total_tax_due": {
                "docs": "After further deductions, this is the final calculated tax that the taxpayer is required to pay.",
                "type": "float",
              },
              "total_tax_on_taxable_net_income": {
                "docs": "The calculated total tax that can be applied on the tax payer's taxable income (total income - exemptions - deductions).",
                "type": "float",
              },
              "total_withheld_tax": {
                "docs": "The total tax already withheld in the current fiscal year.",
                "type": "float",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxComplianceStatus": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "id": {
                "docs": "Unique identifier created by Belvo used to reference the current Tax Compliance Status.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "internal_identification": {
                "docs": "The institution‚Äôs internal identification number for the document.",
                "type": "optional<string>",
              },
              "outcome": "optional<EnumTaxComplianceStatusOutcome>",
              "pdf": {
                "docs": "Tax compliance status PDF as a binary.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "rfc": {
                "docs": "The account holder's RFC (Registro Federal de Contribuyentes) number.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxComplianceStatusPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of tax compliance status objects.",
                "type": "optional<list<TaxComplianceStatus>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxDeclarationBusiness": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "annual_costs_and_deductions_statement": "AnnualCostsAndDeductionsStatementBusiness",
              "annual_income_statement": "AnnualIncomeStatementBusiness",
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "datetime",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "date_issued": {
                "docs": "The date the tax declaration was issued by the fiscal institution.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "document_information": "DocumentInformationBusiness",
              "equity_statement": "EquityStatementBusiness",
              "id": {
                "docs": "Belvo's unique ID for the current tax declaration.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "link": {
                "docs": "Belvo's unique ID of the user that this tax declaration is associated with.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "pdf": {
                "docs": "The PDF of the tax declaration, as a binary string.",
                "type": "optional<string>",
              },
              "tax_assessment": "TaxAssessmentBusiness",
              "tax_payer_information": "TaxPayerInformationBusiness",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxDeclarationBusinessPaginated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of Business Tax Declaration objects.",
                "type": "optional<list<TaxDeclarationBusiness>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxDeclarationIndividual": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "annual_income_statement": "AnnualIncomeStatementIndividual",
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "datetime",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "date_issued": {
                "docs": "The date the tax declaration was issued by the fiscal institution.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "document_information": "DocumentInformationIndividual",
              "equity_statement": "EquityStatementIndividual",
              "id": {
                "docs": "Belvo's unique ID for the current tax declaration.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "link": {
                "docs": "Belvo's unique ID of the user that this tax declaration is associated with.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "pdf": {
                "docs": "The PDF of the tax declaration, as a binary string.",
                "type": "optional<string>",
              },
              "pension_income_statement": "PensionIncomeStatementIndividual",
              "tax_assessment": "TaxAssessmentIndividual",
              "tax_payer_information": "TaxPayerInformationIndividual",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxDeclarationIndividualPaginated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of Individual Tax Declaration objects.",
                "type": "optional<list<TaxDeclarationIndividual>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxPayerInformationBusiness": {
            "docs": "Object containing information about the tax payer.",
            "inline": undefined,
            "properties": {
              "company_name": {
                "docs": "The name of the company, as registered at the institution.",
                "type": "string",
              },
              "document_id": "DocumentIdBusiness",
              "first_last_name": {
                "docs": "The tax payer's first last name.",
                "type": "optional<string>",
              },
              "first_name": {
                "docs": "The tax payer's first name.",
                "type": "optional<string>",
              },
              "main_economic_activity": {
                "docs": "The main economic activity the tax payer is involved in.",
                "type": "string",
              },
              "other_names": {
                "docs": "Additional names of the tax payer.",
                "type": "optional<string>",
              },
              "reporting_id": "ReportingId",
              "second_last_name": {
                "docs": "The tax payer's second last name.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxPayerInformationIndividual": {
            "docs": "Object containing information about the tax payer.",
            "inline": undefined,
            "properties": {
              "document_id": "DocumentIdIndividual",
              "first_last_name": {
                "docs": "The tax payer's first last name.",
                "type": "string",
              },
              "first_name": {
                "docs": "The tax payer's first name.",
                "type": "string",
              },
              "main_economic_activity": {
                "docs": "The main economic activity the tax payer is involved in.",
                "type": "string",
              },
              "other_names": {
                "docs": "Additional names of the tax payer.",
                "type": "string",
              },
              "reporting_id": "ReportingId",
              "second_last_name": {
                "docs": "The tax payer's second last name.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxRetentions": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "cancelled_at": {
                "docs": "The ISO-8601 timestamp of when the tax retention was canceled (if applicable).
",
                "type": "optional<datetime>",
              },
              "certified_at": {
                "docs": "The ISO-8601 timestamp of when the tax retention was certified.
",
                "type": "optional<datetime>",
              },
              "code": {
                "docs": "The tax retention code. For more information, see our [SAT Catalogs DevPortal article](https://developers.belvo.com/docs/sat-catalogs#retention-code).
",
                "type": "optional<integer>",
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp of when the data point was collected.
",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.
",
                "type": "optional<datetime>",
              },
              "id": {
                "docs": "Belvo's unique identifier used to reference the current tax retention statement.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "invoice_identification": {
                "docs": "The fiscal institution's unique ID for the invoice that the tax retention relates to.
",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "issued_at": {
                "docs": "The ISO-8601 timestamp of when the tax retention was issued.
",
                "type": "optional<datetime>",
              },
              "link": {
                "docs": "The `link.id` the tax retention belongs to.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "receiver_id": {
                "docs": "The fiscal ID of the invoice receiver.
",
                "type": "optional<string>",
              },
              "receiver_name": {
                "docs": "The name of the invoice receiver.
",
                "type": "optional<string>",
              },
              "receiver_nationality": "optional<EnumTaxRetentionReceiverNationality>",
              "retention_breakdown": {
                "docs": "A breakdown of the retained taxes.",
                "type": "optional<list<RetentionBreakdown>>",
              },
              "sender_id": {
                "docs": "The fiscal ID of the invoice sender.
",
                "type": "optional<string>",
              },
              "sender_name": {
                "docs": "The name of the invoice sender.
",
                "type": "optional<string>",
              },
              "total_exempt_amount": {
                "docs": "Total amount that is exempt from taxation.
",
                "type": "optional<float>",
              },
              "total_invoice_amount": {
                "docs": "The total amount of the invoice that the tax retention relates to.
",
                "type": "optional<float>",
              },
              "total_retained_amount": {
                "docs": "Total tax retained.
",
                "type": "optional<float>",
              },
              "total_taxable_amount": {
                "docs": "The total amount that can be taxed. Calculated as `total_invoice_amount` - `total_exempt_amount`.
",
                "type": "optional<float>",
              },
              "version": {
                "docs": "The CFDI version of the tax retentions.
",
                "type": "optional<string>",
              },
              "xml": {
                "docs": "The tax retention document in XML form.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxRetentionsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of tax retentions objects.",
                "type": "optional<list<TaxRetentions>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnBusiness": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "cifras_cierre_ejercicio": {
                "docs": "Details regarding key numbers at the end of the fiscal exercise.",
                "type": "optional<map<string, unknown>>",
              },
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "conciliacion_entre_resultado_contable_fiscal": {
                "docs": "Details regarding the accounting reconciliation.",
                "type": "optional<map<string, unknown>>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "datos_adicionales": {
                "docs": "Additional data regarding the tax return.",
                "type": "optional<map<string, unknown>>",
              },
              "deducciones_autorizadas": {
                "docs": "Details regarding the legal entity's deductions.",
                "type": "optional<map<string, unknown>>",
              },
              "detalle_pago_r1_isr_personas_morales": {
                "docs": "Details of the tax payment.",
                "type": "optional<map<string, unknown>>",
              },
              "determinacion_del_impuesto_sobre_la_renta": {
                "docs": "Details regarding the final tax return.",
                "type": "optional<map<string, unknown>>",
              },
              "dividendos_o_utilidades_distribuidos": {
                "docs": "Details regarding distributed dividends.",
                "type": "optional<map<string, unknown>>",
              },
              "estado_posicion_financiera_balance": {
                "docs": "Details regarding balance sheet of the legal entity.",
                "type": "optional<map<string, unknown>>",
              },
              "estado_resultados": {
                "docs": "Detailed information about the legal entity's yearly profit and loss.",
                "type": "optional<map<string, unknown>>",
              },
              "id": {
                "docs": "Unique identifier created by Belvo used to reference the current Tax Return.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "informacion_general": {
                "docs": "General information regarding the tax return (year, RFC, return type, person/company name, and so on).",
                "type": "optional<map<string, unknown>>",
              },
              "pdf": {
                "docs": "Tax return PDF as a binary.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "receipt_pdf": {
                "docs": "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnBusinessMonthly": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "detalle_pago_isr": {
                "docs": "Information on the monthly provisional payments for the income tax.",
                "type": "optional<map<string, unknown>>",
              },
              "detalle_pago_iva": {
                "docs": "Information on the monthly provisional payments for the VAT tax.",
                "type": "optional<map<string, unknown>>",
              },
              "determinacion_isr": {
                "docs": "Information used to calculate the provisional income tax for the period.",
                "type": "optional<map<string, unknown>>",
              },
              "determinacion_iva": {
                "docs": "Information used to calculate the provisional VAT tax for the period.",
                "type": "optional<map<string, unknown>>",
              },
              "id": {
                "docs": "Unique identifier created by Belvo used to reference the current Tax Return.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "informacion_general": {
                "docs": "General information regarding the tax return (year, RFC, return type, person/company name, and so on).",
                "type": "optional<map<string, unknown>>",
              },
              "pdf": {
                "docs": "Tax return PDF as a binary.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "receipt_pdf": {
                "docs": "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "type": {
                "docs": "The type of tax return. Can be either monthly or annual.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnPersonal": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "datos_informativos": {
                "docs": "Extra informative data on the tax return.",
                "type": "optional<map<string, unknown>>",
              },
              "deducciones_personales": {
                "docs": "List of all personal tax deductions.",
                "type": "optional<map<string, unknown>>",
              },
              "determinacion_impuesto": {
                "docs": "Details regarding the final tax return.",
                "type": "optional<map<string, unknown>>",
              },
              "dividendos": {
                "docs": "Details regarding dividends.",
                "type": "optional<map<string, unknown>>",
              },
              "id": {
                "docs": "Unique identifier created by Belvo used to reference the current Tax Return.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "informacion_general": {
                "docs": "General information on the tax return (year, RFC, return type, person/company name, and so on).",
                "type": "optional<map<string, unknown>>",
              },
              "link": {
                "docs": "The `link.id` the statement belongs to",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "pdf": {
                "docs": "Tax return PDF as a binary.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "receipt_pdf": {
                "docs": "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "retenciones": {
                "docs": "Details on the already withheld taxes.",
                "type": "optional<map<string, unknown>>",
              },
              "servicios_profesionales": {
                "docs": "Details regarding the income and tax information from professional services provided.",
                "type": "optional<map<string, unknown>>",
              },
              "sueldos_salarios": {
                "docs": "Details regarding the income information together combined with withheld taxes.",
                "type": "optional<map<string, unknown>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnPersonalMonthly": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "id": {
                "docs": "Unique identifier created by Belvo used to reference the current Tax Return.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "informacion_general": {
                "docs": "General information regarding the tax return (year, RFC, return type, person/company name, and so on).",
                "type": "optional<map<string, unknown>>",
              },
              "isr": {
                "docs": "Information used to calculate the monthly provisional payments of the income tax.",
                "type": "optional<map<string, unknown>>",
              },
              "iva": {
                "docs": "Information used to calculate the monthly provisional payments of the VAT tax.",
                "type": "optional<map<string, unknown>>",
              },
              "pdf": {
                "docs": "Tax return PDF as a binary.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "receipt_pdf": {
                "docs": "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "type": {
                "docs": "The type of tax return. Can be either monthly or annual.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnsBusinessMonthlyPaginated": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of Monthly Business Tax Return objects.",
                "type": "optional<list<TaxReturnBusinessMonthly>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnsBusinessPaginated": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of Business Tax Return objects.",
                "type": "optional<list<TaxReturnBusiness>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnsMonthlyRequest": {
            "docs": "Request body for monthly tax returns",
            "inline": undefined,
            "properties": {
              "attach_pdf": {
                "default": false,
                "docs": "When this is set to `true`, you will receive the PDF as a binary string in the response.",
                "type": "optional<boolean>",
              },
              "date_from": {
                "docs": "The starting date you want to get tax returns for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.",
                "type": "string",
              },
              "date_to": {
                "docs": "The date you want to stop getting tax returns for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
                "type": "string",
              },
              "link": {
                "docs": "The fiscal `link.id` you want specific tax return information for.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "save_data": {
                "default": true,
                "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                "type": "optional<boolean>",
              },
              "type": {
                "default": "monthly",
                "docs": "The type of tax return to return. For monthly tax returns, this field must be set to `monthly`.
",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnsPersonalMonthlyPaginated": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of Monthly Personal Tax Return objects.",
                "type": "optional<list<TaxReturnPersonalMonthly>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnsPersonalPaginated": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of Personal Tax Return objects.",
                "type": "optional<list<TaxReturnPersonal>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxReturnsYearlyRequest": {
            "docs": "Request body for yearly tax returns",
            "inline": undefined,
            "properties": {
              "attach_pdf": {
                "default": false,
                "docs": "When this is set to `true`, you will receive the PDF as a binary string in the response.",
                "type": "optional<boolean>",
              },
              "link": {
                "docs": "The fiscal `link.id` you want specific tax return information for.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "save_data": {
                "default": true,
                "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                "type": "optional<boolean>",
              },
              "type": {
                "default": "yearly",
                "docs": "The type of tax return to return. For yearly tax returns this must be set to `yearly`.

By default, Belvo returns the yearly (annual) tax returns.
",
                "type": "string",
              },
              "year_from": {
                "docs": "The starting year you want to get tax returns for, in `YYYY` format.
",
                "type": "string",
              },
              "year_to": {
                "docs": "The year you want to stop getting tax returns for, in `YYYY` format.
",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusAddressBetweenStreetDian": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "street_one": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "street_two": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusAddressBetweenStreetSat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "street_one": {
                "docs": "The first street that `street` is located between.",
                "type": "optional<string>",
              },
              "street_two": {
                "docs": "The second street that `street` is located between.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusAddressDian": {
            "docs": "The tax payer's address details.",
            "inline": undefined,
            "properties": {
              "between_street": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<list<TaxStatusAddressBetweenStreetDian>>",
              },
              "exterior_number": {
                "docs": "The street number.",
                "type": "optional<string>",
              },
              "interior_number": {
                "docs": "Additional address information.",
                "type": "optional<string>",
              },
              "locality": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "municipality": {
                "docs": "The municipality of the address.",
                "type": "optional<string>",
              },
              "postal_code": {
                "docs": "The postcode of the address.
",
                "type": "optional<string>",
              },
              "state": {
                "docs": "The state that the address is in.",
                "type": "optional<string>",
              },
              "street": {
                "docs": "The tax payers street.",
                "type": "optional<string>",
              },
              "street_type": {
                "docs": "The `street` type.",
                "type": "optional<string>",
              },
              "suburb": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusAddressSat": {
            "docs": "The tax payer's address details.",
            "inline": undefined,
            "properties": {
              "between_street": {
                "docs": "Additional information about where the `street` is located.
",
                "type": "optional<list<TaxStatusAddressBetweenStreetSat>>",
              },
              "exterior_number": {
                "docs": "The street number.",
                "type": "optional<string>",
              },
              "interior_number": {
                "docs": "Additional address information.",
                "type": "optional<string>",
              },
              "locality": {
                "docs": "The locality of the address.
",
                "type": "optional<string>",
              },
              "municipality": {
                "docs": "The municipality of the address.",
                "type": "optional<string>",
              },
              "postal_code": {
                "docs": "The postcode of the address.
",
                "type": "optional<string>",
              },
              "state": {
                "docs": "The state that the address is in.",
                "type": "optional<string>",
              },
              "street": {
                "docs": "The tax payers street.",
                "type": "optional<string>",
              },
              "street_type": {
                "docs": "The `street` type.",
                "type": "optional<string>",
              },
              "suburb": {
                "docs": "The suburb of the tax payer.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusDian": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "address": "optional<TaxStatusAddressDian>",
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "digital_stamp": {
                "docs": "The validation certificate of the document.",
                "type": "optional<string>",
              },
              "digital_stamp_chain": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "economic_activity": {
                "docs": "A list of economic activity objects.
",
                "type": "optional<list<TaxStatusEconomicActivityDian>>",
              },
              "id": {
                "docs": "Unique identifier created by Belvo used to reference the current Tax Status.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id_cif": {
                "docs": "The taxpayer's *C√©dula de ciudadan√≠a* (CC) ID. Only applicable for individuals.
",
                "type": "optional<string>",
              },
              "link": {
                "docs": "The `link.id` that the tax status is associated with.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "obligations": {
                "docs": "Details regarding a business's obligations.

‚ÑπÔ∏è For non-business accounts, this field will return empty.
",
                "type": "optional<list<TaxStatusObligationsDian>>",
              },
              "official_name": {
                "docs": "The name of the business.

Note: For individuals in Colombia, this field will return `null`.
",
                "type": "optional<string>",
              },
              "pdf": {
                "docs": "Tax status PDF as a binary string.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "place_and_date_of_issuance": {
                "docs": "The date when the tax status was issued. For example, `2020-08-05/18:55:16`.",
                "type": "optional<string>",
              },
              "regimes": {
                "docs": "A list of regimen objects.
",
                "type": "optional<list<TaxStatusRegimensDian>>",
              },
              "tax_payer_information": "optional<TaxStatusTaxPayerInformationDian>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusEconomicActivityDian": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "economic_activity": {
                "docs": "The economic activity code, according to the fiscal institution.

For detailed information regarding DIAN's economic activities, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
                "type": "optional<string>",
              },
              "end_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "initial_date": {
                "docs": "The start date of the economic activity.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "order": {
                "docs": "The order of the economic activity.",
                "type": "optional<string>",
              },
              "percentage": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusEconomicActivitySat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "economic_activity": {
                "docs": "The description of the economic activity.",
                "type": "optional<string>",
              },
              "end_date": {
                "docs": "The end date of the economic activity.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "initial_date": {
                "docs": "The start date of the economic activity.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "order": {
                "docs": "The order of the economic activity.",
                "type": "optional<string>",
              },
              "percentage": {
                "docs": "The percentage of the economic activity.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusObligationsDian": {
            "docs": "Details regarding a business's obligations.

‚ÑπÔ∏è For non-business accounts, this field will return empty.
",
            "inline": undefined,
            "properties": {
              "end_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "expiration": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "initial_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "obligation": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusObligationsSat": {
            "docs": "Details regarding a business's obligations.

‚ÑπÔ∏è For non-business accounts, this field will return empty.
",
            "inline": undefined,
            "properties": {
              "end_date": {
                "docs": "The date when obligation ended.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "expiration": {
                "docs": "The deadline to fulfill the obligation, as imposed by the tax authority.
",
                "type": "optional<string>",
              },
              "initial_date": {
                "docs": "The date when obligation started.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "obligation": {
                "docs": "The description of the obligation.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of tax status objects.",
                "type": "optional<list<TaxStatusPaginatedResponseResultsItem>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusPaginatedResponseResultsItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "TaxStatusSat",
              },
              {
                "type": "TaxStatusDian",
              },
            ],
          },
          "TaxStatusRegimensDian": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "end_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "initial_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "regimen": {
                "docs": "The description of the regimen.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusRegimensSat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "end_date": {
                "docs": "The end date of the regimen.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "initial_date": {
                "docs": "The start date of the regimen.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "regimen": {
                "docs": "The description of the regimen.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusSat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "address": "optional<TaxStatusAddressSat>",
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "datetime",
              },
              "digital_stamp": {
                "docs": "The validation certificate of the document.",
                "type": "optional<string>",
              },
              "digital_stamp_chain": {
                "docs": "A data chain containing the basic structure of a fiscal digital check. For Mexico, this is the *Comprobante Fiscal Digital por Internet* (CFDI).
",
                "type": "optional<string>",
              },
              "economic_activity": {
                "docs": "A list of economic activity objects.
",
                "type": "optional<list<TaxStatusEconomicActivitySat>>",
              },
              "id": {
                "docs": "Unique identifier created by Belvo used to reference the current Tax Status.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id_cif": {
                "docs": "The taxpayer's *C√©dula de Identificaci√≥n Fiscal* (CIF) ID.
",
                "type": "optional<string>",
              },
              "link": {
                "docs": "The `link.id` that the tax status is associated with.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "obligations": {
                "docs": "Details regarding a business's obligations.

‚ÑπÔ∏è For non-business accounts, this field will return empty.
",
                "type": "optional<list<TaxStatusObligationsSat>>",
              },
              "official_name": {
                "docs": "The name of the person or business.",
                "type": "optional<string>",
              },
              "pdf": {
                "docs": "Tax status PDF as a binary string.",
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "place_and_date_of_issuance": {
                "docs": "The place and date of that the tax status was issued.",
                "type": "optional<string>",
              },
              "regimes": {
                "docs": "A list of regimen objects.
",
                "type": "optional<list<TaxStatusRegimensSat>>",
              },
              "tax_payer_information": "optional<TaxStatusTaxPayerInformationSat>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusTaxPayerInformationDian": {
            "docs": "Details regarding the taxpayer.",
            "inline": undefined,
            "properties": {
              "commercial_name": {
                "docs": "The name of the business designated for consumers and the general public.

**Note**: Only applicable for businesses.
",
                "type": "optional<string>",
              },
              "curp": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
              },
              "email": {
                "docs": "Contact email address for the tax payer.",
                "type": "optional<string>",
              },
              "first_last_name": {
                "docs": "The tax payers's first last name.",
                "type": "optional<string>",
              },
              "last_status_change_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": {
                "docs": "The tax payers's first name.",
                "type": "optional<string>",
              },
              "phone": {
                "docs": "Contact phone number for the tax payer.",
                "type": "optional<string>",
              },
              "rfc": {
                "docs": "The tax payers's identification number (NIT).
",
                "type": "optional<string>",
              },
              "second_last_name": {
                "docs": "The tax payers's second last name.",
                "type": "optional<string>",
              },
              "social_name": {
                "docs": "The unique and exclusive name within the national territory that companies receive for legal or administrative purposes.
**Note**: Only applicable for businesses.",
                "type": "optional<string>",
              },
              "start_operations_date": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "status_padron": {
                "docs": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaxStatusTaxPayerInformationSat": {
            "docs": "Details regarding the taxpayer.",
            "inline": undefined,
            "properties": {
              "commercial_name": {
                "docs": "The name of the business designated for consumers and the general public.

**Note**: Only applicable for businesses.
",
                "type": "optional<string>",
              },
              "curp": {
                "docs": "The tax payers's *Clave √önica de Registro de Poblaci√≥n* (CURP) number.
",
                "type": "optional<string>",
              },
              "email": {
                "docs": "Contact email address for the tax payer.",
                "type": "optional<string>",
              },
              "first_last_name": {
                "docs": "The tax payers's first last name.",
                "type": "optional<string>",
              },
              "last_status_change_date": {
                "docs": "Date when `status_padron` was most recently updated.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": {
                "docs": "The tax payers's first name.",
                "type": "optional<string>",
              },
              "phone": {
                "docs": "Contact phone number for the tax payer.",
                "type": "optional<string>",
              },
              "rfc": {
                "docs": "The tax payers's identification number (For Mexico, this is the RFC).
",
                "type": "optional<string>",
              },
              "second_last_name": {
                "docs": "The tax payers's second last name.",
                "type": "optional<string>",
              },
              "social_name": {
                "docs": "The unique and exclusive name within the national territory that companies receive for legal or administrative purposes.
**Note**: Only applicable for businesses.",
                "type": "optional<string>",
              },
              "start_operations_date": {
                "docs": "Date when the tax payer commenced taxable commercial activities.
",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "status_padron": {
                "docs": "Status of the taxpayer in the Federal Register of Taxpayers (RFC). Can be `ACTIVO` or `INACTIVO`.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TokenRequiredResponse": {
            "docs": "MFA Token Required",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`token_required`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#428-token_required" target="_blank">428 token_required errors</a>.",
                "type": "optional<string>",
              },
              "expiry": {
                "docs": "Session duration time in seconds.",
                "type": "optional<integer>",
              },
              "link": {
                "docs": "Unique identifier created by Belvo, used to reference the current Link.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "message": {
                "docs": "A short description of the error. 

For `token_required` errors, the description is:
  
  - `A MFA token is required by the institution to login`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
              "session": {
                "docs": "A 32-character unique ID of the login session (matching a regex pattern of: `[a-f0-9]{32}`).",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
              "token_generation_data": "optional<TokenRequiredResponseTokenGenerationData>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TokenRequiredResponseTokenGenerationData": {
            "docs": "Details on how to generate the token.",
            "inline": undefined,
            "properties": {
              "expects_user_input": {
                "default": true,
                "docs": "Indicates whether the user needs to provide input in order to complete the authentication.
When set to `false`, your user may need to:
- confirm the login on another device - scan a QR code
You will still need to make a PATCH call to complete the request.",
                "type": "optional<boolean>",
              },
              "instructions": {
                "docs": "Instructions for token generation.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "Type of the data to generate the token (QR code, numeric challenge).",
                "type": "optional<string>",
              },
              "value": {
                "docs": "Value to use to generate the token.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TooManySessionsError": {
            "docs": "This error occurs when:

  - a user is attempting to log in to their institution via Belvo while also already being logged in to their institution on a web browser or mobile app.
  - you make a request for information while Belvo is scraping data from the institution for that user.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`too_many_sessions`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-too_many_sessions" target="_blank">400 too_many_sessions errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `too_many_sessions` errors, the description is:
  
  - `Impossible to login, a session is already opened with the institution for these credentials`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Transaction": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account": "optional<Account>",
              "accounting_date": {
                "docs": "The ISO timestamp when the transaction was processed and accounted for by the institution.",
                "type": "optional<datetime>",
              },
              "amount": {
                "docs": "The transaction amount.
‚ÑπÔ∏è The amount displayed is always positive as we indicate the direction of the transaction in the `type` parameter.
",
                "type": "optional<float>",
              },
              "balance": {
                "docs": "The balance at the end of the transaction.",
                "type": "optional<float>",
              },
              "category": "optional<EnumTransactionCategory>",
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "created_at": {
                "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
                "type": "optional<datetime>",
              },
              "credit_card_data": "optional<TransactionCreditCardData>",
              "currency": {
                "docs": "The three-letter currency code (ISO-4217).
",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 3,
                  "minLength": undefined,
                  "pattern": "^[A-Z]{3}$",
                },
              },
              "description": {
                "docs": "The description of transaction provided by the institution. Usually this is the text that the end user sees in the online platform.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Belvo's unique ID for the transaction.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "internal_identification": {
                "docs": "The institution's internal identification for the transaction.
",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-]{0,99}$",
                },
              },
              "merchant": "optional<TransactionMerchantData>",
              "observations": {
                "docs": "Additional observations provided by the institution on the transaction.",
                "type": "optional<string>",
              },
              "reference": {
                "docs": "The reference number of the transaction, provided by the bank.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 128,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "status": "optional<EnumTransactionStatus>",
              "subcategory": "optional<EnumTransactionSubcategory>",
              "type": "optional<EnumTransactionType>",
              "value_date": {
                "docs": "The date when the transaction occurred, in `YYYY-MM-DD` format.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionBankAccountBodyPse": {
            "docs": "Information about the payer's bank account. Belvo returns the bank account ID when the account is already saved in the Belvo database.",
            "inline": undefined,
            "properties": {
              "bank_account": {
                "docs": "Belvo's unique identifier for the payer‚Äôs bank account.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionBankAccountOfpi": {
            "docs": "Object containing the payer's bank account information. For OFPI, this field will return an empty object.",
            "type": "map<string, unknown>",
          },
          "TransactionBankAccountPse": {
            "discriminated": false,
            "docs": "Object containing the payer's bank account information.",
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "TransactionBankAccountBodyPse",
              },
              {
                "type": "BankAccountInformationPse",
              },
            ],
          },
          "TransactionCreditCardData": {
            "docs": "Additional data provided by the institution for credit card transactions.",
            "inline": undefined,
            "properties": {
              "bill_amount": {
                "docs": "The aggregate bill amount, as of `collected_at`.",
                "type": "optional<float>",
              },
              "bill_name": {
                "docs": "The title of the monthly credit card bill the transaction belongs to. The format of the returned value is institution specific, however, some common examples are:

- diciembre-2021
- dec-2021
- dec-21
",
                "type": "optional<string>",
              },
              "bill_status": "optional<EnumTransactionBillStatus>",
              "collected_at": {
                "docs": "The ISO-8601 timestamp when the data point was collected.",
                "type": "optional<datetime>",
              },
              "previous_bill_total": {
                "docs": "The total amount of the previous month's bill, if available.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionMerchantData": {
            "docs": "Additional data regarding the merchant involved in the transaction.
We only return merchant information for new transactions made from *checking* or *credit card* accounts.
> **Get merchant information**
 We retrieve the merchant information for a transaction as part of our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) product, turning raw data into actionable insights. To enable this product, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.
",
            "inline": undefined,
            "properties": {
              "logo": {
                "docs": "The URL to the merchant's logo.",
                "type": "optional<string>",
              },
              "merchant_name": {
                "docs": "The name of the merchant.",
                "type": "optional<string>",
              },
              "website": {
                "docs": "The URL to the merchant's website.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionsPaginatedResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The total number of results in your Belvo account.",
                "type": "optional<integer>",
              },
              "next": {
                "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.

In our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).
",
                "type": "optional<string>",
              },
              "previous": {
                "docs": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
                "type": "optional<string>",
              },
              "results": {
                "docs": "Array of transaction objects.",
                "type": "optional<list<Transaction>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionsRequest": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account": {
                "docs": "If provided, we return transactions only from this account.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "date_from": {
                "docs": "The date from which you want to start getting transactions for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                },
              },
              "date_to": {
                "docs": "The date you want to stop getting transactions for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                },
              },
              "link": {
                "docs": "The `link.id` that you want to get information for.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "save_data": {
                "default": true,
                "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                "type": "optional<boolean>",
              },
              "token": {
                "docs": "The OTP token generated by the bank.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UnauthorizedErrorBody": {
            "docs": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`authentication_failed`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#401-authentication_failed" target="_blank">401 authentication_failed errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `authentication_failed` errors, the description is:

  - `Invalid Secret Keys`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UnconfirmedLinkError": {
            "docs": "This error occurs when you try to access a link that was paused previously (and as such is not active now).
A Link's status is set to `unconfirmed_link` when your user has not completed the Link creation process successfully (for example, they might not provide a valid MFA token).",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`unconfirmed_link`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-unconfirmed_link" target="_blank">400 unconfirmed_link errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `unconfirmed_link` errors, the description is:
  
  - `The link creation has not been completed yet`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UnexpectedError": {
            "docs": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`unexpected_error`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#500-unexpected_error" target="_blank">500 unexpected_error errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `unexpected_error` errors, the description is:
  
  - `Belvo is unable to process the request due to an internal system issue or to an unsupported response from an institution`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UnsupportedOperationError": {
            "docs": "This error occurs when you try to access some data operation that Belvo does not support for an institution. For example, trying to access the Balances resource for fiscal institutions.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`unsupported_operation`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-unsupported_operation" target="_blank">400 unsupported_operation errors</a>.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `unsupported_operation` errors, the description is:
  
  - `The resource you are trying to access is not supported by this institution`.",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ValidationError": {
            "docs": "This error occurs when you try to resume a request session that has already expired. This is usually because the user took too long to provide their authentication token.",
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "A unique error code (`null`, `does_not_exist`, `required`) that allows you to classify and handle the error programmatically.

‚ÑπÔ∏è Check our DevPortal for more information on how to handle:
  - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-blank" target="_blank">400 blank errors</a>
  - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-null" target="_blank">400 null errors</a>
  - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-does_not_exist" target="_blank">400 does_not_exist errors</a>
  - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-required" target="_blank">400 required errors</a>",
                "type": "optional<string>",
              },
              "field": {
                "docs": "Name of the field where the error was encountered.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "A short description of the error. 

For `session_expired` errors, the description can be (among others):
  
  - `This field is required.`
  - `Object with name=narnia does not exist.`
  - `This field may not be null.`
  - `This field may not be blank.`",
                "type": "optional<string>",
              },
              "request_id": {
                "docs": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-f0-9]{32}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "errors:
  UnauthorizedError:
    status-code: 401
    type: list<UnauthorizedErrorBody>
    docs: Authentication to Belvo API failed
    examples:
      - value:
          - code: authentication_failed
            message: Invalid Secret Keys
            request_id: 9e7b283c6efa449c9c028a16b5c249fb
  BadRequestError:
    status-code: 400
    type: list<BadRequestErrorBodyItem>
    docs: 400 Bad Request.
    examples:
      - value:
          - code: invalid_link
            message: >-
              This link doesn't have stored credentials hence it can't be
              switched to recurrent mode"
            request_id: 9e7b283c6efa449c9c028a16b5c249fb
  PreconditionError:
    status-code: 428
    type: list<TokenRequiredResponse>
    docs: MFA Token Required
    examples:
      - value:
          - code: token_required
            message: A MFA token is required by the institution to login
            request_id: 8c7b283c6efa449c9c028a16b5c249fa
            session: 2675b703b9d4451f8d4861a3eee54449
            expiry: 9600
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
  InternalServerError:
    status-code: 500
    type: list<UnexpectedError>
    docs: Unexpected Error
    examples:
      - value:
          - code: unexpected_error
            message: >-
              Belvo is unable to process the request due to an internal system
              issue or to an unsupported response from an institution
            request_id: 9e7b283c6efa449c9c028a16b5c249fb
  NotFoundError:
    status-code: 404
    type: list<NotFoundErrorBody>
    docs: Not Found
    examples:
      - value:
          - code: not_found
            message: Not found
            request_id: 9e7b283c6efa449c9c028a16b5c249fb
  RequestTimeoutError:
    status-code: 408
    type: list<RequestTimeoutErrorBody>
    docs: Request Timeout
    examples:
      - value:
          - code: request_timeout
            message: >-
              The request timed out, you can retry asking for less data by
              changing your query parameters
            request_id: 9e7b283c6efa449c9c028a16b5c249fb
  ForbiddenError:
    status-code: 403
    type: list<AccessToResourceDenied>
    docs: Access to Belvo API denied
    examples:
      - value:
          - code: access_to_resource_denied
            message: You don't have access to this resource.
            request_id: 9e7b283c6efa449c9c028a16b5c249fb
types:
  BadRequestErrorBodyItem:
    discriminated: false
    union:
      - type: InvalidAccessMode
      - type: TooManySessionsError
      - type: LoginError
      - type: SessionExpiredError
      - type: ValidationError
      - type: InstitutionDownError
      - type: InstitutionUnavailableError
      - type: InstitutionInactiveError
      - type: UnsupportedOperationError
      - type: InvalidLinkError
      - type: UnconfirmedLinkError
    source:
      openapi: ../openapi.yml
  EnumLinkAccessModeResponse:
    type: optional<string>
    docs: >
      The link type.

      For more information, see our
      [Links](https://developers.belvo.com/docs/links-and-institutions#links)
      article.

      We return one of the following enum values:
        - `single`
        - `recurrent`
        - `null`
  EnumLinkStatus:
    enum:
      - valid
      - invalid
      - unconfirmed
      - token_required
    docs: >
      The current status of the link. For more information, see our
      [Link](https://developers.belvo.com/docs/links-and-institutions#links)
      article in the devportal.

      We return one of the following values:
        - `valid`
        - `invalid`
        - `unconfirmed`
        - `token_required`
    source:
      openapi: ../openapi.yml
  EnumLinkRefreshRate:
    type: optional<string>
    docs: >
      The update refresh rate for the recurrent link. For more information,
      check out our [recurrent link
      documentation](https://developers.belvo.com/docs/links-and-institutions#recurrent-links)
      in our DevPortal.

      We return one of the following enum values:
        - `6h`
        - `12h`
        - `24h`
        - `7d` (default)
        - `30d` (once a month)
        - `null` (for single links)
    default: 7d
  Link:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique ID for the current Link.
        validation:
          format: uuid
      institution:
        type: optional<string>
        docs: |
          Belvo's name for the institution.
      access_mode: optional<EnumLinkAccessModeResponse>
      last_accessed_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of Belvo's most recent successful access to the
          institution for the given link.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      external_id:
        type: optional<string>
        docs: >-
          The `external_id` you provided as an additional identifier for the
          link. For more information, see our [Link creation
          article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).
        validation:
          minLength: 3
      institution_user_id:
        type: optional<string>
        docs: >-
          <div style="background-color:#f4f6f8; border-left: 6px solid
          #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px;
          margin-right: 25px"> <strong>Info:</strong> Only applicable for links
          created <b>after 08-02-2022</b>. </div>


          A unique 44-character string that can be used to identify a user at a
          given institution.


          üìö Check out our [Avoiding duplicated
          links](https://developers.belvo.com/docs/link-creation-best-practices#avoiding-duplicated-links)
          DevPortal article for more information and tips on how to use it.
        validation:
          pattern: '[A-Za-z0-9\-=_]{44}'
      status: optional<EnumLinkStatus>
      created_by:
        type: optional<string>
        docs: The unique ID for the user that created this link.
        validation:
          format: uuid
      refresh_rate: optional<EnumLinkRefreshRate>
    source:
      openapi: ../openapi.yml
  PaginatedResponseLink:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results: optional<list<Link>>
    source:
      openapi: ../openapi.yml
  UnauthorizedErrorBody:
    docs: >-
      This error occurs when you try to make an API call using incorrect Belvo
      API credentials (either your secret key or secret password, or both, are
      incorrect).
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`authentication_failed`) that allows you to
          classify and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#401-authentication_failed"
          target="_blank">401 authentication_failed errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `authentication_failed` errors, the description is:

            - `Invalid Secret Keys`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  EnumLinkAccessModeRequest:
    enum:
      - single
      - recurrent
    docs: >
      The type of link to create.


      - Use `single` to do ad hoc one-time POST requests for accounts, owners,
      and transactions.

      - Use `recurrent` to have Belvo access information on a recurrent basis so
      you always have fresh account, owner, balance, and transaction data.


      For more information, see our
      [Links](https://developers.belvo.com/docs/links-and-institutions#links)
      article.
    default: recurrent
    source:
      openapi: ../openapi.yml
  TooManySessionsError:
    docs: |-
      This error occurs when:

        - a user is attempting to log in to their institution via Belvo while also already being logged in to their institution on a web browser or mobile app.
        - you make a request for information while Belvo is scraping data from the institution for that user.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`too_many_sessions`) that allows you to classify
          and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-too_many_sessions"
          target="_blank">400 too_many_sessions errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `too_many_sessions` errors, the description is:
            
            - `Impossible to login, a session is already opened with the institution for these credentials`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  LoginError:
    docs: |-
      This error can occur when:

        - the credentials that your user provides are incorrect or missing.
        - the MFA token your user provides is not supported by Belvo.
        - there is an issue with the institution that prevents logins.
        - the user's account is either locked or the user does not have permission to access their internet banking.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`login_error`) that allows you to classify and
          handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-login_error"
          target="_blank">400 login_error errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `login_error` errors, the description can be one of the following:

            - `Invalid credentials provided to login to the institution`
            - `A MFA token is required by the institution, but it's not supported yet by Belvo.`
            - `Impossible to login, something unexpected happened while logging into the institution. Try again later.`
            - `Login not attempted due to invalid credentials`
            - `Missing credentials to login to the institution`
            - `The user account access was forbidden by the institution`
            - `The user account is locked, user needs to contact the institution to unlock it`
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  SessionExpiredError:
    docs: >-
      This error occurs when you try to resume a request session that has
      already expired. This is usually because the user took too long to provide
      their authentication token.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`session_expired`) that allows you to classify
          and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-session_expired"
          target="_blank">400 session_expired errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `session_expired` errors, the description is:
            
            - `The session you are trying to resume has expired, please start again from register/retrieve endpoint`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  ValidationError:
    docs: >-
      This error occurs when you try to resume a request session that has
      already expired. This is usually because the user took too long to provide
      their authentication token.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`null`, `does_not_exist`, `required`) that allows
          you to classify and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle:
            - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-blank" target="_blank">400 blank errors</a>
            - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-null" target="_blank">400 null errors</a>
            - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-does_not_exist" target="_blank">400 does_not_exist errors</a>
            - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-required" target="_blank">400 required errors</a>
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `session_expired` errors, the description can be (among others):
            
            - `This field is required.`
            - `Object with name=narnia does not exist.`
            - `This field may not be null.`
            - `This field may not be blank.`
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
      field:
        type: optional<string>
        docs: Name of the field where the error was encountered.
    source:
      openapi: ../openapi.yml
  InstitutionDownError:
    docs: >-
      This error occurs when the institution's website that you're trying to
      access is down due to maintenance or other issues, which means Belvo is
      unable to create new links or retrieve new data.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`institution_down`) that allows you to classify
          and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_down"
          target="_blank">400 institution_down errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `institution_down` errors, the description is:
            
            - `The financial institution is down, try again later`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  InstitutionUnavailableError:
    docs: >-
      This error occurs when the institution's website that you're trying to
      access is down due to maintenance or other issues, which means Belvo is
      unable to create new links or retrieve new data.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`institution_unavailable`) that allows you to
          classify and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_unavailable"
          target="_blank">400 institution_unavailable errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error.

          For `institution_unavailable` errors, the description is:
            
            - `The financial institution is unavailable`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  InstitutionInactiveError:
    docs: >-
      This error occurs when we (Belvo) have deactivated the institution in our
      API.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`institution_inactive`) that allows you to
          classify and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_inactive"
          target="_blank">400 institution_inactive errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `institution_inactive` errors, the description is:
            
            - `The institution has been temporarily deactivated`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  UnsupportedOperationError:
    docs: >-
      This error occurs when you try to access some data operation that Belvo
      does not support for an institution. For example, trying to access the
      Balances resource for fiscal institutions.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`unsupported_operation`) that allows you to
          classify and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-unsupported_operation"
          target="_blank">400 unsupported_operation errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `unsupported_operation` errors, the description is:
            
            - `The resource you are trying to access is not supported by this institution`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  InvalidLinkError:
    docs: >-
      This error occurs when you try to access an account but the user
      credentials are no longer valid, prompting an error from the institution.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`invalid_link`) that allows you to classify and
          handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_link"
          target="_blank">400 invalid_link errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `invalid_link` errors, the description is:
            
            - `The link has been invalidated. You may need to update link credentials`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  UnconfirmedLinkError:
    docs: >-
      This error occurs when you try to access a link that was paused previously
      (and as such is not active now).

      A Link's status is set to `unconfirmed_link` when your user has not
      completed the Link creation process successfully (for example, they might
      not provide a valid MFA token).
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`unconfirmed_link`) that allows you to classify
          and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-unconfirmed_link"
          target="_blank">400 unconfirmed_link errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `unconfirmed_link` errors, the description is:
            
            - `The link creation has not been completed yet`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  TokenRequiredResponseTokenGenerationData:
    docs: Details on how to generate the token.
    properties:
      instructions:
        type: optional<string>
        docs: Instructions for token generation.
      type:
        type: optional<string>
        docs: Type of the data to generate the token (QR code, numeric challenge).
      value:
        type: optional<string>
        docs: Value to use to generate the token.
      expects_user_input:
        type: optional<boolean>
        docs: >-
          Indicates whether the user needs to provide input in order to complete
          the authentication.

          When set to `false`, your user may need to:

          - confirm the login on another device - scan a QR code

          You will still need to make a PATCH call to complete the request.
        default: true
    source:
      openapi: ../openapi.yml
  TokenRequiredResponse:
    docs: MFA Token Required
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`token_required`) that allows you to classify and
          handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#428-token_required"
          target="_blank">428 token_required errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `token_required` errors, the description is:
            
            - `A MFA token is required by the institution to login`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
      session:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the login session (matching a regex
          pattern of: `[a-f0-9]{32}`).
        validation:
          pattern: '[a-f0-9]{32}'
      expiry:
        type: optional<integer>
        docs: Session duration time in seconds.
      link:
        type: optional<string>
        docs: >-
          Unique identifier created by Belvo, used to reference the current
          Link.
        validation:
          format: uuid
      token_generation_data: optional<TokenRequiredResponseTokenGenerationData>
    source:
      openapi: ../openapi.yml
  UnexpectedError:
    docs: >-
      This error occurs when we (Belvo) have encountered an internal system
      error (sorry about that) or due to an unsupported response from the
      institution.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`unexpected_error`) that allows you to classify
          and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#500-unexpected_error"
          target="_blank">500 unexpected_error errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `unexpected_error` errors, the description is:
            
            - `Belvo is unable to process the request due to an internal system issue or to an unsupported response from an institution`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  PatchBodyWithoutSaveData:
    docs: A JSON object containing a session UUID and a MFA token
    properties:
      session:
        type: string
        docs: >-
          The session you want to resume. You need to use the `session` value
          that is provided in the 428 Token Required response that you receive
          after you make your POST request.
        validation:
          pattern: '[a-f0-9]{32}'
      token:
        type: optional<string>
        docs: >-
          The MFA token generated by the institution and required to continue a
          session.
      link:
        type: string
        docs: >-
          The `link.id` you want to resume. Must be the same `link.id` as the
          one you receive in the 428 Token Required response that contains the
          `session` ID.
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  NotFoundErrorBody:
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`not_found`) that allows you to classify and
          handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#404-not_found"
          target="_blank">404 not_found errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `not_found` errors, the description is:
            
            - `Not found`
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  InvalidAccessMode:
    docs: >-
      This error occurs when you try to update a link from single to recurrent,
      but there are no login credentials stored for the user.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`invalid_access_mode_switch`) that allows you to
          classify and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_access_mode_switch"
          target="_blank">400 invalid_access_mode_switch errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `invalid_access_mode_switch` errors, the description is:
            
            - `This link doesn't have stored credentials hence it can't be switched to recurrent mode"`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  EnumInstitutionType:
    enum:
      - bank
      - fiscal
      - employment
    docs: |
      The type of institution. We return one of the following values:

        - `bank`
        - `fiscal`
        - `employment`
    source:
      openapi: ../openapi.yml
  InstitutionAccount:
    docs: Details regarding the institution.
    properties:
      name:
        type: optional<string>
        docs: >-
          The name of the institution, as designated by Belvo.

          Please see our
          [Institutions](https://developers.belvo.com/docs/institution)
          DevPortal article for a detailed list of institution names.
      type: optional<EnumInstitutionType>
    source:
      openapi: ../openapi.yml
  EnumAccountCategory:
    type: optional<string>
    docs: |
      The type of account.
      We return one of the following enum values:
        - `CHECKING_ACCOUNT`
        - `CREDIT_CARD`
        - `INVESTMENT_ACCOUNT`
        - `LOAN_ACCOUNT`
        - `PENSION_FUND_ACCOUNT`
        - `RECEIVABLES_ACCOUNT`
        - `SAVINGS_ACCOUNT`
        - `UNCATEGORIZED`
        - `null`
  AccountsBalance:
    docs: |
      Details regarding the current and available balances for the account.
    properties:
      current:
        type: optional<float>
        docs: >-
          The current balance is calculated differently according to the type of
          account.


          - **üí∞ Checking and saving accounts**:


          The user's account balance at the `collected_at` timestamp.

          - **üí≥ Credit cards**:


          The amount the user has spent in the current card billing period (see
          `credit_data.cutting_date` for information on when the current billing
          period finishes).

          - **üè° Loan accounts**:


          The amount remaining to pay on the users's loan (same as
          `loan_data.outstanding_balance`).
      available:
        type: optional<float>
        docs: >-
          The balance that the account owner can use.

          - **üí∞ Checking and saving accounts**:


          The available balance may be different to the `current` balance due to
          pending transactions.

          - **üí≥ Credit cards**:


          The credit amount the user still has available for the current period.
          The `available` balance may be different to the `current` balance due
          to pending transactions or future instalments.

          - **üè° Loan accounts**:


          The present value required to pay off the loan, as provided by the
          institution.


          **Note:** If the institution does not provide this value, we return
          `null`.
    source:
      openapi: ../openapi.yml
  AccountsCreditData:
    docs: The credit options associated with this account.
    properties:
      credit_limit:
        type: optional<float>
        docs: The maximum amount of credit the owner can receive.
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      cutting_date:
        type: optional<string>
        docs: The closing date of the credit period.
      next_payment_date:
        type: optional<string>
        docs: The due date for the next payment (`YYYY-MM-DD`).
      minimum_payment:
        type: optional<float>
        docs: The minimum amount to be paid on the `next_payment_date`.
      no_interest_payment:
        type: optional<float>
        docs: The minimum amount required to pay to avoid generating interest.
      interest_rate:
        type: optional<float>
        docs: The annualized interest rate of the credit.
      end_date:
        type: optional<string>
        docs: |
          *This field has been deprecated.*
        availability: deprecated
      monthly_payment:
        type: optional<double>
        docs: |
          *This field has been deprecated.*

          *The recurrent monthly payment, if applicable.*
        availability: deprecated
      last_payment_date:
        type: optional<string>
        docs: |
          *This field has been deprecated.*


          *The date when the last credit payment was made.*
        availability: deprecated
    source:
      openapi: ../openapi.yml
  EnumLoanDataInterestRateType:
    enum:
      - MONTHLY
      - YEARLY
    docs: >
      The period that the interest is applied to the loan. We return one of the
      following values:

        - `MONTHLY`
        - `YEARLY`
    source:
      openapi: ../openapi.yml
  AccountsLoanDataInterestRate:
    docs: Breakdown of the interest applied to the loan.
    properties:
      name:
        type: optional<string>
        docs: The name of the type of interest rate applied to the loan.
      type: optional<EnumLoanDataInterestRateType>
      value:
        type: optional<float>
        docs: The interest rate (in percent or currency value).
    source:
      openapi: ../openapi.yml
  EnumLoanDataFeeType:
    enum:
      - OPERATION_FEE
      - INSURANCE_FEE
      - OTHERS
    docs: |
      The type of fee. We return one of the following values:

        - `OPERATION_FEE`
        - `INSURANCE_FEE`
        - `OTHERS`
    source:
      openapi: ../openapi.yml
  AccountsLoanDataFees:
    docs: Breakdown of the fees applied to the loan.
    properties:
      type: EnumLoanDataFeeType
      value:
        type: float
        docs: |
          The total value of the fee. Same currency of the Loan.
    source:
      openapi: ../openapi.yml
  AccountsLoanData:
    docs: The loan options associated with this account.
    properties:
      collected_at:
        type: datetime
        docs: The ISO-8601 timestamp when the data point was collected.
      contract_amount:
        type: optional<float>
        docs: >-
          The initial total loan amount, calculated by the institution, when the
          contract was signed. This amount includes the principal + interest +
          taxes + fees.
      principal:
        type: optional<float>
        docs: Total amount of the loan (the amount the user receives).
      loan_type:
        type: optional<string>
        docs: The type of the loan, according to the institution.
      payment_day:
        type: optional<string>
        docs: >-
          The day of the month by which the owner needs to pay the loan
          (`YYYY-MM-DD`).
      outstanding_principal:
        type: optional<float>
        docs: >
          Outstanding loan amount, that is, how much remains to pay on the
          principal (not including interest).
      outstanding_balance:
        type: optional<float>
        docs: The amount remaining to pay in total, including interest.
      monthly_payment:
        type: optional<float>
        docs: The recurrent monthly payment, if applicable.
      interest_rates:
        type: optional<list<AccountsLoanDataInterestRate>>
        docs: Breakdown of the interest applied to the loan.
      fees:
        type: optional<list<optional<AccountsLoanDataFees>>>
        docs: Breakdown of the fees applied to the loan.
      number_of_installments_total:
        type: optional<integer>
        docs: The total number of installments required to pay the loan.
      number_of_installments_outstanding:
        type: optional<integer>
        docs: The number of installments left to pay.
      contract_start_date:
        type: optional<string>
        docs: The date when the loan contract was signed (`YYYY-MM-DD`).
        validation:
          format: date
      contract_end_date:
        type: optional<string>
        docs: The date when the loan is expected to be completed.
        validation:
          format: date
      contract_number:
        type: optional<string>
        docs: The contract number of the loan, as given by the institution.
      credit_limit:
        type: optional<double>
        docs: |
          This field has been deprecated.

          Please see `principal` instead.
        availability: deprecated
      last_period_balance:
        type: optional<double>
        docs: |
          This field has been deprecated.

          Please see `outstanding_balance` instead.
        availability: deprecated
      interest_rate:
        type: optional<double>
        docs: |
          This field has been deprecated.

          Please see the `interest_rates` object instead.
        availability: deprecated
      limit_day:
        type: optional<string>
        docs: |
          This field has been deprecated.

          Please see `payment_day` instead.
        availability: deprecated
      cutting_day:
        type: optional<string>
        docs: |
          This field has been deprecated.

          The closing day of the month for the loan.
        availability: deprecated
      cutting_date:
        type: optional<string>
        docs: |
          This field has been deprecated.

          The closing date of the loan period.
        availability: deprecated
      last_payment_date:
        type: optional<string>
        docs: |
          This field has been deprecated.

          The date when the last loan payment was made.
        availability: deprecated
      no_interest_payment:
        type: optional<double>
        docs: |
          This field has been deprecated.

          The minimum amount required to pay to avoid generating interest.
        availability: deprecated
    source:
      openapi: ../openapi.yml
  AccountsFundsDataPublicIdentifications:
    properties:
      name:
        type: string
        docs: The type of identification number for the fund.
      value:
        type: optional<string>
        docs: The fund's identification number.
    source:
      openapi: ../openapi.yml
  AccountsFundsData:
    properties:
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      name:
        type: optional<string>
        docs: The pension fund name.
      type:
        type: optional<string>
        docs: Type of pension fund.
      public_identifications:
        type: optional<list<AccountsFundsDataPublicIdentifications>>
        docs: The fund's public IDs.
      balance:
        type: optional<float>
        docs: The amount in the fund.
      percentage:
        type: optional<float>
        docs: >-
          How much this fund, as a percentage, contributes to the pension
          account's total.
    source:
      openapi: ../openapi.yml
  AccountsReceivablesData:
    docs: Additional details regarding the receivables account, if applicable.
    properties:
      current:
        type: optional<float>
        docs: The total sum of all receivables (`available` + `anticipated`)
      available:
        type: optional<float>
        docs: >-
          The amount that the owner of the account will receive according to an
          established date.
      anticipated:
        type: optional<float>
        docs: >-
          The amount that the owner of the account received earlier than
          contracted.
      collected_at:
        type: datetime
        docs: The ISO-8601 timestamp when the data point was collected.
    source:
      openapi: ../openapi.yml
  Account:
    docs: >
      Details regarding the account.


      **Note**: For our recurring expenses resource, this account relates to the
      account that was analyzed to generate the recurring expenses report.
    properties:
      id:
        type: optional<string>
        docs: >-
          The unique identifier created by Belvo used to reference the current
          account.
        validation:
          format: uuid
      link:
        type: optional<string>
        docs: The `link.id` the account belongs to.
      institution: optional<InstitutionAccount>
      collected_at:
        type: datetime
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      category: optional<EnumAccountCategory>
      balance_type:
        type: optional<string>
        docs: >
          Indicates whether this account is either an `ASSET` or a `LIABILITY`.
          You can consider the balance of an `ASSET` as being positive, while
          the balance of a `LIABILITY` as negative.
      type:
        type: optional<string>
        docs: The account type, as designated by the institution.
      name:
        type: optional<string>
        docs: The account name, as given by the institution.
      number:
        type: optional<string>
        docs: The account number, as designated by the institution.
      balance: AccountsBalance
      currency:
        type: optional<string>
        docs: |-
          The currency of the account. For example:
          - üáßüá∑ BRL (Brazilian Real)
          - üá®üá¥ COP (Colombian Peso)
          - üá≤üáΩ MXN (Mexican Peso)

           Please note that other currencies other than in the list above may be returned.
      public_identification_name:
        type: optional<string>
        docs: >
          The public name for the type of identification. For example:
          `"CLABE"`.


          ‚ÑπÔ∏è For üáßüá∑ Brazilian savings and checking accounts, this field will
          be `AGENCY/ACCOUNT`.
      public_identification_value:
        type: optional<string>
        docs: >
          The value for the `public_identification_name`.


          ‚ÑπÔ∏è For üáßüá∑ Brazilian savings and checking accounts, this field will
          be the agency and bank account number, separated by a slash.

          For example: `0444/45722-0`.
      last_accessed_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of Belvo's most recent successful access to the
          institution for the given link.
      credit_data: optional<AccountsCreditData>
      loan_data: optional<AccountsLoanData>
      funds_data:
        type: optional<list<AccountsFundsData>>
        docs: One or more funds that contribute to the the pension account.
      receivables_data: optional<AccountsReceivablesData>
      bank_product_id:
        type: optional<string>
        docs: |
          *This field has been deprecated.*

          *The institution's product ID for the account type.*
        availability: deprecated
      internal_identification:
        type: optional<string>
        docs: |
          *This field has been deprecated.*

          *The institution's internal identification for the account.*
        availability: deprecated
    source:
      openapi: ../openapi.yml
  AccountsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<optional<Account>>>
        docs: An array of Account objects.
    source:
      openapi: ../openapi.yml
  StandardRequest:
    properties:
      link:
        type: string
        docs: The `link.id` that you want to get information for.
        validation:
          format: uuid
      token:
        type: optional<string>
        docs: The OTP token generated by the bank.
      save_data:
        type: optional<boolean>
        docs: >-
          Indicates whether or not to persist the data in Belvo. By default,
          this is set to `true` and we return a 201 Created response.

          When set to `false`, the data won't be persisted and we return a 200
          OK response.
        default: true
    source:
      openapi: ../openapi.yml
  RequestTimeoutErrorBody:
    docs: >-
      Belvo has a limit regarding the time it takes to log in, retrieve account
      data, and log out. A timeout occurs when there is a very high amount of
      data and everything could not be obtained within the allotted time.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`request_timeout`) that allows you to classify
          and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#408-request_timeout"
          target="_blank">408 request_timeout errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `request_timeout` errors, the description is:
            
            - `The request timed out, you can retry asking for less data by changing your query parameters`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  PatchBody:
    docs: A JSON object containing a session UUID and a MFA token
    properties:
      session:
        type: string
        docs: >-
          The session you want to resume. You need to use the `session` value
          that is provided in the 428 Token Required response that you receive
          after you make your POST request.
        validation:
          pattern: '[a-f0-9]{32}'
      token:
        type: optional<string>
        docs: >-
          The MFA token generated by the institution and required to continue a
          session.
      link:
        type: string
        docs: >-
          The `link.id` you want to resume. Must be the same `link.id` as the
          one you receive in the 428 Token Required response that contains the
          `session` ID.
        validation:
          format: uuid
      save_data:
        type: optional<boolean>
        docs: >-
          Indicates whether or not to persist the data in Belvo. By default,
          this is set to `true` and we return a 201 Created response.

          When set to `false`, the data won't be persisted and we return a 200
          OK response.
        default: true
    source:
      openapi: ../openapi.yml
  TransactionMerchantData:
    docs: >
      Additional data regarding the merchant involved in the transaction.

      We only return merchant information for new transactions made from
      *checking* or *credit card* accounts.

      > **Get merchant information**
       We retrieve the merchant information for a transaction as part of our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) product, turning raw data into actionable insights. To enable this product, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.
    properties:
      logo:
        type: optional<string>
        docs: The URL to the merchant's logo.
      website:
        type: optional<string>
        docs: The URL to the merchant's website.
      merchant_name:
        type: optional<string>
        docs: The name of the merchant.
    source:
      openapi: ../openapi.yml
  EnumTransactionCategory:
    type: optional<string>
    docs: >
      The name of the category to which this transaction belongs.


      > **Get transaction categorization**

      With [Transaction
      categorization](https://developers.belvo.com/docs/banking#categorizing-transactions),
      we clean and categorize transactions for you, turning raw data into
      actionable insights. To enable this feature, just [reach
      out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll
      get right to it.


      We return one of the following enum values:

        - `Bills & Utilities`
        - `Credits & Loans`
        - `Deposits`
        - `Fees & Charges`
        - `Food & Groceries`
        - `Home & Life`
        - `Income & Payments`
        - `Insurance`
        - `Investments & Savings`
        - `Online Platforms & Leisure`
        - `Personal Shopping`
        - `Taxes`
        - `Transfers`
        - `Transport & Travel`
        - `Unknown`*
        - `Withdrawal & ATM`
        - `null`


        \* For clients not using our Transaction Categorization product, we return `null` instead.
  EnumTransactionSubcategory:
    type: optional<string>
    docs: |-
      The transactions subcategory.

        > **Get transaction categorization**
        For clients not using our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions), we return `null` instead. To enable this feature, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.


      We return one of the following enum values:

        - `Electricity & Energy`
        - `Rent`
        - `Telecommunications`
        - `Water`
        - `Auto`
        - `Credit Card`
        - `Instalment`
        - `Interest & Charges`
        - `Mortgage`
        - `Pay Advance`
        - `Personal`
        - `Adjustments`
        - `Bank Fees`
        - `Chargeback`
        - `Refund`
        - `Blocked Balances`
        - `Alimony`
        - `Alcohol & Tobacco`
        - `Bakery & Coffee`
        - `Bars & Nightclubs`
        - `Convenience Store`
        - `Delivery`
        - `Groceries`
        - `Restaurants`
        - `Education`
        - `Gyms & Fitness`
        - `Hair & Beauty`
        - `Health`
        - `Home Decor & Appliances`
        - `Laundry & Dry Cleaning`
        - `Pharmacies`
        - `Professional Services`
        - `Veterinary Services`
        - `Freelance`
        - `Interest`
        - `Retirement`
        - `Salary`
        - `Government`
        - `Home Insurance`
        - `Auto Insurance`
        - `Health & Life Insurance`
        - `Savings`
        - `Fixed income`
        - `Equity`
        - `Investment Funds`
        - `Derivatives`
        - `Cryptocurrencies`
        - `Apps, Software and Cloud Services`
        - `Events, Parks and Museums`
        - `Gambling`
        - `Gaming`
        - `Lottery`
        - `Movie & Audio`
        - `Books & News`
        - `Clothing & Accessories`
        - `Department Store`
        - `Electronics`
        - `E-commerce`
        - `Gifts`
        - `Office Supplies`
        - `Pet Supplies`
        - `Auto Tax & Fees`
        - `Donation`
        - `Government Fees`
        - `Income Tax`
        - `Real Estate Tax & Fees`
        - `Tax Return`
        - `Accommodation`
        - `Auto Expenses`
        - `Auto Rental`
        - `Flights`
        - `Gas`
        - `Mileage Programs`
        - `Parking & Tolls`
        - `Public Transit`
        - `Taxis & Rideshares`
        - `Other`
        - `null`
  EnumTransactionType:
    type: optional<string>
    docs: >
      The direction of the transaction:

      - `INFLOW` indicates money coming into the account.

      - `OUTFLOW` indicates money going out of the account.

      - `null` when no information was present regarding the direction of the
      transaction.
  EnumTransactionStatus:
    type: optional<string>
    docs: |
      The status of the transaction. We return one of the following values:

        - `PENDING`
        - `PROCESSED`
        - `UNCATEGORIZED`
        - `null`
  EnumTransactionBillStatus:
    type: optional<string>
    docs: |-
      The status of the bill that the transaction appears on. Can be one of:

        - `PAID`: The bill has been paid in full.
        - `CLOSED`: The bill has been closed by the institution.
        - `OPEN`: The bill is currently open. (Note: This is the main bill that Belvo retrieves balance data from).
        - `FUTURE`: The bill is pending.
        - `null`: No bill status was identified.
        
      ‚ÑπÔ∏è Note: Some banks consider CLOSED as PAID.
  TransactionCreditCardData:
    docs: Additional data provided by the institution for credit card transactions.
    properties:
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      bill_name:
        type: optional<string>
        docs: >
          The title of the monthly credit card bill the transaction belongs to.
          The format of the returned value is institution specific, however,
          some common examples are:


          - diciembre-2021

          - dec-2021

          - dec-21
      bill_status: optional<EnumTransactionBillStatus>
      bill_amount:
        type: optional<float>
        docs: The aggregate bill amount, as of `collected_at`.
      previous_bill_total:
        type: optional<string>
        docs: The total amount of the previous month's bill, if available.
    source:
      openapi: ../openapi.yml
  Transaction:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique ID for the transaction.
        validation:
          format: uuid
      internal_identification:
        type: optional<string>
        docs: |
          The institution's internal identification for the transaction.
        validation:
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9-]{0,99}$
          minLength: 1
          maxLength: 100
      account: optional<Account>
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      value_date:
        type: optional<string>
        docs: The date when the transaction occurred, in `YYYY-MM-DD` format.
        validation:
          format: date
          pattern: ^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$
      accounting_date:
        type: optional<datetime>
        docs: >-
          The ISO timestamp when the transaction was processed and accounted for
          by the institution.
      amount:
        type: optional<float>
        docs: >
          The transaction amount.

          ‚ÑπÔ∏è The amount displayed is always positive as we indicate the
          direction of the transaction in the `type` parameter.
      balance:
        type: optional<float>
        docs: The balance at the end of the transaction.
      currency:
        type: optional<string>
        docs: |
          The three-letter currency code (ISO-4217).
        validation:
          pattern: ^[A-Z]{3}$
          maxLength: 3
      description:
        type: optional<string>
        docs: >-
          The description of transaction provided by the institution. Usually
          this is the text that the end user sees in the online platform.
      observations:
        type: optional<string>
        docs: >-
          Additional observations provided by the institution on the
          transaction.
      merchant: optional<TransactionMerchantData>
      category: optional<EnumTransactionCategory>
      subcategory: optional<EnumTransactionSubcategory>
      reference:
        type: optional<string>
        docs: The reference number of the transaction, provided by the bank.
        validation:
          maxLength: 128
      type: optional<EnumTransactionType>
      status: optional<EnumTransactionStatus>
      credit_card_data: optional<TransactionCreditCardData>
    source:
      openapi: ../openapi.yml
  TransactionsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<Transaction>>
        docs: Array of transaction objects.
    source:
      openapi: ../openapi.yml
  TransactionsRequest:
    properties:
      link:
        type: string
        docs: The `link.id` that you want to get information for.
        validation:
          format: uuid
      account:
        type: optional<string>
        docs: If provided, we return transactions only from this account.
        validation:
          format: uuid
      date_from:
        type: string
        docs: >-
          The date from which you want to start getting transactions for, in
          `YYYY-MM-DD` format.


          ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
        validation:
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
      date_to:
        type: string
        docs: >-
          The date you want to stop getting transactions for, in `YYYY-MM-DD`
          format.


          ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
          other words, no future dates).
        validation:
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
      token:
        type: optional<string>
        docs: The OTP token generated by the bank.
      save_data:
        type: optional<boolean>
        docs: >-
          Indicates whether or not to persist the data in Belvo. By default,
          this is set to `true` and we return a 201 Created response.

          When set to `false`, the data won't be persisted and we return a 200
          OK response.
        default: true
    source:
      openapi: ../openapi.yml
  AsynchronousAccepted202:
    properties:
      request_id:
        type: optional<string>
        docs: >-
          The unique ID for this request. We recommend you store this value to
          later identify which webhook event relates to an asynchronous request.
    source:
      openapi: ../openapi.yml
  Balance:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique ID for the balance request.
        validation:
          format: uuid
      account: optional<Account>
      value_date:
        type: optional<string>
        docs: The date when the `balance` was available, in `YYYY-MM-DD` format.
        validation:
          format: date
      balance:
        type: optional<float>
        docs: The funds available in the account by the end of the `value_date`.
      current_balance:
        type: optional<double>
        docs: >
          *This field has been deprecated. Please use the `balance` field
          instead.*
        availability: deprecated
      statement:
        type: optional<string>
        docs: |
          *This field has been deprecated.*

          *The ID of the banking statement used to extract the `balance`.*
        availability: deprecated
      collected_at:
        type: optional<datetime>
        docs: |
          This field has been deprecated.

          The ISO-8601 timestamp when the data point was collected.
        availability: deprecated
    source:
      openapi: ../openapi.yml
  BalancesPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<Balance>>
        docs: Array of balance objects.
    source:
      openapi: ../openapi.yml
  InstitutionsFormFieldValues:
    properties:
      code:
        type: optional<string>
        docs: The code of the document.
      label:
        type: optional<string>
        docs: |
          The label for the field. For example:
          - C√©dula de Ciudadan√≠a
          - C√©dula de Extranjer√≠a
          - Pasaporte
      validation:
        type: optional<string>
        docs: The type of input validation used for the field.
      validation_message:
        type: optional<string>
        docs: >-
          The message displayed when an invalid input is provided in the form
          field.
      placeholder:
        type: optional<string>
        docs: The placeholder text in the form field.
    source:
      openapi: ../openapi.yml
  InstitutionsFormField:
    properties:
      name:
        type: optional<string>
        docs: The username, password, or username type field.
      type:
        type: optional<string>
        docs: The input type for the form field. For example, string.
      label:
        type: optional<string>
        docs: |
          The label of the form field. For example:
          - Client number
          - Key Bancanet
          - Document
      validation:
        type: optional<string>
        docs: The type of input validation used for the field.
      placeholder:
        type: optional<string>
        docs: The placeholder text in the form field.
      validation_message:
        type: optional<string>
        docs: >-
          The message displayed when an invalid input is provided in the form
          field.
      values:
        type: optional<list<InstitutionsFormFieldValues>>
        docs: >-
          If the form field is for documents, the institution may require
          additional input regarding the document type.
    source:
      openapi: ../openapi.yml
  InstitutionsFeature:
    properties:
      name:
        type: optional<string>
        docs: The name of the feature.
      description:
        type: optional<string>
        docs: The description of the feature.
    source:
      openapi: ../openapi.yml
  EnumInstitutionIntegrationType:
    enum:
      - credentials
      - openbanking
    docs: >
      The type of technology used to access the institution. We return one of
      the following values:


      - `credentials`: Uses Belvo's scraping technology, combined with user
      credentials, to perform requests.

      - `openbanking`: Uses the bank's openbanking API to perform requests.
    source:
      openapi: ../openapi.yml
  EnumInstitutionStatus:
    enum:
      - healthy
      - down
    docs: >
      Indicates whether Belvo's integration with the institution is currently
      active (`healthy`) or undergoing maintenance (`down`).
    source:
      openapi: ../openapi.yml
  Institution:
    properties:
      id:
        type: optional<integer>
        docs: The ID of the institution as designated by Belvo.
      name:
        type: optional<string>
        docs: >-
          The name of the institution, as designated by Belvo.

          Please see our
          [Institutions](https://developers.belvo.com/docs/institution)
          DevPortal article for a detailed list of institution names.
      type: optional<EnumInstitutionType>
      website:
        type: optional<string>
        docs: The URL of the institution's website.
      display_name:
        type: optional<string>
        docs: The customer-facing name of the institution.
      country_codes:
        type: optional<list<string>>
        docs: |
          The country codes where the institution is available, for example:
          - üáßüá∑ BR (Brazil)
          - üá®üá¥ CO (Colombia)
          - üá≤üáΩ MX (Mexico)
      primary_color:
        type: optional<string>
        docs: The primary color on the institution's website.
      logo:
        type: optional<string>
        docs: The URL of the institution's logo.
      icon_logo:
        type: optional<string>
        docs: The URL of the institution's icon logo.
      text_logo:
        type: optional<string>
        docs: The URL of the institution's text logo.
      form_fields: optional<list<InstitutionsFormField>>
      features:
        type: optional<list<InstitutionsFeature>>
        docs: >
          The features that the institution supports. If the institution has no
          special features, then Belvo returns an empty array.


          Here is a list of the available features:

          - `token_required` indicates that the institution may require a token
          during link creation or when making any other requests.
      resources:
        type: optional<list<string>>
        docs: >
          A list of Belvo resources that you can use with the institution. This
          list includes one or more of the following resources:

            - `ACCOUNTS`
            - `BALANCES`
            - `INCOMES`
            - `INVESTMENTS_PORTFOLIOS` 
            - `INVESTMENTS_TRANSACTIONS` *This field has been deprecated.*
            - `INVOICES`
            - `OWNERS`
            - `RECURRING_EXPENSES`
            - `RISK_INSIGHTS`
            - `TRANSACTIONS`
            - `TAX_COMPLIANCE_STATUS`
            - `TAX_STATUS`
            - `TAX_RETURNS`
      integration_type: optional<EnumInstitutionIntegrationType>
      status: optional<EnumInstitutionStatus>
    source:
      openapi: ../openapi.yml
  InstitutionsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<Institution>>
        docs: Array of institution objects.
    source:
      openapi: ../openapi.yml
  OwnerDocumentId:
    docs: >-
      Information regarding the identification document the owner provided to
      the bank.
    properties:
      document_type:
        type: optional<string>
        docs: >
          The type of document the owner provided to the institution to open the
          account. Common document types are:


          üáßüá∑ Brazil

          - `CPF` (*Cadastro de Pessoas F√≠sicas*)

          - `CNPJ`(*Cadastro Nacional de Pessoas Jur√≠dicas*)


          üá®üá¥ Colombia

          - `CC`(*C√©dula de Ciudadan√≠a*)

          - `NIT` (*N√∫mero de Identificaci√≥n Tributaria*)


          üá≤üáΩ Mexico

          - `CURP` (*Clave √önica de Registro de Poblaci√≥n*)

          - `NISS` (*N√∫mero de Seguridad Social*)
      document_number:
        type: optional<string>
        docs: The document's identification number.
    source:
      openapi: ../openapi.yml
  Owner:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique identifier used to reference the current owner.
        validation:
          format: uuid
      link:
        type: optional<string>
        docs: Belvo's unique ID for the current Link.
        validation:
          format: uuid
      internal_identification:
        type: optional<string>
        docs: The institution's internal identifier for the owner.
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      display_name:
        type: optional<string>
        docs: The full name of the owner, as provided by the bank.
        validation:
          maxLength: 128
      email:
        type: optional<string>
        docs: The account owner's registered email address.
        validation:
          format: email
          maxLength: 256
      phone_number:
        type: optional<string>
        docs: The account owner's registered phone number.
      address:
        type: optional<string>
        docs: The accounts owners registered address.
      document_id: optional<OwnerDocumentId>
      first_name:
        type: optional<string>
        docs: |
          *This field has been deprecated.*

          *The first name of the account owner.*
        availability: deprecated
      last_name:
        type: optional<string>
        docs: |
          *This field has been deprecated.*

          *The last name of the account owner.*
        availability: deprecated
      second_last_name:
        type: optional<string>
        docs: |
          *This field has been deprecated.*

          *The second last name of the account owner.*
        availability: deprecated
    source:
      openapi: ../openapi.yml
  OwnersPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<Owner>>
        docs: Array of owner objects.
    source:
      openapi: ../openapi.yml
  EnumInvoiceSatInvoiceType:
    enum:
      - Egreso
      - Ingreso
      - value: N√≥mina
        name: Nomina
      - Pago
      - Traslado
    docs: |
      The fiscal institution's classification of the invoice.

      For Mexico's SAT, we return one of the following values:

        - `Egreso`
        - `Ingreso`
        - `N√≥mina`
        - `Pago`
        - `Traslado`
    source:
      openapi: ../openapi.yml
  EnumInvoiceType:
    type: optional<string>
    docs: >
      The direction of the invoice (from the perspective of the Link owner).

      - `OUTFLOW` indicates a sent invoice. - `INFLOW` indicates a received
      invoice.
  EnumInvoiceSatPaymentMethod:
    type: optional<string>
    docs: >
      The payment method code used for this invoice, as defined by the legal
      entity of the country.


      - üá≤üáΩ Mexico [SAT catalog reference
      article](https://developers.belvo.com/docs/sat-catalogs#payment-method).
      For Mexico, we return `PUE`, `PIP`, `PPD`, or `null`.
  InvoiceDetailRetainedTaxSat:
    properties:
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      tax_type:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for SAT Mexico and will return
          `null`.
      tax:
        type: optional<string>
        docs: The type of retained tax (for example, ISR, IVA or IEPS).
      tax_percentage:
        type: optional<float>
        docs: The percentage of tax retained.
      retained_tax_amount:
        type: optional<float>
        docs: The amount of retained tax.
    source:
      openapi: ../openapi.yml
  InvoiceDetailSat:
    properties:
      description:
        type: optional<string>
        docs: >-
          The description of the invoice item (an invoice can have one or more
          items).
      product_identification:
        type: optional<string>
        docs: >
          The identification code of the product or the service, as defined by
          the legal entity in the country.

          - üá≤üáΩ [Mexico](http://200.57.3.89/Pys/catPyS.aspx)
      quantity:
        type: optional<integer>
        docs: The quantity of this invoice item.
      unit_code:
        type: optional<string>
        docs: >
          The unit of measure, as defined by the legal entity in the country. 

          - üá≤üáΩ Mexico [SAT catalog
          reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
      unit_description:
        type: optional<string>
        docs: >
          The description of the item, as defined by the legal entity in the
          country.

          - üá≤üáΩ Mexico [SAT catalog
          reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
      unit_amount:
        type: optional<float>
        docs: The price of one a singular item.
      tax_type:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      pre_tax_amount:
        type: optional<float>
        docs: >-
          The total price for this item before tax is applied (`quantity` x
          `unit_amount`).
      tax_percentage:
        type: optional<float>
        docs: The tax percentage to apply.
      tax_amount:
        type: optional<float>
        docs: >-
          The amount of tax for this invoice item (`pre_tax_amount` x
          `tax_percentage`).
      total_amount:
        type: optional<float>
        docs: >-
          The total price for this invoice item (`pre_tax_amount` +
          `tax_amount`).
      retained_taxes:
        type: optional<list<InvoiceDetailRetainedTaxSat>>
        docs: The retained tax on the invoice item.
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
    source:
      openapi: ../openapi.yml
  InvoicesPaymentsRelatedDocumentsSat:
    docs: List of all the related deferred invoices affected by the payment.
    properties:
      invoice_identification:
        type: optional<string>
        docs: |
          The fiscal institution's unique ID for the related deferred invoice.
      currency:
        type: optional<string>
        docs: |
          The currency of the related invoice. For example:
              
          - üáßüá∑ BRL (Brazilian Real)
          - üá®üá¥ COP (Colombian Peso)
          - üá≤üáΩ MXN (Mexican Peso)
            
            Please note that other currencies other than in the list above may be returned.
      payment_method:
        type: optional<string>
        docs: |
          The payment method of the related invoice.
      partiality_number:
        type: optional<integer>
        docs: |
          The payment installment number.
      previous_balance:
        type: optional<float>
        docs: |
          The invoice amount before the payment.
      amount_paid:
        type: optional<float>
        docs: |
          The amount paid in this installment.
      outstanding_balance:
        type: optional<float>
        docs: |
          The amount remaining to be paid.
    source:
      openapi: ../openapi.yml
  InvoicesPaymentsSat:
    properties:
      date:
        type: optional<datetime>
        docs: |
          ISO-8601 timestamp when the payment was made.
      payment_type:
        type: optional<string>
        docs: >
          Payment type code used for this invoice, as defined by the country's
          legal entity.


          - üá≤üáΩ Mexico [SAT catalog reference
          article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
      currency:
        type: optional<string>
        docs: >
          The currency of the payment. For example:


          - üáßüá∑ BRL (Brazilian Real)

          - üá®üá¥ COP (Colombian Peso)

          - üá≤üáΩ MXN (Mexican Peso)


          Please note that other currencies other than in the list above may be
          returned.
      exchange_rate:
        type: optional<string>
        docs: >
          The `currency` to MXN currency exchange rate when the payment was
          made.
      amount:
        type: optional<float>
        docs: |
          The invoice amount, in the currency of the original invoice.
      operation_number:
        type: optional<string>
        docs: |
          The fiscal institution's internal identifier for the operation.
      beneficiary_rfc:
        type: optional<string>
        docs: |
          The fiscal ID of the payment beneficiary.
      beneficiary_account_number:
        type: optional<string>
        docs: |
          The bank account number of the payment beneficiary.
      payer_rfc:
        type: optional<string>
        docs: |
          The fiscal ID of the payment issuer.
      payer_account_number:
        type: optional<string>
        docs: |
          The bank account number of the payment issuer.
      payer_bank_name:
        type: optional<string>
        docs: |
          The banking institution that was used by the payment issuer.
      related_documents:
        docs: |
          A list of all the related deferred invoices affected by the payment.
        type: list<InvoicesPaymentsRelatedDocumentsSat>
    source:
      openapi: ../openapi.yml
  InvoicesPayrollSat:
    docs: >
      Details regarding the payroll payment. Only applicable for payroll
      invoices.
    properties:
      days:
        type: optional<integer>
        docs: |
          The number of days covered by the payment.
      type:
        type: optional<string>
        docs: >
          The payroll type, as defined by the legal entity of the country.


          - üá≤üáΩ Mexico [SAT catalog reference
          article](https://developers.belvo.com/docs/sat-catalogs#payroll-type)
      amount:
        type: float
        docs: |
          The total amount of the payroll payment.
      version:
        type: string
        docs: |
          The version of the payroll object.
      date_from:
        type: optional<string>
        docs: |
          The start date of the payment period.
        validation:
          format: date
      date_to:
        type: optional<string>
        docs: |
          The end date of the payment period.
        validation:
          format: date
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      payment_date:
        type: string
        docs: |
          The payment date.
        validation:
          format: date
    source:
      openapi: ../openapi.yml
  InvoiceWarningsSat:
    docs: |
      Object containing information about any warnings related to this invoice.
    properties:
      code:
        type: optional<string>
        docs: |
          The warning code.
      message:
        type: optional<string>
        docs: |
          The description of the warning.
    source:
      openapi: ../openapi.yml
  InvoiceWithIdSat:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique identifier used to reference the current invoice.
        validation:
          format: uuid
      link:
        type: optional<string>
        docs: The `link.id` the invoice belongs to.
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      invoice_identification:
        type: optional<string>
        docs: The fiscal institution's unique ID for the invoice.
      invoice_date:
        type: optional<string>
        docs: The date of the invoice.
        validation:
          format: date
      status:
        type: optional<string>
        docs: >-
          The status of the invoice. Can be either *Vigente* (valid) or
          *Cancelado* (cancelled).
      invoice_type: optional<EnumInvoiceSatInvoiceType>
      type: optional<EnumInvoiceType>
      sender_id:
        type: optional<string>
        docs: The fiscal ID of the invoice sender
      sender_name:
        type: optional<string>
        docs: The name of the invoice sender.
      sender_tax_fraud_status:
        type: optional<string>
        docs: >-
          Indicates whether or not the sender is on SAT's tax fraud list for
          having submitted incorrect data, having outstanding payments, or
          having conducted business that is in violation of the fiscal
          institution's regulations.<br><br>

          SAT updates the tax fraud list every three months. <br><br>

          For more information regarding the reason's a taxpayer can be put on
          the tax fraud list, please see [Article
          69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html)
          and [Article
          69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html)
          of Mexico's C√≥digo Fiscal de la Federaci√≥n. <br><br>

          Possible statuses are:

          - `INVESTIGATING` <br> The fiscal institution has identified
          irregularities and open an investigation regarding the taxpayer. <br>
          - `DISMISSED` <br> The fiscal institution has investigated the
          taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The
          fiscal institution has confirmed that the taxpayer is guilty. <br> -
          `OVERTURNED` <br> The fiscal institution has reassessed a previously
          confirmed taxpayer and, based on new evidence, has taken the taxpayer
          off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br> The receiver
          or sender is not found in the list (in other words, they are complying
          with the fiscal institution's regulations).
      receiver_id:
        type: optional<string>
        docs: The fiscal ID of the invoice receiver.
      receiver_name:
        type: optional<string>
        docs: The name of the invoice receiver.
      receiver_tax_fraud_status:
        type: optional<string>
        docs: >-
          Indicates whether or not the receiver is on SAT's tax fraud list for
          having submitted incorrect data, having outstanding payments, or
          having conducted business that is in violation of the fiscal
          institution's regulations.<br><br>

          SAT updates the tax fraud list every three months. <br><br>

          For more information regarding the reason's a taxpayer can be put on
          the tax fraud list, please see [Article
          69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html)
          and [Article
          69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html)
          of Mexico's C√≥digo Fiscal de la Federaci√≥n. <br><br>

          Possible statuses are:

          - `INVESTIGATING` <br> The fiscal institution has identified
          irregularities and open an investigation regarding the taxpayer. <br>
          - `DISMISSED` <br> The fiscal institution has investigated the
          taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The
          fiscal institution has confirmed that the taxpayer is guilty. <br> -
          `OVERTURNED` <br> The fiscal institution has reassessed a previously
          confirmed taxpayer and, based on new evidence, has taken the taxpayer
          off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br> The receiver
          or sender is not found in the list (in other words, they are complying
          with the fiscal institution's regulations).
      cancelation_status:
        type: optional<string>
        docs: >-
          If the invoice is cancelled, this field indicates the status of the
          cancellation.
      cancelation_update_date:
        type: optional<string>
        docs: |
          The date of the invoice cancelation.
        validation:
          format: date
      certification_date:
        type: optional<string>
        docs: |
          The date of the fiscal certification.
        validation:
          format: date
      certification_authority:
        type: optional<string>
        docs: |
          The fiscal ID of the certification provider.
      payment_type:
        type: optional<string>
        docs: >
          The payment type code used for this invoice, as defined by the country
          legal entity.


          - üá≤üáΩ Mexico [SAT catalog reference
          article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
      payment_type_description:
        type: optional<string>
        docs: |
          *This field has been deprecated.*
        availability: deprecated
      payment_method:
        type: optional<EnumInvoiceSatPaymentMethod>
      payment_method_description:
        type: optional<string>
        docs: |
          *This field has been deprecated.*

          *The description of the payment method used for this invoice.*
        availability: deprecated
      usage:
        type: optional<string>
        docs: >
          The invoice's usage code, as defined by the legal entity of the
          country. 


          - üá≤üáΩ Mexico [SAT catalog reference
          article](https://developers.belvo.com/docs/sat-catalogs#usage)
      version:
        type: optional<string>
        docs: |
          The CFDI version of the invoice.
      place_of_issue:
        type: optional<string>
        docs: |
          The postcode of where the invoice was issued.
      invoice_details:
        docs: >
          A list of descriptions for each item (purchased product or service
          provided) in the invoice.
        type: list<InvoiceDetailSat>
      currency:
        type: optional<string>
        docs: |
          The currency of the invoice. For example:
           
           - üáßüá∑ BRL (Brazilian Real)
           - üá®üá¥ COP (Colombian Peso)
           - üá≤üáΩ MXN (Mexican Peso)
           - üá∫üá∏ USD (United States Dollar)
      subtotal_amount:
        type: optional<float>
        docs: >
          The pretax amount of this invoice (sum of each item's
          `pre_tax_amount`).
      exchange_rate:
        type: optional<float>
        docs: |
          The exchange rate used in this invoice for the currency.
      tax_amount:
        type: optional<float>
        docs: |
          The amount of tax for this invoice (sum of each item's `tax_amount`).
      discount_amount:
        type: optional<float>
        docs: |
          The total amount discounted in this invoice.
      total_amount:
        type: optional<float>
        docs: >-
          The total amount of the invoice (`subtotal_amount` + `tax_amount` -
          `discount_amount`)
      payments:
        docs: |
          A list detailing all the invoice payments.
        type: list<InvoicesPaymentsSat>
      payroll: optional<InvoicesPayrollSat>
      folio:
        type: optional<string>
        docs: |
          The internal control number that the taxpayer assigns to the invoice.
      xml:
        type: optional<string>
        docs: |
          XML of the invoice document.
      warnings:
        type: optional<InvoiceWarningsSat>
      sender_blacklist_status:
        type: optional<string>
        docs: >
          This field has been deprecated. Please use `sender_tax_fraud_status`
          instead.
        availability: deprecated
      receiver_blacklist_status:
        type: optional<string>
        docs: >
          This field has been deprecated. Please use `receiver_tax_fraud_status`
          instead.
        availability: deprecated
    source:
      openapi: ../openapi.yml
  EnumInvoiceDianInvoiceType:
    type: optional<literal<"Factura Electr√≥nica de Venta">>
    docs: |
      The fiscal institution's classification of the invoice.

      For Colombia's DIAN, we return one of the following values:

        - `Factura Electr√≥nica de Venta`
  InvoiceSenderDetailsDian:
    docs: |
      Details regarding the sender.
    properties:
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      tax_payer_type:
        type: optional<string>
        docs: |
          Indicates if the sender is a business or an individual. Can be either:
            
            - `Persona Jur√≠dica`
            - `Persona Natural`
      regimen:
        type: optional<string>
        docs: >
          The sender's regimen type.


          For detailed information regarding DIAN's regimens, please see their
          [official
          PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
      tax_scheme:
        type: optional<string>
        docs: >
          The sender's fiscal responsibilities.


          For detailed information regarding DIAN's tax schemes, please see
          their [official
          PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
      country:
        type: optional<string>
        docs: |
          The country where the sender pays their taxes.
      address:
        type: optional<string>
        docs: |
          The sender's address.
      phone_number:
        type: optional<string>
        docs: |
          The sender's phone number.
      email:
        type: optional<string>
        docs: |
          The sender's email address.
    source:
      openapi: ../openapi.yml
  InvoicesReceiverDetailsDian:
    docs: |
      Details regarding the receiver.
    properties:
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      tax_payer_type:
        type: optional<string>
        docs: >
          Indicates if the receiver is a business or an individual. Can be
          either:
            
            - `Persona Jur√≠dica`
            - `Persona Natural`
      regimen:
        type: optional<string>
        docs: >
          The receiver's regimen type.


          For detailed information regarding DIAN's regimens, please see their
          [official
          PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
      tax_scheme:
        type: optional<string>
        docs: >
          The receiver's fiscal responsibilities.


          For detailed information regarding DIAN's tax schemes, please see
          their [official
          PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
      country:
        type: optional<string>
        docs: |
          The country where the receiver pays their taxes.
      address:
        type: optional<string>
        docs: |
          The receiver's address.
      phone_number:
        type: optional<string>
        docs: |
          The receiver's phone number.
      email:
        type: optional<string>
        docs: |
          The receiver's email address.
    source:
      openapi: ../openapi.yml
  EnumInvoiceDianPaymentMethod:
    type: optional<string>
    docs: >
      The payment method used for this invoice, as defined by the legal entity
      of the country.


      For DIAN Colombia, we return one of the following values:

        - `Contado`
        - `Cr√©dito`
        - `null`
  InvoiceDetailDian:
    properties:
      description:
        type: optional<string>
        docs: >-
          The description of the invoice item (an invoice can have one or more
          items).
      product_identification:
        type: optional<string>
        docs: >
          The identification code of the product or the service, as defined by
          the legal entity in the country.
      quantity:
        type: optional<float>
        docs: The quantity of this invoice item.
      unit_code:
        type: optional<string>
        docs: |
          The unit of measure, as defined by the legal entity in the country.
      unit_description:
        type: optional<string>
        docs: >
          The description of the item, as defined by the legal entity in the
          country.
      unit_amount:
        type: optional<float>
        docs: The price of one singular item.
      tax_type:
        type: optional<string>
        docs: The item's tax type.
      pre_tax_amount:
        type: optional<float>
        docs: >-
          The total price for this item before tax is applied (`quantity` x
          `unit_amount`).
      tax_percentage:
        type: optional<float>
        docs: The tax percentage to apply.
      tax_amount:
        type: optional<float>
        docs: >-
          The amount of tax for this invoice item (`pre_tax_amount` x
          `tax_percentage`).
      total_amount:
        type: optional<float>
        docs: >-
          The total price for this invoice item (`pre_tax_amount` +
          `tax_amount`).
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
    source:
      openapi: ../openapi.yml
  InvoicesPaymentsRelatedDocumentsDian:
    docs: List of all the related deferred invoices affected by the payment.
    properties:
      invoice_identification:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      currency:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      payment_method:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      partiality_number:
        type: optional<integer>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      previous_balance:
        type: optional<float>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      amount_paid:
        type: optional<float>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      outstanding_balance:
        type: optional<float>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
    source:
      openapi: ../openapi.yml
  InvoicesPaymentsDian:
    properties:
      date:
        type: optional<datetime>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      payment_type:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      currency:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      exchange_rate:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      amount:
        type: optional<float>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      operation_number:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      beneficiary_rfc:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      beneficiary_account_number:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      payer_rfc:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      payer_account_number:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      payer_bank_name:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      related_documents:
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        type: list<InvoicesPaymentsRelatedDocumentsDian>
    source:
      openapi: ../openapi.yml
  InvoicesPayrollDian:
    docs: >
      **Note**: This field is not applicable for DIAN Colombia and will return
      `null`.
    properties:
      days:
        type: optional<integer>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      type:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      amount:
        type: optional<float>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      version:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      date_from:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      date_to:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      collected_at:
        type: optional<datetime>
        docs: >-
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      payment_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
    source:
      openapi: ../openapi.yml
  InvoiceWarningsDian:
    docs: >
      **Note**: This field is not applicable for DIAN Colombia and will return
      `null`.
    properties:
      code:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      message:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
    source:
      openapi: ../openapi.yml
  InvoiceDian:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique identifier for the current invoice.
        validation:
          format: uuid
      link:
        type: optional<string>
        docs: The `link.id` the invoice belongs to.
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      invoice_identification:
        type: optional<string>
        docs: The fiscal institution's unique ID for the invoice.
      invoice_date:
        type: optional<string>
        docs: The date of the invoice.
        validation:
          format: date
      status:
        type: optional<string>
        docs: |-
          The status of the invoice. Can be one of:

            - *Vigente* (valid)
            - *Cancelado* (cancelled)
            - *Aprobado* (approved)
      expiration_date:
        type: optional<string>
        docs: >
          Indicates when the invoice is set to expire.


          For example: If the invoice is paid in installments, this field
          indicates the date when the installment is to be paid.
        validation:
          format: date
      invoice_type: optional<EnumInvoiceDianInvoiceType>
      type: optional<EnumInvoiceType>
      sender_id:
        type: optional<string>
        docs: The fiscal ID of the invoice sender.
      sender_name:
        type: optional<string>
        docs: The name of the invoice sender.
      sender_details:
        type: optional<InvoiceSenderDetailsDian>
      sender_tax_fraud_status:
        type: optional<string>
        docs: >-
          Indicates whether or not the sender is on a tax fraud list for having
          submitted incorrect data, having outstanding payments, or having
          conducted business that is in violation of the fiscal institution's
          regulations.

          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      receiver_id:
        type: optional<string>
        docs: The fiscal ID of the invoice receiver.
      receiver_name:
        type: optional<string>
        docs: The name of the invoice receiver.
      receiver_details:
        type: optional<InvoicesReceiverDetailsDian>
      receiver_tax_fraud_status:
        type: optional<string>
        docs: >-
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      cancelation_status:
        type: optional<string>
        docs: >-
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      cancelation_update_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      certification_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      certification_authority:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      payment_type:
        type: optional<string>
        docs: >
          The payment type code used for this invoice, as defined by the country
          legal entity.


          For detailed information regarding DIAN's payment types, please see
          their [official
          PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
      payment_type_description:
        type: optional<string>
        docs: |
          The description of the payment method used for this invoice.
      payment_method:
        type: optional<EnumInvoiceDianPaymentMethod>
      payment_method_description:
        type: optional<string>
        docs: |
          The description of the payment method used for this invoice.
        availability: deprecated
      usage:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      version:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      place_of_issue:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      invoice_details:
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        type: list<InvoiceDetailDian>
      currency:
        type: optional<string>
        docs: |
          The currency of the invoice. For example:
           
           - üáßüá∑ BRL (Brazilian Real)
           - üá®üá¥ COP (Colombian Peso)
           - üá≤üáΩ MXN (Mexican Peso)
           - üá∫üá∏ USD (United States Dollar)
      subtotal_amount:
        type: optional<float>
        docs: >
          The pretax amount of this invoice (sum of each item's
          `pre_tax_amount`).
      exchange_rate:
        type: optional<float>
        docs: |
          The exchange rate used in this invoice for the currency.
      tax_amount:
        type: optional<float>
        docs: |
          The amount of tax for this invoice (sum of each item's `tax_amount`).
      discount_amount:
        type: optional<float>
        docs: |
          The total amount discounted in this invoice.
      total_amount:
        type: optional<float>
        docs: >-
          The total amount of the invoice (`subtotal_amount` + `tax_amount` -
          `discount_amount`)
      payments:
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        type: list<InvoicesPaymentsDian>
      payroll: optional<InvoicesPayrollDian>
      folio:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      xml:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      warnings:
        type: optional<InvoiceWarningsDian>
    source:
      openapi: ../openapi.yml
  InvoicesResponsePaginatedResponseResultsItem:
    discriminated: false
    union:
      - type: InvoiceWithIdSat
      - type: InvoiceDian
    source:
      openapi: ../openapi.yml
    inline: true
  InvoicesResponsePaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<InvoicesResponsePaginatedResponseResultsItem>>
        docs: Array of invoice objects.
    source:
      openapi: ../openapi.yml
  TaxReturnPersonal:
    properties:
      id:
        type: optional<string>
        docs: >-
          Unique identifier created by Belvo used to reference the current Tax
          Return.
        validation:
          format: uuid
      link:
        type: optional<string>
        docs: The `link.id` the statement belongs to
        validation:
          format: uuid
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      informacion_general:
        type: optional<map<string, unknown>>
        docs: >-
          General information on the tax return (year, RFC, return type,
          person/company name, and so on).
      sueldos_salarios:
        type: optional<map<string, unknown>>
        docs: >-
          Details regarding the income information together combined with
          withheld taxes.
      servicios_profesionales:
        type: optional<map<string, unknown>>
        docs: >-
          Details regarding the income and tax information from professional
          services provided.
      deducciones_personales:
        type: optional<map<string, unknown>>
        docs: List of all personal tax deductions.
      determinacion_impuesto:
        type: optional<map<string, unknown>>
        docs: Details regarding the final tax return.
      retenciones:
        type: optional<map<string, unknown>>
        docs: Details on the already withheld taxes.
      dividendos:
        type: optional<map<string, unknown>>
        docs: Details regarding dividends.
      datos_informativos:
        type: optional<map<string, unknown>>
        docs: Extra informative data on the tax return.
      pdf:
        type: optional<string>
        docs: Tax return PDF as a binary.
        validation:
          format: binary
      receipt_pdf:
        type: optional<string>
        docs: >-
          The acknowledgement receipt from the fiscal institution confirming
          that they received the tax return.
        validation:
          format: binary
    extra-properties: true
    source:
      openapi: ../openapi.yml
  TaxReturnsPersonalPaginated:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxReturnPersonal>>
        docs: Array of Personal Tax Return objects.
    extra-properties: true
    source:
      openapi: ../openapi.yml
  TaxReturnPersonalMonthly:
    properties:
      id:
        type: optional<string>
        docs: >-
          Unique identifier created by Belvo used to reference the current Tax
          Return.
        validation:
          format: uuid
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      informacion_general:
        type: optional<map<string, unknown>>
        docs: >-
          General information regarding the tax return (year, RFC, return type,
          person/company name, and so on).
      isr:
        type: optional<map<string, unknown>>
        docs: >-
          Information used to calculate the monthly provisional payments of the
          income tax.
      iva:
        type: optional<map<string, unknown>>
        docs: >-
          Information used to calculate the monthly provisional payments of the
          VAT tax.
      pdf:
        type: optional<string>
        docs: Tax return PDF as a binary.
        validation:
          format: binary
      receipt_pdf:
        type: optional<string>
        docs: >-
          The acknowledgement receipt from the fiscal institution confirming
          that they received the tax return.
        validation:
          format: binary
      type:
        type: string
        docs: The type of tax return. Can be either monthly or annual.
    extra-properties: true
    source:
      openapi: ../openapi.yml
  TaxReturnsPersonalMonthlyPaginated:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxReturnPersonalMonthly>>
        docs: Array of Monthly Personal Tax Return objects.
    extra-properties: true
    source:
      openapi: ../openapi.yml
  TaxReturnBusiness:
    properties:
      id:
        type: optional<string>
        docs: >-
          Unique identifier created by Belvo used to reference the current Tax
          Return.
        validation:
          format: uuid
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      informacion_general:
        type: optional<map<string, unknown>>
        docs: >-
          General information regarding the tax return (year, RFC, return type,
          person/company name, and so on).
      datos_adicionales:
        type: optional<map<string, unknown>>
        docs: Additional data regarding the tax return.
      estado_resultados:
        type: optional<map<string, unknown>>
        docs: Detailed information about the legal entity's yearly profit and loss.
      estado_posicion_financiera_balance:
        type: optional<map<string, unknown>>
        docs: Details regarding balance sheet of the legal entity.
      conciliacion_entre_resultado_contable_fiscal:
        type: optional<map<string, unknown>>
        docs: Details regarding the accounting reconciliation.
      deducciones_autorizadas:
        type: optional<map<string, unknown>>
        docs: Details regarding the legal entity's deductions.
      cifras_cierre_ejercicio:
        type: optional<map<string, unknown>>
        docs: Details regarding key numbers at the end of the fiscal exercise.
      determinacion_del_impuesto_sobre_la_renta:
        type: optional<map<string, unknown>>
        docs: Details regarding the final tax return.
      dividendos_o_utilidades_distribuidos:
        type: optional<map<string, unknown>>
        docs: Details regarding distributed dividends.
      detalle_pago_r1_isr_personas_morales:
        type: optional<map<string, unknown>>
        docs: Details of the tax payment.
      pdf:
        type: optional<string>
        docs: Tax return PDF as a binary.
        validation:
          format: binary
      receipt_pdf:
        type: optional<string>
        docs: >-
          The acknowledgement receipt from the fiscal institution confirming
          that they received the tax return.
        validation:
          format: binary
    extra-properties: true
    source:
      openapi: ../openapi.yml
  TaxReturnsBusinessPaginated:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxReturnBusiness>>
        docs: Array of Business Tax Return objects.
    extra-properties: true
    source:
      openapi: ../openapi.yml
  TaxReturnBusinessMonthly:
    properties:
      id:
        type: optional<string>
        docs: >-
          Unique identifier created by Belvo used to reference the current Tax
          Return.
        validation:
          format: uuid
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      informacion_general:
        type: optional<map<string, unknown>>
        docs: >-
          General information regarding the tax return (year, RFC, return type,
          person/company name, and so on).
      determinacion_isr:
        type: optional<map<string, unknown>>
        docs: >-
          Information used to calculate the provisional income tax for the
          period.
      detalle_pago_isr:
        type: optional<map<string, unknown>>
        docs: Information on the monthly provisional payments for the income tax.
      determinacion_iva:
        type: optional<map<string, unknown>>
        docs: Information used to calculate the provisional VAT tax for the period.
      detalle_pago_iva:
        type: optional<map<string, unknown>>
        docs: Information on the monthly provisional payments for the VAT tax.
      pdf:
        type: optional<string>
        docs: Tax return PDF as a binary.
        validation:
          format: binary
      receipt_pdf:
        type: optional<string>
        docs: >-
          The acknowledgement receipt from the fiscal institution confirming
          that they received the tax return.
        validation:
          format: binary
      type:
        type: optional<string>
        docs: The type of tax return. Can be either monthly or annual.
    extra-properties: true
    source:
      openapi: ../openapi.yml
  TaxReturnsBusinessMonthlyPaginated:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxReturnBusinessMonthly>>
        docs: Array of Monthly Business Tax Return objects.
    extra-properties: true
    source:
      openapi: ../openapi.yml
  TaxReturnsMonthlyRequest:
    docs: Request body for monthly tax returns
    properties:
      link:
        type: string
        docs: The fiscal `link.id` you want specific tax return information for.
        validation:
          format: uuid
      attach_pdf:
        type: optional<boolean>
        docs: >-
          When this is set to `true`, you will receive the PDF as a binary
          string in the response.
        default: false
      save_data:
        type: optional<boolean>
        docs: >-
          Indicates whether or not to persist the data in Belvo. By default,
          this is set to `true` and we return a 201 Created response.

          When set to `false`, the data won't be persisted and we return a 200
          OK response.
        default: true
      type:
        type: string
        docs: >
          The type of tax return to return. For monthly tax returns, this field
          must be set to `monthly`.
        default: monthly
      date_from:
        type: string
        docs: >-
          The starting date you want to get tax returns for, in `YYYY-MM-DD`
          format.


          ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
      date_to:
        type: string
        docs: >-
          The date you want to stop getting tax returns for, in `YYYY-MM-DD`
          format.


          ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
          other words, no future dates).
    source:
      openapi: ../openapi.yml
  TaxReturnsYearlyRequest:
    docs: Request body for yearly tax returns
    properties:
      link:
        type: string
        docs: The fiscal `link.id` you want specific tax return information for.
        validation:
          format: uuid
      attach_pdf:
        type: optional<boolean>
        docs: >-
          When this is set to `true`, you will receive the PDF as a binary
          string in the response.
        default: false
      save_data:
        type: optional<boolean>
        docs: >-
          Indicates whether or not to persist the data in Belvo. By default,
          this is set to `true` and we return a 201 Created response.

          When set to `false`, the data won't be persisted and we return a 200
          OK response.
        default: true
      type:
        type: string
        docs: >
          The type of tax return to return. For yearly tax returns this must be
          set to `yearly`.


          By default, Belvo returns the yearly (annual) tax returns.
        default: yearly
      year_from:
        type: string
        docs: |
          The starting year you want to get tax returns for, in `YYYY` format.
      year_to:
        type: string
        docs: |
          The year you want to stop getting tax returns for, in `YYYY` format.
    source:
      openapi: ../openapi.yml
  TaxStatusTaxPayerInformationSat:
    docs: Details regarding the taxpayer.
    properties:
      rfc:
        type: optional<string>
        docs: |
          The tax payers's identification number (For Mexico, this is the RFC).
      curp:
        type: optional<string>
        docs: |
          The tax payers's *Clave √önica de Registro de Poblaci√≥n* (CURP) number.
      name:
        type: optional<string>
        docs: The tax payers's first name.
      first_last_name:
        type: optional<string>
        docs: The tax payers's first last name.
      second_last_name:
        type: optional<string>
        docs: The tax payers's second last name.
      start_operations_date:
        type: optional<string>
        docs: |
          Date when the tax payer commenced taxable commercial activities.
        validation:
          format: date
      status_padron:
        type: optional<string>
        docs: >-
          Status of the taxpayer in the Federal Register of Taxpayers (RFC). Can
          be `ACTIVO` or `INACTIVO`.
      last_status_change_date:
        type: optional<string>
        docs: |
          Date when `status_padron` was most recently updated.
        validation:
          format: date
      commercial_name:
        type: optional<string>
        docs: >
          The name of the business designated for consumers and the general
          public.


          **Note**: Only applicable for businesses.
      social_name:
        type: optional<string>
        docs: >-
          The unique and exclusive name within the national territory that
          companies receive for legal or administrative purposes.

          **Note**: Only applicable for businesses.
      email:
        type: optional<string>
        docs: Contact email address for the tax payer.
      phone:
        type: optional<string>
        docs: Contact phone number for the tax payer.
    source:
      openapi: ../openapi.yml
  TaxStatusAddressBetweenStreetSat:
    properties:
      street_one:
        type: optional<string>
        docs: The first street that `street` is located between.
      street_two:
        type: optional<string>
        docs: The second street that `street` is located between.
    source:
      openapi: ../openapi.yml
  TaxStatusAddressSat:
    docs: The tax payer's address details.
    properties:
      postal_code:
        type: optional<string>
        docs: |
          The postcode of the address.
      street_type:
        type: optional<string>
        docs: The `street` type.
      street:
        type: optional<string>
        docs: The tax payers street.
      exterior_number:
        type: optional<string>
        docs: The street number.
      interior_number:
        type: optional<string>
        docs: Additional address information.
      suburb:
        type: optional<string>
        docs: |
          The suburb of the tax payer.
      locality:
        type: optional<string>
        docs: |
          The locality of the address.
      municipality:
        type: optional<string>
        docs: The municipality of the address.
      state:
        type: optional<string>
        docs: The state that the address is in.
      between_street:
        type: optional<list<TaxStatusAddressBetweenStreetSat>>
        docs: |
          Additional information about where the `street` is located.
    source:
      openapi: ../openapi.yml
  TaxStatusEconomicActivitySat:
    properties:
      economic_activity:
        type: optional<string>
        docs: The description of the economic activity.
      initial_date:
        type: optional<string>
        docs: The start date of the economic activity.
        validation:
          format: date
      end_date:
        type: optional<string>
        docs: |
          The end date of the economic activity.
        validation:
          format: date
      order:
        type: optional<string>
        docs: The order of the economic activity.
      percentage:
        type: optional<string>
        docs: |
          The percentage of the economic activity.
    source:
      openapi: ../openapi.yml
  TaxStatusRegimensSat:
    properties:
      end_date:
        type: optional<string>
        docs: |
          The end date of the regimen.
        validation:
          format: date
      initial_date:
        type: optional<string>
        docs: |
          The start date of the regimen.
        validation:
          format: date
      regimen:
        type: optional<string>
        docs: The description of the regimen.
    source:
      openapi: ../openapi.yml
  TaxStatusObligationsSat:
    docs: |
      Details regarding a business's obligations.

      ‚ÑπÔ∏è For non-business accounts, this field will return empty.
    properties:
      obligation:
        type: optional<string>
        docs: |
          The description of the obligation.
      expiration:
        type: optional<string>
        docs: >
          The deadline to fulfill the obligation, as imposed by the tax
          authority.
      initial_date:
        type: optional<string>
        docs: |
          The date when obligation started.
        validation:
          format: date
      end_date:
        type: optional<string>
        docs: |
          The date when obligation ended.
        validation:
          format: date
    source:
      openapi: ../openapi.yml
  TaxStatusSat:
    properties:
      id:
        type: string
        docs: >-
          Unique identifier created by Belvo used to reference the current Tax
          Status.
        validation:
          format: uuid
      link:
        type: string
        docs: The `link.id` that the tax status is associated with.
        validation:
          format: uuid
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      place_and_date_of_issuance:
        type: optional<string>
        docs: The place and date of that the tax status was issued.
      official_name:
        type: optional<string>
        docs: The name of the person or business.
      id_cif:
        type: optional<string>
        docs: |
          The taxpayer's *C√©dula de Identificaci√≥n Fiscal* (CIF) ID.
      tax_payer_information: optional<TaxStatusTaxPayerInformationSat>
      address: optional<TaxStatusAddressSat>
      economic_activity:
        type: optional<list<TaxStatusEconomicActivitySat>>
        docs: |
          A list of economic activity objects.
      regimes:
        type: optional<list<TaxStatusRegimensSat>>
        docs: |
          A list of regimen objects.
      obligations:
        type: optional<list<TaxStatusObligationsSat>>
        docs: |
          Details regarding a business's obligations.

          ‚ÑπÔ∏è For non-business accounts, this field will return empty.
      digital_stamp:
        type: optional<string>
        docs: The validation certificate of the document.
      digital_stamp_chain:
        type: optional<string>
        docs: >
          A data chain containing the basic structure of a fiscal digital check.
          For Mexico, this is the *Comprobante Fiscal Digital por Internet*
          (CFDI).
      pdf:
        type: optional<string>
        docs: Tax status PDF as a binary string.
        validation:
          format: binary
    source:
      openapi: ../openapi.yml
  TaxStatusTaxPayerInformationDian:
    docs: Details regarding the taxpayer.
    properties:
      rfc:
        type: optional<string>
        docs: |
          The tax payers's identification number (NIT).
      curp:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      name:
        type: optional<string>
        docs: The tax payers's first name.
      first_last_name:
        type: optional<string>
        docs: The tax payers's first last name.
      second_last_name:
        type: optional<string>
        docs: The tax payers's second last name.
      start_operations_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      status_padron:
        type: optional<string>
        docs: >-
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      last_status_change_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      commercial_name:
        type: optional<string>
        docs: >
          The name of the business designated for consumers and the general
          public.


          **Note**: Only applicable for businesses.
      social_name:
        type: optional<string>
        docs: >-
          The unique and exclusive name within the national territory that
          companies receive for legal or administrative purposes.

          **Note**: Only applicable for businesses.
      email:
        type: optional<string>
        docs: Contact email address for the tax payer.
      phone:
        type: optional<string>
        docs: Contact phone number for the tax payer.
    source:
      openapi: ../openapi.yml
  TaxStatusAddressBetweenStreetDian:
    properties:
      street_one:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      street_two:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
    source:
      openapi: ../openapi.yml
  TaxStatusAddressDian:
    docs: The tax payer's address details.
    properties:
      postal_code:
        type: optional<string>
        docs: |
          The postcode of the address.
      street_type:
        type: optional<string>
        docs: The `street` type.
      street:
        type: optional<string>
        docs: The tax payers street.
      exterior_number:
        type: optional<string>
        docs: The street number.
      interior_number:
        type: optional<string>
        docs: Additional address information.
      suburb:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      locality:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      municipality:
        type: optional<string>
        docs: The municipality of the address.
      state:
        type: optional<string>
        docs: The state that the address is in.
      between_street:
        type: optional<list<TaxStatusAddressBetweenStreetDian>>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
    source:
      openapi: ../openapi.yml
  TaxStatusEconomicActivityDian:
    properties:
      economic_activity:
        type: optional<string>
        docs: >
          The economic activity code, according to the fiscal institution.


          For detailed information regarding DIAN's economic activities, please
          see their [official
          PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
      initial_date:
        type: optional<string>
        docs: The start date of the economic activity.
        validation:
          format: date
      end_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      order:
        type: optional<string>
        docs: The order of the economic activity.
      percentage:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
    source:
      openapi: ../openapi.yml
  TaxStatusRegimensDian:
    properties:
      end_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      initial_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      regimen:
        type: optional<string>
        docs: The description of the regimen.
    source:
      openapi: ../openapi.yml
  TaxStatusObligationsDian:
    docs: |
      Details regarding a business's obligations.

      ‚ÑπÔ∏è For non-business accounts, this field will return empty.
    properties:
      obligation:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      expiration:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      initial_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
      end_date:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
        validation:
          format: date
    source:
      openapi: ../openapi.yml
  TaxStatusDian:
    properties:
      id:
        type: string
        docs: >-
          Unique identifier created by Belvo used to reference the current Tax
          Status.
        validation:
          format: uuid
      link:
        type: string
        docs: The `link.id` that the tax status is associated with.
        validation:
          format: uuid
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      place_and_date_of_issuance:
        type: optional<string>
        docs: >-
          The date when the tax status was issued. For example,
          `2020-08-05/18:55:16`.
      official_name:
        type: optional<string>
        docs: |
          The name of the business.

          Note: For individuals in Colombia, this field will return `null`.
      id_cif:
        type: optional<string>
        docs: >
          The taxpayer's *C√©dula de ciudadan√≠a* (CC) ID. Only applicable for
          individuals.
      tax_payer_information: optional<TaxStatusTaxPayerInformationDian>
      address: optional<TaxStatusAddressDian>
      economic_activity:
        type: optional<list<TaxStatusEconomicActivityDian>>
        docs: |
          A list of economic activity objects.
      regimes:
        type: optional<list<TaxStatusRegimensDian>>
        docs: |
          A list of regimen objects.
      obligations:
        type: optional<list<TaxStatusObligationsDian>>
        docs: |
          Details regarding a business's obligations.

          ‚ÑπÔ∏è For non-business accounts, this field will return empty.
      digital_stamp:
        type: optional<string>
        docs: The validation certificate of the document.
      digital_stamp_chain:
        type: optional<string>
        docs: >
          **Note**: This field is not applicable for DIAN Colombia and will
          return `null`.
      pdf:
        type: optional<string>
        docs: Tax status PDF as a binary string.
        validation:
          format: binary
    source:
      openapi: ../openapi.yml
  TaxStatusPaginatedResponseResultsItem:
    discriminated: false
    union:
      - type: TaxStatusSat
      - type: TaxStatusDian
    source:
      openapi: ../openapi.yml
    inline: true
  TaxStatusPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxStatusPaginatedResponseResultsItem>>
        docs: Array of tax status objects.
    source:
      openapi: ../openapi.yml
  EnumTaxComplianceStatusOutcome:
    enum:
      - POSITIVE
      - NEGATIVE
      - NO_OBLIGATIONS
    docs: >-
      Indicates whether the taxpayer is complying to all their tax obligations
      (`POSITIVE`), if they are not (`NEGATIVE`), or have none to comply to
      (`NO_OBLIGATIONS`).
    source:
      openapi: ../openapi.yml
  TaxComplianceStatus:
    properties:
      id:
        type: optional<string>
        docs: >-
          Unique identifier created by Belvo used to reference the current Tax
          Compliance Status.
        validation:
          format: uuid
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      internal_identification:
        type: optional<string>
        docs: The institution‚Äôs internal identification number for the document.
      pdf:
        type: optional<string>
        docs: Tax compliance status PDF as a binary.
        validation:
          format: binary
      rfc:
        type: optional<string>
        docs: The account holder's RFC (Registro Federal de Contribuyentes) number.
      outcome: optional<EnumTaxComplianceStatusOutcome>
    source:
      openapi: ../openapi.yml
  TaxComplianceStatusPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxComplianceStatus>>
        docs: Array of tax compliance status objects.
    source:
      openapi: ../openapi.yml
  EnumIncomeStreamType:
    enum:
      - SALARY
      - GOVERNMENT
      - INTEREST
      - RENT
      - RETIREMENT
      - FREELANCE
      - ALTERNATIVE_INCOME
      - TRANSFER
      - DEPOSIT
      - UNKNOWN
    docs: |
      The type of income used in the calculations.

      We return one of the following enum values:

        - `SALARY`
        - `GOVERNMENT`
        - `INTEREST`
        - `RENT`
        - `RETIREMENT`
        - `FREELANCE`
        - `ALTERNATIVE_INCOME`
        - `TRANSFER`
        - `DEPOSIT`
        - `UNKNOWN`
    source:
      openapi: ../openapi.yml
  EnumIncomeStreamFrequency:
    enum:
      - MONTHLY
      - FORTNIGHTLY
      - WEEKLY
      - IRREGULAR
      - SINGLE
    docs: |
      How often the income is received.

      We return one of the following enum values:

        - `MONTHLY` - For transactions that occur once per month.
        - `FORTNIGHTLY` - For transactions that occur once every two weeks.
        - `WEEKLY` - For transactions that occur once per week.
        - `IRREGULAR` - For transactions that do not occur on a defined frequency pattern.
        - `SINGLE` - For transactions that occur only once and do not repeat.
    source:
      openapi: ../openapi.yml
  EnumIncomeStreamConfidence:
    enum:
      - HIGH
      - MEDIUM
      - LOW
    docs: |
      Belvo's level of confidence for future incomes.

      We return one of the following enum values:

        - `HIGH`
        - `MEDIUM`
        - `LOW`
    source:
      openapi: ../openapi.yml
  IncomeStreamsBody:
    docs: |
      A list of income streams for the account.

      For each income stream, we provide additional insights such as:
      - Frequency, stability, and confidence level of the income transactions.
      - Key metrics about the transaction amounts.
      ‚ÑπÔ∏è If no income sources are found, we return an empty array.
    properties:
      account_id:
        type: string
        docs: Unique ID for the bank account to be verified for income streams.
      income_type: EnumIncomeStreamType
      frequency: EnumIncomeStreamFrequency
      monthly_average:
        type: float
        docs: >
          The average amount of income received from the source over
          `lookback_periods`.
      average_income_amount:
        type: float
        docs: |
          The average income transaction amount from the source.
      last_income_amount:
        type: float
        docs: |
          The amount of the most recent income received from the source.
      currency:
        type: string
        docs: |-
          The three-letter currency code of the income. For example:

            ‚Ä¢ üáßüá∑ BRL (Brazilian Real)
            ‚Ä¢ üá®üá¥ COP (Colombian Peso)
            ‚Ä¢ üá≤üáΩ MXN (Mexican Peso)
      last_income_description: unknown
      last_income_date:
        type: string
        docs: >
          The date when the most recent income from the stream was received, in
          `YYYY-MM-DD` format.
        validation:
          format: date
      stability:
        type: optional<float>
        docs: >
          The stability of the income based on its amount, with a range from 0
          to 1, where 1 represents perfect stability.


          **Note:** For transactions with `frequency`=`SINGLE`, this value
          returns `null`.
      regularity:
        type: optional<float>
        docs: >
          The regularity of the income basde in its frequency, with a range from
          0 to 1, where 1 represents perfect regularity.


          **Note:** For transactions with `frequency`=`SINGLE`, this value
          returns `null`.
      trend:
        type: optional<float>
        docs: >
          The income trend during a period of time calculated between last
          income and first income received, where:
            - a negative float means that the income trend is decreasing during the time period.
            - a positive float means that the income trend is increasing during the time period.

          **Note:** For transactions with `frequency`=`SINGLE`, this value
          returns `null`.
      lookback_periods:
        type: integer
        docs: >
          Number of period units (based on *rolling months*) used to generate
          insights and calculations.


          **Note:** A *rolling month* is a period of 30 days. For example,
          2023-01-15 to 2023-02-2023.
      full_periods:
        type: integer
        docs: >
          Number of period units (based on *rolling months*) with data to
          perform calculations.


          **Note:** A *rolling month* is a period of 30 days. For example,
          2023-01-15 to 2023-02-2023.
      periods_with_income:
        type: integer
        docs: >
          Number of period units (based on *rolling months*) with at least one
          income available.


          **Note:** A *rolling month* is a period of 30 days. For example,
          2023-01-15 to 2023-02-2023.
      number_of_incomes:
        type: integer
        docs: |
          Number of income transactions over the `lookback_periods`.
      confidence: EnumIncomeStreamConfidence
    source:
      openapi: ../openapi.yml
  EnumIncomeSourceType:
    type: literal<"BANK">
    docs: |
      The type of source we generate income insights from.
      We return one of the following enum values:

        - `BANK`
  Income:
    docs: Income insights
    properties:
      id:
        type: string
        docs: Belvo's unique identifier for the current income.
        validation:
          format: uuid
      link:
        type: string
        docs: The `link.id` the account belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was created in Belvo's
          database.
      income_streams:
        docs: An array of enriched income stream objects.
        type: list<IncomeStreamsBody>
      income_source_type: EnumIncomeSourceType
      first_transaction_date:
        type: optional<string>
        docs: |
          The date when the first transaction occurred, in `YYYY-MM-DD` format.
        validation:
          format: date
      last_transaction_date:
        type: string
        docs: >
          The date when when the last transaction occurred, in `YYYY-MM-DD`
          format.
        validation:
          format: date
      number_of_income_streams:
        type: integer
        docs: |
          Number of total income streams analized.
      monthly_average:
        type: float
        docs: >
          Average amount of income received per month across all the accounts
          for the specific user.
      monthly_average_regular:
        type: float
        docs: >
          Average amount of regular income (with a frequency of `MONTHLY`,
          `FORTNIGHTLY`, or `WEEKLY`) received per month for the specific user.
      monthly_average_irregular:
        type: float
        docs: >
          Average amount of irregular income (with a frequency of `SINGLE` or
          `IRREGULAR`) received per month for the specific user.
      monthly_average_low_confidence:
        type: float
        docs: >
          Average amount of income received per month for the specific user with
          `LOW` confidence.
      monthly_average_medium_confidence:
        type: float
        docs: >
          Average amount of income received per month for the specific user with
          `MEDIUM` confidence.
      monthly_average_high_confidence:
        type: float
        docs: >
          Average amount of income received per month for the specific user with
          `HIGH` confidence.
      total_income_amount:
        type: float
        docs: |
          Total amount of all income received for the specific user.
      total_regular_income_amount:
        type: float
        docs: >
          Total amount of regular income (with a frequency of `MONTHLY`,
          `FORTNIGHTLY`, `WEEKLY`) for the specific user.
      total_irregular_income_amount:
        type: optional<float>
        docs: >
          Total amount of irregular income (with a frequency of `SINGLE` or
          `IRREGULAR`) for the specific user.
      total_low_confidence:
        type: float
        docs: |
          Total amount of income for the specific user with `LOW` confidence.
      total_medium_confidence:
        type: float
        docs: |
          Total amount of income for the specific user with `MEDIUM` confidence.
      total_high_confidence:
        type: float
        docs: |
          Total amount of income for the specific user with `HIGH` confidence.
    source:
      openapi: ../openapi.yml
  IncomesPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<Income>>
        docs: Array of income objects.
    source:
      openapi: ../openapi.yml
  EnumInvoiceAllowedIncomeTypesRequest:
    enum:
      - SALARY
      - GOVERNMENT
      - INTEREST
      - RENT
      - RETIREMENT
      - FREELANCE
      - ALTERNATIVE_INCOME
      - TRANSFER
      - DEPOSIT
      - UNKNOWN
    docs: |-
      The categories of the incomes you want to get information for. 
      You can send through one or more of the following values:
        - `SALARY`
        - `GOVERNMENT`
        - `INTEREST`
        - `RENT`
        - `RETIREMENT`
        - `FREELANCE`
        - `ALTERNATIVE_INCOME`
        - `TRANSFER`
        - `DEPOSIT`
        - `UNKNOWN`
    source:
      openapi: ../openapi.yml
  EnumIncomeMinimumConfidenceLevelRequest:
    enum:
      - HIGH
      - MEDIUM
      - LOW
    docs: >
      The minimum confidence level of the incomes you want to get information
      for.


      You can send through one of the following values:

        - `HIGH`
        - `MEDIUM`
        - `LOW`
    source:
      openapi: ../openapi.yml
  InvalidPeriodError:
    docs: >-
      This error occurs when you request incomes for a link within a given date
      range, however, the period between `date_from` and `date_to` is less than
      90 days.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`invalid_period`) that allows you to classify and
          handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_period"
          target="_blank">400 invalid_period errors</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `invalid_period` errors, the description is:
            
            - `The number of days between date_from and date_to must be at least 90 days`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  RecurringExpenseSourceTransaction:
    docs: >-
      An array of minified transaction objects used to evaluate the recurring
      expense. If no transactions were found, we return an empty array.
    properties:
      amount:
        type: float
        docs: The transaction amount.
      description:
        type: optional<string>
        docs: >-
          The description of the transaction provided by the institution.
          Usually, this is the text that the end user would see in the bank
          statement. The description can be an empty string.
      value_date:
        type: string
        docs: The date when the transaction occurred, in `YYYY-MM-DD` format.
        validation:
          format: date
    source:
      openapi: ../openapi.yml
  EnumRecurringExpenseFrequency:
    type: literal<"MONTHLY">
    docs: |
      The frequency at which this recurring expense occurs.


      ‚ÑπÔ∏è **Note:** Belvo only identifies `MONTHLY` frequencies.
  EnumRecurringExpenseCategory:
    enum:
      - value: Bills & Utilities
        name: BillsUtilities
      - value: Credits & Loans
        name: CreditsLoans
      - Insurance
      - value: Online Platforms & Leisure
        name: OnlinePlatformsLeisure
      - value: Transport & Travel
        name: TransportTravel
      - Taxes
    docs: >
      The transaction category for the recurring expense. For more information
      on the available categories, please see our [Transaction categorization
      documentation](https://developers.belvo.com/docs/banking#categorizing-transactions).


      - `Online Platforms & Leisure` (Netflix, Spotify, Gym Memberships)

      - `Bills & Utilities` (electricity, telephone, internet)

      - `Credits & Loans` (credit card cash advances, student loan, watercraft
      lease)

      - `Insurance` (home, car, and health & life insurance)

      - `Transport & Travel` (Uber trip, airbnb, parking)

      - `Taxes` (service fee, donation, court taxes)
    source:
      openapi: ../openapi.yml
  EnumRecurringExpensePaymentType:
    enum:
      - SUBSCRIPTION
      - REGULAR
    docs: |
      The type of recurring expense. We return one of the following values:

        - `SUBSCRIPTION`
        - `REGULAR`
    source:
      openapi: ../openapi.yml
  RecurringExpenses:
    docs: |
      Recurring expense insights.


      ‚ÑπÔ∏è If no recurring expense insights are found, we return an empty array.
    properties:
      id:
        type: optional<string>
        docs: >-
          Belvo's unique identifier used to reference the current recurring
          expense.
        validation:
          format: uuid
      account: optional<Account>
      name:
        type: optional<string>
        docs: >
          The name for the recurring expense.


          ‚ÑπÔ∏è **Note**: This information is taken from the description section of
          a transaction and then normalized to provide you with an easy-to-read
          name. As such, sometimes the name will reflect the merchant the
          payment is made to (for example, Netflix.com), while for other
          recurring expenses, this could be something like "Monthly payment to
          John".
      transactions:
        docs: >-
          An array of minified transaction objects used to evaluate the
          recurring expense. If no transactions were found, we return an empty
          array.
        type: list<optional<RecurringExpenseSourceTransaction>>
      frequency: EnumRecurringExpenseFrequency
      average_transaction_amount:
        type: float
        docs: The average transaction amount of the recurring expense.
      median_transaction_amount:
        type: float
        docs: The median transaction amount of the recurring expense.
      days_since_last_transaction:
        type: integer
        docs: >
          Number of days since the last recurring expense occurred.


          Based on the frequency, you can infer how many days until the next
          charge will occur.
      category: EnumRecurringExpenseCategory
      payment_type: optional<EnumRecurringExpensePaymentType>
    source:
      openapi: ../openapi.yml
  RecurringExpensesPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<RecurringExpenses>>
        docs: Array of recurring expense objects.
    source:
      openapi: ../openapi.yml
  EnumInvestmentPortfolioType:
    enum:
      - FIXED_INCOME
      - OTHER
      - PENSION
      - VARIABLE_INCOME
    docs: |
      The portfolio type.

      We return one of the following values:

        - `FIXED_INCOME`
        - `OTHER`
        - `PENSION`
        - `VARIABLE_INCOME`
    source:
      openapi: ../openapi.yml
  InvestmentsPortfolioInstrumentPublicId:
    docs: The public identifiers for the instrument.
    properties:
      type:
        type: string
        docs: The type of public identifier for the instrument.
      value:
        type: string
        docs: The value of the `public_id.type`.
    source:
      openapi: ../openapi.yml
  EnumInvestmentPortfolioInstrumentType:
    enum:
      - BOND
      - DEPOSIT
      - ETF
      - FUND
      - OTHER
      - PENSION
      - STOCK
    docs: >
      The instrument type. For more information about instruments, please see
      our [Investments DevPortal
      article](https://developers.belvo.com/docs/investments#instruments).


      We return one of the following values:

        - `BOND`
        - `DEPOSIT`
        - `ETF`
        - `FUND`
        - `OTHER`
        - `PENSION`
        - `STOCK`
    source:
      openapi: ../openapi.yml
  InvestmentsPortfolioInstrumentRedemptionConditions:
    properties:
      type:
        type: string
        docs: The name of the redemption condition.
      value:
        type: string
        docs: The value of `redemption_conditions.type`.
    source:
      openapi: ../openapi.yml
  InvestmentsPortfolioInstrumentFees:
    properties:
      type:
        type: string
        docs: The fee type incurred when making the purchase of the instrument.
      value:
        type: float
        docs: >-
          The value of `fees.type`. The currency of the fee is the same as the
          currency of the instrument.
    source:
      openapi: ../openapi.yml
  InvestmentsPortfolioInstrumentInterestRate:
    properties:
      type:
        type: string
        docs: How often the interest rate is calculated on the instrument.
      value:
        type: float
        docs: >
          The interest rate for the instrument, in percent.



          ‚ÑπÔ∏è  **Note:** If the `interest_rate.index` is present, this value is a
          percentage of the index. For example, if `interest_rate.index` = `CDI`
          and `interest_rate.value` = `90`, then the total interest rate applied
          is 90% of the CDI.
      index:
        type: optional<string>
        docs: >-
          If applicable, the index type that the `interest_rates.value` is
          calculated against.
    source:
      openapi: ../openapi.yml
  InvestmentsPortfolioInstrument:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique ID for the current instrument.
        validation:
          format: uuid
      public_id:
        type: optional<list<InvestmentsPortfolioInstrumentPublicId>>
        docs: The public identifiers for the instrument.
      type: EnumInvestmentPortfolioInstrumentType
      subtype:
        type: optional<string>
        docs: The subtype for the instrument, as given by the institution.
      name:
        type: string
        docs: The name of the instrument, as given by the institution.
      currency:
        type: string
        docs: >
          The currency of the instrument. For example:


          - üáßüá∑ BRL (Brazilian Real)

          - üá®üá¥ COP (Colombian Peso)

          - üá≤üáΩ MXN (Mexican Peso)

          - üá∫üá∏ USD (US Dollar)



          Please note that other currencies other than in the list above may be
          returned.
      price:
        type: optional<float>
        docs: The current price of one share in the instrument.
      quantity:
        type: optional<float>
        docs: The total amount of shares owned in the instrument.
      balance_gross:
        type: optional<float>
        docs: The total gross value of the instrument (including taxes).
      balance_net:
        type: optional<float>
        docs: The total net value of the instrument (excluding taxes).
      average_acquisition_price:
        type: optional<float>
        docs: The average price of each share acquired in the instrument.
      profit:
        type: optional<float>
        docs: The current profit earned in the instrument.
      open_date:
        type: optional<string>
        docs: >-
          The start date of the instrument. Only applicable for instruments of
          type `bond` or `savings`.
        validation:
          format: date
      redemption_conditions:
        type: >-
          optional<list<optional<InvestmentsPortfolioInstrumentRedemptionConditions>>>
        docs: >
          An array of conditions that apply to the instrument in order to
          retrieve the final value.


          For example, the due date, the liquidity date, the previdencia type,
          and so on.
      fees:
        type: optional<list<optional<InvestmentsPortfolioInstrumentFees>>>
        docs: An array of fees that apply to the instrument.
      interest_rates:
        type: optional<list<optional<InvestmentsPortfolioInstrumentInterestRate>>>
        docs: An array of interest rates that apply to the instrument.
    source:
      openapi: ../openapi.yml
  InvestmentsPortfolio:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique ID for the current portfolio.
        validation:
          format: uuid
      name:
        type: string
        docs: |
          The name of the portfolio, as given in the institution.
      type: EnumInvestmentPortfolioType
      balance_type:
        type: optional<string>
        docs: >
          Indicates whether this account is either an `ASSET` or a `LIABILITY`.
          You can consider the balance of an `ASSET` as being positive, while
          the balance of a `LIABILITY` as negative.
      balance_gross:
        type: optional<float>
        docs: >
          The current gross total value of the entire portfolio and all its
          underlying instruments, as given by the institution.
      balance_net:
        type: optional<float>
        docs: >
          The total current value of the entire portfolio and all its underlying
          instruments, as given by the institution.


          ‚ÑπÔ∏è **Note:** In Brazil, this is usually calculated based on the net
          value (that is, not including tax).
      currency:
        type: string
        docs: >
          The currency of the portfolio. For example:



          - üáßüá∑ BRL (Brazilian Real)

          - üá®üá¥ COP (Colombian Peso)

          - üá≤üáΩ MXN (Mexican Peso)



          Please note that other currencies other than in the list above may be
          returned.
      instruments:
        type: optional<list<optional<InvestmentsPortfolioInstrument>>>
        docs: An array of instruments that fall into the investment portfolio.
    source:
      openapi: ../openapi.yml
  InvestmentsPortfoliosPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<InvestmentsPortfolio>>
        docs: Array of investment portfolio objects.
    source:
      openapi: ../openapi.yml
  ReceivablesTransactionAccount:
    docs: Basic information about the account associated with the transaction.
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the account associated with the transaction.
        validation:
          format: uuid
      institution: InstitutionAccount
    source:
      openapi: ../openapi.yml
  EnumReceivableTransactionType:
    type: optional<string>
    docs: >
      The type of transaction. For example, whether the transaction was a
      `VISA_DEBIT` or a `MASTERCARD_CREDIT`.


      We return one of the following values:

        - `VISA_CREDIT`
        - `VISA_DEBIT`
        - `MASTERCARD_CREDIT`
        - `MASTERCARD_DEBIT`
        - `ELO_CREDIT`
        - `ELO_DEBIT`
        - `null`
  EnumReceivableTransactionFeeType:
    type: optional<literal<"TRANSACTION_FEE">>
    docs: >-
      The type of fee applied to the transaction. We return one of the following
      values:

        - `TRANSACTION_FEE`
  RecevablesTransactionFees:
    docs: Details regarding the fees applied to the transaction.
    properties:
      type: optional<EnumReceivableTransactionFeeType>
      value:
        type: float
        docs: The value of `fees.type`.
    source:
      openapi: ../openapi.yml
  EnumReceivableTransactionStatus:
    enum:
      - APPROVED
      - CANCELLED
      - REVERTED
      - UNCATEGORIZED
    docs: |-
      The status of the transaction. Can be either:

        - `APPROVED`
        - `CANCELLED`
        - `REVERTED`
        - `UNCATEGORIZED`
    source:
      openapi: ../openapi.yml
  ReceivablesTransactionNumberOfInstallments:
    docs: >-
      Details regarding the number of installments for the transaction, if
      applicable.
    properties:
      paid:
        type: optional<integer>
        docs: >-
          The number of payments already made to pay the cost of the
          transaction.
      total:
        type: optional<integer>
        docs: The number of payments required to pay the cost of the transaction.
    source:
      openapi: ../openapi.yml
  ReceivablesTransaction:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current receivable transaction.
        validation:
          format: uuid
      account: ReceivablesTransactionAccount
      created_at:
        type: datetime
        docs: >-
          The ISO timestamp of when the data point was last updated in Belvo's
          database.
      collected_at:
        type: datetime
        docs: The ISO timestamp when the data point was collected.
      value_hour:
        type: string
        docs: >-
          The time that the transaction occurred, according to the institution,
          in `HH:MM` format.
      value_date:
        type: string
        docs: >-
          The date that the transactions occurred, according to the institution,
          in `YYYY-MM-DD` format.
        validation:
          format: date
      institution_transaction_id:
        type: string
        docs: >-
          Internal identification number that the acquirer uses to identify the
          transaction.

          ‚ÑπÔ∏è **Note**: For Brazil, this number is the NSU.
      currency:
        type: string
        docs: |-
          The currency of the transaction. For example:
          - üáßüá∑ BRL (Brazilian Real)
          - üá®üá¥ COP (Colombian Peso)
          - üá≤üáΩ MXN (Mexican Peso)

           Please note that currencies other than those listed above may be returned.
      type: optional<EnumReceivableTransactionType>
      gross_amount:
        type: optional<float>
        docs: The total gross amount of the transaction.
      net_amount:
        type: optional<float>
        docs: The net amount of the transaction.
      fees: list<RecevablesTransactionFees>
      status: optional<EnumReceivableTransactionStatus>
      number_of_installments: optional<ReceivablesTransactionNumberOfInstallments>
    source:
      openapi: ../openapi.yml
  ReceivablesTransactionsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<ReceivablesTransaction>>
        docs: Array of receivables objects.
    source:
      openapi: ../openapi.yml
  RiskInsightsTransactionMetrics:
    docs: >-
      Aggregated metrics calculated band on the user's transactions from
      checking, savings, credit card, and loan accounts.
    properties:
      num_transactions_1w:
        type: integer
        docs: >
          The total number of transactions analyzed to determine the risk
          insights for the last week (incoming and outgoing).
        default: 0
      num_transactions_1m:
        type: integer
        docs: >
          The total number of transactions analyzed to determine the risk
          insights for the last month (incoming and outgoing).
        default: 0
      num_transactions_3m:
        type: integer
        docs: >
          The total number of transactions analyzed to determine the risk
          insights for the last three months (incoming and outgoing).
        default: 0
      num_incoming_transactions_1w:
        type: integer
        docs: >
          The total number of inflow transactions for the last week.


          ‚ÑπÔ∏è **Note**: If there are no transactions between the request date and
          the last seven or thirty days, the value is `0`.


          If the account has not been open long enough to have the transaction
          data for a given period, we return `null`. For example, if the account
          has only been open for five days, we return values for `_1w` and
          `_1m`, however, the value for `_3m` will be `null`.
        default: 0
      num_incoming_transactions_1m:
        type: integer
        docs: >
          The total number of inflow transactions for the last month.


          ‚ÑπÔ∏è **Note**: If there are no transactions between the request date and
          the last seven or thirty days, the value is `0`.


          If the account has not been open long enough to have the transaction
          data for a given period, we return `null`. For example, if the account
          has only been open for five days, we return values for `_1w` and
          `_1m`, however, the value for `_3m` will be `null`.
        default: 0
      num_incoming_transactions_3m:
        type: integer
        docs: >
          The total number of inflow transactions for the last three months.


          ‚ÑπÔ∏è **Note**: If there are no transactions between the request date and
          the last seven or thirty days, the value is `0`.


          If the account has not been open long enough to have the transaction
          data for a given period, we return `null`. For example, if the account
          has only been open for five days, we return values for `_1w` and
          `_1m`, however, the value for `_3m` will be `null`.
        default: 0
      num_outgoing_transactions_1w:
        type: integer
        docs: >
          To total number of outflow transactions in the last week.


          ‚ÑπÔ∏è **Note**: If there are no transactions between the request date and
          the last seven or thirty days, the value is `0`.


          If the account has not been open long enough to have the transaction
          data for a given period, we return `null`. For example, if the account
          has only been open for five days, we return values for `_1w` and
          `_1m`, however, the value for `_3m` will be `null`.
        default: 0
      num_outgoing_transactions_1m:
        type: integer
        docs: >
          To total number of outflow transactions in the last month.


          ‚ÑπÔ∏è **Note**: If there are no transactions between the request date and
          the last seven or thirty days, the value is `0`.


          If the account has not been open long enough to have the transaction
          data for a given period, we return `null`. For example, if the account
          has only been open for five days, we return values for `_1w` and
          `_1m`, however, the value for `_3m` will be `null`.
        default: 0
      num_outgoing_transactions_3m:
        type: integer
        docs: >
          To total number of outflow transactions in the last three months.


          ‚ÑπÔ∏è **Note**: If there are no transactions between the request date and
          the last seven or thirty days, the value is `0`.


          If the account has not been open long enough to have the transaction
          data for a given period, we return `null`. For example, if the account
          has only been open for five days, we return values for `_1w` and
          `_1m`, however, the value for `_3m` will be `null`.
        default: 0
      sum_incoming_amount_1w:
        type: optional<float>
        docs: |
          The total sum of all inflow transactions for the last week.
      sum_incoming_amount_1m:
        type: optional<float>
        docs: |
          The total sum of all inflow transactions for the last month.
      sum_incoming_amount_3m:
        type: optional<float>
        docs: |
          The total sum of all inflow transactions for the last three months.
      sum_outgoing_amount_1w:
        type: optional<float>
        docs: |
          The total sum of all outflow transactions for the last week.
      sum_outgoing_amount_1m:
        type: optional<float>
        docs: |
          The total sum of all outflow transactions for the last month.
      sum_outgoing_amount_3m:
        type: optional<float>
        docs: |
          The total sum of all outflow transactions for the last three months.
      max_incoming_amount_1w:
        type: optional<float>
        docs: |
          The highest value inflow transaction in the last week.
      max_incoming_amount_1m:
        type: optional<float>
        docs: |
          The highest value inflow transaction in the last month.
      max_incoming_amount_3m:
        type: optional<float>
        docs: |
          The highest value inflow transaction in the last three months.
      max_outgoing_amount_1w:
        type: optional<float>
        docs: |
          The highest value outflow transaction in the last week.
      max_outgoing_amount_1m:
        type: optional<float>
        docs: |
          The highest value outflow transaction in the last month.
      max_outgoing_amount_3m:
        type: optional<float>
        docs: |
          The highest value outflow transaction in the last three months.
      mean_incoming_amount_1w:
        type: optional<float>
        docs: |
          The mean incoming value of all transactions in the last week.
      mean_incoming_amount_1m:
        type: optional<float>
        docs: |
          The mean incoming value of all transactions in the last month.
      mean_incoming_amount_3m:
        type: optional<float>
        docs: |
          The mean incoming value of all transactions in the last three months.
      mean_outgoing_amount_1w:
        type: optional<float>
        docs: |
          The mean outgoing value of all transaction in the last week.
      mean_outgoing_amount_1m:
        type: optional<float>
        docs: |
          The mean outgoing value of all transaction in the last month.
      mean_outgoing_amount_3m:
        type: optional<float>
        docs: |
          The mean outgoing value of all transaction in the last three months.
    source:
      openapi: ../openapi.yml
  RiskInsightsBalanceMetrics:
    docs: >-
      Balance metrics calculated based on the user's balances from checking and
      savings accounts.
    properties:
      min_balance_1w:
        type: optional<float>
        docs: |
          The minimum balance in the period (one week).
      min_balance_1m:
        type: optional<float>
        docs: |
          The minimum balance in the period (one month).
      min_balance_3m:
        type: optional<float>
        docs: |
          The minimum balance in the period (three months).
      max_balance_1w:
        type: optional<float>
        docs: |
          The maximum balance in the period (one week).
      max_balance_1m:
        type: optional<float>
        docs: |
          The maximum balance in the period (one month).
      max_balance_3m:
        type: optional<float>
        docs: |
          The maximum balance in the period (three months).
      closing_balance:
        type: optional<float>
        docs: |
          The balance of all the accounts at the `collected_at` time.
      days_balance_below_0_1w:
        type: optional<integer>
        docs: >
          The number of days that the total balance of the account is less than
          or equal to 0 in the last week.
      days_balance_below_0_1m:
        type: optional<integer>
        docs: >
          The number of days that the total balance of the account is less than
          or equal to 0 in the last month.
      days_balance_below_0_3m:
        type: optional<integer>
        docs: >
          The number of days that the total balance of the account is less than
          or equal to 0 in the last three months.
      days_balance_below_x_1w:
        type: optional<integer>
        docs: >
          The number of days that the total balance of the account is less than
          or equal to the amount specified in `balance_threshold_x` in the last
          week.
      days_balance_below_x_1m:
        type: optional<integer>
        docs: >
          The number of days that the total balance of the account is less than
          or equal to the amount specified in `balance_threshold_x` in the last
          month.
      days_balance_below_x_3m:
        type: optional<integer>
        docs: >
          The number of days that the total balance of the account is less than
          or equal to the amount specified in `balance_threshold_x` in the last
          three months.
      balance_threshold_x:
        type: float
        docs: >
          The threshold used to compute `days_balance_below_x_period`. Please
          note, this is value is country specific (both in terms of the amount
          and the currency).
    source:
      openapi: ../openapi.yml
  RiskInsightsCashflowMetrics:
    docs: >
      Aggregated metrics calculated based on the user's transactions from
      checking, savings, credit, and loan accounts.


      However, internal transfers (transfers between accounts belonging to the
      same link) are not used in the calculation.
    properties:
      sum_positive_1w:
        type: optional<float>
        docs: >
          Sum total of all transactions leading to a positive cashflow in the
          last week (counted from the time of the request).
      sum_positive_1m:
        type: optional<float>
        docs: >
          Sum total of all transactions leading to a positive cashflow in the
          last month (counted from the time of the request).
      sum_positive_3m:
        type: optional<float>
        docs: >
          Sum total of all transactions leading to a positive cashflow in the
          last three months (counted from the time of the request).
      sum_negative_1w:
        type: optional<float>
        docs: >
          Sum total of all transactions leading to a negative cashflow in the
          last week (counted from the time of the request).
      sum_negative_1m:
        type: optional<float>
        docs: >
          Sum total of all transactions leading to a negative cashflow in the
          last month (counted from the time of the request).
      sum_negative_3m:
        type: optional<float>
        docs: >
          Sum total of all transactions leading to a negative cashflow in the
          last three months (counted from the time of the request).
      positive_to_negative_ratio_1w:
        type: optional<float>
        docs: "The ratio between sum_positive / sum_negative  in the last week (counted from the time of the request).\n\n‚ÑπÔ∏è\_If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n\n**Note**: In the case that there have been no outgoing transactions, the value will be `null`.\n"
      positive_to_negative_ratio_1m:
        type: optional<float>
        docs: "The ratio between sum_positive / sum_negative  in the last month (counted from the time of the request).\n\n‚ÑπÔ∏è\_If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n"
      positive_to_negative_ratio_3m:
        type: optional<float>
        docs: "The ratio between sum_positive / sum_negative  in the last three months (counted from the time of the request).\n\n‚ÑπÔ∏è\_If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n"
    source:
      openapi: ../openapi.yml
  RiskInsightsCreditCardMetrics:
    docs: Aggregated metrics calculated based on the link's credit card accounts.
    properties:
      num_accounts:
        type: integer
        docs: |
          Number of credit cards accounts associated to the link.
        validation:
          min: 0
      sum_credit_limit:
        type: optional<float>
        docs: |
          Sum total of all credit cards' limits.
      sum_credit_used:
        type: optional<float>
        docs: |
          Sum total of all credit used.
    source:
      openapi: ../openapi.yml
  RiskInsightsLoansMetrics:
    docs: Aggregated metrics calculated based on the user's loan accounts.
    properties:
      num_accounts:
        type: integer
        docs: |
          Number of loan accounts associated with the link.
      sum_loans_principal:
        type: optional<float>
        docs: |
          Sum total of the principal for all of the link's loan accounts.
      sum_loans_outstanding_principal:
        type: optional<float>
        docs: >
          Sum total of the outstanding principal for all the link's loan
          accounts.
      sum_loans_monthly_payment:
        type: optional<float>
        docs: |
          Sum total of the monthly payments for all the link's loan accounts.
    source:
      openapi: ../openapi.yml
  RiskInsights:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the risk insights request.
        validation:
          format: uuid
      link:
        type: string
        docs: The `link.id` the risk insights analysis belongs to.
        validation:
          format: uuid
      accounts:
        type: optional<list<string>>
        docs: >-
          An array of Belvo-generated account numbers (UUIDs) that were used
          during the risk insights analysis. If no accounts were found, we
          return an empty array.
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      transactions_metrics: optional<RiskInsightsTransactionMetrics>
      balances_metrics: optional<RiskInsightsBalanceMetrics>
      cashflow_metrics: optional<RiskInsightsCashflowMetrics>
      credit_cards_metrics: optional<RiskInsightsCreditCardMetrics>
      loans_metrics: optional<RiskInsightsLoansMetrics>
    source:
      openapi: ../openapi.yml
  RiskInsightsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<RiskInsights>>
        docs: Array of risk insights objects.
    source:
      openapi: ../openapi.yml
  EnumTaxRetentionReceiverNationality:
    enum:
      - NATIONAL
      - FOREIGN
    docs: >
      Whether the invoice receiver is a Mexican national or not. If the receiver
      is not considered a Mexican national, the retained taxes can be calculated
      differently. Possible values:
        - `NATIONAL`
        - `FOREIGN`
    source:
      openapi: ../openapi.yml
  EnumTaxRetentionPaymentStatus:
    enum:
      - PAID
      - PROVISIONED
    docs: |
      Indicates whether or not the tax has been paid or not. Can be either:
        - `PAID`
        - `PROVISIONED`
    source:
      openapi: ../openapi.yml
  RetentionBreakdown:
    docs: A breakdown of the retained taxes
    properties:
      base_amount:
        type: optional<float>
        docs: |
          The base amount that was used to calculate the tax retention.
      tax_type:
        type: optional<string>
        docs: >
          Optional attribute to indicate the type of tax withheld for the period
          or year according to the [SAT
          catalog](https://developers.belvo.com/docs/sat-catalogs#retention-code).
      retained_amount:
        type: optional<float>
        docs: |
          The amount retained.
      payment_status: optional<EnumTaxRetentionPaymentStatus>
    source:
      openapi: ../openapi.yml
  TaxRetentions:
    properties:
      id:
        type: optional<string>
        docs: >-
          Belvo's unique identifier used to reference the current tax retention
          statement.
        validation:
          format: uuid
      link:
        type: optional<string>
        docs: The `link.id` the tax retention belongs to.
        validation:
          format: uuid
      collected_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the data point was collected.
      created_at:
        type: optional<datetime>
        docs: >
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      invoice_identification:
        type: optional<string>
        docs: >
          The fiscal institution's unique ID for the invoice that the tax
          retention relates to.
        validation:
          format: uuid
      version:
        type: optional<string>
        docs: |
          The CFDI version of the tax retentions.
      code:
        type: optional<integer>
        docs: >
          The tax retention code. For more information, see our [SAT Catalogs
          DevPortal
          article](https://developers.belvo.com/docs/sat-catalogs#retention-code).
      issued_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the tax retention was issued.
      certified_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the tax retention was certified.
      cancelled_at:
        type: optional<datetime>
        docs: >
          The ISO-8601 timestamp of when the tax retention was canceled (if
          applicable).
      sender_id:
        type: optional<string>
        docs: |
          The fiscal ID of the invoice sender.
      sender_name:
        type: optional<string>
        docs: |
          The name of the invoice sender.
      receiver_nationality: optional<EnumTaxRetentionReceiverNationality>
      receiver_id:
        type: optional<string>
        docs: |
          The fiscal ID of the invoice receiver.
      receiver_name:
        type: optional<string>
        docs: |
          The name of the invoice receiver.
      total_invoice_amount:
        type: optional<float>
        docs: |
          The total amount of the invoice that the tax retention relates to.
      total_exempt_amount:
        type: optional<float>
        docs: |
          Total amount that is exempt from taxation.
      total_retained_amount:
        type: optional<float>
        docs: |
          Total tax retained.
      total_taxable_amount:
        type: optional<float>
        docs: >
          The total amount that can be taxed. Calculated as
          `total_invoice_amount` - `total_exempt_amount`.
      retention_breakdown:
        type: optional<list<RetentionBreakdown>>
        docs: A breakdown of the retained taxes.
      xml:
        type: optional<string>
        docs: |
          The tax retention document in XML form.
    source:
      openapi: ../openapi.yml
  TaxRetentionsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxRetentions>>
        docs: Array of tax retentions objects.
    source:
      openapi: ../openapi.yml
  EnumTaxRetentionType:
    enum:
      - OUTFLOW
      - INFLOW
    docs: >
      The type of tax retention in relation to the invoice (from the perspective
      of the Link owner).


      - `OUTFLOW` relates to a tax retention for a sent invoice.

      - `INFLOW` related to a tax retention for a received invoice.
    source:
      openapi: ../openapi.yml
  DocumentInformationIndividual:
    docs: Object containing detailed information about the fiscal document.
    properties:
      name:
        type: string
        docs: The name of the tax document.
      type:
        type: string
        docs: >-
          The type of tax declaration form. For DIAN, this will be either `110`
          or `210`.
      form_number:
        type: string
        docs: Institution-provided identifier for the tax declaration.
      year:
        type: optional<integer>
        docs: |
          The year of this tax declaration.
    source:
      openapi: ../openapi.yml
  DocumentIdIndividual:
    docs: Object containing information about the ID document of the tax payer.
    properties:
      document_type:
        type: string
        docs: The type of ID document.
      document_number:
        type: string
        docs: The number of the ID document.
    source:
      openapi: ../openapi.yml
  ReportingId:
    docs: >-
      Object containing information about where the tax payer reports their
      income.
    properties:
      reporting_type:
        type: string
        docs: >-
          The type of reporting ID. For DIAN, this is the sectional address code
          (*Codigo Dirrecion Seccional*)
      reporting_value:
        type: string
        docs: The value of the reporting ID.
    source:
      openapi: ../openapi.yml
  TaxPayerInformationIndividual:
    docs: Object containing information about the tax payer.
    properties:
      first_last_name:
        type: string
        docs: The tax payer's first last name.
      second_last_name:
        type: string
        docs: The tax payer's second last name.
      first_name:
        type: string
        docs: The tax payer's first name.
      other_names:
        type: string
        docs: Additional names of the tax payer.
      main_economic_activity:
        type: string
        docs: The main economic activity the tax payer is involved in.
      document_id: DocumentIdIndividual
      reporting_id: ReportingId
    source:
      openapi: ../openapi.yml
  EquityStatementIndividual:
    docs: Object containing the general fiscal situation of the taxpayer.
    properties:
      total_gross_equity:
        type: float
        docs: The total gross equity of the tax payer.
      total_debts:
        type: float
        docs: The total debts of the tax_payer
      total_net_equity:
        type: float
        docs: The total net equity value of the taxpayer.
    source:
      openapi: ../openapi.yml
  GrossIncomeIndividual:
    docs: Object containing the declared gross income of the tax payer.
    properties:
      earned_income:
        type: float
        docs: Income received from employment.
      fee_based_income:
        type: float
        docs: >-
          Income received from emitted invoices (for example, income that
          independent contractors or freelancers receive).
      capital_income:
        type: float
        docs: >-
          Income received from an investment (such as dividends or from renting
          a property).
      non_labor_income:
        type: float
        docs: >-
          Income that cannot be classified into the other three fields (such as
          income from cryptocurrencies or regular transfers from parents).
    source:
      openapi: ../openapi.yml
  NonTaxableIncomeIndividual:
    docs: Object containing the declared non-taxable income of the tax payer.
    properties:
      earned_income:
        type: float
        docs: Income received from employment.
      fee_based_income:
        type: float
        docs: >-
          Income received from emitted invoices (for example, income independent
          contractors or freelancers receive).
      capital_income:
        type: float
        docs: >-
          Income received from an investment (such as dividends or from renting
          a property).
      non_labor_income:
        type: float
        docs: >-
          Income that cannot be classified into the other three fields (such as
          income from cryptocurrencies or regular transfers from parents).
    source:
      openapi: ../openapi.yml
  NetIncomeIndividual:
    docs: >-
      Object containing the declared net income of the tax payer. The values are
      calculated as the `gross_income` - `non_taxable_income`.
    properties:
      earned_income:
        type: float
        docs: Income received from employment.
      fee_based_income:
        type: float
        docs: >-
          Income received from emitted invoices (for example, income independent
          contractors or freelancers receive).
      capital_income:
        type: float
        docs: >-
          Income received from an investment (such as dividends or from renting
          a property).
      non_labor_income:
        type: float
        docs: >-
          Income that cannot be classified into the other three fields (such as
          income from cryptocurrencies or regular transfers from parents).
    source:
      openapi: ../openapi.yml
  AnnualTotalsIndividual:
    docs: >-
      Object containing the tax payers total exempt, deducted, and ordinary net
      incomes.
    properties:
      total_exempt_income:
        type: float
        docs: Total income that is not taxable, according to the institution.
      total_applicable_deductions:
        type: float
        docs: >-
          Total deductions that the taxpayer can apply to their income,
          according to the institution.
      total_exemptions_and_deductions:
        type: float
        docs: >-
          Sum total of all exempt and deductions that can be applied to the
          taxpayer's income.
      total_ordinary_net_income:
        type: float
        docs: >-
          Sum total of the taxpayer's income (gross income - exemptions -
          deductions).
    source:
      openapi: ../openapi.yml
  AnnualIncomeStatementIndividual:
    docs: >-
      Object containing the reported annual incomes, deductions, and final
      balances of the tax payer.
    properties:
      gross_income: GrossIncomeIndividual
      non_taxable_income: NonTaxableIncomeIndividual
      net_income: NetIncomeIndividual
      annual_totals: AnnualTotalsIndividual
    source:
      openapi: ../openapi.yml
  PensionIncomeStatementIndividual:
    docs: Object containing the tax payer's total pension income.
    properties:
      net_pension_income:
        type: float
        docs: The total net pension of the taxpayer.
      net_taxable_pension_income:
        type: float
        docs: The total taxable pension income of the taxpayer.
    source:
      openapi: ../openapi.yml
  TaxAssessmentIndividual:
    docs: >-
      Object containing the calculated tax assessment of the tax payer. This
      includes the total taxable income, the income tax applied, and taxes
      already withheld.
    properties:
      fortuitous_profit_tax:
        type: float
        docs: >-
          The tax applied on your unexpected income (such as lottery wins or
          house sales).
      total_tax_on_taxable_net_income:
        type: float
        docs: >-
          The calculated total tax that can be applied on the tax payer's
          taxable income (total income - exemptions - deductions).
      net_income_tax:
        type: float
        docs: >-
          After additional deductions that you can apply, this will be the net
          income tax. If not further deduction are identified, this value will
          be the same as `total_tax_on_taxable_net_income`.
      total_tax_due:
        type: float
        docs: >-
          After further deductions, this is the final calculated tax that the
          taxpayer is required to pay.
      previous_year_balance:
        type: float
        docs: >
          Only applicable for DIAN.



          The amount the tax payer has as a "credit" fromt he previous year
          (this is equal to the `balance_refundable`) of the previous year.
      total_withheld_tax:
        type: float
        docs: The total tax already withheld in the current fiscal year.
      balance_payable:
        type: float
        docs: How much the tax payer is required to pay.
      balance_refundable:
        type: float
        docs: >-
          How much the tax payer is expected to receive. For DIAN, this will
          count as credit for the next fiscal year (see
          `previous_year_balance`).
      total_payment:
        type: float
        docs: >-
          The total the tax payer is required to pay, taking into account
          deductions and fiscal credits.
    source:
      openapi: ../openapi.yml
  TaxDeclarationIndividual:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current tax declaration.
        validation:
          format: uuid
      link:
        type: string
        docs: >-
          Belvo's unique ID of the user that this tax declaration is associated
          with.
        validation:
          format: uuid
      collected_at:
        type: datetime
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      document_information: DocumentInformationIndividual
      tax_payer_information: TaxPayerInformationIndividual
      equity_statement: EquityStatementIndividual
      annual_income_statement: AnnualIncomeStatementIndividual
      pension_income_statement: PensionIncomeStatementIndividual
      tax_assessment: TaxAssessmentIndividual
      date_issued:
        type: string
        docs: The date the tax declaration was issued by the fiscal institution.
        validation:
          format: date
      pdf:
        type: optional<string>
        docs: The PDF of the tax declaration, as a binary string.
    source:
      openapi: ../openapi.yml
  TaxDeclarationIndividualPaginated:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxDeclarationIndividual>>
        docs: Array of Individual Tax Declaration objects.
    source:
      openapi: ../openapi.yml
  DocumentInformationBusiness:
    docs: Object containing detailed information about the fiscal document.
    properties:
      name:
        type: string
        docs: The name of the tax document.
      type:
        type: string
        docs: >-
          The type of tax declaration form. For DIAN, this will be either `110`
          or `210`.
      form_number:
        type: string
        docs: The institution-provided identifier for the tax declaration.
      year:
        type: optional<integer>
        docs: |
          The year of this tax declaration.
    source:
      openapi: ../openapi.yml
  DocumentIdBusiness:
    docs: Object containing information about the ID document of the tax payer.
    properties:
      document_type:
        type: string
        docs: The type of ID document.
      document_number:
        type: string
        docs: The number of the ID document.
    source:
      openapi: ../openapi.yml
  TaxPayerInformationBusiness:
    docs: Object containing information about the tax payer.
    properties:
      first_last_name:
        type: optional<string>
        docs: The tax payer's first last name.
      second_last_name:
        type: optional<string>
        docs: The tax payer's second last name.
      first_name:
        type: optional<string>
        docs: The tax payer's first name.
      other_names:
        type: optional<string>
        docs: Additional names of the tax payer.
      company_name:
        type: string
        docs: The name of the company, as registered at the institution.
      main_economic_activity:
        type: string
        docs: The main economic activity the tax payer is involved in.
      document_id: DocumentIdBusiness
      reporting_id: ReportingId
    source:
      openapi: ../openapi.yml
  EquityStatementBusiness:
    docs: Object containing the general fiscal situation of the taxpayer.
    properties:
      cash_and_cash_equivalents:
        type: float
        docs: >-
          Total cash (or cash equivalents) that the business currently holds at
          the end of the fiscal year.
      investments_and_derivative_financial_instruments:
        type: float
        docs: >-
          Total value of all investments, stocks, or similar, that the company
          has.
      accounts_documents_and_finance_leases_receivable:
        type: float
        docs: >-
          Total of all payments the company expects to receive (for example,
          from partial invoices that have not been paid yet).
      inventory:
        type: float
        docs: Total financial value of the company's sellable inventory.
      property_plant_and_equipment_investment_properties:
        type: float
        docs: >-
          Total value of real estate, plant infrastructure, or equipment that
          has been purchased.
      total_gross_equity:
        type: float
        docs: Total gross equity.
      debts:
        type: float
        docs: Total debts that the company currently has.
      total_net_equity:
        type: float
        docs: The total net equity of the company (`total_gross_equity` - `debts`).
    source:
      openapi: ../openapi.yml
  AnnualIncomeStatementBusiness:
    docs: >-
      Object containing the reported annual incomes, deductions, and final
      balances of the tax payer.
    properties:
      gross_income_from_ordinary_activities:
        type: float
        docs: >-
          Total gross income that the company generated from their main economic
          activity.
      dividends:
        type: float
        docs: Total income that the company generated from dividends.
      other_income:
        type: float
        docs: >-
          Total income that the company generated from activities not associated
          with their main economic activity.
      total_gross_income:
        type: float
        docs: Total gross income the company generated.
      returns_rebates_and_discounts_on_sales:
        type: float
        docs: >-
          Total value of cancelled orders, corrected invoices, or similar, that
          can be discounted from the `total_gross_income`.
      total_net_income:
        type: float
        docs: >-
          Total net income of the company, taking into account
          `returns_rebates_and_discounts_on_sales`.
    source:
      openapi: ../openapi.yml
  AnnualCostsAndDeductionsStatementBusiness:
    docs: Object containing the reported annual costs and applicable deductions.
    properties:
      costs:
        type: float
        docs: Total costs for the company to operate.
      administration_expenses:
        type: float
        docs: >-
          Total costs of the company related to training, company offsites, or
          similar.
      distribution_and_sales_expenses:
        type: float
        docs: >-
          Total costs the company incurred in order to distribute or sell their
          product.
      financial_expenses:
        type: float
        docs: >-
          Total value of any fees incurred by the company to operate (such as
          bank fees).
      total_costs_and_deductible_expenses:
        type: float
        docs: Total value of all costs and dedictible expenses.
    source:
      openapi: ../openapi.yml
  TaxAssessmentBusiness:
    docs: >-
      Object containing the calculated tax assessment of the tax payer. This
      includes the total taxable income, the income tax applied, and taxes
      already withheld.
    properties:
      net_income_taxable:
        type: float
        docs: The net income on which tax can be applied.
      fortuitous_profit_tax:
        type: float
        docs: >-
          The tax applied on your unexpected income (such as lottery wins or
          house sales).
      total_tax_on_taxable_net_income:
        type: float
        docs: >-
          The calculated total tax that can be applied on the tax payer's
          taxable income (total income - exemptions - deductions).
      net_income_tax:
        type: float
        docs: >-
          After additional deductions that you can apply, this will be the net
          income tax. If no further deduction are identified, this value will be
          the same as `total_tax_on_taxable_net_income`.
      total_tax_due:
        type: float
        docs: >-
          After further deductions, this is the final calculated tax that the
          taxpayer is required to pay.
      total_withholdings_for_the_taxable_year_to_be_declared:
        type: float
        docs: How much the tax payer has already paid througout the fiscal year.
      total_balance_payable:
        type: float
        docs: How much the tax payer is required to pay.
      total_balance_in_favor:
        type: float
        docs: How much the tax payer is expected to receive.
      total_payment:
        type: float
        docs: >-
          The total the tax payer is required to pay, taking into account
          deductions and fiscal credits.
    source:
      openapi: ../openapi.yml
  TaxDeclarationBusiness:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current tax declaration.
        validation:
          format: uuid
      link:
        type: string
        docs: >-
          Belvo's unique ID of the user that this tax declaration is associated
          with.
        validation:
          format: uuid
      collected_at:
        type: datetime
        docs: The ISO-8601 timestamp when the data point was collected.
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      document_information: DocumentInformationBusiness
      tax_payer_information: TaxPayerInformationBusiness
      equity_statement: EquityStatementBusiness
      annual_income_statement: AnnualIncomeStatementBusiness
      annual_costs_and_deductions_statement: AnnualCostsAndDeductionsStatementBusiness
      tax_assessment: TaxAssessmentBusiness
      date_issued:
        type: string
        docs: The date the tax declaration was issued by the fiscal institution.
        validation:
          format: date
      pdf:
        type: optional<string>
        docs: The PDF of the tax declaration, as a binary string.
    source:
      openapi: ../openapi.yml
  TaxDeclarationBusinessPaginated:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<TaxDeclarationBusiness>>
        docs: Array of Business Tax Declaration objects.
    source:
      openapi: ../openapi.yml
  EnumEmploymentRecordStatus:
    enum:
      - EMPLOYED
      - UNEMPLOYED
    docs: >
      Indicates whether or not the individual is currently `EMPLOYED` or
      `UNEMPLOYED`.
    source:
      openapi: ../openapi.yml
  EmploymentRecordEntitlement:
    docs: Details regarding the benefits the individual is entitled to.
    properties:
      entitled_to_health_insurance:
        type: optional<boolean>
        docs: >
          Indicated whether or not the individual is entitled to health
          insurance.
      entitled_to_company_benefits:
        type: optional<boolean>
        docs: >
          Indicates whether or not the individual is entitled to company
          benefits.
      valid_until:
        type: optional<string>
        docs: >
          Date until when the individual is covered by health insurance and/or
          company benefits. If `null` the employee is currently working and no
          end date is required.
        validation:
          format: date
      status: optional<EnumEmploymentRecordStatus>
    source:
      openapi: ../openapi.yml
  EnumEmploymentRecordDocumentType:
    enum:
      - NSS
      - CURP
    docs: >
      The type of document related to the individual. We return one of the
      following values:

        - `NSS`
        - `CURP`
    source:
      openapi: ../openapi.yml
  EmploymentRecordDocumentId:
    docs: Details regarding the individual's ID documents.
    properties:
      document_type: optional<EnumEmploymentRecordDocumentType>
      document_number:
        type: optional<string>
        docs: |
          The ID document's number (as a string).
    source:
      openapi: ../openapi.yml
  EmploymentRecordPersonalData:
    docs: Details regarding the personal information of the individual.
    properties:
      official_name:
        type: optional<string>
        docs: |
          The legal name of the individual
      first_name:
        type: optional<string>
        docs: |
          The first name of the individual.
      last_name:
        type: optional<string>
        docs: |
          The last name of the individual.
      email:
        type: optional<string>
        docs: >
          The email address of the individual (as provided in the initial POST
          request).
      birth_date:
        type: optional<string>
        docs: |
          The date of the birth of the individual, in `YYYY-MM-DD` format.
        validation:
          format: date
      entitlements: optional<EmploymentRecordEntitlement>
      document_ids:
        type: optional<list<EmploymentRecordDocumentId>>
        docs: Details regarding the individual's ID documents.
    source:
      openapi: ../openapi.yml
  EmploymentRecordSocialSecuritySummary:
    docs: Details regarding the individual's social security contributions.
    properties:
      weeks_redeemed:
        type: optional<integer>
        docs: |
          Number of weeks the individual needed to take out of their pension.
      weeks_reinstated:
        type: optional<integer>
        docs: >
          Number of weeks the individual has paid back into their pension
          (*AFORE*), after having redeemed them previously.
      weeks_contributed:
        type: optional<integer>
        docs: >
          Number of weeks the individual has contributed to their social
          security, based on the number of weeks the individual has worked
          according to IMSS.
    source:
      openapi: ../openapi.yml
  EnumEmploymentRecordStatusUpdateEvents:
    enum:
      - DISMISSED_RESIGNED
      - SALARY_MODIFICATION
      - HIRED
      - VOLUNTARY_CONTRIBUTION
      - ABSENCE
      - SICK_LEAVE
    docs: >
      The event that caused the change in employment status or salary. We return
      one of the following values:
        
        - `DISMISSED_RESIGNED`
        - `SALARY_MODIFICATION`
        - `HIRED`
        - `VOLUNTARY_CONTRIBUTION`
        - `ABSENCE`
        - `SICK_LEAVE`
    source:
      openapi: ../openapi.yml
  EmploymentRecordEmploymentStatusUpdates:
    docs: Details regarding any employment changes of the individual.
    properties:
      event: optional<EnumEmploymentRecordStatusUpdateEvents>
      base_salary:
        type: optional<float>
        docs: |
          The base salary of the individual, current as of the `update_date`.
      update_date:
        type: optional<string>
        docs: |
          The date that the employment event occured, in `YYYY-MM-DD` format.
        validation:
          format: date
    source:
      openapi: ../openapi.yml
  EmploymentRecordDetail:
    docs: Details regarding the individual's employment history.
    properties:
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      employer:
        type: optional<string>
        docs: |
          The official name of the employer.
      employer_id:
        type: optional<string>
        docs: |
          The official ID of the employer, according to the country.
      start_date:
        type: optional<string>
        docs: |
          Date when employment started, in `YYYY-MM-DD` format.
        validation:
          format: date
      end_date:
        type: optional<string>
        docs: |
          Date when employment finished, in `YYYY-MM-DD` format.
        validation:
          format: date
      weeks_employed:
        type: optional<integer>
        docs: |
          Number of weeks that the individual was employed.
      state:
        type: optional<string>
        docs: >
          In what geographical state the individual was employed, according to
          the country.
      most_recent_base_salary:
        type: optional<float>
        docs: >
          The most recent base salary the individual earned.


          For Mexico, this is the *daily* rate that the individual earned,
          including the perks that the individual is entitled to throughout the
          year.
      monthly_salary:
        type: optional<float>
        docs: |
          The monthly salary of the individual, including any additional perks.
      currency:
        type: optional<string>
        docs: |
          The three-letter currency code in which the salary is paid.
      employment_status_updates:
        type: optional<list<EmploymentRecordEmploymentStatusUpdates>>
        docs: Details regarding any employment changes of the individual.
    source:
      openapi: ../openapi.yml
  EmploymentRecordFile:
    docs: Additional PDF binary files relating to the individual's employment.
    properties:
      type:
        type: optional<string>
        docs: |
          The title of the document.
      value:
        type: optional<string>
        docs: |
          The PDF binary of the file (as a string).
    source:
      openapi: ../openapi.yml
  EmploymentRecord:
    docs: Emploment record response payload
    properties:
      id:
        type: optional<string>
        docs: The unique identifier created by Belvo for the current IMSS statement.
        validation:
          format: uuid
      link:
        type: optional<string>
        docs: The unique identifier created by Belvo for the current user.
        validation:
          format: uuid
      created_at:
        type: optional<datetime>
        docs: >-
          The ISO-8601 timestamp of when the data point was initially created in
          Belvo's database.
      collected_at:
        type: optional<datetime>
        docs: The ISO-8601 timestamp when the data point was collected.
      report_date:
        type: optional<string>
        docs: >-
          The date when the employment record report was generated, in
          `YYYY-MM-DD` format.
        validation:
          format: date
      internal_identification:
        type: optional<string>
        docs: >-
          Unique ID for user according to the institution. For IMSS Mexico, this
          is the CURP.
      personal_data: optional<EmploymentRecordPersonalData>
      social_security_summary: optional<EmploymentRecordSocialSecuritySummary>
      employment_records:
        type: optional<list<EmploymentRecordDetail>>
        docs: Details regarding the individual's employment history.
      files:
        type: optional<list<EmploymentRecordFile>>
        docs: Additional PDF binary files relating to the individual's employment.
    source:
      openapi: ../openapi.yml
  EmploymentRecordsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `accounts` or
          `owners`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<EmploymentRecord>>
        docs: Array of employment record objects.
    source:
      openapi: ../openapi.yml
  EnumIncomeVerificationAccountHolderType:
    type: literal<"INDIVIDUAL">
    docs: |-
      The type of account holder. Can be:

        - `INDIVIDUAL`
  EnumIncomeVerificationAccountCategory:
    enum:
      - CHECKING_ACCOUNT
      - SAVINGS_ACCOUNT
    docs: |-
      The type of account.
      Can be either:
        - `CHECKING_ACCOUNT`
        - `SAVINGS_ACCOUNT`
    source:
      openapi: ../openapi.yml
  EnumIncomeVerificationType:
    type: optional<literal<"INFLOW">>
    docs: |
      The direction of the transaction:
        
      - `INFLOW` indicates money coming into the account.
  EyodIncomeVerificationBodyRequest:
    properties:
      transaction_id:
        type: string
        docs: Your unique ID for the income.
      account_holder_type: EnumIncomeVerificationAccountHolderType
      account_holder_id:
        type: string
        docs: Your unique ID for the account holder, in UUID format.
        validation:
          format: uuid
      account_id:
        type: string
        docs: Your unique ID for the account where the transaction occurred.
      account_category: EnumIncomeVerificationAccountCategory
      value_date:
        type: string
        docs: The date when the income transaction occurred, in `YYYY-MM-DD` format.
        validation:
          format: date
      description:
        type: string
        docs: The description of the income.
      type: optional<EnumIncomeVerificationType>
      amount:
        type: float
        docs: The income amount.
      currency:
        type: string
        docs: |-
          The three-letter currency code of the income. For example:

            ‚Ä¢ üáßüá∑ BRL (Brazilian Real)
            ‚Ä¢ üá®üá¥ COP (Colombian Peso)
            ‚Ä¢ üá≤üáΩ MXN (Mexican Peso)
      institution:
        type: string
        docs: >-
          The institution where the account is registered.


          **Note:** This is the name that you use in your system to identify the
          institution. For example BBVA Retail.
    source:
      openapi: ../openapi.yml
  AccessToResourceDenied:
    docs: >-
      This error occurs when you try to access Belvo's resource without the
      correct permissions.
    properties:
      code:
        type: optional<string>
        docs: >-
          A unique error code (`access_to_resource_denied`) that allows you to
          classify and handle the error programmatically.


          ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
          href="https://developers.belvo.com/docs/belvo-api-errors#403-access_to_resource_denied"
          target="_blank">403 access_to_resource_denied</a>.
      message:
        type: optional<string>
        docs: |-
          A short description of the error. 

          For `access_to_resource_denied` errors, the description is:
            
            - `You don't have access to this resource.`.
      request_id:
        type: optional<string>
        docs: >-
          A 32-character unique ID of the request (matching a regex pattern of:
          `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support
          team to accelerate investigations.
        validation:
          pattern: '[a-f0-9]{32}'
    source:
      openapi: ../openapi.yml
  EnumCategorizationAccountHolderType:
    enum:
      - INDIVIDUAL
      - BUSINESS
    docs: |-
      The type of account holder.
      Can be either:

        - `INDIVIDUAL`
        - `BUSINESS`
    source:
      openapi: ../openapi.yml
  EnumCategorizationAccountCategory:
    enum:
      - CHECKING_ACCOUNT
      - CREDIT_CARD
      - LOAN_ACCOUNT
      - SAVINGS_ACCOUNT
    docs: |-
      The type of account.
      Can be either:
        - `CHECKING_ACCOUNT`
        - `CREDIT_CARD`
        - `LOAN_ACCOUNT`
        - `SAVINGS_ACCOUNT`
    source:
      openapi: ../openapi.yml
  EnumCategorizationTransactionType:
    enum:
      - INFLOW
      - OUTFLOW
    docs: |-
      The direction of the transaction.
      Can be either:

        - `INFLOW` indicates a received transaction.
        - `OUTFLOW` indicates a sent transaction.
    source:
      openapi: ../openapi.yml
  CategorizationBodyRequest:
    properties:
      transaction_id:
        type: string
        docs: Your unique ID for the transaction.
      account_holder_type: EnumCategorizationAccountHolderType
      account_holder_id:
        type: string
        docs: Your unique ID for the account holder.
      account_id:
        type: string
        docs: Your unique ID for the account where the transaction occurred.
      account_category: EnumCategorizationAccountCategory
      value_date:
        type: string
        docs: The date when the transaction occurred, in `YYYY-MM-DD` format.
        validation:
          format: date
      description:
        type: string
        docs: The description of the transaction.
      type: EnumCategorizationTransactionType
      amount:
        type: float
        docs: The transaction amount.
      currency:
        type: string
        docs: >-
          The currency of the account, in ISO-4217 format. For example: - üáßüá∑
          BRL (Brazilian Real) - üá®üá¥ COP (Colombian Peso) - üá≤üáΩ MXN (Mexican
          Peso)
      institution:
        type: string
        docs: >-
          The institution where the account is registered.


          >**Note:** This is the name that you use in your system to identify an
          institution.
      mcc:
        type: optional<integer>
        docs: >-
          The four-digit ISO 18245 Merchant Category Code (MCC). Only required
          when `account_category` = `CREDIT_CARD`.
    source:
      openapi: ../openapi.yml
  EnumCategorizationTransactionCategory:
    type: optional<string>
    docs: >
      The name of the category to which this transaction belongs. For more info
      about this feature, check our [Transaction
      categorization](https://developers.belvo.com/docs/banking#categorizing-transactions)
      article. 


      We return one of the following enum values:

        - `Bills & Utilities`
        - `Credits & Loans`
        - `Deposits`
        - `Fees & Charges`
        - `Food & Groceries`
        - `Home & Life`
        - `Income & Payments`
        - `Insurance`
        - `Investments & Savings`
        - `Online Platforms & Leisure`
        - `Personal Shopping`
        - `Taxes`
        - `Transfers`
        - `Transport & Travel`
        - `Unknown`
        - `Withdrawal & ATM`
        - `null`
  EnumCategorizationTransactionSubcategory:
    type: optional<string>
    docs: >-
      The transactions subcategory. For more info about this feature, check our
      [Transaction
      categorization](https://developers.belvo.com/docs/banking#categorizing-transactions)
      article. 


      We return one of the following enum values:

        - `Electricity & Energy`
        - `Rent`
        - `Telecommunications`
        - `Water`
        - `Auto`
        - `Credit Card`
        - `Instalment`
        - `Interest & Charges`
        - `Mortgage`
        - `Pay Advance`
        - `Personal`
        - `Adjustments`
        - `Bank Fees`
        - `Chargeback`
        - `Refund`
        - `Blocked Balances`
        - `Alimony`
        - `Alcohol & Tobacco`
        - `Bakery & Coffee`
        - `Bars & Nightclubs`
        - `Convenience Store`
        - `Delivery`
        - `Groceries`
        - `Restaurants`
        - `Education`
        - `Gyms & Fitness`
        - `Hair & Beauty`
        - `Health`
        - `Home Decor & Appliances`
        - `Laundry & Dry Cleaning`
        - `Pharmacies`
        - `Professional Services`
        - `Veterinary Services`
        - `Freelance`
        - `Interest`
        - `Retirement`
        - `Salary`
        - `Government`
        - `Home Insurance`
        - `Auto Insurance`
        - `Health & Life Insurance`
        - `Savings`
        - `Fixed income`
        - `Equity`
        - `Investment Funds`
        - `Derivatives`
        - `Cryptocurrencies`
        - `Apps, Software and Cloud Services`
        - `Events, Parks and Museums`
        - `Gambling`
        - `Gaming`
        - `Lottery`
        - `Movie & Audio`
        - `Books & News`
        - `Clothing & Accessories`
        - `Department Store`
        - `Electronics`
        - `E-commerce`
        - `Gifts`
        - `Office Supplies`
        - `Pet Supplies`
        - `Auto Tax & Fees`
        - `Donation`
        - `Government Fees`
        - `Income Tax`
        - `Real Estate Tax & Fees`
        - `Tax Return`
        - `Accommodation`
        - `Auto Expenses`
        - `Auto Rental`
        - `Flights`
        - `Gas`
        - `Mileage Programs`
        - `Parking & Tolls`
        - `Public Transit`
        - `Taxis & Rideshares`
        - `Other`
        - `null`
  CategorizationMerchantData:
    docs: |
      Additional data regarding the merchant involved in the transaction.
    properties:
      logo:
        type: optional<string>
        docs: The URL to the merchant's logo.
      website:
        type: optional<string>
        docs: The URL to the merchant's website.
      merchant_name:
        type: optional<string>
        docs: The name of the merchant.
    source:
      openapi: ../openapi.yml
  CategorizationBody:
    properties:
      transaction_id:
        type: string
        docs: The unique ID for the transaction in your system.
      account_holder_type: EnumCategorizationAccountHolderType
      account_holder_id:
        type: string
        docs: The unique ID for the account holder in your system.
      account_id:
        type: string
        docs: >-
          The unique ID for the account where the transaction occurred in your
          system.
      account_category: EnumCategorizationAccountCategory
      value_date:
        type: string
        docs: The date when the transaction occurred, in `YYYY-MM-DD` format.
        validation:
          format: date
      description:
        type: string
        docs: The description of the transaction.
      type: EnumCategorizationTransactionType
      amount:
        type: float
        docs: The transaction amount.
      currency:
        type: string
        docs: |-
          The currency of the account, in ISO-4217 format. For example:
          - üáßüá∑ BRL (Brazilian Real)
          - üá®üá¥ COP (Colombian Peso)
          - üá≤üáΩ MXN (Mexican Peso)
      institution:
        type: string
        docs: >-
          The institution where the account is registered.


          >**Note:** This is the name that you use in your system to identify an
          institution.
      mcc:
        type: optional<integer>
        docs: >-
          The four-digit ISO 18245 Merchant Category Code (MCC). We only return
          this value when `account_type` = `CREDIT_CARD`.
      category: optional<EnumCategorizationTransactionCategory>
      subcategory: optional<EnumCategorizationTransactionSubcategory>
      merchant: optional<CategorizationMerchantData>
    source:
      openapi: ../openapi.yml
  Categorization:
    properties:
      transactions:
        type: optional<list<CategorizationBody>>
        docs: An array of enriched transaction objects.
    source:
      openapi: ../openapi.yml
  SecretKeys:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the Payments API `secretId`.
        validation:
          format: uuid
      password:
        type: string
        docs: Your Payments API `secretPassword`. This value is obfuscated.
      created_at:
        type: datetime
        docs: |
          The ISO-8601 timestamp of when the secret key was created.
      last_used:
        type: datetime
        docs: |
          The ISO-8601 timestamp of when the secret key was last used.
    source:
      openapi: ../openapi.yml
  SecretKeysPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `customer` or
          `bank-accounts`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<SecretKeys>>
        docs: Array of secret keys objects.
    source:
      openapi: ../openapi.yml
  PaymentWebhook:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the webhook.
        validation:
          format: uuid
      name: unknown
      url:
        type: string
        docs: The URL where webhook events should be sent to.
      auth_header:
        type: optional<string>
        docs: >-
          The authentication header for the request. **Must** be set to
          `Authorization`.
      auth_token:
        type: optional<string>
        docs: >-
          The authentication token you need to send webhook events. This value
          is obfuscated.
      created_at:
        type: datetime
        docs: >
          The ISO-8601 timestamp of when the webhook was created in our
          database.
      created_by:
        type: string
        docs: Belvo's unique ID of the user that created the webhook.
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  PaymentsWebhooksPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `customer` or
          `bank-accounts`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<PaymentWebhook>>
        docs: Array of webhook objects.
    source:
      openapi: ../openapi.yml
  EnumPaymentsCountry:
    enum:
      - BRA
      - COL
    docs: |
      The customer's country of residence.


      -  BRA (üáßüá∑ Brazil)
      -  COL (üá®üá¥ Colombia)
    source:
      openapi: ../openapi.yml
  InstitutionFormField:
    properties:
      name:
        type: optional<string>
        docs: The username, password, or username type field.
      type:
        type: optional<string>
        docs: The input type for the form field. For example, string.
      label:
        type: optional<string>
        docs: |
          The label of the form field. For example:
          - Document
          - Clave
          - Token
      validation:
        type: optional<string>
        docs: The type of input validation used for the field.
      placeholder:
        type: optional<string>
        docs: The placeholder text in the form field.
      validation_message:
        type: optional<string>
        docs: >-
          The message displayed when an invalid input is provided in the form
          field.
      values:
        type: optional<list<InstitutionsFormFieldValues>>
        docs: Array of additional form field values.
      length:
        type: optional<integer>
        docs: Number of digits allowed when the type is `token`.
      optional:
        type: optional<boolean>
        docs: It indicates whether this form field is optional.
    source:
      openapi: ../openapi.yml
  PaymentInstitution:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique ID to reference the institution.
        validation:
          format: uuid
      active:
        type: optional<boolean>
        docs: Indicates whether this institution is available for use or not.
      name:
        type: optional<string>
        docs: The name of the institution, as designated by Belvo.
      display_name:
        type: optional<string>
        docs: The customer-facing name of the institution.
      legal_entity_name:
        type: optional<string>
        docs: >-
          The name of the legal entity of the institution, as registered with
          the relevant regulatory authority. Only applicable for üáßüá∑ Brazil
          OFPI.
      website:
        type: optional<string>
        docs: The URL of the institution's website.
      logo:
        type: optional<string>
        docs: The URL of the institution's logo.
      icon_logo:
        type: optional<string>
        docs: The URL of the institution's icon logo.
      text_logo:
        type: optional<string>
        docs: The URL of the institution's text logo.
      primary_color:
        type: optional<string>
        docs: The primary color on the institution's website.
      country: optional<EnumPaymentsCountry>
      form_fields: optional<list<InstitutionFormField>>
    source:
      openapi: ../openapi.yml
  PaymentsInstitutionsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `customer` or
          `bank-accounts`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<PaymentInstitution>>
        docs: Array of institution objects.
    source:
      openapi: ../openapi.yml
  EnumCustomerType:
    enum:
      - INDIVIDUAL
      - BUSINESS
    docs: >
      The type of customer. Can be either:

        - `INDIVIDUAL`
        - `BUSINESS`
          

      **Notes:** For üá®üá¥ Colombia's PSE, you can only create customers of type
      `INDIVIDUAL`.
    source:
      openapi: ../openapi.yml
  EnumCustomerIdentifierTypeOfpi:
    enum:
      - CPF
      - CNPJ
    docs: |
      The customer's ID document type.

      - üáßüá∑ Brazil options: `CPF` or `CNPJ`.
    source:
      openapi: ../openapi.yml
  CustomerOfpi:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current customer.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the customer.
        validation:
          format: uuid
      customer_type: EnumCustomerType
      name:
        type: string
        docs: |
          The full name of the customer.
        validation:
          minLength: 5
          maxLength: 200
      country: EnumPaymentsCountry
      email:
        type: string
        docs: |
          The customer's email address.
      identifier:
        type: string
        docs: |
          The document number of the customer's ID.
      identifier_type: EnumCustomerIdentifierTypeOfpi
      address:
        type: optional<string>
        docs: |
          The customers physical address.
        validation:
          minLength: 5
          maxLength: 150
      phone:
        type: optional<string>
        docs: |
          The customer's phone number.
    source:
      openapi: ../openapi.yml
  EnumCustomerIdentifierTypePse:
    enum:
      - CC
      - PP
      - CE
      - TI
      - NIT
    docs: |
      The customer's ID document type.

      - üá®üá¥ Colombia options: `CC`, `PP`, `CE`, `TI`, or `NIT`.
    source:
      openapi: ../openapi.yml
  CustomerPse:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current customer.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the customer.
        validation:
          format: uuid
      customer_type: EnumCustomerType
      name:
        type: string
        docs: |
          The full name of the customer.
        validation:
          minLength: 5
          maxLength: 200
      country: EnumPaymentsCountry
      email:
        type: string
        docs: |
          The customer's email address.
      identifier:
        type: string
        docs: |
          The document number of the customer's ID.
      identifier_type: EnumCustomerIdentifierTypePse
      address:
        type: optional<string>
        docs: >
          The customers physical address.



          **Note:** Apart from the first two and last two characters, all the
          rest of the characters are masked.
        validation:
          minLength: 5
          maxLength: 150
      phone:
        type: optional<string>
        docs: >
          The customer's phone number.



          **Note:** Apart from the first two and last two characters, all the
          rest of the characters are masked.
    source:
      openapi: ../openapi.yml
  CustomerPaginatedResponseResultsItem:
    discriminated: false
    union:
      - type: CustomerOfpi
      - type: CustomerPse
    source:
      openapi: ../openapi.yml
    inline: true
  CustomerPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `customer` or
          `bank-accounts`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<CustomerPaginatedResponseResultsItem>>
        docs: Array of customer objects.
    source:
      openapi: ../openapi.yml
  CreateCustomerOfpi:
    properties:
      customer_type: EnumCustomerType
      name:
        type: string
        docs: |
          The full name of the customer you want to create.
        validation:
          minLength: 5
          maxLength: 200
      country: EnumPaymentsCountry
      email:
        type: string
        docs: |
          The customer's email address.
      identifier:
        type: string
        docs: |
          The document number of the customer's ID.
        validation:
          minLength: 1
          maxLength: 25
      identifier_type: EnumCustomerIdentifierTypeOfpi
      address:
        type: optional<string>
        docs: |
          The customer's physical address.
      phone:
        type: optional<string>
        docs: |
          The customer's phone number.
    source:
      openapi: ../openapi.yml
  CreateCustomerPse:
    properties:
      customer_type: EnumCustomerType
      name:
        type: string
        docs: |
          The full name of the customer you want to create.
        validation:
          minLength: 5
          maxLength: 200
      country: EnumPaymentsCountry
      email:
        type: string
        docs: |
          The customer's email address.
      identifier:
        type: string
        docs: |
          The document number of the customer's ID.
        validation:
          minLength: 1
          maxLength: 25
      identifier_type: EnumCustomerIdentifierTypePse
      address:
        type: optional<string>
        docs: |
          The customer's physical address.
      phone:
        type: optional<string>
        docs: |
          The customer's phone number.
    source:
      openapi: ../openapi.yml
  EnumBankAccountPixAccountTypeOfpi:
    enum:
      - CHECKINGS
      - SAVINGS
      - SALARY
    docs: |-
      The type of bank account. Can be either:

        - `CHECKINGS`
        - `SAVINGS`
        - `SALARY`
    source:
      openapi: ../openapi.yml
  BankAccountDetailsOfpi:
    properties:
      country: EnumPaymentsCountry
      account_type: EnumBankAccountPixAccountTypeOfpi
      agency:
        type: string
        docs: >-
          The agency (branch number) of the institution where the account was
          created.
      number:
        type: string
        docs: The bank account number.
    source:
      openapi: ../openapi.yml
  BankAccountDetailsOfpiPix:
    properties:
      country: EnumPaymentsCountry
      pix_key:
        type: string
        docs: The PIX key identifier of the bank account.
    source:
      openapi: ../openapi.yml
  EnumBankAccountHolderTypeOfpi:
    enum:
      - INDIVIDUAL
      - BUSINESS
    docs: The type of bank account. Can be either `INDIVIDUAL` or `BUSINESS`.
    source:
      openapi: ../openapi.yml
  BUSINESS:
    docs: Details about the OFPI payment method.
    properties:
      open_finance: PaymentIntentPaymentMethodDetailsBodyBusinessOfpi
    source:
      openapi: ../openapi.yml
  INDIVIDUAL:
    docs: Details about the OFPI payment method.
    properties:
      open_finance: PaymentIntentPaymentMethodDetailsBodyIndividualOfpi
    source:
      openapi: ../openapi.yml
  HolderResponseOfpiInformation:
    discriminated: false
    union:
      - type: BUSINESS
      - type: INDIVIDUAL
    source:
      openapi: ../openapi.yml
    inline: true
  OFPI:
    docs: Details about the payment method.
    properties:
      open_finance:
        type: optional<ChargePaymentMethodDetailsOfpiContent>
    source:
      openapi: ../openapi.yml
  BankAccountOfpiResponseDetails:
    discriminated: false
    union:
      - type: BankAccountDetailsOfpi
      - type: BankAccountDetailsOfpiPix
    source:
      openapi: ../openapi.yml
    inline: true
  BankAccountOfpiResponse:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current bank account.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the bank account.
        validation:
          format: uuid
      customer:
        type: optional<string>
        docs: |-
          Belvo's unique ID for the customer associated with the bank account.
          For `BUSINESS` bank accounts, this field is `null`.
        validation:
          format: uuid
      institution:
        type: optional<string>
        docs: >-
          Belvo's unique ID for the institution that the bank account is created
          in.

          For `BUSINESS` bank accounts that Belvo creates for organizations,
          this field is `null`.
        validation:
          format: uuid
      details: BankAccountOfpiResponseDetails
      holder:
        type: OFPI
    source:
      openapi: ../openapi.yml
  EnumBankAccountHolderTypePse:
    type: literal<"BUSINESS">
    docs: >-
      The type of bank account to create in Belvo. For business bank accounts,
      this field must the set to `BUSINESS`.
  PSE:
    docs: Object with payment method details to create a payment intent.
    properties:
      pse:
        type: PSE
    source:
      openapi: ../openapi.yml
  Business:
    docs: Details regarding the business bank account holder.
    properties:
      type: EnumBankAccountHolderTypePse
      Information:
        type: optional<PSE>
    source:
      openapi: ../openapi.yml
  BankAccountBusinessPse:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current bank account.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was first created in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the bank account.
        validation:
          format: uuid
      customer:
        type: optional<string>
        docs: |-
          Belvo's unique ID for the customer associated with the bank account.
          For `BUSINESS` bank accounts, this field is `null`.
        validation:
          format: uuid
      institution:
        type: optional<string>
        docs: >-
          Belvo's unique ID for the institution that the bank account is created
          in.

          For `BUSINESS` bank accounts that Belvo creates for organizations,
          this field is `null`.
        validation:
          format: uuid
      number:
        type: string
        docs: |
          The bank account number of the payment beneficiary.
      holder:
        type: Business
      details:
        type: map<string, unknown>
        docs: For PSE, this field will return an empty object.
      metadata:
        type: optional<map<string, unknown>>
        docs: >-
          Optional and customizable object where you can provide any additional
          key-value pairs for your internal purposes. For example, an internal
          reference number for the payment intent.


          ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
          50 characters each and each value can be up to 500 characters). We do
          not support nested objects, only ASCII values.
    source:
      openapi: ../openapi.yml
  BankAccountPseResponse:
    type: BankAccountBusinessPse
  BankAccountPaginatedResponseResultsItem:
    discriminated: false
    union:
      - type: BankAccountOfpiResponse
      - BankAccountPseResponse
    source:
      openapi: ../openapi.yml
    inline: true
  BankAccountPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `customer` or
          `bank-accounts`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<BankAccountPaginatedResponseResultsItem>>
        docs: Array of bank account objects.
    source:
      openapi: ../openapi.yml
  BankAccountHolderRequestOfpiInformation:
    discriminated: false
    union:
      - type: BUSINESS
      - type: INDIVIDUAL
    source:
      openapi: ../openapi.yml
    inline: true
  CreateBankAccountOfpiDetails:
    discriminated: false
    docs: Information regarding the bank account.
    union:
      - type: BankAccountDetailsOfpi
      - type: BankAccountDetailsOfpiPix
    source:
      openapi: ../openapi.yml
    inline: true
  CreateBankAccountOfpi:
    properties:
      institution:
        type: string
        docs: >-
          Belvo's unique ID for the institution that the bank account is created
          in.
        validation:
          format: uuid
      holder:
        type: OFPI
        docs: Information regarding the individual bank account holder.
      details:
        type: CreateBankAccountOfpiDetails
        docs: Information regarding the bank account.
    source:
      openapi: ../openapi.yml
  PaymentsWay:
    properties:
      terminal_id:
        type: integer
        docs: >-
          Your unique Payments Way terminal ID.


          **Note:** Belvo provides you with the Payments Way terminal ID during
          your onboarding process. If you don't have one yet, just reach out to
          us at payments-info@belvo.com and we'll give you a hand with this. üôÇ
      form_id:
        type: integer
        docs: >-
          Your unique Payments Way form ID.


          **Note:** Belvo provides you with the Payments Way form ID during your
          onboarding process. If you don't have one yet, just reach out to us at
          payments-info@belvo.com and we'll give you a hand with this. üôÇ
    source:
      openapi: ../openapi.yml
  CreateBankAccountPse:
    properties:
      holder:
        type: PSE
        docs: Information regarding the business bank account holder.
      providers:
        type: PSE
        docs: >-
          Information about the payment service provider, required in order to
          establish a connection and process requests. For PSE, the value must
          be `payments_way`.
      number:
        type: string
        docs: |
          The bank account number of the payment beneficiary.
      metadata:
        type: optional<map<string, unknown>>
        docs: >-
          Optional and customizable object where you can provide any additional
          key-value pairs for your internal purposes. For example, an internal
          reference number for the payment intent.


          ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
          50 characters each and each value can be up to 500 characters). We do
          not support nested objects, only ASCII values.
    source:
      openapi: ../openapi.yml
  PaymentLinkCallbackUrlsResponse:
    docs: >-
      The URLs that the user should be redirected to.


      **Note:** This field will return an empty object if your integration only
      generates payment links through the [Belvo
      Dashboard](https://dashboard.belvo.com/).
    properties:
      cancel:
        type: optional<string>
        docs: >-
          The URL that the user should be redirected to if they decide to cancel
          the payment process or if an error occurs.
      success:
        type: optional<string>
        docs: >-
          The URL that the user should be redirected to when they complete the
          payment process successfully.
    source:
      openapi: ../openapi.yml
  EnumPaymentLinksStatus:
    enum:
      - ACTIVE
      - INACTIVE
    docs: >-
      The current status of the payment link. Can be either:

        - `ACTIVE` meaning that the payment intent's status is either `REQUIRES_PAYMENT_METHOD`, `REQUIRES_ACTION`, or `PROCESSING`.
        - `INACTIVE` meaning that the payment intent's status is either `SUCCEEDED` or `FAILED`.

      **Note:** You can retrieve the complete payment intent by using our [Get
      details of a payment
      link](https://developers.belvo.com/reference/detailcreatepaymentlink)
      request.
    source:
      openapi: ../openapi.yml
  PaymentLinkListOfpi:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current payment link.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the payment link.
        validation:
          format: uuid
      payment_url:
        type: string
        docs: >-
          The URL for the hosted-widget that will guide your user through the
          payments process.
      access_token:
        type: optional<string>
        docs: >-
          The Belvo-generated access token for the payment link.


          **Note:** You'll need the `access_token` to make [Get details for a
          payment
          link](https://developers.belvo.com/reference/detailcreatepaymentlink)
          requests.
      callback_urls:
        type: PaymentLinkCallbackUrlsResponse
      payment_intent:
        type: optional<string>
        docs: >-
          Belvo's unique ID for the payment intent. You can retrieve the
          complete payment intent by using our [Get details of a payment
          link](https://developers.belvo.com/reference/detailcreatepaymentlink)
          request.
        validation:
          format: uuid
      updated_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the payment link was last updated.
      status: EnumPaymentLinksStatus
      expires_in:
        type: string
        docs: 'The payment link expiration time.  '
        validation:
          pattern: \d+([mhd])
      expires_at:
        type: datetime
        docs: |
          The ISO-8601 timestamp of when the payment link is set to expire.
    source:
      openapi: ../openapi.yml
  PaymentLinkListPse:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current payment link.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the payment link.
        validation:
          format: uuid
      payment_url:
        type: string
        docs: >-
          The URL for the hosted-widget that will guide your user through the
          payments process.
      access_token:
        type: optional<string>
        docs: >-
          The Belvo-generated access token for the payment link.


          **Note:** You'll need the `access_token` to make [Get details for a
          payment
          link](https://developers.belvo.com/reference/detailcreatepaymentlink)
          requests.
      callback_urls:
        type: PaymentLinkCallbackUrlsResponse
      payment_intent:
        type: optional<string>
        docs: >-
          Belvo's unique ID for the payment intent. You can retrieve the
          complete payment intent by using our [Get details of a payment
          link](https://developers.belvo.com/reference/detailcreatepaymentlink)
          request.
        validation:
          format: uuid
      updated_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the payment link was last updated.
      status: EnumPaymentLinksStatus
      expires_in:
        type: string
        docs: 'The payment link expiration time.  '
        validation:
          pattern: \d+([mhd])
      expires_at:
        type: datetime
        docs: |
          The ISO-8601 timestamp of when the payment link is set to expire.
    source:
      openapi: ../openapi.yml
  PaymentLinkPaginatedResponseResultsItem:
    discriminated: false
    union:
      - type: PaymentLinkListOfpi
      - type: PaymentLinkListPse
    source:
      openapi: ../openapi.yml
    inline: true
  PaymentLinkPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `customer` or
          `bank-accounts`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<PaymentLinkPaginatedResponseResultsItem>>
        docs: Array of bank account objects.
    source:
      openapi: ../openapi.yml
  EnumPaymentLinkAllowedPaymentMethod:
    enum:
      - open_finance
      - pse
    docs: |-
      Selected payment method type.

        - For üáßüá∑ Brazil's OFPI, the value must be `open_finance`.  
        - For üá®üá¥ Colombia's PSE, the value must be `pse`.
    source:
      openapi: ../openapi.yml
  EnumPaymentLinkProvider:
    enum:
      - belvo
      - payments_way
    docs: |
      The provider used for the payment link. 


      - For üáßüá∑ Brazil's OFPI, the value must be `belvo`.  
      - For üá®üá¥ Colombia's PSE, the value must be `payments_way`.
    source:
      openapi: ../openapi.yml
  OFPB:
    docs: >-
      Details about the organization's bank account that will receive the
      payment.
    properties:
      beneficiary_bank_account:
        type: string
        docs: Belvo's unique ID used to identify the beneficiary's bank account.
        validation:
          format: uuid
      callback_url:
        type: optional<string>
        docs: >-
          The URL to your application that your customer will be directed to
          once they confirm the payment in their bank application.
    source:
      openapi: ../openapi.yml
  PaymentLinkCallbackUrls:
    properties:
      cancel:
        type: optional<string>
        docs: >-
          The URL that the user should be redirected to if they decide to cancel
          the payment process or if an error occurs.


          **Note:** Not required if your integration only generates payment
          links through the [Belvo Dashboard](https://dashboard.belvo.com/).
      success:
        type: optional<string>
        docs: >-
          The URL that the user should be redirected to when they complete the
          payment process successfully.


          **Note:** Not required if your integration only generates payment
          links through the [Belvo Dashboard](https://dashboard.belvo.com/).
    source:
      openapi: ../openapi.yml
  CreatePaymentLinkOfpiAmount:
    discriminated: false
    docs: >
      Amount to be paid by your customer. For OFPI, you can send through numbers
      with up to two decimal points, separated by a `.` period. For example:
      `1234.12`


      **Note:** You can send through this value either as a string or an float.
      Regardless of the type you choose to send the `amount` as, Belvo returns a
      string with two decimal points, separated by a period ( `.`). For example,
      `1234.12`.
    union:
      - type: string
        validation:
          pattern: \d+(?:\.\d{1,2})?
      - float
    source:
      openapi: ../openapi.yml
    inline: true
  CreatePaymentLinkOfpi:
    properties:
      amount:
        type: CreatePaymentLinkOfpiAmount
        docs: >
          Amount to be paid by your customer. For OFPI, you can send through
          numbers with up to two decimal points, separated by a `.` period. For
          example: `1234.12`


          **Note:** You can send through this value either as a string or an
          float. Regardless of the type you choose to send the `amount` as,
          Belvo returns a string with two decimal points, separated by a period
          ( `.`). For example, `1234.12`.
      customer:
        type: string
        docs: |
          Belvo's unique ID to reference the customer.
      description:
        type: string
        docs: |
          The description of the payment.
      allowed_payment_method_types:
        docs: >-
          A list of payment method types allowed in this payment intent. For
          OFPI, this value must be set to `open_finance`.
        type: list<EnumPaymentLinkAllowedPaymentMethod>
      provider: EnumPaymentLinkProvider
      payment_method_details:
        type: OFPI
      callback_urls:
        type: optional<PaymentLinkCallbackUrls>
      expires_in:
        type: optional<string>
        docs: >-
          The payment link expiration time. It allows the following formats to
          be sent through:

            - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.
            - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.
            - whole number + `d` for x amount of days. For example: `30d` for 30 days.

            ‚ÑπÔ∏è The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).
        default: 7d
        validation:
          pattern: \d+([mhd])
    source:
      openapi: ../openapi.yml
  CreatePaymentLinkPseAmount:
    discriminated: false
    docs: >
      Amount to be paid by your customer. For PSE, you can only send whole
      numbers. For example: `350000`.


      **Note:** You can send this value either as a string or an integer.
      Regardless of the type you choose to send the `amount` as, Belvo returns a
      string with two decimal points, separated by a period ( `.`). For example,
      `350000.00`.
    union:
      - type: string
        validation:
          pattern: '[1-9]\d{0,9}'
      - long
    source:
      openapi: ../openapi.yml
    inline: true
  CreatePaymentLinkPse:
    properties:
      amount:
        type: CreatePaymentLinkPseAmount
        docs: >
          Amount to be paid by your customer. For PSE, you can only send whole
          numbers. For example: `350000`.


          **Note:** You can send this value either as a string or an integer.
          Regardless of the type you choose to send the `amount` as, Belvo
          returns a string with two decimal points, separated by a period (
          `.`). For example, `350000.00`.
      customer:
        type: string
        docs: |
          Belvo's unique ID to reference the customer.
      description:
        type: string
        docs: |
          The description of the payment.
      allowed_payment_method_types:
        type: optional<list<EnumPaymentLinkAllowedPaymentMethod>>
        docs: >-
          A list of payment method types allowed in this payment intent. For
          PSE, this value must be set to `pse`.
      provider: EnumPaymentLinkProvider
      payment_method_details:
        type: PSE
      callback_urls:
        type: optional<PaymentLinkCallbackUrls>
      expires_in:
        type: optional<string>
        docs: >-
          The payment link expiration time. It allows the following formats to
          be sent through:

            - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.
            - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.
            - whole number + `d` for x amount of days. For example: `30d` for 30 days.

            ‚ÑπÔ∏è The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).
        default: 7d
        validation:
          pattern: \d+([mhd])
    source:
      openapi: ../openapi.yml
  EnumPaymentsCurrency:
    enum:
      - BRL
      - COP
    docs: |-
      The currency of the amount paid.


        - üáßüá∑ BRL (Brazilian Real)
        - üá®üá¥ COP (Colombian Peso)
    source:
      openapi: ../openapi.yml
  DisplayPaymentMethodInformationContentOfpi:
    docs: Object detailing what payment method information you need to display.
    properties:
      institutions:
        type: optional<list<PaymentInstitution>>
        docs: An array of institution objects.
    source:
      openapi: ../openapi.yml
  NextStepDisplayPaymentMethodInformation:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      open_finance_display_payment_method_information:
        type: optional<DisplayPaymentMethodInformationContentOfpi>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
        default: false
    source:
      openapi: ../openapi.yml
  NeedsRedirectContent:
    docs: Details regarding the payer institution.
    properties:
      payer_institution: optional<PaymentInstitution>
    source:
      openapi: ../openapi.yml
  NextStepNeedsRedirect:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      open_finance_display_needs_redirect:
        type: optional<NeedsRedirectContent>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
        default: false
    source:
      openapi: ../openapi.yml
  BankAccountDetailsOpenFinance:
    properties:
      country: EnumPaymentsCountry
      account_type: EnumBankAccountPixAccountTypeOfpi
      agency:
        type: string
        docs: >-
          The agency (branch number) of the institution where the account was
          created.
      number:
        type: string
        docs: The bank account number.
    source:
      openapi: ../openapi.yml
  BankAccountDetailsOpenFinancePix:
    properties:
      country: EnumPaymentsCountry
      pix_key:
        type: string
        docs: The PIX key identifier of the bank account.
    source:
      openapi: ../openapi.yml
  BeneficiaryBankAccountOfpiDetails:
    discriminated: false
    union:
      - type: BankAccountDetailsOpenFinance
      - type: BankAccountDetailsOpenFinancePix
    source:
      openapi: ../openapi.yml
    inline: true
  BeneficiaryBankAccountOfpi:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the beneficiary bank account.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the bank account.
        validation:
          format: uuid
      institution: PaymentInstitution
      details:
        type: optional<BeneficiaryBankAccountOfpiDetails>
      holder:
        type: OFPI
    source:
      openapi: ../openapi.yml
  DisplayConfirmationRequiredOfpi:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      beneficiary_bank_account:
        type: optional<BeneficiaryBankAccountOfpi>
      payer_name:
        type: optional<string>
        docs: The name of the payer.
      payer_identifier:
        type: optional<string>
        docs: The payer's ID.
      payer_institution:
        type: optional<PaymentInstitution>
    source:
      openapi: ../openapi.yml
  NextStepDisplayConfirmationRequiredOfpi:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      open_finance_display_confirmation_required:
        type: optional<DisplayConfirmationRequiredOfpi>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
        default: true
    source:
      openapi: ../openapi.yml
  DisplayPaymentProcessing:
    docs: Details regarding the payer institution.
    properties:
      payer_institution: optional<PaymentInstitution>
    source:
      openapi: ../openapi.yml
  NextStepDisplayPaymentProcessing:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      open_finance_display_payment_processing:
        type: optional<DisplayPaymentProcessing>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
        default: false
    source:
      openapi: ../openapi.yml
  DisplayPaymentSucceeded:
    docs: Details regarding the payer institution.
    properties:
      payer_institution: optional<PaymentInstitution>
    source:
      openapi: ../openapi.yml
  NextStepDisplayPaymentSucceeded:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      open_finance_display_payment_succeeded:
        type: optional<DisplayPaymentSucceeded>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
        default: false
    source:
      openapi: ../openapi.yml
  DisplayPaymentFailed:
    docs: Details regarding the payer institution.
    properties:
      payer_institution: optional<PaymentInstitution>
    source:
      openapi: ../openapi.yml
  NextStepDisplayPaymentFailed:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      open_finance_display_payment_failed:
        type: optional<DisplayPaymentFailed>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When set to `true`,you need to confirm the payment by making a PATCH request sending through `confirm: true`.
        default: false
    source:
      openapi: ../openapi.yml
  LastErrorPaymentError:
    docs: >-
      Information about the error you ran into in the previous step of the
      payment intent, if applicable. This error can occur when something
      unexpected happened during the payment intent process.
    properties:
      error_code:
        type: string
        docs: >-
          A unique error code (`payment_error`) that allows you to classify and
          handle the error programmatically.
      error_message:
        type: string
        docs: A short description of the error.
    source:
      openapi: ../openapi.yml
  PaymentIntentPaymentMethodDetailsBodyIndividualOfpi:
    docs: Payment method type selected.
    properties:
      beneficiary_bank_account:
        type: string
        docs: Belvo's unique ID used to identify the beneficiary's bank account.
        validation:
          format: uuid
      payer_institution:
        type: string
        docs: Belvo's unique ID to reference the payer's institution.
        validation:
          format: uuid
      callback_url:
        type: string
        docs: >-
          The callback URL that your user will be redirected to after confirming
          the payment in their banking application.
      cpf:
        type: optional<string>
        docs: >-
          The customer's CPF number. Only required when the `customer_type` is
          `BUSINESS`.


          **Note:** This value is obfuscated.
    source:
      openapi: ../openapi.yml
  PaymentIntentPaymentMethodDetailsBodyBusinessOfpi:
    docs: Payment method type selected.
    properties:
      beneficiary_bank_account:
        type: string
        docs: Belvo's unique ID used to identify the beneficiary's bank account.
        validation:
          format: uuid
      payer_institution:
        type: string
        docs: Belvo's unique ID to reference the payer's institution.
        validation:
          format: uuid
      callback_url:
        type: string
        docs: >-
          The callback URL that your user will be redirected to after confirming
          the payment in their banking application.
      cpf:
        type: optional<string>
        docs: >-
          The customer's CPF number. Only required when the `customer_type` is
          `BUSINESS`.


          **Note:** This value is obfuscated.
    source:
      openapi: ../openapi.yml
  PaymentMethodInformationBodyOfpi:
    docs: Payment method type selected.
    properties:
      provider_request_id:
        type: optional<string>
        docs: Unique ID for the payment, as sent by the provider.
      redirect_url:
        type: optional<string>
        docs: URL that redirects the user to the institution's website.
      end_to_end_id:
        type: optional<string>
        docs: A unique ID for the transaction in the Brazil's PIX payment system.
    source:
      openapi: ../openapi.yml
  ChargePaymentMethodDetailsPseContent:
    docs: Information about the payer of a PSE payment.
    properties:
      payer_institution:
        type: optional<string>
        docs: Unique identifier for the payer‚Äôs institution.
        validation:
          format: uuid
      payer_bank_account:
        type: optional<string>
        docs: Belvo's unique ID used to identify the customer‚Äôs bank account.
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  ChargePaymentMethodDetailsOfpiContent:
    docs: Information about the payer of a PSE payment.
    properties:
      payer_institution:
        type: optional<string>
        docs: Unique identifier for the payer‚Äôs institution.
        validation:
          format: uuid
      beneficiary_bank_account:
        type: optional<string>
        docs: Belvo's unique ID used to identify the beneficiary's bank account.
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  PaymentMethodInformationBodyPse:
    docs: Payment method type selected.
    properties:
      provider_request_id:
        type: optional<string>
        docs: Unique ID for the payment, as sent by the provider.
      redirect_url:
        type: optional<string>
        docs: URL that redirects the user to the institution's website.
      bank_payment_id:
        type: optional<string>
        docs: Unique payment ID provided the institution.
      end_to_end_id:
        type: optional<string>
        docs: A unique ID for the transaction in Colombia's Payments Way system.
    source:
      openapi: ../openapi.yml
  EnumPaymentTransactionType:
    enum:
      - INFLOW
      - OUTFLOW
    docs: |-
      The direction of the transaction.

        - `INFLOW` indicates money coming into the account.
        - `OUTFLOW` indicates money coming out of the account.
    source:
      openapi: ../openapi.yml
  TransactionBankAccountOfpi:
    type: map<string, unknown>
    docs: >-
      Object containing the payer's bank account information. For OFPI, this
      field will return an empty object.
  TransactionBankAccountBodyPse:
    docs: >-
      Information about the payer's bank account. Belvo returns the bank account
      ID when the account is already saved in the Belvo database.
    properties:
      bank_account:
        type: optional<string>
        docs: Belvo's unique identifier for the payer‚Äôs bank account.
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  BankAccountInformationContentPse:
    docs: Information about the payer's institution
    properties:
      payer_institution:
        type: optional<string>
        docs: Belvo's unique identifier for the payer‚Äôs institution.
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  BankAccountInformationPse:
    docs: >-
      Information about the payer's bank account. Belvo returns this object when
      the payer's bank account information is not saved in the Belvo database.
    properties:
      bank_account_information:
        type: optional<BankAccountInformationContentPse>
    source:
      openapi: ../openapi.yml
  TransactionBankAccountPse:
    discriminated: false
    docs: Object containing the payer's bank account information.
    union:
      - type: TransactionBankAccountBodyPse
      - type: BankAccountInformationPse
    source:
      openapi: ../openapi.yml
  PaymentTransactionPayer:
    discriminated: false
    union:
      - type: TransactionBankAccountOfpi
      - type: TransactionBankAccountPse
    source:
      openapi: ../openapi.yml
    inline: true
  PaymentTransaction:
    properties:
      id:
        type: string
        docs: Belvo‚Äôs unique ID to reference the transaction.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the payment.
        validation:
          format: uuid
      amount:
        type: string
        docs: >
          The transaction amount.



          **Note**: The amount displayed is always positive as we indicate the
          direction of the transaction in `transaction_type` parameter.
      currency: EnumPaymentsCurrency
      description:
        type: string
        docs: |
          The description of the payment.
      transaction_type: EnumPaymentTransactionType
      beneficiary:
        type: string
        docs: Belvo's unique ID used to identify the beneficiary's bank account.
        validation:
          format: uuid
      payer: PaymentTransactionPayer
      payment_intent:
        type: optional<string>
        docs: The unique ID of the payment intent associated with the transaction.
        validation:
          format: uuid
      customer:
        type: optional<string>
        docs: Belvo's unique ID for the customer asscociated with this transaction.
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  ChargeStatus:
    enum:
      - PENDING
      - SUCCEEDED
      - FAILED
    docs: |
      The current status of the charge.
    inline: true
    source:
      openapi: ../openapi.yml
  ChargePaymentMethodDetails:
    discriminated: false
    union:
      - type: PSE
      - type: OFPI
    source:
      openapi: ../openapi.yml
    inline: true
  Charge:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current charge.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: optional<string>
        docs: Belvo's unique ID for the user that created the charge.
        validation:
          format: uuid
      customer:
        type: optional<string>
        docs: Belvo's unique ID for the customer that the charge was created for.
        validation:
          format: uuid
      failure_code:
        type: optional<string>
        docs: >
          Error code that explains the reason behind a payment being
          unsuccessful (if applicable).
      failure_message:
        type: optional<string>
        docs: |
          Further information regarding the `failure_code`.
      status:
        type: ChargeStatus
        docs: |
          The current status of the charge.
      amount:
        type: optional<string>
        docs: |
          The amount of the charge.
      currency: optional<EnumPaymentsCurrency>
      description:
        type: optional<string>
        docs: |
          The description of the payment.
      metadata:
        type: map<string, unknown>
        docs: >-
          Optional and customizable object where you can provide any additional
          key-value pairs for your internal purposes. For example, an internal
          reference number.


          ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
          50 characters each and each value can be up to 500 characters). We do
          not support nested objects, only ASCII values.
      beneficiary:
        type: string
        docs: Belvo's unique ID used to identify the beneficiary‚Äôs bank account.
        validation:
          format: uuid
      provider: EnumPaymentLinkProvider
      payment_method_type: optional<EnumPaymentLinkAllowedPaymentMethod>
      payment_method_details: ChargePaymentMethodDetails
      payment_method_information:
        type: PSE
      payment_intent:
        type: optional<string>
        docs: The `payment_intent.id` associated with this charge.
        validation:
          format: uuid
      transactions:
        type: optional<list<PaymentTransaction>>
        docs: An array of Transaction objects relating to the charge.
      updated_at:
        type: optional<datetime>
        docs: >
          The ISO-8601 timestamp of when the status of the charge was last
          updated.
    source:
      openapi: ../openapi.yml
  EnumPaymentIntentStatus:
    enum:
      - REQUIRES_PAYMENT_METHOD
      - REQUIRES_ACTION
      - SUCCEEDED
      - PROCESSING
      - FAILED
    docs: |
      The current status of the payment intent.
    source:
      openapi: ../openapi.yml
  PaymentIntentOfpiNextStep:
    discriminant: type
    base-properties: {}
    union:
      open_finance_display_payment_method_information:
        type: NextStepDisplayPaymentMethodInformation
      open_finance_display_needs_redirect:
        type: NextStepNeedsRedirect
      open_finance_display_confirmation_required:
        type: NextStepDisplayConfirmationRequiredOfpi
      open_finance_display_payment_processing:
        type: NextStepDisplayPaymentProcessing
      open_finance_display_payment_succeeded:
        type: NextStepDisplayPaymentSucceeded
      open_finance_display_payment_failed:
        type: NextStepDisplayPaymentFailed
    source:
      openapi: ../openapi.yml
  PaymentIntentOfpiPaymentMethodDetails:
    discriminated: false
    union:
      - type: INDIVIDUAL
      - type: BUSINESS
    source:
      openapi: ../openapi.yml
    inline: true
  PaymentIntentOfpi:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current payment intent.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created this payment intent.
        validation:
          format: uuid
      customer:
        type: string
        docs: Belvo's unique ID for the customer related to this payment intent.
        validation:
          format: uuid
      allowed_payment_method_types:
        docs: >-
          A list of payment method types allowed in this payment intent. For
          OFPI, the value will be `open_finance`.
        type: list<string>
      amount:
        type: string
        docs: |
          Amount to be paid by your customer.
      currency: EnumPaymentsCurrency
      description:
        type: string
        docs: |
          The description of the payment.
      failure_code:
        type: optional<string>
        docs: >
          Error code that explains the reason behind a payment being
          unsuccessful (if applicable).
      failure_message:
        type: optional<string>
        docs: |
          Further information regarding the `failure_code`.
      metadata:
        type: optional<map<string, unknown>>
        docs: >-
          Optional and customizable object where you can provide any additional
          key-value pairs for your internal purposes. For example, an internal
          reference number.


          ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
          50 characters each and each value can be up to 500 characters). We do
          not support nested objects, only ASCII values.
      next_step: PaymentIntentOfpiNextStep
      last_error:
        type: LastErrorPaymentError
      payment_method_details: PaymentIntentOfpiPaymentMethodDetails
      payment_method_information:
        type: OFPI
      charges:
        type: optional<list<Charge>>
        docs: >-
          An array of charge objects related to this paymnet intent. If no
          charges are associated, we return an empty array.


          **Note**: The charges resource will be deprecated and removed from our
          API by end of Q1 2023. We recommend not using any data from this
          resource.
        availability: deprecated
      provider: EnumPaymentLinkProvider
      selected_payment_method_type: EnumPaymentLinkAllowedPaymentMethod
      status: EnumPaymentIntentStatus
      updated_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the payment intent was last updated.
    source:
      openapi: ../openapi.yml
  PaymentLinkOfpi:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current payment link.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the payment link.
        validation:
          format: uuid
      payment_url:
        type: string
        docs: >-
          The URL for the hosted-widget that will guide your user through the
          payments process.
      access_token:
        type: optional<string>
        docs: >-
          The Belvo-generated access token for the payment link.


          **Note:** You'll need the `access_token` to make [Get details for a
          payment
          link](https://developers.belvo.com/reference/detailcreatepaymentlink)
          requests.
      callback_urls:
        type: PaymentLinkCallbackUrlsResponse
      payment_intent:
        type: optional<PaymentIntentOfpi>
      updated_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the payment link was last updated.
      status: EnumPaymentLinksStatus
      expires_in:
        type: string
        docs: 'The payment link expiration time.  '
        validation:
          pattern: \d+([mhd])
      expires_at:
        type: datetime
        docs: |
          The ISO-8601 timestamp of when the payment link is set to expire.
    source:
      openapi: ../openapi.yml
  EnumPaymentIntentHolderTypePse:
    enum:
      - INDIVIDUAL
      - BUSINESS
    docs: Type of bank account holder. For PSE, this value must be `INDIVIDUAL`.
    source:
      openapi: ../openapi.yml
  HolderBankAccountInformationPse:
    docs: >-
      Object with additional information about the individual that holds the
      bank account.
    properties:
      first_name:
        type: optional<string>
        docs: The account holder's first name.
      last_name:
        type: optional<string>
        docs: The account holder's last name.
    source:
      openapi: ../openapi.yml
  HolderBankAccountPse:
    docs: Details regarding the bank account holder.
    properties:
      type: optional<EnumPaymentIntentHolderTypePse>
      information: optional<HolderBankAccountInformationPse>
    source:
      openapi: ../openapi.yml
  PaymentMethodInformationDetailsPse:
    properties:
      country: optional<EnumPaymentsCountry>
      account_type:
        type: optional<string>
        docs: The type of bank account. For example, `Ahorros` or `Corriente`.
    source:
      openapi: ../openapi.yml
  PaymentMethodInfoCustomerBankAccountsPse:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique ID used to identify the customer‚Äôs bank account.
        validation:
          format: uuid
      customer:
        type: optional<string>
        docs: Belvo's unique ID for the current customer.
        validation:
          format: uuid
      institution: optional<PaymentInstitution>
      number:
        type: optional<string>
        docs: The customer's bank account number. This value is obfuscated.
      holder: optional<HolderBankAccountPse>
      details: optional<PaymentMethodInformationDetailsPse>
    source:
      openapi: ../openapi.yml
  DisplayPaymentMethodInformationContentPse:
    docs: Object detailing what payment method information you need to display.
    properties:
      customer_bank_accounts:
        type: optional<list<PaymentMethodInfoCustomerBankAccountsPse>>
        docs: >-
          Array of bank account objects.


          **Note**: If there are no customer accounts saved in the Belvo
          database, we return an empty array.
      institutions:
        type: optional<list<PaymentInstitution>>
        docs: An array of institution objects.
    source:
      openapi: ../openapi.yml
  NextStepDisplayPaymentMethodInformationPse:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type. You'll need to send a PATCH request with the institution
      selected by the customer or their bank accounts (if there are accounts
      already saved in the Belvo database).
    properties:
      pse_display_payment_method_information:
        type: optional<DisplayPaymentMethodInformationContentPse>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
        default: false
    source:
      openapi: ../openapi.yml
  DisplayCredentialsRequiredContentPse:
    docs: >-
      Object containing form fields for the required credentials (for example,
      `username` or `password`) in this step.
    properties:
      payer_institution:
        type: optional<PaymentInstitution>
    source:
      openapi: ../openapi.yml
  NextStepDisplayCredentialsRequiredPse:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      pse_display_credentials_required:
        type: optional<DisplayCredentialsRequiredContentPse>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
        default: false
    source:
      openapi: ../openapi.yml
  NeedsRedirectContentPse:
    docs: Details regarding the payer institution.
    properties:
      payer_institution: optional<InstitutionFormField>
    source:
      openapi: ../openapi.yml
  NextStepDisplayNeedsRedirectPse:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      pse_display_needs_redirect:
        type: optional<NeedsRedirectContentPse>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
        default: true
    source:
      openapi: ../openapi.yml
  DisplayTokenRequiredContentPse:
    properties:
      payer_institution: optional<PaymentInstitution>
    source:
      openapi: ../openapi.yml
  NextStepDisplayTokenRequiredPse:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      pse_display_token_required:
        type: optional<DisplayTokenRequiredContentPse>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. This value will return: 

            - `false` when a customer wants to pay for the very first time. This is so because you still need to input information about your customer in the following steps to process a payment successfully. 
            - `true` when a customer wants to pay and this is not their first time. This is so because the payment intent has all the information needed about the customer to process a payment. 


          **Note:** When the value is `true`, you'll need to confirm the payment
          intent. You can do this by making a PATCH request sending through the
          parameter `confirm: true`.
    source:
      openapi: ../openapi.yml
  BeneficiaryBankAccountPse:
    properties:
      id:
        type: optional<string>
        docs: Belvo's unique ID for the beneficiary bank account.
        validation:
          format: uuid
      institution:
        type: optional<string>
        docs: >-
          Belvo's unique ID for the institution that the bank account is created
          in.
        validation:
          format: uuid
      number:
        type: optional<string>
        docs: The bank account number.
      holder:
        type: optional<Business>
    source:
      openapi: ../openapi.yml
  DisplayCustomerBankAccountsContentPse:
    docs: Object detailing what payment method information you need to display.
    properties:
      customer_bank_accounts:
        type: optional<list<PaymentMethodInfoCustomerBankAccountsPse>>
        docs: Array of customer bank account objects.
      beneficiary_bank_account:
        type: optional<BeneficiaryBankAccountPse>
    source:
      openapi: ../openapi.yml
  NextStepDisplayCustomerBankAccountsPse:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      pse_display_customer_bank_accounts:
        type: optional<DisplayCustomerBankAccountsContentPse>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
        default: true
    source:
      openapi: ../openapi.yml
  DisplayConfirmationRequiredContentPse:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      payer_institution:
        type: optional<PaymentInstitution>
    source:
      openapi: ../openapi.yml
  NextStepDisplayConfirmationRequiredPse:
    docs: >-
      Object detailing the next steps you should follow for a specific
      `next_step` type.
    properties:
      pse_display_confirmation_required:
        type: optional<DisplayConfirmationRequiredContentPse>
      ready_to_confirm:
        type: optional<boolean>
        docs: >-
          Boolean that indicates whether the payment intent is ready to be
          confirmed. 

            **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
        default: true
    source:
      openapi: ../openapi.yml
  LastErrorInvalidCredentials:
    docs: >-
      Information about the error you ran into in the previous step of the
      payment intent, if applicable. This error can occur when the credentials
      that your customer provides are incorrect.
    properties:
      error_code:
        type: string
        docs: >-
          A unique error code (`invalid_credentials`) that allows you to
          classify and handle the error programmatically.
      error_message:
        type: string
        docs: A short description of the error.
    source:
      openapi: ../openapi.yml
  LastErrorInvalidToken:
    docs: >-
      Information about the error you ran into in the previous step of the
      payment intent, if applicable. This error can occur when the MFA token
      your customer provides is invalid.
    properties:
      error_code:
        type: string
        docs: >-
          A unique error code (`invalid_token`) that allows you to classify and
          handle the error programmatically.
      error_message:
        type: string
        docs: A short description of the error.
    source:
      openapi: ../openapi.yml
  LastErrorLoginError:
    docs: >-
      Information about the error you ran into in the previous step of the
      payment intent, if applicable. This error can occur when something
      unexpected happened in the `pse_display_credentials_required` next step.
    properties:
      error_code:
        type: string
        docs: >-
          A unique error code (`login_error`) that allows you to classify and
          handle the error programmatically.
      error_message:
        type: string
        docs: A short description of the error.
    source:
      openapi: ../openapi.yml
  LastErrorTwoFactor:
    docs: >-
      Information about the error you ran into in the previous step of the
      payment intent, if applicable. This error can occur when something
      unexpected happened in the `pse_display_token_required` next step.
    properties:
      error_code:
        type: string
        docs: >-
          A unique error code (`login_two_factor_error`) that allows you to
          classify and handle the error programmatically.
      error_message:
        type: string
        docs: A short description of the error.
    source:
      openapi: ../openapi.yml
  LastErrorSessionExpired:
    docs: >-
      Information about the error you ran into in the previous step of the
      payment intent, if applicable. This error occurs when you try to send a
      PATCH request after the session has already expired (the session expires
      after 10 minutes).
    properties:
      error_code:
        type: string
        docs: >-
          A unique error code (`session_expired`) that allows you to classify
          and handle the error programmatically.
      error_message:
        type: string
        docs: A short description of the error.
    source:
      openapi: ../openapi.yml
  PaymentIntentPaymentMethodDetailsBodyPse:
    docs: Details about the payment method type selected.
    properties:
      payer_institution:
        type: optional<string>
        docs: Belvo's unique identifier for the payer‚Äôs institution.
        validation:
          format: uuid
      payer_bank_account:
        type: optional<string>
        docs: Belvo's unique ID used to identify the customer‚Äôs bank account.
        validation:
          format: uuid
      beneficiary_bank_account:
        type: string
        docs: Belvo's unique ID used to identify the beneficiary‚Äôs bank account.
        validation:
          format: uuid
      username:
        type: optional<string>
        docs: >-
          The username used to log in to the institution. This value is
          obfuscated.
      password:
        type: optional<string>
        docs: >-
          The password used to log in to the institution. This value is
          obfuscated.
      callback_url:
        type: string
        docs: >-
          The callback URL that your user will be redirected to after confirming
          the payment in their banking application.
      belvo_flow:
        type: boolean
        docs: >-
          This parameter determines the payment flow of the payment intent. By
          default, this is set to `true` and the payment intent created is
          processed using the Belvo's payment flow and Belvo-integrated
          institutions. When set to `false`, the payment intent process uses
          institutions not integrated into Belvo's flow.
        default: true
    source:
      openapi: ../openapi.yml
  PaymentIntentPseNextStep:
    discriminant: type
    base-properties: {}
    union:
      pse_display_payment_method_information:
        type: NextStepDisplayPaymentMethodInformationPse
      pse_display_credentials_required:
        type: NextStepDisplayCredentialsRequiredPse
      pse_display_needs_redirect:
        type: NextStepDisplayNeedsRedirectPse
      pse_display_token_required:
        type: NextStepDisplayTokenRequiredPse
      pse_display_customer_bank_accounts:
        type: NextStepDisplayCustomerBankAccountsPse
      pse_display_confirmation_required:
        type: NextStepDisplayConfirmationRequiredPse
    source:
      openapi: ../openapi.yml
  PaymentIntentPseLastError:
    discriminated: false
    union:
      - type: LastErrorInvalidCredentials
      - type: LastErrorInvalidToken
      - type: LastErrorLoginError
      - type: LastErrorTwoFactor
      - type: LastErrorPaymentError
      - type: LastErrorSessionExpired
    source:
      openapi: ../openapi.yml
    inline: true
  PaymentIntentPse:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current payment intent.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created this payment intent.
        validation:
          format: uuid
      customer:
        type: string
        docs: Belvo's unique ID for the customer related to this payment intent.
        validation:
          format: uuid
      allowed_payment_method_types:
        docs: >-
          A list of payment method types allowed in this payment intent. For
          PSE, the value will be `pse`.
        type: list<EnumPaymentLinkAllowedPaymentMethod>
      amount:
        type: string
        docs: |
          Amount to be paid by your customer.
      currency: EnumPaymentsCurrency
      description:
        type: string
        docs: |
          The description of the payment.
      failure_code:
        type: optional<string>
        docs: >
          Error code that explains the reason behind a payment being
          unsuccessful (if applicable).
      failure_message:
        type: optional<string>
        docs: |
          Further information regarding the `failure_code`.
      metadata:
        type: optional<map<string, unknown>>
        docs: >-
          Optional and customizable object where you can provide any additional
          key-value pairs for your internal purposes. For example, an internal
          reference number.


          ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
          50 characters each and each value can be up to 500 characters). We do
          not support nested objects, only ASCII values.
      next_step: PaymentIntentPseNextStep
      last_error: PaymentIntentPseLastError
      payment_method_details:
        type: PSE
      payment_method_information:
        type: PSE
      charges:
        type: optional<list<Charge>>
        docs: >-
          An array of charge objects related to this paymnet intent. If no
          charges are associated, we return an empty array.


          **Note**: The charges resource will be deprecated and removed from our
          API by end of Q1 2023. We recommend not using any data from this
          resource.
        availability: deprecated
      provider: EnumPaymentLinkProvider
      selected_payment_method_type: EnumPaymentLinkAllowedPaymentMethod
      status: EnumPaymentIntentStatus
      updated_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the payment intent was last updated.
    source:
      openapi: ../openapi.yml
  PaymentLinkPse:
    properties:
      id:
        type: string
        docs: Belvo's unique ID for the current payment link.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          The ISO-8601 timestamp of when the data point was last updated in
          Belvo's database.
      created_by:
        type: string
        docs: Belvo's unique ID for the user that created the payment link.
        validation:
          format: uuid
      payment_url:
        type: string
        docs: >-
          The URL for the hosted-widget that will guide your user through the
          payments process.
      access_token:
        type: optional<string>
        docs: >-
          The Belvo-generated access token for the payment link.


          **Note:** You'll need the `access_token` to make [Get details for a
          payment
          link](https://developers.belvo.com/reference/detailcreatepaymentlink)
          requests.
      callback_urls:
        type: PaymentLinkCallbackUrlsResponse
      payment_intent:
        type: optional<PaymentIntentPse>
      updated_at:
        type: optional<datetime>
        docs: |
          The ISO-8601 timestamp of when the payment link was last updated.
      status: EnumPaymentLinksStatus
      expires_in:
        type: string
        docs: 'The payment link expiration time. '
        validation:
          pattern: \d+([mhd])
      expires_at:
        type: datetime
        docs: |
          The ISO-8601 timestamp of when the payment link is set to expire.
    source:
      openapi: ../openapi.yml
  PaymentIntentPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `customer` or
          `bank-accounts`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<PaymentIntentPse>>
        docs: Array of payment intent objects.
    source:
      openapi: ../openapi.yml
  PatchPaymentMethodDetailsPse:
    docs: >-
      Object with required fields to fill information in the payment intent
      object. The information you need to send through depends on the next step
      Belvo returns in the response.
    properties:
      payer_institution:
        type: optional<string>
        docs: >-
          Belvo's unique identifier for the payer‚Äôs institution.


          **Note**: You need to send through this information after you received
          the `pse_display_payment_method_information` next step in the payment
          intent.
        validation:
          format: uuid
      username:
        type: optional<string>
        docs: >-
          The username used to log in to the institution.


          **Note**: You need to send through this information after you received
          the `pse_display_credentials_required` next step in the payment
          intent.
      password:
        type: optional<string>
        docs: >-
          The password used to log in to the institution.


          **Note**: You need to send through this information after you received
          the `pse_display_credentials_required` next step in the payment
          intent.
      payer_token:
        type: optional<string>
        docs: >-
          The MFA token generated by the institution and required to continue
          the payment flow.


          **Note**: You need to send through this information if you received
          the `pse_display_token_required` next step in the payment intent.
      payer_bank_account:
        type: optional<string>
        docs: >-
          Belvo's unique identifier for the payer‚Äôs bank account.


          **Note**: You need to send through this information after you received
          the `pse_display_customer_bank_accounts` next step in the payment
          intent.
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  PatchPaymentIntentsBodyPse:
    properties:
      pse:
        type: optional<PatchPaymentMethodDetailsPse>
    source:
      openapi: ../openapi.yml
  PaymentsTransactionsPaginatedResponse:
    properties:
      count:
        type: optional<integer>
        docs: The total number of results in your Belvo account.
      next:
        type: optional<string>
        docs: >
          The URL to next page of results. Each page consists of up to 100
          items. If there are not enough results for an additional page, the
          value is `null`.


          In our documentation example, we use `{endpoint}` as a placeholder
          value. In production, this value will be replaced by the actual
          endpoint you are currently using (for example, `customer` or
          `bank-accounts`).
      previous:
        type: optional<string>
        docs: >-
          The URL to the previous page of results. If there is no previous page,
          the value is `null`.
      results:
        type: optional<list<PaymentTransaction>>
        docs: Array of transaction objects.
    source:
      openapi: ../openapi.yml
",
    },
    "accounts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "An **account** is the representation of a bank account inside a financial institution. A user can have one or more accounts in an institution. 

For example, one user (or link) can have a checking account, several credit cards, and a loan account.

Querying for a user's account information is useful as you can get information regarding:

- what types of accounts the user has
- the balance for each account (savings, checking, credit card, loan, and so on)


> üöß Scheduled field deprecation
> 
> Please note that we will soon be deprecating the following fields in our `loan_data` object:
> 
> - `cutting_date`
> - `cutting_day`
> - `credit_limit`: replaced by the `principal` field.
> - `interest_rate`: replaced by the `interest_rates` object.
> - `last_payment_date`
> - `last_period_balance`: replaced by the `outstanding_balance ` field.
> - `limit_day`
> - `limit_date`: replaced by the `payment_day ` field.
> - `no_interest_payment`
> - `payment_due_day`

### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field                         | Available Filters                      |
| ----------------------------- | -------------------------------------- |
| `balance__available`          | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `balance__current`            | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `bank_product_id`             | `=`                                    |
| `category`                    | `=`, `in`                              |
| `created_at `                 | `gt`, `gte`, `lt`, `lte`, `range`      |
| `currency`                    | `=`\*, `in`                            |
| `id`                          | `=`, `in`                              |
| `institution`                 | `=`, `in`                              |
| `internal_identification`     | `=`                                    |
| `link`                        | `=`, `in`                              |
| `name`                        | `=`, `icontains`                       |
| `number`                      | `=`, `in`                              |
| `public_identification_name`  | `=`                                    |
| `public_identification_value` | `=`                                    |
| `type`                        | `=`, `in`                              |

```curl cURL
## Filtering results to have savings accounts with a balance
## between 5000 and 8000 Colombian pesos
https://sandbox.belvo.com/api/accounts/?category=savings&balance__available__range=5000,8000&currency=COP
```
```javascript Node
// Filtering results to have savings accounts with a balance
// between 5000 and 8000 Colombian pesos
client.accounts.list({
  filters: {
    category: "savings",
    balance__available__range: "5000,8000",
    currency: "COP"
  }
})
```
```python Python
## Filtering results to have savings accounts with a balance
## between 5000 and 8000 Colombian pesos
client.Accounts.list(category="savings",balance__available__range="5000,8000",currency="COP")
```
```ruby Ruby
## Filtering results to have savings accounts with a balance
## between 5000 and 8000 Colombian pesos
client.accounts.list(params: {
  category: "savings",
  balance__available__range: "5000,8000",
  currency: "COP"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Accounts",
          "endpoints": {
            "DestroyAccount": {
              "auth": true,
              "display-name": "Delete an account",
              "docs": "Delete a specific account and all associated transactions, as well as owners, from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/accounts/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete an account
client.Accounts.delete("account-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.delete id: 'account-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.delete('accountId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/accounts/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `account.id` you want to delete",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailAccount": {
              "auth": true,
              "display-name": "Get an account's details",
              "docs": "Get the details of a specific account.

  > üöß Scheduled field deprecation
  >
  > Please note that we will soon be deprecating the following fields in our `loan_data` object:
  > - `cutting_date`
  > - `cutting_day`
  > - `credit_limit`: replaced by the `principal` field.
  > - `interest_rate`: replaced by the `interest_rates` object.
  > - `last_payment_date`
  > - `last_period_balance`: replaced by the `outstanding_balance ` field.
  > - `limit_day`
  > - `limit_date`: replaced by the `payment_day ` field.
  > - `no_interest_payment`
  > - `payment_due_day`",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/accounts/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get an account
account = client.Accounts.get(id="account-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.detail id: 'account-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.detail('accountId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Checking Account",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "balance": {
                        "available": 4523.48,
                        "current": 4523.48,
                      },
                      "balance_type": "ASSET",
                      "category": "CHECKING_ACCOUNT",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "credit_data": {
                        "collected_at": "2019-09-27T13:01:41Z",
                        "credit_limit": 192000,
                        "cutting_date": "2019-12-11",
                        "end_date": "end_date",
                        "interest_rate": 4,
                        "last_payment_date": "last_payment_date",
                        "minimum_payment": 2400.3,
                        "monthly_payment": 1.1,
                        "next_payment_date": "2019-12-13",
                        "no_interest_payment": 2690.83,
                      },
                      "currency": "MXN",
                      "id": "c21f3914-bcbe-44c4-a2e8-a5e33f6888d4",
                      "institution": {
                        "name": "erebor_mx_retail",
                        "type": "bank",
                      },
                      "last_accessed_at": "2022-02-01T20:25:47Z",
                      "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                      "loan_data": {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "contract_amount": 202000,
                        "contract_end_date": "2027-10-01",
                        "contract_number": "890ASLDJF87SD00",
                        "contract_start_date": "2020-03-01",
                        "credit_limit": 1.1,
                        "cutting_date": "cutting_date",
                        "cutting_day": "cutting_day",
                        "fees": [
                          {
                            "type": "OPERATION_FEE",
                            "value": 5.6,
                          },
                        ],
                        "interest_rate": 1.1,
                        "interest_rates": [
                          {
                            "name": "jurosEfetivo",
                            "value": 7.85,
                          },
                        ],
                        "last_payment_date": "last_payment_date",
                        "last_period_balance": 1.1,
                        "limit_day": "limit_day",
                        "loan_type": "Consignado",
                        "monthly_payment": 1000,
                        "no_interest_payment": 1.1,
                        "number_of_installments_outstanding": 48,
                        "number_of_installments_total": 60,
                        "outstanding_balance": 182000,
                        "outstanding_principal": 142023,
                        "payment_day": "27",
                        "principal": 192000,
                      },
                      "name": "Cuenta Perfiles- M.N.- - ERB-237",
                      "number": "2180700688677950",
                      "public_identification_name": "CLABE",
                      "public_identification_value": "2180700008677950",
                      "receivables_data": {
                        "anticipated": 1393.46,
                        "available": 800.37,
                        "collected_at": "2022-02-09T08:45:50Z",
                        "current": 2193.83,
                      },
                      "type": "Cuentas de efectivo",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/accounts/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get an account
account = client.Accounts.get(id="account-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.detail id: 'account-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.detail('accountId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Credit Card Account",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "balance": {
                        "available": 1550.15,
                        "current": 4049.85,
                      },
                      "balance_type": "LIABILITY",
                      "category": "CREDIT_CARD",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "credit_data": {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "credit_limit": 15600,
                        "cutting_date": "2021-04-11",
                        "end_date": "end_date",
                        "interest_rate": 4,
                        "minimum_payment": 690,
                        "next_payment_date": "2021-03-31",
                        "no_interest_payment": 11550.15,
                      },
                      "currency": "MXN",
                      "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
                      "institution": {
                        "name": "erebor_mx_retail",
                        "type": "bank",
                      },
                      "last_accessed_at": "2022-02-01T20:25:47Z",
                      "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                      "loan_data": {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "contract_amount": 202000,
                        "contract_end_date": "2027-10-01",
                        "contract_number": "890ASLDJF87SD00",
                        "contract_start_date": "2020-03-01",
                        "credit_limit": 1.1,
                        "cutting_date": "cutting_date",
                        "cutting_day": "cutting_day",
                        "fees": [
                          {
                            "type": "OPERATION_FEE",
                            "value": 5.6,
                          },
                        ],
                        "interest_rate": 1.1,
                        "interest_rates": [
                          {
                            "name": "jurosEfetivo",
                            "value": 7.85,
                          },
                        ],
                        "last_payment_date": "last_payment_date",
                        "last_period_balance": 1.1,
                        "limit_day": "limit_day",
                        "loan_type": "Consignado",
                        "monthly_payment": 1000,
                        "no_interest_payment": 1.1,
                        "number_of_installments_outstanding": 48,
                        "number_of_installments_total": 60,
                        "outstanding_balance": 182000,
                        "outstanding_principal": 142023,
                        "payment_day": "27",
                        "principal": 192000,
                      },
                      "name": "Erebor Gold",
                      "number": "4057068115181",
                      "public_identification_name": "CLABE",
                      "public_identification_value": "150194683119900273",
                      "receivables_data": {
                        "anticipated": 1393.46,
                        "available": 800.37,
                        "collected_at": "2022-02-09T08:45:50Z",
                        "current": 2193.83,
                      },
                      "type": "Tarjetas de cr√©dito",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/accounts/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get an account
account = client.Accounts.get(id="account-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.detail id: 'account-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.detail('accountId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Loan Account",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "balance": {
                        "available": 34708.36,
                        "current": 34708.36,
                      },
                      "balance_type": "LIABILITY",
                      "category": "LOAN_ACCOUNT",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "credit_data": {
                        "collected_at": "2019-09-27T13:01:41Z",
                        "credit_limit": 192000,
                        "cutting_date": "2019-12-11",
                        "end_date": "end_date",
                        "interest_rate": 4,
                        "last_payment_date": "last_payment_date",
                        "minimum_payment": 2400.3,
                        "monthly_payment": 1.1,
                        "next_payment_date": "2019-12-13",
                        "no_interest_payment": 2690.83,
                      },
                      "currency": "MXN",
                      "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
                      "institution": {
                        "name": "erebor_mx_retail",
                        "type": "bank",
                      },
                      "last_accessed_at": "2022-02-01T20:25:47Z",
                      "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                      "loan_data": {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "contract_amount": 202000,
                        "contract_end_date": "2027-10-01",
                        "contract_number": "ER8072930097",
                        "contract_start_date": "2018-01-01",
                        "credit_limit": 1.1,
                        "cutting_date": "cutting_date",
                        "cutting_day": "cutting_day",
                        "fees": [
                          {
                            "type": "OPERATION_FEE",
                            "value": 5.6,
                          },
                        ],
                        "interest_rate": 1.1,
                        "interest_rates": [
                          {
                            "name": "jurosEfetivo",
                            "type": "MONTHLY",
                            "value": 7.85,
                          },
                        ],
                        "last_payment_date": "last_payment_date",
                        "last_period_balance": 1.1,
                        "limit_day": "limit_day",
                        "loan_type": "SFH",
                        "monthly_payment": 1000,
                        "no_interest_payment": 1.1,
                        "number_of_installments_outstanding": 41,
                        "number_of_installments_total": 50,
                        "outstanding_balance": 164000,
                        "outstanding_principal": 142000,
                        "payment_day": "17",
                        "principal": 192000,
                      },
                      "name": "Cuenta n√≥mina",
                      "number": "72964044",
                      "public_identification_name": "ACCOUNT_NUMBER",
                      "public_identification_value": "217035843284091420",
                      "receivables_data": {
                        "anticipated": 1393.46,
                        "available": 800.37,
                        "collected_at": "2022-02-09T08:45:50Z",
                        "current": 2193.83,
                      },
                      "type": "Cr√©ditos",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/accounts/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get an account
account = client.Accounts.get(id="account-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.detail id: 'account-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.detail('accountId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Pension Account",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "balance": {
                        "available": 26305.33,
                        "current": 26305.33,
                      },
                      "balance_type": "ASSET",
                      "category": "PENSION_FUND_ACCOUNT",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "credit_data": {
                        "collected_at": "2019-09-27T13:01:41Z",
                        "credit_limit": 192000,
                        "cutting_date": "2019-12-11",
                        "end_date": "end_date",
                        "interest_rate": 4,
                        "last_payment_date": "last_payment_date",
                        "minimum_payment": 2400.3,
                        "monthly_payment": 1.1,
                        "next_payment_date": "2019-12-13",
                        "no_interest_payment": 2690.83,
                      },
                      "currency": "BRL",
                      "funds_data": [
                        {
                          "balance": 94793,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "name": "CICLO DE VIDA 2040 I",
                          "percentage": 9,
                          "public_identifications": [
                            {
                              "name": "CNPJ",
                              "value": "11.233.333/4424-01",
                            },
                            {
                              "name": "SUSEP",
                              "value": "13311.2333222/3333-44",
                            },
                          ],
                          "type": "PGBL",
                        },
                        {
                          "balance": 50834,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "name": "CICLO DE VIDA 2020 I",
                          "percentage": 91,
                          "public_identifications": [
                            {
                              "name": "CNPJ",
                              "value": "11.222.333/4444-02",
                            },
                            {
                              "name": "SUSEP",
                              "value": "11111.222222/3333-44",
                            },
                          ],
                          "type": "PGBL",
                        },
                      ],
                      "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
                      "institution": {
                        "name": "erebor_br_retail",
                        "type": "bank",
                      },
                      "last_accessed_at": "2021-03-09T08:19:05Z",
                      "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
                      "loan_data": {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "contract_amount": 202000,
                        "contract_end_date": "2027-10-01",
                        "contract_number": "890ASLDJF87SD00",
                        "contract_start_date": "2020-03-01",
                        "credit_limit": 1.1,
                        "cutting_date": "cutting_date",
                        "cutting_day": "cutting_day",
                        "fees": [
                          {
                            "type": "OPERATION_FEE",
                            "value": 5.6,
                          },
                        ],
                        "interest_rate": 1.1,
                        "interest_rates": [
                          {
                            "name": "jurosEfetivo",
                            "value": 7.85,
                          },
                        ],
                        "last_payment_date": "last_payment_date",
                        "last_period_balance": 1.1,
                        "limit_day": "limit_day",
                        "loan_type": "Consignado",
                        "monthly_payment": 1000,
                        "no_interest_payment": 1.1,
                        "number_of_installments_outstanding": 48,
                        "number_of_installments_total": 60,
                        "outstanding_balance": 182000,
                        "outstanding_principal": 142023,
                        "payment_day": "27",
                        "principal": 192000,
                      },
                      "name": "Conta corrente",
                      "number": "37903487",
                      "public_identification_name": "PENSION_PLAN_ID",
                      "public_identification_value": "626249048387247512",
                      "receivables_data": {
                        "anticipated": 1393.46,
                        "available": 800.37,
                        "collected_at": "2022-02-09T08:45:50Z",
                        "current": 2193.83,
                      },
                      "type": "Contas",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/accounts/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get an account
account = client.Accounts.get(id="account-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.detail id: 'account-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.detail('accountId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Savings Account",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "balance": {
                        "available": 4978436.05,
                        "current": 4978436.05,
                      },
                      "balance_type": "ASSET",
                      "category": "SAVINGS_ACCOUNT",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "credit_data": {
                        "collected_at": "2019-09-27T13:01:41Z",
                        "credit_limit": 192000,
                        "cutting_date": "2019-12-11",
                        "end_date": "end_date",
                        "interest_rate": 4,
                        "last_payment_date": "last_payment_date",
                        "minimum_payment": 2400.3,
                        "monthly_payment": 1.1,
                        "next_payment_date": "2019-12-13",
                        "no_interest_payment": 2690.83,
                      },
                      "currency": "COP",
                      "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
                      "institution": {
                        "name": "erebor_co_retail",
                        "type": "bank",
                      },
                      "last_accessed_at": "2021-03-09T10:28:40Z",
                      "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
                      "loan_data": {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "contract_amount": 202000,
                        "contract_end_date": "2027-10-01",
                        "contract_number": "890ASLDJF87SD00",
                        "contract_start_date": "2020-03-01",
                        "credit_limit": 1.1,
                        "cutting_date": "cutting_date",
                        "cutting_day": "cutting_day",
                        "fees": [
                          {
                            "type": "OPERATION_FEE",
                            "value": 5.6,
                          },
                        ],
                        "interest_rate": 1.1,
                        "interest_rates": [
                          {
                            "name": "jurosEfetivo",
                            "value": 7.85,
                          },
                        ],
                        "last_payment_date": "last_payment_date",
                        "last_period_balance": 1.1,
                        "limit_day": "limit_day",
                        "loan_type": "Consignado",
                        "monthly_payment": 1000,
                        "no_interest_payment": 1.1,
                        "number_of_installments_outstanding": 48,
                        "number_of_installments_total": 60,
                        "outstanding_balance": 182000,
                        "outstanding_principal": 142023,
                        "payment_day": "27",
                        "principal": 192000,
                      },
                      "name": "Cuenta de Ahorro",
                      "number": "13166008",
                      "public_identification_name": "ACCOUNT_NUMBER",
                      "public_identification_value": "260825906",
                      "receivables_data": {
                        "anticipated": 1393.46,
                        "available": 800.37,
                        "collected_at": "2022-02-09T08:45:50Z",
                        "current": 2193.83,
                      },
                      "type": "Cuenta de Ahorro",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/accounts/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `account.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailAccountRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "optional<root.Account>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListAccounts": {
              "auth": true,
              "display-name": "List all accounts",
              "docs": "Get a paginated list of all existing accounts in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/accounts/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Accounts
for account in client.Accounts.list():
    pprint(account)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "balance__available": "4000.00",
                    "balance__available__gt": "2000.00",
                    "balance__available__gte": "1999.00",
                    "balance__available__lt": "6000.00",
                    "balance__available__lte": "5999.00",
                    "balance__available__range": "3000.00,4350.00",
                    "balance__current": "4000.00",
                    "balance__current__gt": "2000.00",
                    "balance__current__gte": "1999.00",
                    "balance__current__lt": "6000.00",
                    "balance__current__lte": "5999.00",
                    "balance__current__range": "3000.00,4350.00",
                    "category": "CREDIT_ACCOUNT",
                    "category__in": "CHECKING_ACCOUNT,SAVINGS_ACCOUNT",
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "currency": "COP",
                    "currency__in": "COP,MXN",
                    "fields": "link,balance,account",
                    "id": "24ccab1d-3a86-4136-a6eb-e04bf52b356f",
                    "id__in": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509",
                    "institution": "erebor_mx_retail",
                    "institution__in": "erebor_mx_retail,gringotts_mx_retail",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "name": "Cuenta Perfiles- M.N. - MXN-666",
                    "name__icontains": "Perfiles",
                    "number": "4057068115181",
                    "number__in": "4057068115181,7809346821648",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "public_identification_name": "CLABE",
                    "public_identification_value": "150194683119900273",
                    "type": "Cuentas de efectivo",
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "balance": {
                            "current": 5874.13,
                          },
                          "balance_type": "ASSET",
                          "bank_product_id": "bank_product_id",
                          "category": "CHECKING_ACCOUNT",
                          "collected_at": "2019-09-27T13:01:41Z",
                          "created_at": "2022-02-09T08:45:50Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "MXN",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "institution": {
                            "name": "erebor_mx_retail",
                          },
                          "internal_identification": "internal_identification",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Cuenta Perfiles- M.N. - MXN-666",
                          "number": "4057068115181",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "150194683119900273",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Cuentas de efectivo",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/accounts/",
              "request": {
                "name": "ListAccountsRequest",
                "query-parameters": {
                  "balance__available": {
                    "docs": "Return accounts that have a `balance.available` matching exactly this value.",
                    "type": "optional<string>",
                  },
                  "balance__available__gt": {
                    "docs": "Return accounts that have a `balance.available` greater than this value.",
                    "type": "optional<string>",
                  },
                  "balance__available__gte": {
                    "docs": "Return accounts that have a `balance.available` greater than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "balance__available__lt": {
                    "docs": "Return accounts that have a `balance.available` less than this value.",
                    "type": "optional<string>",
                  },
                  "balance__available__lte": {
                    "docs": "Return accounts that have a `balance.available` less than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "balance__available__range": {
                    "docs": "Return accounts that have a `balance.available` within a range of two values.",
                    "type": "optional<string>",
                  },
                  "balance__current": {
                    "docs": "Return accounts that have a `balance.current` matching exactly this value.",
                    "type": "optional<string>",
                  },
                  "balance__current__gt": {
                    "docs": "Return accounts that have a `balance.current` greater than this value.",
                    "type": "optional<string>",
                  },
                  "balance__current__gte": {
                    "docs": "Return accounts that have a `balance.available` greater than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "balance__current__lt": {
                    "docs": "Return accounts that have a `balance.current` less than this value.",
                    "type": "optional<string>",
                  },
                  "balance__current__lte": {
                    "docs": "Return accounts that have a `balance.available` less than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "balance__current__range": {
                    "docs": "Return accounts that have a `balance.available` within a range of two values.",
                    "type": "optional<string>",
                  },
                  "category": {
                    "docs": "Return accounts only for the given category (for example, `CHECKING_ACCOUNT` and `SAVINGS_ACCOUNT`).",
                    "type": "optional<string>",
                  },
                  "category__in": {
                    "docs": "Return accounts only for the given categories (for example, `CHECKING_ACCOUNT` and `SAVINGS_ACCOUNT`).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return accounts that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return accounts that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return accounts that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return accounts that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return accounts that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "currency": {
                    "docs": "Return accounts that hold finances in only this three-letter currency code.",
                    "type": "optional<string>",
                  },
                  "currency__in": {
                    "docs": "Return accounts that hold finances in one of these three-letter currency codes.",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information only for this `account.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information for these `account.id`s.",
                    "type": "optional<string>",
                  },
                  "institution": {
                    "docs": "Return accounts only for this institution (use the Belvo-designated name, such as `erebor_mx_retail`).",
                    "type": "optional<string>",
                  },
                  "institution__in": {
                    "docs": "Return accounts only for these institutions (use the Belvo-designated names, such as `erebor_mx_retail` and `gringotts_mx_retail`).",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return accounts only for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "Return accounts with exactly this internal (specified by the institution) name.",
                    "type": "optional<string>",
                  },
                  "name__icontains": {
                    "docs": "Return accounts partially matching this internal (specified by the institution) name.",
                    "type": "optional<string>",
                  },
                  "number": {
                    "docs": "Return information only for this account number (as specified by the institution).",
                    "type": "optional<string>",
                  },
                  "number__in": {
                    "docs": "Return information for these account numbers (as specified by the institution).",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "public_identification_name": {
                    "docs": "Return information only for this type of account ID. For example, CLABE accounts.",
                    "type": "optional<string>",
                  },
                  "public_identification_value": {
                    "docs": "Return information only for this account ID. For example, the account number for a CLABE account.",
                    "type": "optional<string>",
                  },
                  "type": {
                    "docs": "Return information only for accounts matching this account type, as designated by the institution.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.AccountsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchAccounts": {
              "auth": true,
              "display-name": "Complete an accounts request",
              "docs": "Used to resume an Account retrieve session that was paused because an MFA token was required by the institution.

  > üöß Scheduled field deprecation
  > 
  > Please note that we will soon be deprecating the following fields in our `loan_data` object:
  > - `cutting_date`
  > - `cutting_day`
  > - `credit_limit`: replaced by the `principal` field.
  > - `interest_rate`: replaced by the `interest_rates` object.
  > - `last_payment_date`
  > - `last_period_balance`: replaced by the `outstanding_balance ` field.
  > - `limit_day`
  > - `limit_date`: replaced by the `payment_day ` field.
  > - `no_interest_payment`
  > - `payment_due_day`",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume accounts
accounts = client.Accounts.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Checking Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 4523.48,
                          "current": 4523.48,
                        },
                        "balance_type": "ASSET",
                        "category": "CHECKING_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "MXN",
                        "id": "c21f3914-bcbe-44c4-a2e8-a5e33f6888d4",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2022-02-01T20:25:47Z",
                        "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Cuenta Perfiles- M.N.- - ERB-237",
                        "number": "2180700688677950",
                        "public_identification_name": "CLABE",
                        "public_identification_value": "2180700008677950",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Cuentas de efectivo",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume accounts
accounts = client.Accounts.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Credit Card Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 1550.15,
                          "current": 4049.85,
                        },
                        "balance_type": "LIABILITY",
                        "category": "CREDIT_CARD",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "credit_limit": 15600,
                          "cutting_date": "2021-04-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "minimum_payment": 690,
                          "next_payment_date": "2021-03-31",
                          "no_interest_payment": 11550.15,
                        },
                        "currency": "MXN",
                        "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2022-02-01T20:25:47Z",
                        "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Erebor Gold",
                        "number": "4057068115181",
                        "public_identification_name": "CLABE",
                        "public_identification_value": "150194683119900273",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Tarjetas de cr√©dito",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume accounts
accounts = client.Accounts.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Loan Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 34708.36,
                          "current": 34708.36,
                        },
                        "balance_type": "LIABILITY",
                        "category": "LOAN_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "MXN",
                        "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2022-02-01T20:25:47Z",
                        "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "ER8072930097",
                          "contract_start_date": "2018-01-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "type": "MONTHLY",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "SFH",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 41,
                          "number_of_installments_total": 50,
                          "outstanding_balance": 164000,
                          "outstanding_principal": 142000,
                          "payment_day": "17",
                          "principal": 192000,
                        },
                        "name": "Cuenta n√≥mina",
                        "number": "72964044",
                        "public_identification_name": "ACCOUNT_NUMBER",
                        "public_identification_value": "217035843284091420",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Cr√©ditos",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume accounts
accounts = client.Accounts.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Pension Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 26305.33,
                          "current": 26305.33,
                        },
                        "balance_type": "ASSET",
                        "category": "PENSION_FUND_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "BRL",
                        "funds_data": [
                          {
                            "balance": 94793,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "name": "CICLO DE VIDA 2040 I",
                            "percentage": 9,
                            "public_identifications": [
                              {
                                "name": "CNPJ",
                                "value": "11.233.333/4424-01",
                              },
                              {
                                "name": "SUSEP",
                                "value": "13311.2333222/3333-44",
                              },
                            ],
                            "type": "PGBL",
                          },
                          {
                            "balance": 50834,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "name": "CICLO DE VIDA 2020 I",
                            "percentage": 91,
                            "public_identifications": [
                              {
                                "name": "CNPJ",
                                "value": "11.222.333/4444-02",
                              },
                              {
                                "name": "SUSEP",
                                "value": "11111.222222/3333-44",
                              },
                            ],
                            "type": "PGBL",
                          },
                        ],
                        "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
                        "institution": {
                          "name": "erebor_br_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2021-03-09T08:19:05Z",
                        "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Conta corrente",
                        "number": "37903487",
                        "public_identification_name": "PENSION_PLAN_ID",
                        "public_identification_value": "626249048387247512",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Contas",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume accounts
accounts = client.Accounts.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Savings Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 4978436.05,
                          "current": 4978436.05,
                        },
                        "balance_type": "ASSET",
                        "category": "SAVINGS_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "COP",
                        "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
                        "institution": {
                          "name": "erebor_co_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2021-03-09T10:28:40Z",
                        "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Cuenta de Ahorro",
                        "number": "13166008",
                        "public_identification_name": "ACCOUNT_NUMBER",
                        "public_identification_value": "260825906",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Cuenta de Ahorro",
                      },
                    ],
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/accounts/",
              "request": {
                "body": "root.PatchBody",
                "content-type": "application/json",
                "name": "PatchAccountsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<optional<root.Account>>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveAccounts": {
              "auth": true,
              "display-name": "Retrieve accounts for a link",
              "docs": "Retrieve accounts from an existing link.

  > üöß Scheduled field deprecation
  > 
  > Please note that we will soon be deprecating the following fields in our `loan_data` object:
  > - `cutting_date`
  > - `cutting_day`
  > - `credit_limit`: replaced by the `principal` field.
  > - `interest_rate`: replaced by the `interest_rates` object.
  > - `last_payment_date`
  > - `last_period_balance`: replaced by the `outstanding_balance ` field.
  > - `limit_day`
  > - `limit_date`: replaced by the `payment_day ` field.
  > - `no_interest_payment`
  > - `payment_due_day`",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link_id"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve accounts
accounts = client.Accounts.create(
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.retrieve link: 'link-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.retrieve('link-id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Checking Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 4523.48,
                          "current": 4523.48,
                        },
                        "balance_type": "ASSET",
                        "category": "CHECKING_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "MXN",
                        "id": "c21f3914-bcbe-44c4-a2e8-a5e33f6888d4",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2022-02-01T20:25:47Z",
                        "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Cuenta Perfiles- M.N.- - ERB-237",
                        "number": "2180700688677950",
                        "public_identification_name": "CLABE",
                        "public_identification_value": "2180700008677950",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Cuentas de efectivo",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link_id"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve accounts
accounts = client.Accounts.create(
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.retrieve link: 'link-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.retrieve('link-id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Credit Card Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 1550.15,
                          "current": 4049.85,
                        },
                        "balance_type": "LIABILITY",
                        "category": "CREDIT_CARD",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "credit_limit": 15600,
                          "cutting_date": "2021-04-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "minimum_payment": 690,
                          "next_payment_date": "2021-03-31",
                          "no_interest_payment": 11550.15,
                        },
                        "currency": "MXN",
                        "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2022-02-01T20:25:47Z",
                        "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Erebor Gold",
                        "number": "4057068115181",
                        "public_identification_name": "CLABE",
                        "public_identification_value": "150194683119900273",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Tarjetas de cr√©dito",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link_id"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve accounts
accounts = client.Accounts.create(
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.retrieve link: 'link-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.retrieve('link-id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Loan Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 34708.36,
                          "current": 34708.36,
                        },
                        "balance_type": "LIABILITY",
                        "category": "LOAN_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "MXN",
                        "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2022-02-01T20:25:47Z",
                        "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "ER8072930097",
                          "contract_start_date": "2018-01-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "type": "MONTHLY",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "SFH",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 41,
                          "number_of_installments_total": 50,
                          "outstanding_balance": 164000,
                          "outstanding_principal": 142000,
                          "payment_day": "17",
                          "principal": 192000,
                        },
                        "name": "Cuenta n√≥mina",
                        "number": "72964044",
                        "public_identification_name": "ACCOUNT_NUMBER",
                        "public_identification_value": "217035843284091420",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Cr√©ditos",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link_id"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve accounts
accounts = client.Accounts.create(
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.retrieve link: 'link-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.retrieve('link-id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Pension Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 26305.33,
                          "current": 26305.33,
                        },
                        "balance_type": "ASSET",
                        "category": "PENSION_FUND_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "BRL",
                        "funds_data": [
                          {
                            "balance": 94793,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "name": "CICLO DE VIDA 2040 I",
                            "percentage": 9,
                            "public_identifications": [
                              {
                                "name": "CNPJ",
                                "value": "11.233.333/4424-01",
                              },
                              {
                                "name": "SUSEP",
                                "value": "13311.2333222/3333-44",
                              },
                            ],
                            "type": "PGBL",
                          },
                          {
                            "balance": 50834,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "name": "CICLO DE VIDA 2020 I",
                            "percentage": 91,
                            "public_identifications": [
                              {
                                "name": "CNPJ",
                                "value": "11.222.333/4444-02",
                              },
                              {
                                "name": "SUSEP",
                                "value": "11111.222222/3333-44",
                              },
                            ],
                            "type": "PGBL",
                          },
                        ],
                        "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
                        "institution": {
                          "name": "erebor_br_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2021-03-09T08:19:05Z",
                        "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Conta corrente",
                        "number": "37903487",
                        "public_identification_name": "PENSION_PLAN_ID",
                        "public_identification_value": "626249048387247512",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Contas",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/accounts/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link_id"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve accounts
accounts = client.Accounts.create(
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.accounts.retrieve link: 'link-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.accounts.retrieve('link-id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Savings Account",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "balance": {
                          "available": 4978436.05,
                          "current": 4978436.05,
                        },
                        "balance_type": "ASSET",
                        "category": "SAVINGS_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "COP",
                        "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
                        "institution": {
                          "name": "erebor_co_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2021-03-09T10:28:40Z",
                        "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Cuenta de Ahorro",
                        "number": "13166008",
                        "public_identification_name": "ACCOUNT_NUMBER",
                        "public_identification_value": "260825906",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Cuenta de Ahorro",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/accounts/",
              "request": {
                "body": "root.StandardRequest",
                "content-type": "application/json",
                "name": "RetrieveAccountsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<optional<root.Account>>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListAccounts:
      path: /api/accounts/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing accounts in your Belvo account. By
        default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all accounts
      request:
        name: ListAccountsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          balance__available:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` matching exactly
              this value.
          balance__available__lt:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` less than this
              value.
          balance__available__lte:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` less than or equal
              to this value.
          balance__available__gt:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` greater than this
              value.
          balance__available__gte:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` greater than or
              equal to this value.
          balance__available__range:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` within a range of
              two values.
          balance__current:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.current` matching exactly
              this value.
          balance__current__lt:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.current` less than this
              value.
          balance__current__lte:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` less than or equal
              to this value.
          balance__current__gt:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.current` greater than this
              value.
          balance__current__gte:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` greater than or
              equal to this value.
          balance__current__range:
            type: optional<string>
            docs: >-
              Return accounts that have a `balance.available` within a range of
              two values.
          category:
            type: optional<string>
            docs: >-
              Return accounts only for the given category (for example,
              `CHECKING_ACCOUNT` and `SAVINGS_ACCOUNT`).
          category__in:
            type: optional<string>
            docs: >-
              Return accounts only for the given categories (for example,
              `CHECKING_ACCOUNT` and `SAVINGS_ACCOUNT`).
          created_at__gt:
            type: optional<string>
            docs: >-
              Return accounts that were last updated in Belvo's database after
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return accounts that were last updated in Belvo's database after
              or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return accounts that were last updated in Belvo's database before
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return accounts that were last updated in Belvo's database before
              or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return accounts that were last updated in Belvo's database between
              two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          currency:
            type: optional<string>
            docs: >-
              Return accounts that hold finances in only this three-letter
              currency code.
          currency__in:
            type: optional<string>
            docs: >-
              Return accounts that hold finances in one of these three-letter
              currency codes.
          id:
            type: optional<string>
            docs: Return information only for this `account.id`.
          id__in:
            type: optional<string>
            docs: Return information for these `account.id`s.
          institution:
            type: optional<string>
            docs: >-
              Return accounts only for this institution (use the
              Belvo-designated name, such as `erebor_mx_retail`).
          institution__in:
            type: optional<string>
            docs: >-
              Return accounts only for these institutions (use the
              Belvo-designated names, such as `erebor_mx_retail` and
              `gringotts_mx_retail`).
          link__in:
            type: optional<string>
            docs: Return accounts only for these `link.id`s.
          name:
            type: optional<string>
            docs: >-
              Return accounts with exactly this internal (specified by the
              institution) name.
          name__icontains:
            type: optional<string>
            docs: >-
              Return accounts partially matching this internal (specified by the
              institution) name.
          number:
            type: optional<string>
            docs: >-
              Return information only for this account number (as specified by
              the institution).
          number__in:
            type: optional<string>
            docs: >-
              Return information for these account numbers (as specified by the
              institution).
          public_identification_name:
            type: optional<string>
            docs: >-
              Return information only for this type of account ID. For example,
              CLABE accounts.
          public_identification_value:
            type: optional<string>
            docs: >-
              Return information only for this account ID. For example, the
              account number for a CLABE account.
          type:
            type: optional<string>
            docs: >-
              Return information only for accounts matching this account type,
              as designated by the institution.
      response:
        docs: Ok
        type: root.AccountsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            balance__available: '4000.00'
            balance__available__lt: '6000.00'
            balance__available__lte: '5999.00'
            balance__available__gt: '2000.00'
            balance__available__gte: '1999.00'
            balance__available__range: 3000.00,4350.00
            balance__current: '4000.00'
            balance__current__lt: '6000.00'
            balance__current__lte: '5999.00'
            balance__current__gt: '2000.00'
            balance__current__gte: '1999.00'
            balance__current__range: 3000.00,4350.00
            category: CREDIT_ACCOUNT
            category__in: CHECKING_ACCOUNT,SAVINGS_ACCOUNT
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            currency: COP
            currency__in: COP,MXN
            id: 24ccab1d-3a86-4136-a6eb-e04bf52b356f
            id__in: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
            institution: erebor_mx_retail
            institution__in: erebor_mx_retail,gringotts_mx_retail
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            name: Cuenta Perfiles- M.N. - MXN-666
            name__icontains: Perfiles
            number: '4057068115181'
            number__in: 4057068115181,7809346821648
            public_identification_name: CLABE
            public_identification_value: '150194683119900273'
            type: Cuentas de efectivo
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                  collected_at: '2019-09-27T13:01:41Z'
                  created_at: '2022-02-09T08:45:50Z'
                  category: CHECKING_ACCOUNT
                  balance_type: ASSET
                  type: Cuentas de efectivo
                  name: Cuenta Perfiles- M.N. - MXN-666
                  number: '4057068115181'
                  balance:
                    current: 5874.13
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '150194683119900273'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  bank_product_id: bank_product_id
                  internal_identification: internal_identification
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/accounts/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Accounts

                for account in client.Accounts.list():
                    pprint(account)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveAccounts:
      path: /api/accounts/
      method: POST
      auth: true
      docs: |-
        Retrieve accounts from an existing link.

          > üöß Scheduled field deprecation
          > 
          > Please note that we will soon be deprecating the following fields in our `loan_data` object:
          > - `cutting_date`
          > - `cutting_day`
          > - `credit_limit`: replaced by the `principal` field.
          > - `interest_rate`: replaced by the `interest_rates` object.
          > - `last_payment_date`
          > - `last_period_balance`: replaced by the `outstanding_balance ` field.
          > - `limit_day`
          > - `limit_date`: replaced by the `payment_day ` field.
          > - `no_interest_payment`
          > - `payment_due_day`
      source:
        openapi: ../openapi.yml
      display-name: Retrieve accounts for a link
      request:
        body: root.StandardRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: RetrieveAccountsRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<optional<root.Account>>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - name: Checking Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              - id: c21f3914-bcbe-44c4-a2e8-a5e33f6888d4
                link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: CHECKING_ACCOUNT
                balance_type: ASSET
                type: Cuentas de efectivo
                name: Cuenta Perfiles- M.N.- - ERB-237
                number: '2180700688677950'
                balance:
                  current: 4523.48
                  available: 4523.48
                currency: MXN
                public_identification_name: CLABE
                public_identification_value: '2180700008677950'
                last_accessed_at: '2022-02-01T20:25:47Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link_id"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve accounts

                accounts = client.Accounts.create(
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.retrieve link: 'link-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.retrieve('link-id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Credit Card Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              - id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
                link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: CREDIT_CARD
                balance_type: LIABILITY
                type: Tarjetas de cr√©dito
                name: Erebor Gold
                number: '4057068115181'
                balance:
                  current: 4049.85
                  available: 1550.15
                currency: MXN
                public_identification_name: CLABE
                public_identification_value: '150194683119900273'
                last_accessed_at: '2022-02-01T20:25:47Z'
                credit_data:
                  credit_limit: 15600
                  collected_at: '2022-02-09T08:45:50Z'
                  cutting_date: '2021-04-11'
                  next_payment_date: '2021-03-31'
                  minimum_payment: 690
                  no_interest_payment: 11550.15
                  interest_rate: 4
                  end_date: end_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link_id"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve accounts

                accounts = client.Accounts.create(
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.retrieve link: 'link-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.retrieve('link-id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Loan Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              - id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
                link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: LOAN_ACCOUNT
                balance_type: LIABILITY
                type: Cr√©ditos
                name: Cuenta n√≥mina
                number: '72964044'
                balance:
                  current: 34708.36
                  available: 34708.36
                currency: MXN
                public_identification_name: ACCOUNT_NUMBER
                public_identification_value: '217035843284091420'
                last_accessed_at: '2022-02-01T20:25:47Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: SFH
                  payment_day: '17'
                  outstanding_principal: 142000
                  outstanding_balance: 164000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      type: MONTHLY
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 50
                  number_of_installments_outstanding: 41
                  contract_start_date: '2018-01-01'
                  contract_end_date: '2027-10-01'
                  contract_number: ER8072930097
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link_id"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve accounts

                accounts = client.Accounts.create(
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.retrieve link: 'link-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.retrieve('link-id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Pension Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              - id: 3d5b0f90-90df-455d-a647-5b74feb746f6
                link: fbbb5ea7-4605-437f-b5c5-667fd037a303
                institution:
                  name: erebor_br_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: PENSION_FUND_ACCOUNT
                balance_type: ASSET
                type: Contas
                name: Conta corrente
                number: '37903487'
                balance:
                  current: 26305.33
                  available: 26305.33
                currency: BRL
                public_identification_name: PENSION_PLAN_ID
                public_identification_value: '626249048387247512'
                last_accessed_at: '2021-03-09T08:19:05Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                funds_data:
                  - collected_at: '2022-02-09T08:45:50Z'
                    name: CICLO DE VIDA 2040 I
                    type: PGBL
                    public_identifications:
                      - name: CNPJ
                        value: 11.233.333/4424-01
                      - name: SUSEP
                        value: 13311.2333222/3333-44
                    balance: 94793
                    percentage: 9
                  - collected_at: '2022-02-09T08:45:50Z'
                    name: CICLO DE VIDA 2020 I
                    type: PGBL
                    public_identifications:
                      - name: CNPJ
                        value: 11.222.333/4444-02
                      - name: SUSEP
                        value: 11111.222222/3333-44
                    balance: 50834
                    percentage: 91
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link_id"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve accounts

                accounts = client.Accounts.create(
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.retrieve link: 'link-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.retrieve('link-id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Savings Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              - id: 3d5b0f90-90df-455d-a647-5b74feb746f6
                link: fbbb5ea7-4605-437f-b5c5-667fd037a303
                institution:
                  name: erebor_co_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: SAVINGS_ACCOUNT
                balance_type: ASSET
                type: Cuenta de Ahorro
                name: Cuenta de Ahorro
                number: '13166008'
                balance:
                  current: 4978436.05
                  available: 4978436.05
                currency: COP
                public_identification_name: ACCOUNT_NUMBER
                public_identification_value: '260825906'
                last_accessed_at: '2021-03-09T10:28:40Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link_id"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve accounts

                accounts = client.Accounts.create(
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.retrieve link: 'link-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.retrieve('link-id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchAccounts:
      path: /api/accounts/
      method: PATCH
      auth: true
      docs: >-
        Used to resume an Account retrieve session that was paused because an
        MFA token was required by the institution.

          > üöß Scheduled field deprecation
          > 
          > Please note that we will soon be deprecating the following fields in our `loan_data` object:
          > - `cutting_date`
          > - `cutting_day`
          > - `credit_limit`: replaced by the `principal` field.
          > - `interest_rate`: replaced by the `interest_rates` object.
          > - `last_payment_date`
          > - `last_period_balance`: replaced by the `outstanding_balance ` field.
          > - `limit_day`
          > - `limit_date`: replaced by the `payment_day ` field.
          > - `no_interest_payment`
          > - `payment_due_day`
      source:
        openapi: ../openapi.yml
      display-name: Complete an accounts request
      request:
        body: root.PatchBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchAccountsRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<optional<root.Account>>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - name: Checking Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: c21f3914-bcbe-44c4-a2e8-a5e33f6888d4
                link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: CHECKING_ACCOUNT
                balance_type: ASSET
                type: Cuentas de efectivo
                name: Cuenta Perfiles- M.N.- - ERB-237
                number: '2180700688677950'
                balance:
                  current: 4523.48
                  available: 4523.48
                currency: MXN
                public_identification_name: CLABE
                public_identification_value: '2180700008677950'
                last_accessed_at: '2022-02-01T20:25:47Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume accounts

                accounts = client.Accounts.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Credit Card Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
                link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: CREDIT_CARD
                balance_type: LIABILITY
                type: Tarjetas de cr√©dito
                name: Erebor Gold
                number: '4057068115181'
                balance:
                  current: 4049.85
                  available: 1550.15
                currency: MXN
                public_identification_name: CLABE
                public_identification_value: '150194683119900273'
                last_accessed_at: '2022-02-01T20:25:47Z'
                credit_data:
                  credit_limit: 15600
                  collected_at: '2022-02-09T08:45:50Z'
                  cutting_date: '2021-04-11'
                  next_payment_date: '2021-03-31'
                  minimum_payment: 690
                  no_interest_payment: 11550.15
                  interest_rate: 4
                  end_date: end_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume accounts

                accounts = client.Accounts.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Loan Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
                link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: LOAN_ACCOUNT
                balance_type: LIABILITY
                type: Cr√©ditos
                name: Cuenta n√≥mina
                number: '72964044'
                balance:
                  current: 34708.36
                  available: 34708.36
                currency: MXN
                public_identification_name: ACCOUNT_NUMBER
                public_identification_value: '217035843284091420'
                last_accessed_at: '2022-02-01T20:25:47Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: SFH
                  payment_day: '17'
                  outstanding_principal: 142000
                  outstanding_balance: 164000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      type: MONTHLY
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 50
                  number_of_installments_outstanding: 41
                  contract_start_date: '2018-01-01'
                  contract_end_date: '2027-10-01'
                  contract_number: ER8072930097
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume accounts

                accounts = client.Accounts.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Pension Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 3d5b0f90-90df-455d-a647-5b74feb746f6
                link: fbbb5ea7-4605-437f-b5c5-667fd037a303
                institution:
                  name: erebor_br_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: PENSION_FUND_ACCOUNT
                balance_type: ASSET
                type: Contas
                name: Conta corrente
                number: '37903487'
                balance:
                  current: 26305.33
                  available: 26305.33
                currency: BRL
                public_identification_name: PENSION_PLAN_ID
                public_identification_value: '626249048387247512'
                last_accessed_at: '2021-03-09T08:19:05Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                funds_data:
                  - collected_at: '2022-02-09T08:45:50Z'
                    name: CICLO DE VIDA 2040 I
                    type: PGBL
                    public_identifications:
                      - name: CNPJ
                        value: 11.233.333/4424-01
                      - name: SUSEP
                        value: 13311.2333222/3333-44
                    balance: 94793
                    percentage: 9
                  - collected_at: '2022-02-09T08:45:50Z'
                    name: CICLO DE VIDA 2020 I
                    type: PGBL
                    public_identifications:
                      - name: CNPJ
                        value: 11.222.333/4444-02
                      - name: SUSEP
                        value: 11111.222222/3333-44
                    balance: 50834
                    percentage: 91
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume accounts

                accounts = client.Accounts.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Savings Account
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 3d5b0f90-90df-455d-a647-5b74feb746f6
                link: fbbb5ea7-4605-437f-b5c5-667fd037a303
                institution:
                  name: erebor_co_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: SAVINGS_ACCOUNT
                balance_type: ASSET
                type: Cuenta de Ahorro
                name: Cuenta de Ahorro
                number: '13166008'
                balance:
                  current: 4978436.05
                  available: 4978436.05
                currency: COP
                public_identification_name: ACCOUNT_NUMBER
                public_identification_value: '260825906'
                last_accessed_at: '2021-03-09T10:28:40Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/accounts/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume accounts

                accounts = client.Accounts.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailAccount:
      path: /api/accounts/{id}/
      method: GET
      auth: true
      docs: |-
        Get the details of a specific account.

          > üöß Scheduled field deprecation
          >
          > Please note that we will soon be deprecating the following fields in our `loan_data` object:
          > - `cutting_date`
          > - `cutting_day`
          > - `credit_limit`: replaced by the `principal` field.
          > - `interest_rate`: replaced by the `interest_rates` object.
          > - `last_payment_date`
          > - `last_period_balance`: replaced by the `outstanding_balance ` field.
          > - `limit_day`
          > - `limit_date`: replaced by the `payment_day ` field.
          > - `no_interest_payment`
          > - `payment_due_day`
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `account.id` you want to get detailed information about.
      display-name: Get an account's details
      request:
        name: DetailAccountRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: optional<root.Account>
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: Checking Account
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: c21f3914-bcbe-44c4-a2e8-a5e33f6888d4
              link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
              institution:
                name: erebor_mx_retail
                type: bank
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              category: CHECKING_ACCOUNT
              balance_type: ASSET
              type: Cuentas de efectivo
              name: Cuenta Perfiles- M.N.- - ERB-237
              number: '2180700688677950'
              balance:
                current: 4523.48
                available: 4523.48
              currency: MXN
              public_identification_name: CLABE
              public_identification_value: '2180700008677950'
              last_accessed_at: '2022-02-01T20:25:47Z'
              credit_data:
                credit_limit: 192000
                collected_at: '2019-09-27T13:01:41Z'
                cutting_date: '2019-12-11'
                next_payment_date: '2019-12-13'
                minimum_payment: 2400.3
                no_interest_payment: 2690.83
                interest_rate: 4
                end_date: end_date
                monthly_payment: 1.1
                last_payment_date: last_payment_date
              loan_data:
                collected_at: '2022-02-09T08:45:50Z'
                contract_amount: 202000
                principal: 192000
                loan_type: Consignado
                payment_day: '27'
                outstanding_principal: 142023
                outstanding_balance: 182000
                monthly_payment: 1000
                interest_rates:
                  - name: jurosEfetivo
                    value: 7.85
                fees:
                  - type: OPERATION_FEE
                    value: 5.6
                number_of_installments_total: 60
                number_of_installments_outstanding: 48
                contract_start_date: '2020-03-01'
                contract_end_date: '2027-10-01'
                contract_number: 890ASLDJF87SD00
                credit_limit: 1.1
                last_period_balance: 1.1
                interest_rate: 1.1
                limit_day: limit_day
                cutting_day: cutting_day
                cutting_date: cutting_date
                last_payment_date: last_payment_date
                no_interest_payment: 1.1
              receivables_data:
                current: 2193.83
                available: 800.37
                anticipated: 1393.46
                collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/accounts/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get an account

                account = client.Accounts.get(id="account-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.detail id: 'account-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.detail('accountId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Credit Card Account
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
              link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
              institution:
                name: erebor_mx_retail
                type: bank
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              category: CREDIT_CARD
              balance_type: LIABILITY
              type: Tarjetas de cr√©dito
              name: Erebor Gold
              number: '4057068115181'
              balance:
                current: 4049.85
                available: 1550.15
              currency: MXN
              public_identification_name: CLABE
              public_identification_value: '150194683119900273'
              last_accessed_at: '2022-02-01T20:25:47Z'
              credit_data:
                credit_limit: 15600
                collected_at: '2022-02-09T08:45:50Z'
                cutting_date: '2021-04-11'
                next_payment_date: '2021-03-31'
                minimum_payment: 690
                no_interest_payment: 11550.15
                interest_rate: 4
                end_date: end_date
              loan_data:
                collected_at: '2022-02-09T08:45:50Z'
                contract_amount: 202000
                principal: 192000
                loan_type: Consignado
                payment_day: '27'
                outstanding_principal: 142023
                outstanding_balance: 182000
                monthly_payment: 1000
                interest_rates:
                  - name: jurosEfetivo
                    value: 7.85
                fees:
                  - type: OPERATION_FEE
                    value: 5.6
                number_of_installments_total: 60
                number_of_installments_outstanding: 48
                contract_start_date: '2020-03-01'
                contract_end_date: '2027-10-01'
                contract_number: 890ASLDJF87SD00
                credit_limit: 1.1
                last_period_balance: 1.1
                interest_rate: 1.1
                limit_day: limit_day
                cutting_day: cutting_day
                cutting_date: cutting_date
                last_payment_date: last_payment_date
                no_interest_payment: 1.1
              receivables_data:
                current: 2193.83
                available: 800.37
                anticipated: 1393.46
                collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/accounts/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get an account

                account = client.Accounts.get(id="account-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.detail id: 'account-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.detail('accountId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Loan Account
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
              link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
              institution:
                name: erebor_mx_retail
                type: bank
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              category: LOAN_ACCOUNT
              balance_type: LIABILITY
              type: Cr√©ditos
              name: Cuenta n√≥mina
              number: '72964044'
              balance:
                current: 34708.36
                available: 34708.36
              currency: MXN
              public_identification_name: ACCOUNT_NUMBER
              public_identification_value: '217035843284091420'
              last_accessed_at: '2022-02-01T20:25:47Z'
              credit_data:
                credit_limit: 192000
                collected_at: '2019-09-27T13:01:41Z'
                cutting_date: '2019-12-11'
                next_payment_date: '2019-12-13'
                minimum_payment: 2400.3
                no_interest_payment: 2690.83
                interest_rate: 4
                end_date: end_date
                monthly_payment: 1.1
                last_payment_date: last_payment_date
              loan_data:
                collected_at: '2022-02-09T08:45:50Z'
                contract_amount: 202000
                principal: 192000
                loan_type: SFH
                payment_day: '17'
                outstanding_principal: 142000
                outstanding_balance: 164000
                monthly_payment: 1000
                interest_rates:
                  - name: jurosEfetivo
                    type: MONTHLY
                    value: 7.85
                fees:
                  - type: OPERATION_FEE
                    value: 5.6
                number_of_installments_total: 50
                number_of_installments_outstanding: 41
                contract_start_date: '2018-01-01'
                contract_end_date: '2027-10-01'
                contract_number: ER8072930097
                credit_limit: 1.1
                last_period_balance: 1.1
                interest_rate: 1.1
                limit_day: limit_day
                cutting_day: cutting_day
                cutting_date: cutting_date
                last_payment_date: last_payment_date
                no_interest_payment: 1.1
              receivables_data:
                current: 2193.83
                available: 800.37
                anticipated: 1393.46
                collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/accounts/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get an account

                account = client.Accounts.get(id="account-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.detail id: 'account-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.detail('accountId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Pension Account
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 3d5b0f90-90df-455d-a647-5b74feb746f6
              link: fbbb5ea7-4605-437f-b5c5-667fd037a303
              institution:
                name: erebor_br_retail
                type: bank
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              category: PENSION_FUND_ACCOUNT
              balance_type: ASSET
              type: Contas
              name: Conta corrente
              number: '37903487'
              balance:
                current: 26305.33
                available: 26305.33
              currency: BRL
              public_identification_name: PENSION_PLAN_ID
              public_identification_value: '626249048387247512'
              last_accessed_at: '2021-03-09T08:19:05Z'
              credit_data:
                credit_limit: 192000
                collected_at: '2019-09-27T13:01:41Z'
                cutting_date: '2019-12-11'
                next_payment_date: '2019-12-13'
                minimum_payment: 2400.3
                no_interest_payment: 2690.83
                interest_rate: 4
                end_date: end_date
                monthly_payment: 1.1
                last_payment_date: last_payment_date
              loan_data:
                collected_at: '2022-02-09T08:45:50Z'
                contract_amount: 202000
                principal: 192000
                loan_type: Consignado
                payment_day: '27'
                outstanding_principal: 142023
                outstanding_balance: 182000
                monthly_payment: 1000
                interest_rates:
                  - name: jurosEfetivo
                    value: 7.85
                fees:
                  - type: OPERATION_FEE
                    value: 5.6
                number_of_installments_total: 60
                number_of_installments_outstanding: 48
                contract_start_date: '2020-03-01'
                contract_end_date: '2027-10-01'
                contract_number: 890ASLDJF87SD00
                credit_limit: 1.1
                last_period_balance: 1.1
                interest_rate: 1.1
                limit_day: limit_day
                cutting_day: cutting_day
                cutting_date: cutting_date
                last_payment_date: last_payment_date
                no_interest_payment: 1.1
              funds_data:
                - collected_at: '2022-02-09T08:45:50Z'
                  name: CICLO DE VIDA 2040 I
                  type: PGBL
                  public_identifications:
                    - name: CNPJ
                      value: 11.233.333/4424-01
                    - name: SUSEP
                      value: 13311.2333222/3333-44
                  balance: 94793
                  percentage: 9
                - collected_at: '2022-02-09T08:45:50Z'
                  name: CICLO DE VIDA 2020 I
                  type: PGBL
                  public_identifications:
                    - name: CNPJ
                      value: 11.222.333/4444-02
                    - name: SUSEP
                      value: 11111.222222/3333-44
                  balance: 50834
                  percentage: 91
              receivables_data:
                current: 2193.83
                available: 800.37
                anticipated: 1393.46
                collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/accounts/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get an account

                account = client.Accounts.get(id="account-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.detail id: 'account-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.detail('accountId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Savings Account
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 3d5b0f90-90df-455d-a647-5b74feb746f6
              link: fbbb5ea7-4605-437f-b5c5-667fd037a303
              institution:
                name: erebor_co_retail
                type: bank
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              category: SAVINGS_ACCOUNT
              balance_type: ASSET
              type: Cuenta de Ahorro
              name: Cuenta de Ahorro
              number: '13166008'
              balance:
                current: 4978436.05
                available: 4978436.05
              currency: COP
              public_identification_name: ACCOUNT_NUMBER
              public_identification_value: '260825906'
              last_accessed_at: '2021-03-09T10:28:40Z'
              credit_data:
                credit_limit: 192000
                collected_at: '2019-09-27T13:01:41Z'
                cutting_date: '2019-12-11'
                next_payment_date: '2019-12-13'
                minimum_payment: 2400.3
                no_interest_payment: 2690.83
                interest_rate: 4
                end_date: end_date
                monthly_payment: 1.1
                last_payment_date: last_payment_date
              loan_data:
                collected_at: '2022-02-09T08:45:50Z'
                contract_amount: 202000
                principal: 192000
                loan_type: Consignado
                payment_day: '27'
                outstanding_principal: 142023
                outstanding_balance: 182000
                monthly_payment: 1000
                interest_rates:
                  - name: jurosEfetivo
                    value: 7.85
                fees:
                  - type: OPERATION_FEE
                    value: 5.6
                number_of_installments_total: 60
                number_of_installments_outstanding: 48
                contract_start_date: '2020-03-01'
                contract_end_date: '2027-10-01'
                contract_number: 890ASLDJF87SD00
                credit_limit: 1.1
                last_period_balance: 1.1
                interest_rate: 1.1
                limit_day: limit_day
                cutting_day: cutting_day
                cutting_date: cutting_date
                last_payment_date: last_payment_date
                no_interest_payment: 1.1
              receivables_data:
                current: 2193.83
                available: 800.37
                anticipated: 1393.46
                collected_at: '2022-02-09T08:45:50Z'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/accounts/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get an account

                account = client.Accounts.get(id="account-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.detail id: 'account-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.detail('accountId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyAccount:
      path: /api/accounts/{id}/
      method: DELETE
      auth: true
      docs: >-
        Delete a specific account and all associated transactions, as well as
        owners, from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `account.id` you want to delete
      display-name: Delete an account
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/accounts/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete an account

                client.Accounts.delete("account-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.accounts.delete id: 'account-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.accounts.delete('accountId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Accounts
docs: >-
  An **account** is the representation of a bank account inside a financial
  institution. A user can have one or more accounts in an institution. 


  For example, one user (or link) can have a checking account, several credit
  cards, and a loan account.


  Querying for a user's account information is useful as you can get information
  regarding:


  - what types of accounts the user has

  - the balance for each account (savings, checking, credit card, loan, and so
  on)



  > üöß Scheduled field deprecation

  > 

  > Please note that we will soon be deprecating the following fields in our
  `loan_data` object:

  > 

  > - `cutting_date`

  > - `cutting_day`

  > - `credit_limit`: replaced by the `principal` field.

  > - `interest_rate`: replaced by the `interest_rates` object.

  > - `last_payment_date`

  > - `last_period_balance`: replaced by the `outstanding_balance ` field.

  > - `limit_day`

  > - `limit_date`: replaced by the `payment_day ` field.

  > - `no_interest_payment`

  > - `payment_due_day`


  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field                         | Available Filters                      |

  | ----------------------------- | -------------------------------------- |

  | `balance__available`          | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `balance__current`            | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `bank_product_id`             | `=`                                    |

  | `category`                    | `=`, `in`                              |

  | `created_at `                 | `gt`, `gte`, `lt`, `lte`, `range`      |

  | `currency`                    | `=`\*, `in`                            |

  | `id`                          | `=`, `in`                              |

  | `institution`                 | `=`, `in`                              |

  | `internal_identification`     | `=`                                    |

  | `link`                        | `=`, `in`                              |

  | `name`                        | `=`, `icontains`                       |

  | `number`                      | `=`, `in`                              |

  | `public_identification_name`  | `=`                                    |

  | `public_identification_value` | `=`                                    |

  | `type`                        | `=`, `in`                              |


  ```curl cURL

  ## Filtering results to have savings accounts with a balance

  ## between 5000 and 8000 Colombian pesos

  https://sandbox.belvo.com/api/accounts/?category=savings&balance__available__range=5000,8000&currency=COP

  ```

  ```javascript Node

  // Filtering results to have savings accounts with a balance

  // between 5000 and 8000 Colombian pesos

  client.accounts.list({
    filters: {
      category: "savings",
      balance__available__range: "5000,8000",
      currency: "COP"
    }
  })

  ```

  ```python Python

  ## Filtering results to have savings accounts with a balance

  ## between 5000 and 8000 Colombian pesos

  client.Accounts.list(category="savings",balance__available__range="5000,8000",currency="COP")

  ```

  ```ruby Ruby

  ## Filtering results to have savings accounts with a balance

  ## between 5000 and 8000 Colombian pesos

  client.accounts.list(params: {
    category: "savings",
    balance__available__range: "5000,8000",
    currency: "COP"
  })

  ```
",
    },
    "balances.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "A **balance** represents the amount of funds available in a checking or savings account over a period of time.

<ul>
  <li>
    If your Balance request is not for a checking or savings account, we return
    an empty array.
  </li>
  <li>
    If we cannot calculate the balance for a given day within your requested
    period, the <code>balance</code> and <code>current_balance</code> fields
    will return <code>null</code> for that day.
  </li>
</ul>

> üìò 
> 
> Savings accounts that do not have any associated transactions (for example, some _poupan√ßa_ accounts in Brazil) will not contain accurate Balance information. We do not recommend using the Balance endpoint for these types of accounts. 
> 
> Savings accounts vary from institution to institution, so we recommend that you first use our [Retrieve transactions for a link](https://developers.belvo.com/reference/retrievetransactions) request, adding the `account` in the request body, to see if the Savings account has any associated transactions.


### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field             | Available Filters                      |
| ----------------- | -------------------------------------- |
| `account`         | `=`, `in`                              |
| `account_type`    | `=`, `in`                              |
| `balance`         | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `currency`        | `=`, `in`                              |
| `current_balance` | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `id`              | `=`, `in`                              |
| `institution`     | `=`, `in`                              |
| `link`            | `=`, `in`                              |
| `value_date`      | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

```curl cURL
# Filtering results to have balances greater than 5000
https://api.belvo.com/api/balances/?balance__gt=5000 

# Filtering results to have balances greater than 5000 and in Brazilian Reis
https://api.belvo.com/api/balances/?balance__gt=5000&currency=BRL
```
```javascript Node
//  Filtering results to have balances greater than 5000
client.balances.list({
  filters: {
    balance__gt: 5000
  }
})

//  Filtering results to have balances greater than 5000 and in Brazilian Reis

client.balances.list({
  filters: {
    balance__gt: 5000,
    currency: "BRL"
  }
})
```
```python Python
# Filtering results to have balances greater than 5000
client.Balances.list(balance__gt=5000)

# Filtering results to have balances greater than 5000 and in Brazilian Reis
client.Balances.list(balance__gt=5000, currency="BRL")
```
```ruby Ruby
# Filtering results to have balances greater than 5000
client.balances.list(params: {
  balance__gt: 5000
})

# Filtering results to have balances greater than 5000 and in Brazilian Reis
client.balances.list(params: {
  balance__gt: 5000,
  currency: "BRL"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Balances",
          "endpoints": {
            "DestroyBalance": {
              "auth": true,
              "display-name": "Delete a balance",
              "docs": "Delete a specific balance from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/balance/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete a balance
client.Balances.delete("balance-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.balances.delete id: 'balance-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.balances.delete('balanceId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/balances/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `balance.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailBalance": {
              "auth": true,
              "display-name": "Get a balance's details",
              "docs": "Get the details of a specific balance.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/balances/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a balance
balance = client.Balances.get(id="balance-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.balances.detail id: 'balance-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.balances.detail('balanceId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Balance Example (Checking Account)",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "account": {
                        "balance": {
                          "available": 146.81,
                          "current": 146.81,
                        },
                        "balance_type": "ASSET",
                        "category": "CHECKING_ACCOUNT",
                        "collected_at": "2022-06-17T03:20:41Z",
                        "created_at": "2021-10-27T16:18:15Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "BRL",
                        "funds_data": [
                          {
                            "collected_at": "2020-04-23T21:32:55Z",
                          },
                        ],
                        "id": "26428311-7108-40b8-a22b-c310187dd005",
                        "institution": {
                          "name": "erebor_br_retail",
                          "type": "bank",
                        },
                        "internal_identification": "9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c",
                        "last_accessed_at": "2021-03-09T10:28:40Z",
                        "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Erebor Gold",
                        "number": "7889044-1",
                        "public_identification_name": "AGENCY/ACCOUNT",
                        "public_identification_value": "0009/7889044-1",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Cuentas de efectivo",
                      },
                      "balance": 4.25,
                      "collected_at": "2022-04-06T23:30:51Z",
                      "current_balance": 4.25,
                      "id": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                      "value_date": "2022-04-04",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/balances/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `balance.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailBalanceRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Balance",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListBalances": {
              "auth": true,
              "display-name": "List all balances",
              "docs": "Get a paginated list of all existing balances in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/balances/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List balances
for balance in client.Balances.list():
    pprint(balance)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.balances.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.balances.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Balance Example (Checking Account)",
                  "query-parameters": {
                    "account": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "account__in": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509",
                    "account__type": "Cuentas de efectivo",
                    "account__type__in": "Cuentas de efectivo,Credito",
                    "balance": "530.00",
                    "balance__gt": "520.00",
                    "balance__gte": "519.00",
                    "balance__lt": "540.00",
                    "balance__lte": "541.00",
                    "balance__range": "519.00,541.00",
                    "currency": "COP",
                    "currency__in": "COP,MXN",
                    "fields": "link,balance,account",
                    "id": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "id__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "institution": "erebor_mx_retail",
                    "institution__in": "erebor_mx_retail,gringotts_mx_retail",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "value_date": "2022-05-05",
                    "value_date__gt": "2022-05-06",
                    "value_date__gte": "2022-05-04",
                    "value_date__lt": "2022-03-02",
                    "value_date__lte": "2022-03-01",
                    "value_date__range": "2022-03-01,2022-05-06",
                  },
                  "response": {
                    "body": {
                      "count": 385,
                      "next": "https://sandbox.belvo.com/api/balances/?page=2",
                      "results": [
                        {
                          "account": {
                            "balance": {
                              "available": 146.81,
                              "current": 146.81,
                            },
                            "balance_type": "ASSET",
                            "category": "CHECKING_ACCOUNT",
                            "collected_at": "2022-06-17T03:20:41Z",
                            "created_at": "2021-10-27T16:18:15Z",
                            "currency": "BRL",
                            "id": "26428311-7108-40b8-a22b-c310187dd005",
                            "institution": {
                              "name": "erebor_br_retail",
                              "type": "bank",
                            },
                            "internal_identification": "9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c",
                            "last_accessed_at": "2021-03-09T10:28:40Z",
                            "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                            "loan_data": {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "contract_end_date": "2027-10-01",
                              "monthly_payment": 1000,
                              "outstanding_balance": 182000,
                              "principal": 192000,
                            },
                            "name": "Erebor Gold",
                            "number": "7889044-1",
                            "public_identification_name": "AGENCY/ACCOUNT",
                            "public_identification_value": "0009/7889044-1",
                            "type": "Cuentas de efectivo",
                          },
                          "balance": 4.25,
                          "collected_at": "2022-04-06T23:30:51Z",
                          "current_balance": 4.25,
                          "id": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                          "value_date": "2022-04-04",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/balances/",
              "request": {
                "name": "ListBalancesRequest",
                "query-parameters": {
                  "account": {
                    "docs": "The `account.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "account__in": {
                    "docs": "Return balances only for these `account.id`s.",
                    "type": "optional<string>",
                  },
                  "account__type": {
                    "docs": "Return information only for accounts matching this account type, as designated by the institution.",
                    "type": "optional<string>",
                  },
                  "account__type__in": {
                    "docs": "Return information only for accounts matching these account types, as designated by the institution.",
                    "type": "optional<string>",
                  },
                  "balance": {
                    "docs": "Return balances matching exactly this value.",
                    "type": "optional<string>",
                  },
                  "balance__gt": {
                    "docs": "Return balances greater than this value.",
                    "type": "optional<string>",
                  },
                  "balance__gte": {
                    "docs": "Return balances greater than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "balance__lt": {
                    "docs": "Return balances less than this value.",
                    "type": "optional<string>",
                  },
                  "balance__lte": {
                    "docs": "Return balances less than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "balance__range": {
                    "docs": "Return balances between these two values.",
                    "type": "optional<string>",
                  },
                  "currency": {
                    "docs": "Return balances that are in this three-letter currency code.",
                    "type": "optional<string>",
                  },
                  "currency__in": {
                    "docs": "Return balances that are in these three-letter currency codes.",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information only for this `balance.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information only for these `balance.id`s.",
                    "type": "optional<string>",
                  },
                  "institution": {
                    "docs": "Return balances only for this institution (use the Belvo-designated name, such as `erebor_mx_retail`).",
                    "type": "optional<string>",
                  },
                  "institution__in": {
                    "docs": "Return balances only for these institutions (use the Belvo-designated names, such as `erebor_mx_retail` and `gringotts_mx_retail`).",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return balances only for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "value_date": {
                    "docs": "Return balances for exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__gt": {
                    "docs": "Return balances for after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__gte": {
                    "docs": "Return balances for this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__lt": {
                    "docs": "Return balances for before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__lte": {
                    "docs": "Return balances for this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__range": {
                    "docs": "Return balances for this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.BalancesPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchBalances": {
              "auth": true,
              "display-name": "Complete a balances request",
              "docs": "Used to resume a Balance retrieve session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/balances/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume balances
balances = client.Balances.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.balances.resume(
  session: 'session-id',
  token: 'token',
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.balances.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Balance Example (Checking Account)",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "available": 146.81,
                            "current": 146.81,
                          },
                          "balance_type": "ASSET",
                          "category": "CHECKING_ACCOUNT",
                          "collected_at": "2022-06-17T03:20:41Z",
                          "created_at": "2021-10-27T16:18:15Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "BRL",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "26428311-7108-40b8-a22b-c310187dd005",
                          "institution": {
                            "name": "erebor_br_retail",
                            "type": "bank",
                          },
                          "internal_identification": "9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Erebor Gold",
                          "number": "7889044-1",
                          "public_identification_name": "AGENCY/ACCOUNT",
                          "public_identification_value": "0009/7889044-1",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Cuentas de efectivo",
                        },
                        "balance": 4.25,
                        "collected_at": "2022-04-06T23:30:51Z",
                        "current_balance": 4.25,
                        "id": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                        "value_date": "2022-04-04",
                      },
                    ],
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/balances/",
              "request": {
                "body": "root.PatchBody",
                "content-type": "application/json",
                "name": "PatchBalancesRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<root.Balance>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveBalances": {
              "auth": true,
              "display-name": "Retrieve balances for a link",
              "docs": "Retrieve balances from one or more accounts for a specific link within a specified date range.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/balances/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "account": "",
    "date_from": "",
    "date_to": ""
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve balances
balances = client.Balances.create(
  "link_id",
  "2019-07-01",
  date_to="2019-07-31"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.balances.retrieve(
  link: 'link-id',
  date_from: '2019-07-01',
  date_to: '2019-07-31'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.balances.retrieve('linkId', '2019-07-01', { 'dateTo': '2019-07-31' })
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Balance Example (Checking Account)",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2021-01-18",
                    "date_to": "2021-02-15",
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "available": 146.81,
                            "current": 146.81,
                          },
                          "balance_type": "ASSET",
                          "category": "CHECKING_ACCOUNT",
                          "collected_at": "2022-06-17T03:20:41Z",
                          "created_at": "2021-10-27T16:18:15Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "BRL",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "26428311-7108-40b8-a22b-c310187dd005",
                          "institution": {
                            "name": "erebor_br_retail",
                            "type": "bank",
                          },
                          "internal_identification": "9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Erebor Gold",
                          "number": "7889044-1",
                          "public_identification_name": "AGENCY/ACCOUNT",
                          "public_identification_value": "0009/7889044-1",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Cuentas de efectivo",
                        },
                        "balance": 4.25,
                        "collected_at": "2022-04-06T23:30:51Z",
                        "current_balance": 4.25,
                        "id": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                        "value_date": "2022-04-04",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/balances/",
              "request": {
                "body": {
                  "properties": {
                    "account": {
                      "docs": "If provided, only balances matching this `account.id` are returned.",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "date_from": {
                      "docs": "Date from which you want to start receiving balances, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "date_to": {
                      "docs": "Date that you want to stop receiving balances, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "link": {
                      "docs": "The `link.id` that you want to get information for.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                    "token": {
                      "docs": "The OTP token generated by the bank.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "BalancesRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<root.Balance>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListBalances:
      path: /api/balances/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing balances in your Belvo account. By
        default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all balances
      request:
        name: ListBalancesRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
              `account.id` filters in order to improve your performance.
            validation:
              format: uuid
          account:
            type: optional<string>
            docs: >
              The `account.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
              `account.id` filters in order to improve your performance.
            validation:
              format: uuid
          account__in:
            type: optional<string>
            docs: Return balances only for these `account.id`s.
          account__type:
            type: optional<string>
            docs: >-
              Return information only for accounts matching this account type,
              as designated by the institution.
          account__type__in:
            type: optional<string>
            docs: >-
              Return information only for accounts matching these account types,
              as designated by the institution.
          balance:
            type: optional<string>
            docs: Return balances matching exactly this value.
          balance__lt:
            type: optional<string>
            docs: Return balances less than this value.
          balance__lte:
            type: optional<string>
            docs: Return balances less than or equal to this value.
          balance__gt:
            type: optional<string>
            docs: Return balances greater than this value.
          balance__gte:
            type: optional<string>
            docs: Return balances greater than or equal to this value.
          balance__range:
            type: optional<string>
            docs: Return balances between these two values.
          currency:
            type: optional<string>
            docs: Return balances that are in this three-letter currency code.
          currency__in:
            type: optional<string>
            docs: Return balances that are in these three-letter currency codes.
          id:
            type: optional<string>
            docs: Return information only for this `balance.id`.
          id__in:
            type: optional<string>
            docs: Return information only for these `balance.id`s.
          institution:
            type: optional<string>
            docs: >-
              Return balances only for this institution (use the
              Belvo-designated name, such as `erebor_mx_retail`).
          institution__in:
            type: optional<string>
            docs: >-
              Return balances only for these institutions (use the
              Belvo-designated names, such as `erebor_mx_retail` and
              `gringotts_mx_retail`).
          link__in:
            type: optional<string>
            docs: Return balances only for these `link.id`s.
          value_date:
            type: optional<string>
            docs: >-
              Return balances for exactly this date (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
          value_date__gt:
            type: optional<string>
            docs: >-
              Return balances for after this date (`YYYY-MM-DD` or full ISO-8601
              timestamp).
          value_date__gte:
            type: optional<string>
            docs: >-
              Return balances for this date or later (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
          value_date__lt:
            type: optional<string>
            docs: >-
              Return balances for before this date (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
          value_date__lte:
            type: optional<string>
            docs: >-
              Return balances for this date or earlier (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
          value_date__range:
            type: optional<string>
            docs: >-
              Return balances for this date range (`YYYY-MM-DD` or full ISO-8601
              timestamp).
      response:
        docs: Ok
        type: root.BalancesPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - name: Balance Example (Checking Account)
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account__in: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
            account__type: Cuentas de efectivo
            account__type__in: Cuentas de efectivo,Credito
            balance: '530.00'
            balance__lt: '540.00'
            balance__lte: '541.00'
            balance__gt: '520.00'
            balance__gte: '519.00'
            balance__range: 519.00,541.00
            currency: COP
            currency__in: COP,MXN
            id: 73694155-b871-41ec-94e3-37d17ff62b5d
            id__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
            institution: erebor_mx_retail
            institution__in: erebor_mx_retail,gringotts_mx_retail
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            value_date: '2022-05-05'
            value_date__gt: '2022-05-06'
            value_date__gte: '2022-05-04'
            value_date__lt: '2022-03-02'
            value_date__lte: '2022-03-01'
            value_date__range: 2022-03-01,2022-05-06
          response:
            body:
              count: 385
              next: https://sandbox.belvo.com/api/balances/?page=2
              results:
                - id: b834e69b-1aa4-465d-969c-07c886a4fbed
                  account:
                    id: 26428311-7108-40b8-a22b-c310187dd005
                    link: b834e69b-1aa4-465d-969c-07c886a4fbed
                    institution:
                      name: erebor_br_retail
                      type: bank
                    collected_at: '2022-06-17T03:20:41Z'
                    created_at: '2021-10-27T16:18:15Z'
                    category: CHECKING_ACCOUNT
                    balance_type: ASSET
                    type: Cuentas de efectivo
                    name: Erebor Gold
                    number: 7889044-1
                    balance:
                      current: 146.81
                      available: 146.81
                    currency: BRL
                    public_identification_name: AGENCY/ACCOUNT
                    public_identification_value: 0009/7889044-1
                    last_accessed_at: '2021-03-09T10:28:40Z'
                    loan_data:
                      collected_at: '2022-02-09T08:45:50Z'
                      principal: 192000
                      outstanding_balance: 182000
                      monthly_payment: 1000
                      contract_end_date: '2027-10-01'
                    internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
                  value_date: '2022-04-04'
                  balance: 4.25
                  current_balance: 4.25
                  collected_at: '2022-04-06T23:30:51Z'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/balances/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List balances

                for balance in client.Balances.list():
                    pprint(balance)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.balances.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.balances.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveBalances:
      path: /api/balances/
      method: POST
      auth: true
      docs: >-
        Retrieve balances from one or more accounts for a specific link within a
        specified date range.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve balances for a link
      request:
        name: BalancesRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: The `link.id` that you want to get information for.
              validation:
                format: uuid
            account:
              type: optional<string>
              docs: >-
                If provided, only balances matching this `account.id` are
                returned.
              validation:
                format: uuid
            date_from:
              type: string
              docs: >-
                Date from which you want to start receiving balances, in
                `YYYY-MM-DD` format.


                ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            date_to:
              type: string
              docs: >-
                Date that you want to stop receiving balances, in `YYYY-MM-DD`
                format.


                ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date
                (in other words, no future dates).
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            token:
              type: optional<string>
              docs: The OTP token generated by the bank.
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<root.Balance>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - name: Balance Example (Checking Account)
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
            date_from: '2021-01-18'
            date_to: '2021-02-15'
          response:
            body:
              - id: b834e69b-1aa4-465d-969c-07c886a4fbed
                account:
                  id: 26428311-7108-40b8-a22b-c310187dd005
                  link: b834e69b-1aa4-465d-969c-07c886a4fbed
                  institution:
                    name: erebor_br_retail
                    type: bank
                  collected_at: '2022-06-17T03:20:41Z'
                  created_at: '2021-10-27T16:18:15Z'
                  category: CHECKING_ACCOUNT
                  balance_type: ASSET
                  type: Cuentas de efectivo
                  name: Erebor Gold
                  number: 7889044-1
                  balance:
                    current: 146.81
                    available: 146.81
                  currency: BRL
                  public_identification_name: AGENCY/ACCOUNT
                  public_identification_value: 0009/7889044-1
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
                value_date: '2022-04-04'
                balance: 4.25
                current_balance: 4.25
                collected_at: '2022-04-06T23:30:51Z'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/balances/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "account": "",
                    "date_from": "",
                    "date_to": ""
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve balances

                balances = client.Balances.create(
                  "link_id",
                  "2019-07-01",
                  date_to="2019-07-31"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.balances.retrieve(
                  link: 'link-id',
                  date_from: '2019-07-01',
                  date_to: '2019-07-31'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.balances.retrieve('linkId', '2019-07-01', { 'dateTo': '2019-07-31' })
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchBalances:
      path: /api/balances/
      method: PATCH
      auth: true
      docs: >-
        Used to resume a Balance retrieve session that was paused because an MFA
        token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete a balances request
      request:
        body: root.PatchBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchBalancesRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<root.Balance>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - name: Balance Example (Checking Account)
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: b834e69b-1aa4-465d-969c-07c886a4fbed
                account:
                  id: 26428311-7108-40b8-a22b-c310187dd005
                  link: b834e69b-1aa4-465d-969c-07c886a4fbed
                  institution:
                    name: erebor_br_retail
                    type: bank
                  collected_at: '2022-06-17T03:20:41Z'
                  created_at: '2021-10-27T16:18:15Z'
                  category: CHECKING_ACCOUNT
                  balance_type: ASSET
                  type: Cuentas de efectivo
                  name: Erebor Gold
                  number: 7889044-1
                  balance:
                    current: 146.81
                    available: 146.81
                  currency: BRL
                  public_identification_name: AGENCY/ACCOUNT
                  public_identification_value: 0009/7889044-1
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
                value_date: '2022-04-04'
                balance: 4.25
                current_balance: 4.25
                collected_at: '2022-04-06T23:30:51Z'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/balances/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume balances

                balances = client.Balances.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.balances.resume(
                  session: 'session-id',
                  token: 'token',
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.balances.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailBalance:
      path: /api/balances/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific balance.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `balance.id` you want to get detailed information about.
      display-name: Get a balance's details
      request:
        name: DetailBalanceRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.Balance
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: Balance Example (Checking Account)
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: b834e69b-1aa4-465d-969c-07c886a4fbed
              account:
                id: 26428311-7108-40b8-a22b-c310187dd005
                link: b834e69b-1aa4-465d-969c-07c886a4fbed
                institution:
                  name: erebor_br_retail
                  type: bank
                collected_at: '2022-06-17T03:20:41Z'
                created_at: '2021-10-27T16:18:15Z'
                category: CHECKING_ACCOUNT
                balance_type: ASSET
                type: Cuentas de efectivo
                name: Erebor Gold
                number: 7889044-1
                balance:
                  current: 146.81
                  available: 146.81
                currency: BRL
                public_identification_name: AGENCY/ACCOUNT
                public_identification_value: 0009/7889044-1
                last_accessed_at: '2021-03-09T10:28:40Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                funds_data:
                  - collected_at: '2020-04-23T21:32:55Z'
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
                internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
              value_date: '2022-04-04'
              balance: 4.25
              current_balance: 4.25
              collected_at: '2022-04-06T23:30:51Z'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/balances/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a balance

                balance = client.Balances.get(id="balance-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.balances.detail id: 'balance-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.balances.detail('balanceId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyBalance:
      path: /api/balances/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific balance from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `balance.id` that you want to delete.
      display-name: Delete a balance
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/balance/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete a balance

                client.Balances.delete("balance-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.balances.delete id: 'balance-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.balances.delete('balanceId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Balances
docs: >-
  A **balance** represents the amount of funds available in a checking or
  savings account over a period of time.


  <ul>
    <li>
      If your Balance request is not for a checking or savings account, we return
      an empty array.
    </li>
    <li>
      If we cannot calculate the balance for a given day within your requested
      period, the <code>balance</code> and <code>current_balance</code> fields
      will return <code>null</code> for that day.
    </li>
  </ul>


  > üìò 

  > 

  > Savings accounts that do not have any associated transactions (for example,
  some _poupan√ßa_ accounts in Brazil) will not contain accurate Balance
  information. We do not recommend using the Balance endpoint for these types of
  accounts. 

  > 

  > Savings accounts vary from institution to institution, so we recommend that
  you first use our [Retrieve transactions for a
  link](https://developers.belvo.com/reference/retrievetransactions) request,
  adding the `account` in the request body, to see if the Savings account has
  any associated transactions.



  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field             | Available Filters                      |

  | ----------------- | -------------------------------------- |

  | `account`         | `=`, `in`                              |

  | `account_type`    | `=`, `in`                              |

  | `balance`         | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `currency`        | `=`, `in`                              |

  | `current_balance` | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `id`              | `=`, `in`                              |

  | `institution`     | `=`, `in`                              |

  | `link`            | `=`, `in`                              |

  | `value_date`      | `=`, `gt`, `gte`, `lt`, `lte`, `range` |


  ```curl cURL

  # Filtering results to have balances greater than 5000

  https://api.belvo.com/api/balances/?balance__gt=5000 


  # Filtering results to have balances greater than 5000 and in Brazilian Reis

  https://api.belvo.com/api/balances/?balance__gt=5000&currency=BRL

  ```

  ```javascript Node

  //  Filtering results to have balances greater than 5000

  client.balances.list({
    filters: {
      balance__gt: 5000
    }
  })


  //  Filtering results to have balances greater than 5000 and in Brazilian Reis


  client.balances.list({
    filters: {
      balance__gt: 5000,
      currency: "BRL"
    }
  })

  ```

  ```python Python

  # Filtering results to have balances greater than 5000

  client.Balances.list(balance__gt=5000)


  # Filtering results to have balances greater than 5000 and in Brazilian Reis

  client.Balances.list(balance__gt=5000, currency="BRL")

  ```

  ```ruby Ruby

  # Filtering results to have balances greater than 5000

  client.balances.list(params: {
    balance__gt: 5000
  })


  # Filtering results to have balances greater than 5000 and in Brazilian Reis

  client.balances.list(params: {
    balance__gt: 5000,
    currency: "BRL"
  })

  ```
",
    },
    "bankAccounts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "To receive inflow payments to your organization's bank account, you must register the bank accounts (individual and business) using Belvo's Payments API.

- **Individual** bank accounts must be created for each payer (your customer).
- **Business** bank accounts need to be created for the beneficiary of the payment (your organization).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Bank Accounts",
          "endpoints": {
            "CreateBankAccount": {
              "auth": true,
              "display-name": "Create a new bank account",
              "docs": "Create a new bank account from which to send or request funds.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "name": "Organization (PIX Info)",
                  "request": {
                    "details": {
                      "account_type": "CHECKINGS",
                      "agency": "0444",
                      "country": "BRA",
                      "number": "45722-0",
                    },
                    "holder": {
                      "information": {
                        "identifier": "00.000.000/0001-91",
                        "identifier_type": "CNPJ",
                        "name": "Music Production Brazil",
                      },
                      "type": "BUSINESS",
                    },
                    "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                  },
                  "response": {
                    "body": {
                      "created_at": "2023-02-15T07:52:31Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer": "customer",
                      "details": {
                        "account_type": "CHECKINGS",
                        "agency": "0444",
                        "country": "BRA",
                        "number": "45722-0",
                      },
                      "holder": {
                        "information": {
                          "identifier": "00.000.000/0001-91",
                          "identifier_type": "CNPJ",
                          "name": "Music Production Brazil",
                        },
                        "type": "BUSINESS",
                      },
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                    },
                  },
                },
                {
                  "name": "Organization (PIX Key)",
                  "request": {
                    "details": {
                      "country": "BRA",
                      "pix_key": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab",
                    },
                    "holder": {
                      "information": {
                        "identifier": "00.000.000/0001-91",
                        "identifier_type": "CNPJ",
                        "name": "Music Production Brazil",
                      },
                      "type": "BUSINESS",
                    },
                    "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                  },
                  "response": {
                    "body": {
                      "created_at": "2023-02-15T07:52:31Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer": "customer",
                      "details": {
                        "country": "BRA",
                        "pix_key": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab",
                      },
                      "holder": {
                        "information": {
                          "identifier": "00.000.000/0001-91",
                          "identifier_type": "CNPJ",
                          "name": "Music Production Brazil",
                        },
                        "type": "BUSINESS",
                      },
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                    },
                  },
                },
                {
                  "name": "Organization (PSE)",
                  "request": {
                    "holder": {
                      "information": {
                        "name": "Trusty documentation services",
                      },
                      "type": "BUSINESS",
                    },
                    "metadata": {
                      "internal_reference_id": "GGq73487w2",
                    },
                    "number": "12343453245633",
                    "providers": {
                      "payments_way": {
                        "form_id": 321,
                        "terminal_id": 123,
                      },
                    },
                  },
                  "response": {
                    "body": {
                      "created_at": "2023-02-15T07:52:31Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer": "customer",
                      "details": {
                        "key": "value",
                      },
                      "holder": {
                        "Information": {
                          "name": "Tr******es",
                        },
                        "type": "BUSINESS",
                      },
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "institution": "institution",
                      "metadata": {
                        "internal_reference_id": "GGq73487w2",
                      },
                      "number": "******5633",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/payments/bank-accounts/",
              "request": {
                "body": "CreateBankAccountRequest",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK (Created)",
                "status-code": 201,
                "type": "CreateBankAccountResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailBankAccount": {
              "auth": true,
              "display-name": "Get details about a bank account",
              "docs": "Get the details about a specific bank account",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "name": "Organization (PIX Info)",
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "created_at": "2023-02-15T07:52:31Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer": "customer",
                      "details": {
                        "account_type": "CHECKINGS",
                        "agency": "0444",
                        "country": "BRA",
                        "number": "45722-0",
                      },
                      "holder": {
                        "information": {
                          "identifier": "00.000.000/0001-91",
                          "identifier_type": "CNPJ",
                          "name": "Music Production Brazil",
                        },
                        "type": "BUSINESS",
                      },
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                    },
                  },
                },
                {
                  "name": "Organization (PIX Key)",
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "created_at": "2023-02-15T07:52:31Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer": "customer",
                      "details": {
                        "country": "BRA",
                        "pix_key": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab",
                      },
                      "holder": {
                        "information": {
                          "identifier": "00.000.000/0001-91",
                          "identifier_type": "CNPJ",
                          "name": "Music Production Brazil",
                        },
                        "type": "BUSINESS",
                      },
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                    },
                  },
                },
                {
                  "name": "Organization (PSE)",
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "created_at": "2023-02-15T07:52:31Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer": "customer",
                      "details": {
                        "key": "value",
                      },
                      "holder": {
                        "Information": {
                          "name": "Tr******es",
                        },
                        "type": "BUSINESS",
                      },
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "institution": "institution",
                      "metadata": {
                        "internal_reference_id": "GGq73487w2",
                      },
                      "number": "******5633",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/bank-accounts/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `bank-account.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DetailBankAccountResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListBankAccount": {
              "auth": true,
              "display-name": "List all bank accounts",
              "docs": "List all bank accounts associated with your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "name": "Organization (PIX Info)",
                  "query-parameters": {
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "customer": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "holder__type": "INDIVIDUAL",
                    "holder__type__in": "INDIVIDUAL,BUSINESS",
                    "id__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "institution": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "number": "1231564526",
                    "number__in": "1231564526,15648325",
                    "page": 1,
                    "providers": "payments_way",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "results": [
                        {
                          "created_at": "2023-02-15T07:52:31Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer": "customer",
                          "details": {
                            "account_type": "CHECKINGS",
                            "agency": "0444",
                            "country": "BRA",
                            "number": "45722-0",
                          },
                          "holder": {
                            "information": {
                              "identifier": "00.000.000/0001-91",
                              "identifier_type": "CNPJ",
                              "name": "Music Production Brazil",
                            },
                            "type": "BUSINESS",
                          },
                          "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                          "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                        },
                      ],
                    },
                  },
                },
                {
                  "name": "Organization (PIX Key)",
                  "query-parameters": {
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "customer": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "holder__type": "INDIVIDUAL",
                    "holder__type__in": "INDIVIDUAL,BUSINESS",
                    "id__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "institution": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "number": "1231564526",
                    "number__in": "1231564526,15648325",
                    "page": 1,
                    "providers": "payments_way",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "results": [
                        {
                          "created_at": "2023-02-15T07:52:31Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer": "customer",
                          "details": {
                            "country": "BRA",
                            "pix_key": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab",
                          },
                          "holder": {
                            "information": {
                              "identifier": "00.000.000/0001-91",
                              "identifier_type": "CNPJ",
                              "name": "Music Production Brazil",
                            },
                            "type": "BUSINESS",
                          },
                          "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                          "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                        },
                      ],
                    },
                  },
                },
                {
                  "name": "Organization (PSE)",
                  "query-parameters": {
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "customer": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "holder__type": "INDIVIDUAL",
                    "holder__type__in": "INDIVIDUAL,BUSINESS",
                    "id__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "institution": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "number": "1231564526",
                    "number__in": "1231564526,15648325",
                    "page": 1,
                    "providers": "payments_way",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "results": [
                        {
                          "created_at": "2023-02-15T07:52:31Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer": "customer",
                          "details": {
                            "key": "value",
                          },
                          "holder": {
                            "Information": {
                              "name": "Tr******es",
                            },
                            "type": "BUSINESS",
                          },
                          "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                          "institution": "institution",
                          "metadata": {
                            "internal_reference_id": "GGq73487w2",
                          },
                          "number": "******5633",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/bank-accounts/",
              "request": {
                "name": "ListBankAccountRequest",
                "query-parameters": {
                  "created_at": {
                    "docs": "Return results only for this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return results only after this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return results only for this date and after (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return results only before this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return results only for this date and before (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return results between this date range (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "customer": {
                    "docs": "The `customer.id` you want to get results for.",
                    "type": "optional<string>",
                  },
                  "holder__type": {
                    "docs": "Return results for a matched value type.",
                    "type": "optional<string>",
                  },
                  "holder__type__in": {
                    "docs": "Return results for listed holder types.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "One or more `bank-account.id`s (comma separated) that you want to get results for.",
                    "type": "optional<string>",
                  },
                  "institution": {
                    "docs": "The `institution.id` you want to get results for.",
                    "type": "optional<string>",
                  },
                  "number": {
                    "docs": "Return results that exactly match a value.",
                    "type": "optional<string>",
                  },
                  "number__in": {
                    "docs": "Return results for listed numbers.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "providers": {
                    "docs": "Return results only for this value.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.BankAccountPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "CreateBankAccountRequest": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.CreateBankAccountOfpi",
              },
              {
                "type": "root.CreateBankAccountPse",
              },
            ],
          },
          "CreateBankAccountResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.BankAccountOfpiResponse",
              },
              "root.BankAccountPseResponse",
            ],
          },
          "DetailBankAccountResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.BankAccountOfpiResponse",
              },
              "root.BankAccountPseResponse",
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListBankAccount:
      path: /payments/bank-accounts/
      method: GET
      auth: true
      docs: List all bank accounts associated with your Belvo account.
      source:
        openapi: ../openapi.yml
      display-name: List all bank accounts
      request:
        name: ListBankAccountRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          id__in:
            type: optional<string>
            docs: >-
              One or more `bank-account.id`s (comma separated) that you want to
              get results for.
          created_at:
            type: optional<string>
            docs: Return results only for this date (in `YYYY-MM-DD` format).
          created_at__gt:
            type: optional<string>
            docs: Return results only after this date (in `YYYY-MM-DD` format).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return results only for this date and after (in `YYYY-MM-DD`
              format).
          created_at__lt:
            type: optional<string>
            docs: Return results only before this date (in `YYYY-MM-DD` format).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return results only for this date and before (in `YYYY-MM-DD`
              format).
          created_at__range:
            type: optional<string>
            docs: Return results between this date range (in `YYYY-MM-DD` format).
          number:
            type: optional<string>
            docs: Return results that exactly match a value.
          number__in:
            type: optional<string>
            docs: Return results for listed numbers.
          customer:
            type: optional<string>
            docs: The `customer.id` you want to get results for.
          institution:
            type: optional<string>
            docs: The `institution.id` you want to get results for.
          holder__type:
            type: optional<string>
            docs: Return results for a matched value type.
          holder__type__in:
            type: optional<string>
            docs: Return results for listed holder types.
          providers:
            type: optional<string>
            docs: Return results only for this value.
      response:
        docs: OK
        type: root.BankAccountPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - name: Organization (PIX Info)
          query-parameters:
            page: 1
            id__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            number: '1231564526'
            number__in: 1231564526,15648325
            customer: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            institution: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            holder__type: INDIVIDUAL
            holder__type__in: INDIVIDUAL,BUSINESS
            providers: payments_way
          response:
            body:
              count: 110
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              results:
                - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                  created_at: '2023-02-15T07:52:31Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer: customer
                  institution: f512d996-583a-4a91-8b5b-eba2e103b068
                  details:
                    country: BRA
                    account_type: CHECKINGS
                    agency: '0444'
                    number: 45722-0
                  holder:
                    type: BUSINESS
                    information:
                      name: Music Production Brazil
                      identifier_type: CNPJ
                      identifier: 00.000.000/0001-91
        - name: Organization (PIX Key)
          query-parameters:
            page: 1
            id__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            number: '1231564526'
            number__in: 1231564526,15648325
            customer: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            institution: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            holder__type: INDIVIDUAL
            holder__type__in: INDIVIDUAL,BUSINESS
            providers: payments_way
          response:
            body:
              count: 110
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              results:
                - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
                  created_at: '2023-02-15T07:52:31Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer: customer
                  institution: f512d996-583a-4a91-8b5b-eba2e103b068
                  details:
                    country: BRA
                    pix_key: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
                  holder:
                    type: BUSINESS
                    information:
                      name: Music Production Brazil
                      identifier_type: CNPJ
                      identifier: 00.000.000/0001-91
        - name: Organization (PSE)
          query-parameters:
            page: 1
            id__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            number: '1231564526'
            number__in: 1231564526,15648325
            customer: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            institution: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            holder__type: INDIVIDUAL
            holder__type__in: INDIVIDUAL,BUSINESS
            providers: payments_way
          response:
            body:
              count: 110
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              results:
                - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
                  created_at: '2023-02-15T07:52:31Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer: customer
                  institution: institution
                  number: '******5633'
                  holder:
                    type: BUSINESS
                    Information:
                      name: Tr******es
                  details:
                    key: value
                  metadata:
                    internal_reference_id: GGq73487w2
    CreateBankAccount:
      path: /payments/bank-accounts/
      method: POST
      auth: true
      docs: Create a new bank account from which to send or request funds.
      source:
        openapi: ../openapi.yml
      display-name: Create a new bank account
      request:
        body: CreateBankAccountRequest
        content-type: application/json
      response:
        docs: OK (Created)
        type: CreateBankAccountResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - name: Organization (PIX Info)
          request:
            institution: f512d996-583a-4a91-8b5b-eba2e103b068
            holder:
              type: BUSINESS
              information:
                name: Music Production Brazil
                identifier_type: CNPJ
                identifier: 00.000.000/0001-91
            details:
              country: BRA
              account_type: CHECKINGS
              agency: '0444'
              number: 45722-0
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2023-02-15T07:52:31Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer: customer
              institution: f512d996-583a-4a91-8b5b-eba2e103b068
              details:
                country: BRA
                account_type: CHECKINGS
                agency: '0444'
                number: 45722-0
              holder:
                type: BUSINESS
                information:
                  name: Music Production Brazil
                  identifier_type: CNPJ
                  identifier: 00.000.000/0001-91
        - name: Organization (PIX Key)
          request:
            institution: f512d996-583a-4a91-8b5b-eba2e103b068
            holder:
              type: BUSINESS
              information:
                name: Music Production Brazil
                identifier_type: CNPJ
                identifier: 00.000.000/0001-91
            details:
              country: BRA
              pix_key: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2023-02-15T07:52:31Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer: customer
              institution: f512d996-583a-4a91-8b5b-eba2e103b068
              details:
                country: BRA
                pix_key: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
              holder:
                type: BUSINESS
                information:
                  name: Music Production Brazil
                  identifier_type: CNPJ
                  identifier: 00.000.000/0001-91
        - name: Organization (PSE)
          request:
            holder:
              type: BUSINESS
              information:
                name: Trusty documentation services
            providers:
              payments_way:
                terminal_id: 123
                form_id: 321
            number: '12343453245633'
            metadata:
              internal_reference_id: GGq73487w2
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2023-02-15T07:52:31Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer: customer
              institution: institution
              number: '******5633'
              holder:
                type: BUSINESS
                Information:
                  name: Tr******es
              details:
                key: value
              metadata:
                internal_reference_id: GGq73487w2
    DetailBankAccount:
      path: /payments/bank-accounts/{id}/
      method: GET
      auth: true
      docs: Get the details about a specific bank account
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `bank-account.id` you want to get detailed information about.
      display-name: Get details about a bank account
      response:
        docs: OK
        type: DetailBankAccountResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: Organization (PIX Info)
          path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2023-02-15T07:52:31Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer: customer
              institution: f512d996-583a-4a91-8b5b-eba2e103b068
              details:
                country: BRA
                account_type: CHECKINGS
                agency: '0444'
                number: 45722-0
              holder:
                type: BUSINESS
                information:
                  name: Music Production Brazil
                  identifier_type: CNPJ
                  identifier: 00.000.000/0001-91
        - name: Organization (PIX Key)
          path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2023-02-15T07:52:31Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer: customer
              institution: f512d996-583a-4a91-8b5b-eba2e103b068
              details:
                country: BRA
                pix_key: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
              holder:
                type: BUSINESS
                information:
                  name: Music Production Brazil
                  identifier_type: CNPJ
                  identifier: 00.000.000/0001-91
        - name: Organization (PSE)
          path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2023-02-15T07:52:31Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer: customer
              institution: institution
              number: '******5633'
              holder:
                type: BUSINESS
                Information:
                  name: Tr******es
              details:
                key: value
              metadata:
                internal_reference_id: GGq73487w2
  source:
    openapi: ../openapi.yml
  display-name: Bank Accounts
docs: >
  To receive inflow payments to your organization's bank account, you must
  register the bank accounts (individual and business) using Belvo's Payments
  API.


  - **Individual** bank accounts must be created for each payer (your customer).

  - **Business** bank accounts need to be created for the beneficiary of the
  payment (your organization).
types:
  CreateBankAccountRequest:
    discriminated: false
    union:
      - type: root.CreateBankAccountOfpi
      - type: root.CreateBankAccountPse
    source:
      openapi: ../openapi.yml
  CreateBankAccountResponse:
    discriminated: false
    union:
      - type: root.BankAccountOfpiResponse
      - root.BankAccountPseResponse
    source:
      openapi: ../openapi.yml
  DetailBankAccountResponse:
    discriminated: false
    union:
      - type: root.BankAccountOfpiResponse
      - root.BankAccountPseResponse
    source:
      openapi: ../openapi.yml
",
    },
    "categorization.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Our Categorization resource provides you with categorized information for a transaction. You‚Äôll need to send a POST Categorize Transactions request with raw transactional information (such as amount, description, and holder information) to which Belvo:
- assigns a standardized category to each transaction
- provides additional information about the merchant involved in the transaction (name, logo, website URL)",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Categorization",
          "endpoints": {
            "CategorizeTransactions": {
              "auth": true,
              "display-name": "Categorize transactions",
              "docs": "Send through your raw transaction data and receive enriched information for each of your transactions.

<div style="background-color:#f4f6f8; border-left: 6px solid #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
<strong>Note: </strong> Belvo can process up to 10,000 unique transactions per request.
</div>",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "name": "Categorization",
                  "request": {
                    "language": "pt",
                    "transactions": [
                      {
                        "account_category": "CHECKING_ACCOUNT",
                        "account_holder_id": "7890098789087",
                        "account_holder_type": "INDIVIDUAL",
                        "account_id": "BBVACA-89077589",
                        "amount": 650.89,
                        "currency": "BRL",
                        "description": "APPL3STORE",
                        "institution": "BBVA",
                        "transaction_id": "3CWE4927CF15355",
                        "type": "INFLOW",
                        "value_date": "2022-11-18",
                      },
                    ],
                  },
                  "response": {
                    "body": {
                      "transactions": [
                        {
                          "account_category": "CREDIT_CARD",
                          "account_holder_id": "7890098789087",
                          "account_holder_type": "INDIVIDUAL",
                          "account_id": "BBVACA-89077589",
                          "amount": 650.89,
                          "category": "Income & Payments",
                          "currency": "BRL",
                          "description": "APPL3STORE",
                          "institution": "BBVA",
                          "mcc": 2345,
                          "merchant": {
                            "logo": "https://www.apple.com/ac/structured-data/images/open_graph_logo.png?202110180",
                            "merchant_name": "Apple, Inc",
                            "website": "https://www.apple.com/br/",
                          },
                          "subcategory": "Freelance",
                          "transaction_id": "3CWE4927CF15355",
                          "type": "OUTFLOW",
                          "value_date": "2022-11-18",
                        },
                        {
                          "account_category": "CHECKING_ACCOUNT",
                          "account_holder_id": "996685090015",
                          "account_holder_type": "INDIVIDUAL",
                          "account_id": "BDBACA-89077896",
                          "amount": 999.9,
                          "category": "Income & Payments",
                          "currency": "BRL",
                          "description": "OXXO SP",
                          "institution": "BCO DO BRASIL",
                          "merchant": {
                            "logo": "https://storage.googleapis.com/new-cdn.mercafacil.com/wl_assets/dynamic/65d84ba0-a2f3-11ed-8928-dd578f525074-MOBILE_1OCo1.png",
                            "merchant_name": "Merchants R Us Global",
                            "website": "https://merchants-r-us.com",
                          },
                          "subcategory": "Freelance",
                          "transaction_id": "3CWE4927CF15996",
                          "type": "OUTFLOW",
                          "value_date": "2022-12-02",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/categorization/",
              "request": {
                "body": {
                  "properties": {
                    "language": {
                      "docs": "Two-letter ISO 639-1 code for the language of the transaction.",
                      "type": "string",
                    },
                    "transactions": {
                      "docs": "An array of transaction objects that you want categorized.

**Note:** Each object corresponds to one, unique transaction and you can send through up to 10,000 transactions per request.",
                      "type": "list<root.CategorizationBodyRequest>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CategorizationRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Categorization",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    CategorizeTransactions:
      path: /api/categorization/
      method: POST
      auth: true
      docs: >-
        Send through your raw transaction data and receive enriched information
        for each of your transactions.


        <div style="background-color:#f4f6f8; border-left: 6px solid
        #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px">

        <strong>Note: </strong> Belvo can process up to 10,000 unique
        transactions per request.

        </div>
      source:
        openapi: ../openapi.yml
      display-name: Categorize transactions
      request:
        name: CategorizationRequest
        body:
          properties:
            language:
              type: string
              docs: Two-letter ISO 639-1 code for the language of the transaction.
            transactions:
              docs: >-
                An array of transaction objects that you want categorized.


                **Note:** Each object corresponds to one, unique transaction and
                you can send through up to 10,000 transactions per request.
              type: list<root.CategorizationBodyRequest>
        content-type: application/json
      response:
        docs: Ok
        type: root.Categorization
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.InternalServerError
      examples:
        - name: Categorization
          request:
            language: pt
            transactions:
              - transaction_id: 3CWE4927CF15355
                account_holder_type: INDIVIDUAL
                account_holder_id: '7890098789087'
                account_id: BBVACA-89077589
                account_category: CHECKING_ACCOUNT
                value_date: '2022-11-18'
                description: APPL3STORE
                type: INFLOW
                amount: 650.89
                currency: BRL
                institution: BBVA
          response:
            body:
              transactions:
                - transaction_id: 3CWE4927CF15355
                  account_holder_type: INDIVIDUAL
                  account_holder_id: '7890098789087'
                  account_id: BBVACA-89077589
                  account_category: CREDIT_CARD
                  value_date: '2022-11-18'
                  description: APPL3STORE
                  type: OUTFLOW
                  amount: 650.89
                  currency: BRL
                  institution: BBVA
                  mcc: 2345
                  category: Income & Payments
                  subcategory: Freelance
                  merchant:
                    logo: >-
                      https://www.apple.com/ac/structured-data/images/open_graph_logo.png?202110180
                    website: https://www.apple.com/br/
                    merchant_name: Apple, Inc
                - transaction_id: 3CWE4927CF15996
                  account_holder_type: INDIVIDUAL
                  account_holder_id: '996685090015'
                  account_id: BDBACA-89077896
                  account_category: CHECKING_ACCOUNT
                  value_date: '2022-12-02'
                  description: OXXO SP
                  type: OUTFLOW
                  amount: 999.9
                  currency: BRL
                  institution: BCO DO BRASIL
                  category: Income & Payments
                  subcategory: Freelance
                  merchant:
                    logo: >-
                      https://storage.googleapis.com/new-cdn.mercafacil.com/wl_assets/dynamic/65d84ba0-a2f3-11ed-8928-dd578f525074-MOBILE_1OCo1.png
                    website: https://merchants-r-us.com
                    merchant_name: Merchants R Us Global
  source:
    openapi: ../openapi.yml
  display-name: Categorization
docs: >-
  Our Categorization resource provides you with categorized information for a
  transaction. You‚Äôll need to send a POST Categorize Transactions request with
  raw transactional information (such as amount, description, and holder
  information) to which Belvo:

  - assigns a standardized category to each transaction

  - provides additional information about the merchant involved in the
  transaction (name, logo, website URL)
",
    },
    "customers.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "A **customer** is the payer that's going to push funds into your bank account. You need to create a customer in order to receive inflow payments to your organization's bank account.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Customers",
          "endpoints": {
            "CreateCustomer": {
              "auth": true,
              "display-name": "Create a new customer",
              "docs": "Create a new customer to send or request funds.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "name": "OFPI Individual",
                  "request": {
                    "country": "BRA",
                    "customer_type": "INDIVIDUAL",
                    "email": "caetano.veloso@musicabrazil.br",
                    "identifier": "231.002.999-00",
                    "identifier_type": "CPF",
                    "name": "Caetano Veloso",
                  },
                  "response": {
                    "body": {
                      "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                      "country": "BRA",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer_type": "INDIVIDUAL",
                      "email": "caetano.veloso@musicabrazil.br",
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "identifier": "23******00",
                      "identifier_type": "CPF",
                      "name": "Caetano Veloso",
                      "phone": "3210-9876",
                    },
                  },
                },
                {
                  "name": "OFPI Business",
                  "request": {
                    "country": "BRA",
                    "customer_type": "BUSINESS",
                    "email": "finance@musicabrazil.br",
                    "identifier": "00.000.000/0001-91",
                    "identifier_type": "CNPJ",
                    "name": "Music Production Brazil",
                  },
                  "response": {
                    "body": {
                      "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                      "country": "BRA",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer_type": "BUSINESS",
                      "email": "finance@musicabrazil.br",
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "identifier": "00.000.000/0001-91",
                      "identifier_type": "CNPJ",
                      "name": "Music Production Brazil",
                      "phone": "3210-9876",
                    },
                  },
                },
                {
                  "name": "PSE Individual",
                  "request": {
                    "address": "Calle Carlos Vives 432, 80300 Bogota",
                    "country": "COL",
                    "customer_type": "INDIVIDUAL",
                    "email": "carlos.vives@musicacolombia.co",
                    "identifier": "1018760936",
                    "identifier_type": "CC",
                    "name": "Carlos Vives",
                    "phone": "3210-9876",
                  },
                  "response": {
                    "body": {
                      "address": "Calle Carlos Vives 432, 80300 Bogota",
                      "country": "COL",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer_type": "INDIVIDUAL",
                      "email": "carlos.vives@musicacolombia.co",
                      "id": "0110c70a-5faf-4d72-94b6-307473e86af7",
                      "identifier": "1018760936",
                      "identifier_type": "CC",
                      "name": "Carlos Vives",
                      "phone": "3210-9876",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/payments/customers/",
              "request": {
                "body": "CreateCustomerRequest",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK (Created)",
                "status-code": 201,
                "type": "CreateCustomerResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailCustomer": {
              "auth": true,
              "display-name": "Get details about a customer",
              "docs": "Get the details about a specific customer",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "name": "OFPI Individual",
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                      "country": "BRA",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer_type": "INDIVIDUAL",
                      "email": "caetano.veloso@musicabrazil.br",
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "identifier": "23******00",
                      "identifier_type": "CPF",
                      "name": "Caetano Veloso",
                      "phone": "3210-9876",
                    },
                  },
                },
                {
                  "name": "OFPI Business",
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                      "country": "BRA",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer_type": "BUSINESS",
                      "email": "finance@musicabrazil.br",
                      "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                      "identifier": "00.000.000/0001-91",
                      "identifier_type": "CNPJ",
                      "name": "Music Production Brazil",
                      "phone": "3210-9876",
                    },
                  },
                },
                {
                  "name": "PSE Individual",
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "address": "Calle Carlos Vives 432, 80300 Bogota",
                      "country": "COL",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                      "customer_type": "INDIVIDUAL",
                      "email": "carlos.vives@musicacolombia.co",
                      "id": "0110c70a-5faf-4d72-94b6-307473e86af7",
                      "identifier": "1018760936",
                      "identifier_type": "CC",
                      "name": "Carlos Vives",
                      "phone": "3210-9876",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/customers/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `customer.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "DetailCustomerResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListCustomers": {
              "auth": true,
              "display-name": "List all customers",
              "docs": "List all customers associated with your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "name": "OFPI Individual",
                  "query-parameters": {
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "customer__type": "INDIVIDUAL",
                    "id__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "page": 1,
                    "search": "car",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "results": [
                        {
                          "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                          "country": "BRA",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer_type": "INDIVIDUAL",
                          "email": "caetano.veloso@musicabrazil.br",
                          "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                          "identifier": "23******00",
                          "identifier_type": "CPF",
                          "name": "Caetano Veloso",
                          "phone": "3210-9876",
                        },
                        {
                          "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                          "country": "BRA",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer_type": "INDIVIDUAL",
                          "email": "caetano.veloso@musicabrazil.br",
                          "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                          "identifier": "23******00",
                          "identifier_type": "CPF",
                          "name": "Caetano Veloso",
                          "phone": "3210-9876",
                        },
                      ],
                    },
                  },
                },
                {
                  "name": "OFPI Business",
                  "query-parameters": {
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "customer__type": "INDIVIDUAL",
                    "id__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "page": 1,
                    "search": "car",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "results": [
                        {
                          "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                          "country": "BRA",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer_type": "BUSINESS",
                          "email": "finance@musicabrazil.br",
                          "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                          "identifier": "00.000.000/0001-91",
                          "identifier_type": "CNPJ",
                          "name": "Music Production Brazil",
                          "phone": "3210-9876",
                        },
                        {
                          "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                          "country": "BRA",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer_type": "BUSINESS",
                          "email": "finance@musicabrazil.br",
                          "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                          "identifier": "00.000.000/0001-91",
                          "identifier_type": "CNPJ",
                          "name": "Music Production Brazil",
                          "phone": "3210-9876",
                        },
                      ],
                    },
                  },
                },
                {
                  "name": "PSE Individual",
                  "query-parameters": {
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "customer__type": "INDIVIDUAL",
                    "id__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "page": 1,
                    "search": "car",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "results": [
                        {
                          "address": "Calle Carlos Vives 432, 80300 Bogota",
                          "country": "COL",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer_type": "INDIVIDUAL",
                          "email": "carlos.vives@musicacolombia.co",
                          "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                          "identifier": "1018760936",
                          "identifier_type": "CC",
                          "name": "Carlos Vives",
                          "phone": "3210-9876",
                        },
                        {
                          "address": "Calle Carlos Vives 432, 80300 Bogota",
                          "country": "COL",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                          "customer_type": "INDIVIDUAL",
                          "email": "carlos.vives@musicacolombia.co",
                          "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                          "identifier": "1018760936",
                          "identifier_type": "CC",
                          "name": "Carlos Vives",
                          "phone": "3210-9876",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/customers/",
              "request": {
                "name": "ListCustomersRequest",
                "query-parameters": {
                  "created_at": {
                    "docs": "Return results only for this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return results only after this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return results only for this date and after (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return results only before this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return results only for this date and before (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return results between this date range (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "customer__type": {
                    "docs": "Return results only for this customer type (either `INDIVIDUAL` or `BUSINESS`).",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "One or more `customer.id`s (comma separated) that you want to get results for.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "search": {
                    "docs": "Return results for one or more customers that match either the name or email you searched for. 

**Note:** This filter supports both full and partial search queries, with a minimum of three characters required. For example, searching for `car` may match the following values:

  - `Carlos Vives`
  - `Carmen Dom√≠nguez` 
  - `carlos.vives@musicacolombia.co`",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.CustomerPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "CreateCustomerRequest": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.CreateCustomerOfpi",
              },
              {
                "type": "root.CreateCustomerPse",
              },
            ],
          },
          "CreateCustomerResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.CustomerOfpi",
              },
              {
                "type": "root.CustomerPse",
              },
            ],
          },
          "DetailCustomerResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.CustomerOfpi",
              },
              {
                "type": "root.CustomerPse",
              },
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListCustomers:
      path: /payments/customers/
      method: GET
      auth: true
      docs: List all customers associated with your Belvo account.
      source:
        openapi: ../openapi.yml
      display-name: List all customers
      request:
        name: ListCustomersRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          id__in:
            type: optional<string>
            docs: >-
              One or more `customer.id`s (comma separated) that you want to get
              results for.
          created_at:
            type: optional<string>
            docs: Return results only for this date (in `YYYY-MM-DD` format).
          created_at__gt:
            type: optional<string>
            docs: Return results only after this date (in `YYYY-MM-DD` format).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return results only for this date and after (in `YYYY-MM-DD`
              format).
          created_at__lt:
            type: optional<string>
            docs: Return results only before this date (in `YYYY-MM-DD` format).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return results only for this date and before (in `YYYY-MM-DD`
              format).
          created_at__range:
            type: optional<string>
            docs: Return results between this date range (in `YYYY-MM-DD` format).
          customer__type:
            type: optional<string>
            docs: >-
              Return results only for this customer type (either `INDIVIDUAL` or
              `BUSINESS`).
          search:
            type: optional<string>
            docs: >-
              Return results for one or more customers that match either the
              name or email you searched for. 


              **Note:** This filter supports both full and partial search
              queries, with a minimum of three characters required. For example,
              searching for `car` may match the following values:

                - `Carlos Vives`
                - `Carmen Dom√≠nguez` 
                - `carlos.vives@musicacolombia.co`
      response:
        docs: OK
        type: root.CustomerPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - name: OFPI Individual
          query-parameters:
            page: 1
            id__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            customer__type: INDIVIDUAL
            search: car
          response:
            body:
              count: 110
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              results:
                - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer_type: INDIVIDUAL
                  name: Caetano Veloso
                  country: BRA
                  email: caetano.veloso@musicabrazil.br
                  identifier: 23******00
                  identifier_type: CPF
                  address: Rua de Caetano Veloso 432, 70200 Brasilia
                  phone: 3210-9876
                - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer_type: INDIVIDUAL
                  name: Caetano Veloso
                  country: BRA
                  email: caetano.veloso@musicabrazil.br
                  identifier: 23******00
                  identifier_type: CPF
                  address: Rua de Caetano Veloso 432, 70200 Brasilia
                  phone: 3210-9876
        - name: OFPI Business
          query-parameters:
            page: 1
            id__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            customer__type: INDIVIDUAL
            search: car
          response:
            body:
              count: 110
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              results:
                - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer_type: BUSINESS
                  name: Music Production Brazil
                  country: BRA
                  email: finance@musicabrazil.br
                  identifier: 00.000.000/0001-91
                  identifier_type: CNPJ
                  address: Rua de Caetano Veloso 432, 70200 Brasilia
                  phone: 3210-9876
                - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer_type: BUSINESS
                  name: Music Production Brazil
                  country: BRA
                  email: finance@musicabrazil.br
                  identifier: 00.000.000/0001-91
                  identifier_type: CNPJ
                  address: Rua de Caetano Veloso 432, 70200 Brasilia
                  phone: 3210-9876
        - name: PSE Individual
          query-parameters:
            page: 1
            id__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            customer__type: INDIVIDUAL
            search: car
          response:
            body:
              count: 110
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              results:
                - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer_type: INDIVIDUAL
                  name: Carlos Vives
                  country: COL
                  email: carlos.vives@musicacolombia.co
                  identifier: '1018760936'
                  identifier_type: CC
                  address: Calle Carlos Vives 432, 80300 Bogota
                  phone: 3210-9876
                - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
                  customer_type: INDIVIDUAL
                  name: Carlos Vives
                  country: COL
                  email: carlos.vives@musicacolombia.co
                  identifier: '1018760936'
                  identifier_type: CC
                  address: Calle Carlos Vives 432, 80300 Bogota
                  phone: 3210-9876
    CreateCustomer:
      path: /payments/customers/
      method: POST
      auth: true
      docs: Create a new customer to send or request funds.
      source:
        openapi: ../openapi.yml
      display-name: Create a new customer
      request:
        body: CreateCustomerRequest
        content-type: application/json
      response:
        docs: OK (Created)
        type: CreateCustomerResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.InternalServerError
      examples:
        - name: OFPI Individual
          request:
            customer_type: INDIVIDUAL
            name: Caetano Veloso
            country: BRA
            email: caetano.veloso@musicabrazil.br
            identifier: 231.002.999-00
            identifier_type: CPF
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2022-02-09T08:45:50Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer_type: INDIVIDUAL
              name: Caetano Veloso
              country: BRA
              email: caetano.veloso@musicabrazil.br
              identifier: 23******00
              identifier_type: CPF
              address: Rua de Caetano Veloso 432, 70200 Brasilia
              phone: 3210-9876
        - name: OFPI Business
          request:
            customer_type: BUSINESS
            name: Music Production Brazil
            country: BRA
            email: finance@musicabrazil.br
            identifier: 00.000.000/0001-91
            identifier_type: CNPJ
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2022-02-09T08:45:50Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer_type: BUSINESS
              name: Music Production Brazil
              country: BRA
              email: finance@musicabrazil.br
              identifier: 00.000.000/0001-91
              identifier_type: CNPJ
              address: Rua de Caetano Veloso 432, 70200 Brasilia
              phone: 3210-9876
        - name: PSE Individual
          request:
            customer_type: INDIVIDUAL
            name: Carlos Vives
            country: COL
            email: carlos.vives@musicacolombia.co
            identifier: '1018760936'
            identifier_type: CC
            address: Calle Carlos Vives 432, 80300 Bogota
            phone: 3210-9876
          response:
            body:
              id: 0110c70a-5faf-4d72-94b6-307473e86af7
              created_at: '2022-02-09T08:45:50Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer_type: INDIVIDUAL
              name: Carlos Vives
              country: COL
              email: carlos.vives@musicacolombia.co
              identifier: '1018760936'
              identifier_type: CC
              address: Calle Carlos Vives 432, 80300 Bogota
              phone: 3210-9876
    DetailCustomer:
      path: /payments/customers/{id}/
      method: GET
      auth: true
      docs: Get the details about a specific customer
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `customer.id` you want to get detailed information about.
      display-name: Get details about a customer
      response:
        docs: OK
        type: DetailCustomerResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: OFPI Individual
          path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2022-02-09T08:45:50Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer_type: INDIVIDUAL
              name: Caetano Veloso
              country: BRA
              email: caetano.veloso@musicabrazil.br
              identifier: 23******00
              identifier_type: CPF
              address: Rua de Caetano Veloso 432, 70200 Brasilia
              phone: 3210-9876
        - name: OFPI Business
          path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
              created_at: '2022-02-09T08:45:50Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer_type: BUSINESS
              name: Music Production Brazil
              country: BRA
              email: finance@musicabrazil.br
              identifier: 00.000.000/0001-91
              identifier_type: CNPJ
              address: Rua de Caetano Veloso 432, 70200 Brasilia
              phone: 3210-9876
        - name: PSE Individual
          path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: 0110c70a-5faf-4d72-94b6-307473e86af7
              created_at: '2022-02-09T08:45:50Z'
              created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
              customer_type: INDIVIDUAL
              name: Carlos Vives
              country: COL
              email: carlos.vives@musicacolombia.co
              identifier: '1018760936'
              identifier_type: CC
              address: Calle Carlos Vives 432, 80300 Bogota
              phone: 3210-9876
  source:
    openapi: ../openapi.yml
  display-name: Customers
docs: >
  A **customer** is the payer that's going to push funds into your bank account.
  You need to create a customer in order to receive inflow payments to your
  organization's bank account.
types:
  CreateCustomerRequest:
    discriminated: false
    union:
      - type: root.CreateCustomerOfpi
      - type: root.CreateCustomerPse
    source:
      openapi: ../openapi.yml
  CreateCustomerResponse:
    discriminated: false
    union:
      - type: root.CustomerOfpi
      - type: root.CustomerPse
    source:
      openapi: ../openapi.yml
  DetailCustomerResponse:
    discriminated: false
    union:
      - type: root.CustomerOfpi
      - type: root.CustomerPse
    source:
      openapi: ../openapi.yml
",
    },
    "employmentRecords.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "# Employment Records

Our employment records¬†resource lets you get a comprehensive view of your user‚Äôs current social security contributions and employment history.

With Belvo's employment records resource, you can access information about your user's current social security contributions and employment history. For the each user, we return the:

- personal data
- work history
- historical and current daily base salary
- and more!

At the moment, the employment records resource is available for:

- üá≤üáΩ¬†Mexico (IMSS)",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Employment Records",
          "endpoints": {
            "DestroyEmploymentRecord": {
              "auth": true,
              "display-name": "Delete an employment record",
              "docs": "Delete a specific employment record from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/employment-records/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `employment-record.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailEmploymentRecord": {
              "auth": true,
              "display-name": "Get an employment record's details",
              "docs": "Get the details of a specific employment record.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "collected_at": "2020-04-23T21:32:55Z",
                      "created_at": "2020-04-23T21:32:55Z",
                      "employment_records": [
                        {
                          "collected_at": "2020-04-23T21:32:55Z",
                          "currency": "MXN",
                          "employer": "Batman Enterprises CDMX",
                          "employer_id": "780-BAT-88769-CDMX",
                          "employment_status_updates": [
                            {
                              "base_salary": 1033.09,
                              "update_date": "2021-09-01",
                            },
                          ],
                          "end_date": "2019-12-31",
                          "monthly_salary": 1.1,
                          "most_recent_base_salary": 762.54,
                          "start_date": "2019-10-10",
                          "state": "DISTRITO FEDERAL",
                          "weeks_employed": 12,
                        },
                      ],
                      "files": [
                        {
                          "type": "ReporteSemanasCotizadas_190123",
                          "value": "=PDF_BINARY=",
                        },
                      ],
                      "id": "fef05fc8-7357-4a4a-9d29-55038ea31a04",
                      "internal_identification": "BLPM951331IONVGR54",
                      "link": "27c1d5cf-e8fb-433a-a2f7-d246de199c01",
                      "personal_data": {
                        "birth_date": "2022-02-09",
                        "document_ids": [
                          {},
                        ],
                        "email": "bruce.banner@avengers.com",
                        "entitlements": {
                          "entitled_to_company_benefits": true,
                          "entitled_to_health_insurance": true,
                          "status": "EMPLOYED",
                          "valid_until": "valid_until",
                        },
                        "first_name": "Bruce",
                        "last_name": "Banner del Torro",
                        "official_name": "Bruce Banner del Torro",
                      },
                      "report_date": "2023-01-19",
                      "social_security_summary": {
                        "weeks_contributed": 188,
                        "weeks_redeemed": 0,
                        "weeks_reinstated": 0,
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/employment-records/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `employment-record.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailEmploymentRecordRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.EmploymentRecord",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListEmploymentRecords": {
              "auth": true,
              "display-name": "List all employment records",
              "docs": "Get a paginated list of all existing employment records in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "collected_at": "2020-04-23T21:32:55Z",
                          "created_at": "2020-04-23T21:32:55Z",
                          "employment_records": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                              "currency": "MXN",
                              "employer": "Batman Enterprises CDMX",
                              "employer_id": "780-BAT-88769-CDMX",
                              "end_date": "2019-12-31",
                              "most_recent_base_salary": 762.54,
                              "start_date": "2019-10-10",
                              "state": "DISTRITO FEDERAL",
                              "weeks_employed": 12,
                            },
                          ],
                          "files": [
                            {
                              "type": "ReporteSemanasCotizadas_190123",
                              "value": "=PDF_BINARY=",
                            },
                          ],
                          "id": "fef05fc8-7357-4a4a-9d29-55038ea31a04",
                          "internal_identification": "BLPM951331IONVGR54",
                          "link": "27c1d5cf-e8fb-433a-a2f7-d246de199c01",
                          "report_date": "2023-01-19",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/employment-records/",
              "request": {
                "name": "ListEmploymentRecordsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.EmploymentRecordsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveEmploymentRecordDetails": {
              "auth": true,
              "display-name": "Retrieve employment record details",
              "docs": "Retrieve employment record details for an individual.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "d686c617-6d9e-4bc6-9801-5ac276ccb6a2",
                  },
                  "response": {
                    "body": [
                      {
                        "collected_at": "2020-04-23T21:32:55Z",
                        "created_at": "2020-04-23T21:32:55Z",
                        "employment_records": [
                          {
                            "collected_at": "2020-04-23T21:32:55Z",
                            "currency": "MXN",
                            "employer": "Batman Enterprises CDMX",
                            "employer_id": "780-BAT-88769-CDMX",
                            "end_date": "2019-12-31",
                            "most_recent_base_salary": 762.54,
                            "start_date": "2019-10-10",
                            "state": "DISTRITO FEDERAL",
                            "weeks_employed": 12,
                          },
                        ],
                        "files": [
                          {
                            "type": "ReporteSemanasCotizadas_190123",
                            "value": "=PDF_BINARY=",
                          },
                        ],
                        "id": "fef05fc8-7357-4a4a-9d29-55038ea31a04",
                        "internal_identification": "BLPM951331IONVGR54",
                        "link": "27c1d5cf-e8fb-433a-a2f7-d246de199c01",
                        "personal_data": {
                          "birth_date": "2022-02-09",
                          "document_ids": [
                            {},
                          ],
                          "email": "bruce.banner@avengers.com",
                          "entitlements": {
                            "entitled_to_company_benefits": true,
                            "entitled_to_health_insurance": true,
                          },
                          "first_name": "Bruce",
                          "last_name": "Banner del Torro",
                          "official_name": "Bruce Banner del Torro",
                        },
                        "report_date": "2023-01-19",
                        "social_security_summary": {
                          "weeks_contributed": 188,
                          "weeks_redeemed": 0,
                          "weeks_reinstated": 0,
                        },
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/employment-records/",
              "request": {
                "body": {
                  "properties": {
                    "attach_pdf": {
                      "default": false,
                      "docs": "When set to `true`, you will receive the PDF in binary format in the response.",
                      "type": "optional<boolean>",
                    },
                    "link": {
                      "docs": "The `link.id` you want to retrieve employment records for.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EmploymentRecordRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.EmploymentRecord>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListEmploymentRecords:
      path: /api/employment-records/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing employment records in your Belvo
        account. By default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all employment records
      request:
        name: ListEmploymentRecordsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.EmploymentRecordsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: fef05fc8-7357-4a4a-9d29-55038ea31a04
                  link: 27c1d5cf-e8fb-433a-a2f7-d246de199c01
                  created_at: '2020-04-23T21:32:55Z'
                  collected_at: '2020-04-23T21:32:55Z'
                  report_date: '2023-01-19'
                  internal_identification: BLPM951331IONVGR54
                  employment_records:
                    - collected_at: '2020-04-23T21:32:55Z'
                      employer: Batman Enterprises CDMX
                      employer_id: 780-BAT-88769-CDMX
                      start_date: '2019-10-10'
                      end_date: '2019-12-31'
                      weeks_employed: 12
                      state: DISTRITO FEDERAL
                      most_recent_base_salary: 762.54
                      currency: MXN
                  files:
                    - type: ReporteSemanasCotizadas_190123
                      value: '=PDF_BINARY='
    RetrieveEmploymentRecordDetails:
      path: /api/employment-records/
      method: POST
      auth: true
      docs: |
        Retrieve employment record details for an individual.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve employment record details
      request:
        name: EmploymentRecordRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: The `link.id` you want to retrieve employment records for.
              validation:
                format: uuid
            attach_pdf:
              type: optional<boolean>
              docs: >-
                When set to `true`, you will receive the PDF in binary format in
                the response.
              default: false
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok
        type: list<root.EmploymentRecord>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d686c617-6d9e-4bc6-9801-5ac276ccb6a2
          response:
            body:
              - id: fef05fc8-7357-4a4a-9d29-55038ea31a04
                link: 27c1d5cf-e8fb-433a-a2f7-d246de199c01
                created_at: '2020-04-23T21:32:55Z'
                collected_at: '2020-04-23T21:32:55Z'
                report_date: '2023-01-19'
                internal_identification: BLPM951331IONVGR54
                personal_data:
                  official_name: Bruce Banner del Torro
                  first_name: Bruce
                  last_name: Banner del Torro
                  email: bruce.banner@avengers.com
                  birth_date: '2022-02-09'
                  entitlements:
                    entitled_to_health_insurance: true
                    entitled_to_company_benefits: true
                  document_ids:
                    - {}
                social_security_summary:
                  weeks_redeemed: 0
                  weeks_reinstated: 0
                  weeks_contributed: 188
                employment_records:
                  - collected_at: '2020-04-23T21:32:55Z'
                    employer: Batman Enterprises CDMX
                    employer_id: 780-BAT-88769-CDMX
                    start_date: '2019-10-10'
                    end_date: '2019-12-31'
                    weeks_employed: 12
                    state: DISTRITO FEDERAL
                    most_recent_base_salary: 762.54
                    currency: MXN
                files:
                  - type: ReporteSemanasCotizadas_190123
                    value: '=PDF_BINARY='
    DetailEmploymentRecord:
      path: /api/employment-records/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific employment record.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: >-
            The `employment-record.id` you want to get detailed information
            about.
      display-name: Get an employment record's details
      request:
        name: DetailEmploymentRecordRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.EmploymentRecord
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: fef05fc8-7357-4a4a-9d29-55038ea31a04
              link: 27c1d5cf-e8fb-433a-a2f7-d246de199c01
              created_at: '2020-04-23T21:32:55Z'
              collected_at: '2020-04-23T21:32:55Z'
              report_date: '2023-01-19'
              internal_identification: BLPM951331IONVGR54
              personal_data:
                official_name: Bruce Banner del Torro
                first_name: Bruce
                last_name: Banner del Torro
                email: bruce.banner@avengers.com
                birth_date: '2022-02-09'
                entitlements:
                  entitled_to_health_insurance: true
                  entitled_to_company_benefits: true
                  valid_until: valid_until
                  status: EMPLOYED
                document_ids:
                  - {}
              social_security_summary:
                weeks_redeemed: 0
                weeks_reinstated: 0
                weeks_contributed: 188
              employment_records:
                - collected_at: '2020-04-23T21:32:55Z'
                  employer: Batman Enterprises CDMX
                  employer_id: 780-BAT-88769-CDMX
                  start_date: '2019-10-10'
                  end_date: '2019-12-31'
                  weeks_employed: 12
                  state: DISTRITO FEDERAL
                  most_recent_base_salary: 762.54
                  monthly_salary: 1.1
                  currency: MXN
                  employment_status_updates:
                    - base_salary: 1033.09
                      update_date: '2021-09-01'
              files:
                - type: ReporteSemanasCotizadas_190123
                  value: '=PDF_BINARY='
    DestroyEmploymentRecord:
      path: /api/employment-records/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific employment record from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `employment-record.id` that you want to delete.
      display-name: Delete an employment record
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
  source:
    openapi: ../openapi.yml
  display-name: Employment Records
docs: "# Employment Records\n\nOur employment records\_resource lets you get a comprehensive view of your user‚Äôs current social security contributions and employment history.\n\nWith Belvo's employment records resource, you can access information about your user's current social security contributions and employment history. For the each user, we return the:\n\n- personal data\n- work history\n- historical and current daily base salary\n- and more!\n\nAt the moment, the employment records resource is available for:\n\n- üá≤üáΩ\_Mexico (IMSS)"
",
    },
    "incomeVerification.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Verify your users' income and forecast their future income potential with Belvo. Your only need to send trough a your raw transaction data and Belvo returns:

- insights into your user‚Äôs multiple sources of income
- a stability score that reflects the consistency and regularity of your user‚Äôs income history
- a confidence level for future income",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Income Verification",
          "endpoints": {
            "VerifyIncome": {
              "auth": true,
              "display-name": "Verify incomes",
              "docs": "Send through your raw data and receive enriched information for each of your user's income streams.

<div style="background-color:#f4f6f8; border-left: 6px solid #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
<strong>Note: </strong> Belvo can process up to 10,000 unique transactions per request.
</div>",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "name": "Income Verfification",
                  "request": {
                    "language": "pt",
                    "transactions": [
                      {
                        "account_category": "CHECKING_ACCOUNT",
                        "account_holder_id": "a61bc801-9fa5-457b-88ad-850c96eaca30",
                        "account_holder_type": "INDIVIDUAL",
                        "account_id": "EBACA-89077589",
                        "amount": 650.89,
                        "currency": "BRL",
                        "description": "SAL√ÅRIO MENSAL",
                        "institution": "Erebor Retail Brasil",
                        "transaction_id": "3CWE4927CF15355",
                        "value_date": "2022-11-18",
                      },
                    ],
                  },
                  "response": {
                    "body": [
                      {
                        "created_at": "2022-02-09T08:45:50Z",
                        "first_transaction_date": "2022-09-25",
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "income_source_type": "BANK",
                        "income_streams": [
                          {
                            "account_id": "EBUACA-89077589",
                            "average_income_amount": 7500,
                            "confidence": "HIGH",
                            "currency": "BRL",
                            "frequency": "MONTHLY",
                            "full_periods": 5,
                            "income_type": "SALARY",
                            "last_income_amount": 7500,
                            "last_income_date": "2023-03-25",
                            "last_income_description": "Sal√°rio",
                            "lookback_periods": 10,
                            "monthly_average": 7500,
                            "number_of_incomes": 6,
                            "periods_with_income": 5,
                            "regularity": 0.8,
                            "stability": 0.9,
                            "trend": -0.1,
                          },
                          {
                            "account_id": "EBUACA-890775324",
                            "average_income_amount": 3000,
                            "confidence": "LOW",
                            "currency": "BRL",
                            "frequency": "SINGLE",
                            "full_periods": 5,
                            "income_type": "TRANSFER",
                            "last_income_amount": 3000,
                            "last_income_date": "2022-09-25",
                            "last_income_description": "Transfer√™ncia da Gui",
                            "lookback_periods": 10,
                            "monthly_average": 3000,
                            "number_of_incomes": 1,
                            "periods_with_income": 1,
                            "regularity": 0.75,
                            "stability": 1,
                            "trend": 0,
                          },
                        ],
                        "last_transaction_date": "2023-03-25",
                        "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                        "monthly_average": 2000,
                        "monthly_average_high_confidence": 200,
                        "monthly_average_irregular": 200,
                        "monthly_average_low_confidence": 200,
                        "monthly_average_medium_confidence": 200,
                        "monthly_average_regular": 1800,
                        "number_of_income_streams": 5,
                        "total_high_confidence": 200,
                        "total_income_amount": 12000,
                        "total_irregular_income_amount": 1200,
                        "total_low_confidence": 200,
                        "total_medium_confidence": 200,
                        "total_regular_income_amount": 10800,
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/enrich/incomes/",
              "request": {
                "body": {
                  "properties": {
                    "allowed_income_types": "optional<list<root.EnumInvoiceAllowedIncomeTypesRequest>>",
                    "date_from": {
                      "docs": "The date from which you want to start getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_to`.

‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "date_to": {
                      "docs": "The date you want to stop getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_from`.

‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "language": {
                      "docs": "Two-letter ISO 639-1 code for the language of the transaction.",
                      "type": "string",
                    },
                    "minimum_confidence_level": "optional<root.EnumIncomeMinimumConfidenceLevelRequest>",
                    "transactions": {
                      "docs": "An array of transaction objects that you want enriched.

**Note:** Each object corresponds to one, unique transaction and you can send through up to 10,000 transactions per request.",
                      "type": "list<root.EyodIncomeVerificationBodyRequest>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EyodIncomeVerificationRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.Income>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    VerifyIncome:
      path: /api/enrich/incomes/
      method: POST
      auth: true
      docs: >-
        Send through your raw data and receive enriched information for each of
        your user's income streams.


        <div style="background-color:#f4f6f8; border-left: 6px solid
        #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px">

        <strong>Note: </strong> Belvo can process up to 10,000 unique
        transactions per request.

        </div>
      source:
        openapi: ../openapi.yml
      display-name: Verify incomes
      request:
        name: EyodIncomeVerificationRequest
        body:
          properties:
            language:
              type: string
              docs: Two-letter ISO 639-1 code for the language of the transaction.
            transactions:
              docs: >-
                An array of transaction objects that you want enriched.


                **Note:** Each object corresponds to one, unique transaction and
                you can send through up to 10,000 transactions per request.
              type: list<root.EyodIncomeVerificationBodyRequest>
            date_from:
              type: optional<string>
              docs: >-
                The date from which you want to start getting incomes for, in
                `YYYY-MM-DD` format, within the last 365 days. When you use this
                parameter, you must also send `date_to`.


                ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            date_to:
              type: optional<string>
              docs: >-
                The date you want to stop getting incomes for, in `YYYY-MM-DD`
                format, within the last 365 days. When you use this parameter,
                you must also send `date_from`.


                ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date
                (in other words, no future dates).
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            allowed_income_types: optional<list<root.EnumInvoiceAllowedIncomeTypesRequest>>
            minimum_confidence_level: optional<root.EnumIncomeMinimumConfidenceLevelRequest>
        content-type: application/json
      response:
        docs: Ok
        type: list<root.Income>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.InternalServerError
      examples:
        - name: Income Verfification
          request:
            language: pt
            transactions:
              - transaction_id: 3CWE4927CF15355
                account_holder_type: INDIVIDUAL
                account_holder_id: a61bc801-9fa5-457b-88ad-850c96eaca30
                account_id: EBACA-89077589
                account_category: CHECKING_ACCOUNT
                value_date: '2022-11-18'
                description: SAL√ÅRIO MENSAL
                amount: 650.89
                currency: BRL
                institution: Erebor Retail Brasil
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                link: b834e69b-1aa4-465d-969c-07c886a4fbed
                created_at: '2022-02-09T08:45:50Z'
                income_streams:
                  - account_id: EBUACA-89077589
                    income_type: SALARY
                    frequency: MONTHLY
                    monthly_average: 7500
                    average_income_amount: 7500
                    last_income_amount: 7500
                    currency: BRL
                    last_income_description: Sal√°rio
                    last_income_date: '2023-03-25'
                    stability: 0.9
                    regularity: 0.8
                    trend: -0.1
                    lookback_periods: 10
                    full_periods: 5
                    periods_with_income: 5
                    number_of_incomes: 6
                    confidence: HIGH
                  - account_id: EBUACA-890775324
                    income_type: TRANSFER
                    frequency: SINGLE
                    monthly_average: 3000
                    average_income_amount: 3000
                    last_income_amount: 3000
                    currency: BRL
                    last_income_description: Transfer√™ncia da Gui
                    last_income_date: '2022-09-25'
                    stability: 1
                    regularity: 0.75
                    trend: 0
                    lookback_periods: 10
                    full_periods: 5
                    periods_with_income: 1
                    number_of_incomes: 1
                    confidence: LOW
                income_source_type: BANK
                first_transaction_date: '2022-09-25'
                last_transaction_date: '2023-03-25'
                number_of_income_streams: 5
                monthly_average: 2000
                monthly_average_regular: 1800
                monthly_average_irregular: 200
                monthly_average_low_confidence: 200
                monthly_average_medium_confidence: 200
                monthly_average_high_confidence: 200
                total_income_amount: 12000
                total_regular_income_amount: 10800
                total_irregular_income_amount: 1200
                total_low_confidence: 200
                total_medium_confidence: 200
                total_high_confidence: 200
  source:
    openapi: ../openapi.yml
  display-name: Income Verification
docs: >-
  Verify your users' income and forecast their future income potential with
  Belvo. Your only need to send trough a your raw transaction data and Belvo
  returns:


  - insights into your user‚Äôs multiple sources of income

  - a stability score that reflects the consistency and regularity of your
  user‚Äôs income history

  - a confidence level for future income
",
    },
    "incomes.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Use the Incomes endpoint to gather insights on an account's income sources for the past 365 days. The endpoint is particularly useful when you want to verify a person's income.

<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
    <strong>Info: </strong> The incomes resource is <b>only</b> available for Checking and Savings
accounts associated with banking links.
 </div>


 ### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field        | Available Filters                 |
| ------------ | --------------------------------- |
| `account`    | `=`, `in`                         |
| `created_at` | `gt`, `gte`, `lt`, `lte`, `range` |
| `id`         | `=`, `in`                         |

```curl cURL
# Filtering results to have incomes from one link:
https://sandbox.belvo.com/api/incomes/?link=link-id

# Filtering results to have incomes from one link and from two of their accounts:
https://sandbox.belvo.com/api/incomes/?link=link-id&account__in=account-id1,account-id2
```
```javascript Node
// Filtering results to have incomes from one link:
client.incomes.list({
  filters: {
    link: "link-id"
  }
})

// Filtering results to have incomes from one link and from two of their accounts:

client.incomes.list({
  filters: {
    link: "link-id",
    account__in: "account-id1,account-id2"
  }
})
```
```python Python
# Filtering results to have incomes from one link:
client.Incomes.list(link="link-id")

# Filtering results to have incomes from one link and from two of their accounts:
client.Incomes.list(link="link-id", account__in="account-id1,account-id2")
```
```ruby Ruby
# Filtering results to have incomes from one link:
client.incomes.list(params: {
  link: "link-id"
})

# Filtering results to have incomes from one link and from two of their accounts:
client.incomes.list(params: {
  link: "link-id",
  account__in: "account-id1,account-id2"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Incomes",
          "endpoints": {
            "DestroyIncomes": {
              "auth": true,
              "display-name": "Delete an income",
              "docs": "Delete a specific income from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://api.belvo.com/api/incomes/{id}/ \
  -H 'Host: api.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

# Delete an income
client.Incomes.delete("income-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
)

client.incomes.delete id: 'income-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
);

client.connect()
  .then(function () {
    client.incomes.delete('incomeId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/incomes/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "the `income.id` that you want to delete",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailIncome": {
              "auth": true,
              "display-name": "Get an income's details",
              "docs": "Get the details of a specific income.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://api.belvo.com/api/incomes/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

# Get an income
income = client.Incomes.get(id="income-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
)

client.incomes.detail id: 'income-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
);

client.connect()
  .then(function () {
    client.incomes.detail('incomeId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": [
                      {
                        "created_at": "2022-02-09T08:45:50Z",
                        "first_transaction_date": "2022-06-09",
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "income_source_type": "BANK",
                        "income_streams": [],
                        "last_transaction_date": "2023-02-09",
                        "link": "f4621548-2f9e-440e-9ebd-ae8decac8c02",
                        "monthly_average": 1705.46,
                        "monthly_average_high_confidence": 0,
                        "monthly_average_irregular": 1308.18,
                        "monthly_average_low_confidence": 1308.18,
                        "monthly_average_medium_confidence": 2500,
                        "monthly_average_regular": 2500,
                        "number_of_income_streams": 12,
                        "total_high_confidence": 0,
                        "total_income_amount": 12616.37,
                        "total_irregular_income_amount": 2616.37,
                        "total_low_confidence": 2616.37,
                        "total_medium_confidence": 10000,
                        "total_regular_income_amount": 10000,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/incomes/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `income.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailIncomeRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.Income>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListIncomes": {
              "auth": true,
              "display-name": "List all incomes",
              "docs": "Get a paginated list of all incomes in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://api.belvo.com/api/incomes/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

# List incomes
for income in client.Incomes.list():
    pprint(income)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
)

client.incomes.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
);

client.connect()
  .then(function () {
    client.incomes.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "account": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "account__in": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509",
                    "fields": "link,balance,account",
                    "link": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "link__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "created_at": "2022-02-09T08:45:50Z",
                          "first_transaction_date": "2022-06-09",
                          "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                          "income_source_type": "BANK",
                          "income_streams": [],
                          "last_transaction_date": "2023-02-09",
                          "link": "f4621548-2f9e-440e-9ebd-ae8decac8c02",
                          "monthly_average": 1705.46,
                          "monthly_average_high_confidence": 0,
                          "monthly_average_irregular": 1308.18,
                          "monthly_average_low_confidence": 1308.18,
                          "monthly_average_medium_confidence": 2500,
                          "monthly_average_regular": 2500,
                          "number_of_income_streams": 12,
                          "total_high_confidence": 0,
                          "total_income_amount": 12616.37,
                          "total_irregular_income_amount": 2616.37,
                          "total_low_confidence": 2616.37,
                          "total_medium_confidence": 10000,
                          "total_regular_income_amount": 10000,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/incomes/",
              "request": {
                "name": "ListIncomesRequest",
                "query-parameters": {
                  "account": {
                    "docs": "The `account.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `account.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "account__in": {
                    "docs": "Return incomes for these `account.id`s.",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
",
                    "type": "optional<string>",
                  },
                  "link__in": {
                    "docs": "Return incomes only for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.IncomesPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchIncomes": {
              "auth": true,
              "display-name": "Complete an incomes request",
              "docs": "Used to resume an Income retrieve session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://api.belvo.com/api/incomes/ \
  -H 'Content-Type: application/json' \
  -H 'Host: api.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

# Resume incomes
incomes = client.Incomes.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
)

client.incomes.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
);

client.connect()
  .then(function () {
    client.incomes.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "created_at": "2022-02-09T08:45:50Z",
                        "first_transaction_date": "2022-06-09",
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "income_source_type": "BANK",
                        "income_streams": [],
                        "last_transaction_date": "2023-02-09",
                        "link": "f4621548-2f9e-440e-9ebd-ae8decac8c02",
                        "monthly_average": 1705.46,
                        "monthly_average_high_confidence": 0,
                        "monthly_average_irregular": 1308.18,
                        "monthly_average_low_confidence": 1308.18,
                        "monthly_average_medium_confidence": 2500,
                        "monthly_average_regular": 2500,
                        "number_of_income_streams": 12,
                        "total_high_confidence": 0,
                        "total_income_amount": 12616.37,
                        "total_irregular_income_amount": 2616.37,
                        "total_low_confidence": 2616.37,
                        "total_medium_confidence": 10000,
                        "total_regular_income_amount": 10000,
                      },
                    ],
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/incomes/",
              "request": {
                "body": "root.PatchBody",
                "content-type": "application/json",
                "name": "PatchIncomesRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<root.Income>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveIncome": {
              "auth": true,
              "display-name": "Retrieve incomes for a link",
              "docs": "Retrieve income insights for <b>checking and savings accounts</b> from a specific link. You can receive insights for a period of up to 365 days, depending on the transaction history available for each [bank](https://developers.belvo.com/docs/institution).",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://api.belvo.com/api/incomes/ \
  -H 'Content-Type: application/json' \
  -H 'Host: api.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": ""
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

# Retrieve incomes
incomes = client.Incomes.create(
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
)

client.incomes.retrieve link: 'link-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
);

client.connect()
  .then(function () {
    client.incomes.retrieve('link-id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": {
                      "created_at": "2022-02-09T08:45:50Z",
                      "first_transaction_date": "2022-06-09",
                      "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                      "income_source_type": "BANK",
                      "income_streams": [
                        {
                          "account_id": "EBACA-89077589",
                          "average_income_amount": 2500,
                          "confidence": "HIGH",
                          "currency": "BRL",
                          "frequency": "MONTHLY",
                          "full_periods": 12,
                          "income_type": "SALARY",
                          "last_income_amount": 2500,
                          "last_income_date": "2022-02-09",
                          "last_income_description": {
                            "key": "value",
                          },
                          "lookback_periods": 4,
                          "monthly_average": 2500,
                          "number_of_incomes": 4,
                          "periods_with_income": 3,
                          "regularity": 0.75,
                          "stability": 1,
                          "trend": 0,
                        },
                      ],
                      "last_transaction_date": "2023-02-09",
                      "link": "f4621548-2f9e-440e-9ebd-ae8decac8c02",
                      "monthly_average": 1705.46,
                      "monthly_average_high_confidence": 0,
                      "monthly_average_irregular": 1308.18,
                      "monthly_average_low_confidence": 1308.18,
                      "monthly_average_medium_confidence": 2500,
                      "monthly_average_regular": 2500,
                      "number_of_income_streams": 12,
                      "total_high_confidence": 0,
                      "total_income_amount": 12616.37,
                      "total_irregular_income_amount": 2616.37,
                      "total_low_confidence": 2616.37,
                      "total_medium_confidence": 10000,
                      "total_regular_income_amount": 10000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/incomes/",
              "request": {
                "body": {
                  "properties": {
                    "allowed_income_types": "optional<list<root.EnumInvoiceAllowedIncomeTypesRequest>>",
                    "date_from": {
                      "docs": "The date from which you want to start getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_to`.

‚ö†Ô∏è You must have at least 90 days between `date_from` and `date_to`.

‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "date_to": {
                      "docs": "The date you want to stop getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_from`.

‚ö†Ô∏è You must have at least 90 days between `date_from` and `date_to`.

‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "link": {
                      "docs": "The `link.id` that you want to get information for.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "minimum_confidence_level": "optional<root.EnumIncomeMinimumConfidenceLevelRequest>",
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                    "token": {
                      "docs": "The OTP token generated by the bank.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "IncomesRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "root.Income",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListIncomes:
      path: /api/incomes/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all incomes in your Belvo account. By default,
        we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all incomes
      request:
        name: ListIncomesRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          account:
            type: optional<string>
            docs: >
              The `account.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `account.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          account__in:
            type: optional<string>
            docs: Return incomes for these `account.id`s.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
              `account.id` filters in order to improve your performance.
          link__in:
            type: optional<string>
            docs: Return incomes only for these `link.id`s.
      response:
        docs: Ok
        type: root.IncomesPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            account: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account__in: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
            link: 73694155-b871-41ec-94e3-37d17ff62b5d
            link__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                  link: f4621548-2f9e-440e-9ebd-ae8decac8c02
                  created_at: '2022-02-09T08:45:50Z'
                  income_streams: []
                  income_source_type: BANK
                  first_transaction_date: '2022-06-09'
                  last_transaction_date: '2023-02-09'
                  number_of_income_streams: 12
                  monthly_average: 1705.46
                  monthly_average_regular: 2500
                  monthly_average_irregular: 1308.18
                  monthly_average_low_confidence: 1308.18
                  monthly_average_medium_confidence: 2500
                  monthly_average_high_confidence: 0
                  total_income_amount: 12616.37
                  total_regular_income_amount: 10000
                  total_irregular_income_amount: 2616.37
                  total_low_confidence: 2616.37
                  total_medium_confidence: 10000
                  total_high_confidence: 0
          code-samples:
            - language: cURL
              code: |
                curl https://api.belvo.com/api/incomes/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "https://api.belvo.com")


                # List incomes

                for income in client.Incomes.list():
                    pprint(income)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                )

                client.incomes.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                );

                client.connect()
                  .then(function () {
                    client.incomes.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveIncome:
      path: /api/incomes/
      method: POST
      auth: true
      docs: >-
        Retrieve income insights for <b>checking and savings accounts</b> from a
        specific link. You can receive insights for a period of up to 365 days,
        depending on the transaction history available for each
        [bank](https://developers.belvo.com/docs/institution).
      source:
        openapi: ../openapi.yml
      display-name: Retrieve incomes for a link
      request:
        name: IncomesRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: The `link.id` that you want to get information for.
              validation:
                format: uuid
            allowed_income_types: optional<list<root.EnumInvoiceAllowedIncomeTypesRequest>>
            minimum_confidence_level: optional<root.EnumIncomeMinimumConfidenceLevelRequest>
            date_from:
              type: optional<string>
              docs: >-
                The date from which you want to start getting incomes for, in
                `YYYY-MM-DD` format, within the last 365 days. When you use this
                parameter, you must also send `date_to`.


                ‚ö†Ô∏è You must have at least 90 days between `date_from` and
                `date_to`.


                ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            date_to:
              type: optional<string>
              docs: >-
                The date you want to stop getting incomes for, in `YYYY-MM-DD`
                format, within the last 365 days. When you use this parameter,
                you must also send `date_from`.


                ‚ö†Ô∏è You must have at least 90 days between `date_from` and
                `date_to`.


                ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date
                (in other words, no future dates).
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            token:
              type: optional<string>
              docs: The OTP token generated by the bank.
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: root.Income
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
              link: f4621548-2f9e-440e-9ebd-ae8decac8c02
              created_at: '2022-02-09T08:45:50Z'
              income_streams:
                - account_id: EBACA-89077589
                  income_type: SALARY
                  frequency: MONTHLY
                  monthly_average: 2500
                  average_income_amount: 2500
                  last_income_amount: 2500
                  currency: BRL
                  last_income_description:
                    key: value
                  last_income_date: '2022-02-09'
                  stability: 1
                  regularity: 0.75
                  trend: 0
                  lookback_periods: 4
                  full_periods: 12
                  periods_with_income: 3
                  number_of_incomes: 4
                  confidence: HIGH
              income_source_type: BANK
              first_transaction_date: '2022-06-09'
              last_transaction_date: '2023-02-09'
              number_of_income_streams: 12
              monthly_average: 1705.46
              monthly_average_regular: 2500
              monthly_average_irregular: 1308.18
              monthly_average_low_confidence: 1308.18
              monthly_average_medium_confidence: 2500
              monthly_average_high_confidence: 0
              total_income_amount: 12616.37
              total_regular_income_amount: 10000
              total_irregular_income_amount: 2616.37
              total_low_confidence: 2616.37
              total_medium_confidence: 10000
              total_high_confidence: 0
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://api.belvo.com/api/incomes/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: api.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": ""
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "https://api.belvo.com")


                # Retrieve incomes

                incomes = client.Incomes.create(
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                )

                client.incomes.retrieve link: 'link-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                );

                client.connect()
                  .then(function () {
                    client.incomes.retrieve('link-id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchIncomes:
      path: /api/incomes/
      method: PATCH
      auth: true
      docs: >-
        Used to resume an Income retrieve session that was paused because an MFA
        token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete an incomes request
      request:
        body: root.PatchBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchIncomesRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<root.Income>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                link: f4621548-2f9e-440e-9ebd-ae8decac8c02
                created_at: '2022-02-09T08:45:50Z'
                income_streams: []
                income_source_type: BANK
                first_transaction_date: '2022-06-09'
                last_transaction_date: '2023-02-09'
                number_of_income_streams: 12
                monthly_average: 1705.46
                monthly_average_regular: 2500
                monthly_average_irregular: 1308.18
                monthly_average_low_confidence: 1308.18
                monthly_average_medium_confidence: 2500
                monthly_average_high_confidence: 0
                total_income_amount: 12616.37
                total_regular_income_amount: 10000
                total_irregular_income_amount: 2616.37
                total_low_confidence: 2616.37
                total_medium_confidence: 10000
                total_high_confidence: 0
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://api.belvo.com/api/incomes/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: api.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "https://api.belvo.com")


                # Resume incomes

                incomes = client.Incomes.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                )

                client.incomes.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                );

                client.connect()
                  .then(function () {
                    client.incomes.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailIncome:
      path: /api/incomes/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific income.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `income.id` you want to get detailed information about.
      display-name: Get an income's details
      request:
        name: DetailIncomeRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: list<root.Income>
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                link: f4621548-2f9e-440e-9ebd-ae8decac8c02
                created_at: '2022-02-09T08:45:50Z'
                income_streams: []
                income_source_type: BANK
                first_transaction_date: '2022-06-09'
                last_transaction_date: '2023-02-09'
                number_of_income_streams: 12
                monthly_average: 1705.46
                monthly_average_regular: 2500
                monthly_average_irregular: 1308.18
                monthly_average_low_confidence: 1308.18
                monthly_average_medium_confidence: 2500
                monthly_average_high_confidence: 0
                total_income_amount: 12616.37
                total_regular_income_amount: 10000
                total_irregular_income_amount: 2616.37
                total_low_confidence: 2616.37
                total_medium_confidence: 10000
                total_high_confidence: 0
          code-samples:
            - language: cURL
              code: |
                curl https://api.belvo.com/api/incomes/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "https://api.belvo.com")


                # Get an income

                income = client.Incomes.get(id="income-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                )

                client.incomes.detail id: 'income-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                );

                client.connect()
                  .then(function () {
                    client.incomes.detail('incomeId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyIncomes:
      path: /api/incomes/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific income from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: the `income.id` that you want to delete
      display-name: Delete an income
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://api.belvo.com/api/incomes/{id}/ \
                  -H 'Host: api.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "https://api.belvo.com")


                # Delete an income

                client.Incomes.delete("income-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                )

                client.incomes.delete id: 'income-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                );

                client.connect()
                  .then(function () {
                    client.incomes.delete('incomeId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Incomes
docs: >-
  Use the Incomes endpoint to gather insights on an account's income sources for
  the past 365 days. The endpoint is particularly useful when you want to verify
  a person's income.


  <div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding:
  12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
      <strong>Info: </strong> The incomes resource is <b>only</b> available for Checking and Savings
  accounts associated with banking links.
   </div>


   ### **üî¶ Filterable fields**

  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field        | Available Filters                 |

  | ------------ | --------------------------------- |

  | `account`    | `=`, `in`                         |

  | `created_at` | `gt`, `gte`, `lt`, `lte`, `range` |

  | `id`         | `=`, `in`                         |


  ```curl cURL

  # Filtering results to have incomes from one link:

  https://sandbox.belvo.com/api/incomes/?link=link-id


  # Filtering results to have incomes from one link and from two of their
  accounts:

  https://sandbox.belvo.com/api/incomes/?link=link-id&account__in=account-id1,account-id2

  ```

  ```javascript Node

  // Filtering results to have incomes from one link:

  client.incomes.list({
    filters: {
      link: "link-id"
    }
  })


  // Filtering results to have incomes from one link and from two of their
  accounts:


  client.incomes.list({
    filters: {
      link: "link-id",
      account__in: "account-id1,account-id2"
    }
  })

  ```

  ```python Python

  # Filtering results to have incomes from one link:

  client.Incomes.list(link="link-id")


  # Filtering results to have incomes from one link and from two of their
  accounts:

  client.Incomes.list(link="link-id", account__in="account-id1,account-id2")

  ```

  ```ruby Ruby

  # Filtering results to have incomes from one link:

  client.incomes.list(params: {
    link: "link-id"
  })


  # Filtering results to have incomes from one link and from two of their
  accounts:

  client.incomes.list(params: {
    link: "link-id",
    account__in: "account-id1,account-id2"
  })

  ```
",
    },
    "institutions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "An **institution** is an entity that Belvo can access information from. It can be a:

- bank institution, such as Banamex retail banking or HSBC business banking.
- fiscal institution, such as the Servicio de Administraci√≥n Tributaria (SAT) in Mexico.

![](https://files.readme.io/69a4676-Banking__Tax.png)

You can see a complete list of institutions by either consulting our [Institutions article](https://developers.belvo.com/docs/institution) or making a List request to this endpoint.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Institutions",
          "endpoints": {
            "DetailInstitution": {
              "auth": true,
              "display-name": "Get an institution's details",
              "docs": "Get the details of a specific institution.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/institutions/{id}  \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a institution
institution = client.Institutions.get(id="institution_id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.institutions.detail id: 'institution-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.institutions.detail('institution_id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "country_codes": [
                        "MX",
                      ],
                      "display_name": "Erebor Mexico",
                      "features": [
                        {
                          "description": "The institution may require a token during link creation or login",
                          "name": "token_required",
                        },
                      ],
                      "form_fields": [
                        {
                          "label": "Client number",
                          "name": "username",
                          "placeholder": "ABC333333A33",
                          "type": "text",
                          "validation": "^.{1,}$",
                          "validation_message": "Invalid client number",
                          "values": [
                            {
                              "code": "001",
                              "label": "C√©dula de Ciudadan√≠a",
                              "placeholder": "DEF4444908M22",
                              "validation": "^.{1,}$",
                              "validation_message": "Invalid document number",
                            },
                          ],
                        },
                      ],
                      "icon_logo": "https://statics.belvo.io/widget/images/institutions/erebor.svg",
                      "id": 1003,
                      "integration_type": "credentials",
                      "logo": "https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png",
                      "name": "erebor_mx_retail",
                      "primary_color": "#056dae",
                      "resources": [
                        "ACCOUNTS",
                        "BALANCES",
                        "INCOMES",
                        "OWNERS",
                        "RECURRING_EXPENSES",
                        "RISK_INSIGHTS",
                        "TRANSACTIONS",
                      ],
                      "status": "healthy",
                      "text_logo": "https://statics.belvo.io/widget/images/institutions/erebor.svg",
                      "type": "bank",
                      "website": "https://www.erebor.com/",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/institutions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `institution.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailInstitutionRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Institution",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListInstitutions": {
              "auth": true,
              "display-name": "List all institutions",
              "docs": "Get a paginated list of all the institutions currently supported by Belvo. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/institutions/  \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List institutions
for institution in client.Institutions.list():
    pprint(institution)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.institutions.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.institutions.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "country_code": "MX",
                    "country_code__in": "CO,BR",
                    "display_name": "Erebor Bank",
                    "fields": "link,balance,account",
                    "name__in": "erebor_br_retail,gotham_co_business",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "resources__allin": "ACCOUNTS,OWNERS,TRANSACTIONS",
                    "status": "healthy",
                    "status__in": "healthy,down",
                    "type": "fiscal",
                    "type__in": "fiscal,bank",
                    "website": "https://www.erebor.mx",
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "country_codes": [
                            "MX",
                          ],
                          "display_name": "Erebor Mexico",
                          "features": [
                            {
                              "description": "The institution may require a token during link creation or login",
                              "name": "token_required",
                            },
                          ],
                          "form_fields": [
                            {
                              "label": "Client number",
                              "name": "username",
                              "placeholder": "ABC333333A33",
                              "type": "text",
                              "validation": "^.{1,}$",
                              "validation_message": "Invalid client number",
                            },
                          ],
                          "icon_logo": "https://statics.belvo.io/widget/images/institutions/erebor.svg",
                          "id": 1003,
                          "integration_type": "credentials",
                          "logo": "https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png",
                          "name": "erebor_mx_retail",
                          "primary_color": "#056dae",
                          "resources": [
                            "ACCOUNTS",
                            "BALANCES",
                            "INCOMES",
                            "OWNERS",
                            "RECURRING_EXPENSES",
                            "RISK_INSIGHTS",
                            "TRANSACTIONS",
                          ],
                          "status": "healthy",
                          "text_logo": "https://statics.belvo.io/widget/images/institutions/erebor.svg",
                          "type": "bank",
                          "website": "https://www.erebor.com/",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/institutions/",
              "request": {
                "name": "ListInstitutionsRequest",
                "query-parameters": {
                  "country_code": {
                    "docs": "Return institutions only for this two-letter country code.",
                    "type": "optional<string>",
                  },
                  "country_code__in": {
                    "docs": "Return institutions only for these two-letter country codes.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Return institutions that partially match this display name.",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "name": "optional<string>",
                  "name__in": {
                    "docs": "Return institutions with one or more of these Belvo-designated names.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "resources__allin": {
                    "docs": "Return institutions that support these resources.",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "Return institutions with the given status. You can choose between `healthy` or `down`.",
                    "type": "optional<string>",
                  },
                  "status__in": {
                    "docs": "Return institutions with one of the given statuses. You can choose between `healthy` or `down`.",
                    "type": "optional<string>",
                  },
                  "type": {
                    "docs": "Return institutions of this type. You can choose between `bank` or `fiscal`.",
                    "type": "optional<string>",
                  },
                  "type__in": {
                    "docs": "Return institutions of one of these types. You can choose between `bank` or `fiscal`.",
                    "type": "optional<string>",
                  },
                  "website": {
                    "docs": "Return institutions with this website URL.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.InstitutionsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListInstitutions:
      path: /api/institutions/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all the institutions currently supported by
        Belvo. By default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all institutions
      request:
        name: ListInstitutionsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          country_code:
            type: optional<string>
            docs: Return institutions only for this two-letter country code.
          country_code__in:
            type: optional<string>
            docs: Return institutions only for these two-letter country codes.
          display_name:
            type: optional<string>
            docs: Return institutions that partially match this display name.
          name: optional<string>
          name__in:
            type: optional<string>
            docs: >-
              Return institutions with one or more of these Belvo-designated
              names.
          resources__allin:
            type: optional<string>
            docs: Return institutions that support these resources.
          status:
            type: optional<string>
            docs: >-
              Return institutions with the given status. You can choose between
              `healthy` or `down`.
          status__in:
            type: optional<string>
            docs: >-
              Return institutions with one of the given statuses. You can choose
              between `healthy` or `down`.
          type:
            type: optional<string>
            docs: >-
              Return institutions of this type. You can choose between `bank` or
              `fiscal`.
          type__in:
            type: optional<string>
            docs: >-
              Return institutions of one of these types. You can choose between
              `bank` or `fiscal`.
          website:
            type: optional<string>
            docs: Return institutions with this website URL.
      response:
        docs: Ok
        type: root.InstitutionsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            country_code: MX
            country_code__in: CO,BR
            display_name: Erebor Bank
            name__in: erebor_br_retail,gotham_co_business
            resources__allin: ACCOUNTS,OWNERS,TRANSACTIONS
            status: healthy
            status__in: healthy,down
            type: fiscal
            type__in: fiscal,bank
            website: https://www.erebor.mx
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 1003
                  name: erebor_mx_retail
                  type: bank
                  website: https://www.erebor.com/
                  display_name: Erebor Mexico
                  country_codes:
                    - MX
                  primary_color: '#056dae'
                  logo: >-
                    https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png
                  icon_logo: >-
                    https://statics.belvo.io/widget/images/institutions/erebor.svg
                  text_logo: >-
                    https://statics.belvo.io/widget/images/institutions/erebor.svg
                  form_fields:
                    - name: username
                      type: text
                      label: Client number
                      validation: ^.{1,}$
                      placeholder: ABC333333A33
                      validation_message: Invalid client number
                  features:
                    - name: token_required
                      description: >-
                        The institution may require a token during link creation
                        or login
                  resources:
                    - ACCOUNTS
                    - BALANCES
                    - INCOMES
                    - OWNERS
                    - RECURRING_EXPENSES
                    - RISK_INSIGHTS
                    - TRANSACTIONS
                  integration_type: credentials
                  status: healthy
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/institutions/  \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List institutions

                for institution in client.Institutions.list():
                    pprint(institution)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.institutions.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.institutions.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailInstitution:
      path: /api/institutions/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific institution.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `institution.id` you want to get detailed information about.
      display-name: Get an institution's details
      request:
        name: DetailInstitutionRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.Institution
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 1003
              name: erebor_mx_retail
              type: bank
              website: https://www.erebor.com/
              display_name: Erebor Mexico
              country_codes:
                - MX
              primary_color: '#056dae'
              logo: https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png
              icon_logo: https://statics.belvo.io/widget/images/institutions/erebor.svg
              text_logo: https://statics.belvo.io/widget/images/institutions/erebor.svg
              form_fields:
                - name: username
                  type: text
                  label: Client number
                  validation: ^.{1,}$
                  placeholder: ABC333333A33
                  validation_message: Invalid client number
                  values:
                    - code: '001'
                      label: C√©dula de Ciudadan√≠a
                      validation: ^.{1,}$
                      validation_message: Invalid document number
                      placeholder: DEF4444908M22
              features:
                - name: token_required
                  description: >-
                    The institution may require a token during link creation or
                    login
              resources:
                - ACCOUNTS
                - BALANCES
                - INCOMES
                - OWNERS
                - RECURRING_EXPENSES
                - RISK_INSIGHTS
                - TRANSACTIONS
              integration_type: credentials
              status: healthy
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/institutions/{id}  \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a institution

                institution = client.Institutions.get(id="institution_id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.institutions.detail id: 'institution-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.institutions.detail('institution_id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Institutions
docs: >-
  An **institution** is an entity that Belvo can access information from. It can
  be a:


  - bank institution, such as Banamex retail banking or HSBC business banking.

  - fiscal institution, such as the Servicio de Administraci√≥n Tributaria (SAT)
  in Mexico.


  ![](https://files.readme.io/69a4676-Banking__Tax.png)


  You can see a complete list of institutions by either consulting our
  [Institutions article](https://developers.belvo.com/docs/institution) or
  making a List request to this endpoint.
",
    },
    "investmentPortfolios.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "At the moment we only support the following institutions and investment products:

| Institution                     | Portfolio                         | Instruments                 |
| ------------------------------- | --------------------------------- | --------------------------- |
| Banco de Brazil Retail (Brazil) | `FIXED_INCOME`                    | `DEPOSIT`                   |
| Banco Inter Retail (Brazil)     | `FIXED_INCOME`                    | `DEPOSIT`                   |
| Bradesco Retail (Brazil)        | `FIXED_INCOME`, `VARIABLE_INCOME` | `DEPOSIT`, `FUND`           |
| CaixaBank Retail (Brazil)       | `FIXED_INCOME`, `VARIABLE_INCOME` | `DEPOSIT`, `FUND`           |
| Itau Retail (Brazil)            | `FIXED_INCOME`, `VARIABLE_INCOME` | `DEPOSIT`, `FUND`, `STOCKS` |
| Santander Retail (Brazil)       | `FIXED_INCOME`, `VARIABLE_INCOME` | `DEPOSIT`, `BOND`, `FUND`   |


### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field         | Available Filters                 |
| ------------- | --------------------------------- |
| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |
| `link`        | `=`, `in`                         |

```curl cURL
# Filtering results so that you get the portfolios of one link:
https://sandbox.belvo.com/investments/portfolios/?link=89c91f42-df34-4c5d-a4f1-6e1e40438af4

```
```javascript Node
// Filtering results so that you get the portfolios of one link:
client. investmentsPortfolios.list({
  filters: {
    link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
  }
})

```
```python Python
# Filtering results so that you get the portfolios of one link:
client. InvestmentsPortfolios.list(link="89c91f42-df34-4c5d-a4f1-6e1e40438af4")

```
```ruby Ruby
# Filtering results so that you get the portfolios of one link:
client. investments_portfolio.list(params: {
  link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Investment Portfolios",
          "endpoints": {
            "DestroyPortfolio": {
              "auth": true,
              "display-name": "Delete a portfolio",
              "docs": "Delete a specific investment portfolio and all associated instruments, transactions, and owners from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete Investment Portfolio
client.InvestmentsPortfolios.delete('investment-portfolio.id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.investments_portfolio.delete id: 'investment-portfolio.id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.investmentsPortfolios.delete('investment-portfolio.id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/investments/portfolios/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `portfolio.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailPortfolio": {
              "auth": true,
              "display-name": "Get a portfolio's details",
              "docs": "Get the details of a specific portfolio.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get Investment Portfolio
client.InvestmentsPortfolios.get('investments-portfolios.id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.investments_portfolio.detail id: 'investments-portfolios.id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.investmentsPortfolios.detail('investments-portfolios.id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "balance_gross": 76000,
                      "balance_net": 77370.69,
                      "balance_type": "ASSET",
                      "currency": "BRL",
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "instruments": [
                        {
                          "average_acquisition_price": 10.01,
                          "balance_gross": 100.09,
                          "balance_net": 99.09,
                          "currency": "USD",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 123.09,
                            },
                          ],
                          "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "interest_rates": [
                            {
                              "index": "CDI",
                              "type": "yearly",
                              "value": 11.31,
                            },
                          ],
                          "name": "CBD DIGITAL ESPECIAL",
                          "open_date": "2021-08-10",
                          "price": 10.41,
                          "profit": 3.08,
                          "public_id": [
                            {
                              "type": "isin",
                              "value": "435-3354.3333",
                            },
                          ],
                          "quantity": 27.46,
                          "redemption_conditions": [
                            {
                              "type": "due_date",
                              "value": "12-02-2023",
                            },
                          ],
                          "subtype": "CBD",
                          "type": "BOND",
                        },
                      ],
                      "name": "Investimento",
                      "type": "FIXED_INCOME",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/investments/portfolios/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `portfolio.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailPortfolioRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.InvestmentsPortfolio",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListPortfolio": {
              "auth": true,
              "display-name": "List all portfolios",
              "docs": "Get a paginated list of all the existing portfolios (and their instruments) in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Investment Portfolios
for portfolio in client.InvestmentsPortfolios.list():
pprint(portfolio)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.investments_portfolio.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.investmentsPortfolios.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "balance_gross": 76000,
                          "balance_net": 77370.69,
                          "balance_type": "ASSET",
                          "currency": "BRL",
                          "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "instruments": [
                            {
                              "average_acquisition_price": 10.01,
                              "balance_gross": 100.09,
                              "balance_net": 99.09,
                              "currency": "USD",
                              "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                              "name": "CBD DIGITAL ESPECIAL",
                              "open_date": "2021-08-10",
                              "price": 10.41,
                              "profit": 3.08,
                              "public_id": [
                                {
                                  "type": "isin",
                                  "value": "435-3354.3333",
                                },
                              ],
                              "quantity": 27.46,
                              "subtype": "CBD",
                              "type": "BOND",
                            },
                          ],
                          "name": "Investimento",
                          "type": "FIXED_INCOME",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/investments/portfolios/",
              "request": {
                "name": "ListPortfolioRequest",
                "query-parameters": {
                  "created_at__gt": "optional<string>",
                  "created_at__gte": "optional<string>",
                  "created_at__lt": "optional<string>",
                  "created_at__lte": "optional<string>",
                  "created_at__range": "optional<string>",
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": "optional<string>",
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.InvestmentsPortfoliosPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchPortfolio": {
              "auth": true,
              "display-name": "Complete a portfolios request",
              "docs": "Used to resume a portfolio retrieve session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume Investment Portfolios
investments_portfolios = client.InvestmentsPortfolios.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.investments_portfolio.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.investmentsPortfolios.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": {
                      "balance_gross": 76000,
                      "balance_net": 77370.69,
                      "balance_type": "ASSET",
                      "currency": "BRL",
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "instruments": [
                        {
                          "average_acquisition_price": 10.01,
                          "balance_gross": 100.09,
                          "balance_net": 99.09,
                          "currency": "USD",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 123.09,
                            },
                          ],
                          "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "interest_rates": [
                            {
                              "index": "CDI",
                              "type": "yearly",
                              "value": 11.31,
                            },
                          ],
                          "name": "CBD DIGITAL ESPECIAL",
                          "open_date": "2021-08-10",
                          "price": 10.41,
                          "profit": 3.08,
                          "public_id": [
                            {
                              "type": "isin",
                              "value": "435-3354.3333",
                            },
                          ],
                          "quantity": 27.46,
                          "redemption_conditions": [
                            {
                              "type": "due_date",
                              "value": "12-02-2023",
                            },
                          ],
                          "subtype": "CBD",
                          "type": "BOND",
                        },
                      ],
                      "name": "Investimento",
                      "type": "FIXED_INCOME",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/investments/portfolios/",
              "request": {
                "body": "root.PatchBodyWithoutSaveData",
                "content-type": "application/json",
                "name": "PatchPortfolioRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "root.InvestmentsPortfolio",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrievePortfolio": {
              "auth": true,
              "display-name": "Retrieve portfolios for a link",
              "docs": "Retrieve all portfolios for an existing link.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve Investment Portfolios
client.InvestmentsPortfolios.create('link-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.investments_portfolio.retrieve(
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.investmentsPortfolios.retrieve('linkID')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": {
                      "balance_gross": 76000,
                      "balance_net": 77370.69,
                      "balance_type": "ASSET",
                      "currency": "BRL",
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "instruments": [
                        {
                          "average_acquisition_price": 10.01,
                          "balance_gross": 100.09,
                          "balance_net": 99.09,
                          "currency": "USD",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 123.09,
                            },
                          ],
                          "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "interest_rates": [
                            {
                              "index": "CDI",
                              "type": "yearly",
                              "value": 11.31,
                            },
                          ],
                          "name": "CBD DIGITAL ESPECIAL",
                          "open_date": "2021-08-10",
                          "price": 10.41,
                          "profit": 3.08,
                          "public_id": [
                            {
                              "type": "isin",
                              "value": "435-3354.3333",
                            },
                          ],
                          "quantity": 27.46,
                          "redemption_conditions": [
                            {
                              "type": "due_date",
                              "value": "12-02-2023",
                            },
                          ],
                          "subtype": "CBD",
                          "type": "BOND",
                        },
                      ],
                      "name": "Investimento",
                      "type": "FIXED_INCOME",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/investments/portfolios/",
              "request": {
                "body": "root.StandardRequest",
                "content-type": "application/json",
                "name": "RetrievePortfolioRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "root.InvestmentsPortfolio",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListPortfolio:
      path: /investments/portfolios/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all the existing portfolios (and their
        instruments) in your Belvo account. By default, we return up to 100
        results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all portfolios
      request:
        name: ListPortfolioRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          created_at__gt: optional<string>
          created_at__gte: optional<string>
          created_at__lt: optional<string>
          created_at__lte: optional<string>
          created_at__range: optional<string>
          link__in: optional<string>
      response:
        docs: Ok
        type: root.InvestmentsPortfoliosPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  name: Investimento
                  type: FIXED_INCOME
                  balance_type: ASSET
                  balance_gross: 76000
                  balance_net: 77370.69
                  currency: BRL
                  instruments:
                    - id: 30cb4806-6e00-48a4-91c9-ca55968576c8
                      public_id:
                        - type: isin
                          value: 435-3354.3333
                      type: BOND
                      subtype: CBD
                      name: CBD DIGITAL ESPECIAL
                      currency: USD
                      price: 10.41
                      quantity: 27.46
                      balance_gross: 100.09
                      balance_net: 99.09
                      average_acquisition_price: 10.01
                      profit: 3.08
                      open_date: '2021-08-10'
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Investment Portfolios

                for portfolio in client.InvestmentsPortfolios.list():

                pprint(portfolio)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.investments_portfolio.list
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.investmentsPortfolios.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrievePortfolio:
      path: /investments/portfolios/
      method: POST
      auth: true
      docs: Retrieve all portfolios for an existing link.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve portfolios for a link
      request:
        body: root.StandardRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: RetrievePortfolioRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: root.InvestmentsPortfolio
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              name: Investimento
              type: FIXED_INCOME
              balance_type: ASSET
              balance_gross: 76000
              balance_net: 77370.69
              currency: BRL
              instruments:
                - id: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  public_id:
                    - type: isin
                      value: 435-3354.3333
                  type: BOND
                  subtype: CBD
                  name: CBD DIGITAL ESPECIAL
                  currency: USD
                  price: 10.41
                  quantity: 27.46
                  balance_gross: 100.09
                  balance_net: 99.09
                  average_acquisition_price: 10.01
                  profit: 3.08
                  open_date: '2021-08-10'
                  redemption_conditions:
                    - type: due_date
                      value: 12-02-2023
                  fees:
                    - type: OPERATION_FEE
                      value: 123.09
                  interest_rates:
                    - type: yearly
                      value: 11.31
                      index: CDI
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve Investment Portfolios

                client.InvestmentsPortfolios.create('link-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.investments_portfolio.retrieve(
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.investmentsPortfolios.retrieve('linkID')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchPortfolio:
      path: /investments/portfolios/
      method: PATCH
      auth: true
      docs: >-
        Used to resume a portfolio retrieve session that was paused because an
        MFA token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete a portfolios request
      request:
        body: root.PatchBodyWithoutSaveData
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchPortfolioRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: root.InvestmentsPortfolio
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              name: Investimento
              type: FIXED_INCOME
              balance_type: ASSET
              balance_gross: 76000
              balance_net: 77370.69
              currency: BRL
              instruments:
                - id: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  public_id:
                    - type: isin
                      value: 435-3354.3333
                  type: BOND
                  subtype: CBD
                  name: CBD DIGITAL ESPECIAL
                  currency: USD
                  price: 10.41
                  quantity: 27.46
                  balance_gross: 100.09
                  balance_net: 99.09
                  average_acquisition_price: 10.01
                  profit: 3.08
                  open_date: '2021-08-10'
                  redemption_conditions:
                    - type: due_date
                      value: 12-02-2023
                  fees:
                    - type: OPERATION_FEE
                      value: 123.09
                  interest_rates:
                    - type: yearly
                      value: 11.31
                      index: CDI
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume Investment Portfolios

                investments_portfolios = client.InvestmentsPortfolios.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.investments_portfolio.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.investmentsPortfolios.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailPortfolio:
      path: /investments/portfolios/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific portfolio.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `portfolio.id` you want to get detailed information about.
      display-name: Get a portfolio's details
      request:
        name: DetailPortfolioRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.InvestmentsPortfolio
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              name: Investimento
              type: FIXED_INCOME
              balance_type: ASSET
              balance_gross: 76000
              balance_net: 77370.69
              currency: BRL
              instruments:
                - id: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  public_id:
                    - type: isin
                      value: 435-3354.3333
                  type: BOND
                  subtype: CBD
                  name: CBD DIGITAL ESPECIAL
                  currency: USD
                  price: 10.41
                  quantity: 27.46
                  balance_gross: 100.09
                  balance_net: 99.09
                  average_acquisition_price: 10.01
                  profit: 3.08
                  open_date: '2021-08-10'
                  redemption_conditions:
                    - type: due_date
                      value: 12-02-2023
                  fees:
                    - type: OPERATION_FEE
                      value: 123.09
                  interest_rates:
                    - type: yearly
                      value: 11.31
                      index: CDI
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get Investment Portfolio

                client.InvestmentsPortfolios.get('investments-portfolios.id')
            - name: Belvo Ruby SDK
              language: ruby
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                require 'belvo'


                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )


                sandbox.investments_portfolio.detail id:
                'investments-portfolios.id'
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.investmentsPortfolios.detail('investments-portfolios.id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyPortfolio:
      path: /investments/portfolios/{id}/
      method: DELETE
      auth: true
      docs: >-
        Delete a specific investment portfolio and all associated instruments,
        transactions, and owners from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `portfolio.id` that you want to delete.
      display-name: Delete a portfolio
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete Investment Portfolio

                client.InvestmentsPortfolios.delete('investment-portfolio.id')
            - name: Belvo Ruby SDK
              language: ruby
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                require 'belvo'


                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )


                sandbox.investments_portfolio.delete id:
                'investment-portfolio.id'
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.investmentsPortfolios.delete('investment-portfolio.id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Investment Portfolios
docs: >-
  At the moment we only support the following institutions and investment
  products:


  | Institution                     | Portfolio                         |
  Instruments                 |

  | ------------------------------- | --------------------------------- |
  --------------------------- |

  | Banco de Brazil Retail (Brazil) | `FIXED_INCOME`                    |
  `DEPOSIT`                   |

  | Banco Inter Retail (Brazil)     | `FIXED_INCOME`                    |
  `DEPOSIT`                   |

  | Bradesco Retail (Brazil)        | `FIXED_INCOME`, `VARIABLE_INCOME` |
  `DEPOSIT`, `FUND`           |

  | CaixaBank Retail (Brazil)       | `FIXED_INCOME`, `VARIABLE_INCOME` |
  `DEPOSIT`, `FUND`           |

  | Itau Retail (Brazil)            | `FIXED_INCOME`, `VARIABLE_INCOME` |
  `DEPOSIT`, `FUND`, `STOCKS` |

  | Santander Retail (Brazil)       | `FIXED_INCOME`, `VARIABLE_INCOME` |
  `DEPOSIT`, `BOND`, `FUND`   |



  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field         | Available Filters                 |

  | ------------- | --------------------------------- |

  | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

  | `link`        | `=`, `in`                         |


  ```curl cURL

  # Filtering results so that you get the portfolios of one link:

  https://sandbox.belvo.com/investments/portfolios/?link=89c91f42-df34-4c5d-a4f1-6e1e40438af4


  ```

  ```javascript Node

  // Filtering results so that you get the portfolios of one link:

  client. investmentsPortfolios.list({
    filters: {
      link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get the portfolios of one link:

  client.
  InvestmentsPortfolios.list(link="89c91f42-df34-4c5d-a4f1-6e1e40438af4")


  ```

  ```ruby Ruby

  # Filtering results so that you get the portfolios of one link:

  client. investments_portfolio.list(params: {
    link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
  })

  ```
",
    },
    "invoices.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "An **invoice** is the representation of an electronic invoice, that can be received or sent, by a business or an individual and has been uploaded to the fiscal institution's website. Multiple INFLOW (invoice received) and OUTFLOW (invoice sent) invoices can be retrieved inside each link coming from a fiscal institution.

### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field                    | Available Filters                      |
| ------------------------ | -------------------------------------- |
| `created_at `            | `gt`, `gte`, `lt`, `lte`, `range`      |
| `id`                     | `=`, `in`                              |
| `invoice_date`           | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `invoice_identification` | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `link`                   | `=`, `in`                              |
| `status`                 | `=`, `in`                              |
| `total_amount`           | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `type`                   | `=`, `in`                              |

```curl cURL
# Filtering results so that you get Tax Returns from one link:
https://sandbox.belvo.com/api/invoices/?link=link-id

# Filtering results so that you get Tax Returns from two links 
# and are of type normal and their status is vigente:
https://sandbox.belvo.com/api/invoices/?link__in=link-id1,link-id2&informacion_general__tipo_declaracion=Normal&status=vigente
```
```javascript Node
//  Filtering results so that you get the Tax Returns from one link:
client.invoices.list({
  filters: {
    link: "link-id"
  }
})

//  Filtering results so that you get the Tax Returns from two links
// and are of type normal and their status is vigente:
client.invoices.list({
  filters: {
    link__in: "link-id-1, link-id-2",
    informacion_general__tipo_declaracion: "Normal",
    status: "vigente"
  }
})

```
```python Python
# Filtering results so that you get the Tax Return from one link:
client.invoices.list(link="link-id")

# Filtering results so that you get the Tax Returns from two links
# # and are of type normal and their status is vigente:
client.invoices.list(link__in="link-id1,link-id2", informacion_general__tipo_declaracion="Normal", status="vigente")
```
```ruby Ruby
# Filtering results so that you get the Tax Return from one link:
client.invoices.list(params: {
  link: "link-id"
})


# Filtering results so that you get the Tax Returns from two links
# and are of type normal and their status is vigente:
client.invoices.list(params: {
  link__in: "link-id1, link-id1",
  informacion_general__tipo_declaracion: "Normal",
  status: "vigente"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Invoices",
          "endpoints": {
            "DestroyInvoice": {
              "auth": true,
              "display-name": "Delete an invoice",
              "docs": "Delete a specific invoice from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/invoices/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete Invoice
client.Invoices.delete('invoice-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.delete id: 'invoice-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.delete('invoiceId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/invoices/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `invoice.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailInvoice": {
              "auth": true,
              "display-name": "Get an invoice's details",
              "docs": "Get the details of a specific invoice.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

invoice = client.Invoices.detail('invoice-id'):
pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.detail id: 'invoice-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.detail('invoiceId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Ingreso",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "cancelation_status": "cancelation_status",
                      "cancelation_update_date": "2019-12-02",
                      "certification_authority": "FGV330542BG6",
                      "certification_date": "2020-12-24",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "currency": "MXN",
                      "discount_amount": 0,
                      "exchange_rate": 1,
                      "folio": "28",
                      "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                      "invoice_date": "2020-12-24",
                      "invoice_details": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "description": "Servicios de mensajer√≠a.",
                          "pre_tax_amount": 25,
                          "product_identification": "78102206",
                          "quantity": 1,
                          "retained_taxes": [
                            {
                              "retained_tax_amount": 209.79,
                              "tax": "ISR",
                              "tax_percentage": 10,
                            },
                          ],
                          "tax_amount": 4,
                          "tax_percentage": 16,
                          "tax_type": "tax_type",
                          "total_amount": 29,
                          "unit_amount": 25,
                          "unit_code": "E48",
                          "unit_description": "Unidad de servicio",
                        },
                      ],
                      "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                      "invoice_type": "Ingreso",
                      "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                      "payment_method": "PUE",
                      "payment_method_description": "payment_method_description",
                      "payment_type": "04",
                      "payment_type_description": "payment_type_description",
                      "payments": [
                        {
                          "amount": 8000.5,
                          "beneficiary_account_number": "12343453245633",
                          "beneficiary_rfc": "BNM840515VB1",
                          "currency": "BRL",
                          "date": "2020-03-17T12:00:00Z",
                          "exchange_rate": "3.75",
                          "operation_number": "831840",
                          "payer_account_number": "13343663245699",
                          "payer_bank_name": "CITI BANAMEX",
                          "payer_rfc": "BKJM840515VB1",
                          "payment_type": "03",
                          "related_documents": [
                            {
                              "amount_paid": 8000,
                              "currency": "MXN",
                              "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                              "outstanding_balance": 10877.84,
                              "partiality_number": 1,
                              "payment_method": "PPD",
                              "previous_balance": 18877.84,
                            },
                          ],
                        },
                      ],
                      "payroll": {
                        "amount": 20400.1,
                        "collected_at": "2019-09-27T13:01:41Z",
                        "date_from": "2018-07-01",
                        "date_to": "2018-07-31",
                        "days": 30,
                        "payment_date": "payment_date",
                        "type": "O",
                        "version": "1.2",
                      },
                      "place_of_issue": "11000",
                      "receiver_blacklist_status": "receiver_blacklist_status",
                      "receiver_id": "MNMK3203409H1",
                      "receiver_name": "ACNE SA DE CV",
                      "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "sender_blacklist_status": "sender_blacklist_status",
                      "sender_id": "GHTF980303F7",
                      "sender_name": "Roberto Martinez Diaz",
                      "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "status": "Vigente",
                      "subtotal_amount": 25,
                      "tax_amount": 4,
                      "total_amount": 29,
                      "type": "OUTFLOW",
                      "usage": "G03",
                      "version": "3.3",
                      "warnings": {
                        "code": "warning_code",
                        "message": "warning message",
                      },
                      "xml": "=XML-STRING=",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

invoice = client.Invoices.detail('invoice-id'):
pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.detail id: 'invoice-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.detail('invoiceId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Pago",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "cancelation_status": "cancelation_status",
                      "cancelation_update_date": "2019-12-02",
                      "certification_authority": "FGV330542BG6",
                      "certification_date": "2020-12-24",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "currency": "MXN",
                      "discount_amount": 0,
                      "exchange_rate": 0.052,
                      "folio": "28",
                      "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                      "invoice_date": "2020-12-24",
                      "invoice_details": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "description": "Pago",
                          "pre_tax_amount": 0,
                          "product_identification": "84111506",
                          "quantity": 1,
                          "retained_taxes": [
                            {
                              "retained_tax_amount": 209.79,
                              "tax": "ISR",
                              "tax_percentage": 10,
                            },
                          ],
                          "tax_amount": 0,
                          "tax_percentage": 0,
                          "tax_type": "tax_type",
                          "total_amount": 0,
                          "unit_amount": 0,
                          "unit_code": "ACT",
                          "unit_description": "Unidad de servicio",
                        },
                      ],
                      "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                      "invoice_type": "Pago",
                      "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                      "payment_method_description": "payment_method_description",
                      "payment_type": "99",
                      "payment_type_description": "payment_type_description",
                      "payments": [
                        {
                          "amount": 8000.5,
                          "beneficiary_account_number": "12343453245633",
                          "beneficiary_rfc": "BNM840515VB1",
                          "currency": "BRL",
                          "date": "2020-03-17T12:00:00Z",
                          "exchange_rate": "3.75",
                          "operation_number": "831840",
                          "payer_account_number": "13343663245699",
                          "payer_bank_name": "CITI BANAMEX",
                          "payer_rfc": "BKJM840515VB1",
                          "payment_type": "03",
                          "related_documents": [
                            {
                              "amount_paid": 8000,
                              "currency": "MXN",
                              "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                              "outstanding_balance": 10877.84,
                              "partiality_number": 1,
                              "payment_method": "PPD",
                              "previous_balance": 18877.84,
                            },
                          ],
                        },
                      ],
                      "payroll": {
                        "amount": 20400.1,
                        "collected_at": "2019-09-27T13:01:41Z",
                        "date_from": "2018-07-01",
                        "date_to": "2018-07-31",
                        "days": 30,
                        "payment_date": "payment_date",
                        "type": "O",
                        "version": "1.2",
                      },
                      "place_of_issue": "11000",
                      "receiver_blacklist_status": "receiver_blacklist_status",
                      "receiver_id": "MNMK3203409H1",
                      "receiver_name": "ACNE SA DE CV",
                      "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "sender_blacklist_status": "sender_blacklist_status",
                      "sender_id": "GHTF980303F7",
                      "sender_name": "Roberto Martinez Diaz",
                      "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "status": "Vigente",
                      "subtotal_amount": 0,
                      "tax_amount": 0,
                      "total_amount": 0,
                      "type": "OUTFLOW",
                      "usage": "P01",
                      "version": "3.3",
                      "warnings": {
                        "code": "warning_code",
                        "message": "warning message",
                      },
                      "xml": "=XML-STRING=",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

invoice = client.Invoices.detail('invoice-id'):
pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.detail id: 'invoice-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.detail('invoiceId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Nomina",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "cancelation_status": "cancelation_status",
                      "cancelation_update_date": "2019-12-02",
                      "certification_authority": "FGV330542BG6",
                      "certification_date": "2020-12-24",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "currency": "MXN",
                      "discount_amount": 5000,
                      "exchange_rate": 1,
                      "folio": "28",
                      "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                      "invoice_date": "2020-12-24",
                      "invoice_details": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "description": "Pago de n√≥mina",
                          "pre_tax_amount": 20400.1,
                          "product_identification": "84111505",
                          "quantity": 1,
                          "retained_taxes": [
                            {
                              "retained_tax_amount": 209.79,
                              "tax": "ISR",
                              "tax_percentage": 10,
                            },
                          ],
                          "tax_amount": 0,
                          "tax_percentage": 0,
                          "tax_type": "tax_type",
                          "total_amount": 20400.1,
                          "unit_amount": 20400.1,
                          "unit_code": "ACT",
                          "unit_description": "Unidad de servicio",
                        },
                      ],
                      "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                      "invoice_type": "N√≥mina",
                      "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                      "payment_method": "PUE",
                      "payment_method_description": "payment_method_description",
                      "payment_type": "99",
                      "payment_type_description": "payment_type_description",
                      "payments": [
                        {
                          "amount": 8000.5,
                          "beneficiary_account_number": "12343453245633",
                          "beneficiary_rfc": "BNM840515VB1",
                          "currency": "BRL",
                          "date": "2020-03-17T12:00:00Z",
                          "exchange_rate": "3.75",
                          "operation_number": "831840",
                          "payer_account_number": "13343663245699",
                          "payer_bank_name": "CITI BANAMEX",
                          "payer_rfc": "BKJM840515VB1",
                          "payment_type": "03",
                          "related_documents": [
                            {
                              "amount_paid": 8000,
                              "currency": "MXN",
                              "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                              "outstanding_balance": 10877.84,
                              "partiality_number": 1,
                              "payment_method": "PPD",
                              "previous_balance": 18877.84,
                            },
                          ],
                        },
                      ],
                      "payroll": {
                        "amount": 20400.1,
                        "collected_at": "2022-02-09T08:45:50Z",
                        "date_from": "2020-12-01",
                        "date_to": "2020-12-31",
                        "days": 30,
                        "payment_date": "2020-12-24",
                        "type": "O",
                        "version": "1.2",
                      },
                      "place_of_issue": "11000",
                      "receiver_blacklist_status": "receiver_blacklist_status",
                      "receiver_id": "MNMK3203409H1",
                      "receiver_name": "Roberto Martinez Diaz",
                      "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "sender_blacklist_status": "sender_blacklist_status",
                      "sender_id": "GHTF980303F7",
                      "sender_name": "ACNE SA DE CV",
                      "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "status": "Vigente",
                      "subtotal_amount": 20400.1,
                      "tax_amount": 0,
                      "total_amount": 15400.1,
                      "type": "INFLOW",
                      "usage": "P01",
                      "version": "3.3",
                      "warnings": {
                        "code": "warning_code",
                        "message": "warning message",
                      },
                      "xml": "=XML-STRING=",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

invoice = client.Invoices.detail('invoice-id'):
pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.detail id: 'invoice-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.detail('invoiceId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Egreso",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "cancelation_status": "cancelation_status",
                      "cancelation_update_date": "2019-12-02",
                      "certification_authority": "FGV330542BG6",
                      "certification_date": "2020-12-24",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "currency": "MXN",
                      "discount_amount": 0,
                      "exchange_rate": 1,
                      "folio": "28",
                      "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                      "invoice_date": "2020-12-24",
                      "invoice_details": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "description": "Reembolso del servicio",
                          "pre_tax_amount": 25,
                          "product_identification": "78111500",
                          "quantity": 1,
                          "retained_taxes": [
                            {
                              "retained_tax_amount": 209.79,
                              "tax": "ISR",
                              "tax_percentage": 10,
                            },
                          ],
                          "tax_amount": 4,
                          "tax_percentage": 16,
                          "tax_type": "tax_type",
                          "total_amount": 29,
                          "unit_amount": 25,
                          "unit_code": "E48",
                          "unit_description": "Unidad de servicio",
                        },
                      ],
                      "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                      "invoice_type": "Egreso",
                      "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                      "payment_method": "PUE",
                      "payment_method_description": "payment_method_description",
                      "payment_type": "04",
                      "payment_type_description": "payment_type_description",
                      "payments": [
                        {
                          "amount": 8000.5,
                          "beneficiary_account_number": "12343453245633",
                          "beneficiary_rfc": "BNM840515VB1",
                          "currency": "BRL",
                          "date": "2020-03-17T12:00:00Z",
                          "exchange_rate": "3.75",
                          "operation_number": "831840",
                          "payer_account_number": "13343663245699",
                          "payer_bank_name": "CITI BANAMEX",
                          "payer_rfc": "BKJM840515VB1",
                          "payment_type": "03",
                          "related_documents": [
                            {
                              "amount_paid": 8000,
                              "currency": "MXN",
                              "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                              "outstanding_balance": 10877.84,
                              "partiality_number": 1,
                              "payment_method": "PPD",
                              "previous_balance": 18877.84,
                            },
                          ],
                        },
                      ],
                      "payroll": {
                        "amount": 20400.1,
                        "collected_at": "2019-09-27T13:01:41Z",
                        "date_from": "2018-07-01",
                        "date_to": "2018-07-31",
                        "days": 30,
                        "payment_date": "payment_date",
                        "type": "O",
                        "version": "1.2",
                      },
                      "place_of_issue": "11000",
                      "receiver_blacklist_status": "receiver_blacklist_status",
                      "receiver_id": "MNMK3203409H1",
                      "receiver_name": "ACNE SA DE CV",
                      "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "sender_blacklist_status": "sender_blacklist_status",
                      "sender_id": "GHTF980303F7",
                      "sender_name": "Roberto Martinez Diaz",
                      "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "status": "Vigente",
                      "subtotal_amount": 25,
                      "tax_amount": 4,
                      "total_amount": 29,
                      "type": "INFLOW",
                      "usage": "G03",
                      "version": "3.3",
                      "warnings": {
                        "code": "warning_code",
                        "message": "warning message",
                      },
                      "xml": "=XML-STRING=",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

invoice = client.Invoices.detail('invoice-id'):
pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.detail id: 'invoice-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.detail('invoiceId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Traslado",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "cancelation_status": "cancelation_status",
                      "cancelation_update_date": "2019-12-02",
                      "certification_authority": "FGV330542BG6",
                      "certification_date": "2020-12-24",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "currency": "MXN",
                      "discount_amount": 0,
                      "exchange_rate": 1,
                      "folio": "28",
                      "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                      "invoice_date": "2020-12-24",
                      "invoice_details": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "description": "FLETE",
                          "pre_tax_amount": 21000,
                          "product_identification": "78101802",
                          "quantity": 1,
                          "retained_taxes": [
                            {
                              "retained_tax_amount": 209.79,
                              "tax": "ISR",
                              "tax_percentage": 10,
                            },
                          ],
                          "tax_amount": 0,
                          "tax_percentage": 16,
                          "tax_type": "tax_type",
                          "total_amount": 21000,
                          "unit_amount": 21000,
                          "unit_code": "E48",
                          "unit_description": "Unidad de servicio",
                        },
                      ],
                      "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                      "invoice_type": "Traslado",
                      "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                      "payment_method_description": "payment_method_description",
                      "payment_type": "99",
                      "payment_type_description": "payment_type_description",
                      "payments": [
                        {
                          "amount": 8000.5,
                          "beneficiary_account_number": "12343453245633",
                          "beneficiary_rfc": "BNM840515VB1",
                          "currency": "BRL",
                          "date": "2020-03-17T12:00:00Z",
                          "exchange_rate": "3.75",
                          "operation_number": "831840",
                          "payer_account_number": "13343663245699",
                          "payer_bank_name": "CITI BANAMEX",
                          "payer_rfc": "BKJM840515VB1",
                          "payment_type": "03",
                          "related_documents": [
                            {
                              "amount_paid": 8000,
                              "currency": "MXN",
                              "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                              "outstanding_balance": 10877.84,
                              "partiality_number": 1,
                              "payment_method": "PPD",
                              "previous_balance": 18877.84,
                            },
                          ],
                        },
                      ],
                      "payroll": {
                        "amount": 20400.1,
                        "collected_at": "2019-09-27T13:01:41Z",
                        "date_from": "2018-07-01",
                        "date_to": "2018-07-31",
                        "days": 30,
                        "payment_date": "payment_date",
                        "type": "O",
                        "version": "1.2",
                      },
                      "place_of_issue": "11000",
                      "receiver_blacklist_status": "receiver_blacklist_status",
                      "receiver_id": "MNMK3203409H1",
                      "receiver_name": "CARGOS S.A. DE C.V.",
                      "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "sender_blacklist_status": "sender_blacklist_status",
                      "sender_id": "GHTF980303F7",
                      "sender_name": "ACNE SA DE CV",
                      "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                      "status": "Vigente",
                      "subtotal_amount": 0,
                      "tax_amount": 0,
                      "total_amount": 0,
                      "type": "INFLOW",
                      "usage": "G03",
                      "version": "3.3",
                      "warnings": {
                        "code": "warning_code",
                        "message": "warning message",
                      },
                      "xml": "=XML-STRING=",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/invoices/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `invoice.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailInvoiceRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "DetailInvoiceResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListInvoices": {
              "auth": true,
              "display-name": "List all invoices",
              "docs": "Get a paginated list of all existing invoices in your Belvo account. By default, we return 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.list():
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Ingreso",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "id__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "invoice_date": "2022-05-05",
                    "invoice_date__gt": "2022-05-06",
                    "invoice_date__gte": "2022-05-04",
                    "invoice_date__lt": "2022-03-02",
                    "invoice_date__lte": "2022-03-01",
                    "invoice_date__range": "2022-03-01,2022-05-06",
                    "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                    "invoice_identification__in": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "status": "Vigente",
                    "status__in": "Vigente,Cancelado",
                    "total_amount": "1000.00",
                    "total_amount__gt": "520.00",
                    "total_amount__gte": "519.00",
                    "total_amount__lt": "540.00",
                    "total_amount__lte": "541.00",
                    "total_amount__range": "519.00,541.00",
                    "type": "OUTFLOW",
                    "type__in": "OUTFLOW,INFLOW",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "cancelation_status": "cancelation_status",
                          "cancelation_update_date": "2019-12-02",
                          "certification_authority": "FGV330542BG6",
                          "certification_date": "2020-12-24",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "currency": "MXN",
                          "discount_amount": 0,
                          "exchange_rate": 1,
                          "folio": "28",
                          "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                          "invoice_date": "2020-12-24",
                          "invoice_details": [
                            {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "description": "Servicios de mensajer√≠a.",
                              "pre_tax_amount": 25,
                              "product_identification": "78102206",
                              "quantity": 1,
                              "retained_taxes": [
                                {
                                  "retained_tax_amount": 209.79,
                                  "tax": "ISR",
                                  "tax_percentage": 10,
                                },
                              ],
                              "tax_amount": 4,
                              "tax_percentage": 16,
                              "total_amount": 29,
                              "unit_amount": 25,
                              "unit_code": "E48",
                              "unit_description": "Unidad de servicio",
                            },
                          ],
                          "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                          "invoice_type": "Ingreso",
                          "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                          "payment_method": "PUE",
                          "payment_method_description": "payment_method_description",
                          "payment_type": "04",
                          "payment_type_description": "payment_type_description",
                          "payments": [
                            {
                              "amount": 8000.5,
                              "beneficiary_account_number": "12343453245633",
                              "currency": "BRL",
                              "date": "2020-03-17T12:00:00Z",
                              "exchange_rate": "3.75",
                              "operation_number": "831840",
                              "payer_account_number": "13343663245699",
                              "payer_bank_name": "CITI BANAMEX",
                              "payer_rfc": "BKJM840515VB1",
                              "payment_type": "03",
                              "related_documents": [
                                {
                                  "amount_paid": 8000,
                                  "currency": "MXN",
                                  "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                  "outstanding_balance": 10877.84,
                                  "partiality_number": 1,
                                  "payment_method": "PPD",
                                  "previous_balance": 18877.84,
                                },
                              ],
                            },
                          ],
                          "payroll": {
                            "amount": 20400.1,
                            "date_from": "2018-07-01",
                            "date_to": "2018-07-31",
                            "days": 30,
                            "payment_date": "payment_date",
                            "type": "O",
                            "version": "1.2",
                          },
                          "place_of_issue": "11000",
                          "receiver_blacklist_status": "receiver_blacklist_status",
                          "receiver_id": "MNMK3203409H1",
                          "receiver_name": "ACNE SA DE CV",
                          "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "sender_blacklist_status": "sender_blacklist_status",
                          "sender_id": "GHTF980303F7",
                          "sender_name": "Roberto Martinez Diaz",
                          "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "status": "Vigente",
                          "subtotal_amount": 25,
                          "tax_amount": 4,
                          "total_amount": 29,
                          "type": "OUTFLOW",
                          "usage": "G03",
                          "version": "3.3",
                          "warnings": {
                            "code": "warning_code",
                            "message": "warning message",
                          },
                          "xml": "=XML-STRING=",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.list():
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Pago",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "id__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "invoice_date": "2022-05-05",
                    "invoice_date__gt": "2022-05-06",
                    "invoice_date__gte": "2022-05-04",
                    "invoice_date__lt": "2022-03-02",
                    "invoice_date__lte": "2022-03-01",
                    "invoice_date__range": "2022-03-01,2022-05-06",
                    "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                    "invoice_identification__in": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "status": "Vigente",
                    "status__in": "Vigente,Cancelado",
                    "total_amount": "1000.00",
                    "total_amount__gt": "520.00",
                    "total_amount__gte": "519.00",
                    "total_amount__lt": "540.00",
                    "total_amount__lte": "541.00",
                    "total_amount__range": "519.00,541.00",
                    "type": "OUTFLOW",
                    "type__in": "OUTFLOW,INFLOW",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "cancelation_status": "cancelation_status",
                          "cancelation_update_date": "2019-12-02",
                          "certification_authority": "FGV330542BG6",
                          "certification_date": "2020-12-24",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "currency": "MXN",
                          "discount_amount": 0,
                          "exchange_rate": 0.052,
                          "folio": "28",
                          "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                          "invoice_date": "2020-12-24",
                          "invoice_details": [
                            {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "description": "Pago",
                              "pre_tax_amount": 0,
                              "product_identification": "84111506",
                              "quantity": 1,
                              "retained_taxes": [
                                {
                                  "retained_tax_amount": 209.79,
                                  "tax": "ISR",
                                  "tax_percentage": 10,
                                },
                              ],
                              "tax_amount": 0,
                              "tax_percentage": 0,
                              "total_amount": 0,
                              "unit_amount": 0,
                              "unit_code": "ACT",
                              "unit_description": "Unidad de servicio",
                            },
                          ],
                          "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                          "invoice_type": "Pago",
                          "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                          "payment_method_description": "payment_method_description",
                          "payment_type": "99",
                          "payment_type_description": "payment_type_description",
                          "payments": [
                            {
                              "amount": 8000.5,
                              "beneficiary_account_number": "12343453245633",
                              "beneficiary_rfc": "BNM840515VB1",
                              "currency": "BRL",
                              "date": "2020-03-17T12:00:00Z",
                              "exchange_rate": "3.75",
                              "operation_number": "831840",
                              "payer_account_number": "13343663245699",
                              "payer_bank_name": "CITI BANAMEX",
                              "payer_rfc": "BKJM840515VB1",
                              "payment_type": "03",
                              "related_documents": [
                                {
                                  "amount_paid": 8000,
                                  "currency": "MXN",
                                  "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                  "outstanding_balance": 10877.84,
                                  "partiality_number": 1,
                                  "payment_method": "PPD",
                                  "previous_balance": 18877.84,
                                },
                              ],
                            },
                          ],
                          "payroll": {
                            "amount": 20400.1,
                            "date_from": "2018-07-01",
                            "date_to": "2018-07-31",
                            "days": 30,
                            "payment_date": "payment_date",
                            "type": "O",
                            "version": "1.2",
                          },
                          "place_of_issue": "11000",
                          "receiver_blacklist_status": "receiver_blacklist_status",
                          "receiver_id": "MNMK3203409H1",
                          "receiver_name": "ACNE SA DE CV",
                          "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "sender_blacklist_status": "sender_blacklist_status",
                          "sender_id": "GHTF980303F7",
                          "sender_name": "Roberto Martinez Diaz",
                          "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "status": "Vigente",
                          "subtotal_amount": 0,
                          "tax_amount": 0,
                          "total_amount": 0,
                          "type": "OUTFLOW",
                          "usage": "P01",
                          "version": "3.3",
                          "warnings": {
                            "code": "warning_code",
                            "message": "warning message",
                          },
                          "xml": "=XML-STRING=",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.list():
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Nomina",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "id__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "invoice_date": "2022-05-05",
                    "invoice_date__gt": "2022-05-06",
                    "invoice_date__gte": "2022-05-04",
                    "invoice_date__lt": "2022-03-02",
                    "invoice_date__lte": "2022-03-01",
                    "invoice_date__range": "2022-03-01,2022-05-06",
                    "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                    "invoice_identification__in": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "status": "Vigente",
                    "status__in": "Vigente,Cancelado",
                    "total_amount": "1000.00",
                    "total_amount__gt": "520.00",
                    "total_amount__gte": "519.00",
                    "total_amount__lt": "540.00",
                    "total_amount__lte": "541.00",
                    "total_amount__range": "519.00,541.00",
                    "type": "OUTFLOW",
                    "type__in": "OUTFLOW,INFLOW",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "cancelation_status": "cancelation_status",
                          "cancelation_update_date": "2019-12-02",
                          "certification_authority": "FGV330542BG6",
                          "certification_date": "2020-12-24",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "currency": "MXN",
                          "discount_amount": 5000,
                          "exchange_rate": 1,
                          "folio": "28",
                          "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                          "invoice_date": "2020-12-24",
                          "invoice_details": [
                            {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "description": "Pago de n√≥mina",
                              "pre_tax_amount": 20400.1,
                              "product_identification": "84111505",
                              "quantity": 1,
                              "retained_taxes": [
                                {
                                  "retained_tax_amount": 209.79,
                                  "tax": "ISR",
                                  "tax_percentage": 10,
                                },
                              ],
                              "tax_amount": 0,
                              "tax_percentage": 0,
                              "total_amount": 20400.1,
                              "unit_amount": 20400.1,
                              "unit_code": "ACT",
                              "unit_description": "Unidad de servicio",
                            },
                          ],
                          "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                          "invoice_type": "N√≥mina",
                          "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                          "payment_method": "PUE",
                          "payment_method_description": "payment_method_description",
                          "payment_type": "99",
                          "payment_type_description": "payment_type_description",
                          "payments": [
                            {
                              "amount": 8000.5,
                              "beneficiary_account_number": "12343453245633",
                              "currency": "BRL",
                              "date": "2020-03-17T12:00:00Z",
                              "exchange_rate": "3.75",
                              "operation_number": "831840",
                              "payer_account_number": "13343663245699",
                              "payer_bank_name": "CITI BANAMEX",
                              "payer_rfc": "BKJM840515VB1",
                              "payment_type": "03",
                              "related_documents": [
                                {
                                  "amount_paid": 8000,
                                  "currency": "MXN",
                                  "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                  "outstanding_balance": 10877.84,
                                  "partiality_number": 1,
                                  "payment_method": "PPD",
                                  "previous_balance": 18877.84,
                                },
                              ],
                            },
                          ],
                          "payroll": {
                            "amount": 20400.1,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "date_from": "2020-12-01",
                            "date_to": "2020-12-31",
                            "days": 30,
                            "payment_date": "2020-12-24",
                            "type": "O",
                            "version": "1.2",
                          },
                          "place_of_issue": "11000",
                          "receiver_blacklist_status": "receiver_blacklist_status",
                          "receiver_id": "MNMK3203409H1",
                          "receiver_name": "Roberto Martinez Diaz",
                          "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "sender_blacklist_status": "sender_blacklist_status",
                          "sender_id": "GHTF980303F7",
                          "sender_name": "ACNE SA DE CV",
                          "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "status": "Vigente",
                          "subtotal_amount": 20400.1,
                          "tax_amount": 0,
                          "total_amount": 15400.1,
                          "type": "INFLOW",
                          "usage": "P01",
                          "version": "3.3",
                          "warnings": {
                            "code": "warning_code",
                            "message": "warning message",
                          },
                          "xml": "=XML-STRING=",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.list():
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Egreso",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "id__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "invoice_date": "2022-05-05",
                    "invoice_date__gt": "2022-05-06",
                    "invoice_date__gte": "2022-05-04",
                    "invoice_date__lt": "2022-03-02",
                    "invoice_date__lte": "2022-03-01",
                    "invoice_date__range": "2022-03-01,2022-05-06",
                    "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                    "invoice_identification__in": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "status": "Vigente",
                    "status__in": "Vigente,Cancelado",
                    "total_amount": "1000.00",
                    "total_amount__gt": "520.00",
                    "total_amount__gte": "519.00",
                    "total_amount__lt": "540.00",
                    "total_amount__lte": "541.00",
                    "total_amount__range": "519.00,541.00",
                    "type": "OUTFLOW",
                    "type__in": "OUTFLOW,INFLOW",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "cancelation_status": "cancelation_status",
                          "cancelation_update_date": "2019-12-02",
                          "certification_authority": "FGV330542BG6",
                          "certification_date": "2020-12-24",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "currency": "MXN",
                          "discount_amount": 0,
                          "exchange_rate": 1,
                          "folio": "28",
                          "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                          "invoice_date": "2020-12-24",
                          "invoice_details": [
                            {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "description": "Reembolso del servicio",
                              "pre_tax_amount": 25,
                              "product_identification": "78111500",
                              "quantity": 1,
                              "retained_taxes": [
                                {
                                  "retained_tax_amount": 209.79,
                                  "tax": "ISR",
                                  "tax_percentage": 10,
                                },
                              ],
                              "tax_amount": 4,
                              "tax_percentage": 16,
                              "total_amount": 29,
                              "unit_amount": 25,
                              "unit_code": "E48",
                              "unit_description": "Unidad de servicio",
                            },
                          ],
                          "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                          "invoice_type": "Egreso",
                          "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                          "payment_method": "PUE",
                          "payment_method_description": "payment_method_description",
                          "payment_type": "04",
                          "payment_type_description": "payment_type_description",
                          "payments": [
                            {
                              "amount": 8000.5,
                              "beneficiary_account_number": "12343453245633",
                              "currency": "BRL",
                              "date": "2020-03-17T12:00:00Z",
                              "exchange_rate": "3.75",
                              "operation_number": "831840",
                              "payer_account_number": "13343663245699",
                              "payer_bank_name": "CITI BANAMEX",
                              "payer_rfc": "BKJM840515VB1",
                              "payment_type": "03",
                              "related_documents": [
                                {
                                  "amount_paid": 8000,
                                  "currency": "MXN",
                                  "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                  "outstanding_balance": 10877.84,
                                  "partiality_number": 1,
                                  "payment_method": "PPD",
                                  "previous_balance": 18877.84,
                                },
                              ],
                            },
                          ],
                          "payroll": {
                            "amount": 20400.1,
                            "date_from": "2018-07-01",
                            "date_to": "2018-07-31",
                            "days": 30,
                            "payment_date": "payment_date",
                            "type": "O",
                            "version": "1.2",
                          },
                          "place_of_issue": "11000",
                          "receiver_blacklist_status": "receiver_blacklist_status",
                          "receiver_id": "MNMK3203409H1",
                          "receiver_name": "ACNE SA DE CV",
                          "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "sender_blacklist_status": "sender_blacklist_status",
                          "sender_id": "GHTF980303F7",
                          "sender_name": "Roberto Martinez Diaz",
                          "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "status": "Vigente",
                          "subtotal_amount": 25,
                          "tax_amount": 4,
                          "total_amount": 29,
                          "type": "INFLOW",
                          "usage": "G03",
                          "version": "3.3",
                          "warnings": {
                            "code": "warning_code",
                            "message": "warning message",
                          },
                          "xml": "=XML-STRING=",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/invoices/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.list():
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Traslado",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "id__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "invoice_date": "2022-05-05",
                    "invoice_date__gt": "2022-05-06",
                    "invoice_date__gte": "2022-05-04",
                    "invoice_date__lt": "2022-03-02",
                    "invoice_date__lte": "2022-03-01",
                    "invoice_date__range": "2022-03-01,2022-05-06",
                    "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                    "invoice_identification__in": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "status": "Vigente",
                    "status__in": "Vigente,Cancelado",
                    "total_amount": "1000.00",
                    "total_amount__gt": "520.00",
                    "total_amount__gte": "519.00",
                    "total_amount__lt": "540.00",
                    "total_amount__lte": "541.00",
                    "total_amount__range": "519.00,541.00",
                    "type": "OUTFLOW",
                    "type__in": "OUTFLOW,INFLOW",
                  },
                  "response": {
                    "body": {
                      "count": 110,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "cancelation_status": "cancelation_status",
                          "cancelation_update_date": "2019-12-02",
                          "certification_authority": "FGV330542BG6",
                          "certification_date": "2020-12-24",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "currency": "MXN",
                          "discount_amount": 0,
                          "exchange_rate": 1,
                          "folio": "28",
                          "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                          "invoice_date": "2020-12-24",
                          "invoice_details": [
                            {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "description": "FLETE",
                              "pre_tax_amount": 21000,
                              "product_identification": "78101802",
                              "quantity": 1,
                              "retained_taxes": [
                                {
                                  "retained_tax_amount": 209.79,
                                  "tax": "ISR",
                                  "tax_percentage": 10,
                                },
                              ],
                              "tax_amount": 0,
                              "tax_percentage": 16,
                              "total_amount": 21000,
                              "unit_amount": 21000,
                              "unit_code": "E48",
                              "unit_description": "Unidad de servicio",
                            },
                          ],
                          "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                          "invoice_type": "Traslado",
                          "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                          "payment_method_description": "payment_method_description",
                          "payment_type": "99",
                          "payment_type_description": "payment_type_description",
                          "payments": [
                            {
                              "amount": 8000.5,
                              "beneficiary_account_number": "12343453245633",
                              "currency": "BRL",
                              "date": "2020-03-17T12:00:00Z",
                              "exchange_rate": "3.75",
                              "operation_number": "831840",
                              "payer_account_number": "13343663245699",
                              "payer_bank_name": "CITI BANAMEX",
                              "payer_rfc": "BKJM840515VB1",
                              "payment_type": "03",
                              "related_documents": [
                                {
                                  "amount_paid": 8000,
                                  "currency": "MXN",
                                  "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                  "outstanding_balance": 10877.84,
                                  "partiality_number": 1,
                                  "payment_method": "PPD",
                                  "previous_balance": 18877.84,
                                },
                              ],
                            },
                          ],
                          "payroll": {
                            "amount": 20400.1,
                            "date_from": "2018-07-01",
                            "date_to": "2018-07-31",
                            "days": 30,
                            "payment_date": "payment_date",
                            "type": "O",
                            "version": "1.2",
                          },
                          "place_of_issue": "11000",
                          "receiver_blacklist_status": "receiver_blacklist_status",
                          "receiver_id": "MNMK3203409H1",
                          "receiver_name": "CARGOS S.A. DE C.V.",
                          "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "sender_blacklist_status": "sender_blacklist_status",
                          "sender_id": "GHTF980303F7",
                          "sender_name": "ACNE SA DE CV",
                          "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                          "status": "Vigente",
                          "subtotal_amount": 0,
                          "tax_amount": 0,
                          "total_amount": 0,
                          "type": "INFLOW",
                          "usage": "G03",
                          "version": "3.3",
                          "warnings": {
                            "code": "warning_code",
                            "message": "warning message",
                          },
                          "xml": "=XML-STRING=",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/invoices/",
              "request": {
                "name": "ListInvoicesRequest",
                "query-parameters": {
                  "created_at__gt": {
                    "docs": "Return invoices that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return invoices that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return invoices that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return invoices that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return invoices that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information only for this `invoice.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information only for these `invoice.id`s.",
                    "type": "optional<string>",
                  },
                  "invoice_date": {
                    "docs": "Return invoices issued exactly on this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "invoice_date__gt": {
                    "docs": "Return invoices issued after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "invoice_date__gte": {
                    "docs": "Return invoices issued on this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "invoice_date__lt": {
                    "docs": "Return balances issued before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "invoice_date__lte": {
                    "docs": "Return balances issued on this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "invoice_date__range": {
                    "docs": "Return invoices issued within this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "invoice_identification": {
                    "docs": "Return an invoice with this ID (as provided by the insitution).",
                    "type": "optional<string>",
                  },
                  "invoice_identification__in": {
                    "docs": "Return invoices with these IDs (as provided by the institution).",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return invoices only for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "status": {
                    "docs": "Return invoices with this status. Can be either `Vigente` (valid) or `Cancelado` (cancelled).",
                    "type": "optional<string>",
                  },
                  "status__in": {
                    "docs": "Return invoices with these statuses. Can be either `Vigente` (valid) or `Cancelado` (cancelled).",
                    "type": "optional<string>",
                  },
                  "total_amount": {
                    "docs": "Return invoices matching exactly this value.",
                    "type": "optional<string>",
                  },
                  "total_amount__gt": {
                    "docs": "Return invoices greater than this value.",
                    "type": "optional<string>",
                  },
                  "total_amount__gte": {
                    "docs": "Return invoices greater than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "total_amount__lt": {
                    "docs": "Return invoices less than this value.",
                    "type": "optional<string>",
                  },
                  "total_amount__lte": {
                    "docs": "Return invoices less than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "total_amount__range": {
                    "docs": "Return invoices between these two values.",
                    "type": "optional<string>",
                  },
                  "type": {
                    "docs": "Return invoices of this type. Can be either `OUTFLOW` or `INFLOW`.",
                    "type": "optional<string>",
                  },
                  "type__in": {
                    "docs": "Return invoices of these types. Can be either `OUTFLOW` or `INFLOW`.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.InvoicesResponsePaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchInvoices": {
              "auth": true,
              "display-name": "Complete an invoices request",
              "docs": "Used to resume an Invoice retrieve session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://api.belvo.com/api/invoices/ \
  -H 'Content-Type: application/json' \
  -H 'Host: api.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "https://api.belvo.com")

# Resume incomes
incomes = client.Invoices.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
)

client.invoices.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'https://api.belvo.com'
);

client.connect()
  .then(function () {
    client.invoices.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "cancelation_status": "cancelation_status",
                        "cancelation_update_date": "2019-12-02",
                        "certification_authority": "CCC333333CC33",
                        "certification_date": "2019-12-01",
                        "collected_at": "2019-09-27T13:01:41Z",
                        "created_at": "2022-02-09T08:45:50Z",
                        "currency": "MXN",
                        "discount_amount": 10,
                        "exchange_rate": 0.052,
                        "folio": "26",
                        "id": "c749315b-eec2-435d-a458-06912878564f",
                        "invoice_date": "2019-12-01",
                        "invoice_details": [
                          {
                            "description": "December 2019 accounting fees",
                            "pre_tax_amount": 400,
                            "product_identification": "84101600",
                            "quantity": 10,
                            "tax_amount": 64,
                            "tax_percentage": 16,
                            "total_amount": 464,
                            "unit_amount": 200,
                            "unit_code": "E48",
                            "unit_description": "Unidad de servicio",
                          },
                        ],
                        "invoice_identification": "A1A1A1A1-2B2B-3C33-D44D-555555E55EE",
                        "invoice_type": "Egreso",
                        "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                        "payment_method": "PUE",
                        "payment_method_description": "payment_method_description",
                        "payment_type": "99",
                        "payment_type_description": "payment_type_description",
                        "payments": [
                          {
                            "amount": 8000.5,
                            "beneficiary_account_number": "12343453245633",
                            "currency": "BRL",
                            "date": "2020-03-17T12:00:00Z",
                            "exchange_rate": "3.75",
                            "operation_number": "831840",
                            "payer_account_number": "13343663245699",
                            "payer_bank_name": "CITI BANAMEX",
                            "payer_rfc": "BKJM840515VB1",
                            "payment_type": "03",
                            "related_documents": [
                              {
                                "amount_paid": 8000,
                                "currency": "MXN",
                                "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                "outstanding_balance": 10877.84,
                                "partiality_number": 1,
                                "payment_method": "PPD",
                                "previous_balance": 18877.84,
                              },
                            ],
                          },
                        ],
                        "payroll": {
                          "amount": 20400.1,
                          "collected_at": "2019-09-27T13:01:41Z",
                          "date_from": "2018-07-01",
                          "date_to": "2018-07-31",
                          "days": 30,
                          "payment_date": "payment_date",
                          "type": "O",
                          "version": "1.2",
                        },
                        "place_of_issue": "01165",
                        "receiver_blacklist_status": "receiver_blacklist_status",
                        "receiver_id": "BBB222222BB22",
                        "receiver_name": "BELVO CORP",
                        "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "sender_blacklist_status": "sender_blacklist_status",
                        "sender_id": "AAA111111AA11",
                        "sender_name": "ACME CORP",
                        "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "status": "Vigente",
                        "subtotal_amount": 400,
                        "tax_amount": 64,
                        "total_amount": 454,
                        "type": "INFLOW",
                        "usage": "P01",
                        "version": "3.3",
                        "warnings": {
                          "code": "sat_xml_limit_reached",
                          "message": "The daily limit for XML downloads set by SAT was reached so this invoice might be missing data. Please check https://tinyurl.com/yydzhy5d for more information on this error.",
                        },
                        "xml": "xml",
                      },
                    ],
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/invoices/",
              "request": {
                "body": "root.PatchBody",
                "content-type": "application/json",
                "name": "PatchInvoicesRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<PatchInvoicesResponseItem>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveInvoices": {
              "auth": true,
              "display-name": "Retrieve invoices for a link",
              "docs": "Retrieve invoice information from a specific fiscal link.
<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info: </strong> You can ask for up to **one** year (365 days) of invoices per request. If you need invoices for more than one year, just make another request. </div>
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/invoices/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "YYYY-MM-DD",
    "date_to": "YYYY-MM-DD",
    "type": "OUTFLOW"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.create('link-id', '2019-07-01', '2019-07-31', 'OUTFLOW'):
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.retrieve(
  link: 'link-id',
  date_from: '2019-07-01',
  date_to: '2019-07-31',
  type: 'OUTFLOW'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Ingreso",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-01-01",
                    "date_to": "2020-02-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                  },
                  "response": {
                    "body": [
                      {
                        "cancelation_status": "cancelation_status",
                        "cancelation_update_date": "2019-12-02",
                        "certification_authority": "FGV330542BG6",
                        "certification_date": "2020-12-24",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "currency": "MXN",
                        "discount_amount": 0,
                        "exchange_rate": 1,
                        "folio": "28",
                        "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                        "invoice_date": "2020-12-24",
                        "invoice_details": [
                          {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "description": "Servicios de mensajer√≠a.",
                            "pre_tax_amount": 25,
                            "product_identification": "78102206",
                            "quantity": 1,
                            "retained_taxes": [
                              {
                                "retained_tax_amount": 209.79,
                                "tax": "ISR",
                                "tax_percentage": 10,
                              },
                            ],
                            "tax_amount": 4,
                            "tax_percentage": 16,
                            "total_amount": 29,
                            "unit_amount": 25,
                            "unit_code": "E48",
                            "unit_description": "Unidad de servicio",
                          },
                        ],
                        "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                        "invoice_type": "Ingreso",
                        "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                        "payment_method": "PUE",
                        "payment_method_description": "payment_method_description",
                        "payment_type": "04",
                        "payment_type_description": "payment_type_description",
                        "payments": [
                          {
                            "amount": 8000.5,
                            "beneficiary_account_number": "12343453245633",
                            "currency": "BRL",
                            "date": "2020-03-17T12:00:00Z",
                            "exchange_rate": "3.75",
                            "operation_number": "831840",
                            "payer_account_number": "13343663245699",
                            "payer_bank_name": "CITI BANAMEX",
                            "payer_rfc": "BKJM840515VB1",
                            "payment_type": "03",
                            "related_documents": [
                              {
                                "amount_paid": 8000,
                                "currency": "MXN",
                                "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                "outstanding_balance": 10877.84,
                                "partiality_number": 1,
                                "payment_method": "PPD",
                                "previous_balance": 18877.84,
                              },
                            ],
                          },
                        ],
                        "payroll": {
                          "amount": 20400.1,
                          "collected_at": "2019-09-27T13:01:41Z",
                          "date_from": "2018-07-01",
                          "date_to": "2018-07-31",
                          "days": 30,
                          "payment_date": "payment_date",
                          "type": "O",
                          "version": "1.2",
                        },
                        "place_of_issue": "11000",
                        "receiver_blacklist_status": "receiver_blacklist_status",
                        "receiver_id": "MNMK3203409H1",
                        "receiver_name": "ACNE SA DE CV",
                        "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "sender_blacklist_status": "sender_blacklist_status",
                        "sender_id": "GHTF980303F7",
                        "sender_name": "Roberto Martinez Diaz",
                        "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "status": "Vigente",
                        "subtotal_amount": 25,
                        "tax_amount": 4,
                        "total_amount": 29,
                        "type": "OUTFLOW",
                        "usage": "G03",
                        "version": "3.3",
                        "warnings": {
                          "code": "warning_code",
                          "message": "warning message",
                        },
                        "xml": "=XML-STRING=",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/invoices/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "YYYY-MM-DD",
    "date_to": "YYYY-MM-DD",
    "type": "OUTFLOW"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.create('link-id', '2019-07-01', '2019-07-31', 'OUTFLOW'):
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.retrieve(
  link: 'link-id',
  date_from: '2019-07-01',
  date_to: '2019-07-31',
  type: 'OUTFLOW'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Pago",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-01-01",
                    "date_to": "2020-02-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                  },
                  "response": {
                    "body": [
                      {
                        "cancelation_status": "cancelation_status",
                        "cancelation_update_date": "2019-12-02",
                        "certification_authority": "FGV330542BG6",
                        "certification_date": "2020-12-24",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "currency": "MXN",
                        "discount_amount": 0,
                        "exchange_rate": 0.052,
                        "folio": "28",
                        "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                        "invoice_date": "2020-12-24",
                        "invoice_details": [
                          {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "description": "Pago",
                            "pre_tax_amount": 0,
                            "product_identification": "84111506",
                            "quantity": 1,
                            "retained_taxes": [
                              {
                                "retained_tax_amount": 209.79,
                                "tax": "ISR",
                                "tax_percentage": 10,
                              },
                            ],
                            "tax_amount": 0,
                            "tax_percentage": 0,
                            "total_amount": 0,
                            "unit_amount": 0,
                            "unit_code": "ACT",
                            "unit_description": "Unidad de servicio",
                          },
                        ],
                        "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                        "invoice_type": "Pago",
                        "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                        "payment_method_description": "payment_method_description",
                        "payment_type": "99",
                        "payment_type_description": "payment_type_description",
                        "payments": [
                          {
                            "amount": 8000.5,
                            "beneficiary_account_number": "12343453245633",
                            "beneficiary_rfc": "BNM840515VB1",
                            "currency": "BRL",
                            "date": "2020-03-17T12:00:00Z",
                            "exchange_rate": "3.75",
                            "operation_number": "831840",
                            "payer_account_number": "13343663245699",
                            "payer_bank_name": "CITI BANAMEX",
                            "payer_rfc": "BKJM840515VB1",
                            "payment_type": "03",
                            "related_documents": [
                              {
                                "amount_paid": 8000,
                                "currency": "MXN",
                                "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                "outstanding_balance": 10877.84,
                                "partiality_number": 1,
                                "payment_method": "PPD",
                                "previous_balance": 18877.84,
                              },
                            ],
                          },
                        ],
                        "payroll": {
                          "amount": 20400.1,
                          "collected_at": "2019-09-27T13:01:41Z",
                          "date_from": "2018-07-01",
                          "date_to": "2018-07-31",
                          "days": 30,
                          "payment_date": "payment_date",
                          "type": "O",
                          "version": "1.2",
                        },
                        "place_of_issue": "11000",
                        "receiver_blacklist_status": "receiver_blacklist_status",
                        "receiver_id": "MNMK3203409H1",
                        "receiver_name": "ACNE SA DE CV",
                        "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "sender_blacklist_status": "sender_blacklist_status",
                        "sender_id": "GHTF980303F7",
                        "sender_name": "Roberto Martinez Diaz",
                        "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "status": "Vigente",
                        "subtotal_amount": 0,
                        "tax_amount": 0,
                        "total_amount": 0,
                        "type": "OUTFLOW",
                        "usage": "P01",
                        "version": "3.3",
                        "warnings": {
                          "code": "warning_code",
                          "message": "warning message",
                        },
                        "xml": "=XML-STRING=",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/invoices/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "YYYY-MM-DD",
    "date_to": "YYYY-MM-DD",
    "type": "OUTFLOW"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.create('link-id', '2019-07-01', '2019-07-31', 'OUTFLOW'):
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.retrieve(
  link: 'link-id',
  date_from: '2019-07-01',
  date_to: '2019-07-31',
  type: 'OUTFLOW'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Nomina",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-01-01",
                    "date_to": "2020-02-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                  },
                  "response": {
                    "body": [
                      {
                        "cancelation_status": "cancelation_status",
                        "cancelation_update_date": "2019-12-02",
                        "certification_authority": "FGV330542BG6",
                        "certification_date": "2020-12-24",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "currency": "MXN",
                        "discount_amount": 5000,
                        "exchange_rate": 1,
                        "folio": "28",
                        "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                        "invoice_date": "2020-12-24",
                        "invoice_details": [
                          {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "description": "Pago de n√≥mina",
                            "pre_tax_amount": 20400.1,
                            "product_identification": "84111505",
                            "quantity": 1,
                            "retained_taxes": [
                              {
                                "retained_tax_amount": 209.79,
                                "tax": "ISR",
                                "tax_percentage": 10,
                              },
                            ],
                            "tax_amount": 0,
                            "tax_percentage": 0,
                            "total_amount": 20400.1,
                            "unit_amount": 20400.1,
                            "unit_code": "ACT",
                            "unit_description": "Unidad de servicio",
                          },
                        ],
                        "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                        "invoice_type": "N√≥mina",
                        "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                        "payment_method": "PUE",
                        "payment_method_description": "payment_method_description",
                        "payment_type": "99",
                        "payment_type_description": "payment_type_description",
                        "payments": [
                          {
                            "amount": 8000.5,
                            "beneficiary_account_number": "12343453245633",
                            "currency": "BRL",
                            "date": "2020-03-17T12:00:00Z",
                            "exchange_rate": "3.75",
                            "operation_number": "831840",
                            "payer_account_number": "13343663245699",
                            "payer_bank_name": "CITI BANAMEX",
                            "payer_rfc": "BKJM840515VB1",
                            "payment_type": "03",
                            "related_documents": [
                              {
                                "amount_paid": 8000,
                                "currency": "MXN",
                                "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                "outstanding_balance": 10877.84,
                                "partiality_number": 1,
                                "payment_method": "PPD",
                                "previous_balance": 18877.84,
                              },
                            ],
                          },
                        ],
                        "payroll": {
                          "amount": 20400.1,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "date_from": "2020-12-01",
                          "date_to": "2020-12-31",
                          "days": 30,
                          "payment_date": "2020-12-24",
                          "type": "O",
                          "version": "1.2",
                        },
                        "place_of_issue": "11000",
                        "receiver_blacklist_status": "receiver_blacklist_status",
                        "receiver_id": "MNMK3203409H1",
                        "receiver_name": "Roberto Martinez Diaz",
                        "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "sender_blacklist_status": "sender_blacklist_status",
                        "sender_id": "GHTF980303F7",
                        "sender_name": "ACNE SA DE CV",
                        "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "status": "Vigente",
                        "subtotal_amount": 20400.1,
                        "tax_amount": 0,
                        "total_amount": 15400.1,
                        "type": "INFLOW",
                        "usage": "P01",
                        "version": "3.3",
                        "warnings": {
                          "code": "warning_code",
                          "message": "warning message",
                        },
                        "xml": "=XML-STRING=",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/invoices/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "YYYY-MM-DD",
    "date_to": "YYYY-MM-DD",
    "type": "OUTFLOW"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.create('link-id', '2019-07-01', '2019-07-31', 'OUTFLOW'):
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.retrieve(
  link: 'link-id',
  date_from: '2019-07-01',
  date_to: '2019-07-31',
  type: 'OUTFLOW'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Egreso",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-01-01",
                    "date_to": "2020-02-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                  },
                  "response": {
                    "body": [
                      {
                        "cancelation_status": "cancelation_status",
                        "cancelation_update_date": "2019-12-02",
                        "certification_authority": "FGV330542BG6",
                        "certification_date": "2020-12-24",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "currency": "MXN",
                        "discount_amount": 0,
                        "exchange_rate": 1,
                        "folio": "28",
                        "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                        "invoice_date": "2020-12-24",
                        "invoice_details": [
                          {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "description": "Reembolso del servicio",
                            "pre_tax_amount": 25,
                            "product_identification": "78111500",
                            "quantity": 1,
                            "retained_taxes": [
                              {
                                "retained_tax_amount": 209.79,
                                "tax": "ISR",
                                "tax_percentage": 10,
                              },
                            ],
                            "tax_amount": 4,
                            "tax_percentage": 16,
                            "total_amount": 29,
                            "unit_amount": 25,
                            "unit_code": "E48",
                            "unit_description": "Unidad de servicio",
                          },
                        ],
                        "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                        "invoice_type": "Egreso",
                        "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                        "payment_method": "PUE",
                        "payment_method_description": "payment_method_description",
                        "payment_type": "04",
                        "payment_type_description": "payment_type_description",
                        "payments": [
                          {
                            "amount": 8000.5,
                            "beneficiary_account_number": "12343453245633",
                            "currency": "BRL",
                            "date": "2020-03-17T12:00:00Z",
                            "exchange_rate": "3.75",
                            "operation_number": "831840",
                            "payer_account_number": "13343663245699",
                            "payer_bank_name": "CITI BANAMEX",
                            "payer_rfc": "BKJM840515VB1",
                            "payment_type": "03",
                            "related_documents": [
                              {
                                "amount_paid": 8000,
                                "currency": "MXN",
                                "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                "outstanding_balance": 10877.84,
                                "partiality_number": 1,
                                "payment_method": "PPD",
                                "previous_balance": 18877.84,
                              },
                            ],
                          },
                        ],
                        "payroll": {
                          "amount": 20400.1,
                          "collected_at": "2019-09-27T13:01:41Z",
                          "date_from": "2018-07-01",
                          "date_to": "2018-07-31",
                          "days": 30,
                          "payment_date": "payment_date",
                          "type": "O",
                          "version": "1.2",
                        },
                        "place_of_issue": "11000",
                        "receiver_blacklist_status": "receiver_blacklist_status",
                        "receiver_id": "MNMK3203409H1",
                        "receiver_name": "ACNE SA DE CV",
                        "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "sender_blacklist_status": "sender_blacklist_status",
                        "sender_id": "GHTF980303F7",
                        "sender_name": "Roberto Martinez Diaz",
                        "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "status": "Vigente",
                        "subtotal_amount": 25,
                        "tax_amount": 4,
                        "total_amount": 29,
                        "type": "INFLOW",
                        "usage": "G03",
                        "version": "3.3",
                        "warnings": {
                          "code": "warning_code",
                          "message": "warning message",
                        },
                        "xml": "=XML-STRING=",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/invoices/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "YYYY-MM-DD",
    "date_to": "YYYY-MM-DD",
    "type": "OUTFLOW"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Invoices
for invoice in client.Invoices.create('link-id', '2019-07-01', '2019-07-31', 'OUTFLOW'):
    pprint(invoice)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": undefined,
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.invoices.retrieve(
  link: 'link-id',
  date_from: '2019-07-01',
  date_to: '2019-07-31',
  type: 'OUTFLOW'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
  });
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Invoice Traslado",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-01-01",
                    "date_to": "2020-02-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                  },
                  "response": {
                    "body": [
                      {
                        "cancelation_status": "cancelation_status",
                        "cancelation_update_date": "2019-12-02",
                        "certification_authority": "FGV330542BG6",
                        "certification_date": "2020-12-24",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "currency": "MXN",
                        "discount_amount": 0,
                        "exchange_rate": 1,
                        "folio": "28",
                        "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                        "invoice_date": "2020-12-24",
                        "invoice_details": [
                          {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "description": "FLETE",
                            "pre_tax_amount": 21000,
                            "product_identification": "78101802",
                            "quantity": 1,
                            "retained_taxes": [
                              {
                                "retained_tax_amount": 209.79,
                                "tax": "ISR",
                                "tax_percentage": 10,
                              },
                            ],
                            "tax_amount": 0,
                            "tax_percentage": 16,
                            "total_amount": 21000,
                            "unit_amount": 21000,
                            "unit_code": "E48",
                            "unit_description": "Unidad de servicio",
                          },
                        ],
                        "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                        "invoice_type": "Traslado",
                        "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                        "payment_method_description": "payment_method_description",
                        "payment_type": "99",
                        "payment_type_description": "payment_type_description",
                        "payments": [
                          {
                            "amount": 8000.5,
                            "beneficiary_account_number": "12343453245633",
                            "currency": "BRL",
                            "date": "2020-03-17T12:00:00Z",
                            "exchange_rate": "3.75",
                            "operation_number": "831840",
                            "payer_account_number": "13343663245699",
                            "payer_bank_name": "CITI BANAMEX",
                            "payer_rfc": "BKJM840515VB1",
                            "payment_type": "03",
                            "related_documents": [
                              {
                                "amount_paid": 8000,
                                "currency": "MXN",
                                "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                                "outstanding_balance": 10877.84,
                                "partiality_number": 1,
                                "payment_method": "PPD",
                                "previous_balance": 18877.84,
                              },
                            ],
                          },
                        ],
                        "payroll": {
                          "amount": 20400.1,
                          "collected_at": "2019-09-27T13:01:41Z",
                          "date_from": "2018-07-01",
                          "date_to": "2018-07-31",
                          "days": 30,
                          "payment_date": "payment_date",
                          "type": "O",
                          "version": "1.2",
                        },
                        "place_of_issue": "11000",
                        "receiver_blacklist_status": "receiver_blacklist_status",
                        "receiver_id": "MNMK3203409H1",
                        "receiver_name": "CARGOS S.A. DE C.V.",
                        "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "sender_blacklist_status": "sender_blacklist_status",
                        "sender_id": "GHTF980303F7",
                        "sender_name": "ACNE SA DE CV",
                        "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                        "status": "Vigente",
                        "subtotal_amount": 0,
                        "tax_amount": 0,
                        "total_amount": 0,
                        "type": "INFLOW",
                        "usage": "G03",
                        "version": "3.3",
                        "warnings": {
                          "code": "warning_code",
                          "message": "warning message",
                        },
                        "xml": "=XML-STRING=",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/invoices/",
              "request": {
                "body": {
                  "properties": {
                    "attach_xml": {
                      "default": false,
                      "docs": "When set to `true`, you will receive the XML invoice in the response.",
                      "type": "optional<boolean>",
                    },
                    "date_from": {
                      "docs": "The date from which you want to start getting invoices for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "date_to": {
                      "docs": "The date you want to stop getting invoices for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The number of days between `date_from` and `date_to` cannot be over 365.

‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in other words, no future dates).
",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "link": {
                      "docs": "The fiscal `link.id` to use.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                    "type": "optional<root.EnumInvoiceType>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "InvoicesRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<RetrieveInvoicesResponseItem>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "DetailInvoiceResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.InvoiceWithIdSat",
              },
              {
                "type": "root.InvoiceDian",
              },
            ],
          },
          "PatchInvoicesResponseItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.InvoiceWithIdSat",
              },
              {
                "type": "root.InvoiceDian",
              },
            ],
          },
          "RetrieveInvoicesResponseItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.InvoiceWithIdSat",
              },
              {
                "type": "root.InvoiceDian",
              },
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListInvoices:
      path: /api/invoices/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing invoices in your Belvo account. By
        default, we return 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all invoices
      request:
        name: ListInvoicesRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          created_at__gt:
            type: optional<string>
            docs: >-
              Return invoices that were last updated in Belvo's database after
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return invoices that were last updated in Belvo's database after
              or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return invoices that were last updated in Belvo's database before
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return invoices that were last updated in Belvo's database before
              or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return invoices that were last updated in Belvo's database between
              two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          id:
            type: optional<string>
            docs: Return information only for this `invoice.id`.
          id__in:
            type: optional<string>
            docs: Return information only for these `invoice.id`s.
          invoice_date:
            type: optional<string>
            docs: >-
              Return invoices issued exactly on this date (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
          invoice_date__lt:
            type: optional<string>
            docs: >-
              Return balances issued before this date (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
          invoice_date__lte:
            type: optional<string>
            docs: >-
              Return balances issued on this date or earlier (`YYYY-MM-DD` or
              full ISO-8601 timestamp).
          invoice_date__gt:
            type: optional<string>
            docs: >-
              Return invoices issued after this date (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
          invoice_date__gte:
            type: optional<string>
            docs: >-
              Return invoices issued on this date or later (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
          invoice_date__range:
            type: optional<string>
            docs: >-
              Return invoices issued within this date range (`YYYY-MM-DD` or
              full ISO-8601 timestamp).
          invoice_identification:
            type: optional<string>
            docs: Return an invoice with this ID (as provided by the insitution).
          invoice_identification__in:
            type: optional<string>
            docs: Return invoices with these IDs (as provided by the institution).
          link__in:
            type: optional<string>
            docs: Return invoices only for these `link.id`s.
          status:
            type: optional<string>
            docs: >-
              Return invoices with this status. Can be either `Vigente` (valid)
              or `Cancelado` (cancelled).
          status__in:
            type: optional<string>
            docs: >-
              Return invoices with these statuses. Can be either `Vigente`
              (valid) or `Cancelado` (cancelled).
          total_amount:
            type: optional<string>
            docs: Return invoices matching exactly this value.
          total_amount__lt:
            type: optional<string>
            docs: Return invoices less than this value.
          total_amount__lte:
            type: optional<string>
            docs: Return invoices less than or equal to this value.
          total_amount__gt:
            type: optional<string>
            docs: Return invoices greater than this value.
          total_amount__gte:
            type: optional<string>
            docs: Return invoices greater than or equal to this value.
          total_amount__range:
            type: optional<string>
            docs: Return invoices between these two values.
          type:
            type: optional<string>
            docs: Return invoices of this type. Can be either `OUTFLOW` or `INFLOW`.
          type__in:
            type: optional<string>
            docs: >-
              Return invoices of these types. Can be either `OUTFLOW` or
              `INFLOW`.
      response:
        docs: Ok
        type: root.InvoicesResponsePaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - name: Invoice Ingreso
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: 73694155-b871-41ec-94e3-37d17ff62b5d
            id__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
            invoice_date: '2022-05-05'
            invoice_date__lt: '2022-03-02'
            invoice_date__lte: '2022-03-01'
            invoice_date__gt: '2022-05-06'
            invoice_date__gte: '2022-05-04'
            invoice_date__range: 2022-03-01,2022-05-06
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_identification__in: >-
              862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            status: Vigente
            status__in: Vigente,Cancelado
            total_amount: '1000.00'
            total_amount__lt: '540.00'
            total_amount__lte: '541.00'
            total_amount__gt: '520.00'
            total_amount__gte: '519.00'
            total_amount__range: 519.00,541.00
            type: OUTFLOW
            type__in: OUTFLOW,INFLOW
          response:
            body:
              count: 110
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                  link: 1bd948f7-245d-4313-b604-34d1044cb908
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                  invoice_date: '2020-12-24'
                  status: Vigente
                  invoice_type: Ingreso
                  type: OUTFLOW
                  sender_id: GHTF980303F7
                  sender_name: Roberto Martinez Diaz
                  sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  receiver_id: MNMK3203409H1
                  receiver_name: ACNE SA DE CV
                  receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  cancelation_status: cancelation_status
                  cancelation_update_date: '2019-12-02'
                  certification_date: '2020-12-24'
                  certification_authority: FGV330542BG6
                  payment_type: '04'
                  payment_type_description: payment_type_description
                  payment_method: PUE
                  payment_method_description: payment_method_description
                  usage: G03
                  version: '3.3'
                  place_of_issue: '11000'
                  invoice_details:
                    - description: Servicios de mensajer√≠a.
                      product_identification: '78102206'
                      quantity: 1
                      unit_code: E48
                      unit_description: Unidad de servicio
                      unit_amount: 25
                      pre_tax_amount: 25
                      tax_percentage: 16
                      tax_amount: 4
                      total_amount: 29
                      retained_taxes:
                        - tax: ISR
                          tax_percentage: 10
                          retained_tax_amount: 209.79
                      collected_at: '2022-02-09T08:45:50Z'
                  currency: MXN
                  subtotal_amount: 25
                  exchange_rate: 1
                  tax_amount: 4
                  discount_amount: 0
                  total_amount: 29
                  payments:
                    - date: '2020-03-17T12:00:00Z'
                      payment_type: '03'
                      currency: BRL
                      exchange_rate: '3.75'
                      amount: 8000.5
                      operation_number: '831840'
                      beneficiary_account_number: '12343453245633'
                      payer_rfc: BKJM840515VB1
                      payer_account_number: '13343663245699'
                      payer_bank_name: CITI BANAMEX
                      related_documents:
                        - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                          currency: MXN
                          payment_method: PPD
                          partiality_number: 1
                          previous_balance: 18877.84
                          amount_paid: 8000
                          outstanding_balance: 10877.84
                  payroll:
                    days: 30
                    type: O
                    amount: 20400.1
                    version: '1.2'
                    date_from: '2018-07-01'
                    date_to: '2018-07-31'
                    payment_date: payment_date
                  folio: '28'
                  xml: '=XML-STRING='
                  warnings:
                    code: warning_code
                    message: warning message
                  sender_blacklist_status: sender_blacklist_status
                  receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.list():
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Pago
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: 73694155-b871-41ec-94e3-37d17ff62b5d
            id__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
            invoice_date: '2022-05-05'
            invoice_date__lt: '2022-03-02'
            invoice_date__lte: '2022-03-01'
            invoice_date__gt: '2022-05-06'
            invoice_date__gte: '2022-05-04'
            invoice_date__range: 2022-03-01,2022-05-06
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_identification__in: >-
              862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            status: Vigente
            status__in: Vigente,Cancelado
            total_amount: '1000.00'
            total_amount__lt: '540.00'
            total_amount__lte: '541.00'
            total_amount__gt: '520.00'
            total_amount__gte: '519.00'
            total_amount__range: 519.00,541.00
            type: OUTFLOW
            type__in: OUTFLOW,INFLOW
          response:
            body:
              count: 110
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                  link: 1bd948f7-245d-4313-b604-34d1044cb908
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                  invoice_date: '2020-12-24'
                  status: Vigente
                  invoice_type: Pago
                  type: OUTFLOW
                  sender_id: GHTF980303F7
                  sender_name: Roberto Martinez Diaz
                  sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  receiver_id: MNMK3203409H1
                  receiver_name: ACNE SA DE CV
                  receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  cancelation_status: cancelation_status
                  cancelation_update_date: '2019-12-02'
                  certification_date: '2020-12-24'
                  certification_authority: FGV330542BG6
                  payment_type: '99'
                  payment_type_description: payment_type_description
                  payment_method_description: payment_method_description
                  usage: P01
                  version: '3.3'
                  place_of_issue: '11000'
                  invoice_details:
                    - description: Pago
                      product_identification: '84111506'
                      quantity: 1
                      unit_code: ACT
                      unit_description: Unidad de servicio
                      unit_amount: 0
                      pre_tax_amount: 0
                      tax_percentage: 0
                      tax_amount: 0
                      total_amount: 0
                      retained_taxes:
                        - tax: ISR
                          tax_percentage: 10
                          retained_tax_amount: 209.79
                      collected_at: '2022-02-09T08:45:50Z'
                  currency: MXN
                  subtotal_amount: 0
                  exchange_rate: 0.052
                  tax_amount: 0
                  discount_amount: 0
                  total_amount: 0
                  payments:
                    - date: '2020-03-17T12:00:00Z'
                      payment_type: '03'
                      currency: BRL
                      exchange_rate: '3.75'
                      amount: 8000.5
                      operation_number: '831840'
                      beneficiary_rfc: BNM840515VB1
                      beneficiary_account_number: '12343453245633'
                      payer_rfc: BKJM840515VB1
                      payer_account_number: '13343663245699'
                      payer_bank_name: CITI BANAMEX
                      related_documents:
                        - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                          currency: MXN
                          payment_method: PPD
                          partiality_number: 1
                          previous_balance: 18877.84
                          amount_paid: 8000
                          outstanding_balance: 10877.84
                  payroll:
                    days: 30
                    type: O
                    amount: 20400.1
                    version: '1.2'
                    date_from: '2018-07-01'
                    date_to: '2018-07-31'
                    payment_date: payment_date
                  folio: '28'
                  xml: '=XML-STRING='
                  warnings:
                    code: warning_code
                    message: warning message
                  sender_blacklist_status: sender_blacklist_status
                  receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.list():
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Nomina
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: 73694155-b871-41ec-94e3-37d17ff62b5d
            id__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
            invoice_date: '2022-05-05'
            invoice_date__lt: '2022-03-02'
            invoice_date__lte: '2022-03-01'
            invoice_date__gt: '2022-05-06'
            invoice_date__gte: '2022-05-04'
            invoice_date__range: 2022-03-01,2022-05-06
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_identification__in: >-
              862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            status: Vigente
            status__in: Vigente,Cancelado
            total_amount: '1000.00'
            total_amount__lt: '540.00'
            total_amount__lte: '541.00'
            total_amount__gt: '520.00'
            total_amount__gte: '519.00'
            total_amount__range: 519.00,541.00
            type: OUTFLOW
            type__in: OUTFLOW,INFLOW
          response:
            body:
              count: 110
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                  link: 1bd948f7-245d-4313-b604-34d1044cb908
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                  invoice_date: '2020-12-24'
                  status: Vigente
                  invoice_type: N√≥mina
                  type: INFLOW
                  sender_id: GHTF980303F7
                  sender_name: ACNE SA DE CV
                  sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  receiver_id: MNMK3203409H1
                  receiver_name: Roberto Martinez Diaz
                  receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  cancelation_status: cancelation_status
                  cancelation_update_date: '2019-12-02'
                  certification_date: '2020-12-24'
                  certification_authority: FGV330542BG6
                  payment_type: '99'
                  payment_type_description: payment_type_description
                  payment_method: PUE
                  payment_method_description: payment_method_description
                  usage: P01
                  version: '3.3'
                  place_of_issue: '11000'
                  invoice_details:
                    - description: Pago de n√≥mina
                      product_identification: '84111505'
                      quantity: 1
                      unit_code: ACT
                      unit_description: Unidad de servicio
                      unit_amount: 20400.1
                      pre_tax_amount: 20400.1
                      tax_percentage: 0
                      tax_amount: 0
                      total_amount: 20400.1
                      retained_taxes:
                        - tax: ISR
                          tax_percentage: 10
                          retained_tax_amount: 209.79
                      collected_at: '2022-02-09T08:45:50Z'
                  currency: MXN
                  subtotal_amount: 20400.1
                  exchange_rate: 1
                  tax_amount: 0
                  discount_amount: 5000
                  total_amount: 15400.1
                  payments:
                    - date: '2020-03-17T12:00:00Z'
                      payment_type: '03'
                      currency: BRL
                      exchange_rate: '3.75'
                      amount: 8000.5
                      operation_number: '831840'
                      beneficiary_account_number: '12343453245633'
                      payer_rfc: BKJM840515VB1
                      payer_account_number: '13343663245699'
                      payer_bank_name: CITI BANAMEX
                      related_documents:
                        - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                          currency: MXN
                          payment_method: PPD
                          partiality_number: 1
                          previous_balance: 18877.84
                          amount_paid: 8000
                          outstanding_balance: 10877.84
                  payroll:
                    days: 30
                    type: O
                    amount: 20400.1
                    version: '1.2'
                    date_from: '2020-12-01'
                    date_to: '2020-12-31'
                    collected_at: '2022-02-09T08:45:50Z'
                    payment_date: '2020-12-24'
                  folio: '28'
                  xml: '=XML-STRING='
                  warnings:
                    code: warning_code
                    message: warning message
                  sender_blacklist_status: sender_blacklist_status
                  receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.list():
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Egreso
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: 73694155-b871-41ec-94e3-37d17ff62b5d
            id__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
            invoice_date: '2022-05-05'
            invoice_date__lt: '2022-03-02'
            invoice_date__lte: '2022-03-01'
            invoice_date__gt: '2022-05-06'
            invoice_date__gte: '2022-05-04'
            invoice_date__range: 2022-03-01,2022-05-06
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_identification__in: >-
              862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            status: Vigente
            status__in: Vigente,Cancelado
            total_amount: '1000.00'
            total_amount__lt: '540.00'
            total_amount__lte: '541.00'
            total_amount__gt: '520.00'
            total_amount__gte: '519.00'
            total_amount__range: 519.00,541.00
            type: OUTFLOW
            type__in: OUTFLOW,INFLOW
          response:
            body:
              count: 110
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                  link: 1bd948f7-245d-4313-b604-34d1044cb908
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                  invoice_date: '2020-12-24'
                  status: Vigente
                  invoice_type: Egreso
                  type: INFLOW
                  sender_id: GHTF980303F7
                  sender_name: Roberto Martinez Diaz
                  sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  receiver_id: MNMK3203409H1
                  receiver_name: ACNE SA DE CV
                  receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  cancelation_status: cancelation_status
                  cancelation_update_date: '2019-12-02'
                  certification_date: '2020-12-24'
                  certification_authority: FGV330542BG6
                  payment_type: '04'
                  payment_type_description: payment_type_description
                  payment_method: PUE
                  payment_method_description: payment_method_description
                  usage: G03
                  version: '3.3'
                  place_of_issue: '11000'
                  invoice_details:
                    - description: Reembolso del servicio
                      product_identification: '78111500'
                      quantity: 1
                      unit_code: E48
                      unit_description: Unidad de servicio
                      unit_amount: 25
                      pre_tax_amount: 25
                      tax_percentage: 16
                      tax_amount: 4
                      total_amount: 29
                      retained_taxes:
                        - tax: ISR
                          tax_percentage: 10
                          retained_tax_amount: 209.79
                      collected_at: '2022-02-09T08:45:50Z'
                  currency: MXN
                  subtotal_amount: 25
                  exchange_rate: 1
                  tax_amount: 4
                  discount_amount: 0
                  total_amount: 29
                  payments:
                    - date: '2020-03-17T12:00:00Z'
                      payment_type: '03'
                      currency: BRL
                      exchange_rate: '3.75'
                      amount: 8000.5
                      operation_number: '831840'
                      beneficiary_account_number: '12343453245633'
                      payer_rfc: BKJM840515VB1
                      payer_account_number: '13343663245699'
                      payer_bank_name: CITI BANAMEX
                      related_documents:
                        - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                          currency: MXN
                          payment_method: PPD
                          partiality_number: 1
                          previous_balance: 18877.84
                          amount_paid: 8000
                          outstanding_balance: 10877.84
                  payroll:
                    days: 30
                    type: O
                    amount: 20400.1
                    version: '1.2'
                    date_from: '2018-07-01'
                    date_to: '2018-07-31'
                    payment_date: payment_date
                  folio: '28'
                  xml: '=XML-STRING='
                  warnings:
                    code: warning_code
                    message: warning message
                  sender_blacklist_status: sender_blacklist_status
                  receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.list():
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Traslado
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: 73694155-b871-41ec-94e3-37d17ff62b5d
            id__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
            invoice_date: '2022-05-05'
            invoice_date__lt: '2022-03-02'
            invoice_date__lte: '2022-03-01'
            invoice_date__gt: '2022-05-06'
            invoice_date__gte: '2022-05-04'
            invoice_date__range: 2022-03-01,2022-05-06
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_identification__in: >-
              862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            status: Vigente
            status__in: Vigente,Cancelado
            total_amount: '1000.00'
            total_amount__lt: '540.00'
            total_amount__lte: '541.00'
            total_amount__gt: '520.00'
            total_amount__gte: '519.00'
            total_amount__range: 519.00,541.00
            type: OUTFLOW
            type__in: OUTFLOW,INFLOW
          response:
            body:
              count: 110
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                  link: 1bd948f7-245d-4313-b604-34d1044cb908
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                  invoice_date: '2020-12-24'
                  status: Vigente
                  invoice_type: Traslado
                  type: INFLOW
                  sender_id: GHTF980303F7
                  sender_name: ACNE SA DE CV
                  sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  receiver_id: MNMK3203409H1
                  receiver_name: CARGOS S.A. DE C.V.
                  receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                  cancelation_status: cancelation_status
                  cancelation_update_date: '2019-12-02'
                  certification_date: '2020-12-24'
                  certification_authority: FGV330542BG6
                  payment_type: '99'
                  payment_type_description: payment_type_description
                  payment_method_description: payment_method_description
                  usage: G03
                  version: '3.3'
                  place_of_issue: '11000'
                  invoice_details:
                    - description: FLETE
                      product_identification: '78101802'
                      quantity: 1
                      unit_code: E48
                      unit_description: Unidad de servicio
                      unit_amount: 21000
                      pre_tax_amount: 21000
                      tax_percentage: 16
                      tax_amount: 0
                      total_amount: 21000
                      retained_taxes:
                        - tax: ISR
                          tax_percentage: 10
                          retained_tax_amount: 209.79
                      collected_at: '2022-02-09T08:45:50Z'
                  currency: MXN
                  subtotal_amount: 0
                  exchange_rate: 1
                  tax_amount: 0
                  discount_amount: 0
                  total_amount: 0
                  payments:
                    - date: '2020-03-17T12:00:00Z'
                      payment_type: '03'
                      currency: BRL
                      exchange_rate: '3.75'
                      amount: 8000.5
                      operation_number: '831840'
                      beneficiary_account_number: '12343453245633'
                      payer_rfc: BKJM840515VB1
                      payer_account_number: '13343663245699'
                      payer_bank_name: CITI BANAMEX
                      related_documents:
                        - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                          currency: MXN
                          payment_method: PPD
                          partiality_number: 1
                          previous_balance: 18877.84
                          amount_paid: 8000
                          outstanding_balance: 10877.84
                  payroll:
                    days: 30
                    type: O
                    amount: 20400.1
                    version: '1.2'
                    date_from: '2018-07-01'
                    date_to: '2018-07-31'
                    payment_date: payment_date
                  folio: '28'
                  xml: '=XML-STRING='
                  warnings:
                    code: warning_code
                    message: warning message
                  sender_blacklist_status: sender_blacklist_status
                  receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.list():
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
    RetrieveInvoices:
      path: /api/invoices/
      method: POST
      auth: true
      docs: >
        Retrieve invoice information from a specific fiscal link.

        <div style="background-color:#f4f6f8; border-left: 6px solid
        #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px"> <strong>Info: </strong> You can ask for up to
        **one** year (365 days) of invoices per request. If you need invoices
        for more than one year, just make another request. </div>
      source:
        openapi: ../openapi.yml
      display-name: Retrieve invoices for a link
      request:
        name: InvoicesRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: The fiscal `link.id` to use.
              validation:
                format: uuid
            date_from:
              type: string
              docs: >
                The date from which you want to start getting invoices for, in
                `YYYY-MM-DD` format.


                ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            date_to:
              type: string
              docs: >
                The date you want to stop getting invoices for, in `YYYY-MM-DD`
                format.


                ‚ö†Ô∏è The number of days between `date_from` and `date_to` cannot
                be over 365.


                ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date
                (in other words, no future dates).
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            type: optional<root.EnumInvoiceType>
            attach_xml:
              type: optional<boolean>
              docs: >-
                When set to `true`, you will receive the XML invoice in the
                response.
              default: false
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<RetrieveInvoicesResponseItem>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - name: Invoice Ingreso
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            date_from: '2020-01-01'
            date_to: '2020-02-01'
          response:
            body:
              - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                link: 1bd948f7-245d-4313-b604-34d1044cb908
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                invoice_date: '2020-12-24'
                status: Vigente
                invoice_type: Ingreso
                type: OUTFLOW
                sender_id: GHTF980303F7
                sender_name: Roberto Martinez Diaz
                sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                receiver_id: MNMK3203409H1
                receiver_name: ACNE SA DE CV
                receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                cancelation_status: cancelation_status
                cancelation_update_date: '2019-12-02'
                certification_date: '2020-12-24'
                certification_authority: FGV330542BG6
                payment_type: '04'
                payment_type_description: payment_type_description
                payment_method: PUE
                payment_method_description: payment_method_description
                usage: G03
                version: '3.3'
                place_of_issue: '11000'
                invoice_details:
                  - description: Servicios de mensajer√≠a.
                    product_identification: '78102206'
                    quantity: 1
                    unit_code: E48
                    unit_description: Unidad de servicio
                    unit_amount: 25
                    pre_tax_amount: 25
                    tax_percentage: 16
                    tax_amount: 4
                    total_amount: 29
                    retained_taxes:
                      - tax: ISR
                        tax_percentage: 10
                        retained_tax_amount: 209.79
                    collected_at: '2022-02-09T08:45:50Z'
                currency: MXN
                subtotal_amount: 25
                exchange_rate: 1
                tax_amount: 4
                discount_amount: 0
                total_amount: 29
                payments:
                  - date: '2020-03-17T12:00:00Z'
                    payment_type: '03'
                    currency: BRL
                    exchange_rate: '3.75'
                    amount: 8000.5
                    operation_number: '831840'
                    beneficiary_account_number: '12343453245633'
                    payer_rfc: BKJM840515VB1
                    payer_account_number: '13343663245699'
                    payer_bank_name: CITI BANAMEX
                    related_documents:
                      - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                        currency: MXN
                        payment_method: PPD
                        partiality_number: 1
                        previous_balance: 18877.84
                        amount_paid: 8000
                        outstanding_balance: 10877.84
                payroll:
                  days: 30
                  type: O
                  amount: 20400.1
                  version: '1.2'
                  date_from: '2018-07-01'
                  date_to: '2018-07-31'
                  collected_at: '2019-09-27T13:01:41Z'
                  payment_date: payment_date
                folio: '28'
                xml: '=XML-STRING='
                warnings:
                  code: warning_code
                  message: warning message
                sender_blacklist_status: sender_blacklist_status
                receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/invoices/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "YYYY-MM-DD",
                    "date_to": "YYYY-MM-DD",
                    "type": "OUTFLOW"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.create('link-id', '2019-07-01',
                '2019-07-31', 'OUTFLOW'):
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.retrieve(
                  link: 'link-id',
                  date_from: '2019-07-01',
                  date_to: '2019-07-31',
                  type: 'OUTFLOW'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Pago
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            date_from: '2020-01-01'
            date_to: '2020-02-01'
          response:
            body:
              - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                link: 1bd948f7-245d-4313-b604-34d1044cb908
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                invoice_date: '2020-12-24'
                status: Vigente
                invoice_type: Pago
                type: OUTFLOW
                sender_id: GHTF980303F7
                sender_name: Roberto Martinez Diaz
                sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                receiver_id: MNMK3203409H1
                receiver_name: ACNE SA DE CV
                receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                cancelation_status: cancelation_status
                cancelation_update_date: '2019-12-02'
                certification_date: '2020-12-24'
                certification_authority: FGV330542BG6
                payment_type: '99'
                payment_type_description: payment_type_description
                payment_method_description: payment_method_description
                usage: P01
                version: '3.3'
                place_of_issue: '11000'
                invoice_details:
                  - description: Pago
                    product_identification: '84111506'
                    quantity: 1
                    unit_code: ACT
                    unit_description: Unidad de servicio
                    unit_amount: 0
                    pre_tax_amount: 0
                    tax_percentage: 0
                    tax_amount: 0
                    total_amount: 0
                    retained_taxes:
                      - tax: ISR
                        tax_percentage: 10
                        retained_tax_amount: 209.79
                    collected_at: '2022-02-09T08:45:50Z'
                currency: MXN
                subtotal_amount: 0
                exchange_rate: 0.052
                tax_amount: 0
                discount_amount: 0
                total_amount: 0
                payments:
                  - date: '2020-03-17T12:00:00Z'
                    payment_type: '03'
                    currency: BRL
                    exchange_rate: '3.75'
                    amount: 8000.5
                    operation_number: '831840'
                    beneficiary_rfc: BNM840515VB1
                    beneficiary_account_number: '12343453245633'
                    payer_rfc: BKJM840515VB1
                    payer_account_number: '13343663245699'
                    payer_bank_name: CITI BANAMEX
                    related_documents:
                      - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                        currency: MXN
                        payment_method: PPD
                        partiality_number: 1
                        previous_balance: 18877.84
                        amount_paid: 8000
                        outstanding_balance: 10877.84
                payroll:
                  days: 30
                  type: O
                  amount: 20400.1
                  version: '1.2'
                  date_from: '2018-07-01'
                  date_to: '2018-07-31'
                  collected_at: '2019-09-27T13:01:41Z'
                  payment_date: payment_date
                folio: '28'
                xml: '=XML-STRING='
                warnings:
                  code: warning_code
                  message: warning message
                sender_blacklist_status: sender_blacklist_status
                receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/invoices/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "YYYY-MM-DD",
                    "date_to": "YYYY-MM-DD",
                    "type": "OUTFLOW"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.create('link-id', '2019-07-01',
                '2019-07-31', 'OUTFLOW'):
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.retrieve(
                  link: 'link-id',
                  date_from: '2019-07-01',
                  date_to: '2019-07-31',
                  type: 'OUTFLOW'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Nomina
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            date_from: '2020-01-01'
            date_to: '2020-02-01'
          response:
            body:
              - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                link: 1bd948f7-245d-4313-b604-34d1044cb908
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                invoice_date: '2020-12-24'
                status: Vigente
                invoice_type: N√≥mina
                type: INFLOW
                sender_id: GHTF980303F7
                sender_name: ACNE SA DE CV
                sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                receiver_id: MNMK3203409H1
                receiver_name: Roberto Martinez Diaz
                receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                cancelation_status: cancelation_status
                cancelation_update_date: '2019-12-02'
                certification_date: '2020-12-24'
                certification_authority: FGV330542BG6
                payment_type: '99'
                payment_type_description: payment_type_description
                payment_method: PUE
                payment_method_description: payment_method_description
                usage: P01
                version: '3.3'
                place_of_issue: '11000'
                invoice_details:
                  - description: Pago de n√≥mina
                    product_identification: '84111505'
                    quantity: 1
                    unit_code: ACT
                    unit_description: Unidad de servicio
                    unit_amount: 20400.1
                    pre_tax_amount: 20400.1
                    tax_percentage: 0
                    tax_amount: 0
                    total_amount: 20400.1
                    retained_taxes:
                      - tax: ISR
                        tax_percentage: 10
                        retained_tax_amount: 209.79
                    collected_at: '2022-02-09T08:45:50Z'
                currency: MXN
                subtotal_amount: 20400.1
                exchange_rate: 1
                tax_amount: 0
                discount_amount: 5000
                total_amount: 15400.1
                payments:
                  - date: '2020-03-17T12:00:00Z'
                    payment_type: '03'
                    currency: BRL
                    exchange_rate: '3.75'
                    amount: 8000.5
                    operation_number: '831840'
                    beneficiary_account_number: '12343453245633'
                    payer_rfc: BKJM840515VB1
                    payer_account_number: '13343663245699'
                    payer_bank_name: CITI BANAMEX
                    related_documents:
                      - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                        currency: MXN
                        payment_method: PPD
                        partiality_number: 1
                        previous_balance: 18877.84
                        amount_paid: 8000
                        outstanding_balance: 10877.84
                payroll:
                  days: 30
                  type: O
                  amount: 20400.1
                  version: '1.2'
                  date_from: '2020-12-01'
                  date_to: '2020-12-31'
                  collected_at: '2022-02-09T08:45:50Z'
                  payment_date: '2020-12-24'
                folio: '28'
                xml: '=XML-STRING='
                warnings:
                  code: warning_code
                  message: warning message
                sender_blacklist_status: sender_blacklist_status
                receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/invoices/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "YYYY-MM-DD",
                    "date_to": "YYYY-MM-DD",
                    "type": "OUTFLOW"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.create('link-id', '2019-07-01',
                '2019-07-31', 'OUTFLOW'):
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.retrieve(
                  link: 'link-id',
                  date_from: '2019-07-01',
                  date_to: '2019-07-31',
                  type: 'OUTFLOW'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Egreso
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            date_from: '2020-01-01'
            date_to: '2020-02-01'
          response:
            body:
              - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                link: 1bd948f7-245d-4313-b604-34d1044cb908
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                invoice_date: '2020-12-24'
                status: Vigente
                invoice_type: Egreso
                type: INFLOW
                sender_id: GHTF980303F7
                sender_name: Roberto Martinez Diaz
                sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                receiver_id: MNMK3203409H1
                receiver_name: ACNE SA DE CV
                receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                cancelation_status: cancelation_status
                cancelation_update_date: '2019-12-02'
                certification_date: '2020-12-24'
                certification_authority: FGV330542BG6
                payment_type: '04'
                payment_type_description: payment_type_description
                payment_method: PUE
                payment_method_description: payment_method_description
                usage: G03
                version: '3.3'
                place_of_issue: '11000'
                invoice_details:
                  - description: Reembolso del servicio
                    product_identification: '78111500'
                    quantity: 1
                    unit_code: E48
                    unit_description: Unidad de servicio
                    unit_amount: 25
                    pre_tax_amount: 25
                    tax_percentage: 16
                    tax_amount: 4
                    total_amount: 29
                    retained_taxes:
                      - tax: ISR
                        tax_percentage: 10
                        retained_tax_amount: 209.79
                    collected_at: '2022-02-09T08:45:50Z'
                currency: MXN
                subtotal_amount: 25
                exchange_rate: 1
                tax_amount: 4
                discount_amount: 0
                total_amount: 29
                payments:
                  - date: '2020-03-17T12:00:00Z'
                    payment_type: '03'
                    currency: BRL
                    exchange_rate: '3.75'
                    amount: 8000.5
                    operation_number: '831840'
                    beneficiary_account_number: '12343453245633'
                    payer_rfc: BKJM840515VB1
                    payer_account_number: '13343663245699'
                    payer_bank_name: CITI BANAMEX
                    related_documents:
                      - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                        currency: MXN
                        payment_method: PPD
                        partiality_number: 1
                        previous_balance: 18877.84
                        amount_paid: 8000
                        outstanding_balance: 10877.84
                payroll:
                  days: 30
                  type: O
                  amount: 20400.1
                  version: '1.2'
                  date_from: '2018-07-01'
                  date_to: '2018-07-31'
                  collected_at: '2019-09-27T13:01:41Z'
                  payment_date: payment_date
                folio: '28'
                xml: '=XML-STRING='
                warnings:
                  code: warning_code
                  message: warning message
                sender_blacklist_status: sender_blacklist_status
                receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/invoices/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "YYYY-MM-DD",
                    "date_to": "YYYY-MM-DD",
                    "type": "OUTFLOW"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.create('link-id', '2019-07-01',
                '2019-07-31', 'OUTFLOW'):
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.retrieve(
                  link: 'link-id',
                  date_from: '2019-07-01',
                  date_to: '2019-07-31',
                  type: 'OUTFLOW'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Traslado
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            date_from: '2020-01-01'
            date_to: '2020-02-01'
          response:
            body:
              - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
                link: 1bd948f7-245d-4313-b604-34d1044cb908
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
                invoice_date: '2020-12-24'
                status: Vigente
                invoice_type: Traslado
                type: INFLOW
                sender_id: GHTF980303F7
                sender_name: ACNE SA DE CV
                sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                receiver_id: MNMK3203409H1
                receiver_name: CARGOS S.A. DE C.V.
                receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                cancelation_status: cancelation_status
                cancelation_update_date: '2019-12-02'
                certification_date: '2020-12-24'
                certification_authority: FGV330542BG6
                payment_type: '99'
                payment_type_description: payment_type_description
                payment_method_description: payment_method_description
                usage: G03
                version: '3.3'
                place_of_issue: '11000'
                invoice_details:
                  - description: FLETE
                    product_identification: '78101802'
                    quantity: 1
                    unit_code: E48
                    unit_description: Unidad de servicio
                    unit_amount: 21000
                    pre_tax_amount: 21000
                    tax_percentage: 16
                    tax_amount: 0
                    total_amount: 21000
                    retained_taxes:
                      - tax: ISR
                        tax_percentage: 10
                        retained_tax_amount: 209.79
                    collected_at: '2022-02-09T08:45:50Z'
                currency: MXN
                subtotal_amount: 0
                exchange_rate: 1
                tax_amount: 0
                discount_amount: 0
                total_amount: 0
                payments:
                  - date: '2020-03-17T12:00:00Z'
                    payment_type: '03'
                    currency: BRL
                    exchange_rate: '3.75'
                    amount: 8000.5
                    operation_number: '831840'
                    beneficiary_account_number: '12343453245633'
                    payer_rfc: BKJM840515VB1
                    payer_account_number: '13343663245699'
                    payer_bank_name: CITI BANAMEX
                    related_documents:
                      - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                        currency: MXN
                        payment_method: PPD
                        partiality_number: 1
                        previous_balance: 18877.84
                        amount_paid: 8000
                        outstanding_balance: 10877.84
                payroll:
                  days: 30
                  type: O
                  amount: 20400.1
                  version: '1.2'
                  date_from: '2018-07-01'
                  date_to: '2018-07-31'
                  collected_at: '2019-09-27T13:01:41Z'
                  payment_date: payment_date
                folio: '28'
                xml: '=XML-STRING='
                warnings:
                  code: warning_code
                  message: warning message
                sender_blacklist_status: sender_blacklist_status
                receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/invoices/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "YYYY-MM-DD",
                    "date_to": "YYYY-MM-DD",
                    "type": "OUTFLOW"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Invoices

                for invoice in client.Invoices.create('link-id', '2019-07-01',
                '2019-07-31', 'OUTFLOW'):
                    pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.retrieve(
                  link: 'link-id',
                  date_from: '2019-07-01',
                  date_to: '2019-07-31',
                  type: 'OUTFLOW'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
    PatchInvoices:
      path: /api/invoices/
      method: PATCH
      auth: true
      docs: >-
        Used to resume an Invoice retrieve session that was paused because an
        MFA token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete an invoices request
      request:
        body: root.PatchBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchInvoicesRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<PatchInvoicesResponseItem>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: c749315b-eec2-435d-a458-06912878564f
                link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                collected_at: '2019-09-27T13:01:41Z'
                created_at: '2022-02-09T08:45:50Z'
                invoice_identification: A1A1A1A1-2B2B-3C33-D44D-555555E55EE
                invoice_date: '2019-12-01'
                status: Vigente
                invoice_type: Egreso
                type: INFLOW
                sender_id: AAA111111AA11
                sender_name: ACME CORP
                sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
                receiver_id: BBB222222BB22
                receiver_name: BELVO CORP
                receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
                cancelation_status: cancelation_status
                cancelation_update_date: '2019-12-02'
                certification_date: '2019-12-01'
                certification_authority: CCC333333CC33
                payment_type: '99'
                payment_type_description: payment_type_description
                payment_method: PUE
                payment_method_description: payment_method_description
                usage: P01
                version: '3.3'
                place_of_issue: '01165'
                invoice_details:
                  - description: December 2019 accounting fees
                    product_identification: '84101600'
                    quantity: 10
                    unit_code: E48
                    unit_description: Unidad de servicio
                    unit_amount: 200
                    pre_tax_amount: 400
                    tax_percentage: 16
                    tax_amount: 64
                    total_amount: 464
                currency: MXN
                subtotal_amount: 400
                exchange_rate: 0.052
                tax_amount: 64
                discount_amount: 10
                total_amount: 454
                payments:
                  - date: '2020-03-17T12:00:00Z'
                    payment_type: '03'
                    currency: BRL
                    exchange_rate: '3.75'
                    amount: 8000.5
                    operation_number: '831840'
                    beneficiary_account_number: '12343453245633'
                    payer_rfc: BKJM840515VB1
                    payer_account_number: '13343663245699'
                    payer_bank_name: CITI BANAMEX
                    related_documents:
                      - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                        currency: MXN
                        payment_method: PPD
                        partiality_number: 1
                        previous_balance: 18877.84
                        amount_paid: 8000
                        outstanding_balance: 10877.84
                payroll:
                  days: 30
                  type: O
                  amount: 20400.1
                  version: '1.2'
                  date_from: '2018-07-01'
                  date_to: '2018-07-31'
                  collected_at: '2019-09-27T13:01:41Z'
                  payment_date: payment_date
                folio: '26'
                xml: xml
                warnings:
                  code: sat_xml_limit_reached
                  message: >-
                    The daily limit for XML downloads set by SAT was reached so
                    this invoice might be missing data. Please check
                    https://tinyurl.com/yydzhy5d for more information on this
                    error.
                sender_blacklist_status: sender_blacklist_status
                receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://api.belvo.com/api/invoices/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: api.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "https://api.belvo.com")


                # Resume incomes

                incomes = client.Invoices.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                )

                client.invoices.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'https://api.belvo.com'
                );

                client.connect()
                  .then(function () {
                    client.invoices.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailInvoice:
      path: /api/invoices/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific invoice.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `invoice.id` you want to get detailed information about.
      display-name: Get an invoice's details
      request:
        name: DetailInvoiceRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: DetailInvoiceResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: Invoice Ingreso
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
              link: 1bd948f7-245d-4313-b604-34d1044cb908
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
              invoice_date: '2020-12-24'
              status: Vigente
              invoice_type: Ingreso
              type: OUTFLOW
              sender_id: GHTF980303F7
              sender_name: Roberto Martinez Diaz
              sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
              receiver_id: MNMK3203409H1
              receiver_name: ACNE SA DE CV
              receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
              cancelation_status: cancelation_status
              cancelation_update_date: '2019-12-02'
              certification_date: '2020-12-24'
              certification_authority: FGV330542BG6
              payment_type: '04'
              payment_type_description: payment_type_description
              payment_method: PUE
              payment_method_description: payment_method_description
              usage: G03
              version: '3.3'
              place_of_issue: '11000'
              invoice_details:
                - description: Servicios de mensajer√≠a.
                  product_identification: '78102206'
                  quantity: 1
                  unit_code: E48
                  unit_description: Unidad de servicio
                  unit_amount: 25
                  tax_type: tax_type
                  pre_tax_amount: 25
                  tax_percentage: 16
                  tax_amount: 4
                  total_amount: 29
                  retained_taxes:
                    - tax: ISR
                      tax_percentage: 10
                      retained_tax_amount: 209.79
                  collected_at: '2022-02-09T08:45:50Z'
              currency: MXN
              subtotal_amount: 25
              exchange_rate: 1
              tax_amount: 4
              discount_amount: 0
              total_amount: 29
              payments:
                - date: '2020-03-17T12:00:00Z'
                  payment_type: '03'
                  currency: BRL
                  exchange_rate: '3.75'
                  amount: 8000.5
                  operation_number: '831840'
                  beneficiary_rfc: BNM840515VB1
                  beneficiary_account_number: '12343453245633'
                  payer_rfc: BKJM840515VB1
                  payer_account_number: '13343663245699'
                  payer_bank_name: CITI BANAMEX
                  related_documents:
                    - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                      currency: MXN
                      payment_method: PPD
                      partiality_number: 1
                      previous_balance: 18877.84
                      amount_paid: 8000
                      outstanding_balance: 10877.84
              payroll:
                days: 30
                type: O
                amount: 20400.1
                version: '1.2'
                date_from: '2018-07-01'
                date_to: '2018-07-31'
                collected_at: '2019-09-27T13:01:41Z'
                payment_date: payment_date
              folio: '28'
              xml: '=XML-STRING='
              warnings:
                code: warning_code
                message: warning message
              sender_blacklist_status: sender_blacklist_status
              receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                invoice = client.Invoices.detail('invoice-id'):

                pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.detail id: 'invoice-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.detail('invoiceId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Pago
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
              link: 1bd948f7-245d-4313-b604-34d1044cb908
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
              invoice_date: '2020-12-24'
              status: Vigente
              invoice_type: Pago
              type: OUTFLOW
              sender_id: GHTF980303F7
              sender_name: Roberto Martinez Diaz
              sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
              receiver_id: MNMK3203409H1
              receiver_name: ACNE SA DE CV
              receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
              cancelation_status: cancelation_status
              cancelation_update_date: '2019-12-02'
              certification_date: '2020-12-24'
              certification_authority: FGV330542BG6
              payment_type: '99'
              payment_type_description: payment_type_description
              payment_method_description: payment_method_description
              usage: P01
              version: '3.3'
              place_of_issue: '11000'
              invoice_details:
                - description: Pago
                  product_identification: '84111506'
                  quantity: 1
                  unit_code: ACT
                  unit_description: Unidad de servicio
                  unit_amount: 0
                  tax_type: tax_type
                  pre_tax_amount: 0
                  tax_percentage: 0
                  tax_amount: 0
                  total_amount: 0
                  retained_taxes:
                    - tax: ISR
                      tax_percentage: 10
                      retained_tax_amount: 209.79
                  collected_at: '2022-02-09T08:45:50Z'
              currency: MXN
              subtotal_amount: 0
              exchange_rate: 0.052
              tax_amount: 0
              discount_amount: 0
              total_amount: 0
              payments:
                - date: '2020-03-17T12:00:00Z'
                  payment_type: '03'
                  currency: BRL
                  exchange_rate: '3.75'
                  amount: 8000.5
                  operation_number: '831840'
                  beneficiary_rfc: BNM840515VB1
                  beneficiary_account_number: '12343453245633'
                  payer_rfc: BKJM840515VB1
                  payer_account_number: '13343663245699'
                  payer_bank_name: CITI BANAMEX
                  related_documents:
                    - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                      currency: MXN
                      payment_method: PPD
                      partiality_number: 1
                      previous_balance: 18877.84
                      amount_paid: 8000
                      outstanding_balance: 10877.84
              payroll:
                days: 30
                type: O
                amount: 20400.1
                version: '1.2'
                date_from: '2018-07-01'
                date_to: '2018-07-31'
                collected_at: '2019-09-27T13:01:41Z'
                payment_date: payment_date
              folio: '28'
              xml: '=XML-STRING='
              warnings:
                code: warning_code
                message: warning message
              sender_blacklist_status: sender_blacklist_status
              receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                invoice = client.Invoices.detail('invoice-id'):

                pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.detail id: 'invoice-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.detail('invoiceId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Nomina
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
              link: 1bd948f7-245d-4313-b604-34d1044cb908
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
              invoice_date: '2020-12-24'
              status: Vigente
              invoice_type: N√≥mina
              type: INFLOW
              sender_id: GHTF980303F7
              sender_name: ACNE SA DE CV
              sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
              receiver_id: MNMK3203409H1
              receiver_name: Roberto Martinez Diaz
              receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
              cancelation_status: cancelation_status
              cancelation_update_date: '2019-12-02'
              certification_date: '2020-12-24'
              certification_authority: FGV330542BG6
              payment_type: '99'
              payment_type_description: payment_type_description
              payment_method: PUE
              payment_method_description: payment_method_description
              usage: P01
              version: '3.3'
              place_of_issue: '11000'
              invoice_details:
                - description: Pago de n√≥mina
                  product_identification: '84111505'
                  quantity: 1
                  unit_code: ACT
                  unit_description: Unidad de servicio
                  unit_amount: 20400.1
                  tax_type: tax_type
                  pre_tax_amount: 20400.1
                  tax_percentage: 0
                  tax_amount: 0
                  total_amount: 20400.1
                  retained_taxes:
                    - tax: ISR
                      tax_percentage: 10
                      retained_tax_amount: 209.79
                  collected_at: '2022-02-09T08:45:50Z'
              currency: MXN
              subtotal_amount: 20400.1
              exchange_rate: 1
              tax_amount: 0
              discount_amount: 5000
              total_amount: 15400.1
              payments:
                - date: '2020-03-17T12:00:00Z'
                  payment_type: '03'
                  currency: BRL
                  exchange_rate: '3.75'
                  amount: 8000.5
                  operation_number: '831840'
                  beneficiary_rfc: BNM840515VB1
                  beneficiary_account_number: '12343453245633'
                  payer_rfc: BKJM840515VB1
                  payer_account_number: '13343663245699'
                  payer_bank_name: CITI BANAMEX
                  related_documents:
                    - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                      currency: MXN
                      payment_method: PPD
                      partiality_number: 1
                      previous_balance: 18877.84
                      amount_paid: 8000
                      outstanding_balance: 10877.84
              payroll:
                days: 30
                type: O
                amount: 20400.1
                version: '1.2'
                date_from: '2020-12-01'
                date_to: '2020-12-31'
                collected_at: '2022-02-09T08:45:50Z'
                payment_date: '2020-12-24'
              folio: '28'
              xml: '=XML-STRING='
              warnings:
                code: warning_code
                message: warning message
              sender_blacklist_status: sender_blacklist_status
              receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                invoice = client.Invoices.detail('invoice-id'):

                pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.detail id: 'invoice-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.detail('invoiceId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Egreso
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
              link: 1bd948f7-245d-4313-b604-34d1044cb908
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
              invoice_date: '2020-12-24'
              status: Vigente
              invoice_type: Egreso
              type: INFLOW
              sender_id: GHTF980303F7
              sender_name: Roberto Martinez Diaz
              sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
              receiver_id: MNMK3203409H1
              receiver_name: ACNE SA DE CV
              receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
              cancelation_status: cancelation_status
              cancelation_update_date: '2019-12-02'
              certification_date: '2020-12-24'
              certification_authority: FGV330542BG6
              payment_type: '04'
              payment_type_description: payment_type_description
              payment_method: PUE
              payment_method_description: payment_method_description
              usage: G03
              version: '3.3'
              place_of_issue: '11000'
              invoice_details:
                - description: Reembolso del servicio
                  product_identification: '78111500'
                  quantity: 1
                  unit_code: E48
                  unit_description: Unidad de servicio
                  unit_amount: 25
                  tax_type: tax_type
                  pre_tax_amount: 25
                  tax_percentage: 16
                  tax_amount: 4
                  total_amount: 29
                  retained_taxes:
                    - tax: ISR
                      tax_percentage: 10
                      retained_tax_amount: 209.79
                  collected_at: '2022-02-09T08:45:50Z'
              currency: MXN
              subtotal_amount: 25
              exchange_rate: 1
              tax_amount: 4
              discount_amount: 0
              total_amount: 29
              payments:
                - date: '2020-03-17T12:00:00Z'
                  payment_type: '03'
                  currency: BRL
                  exchange_rate: '3.75'
                  amount: 8000.5
                  operation_number: '831840'
                  beneficiary_rfc: BNM840515VB1
                  beneficiary_account_number: '12343453245633'
                  payer_rfc: BKJM840515VB1
                  payer_account_number: '13343663245699'
                  payer_bank_name: CITI BANAMEX
                  related_documents:
                    - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                      currency: MXN
                      payment_method: PPD
                      partiality_number: 1
                      previous_balance: 18877.84
                      amount_paid: 8000
                      outstanding_balance: 10877.84
              payroll:
                days: 30
                type: O
                amount: 20400.1
                version: '1.2'
                date_from: '2018-07-01'
                date_to: '2018-07-31'
                collected_at: '2019-09-27T13:01:41Z'
                payment_date: payment_date
              folio: '28'
              xml: '=XML-STRING='
              warnings:
                code: warning_code
                message: warning message
              sender_blacklist_status: sender_blacklist_status
              receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                invoice = client.Invoices.detail('invoice-id'):

                pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.detail id: 'invoice-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.detail('invoiceId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
        - name: Invoice Traslado
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
              link: 1bd948f7-245d-4313-b604-34d1044cb908
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
              invoice_date: '2020-12-24'
              status: Vigente
              invoice_type: Traslado
              type: INFLOW
              sender_id: GHTF980303F7
              sender_name: ACNE SA DE CV
              sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
              receiver_id: MNMK3203409H1
              receiver_name: CARGOS S.A. DE C.V.
              receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
              cancelation_status: cancelation_status
              cancelation_update_date: '2019-12-02'
              certification_date: '2020-12-24'
              certification_authority: FGV330542BG6
              payment_type: '99'
              payment_type_description: payment_type_description
              payment_method_description: payment_method_description
              usage: G03
              version: '3.3'
              place_of_issue: '11000'
              invoice_details:
                - description: FLETE
                  product_identification: '78101802'
                  quantity: 1
                  unit_code: E48
                  unit_description: Unidad de servicio
                  unit_amount: 21000
                  tax_type: tax_type
                  pre_tax_amount: 21000
                  tax_percentage: 16
                  tax_amount: 0
                  total_amount: 21000
                  retained_taxes:
                    - tax: ISR
                      tax_percentage: 10
                      retained_tax_amount: 209.79
                  collected_at: '2022-02-09T08:45:50Z'
              currency: MXN
              subtotal_amount: 0
              exchange_rate: 1
              tax_amount: 0
              discount_amount: 0
              total_amount: 0
              payments:
                - date: '2020-03-17T12:00:00Z'
                  payment_type: '03'
                  currency: BRL
                  exchange_rate: '3.75'
                  amount: 8000.5
                  operation_number: '831840'
                  beneficiary_rfc: BNM840515VB1
                  beneficiary_account_number: '12343453245633'
                  payer_rfc: BKJM840515VB1
                  payer_account_number: '13343663245699'
                  payer_bank_name: CITI BANAMEX
                  related_documents:
                    - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                      currency: MXN
                      payment_method: PPD
                      partiality_number: 1
                      previous_balance: 18877.84
                      amount_paid: 8000
                      outstanding_balance: 10877.84
              payroll:
                days: 30
                type: O
                amount: 20400.1
                version: '1.2'
                date_from: '2018-07-01'
                date_to: '2018-07-31'
                collected_at: '2019-09-27T13:01:41Z'
                payment_date: payment_date
              folio: '28'
              xml: '=XML-STRING='
              warnings:
                code: warning_code
                message: warning message
              sender_blacklist_status: sender_blacklist_status
              receiver_blacklist_status: receiver_blacklist_status
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/invoices/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                invoice = client.Invoices.detail('invoice-id'):

                pprint(invoice)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.detail id: 'invoice-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.detail('invoiceId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
    DestroyInvoice:
      path: /api/invoices/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific invoice from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `invoice.id` that you want to delete.
      display-name: Delete an invoice
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/invoices/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete Invoice

                client.Invoices.delete('invoice-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.invoices.delete id: 'invoice-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.invoices.delete('invoiceId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                  });
  source:
    openapi: ../openapi.yml
  display-name: Invoices
docs: >-
  An **invoice** is the representation of an electronic invoice, that can be
  received or sent, by a business or an individual and has been uploaded to the
  fiscal institution's website. Multiple INFLOW (invoice received) and OUTFLOW
  (invoice sent) invoices can be retrieved inside each link coming from a fiscal
  institution.


  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field                    | Available Filters                      |

  | ------------------------ | -------------------------------------- |

  | `created_at `            | `gt`, `gte`, `lt`, `lte`, `range`      |

  | `id`                     | `=`, `in`                              |

  | `invoice_date`           | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `invoice_identification` | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `link`                   | `=`, `in`                              |

  | `status`                 | `=`, `in`                              |

  | `total_amount`           | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `type`                   | `=`, `in`                              |


  ```curl cURL

  # Filtering results so that you get Tax Returns from one link:

  https://sandbox.belvo.com/api/invoices/?link=link-id


  # Filtering results so that you get Tax Returns from two links 

  # and are of type normal and their status is vigente:

  https://sandbox.belvo.com/api/invoices/?link__in=link-id1,link-id2&informacion_general__tipo_declaracion=Normal&status=vigente

  ```

  ```javascript Node

  //  Filtering results so that you get the Tax Returns from one link:

  client.invoices.list({
    filters: {
      link: "link-id"
    }
  })


  //  Filtering results so that you get the Tax Returns from two links

  // and are of type normal and their status is vigente:

  client.invoices.list({
    filters: {
      link__in: "link-id-1, link-id-2",
      informacion_general__tipo_declaracion: "Normal",
      status: "vigente"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get the Tax Return from one link:

  client.invoices.list(link="link-id")


  # Filtering results so that you get the Tax Returns from two links

  # # and are of type normal and their status is vigente:

  client.invoices.list(link__in="link-id1,link-id2",
  informacion_general__tipo_declaracion="Normal", status="vigente")

  ```

  ```ruby Ruby

  # Filtering results so that you get the Tax Return from one link:

  client.invoices.list(params: {
    link: "link-id"
  })



  # Filtering results so that you get the Tax Returns from two links

  # and are of type normal and their status is vigente:

  client.invoices.list(params: {
    link__in: "link-id1, link-id1",
    informacion_general__tipo_declaracion: "Normal",
    status: "vigente"
  })

  ```
types:
  RetrieveInvoicesResponseItem:
    discriminated: false
    union:
      - type: root.InvoiceWithIdSat
      - type: root.InvoiceDian
    source:
      openapi: ../openapi.yml
  PatchInvoicesResponseItem:
    discriminated: false
    union:
      - type: root.InvoiceWithIdSat
      - type: root.InvoiceDian
    source:
      openapi: ../openapi.yml
  DetailInvoiceResponse:
    discriminated: false
    union:
      - type: root.InvoiceWithIdSat
      - type: root.InvoiceDian
    source:
      openapi: ../openapi.yml
",
    },
    "links.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "A **Link** is a set of credentials associated to an end-user's access to an **institution**.

<div style="background-color:#f4f6f8; border-left: 6px solid #808080;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
<strong>Example: </strong> The username and password combination used to log in to an online banking application would be a link.
</div>

You will need to register a **Link** before accessing information from that specific end-user, such as account or transaction details.

<div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
<strong>Note: </strong> We recommend using our <a href="https://developers.belvo.com/docs/connect-widget" target="_blank">Connect Widget</a> to handle link creation and link status updates.
</div>

You have the possibility to register two types of links:

### Recurrent links (default)

With recurrent links, Belvo automatically refreshes information weekly and notifies you via [Webhooks](https://developers.belvo.com/docs/webhooks) so you always have up-to-date data. Then, when you receive the webhook, you can make GET requests to the List or Detail endpoints to instantly access up-to-date information, without needing to connect to the institution.

<img src="https://files.readme.io/7b6c0d4-Recurrent_Link_FLow.png" alt="fiscal-endpoints" width="950">

You can also make POST calls directly to the institution, as with single links, as soon as the link is created. However, we recommend you follow the flow described above (waiting for the webhook event) for a more optimal experience.

### Single links

Single links are used to perform ad hoc data access to accounts, owners, transactions, and so on. For example, you can use it when you want to do an underwriting process to assess risk before lending money.

For single links, you have to perform POST calls to an institution **every time** you want to access fresh data.

<img src="https://files.readme.io/eda7956-Single_Link_Flow.svg" alt="fiscal-endpoints" width="950">",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Links",
          "endpoints": {
            "ChangeLinkAccessMode": {
              "auth": true,
              "display-name": "Change a link's access mode",
              "docs": "Change a link's access mode from `single` to `recurrent` or from `recurrent` to single.
‚ÑπÔ∏è **Note**: When you change a link from `single`` to `recurrent`, they will only be updated the next day at the scheduled interval.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.NotFoundError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "access_mode": "single",
                  },
                  "response": {
                    "body": {
                      "access_mode": "recurrent",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "bcef7f35-67f2-4b19-b009-cb38795faf09",
                      "external_id": "56ab5706-6e00-48a4-91c9-ca55968678d9",
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "institution": "erebor_mx_retail",
                      "institution_user_id": "sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=",
                      "last_accessed_at": "2019-09-27T13:02:03Z",
                      "refresh_rate": "7d",
                      "status": "valid",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/links/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `link.id` you want to change the `access_mode` for.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "access_mode": "root.EnumLinkAccessModeRequest",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChangeAccessMode",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Link",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DestroyLink": {
              "auth": true,
              "display-name": "Delete a link",
              "docs": "Delete a specific link and all associated accounts, transactions, and owners from your Belvo account.
# Deleting links in batches
To delete links in bulk, we recommend looping through the list of links you want to delete and making the delete request.

  > üöß **Rate limiting and IP blocking**
  > 
  > An important technical note for performing operations in batches is to take into consideration our rate-limiting: up to 80 requests every 30 seconds. If you exceed this limit, you run the risk of Belvo blocking your IP from making further requests.
  > 
  > For more information, or if your IP address has been blocked, please contact our [support team](https://support.belvo.com/hc/en-us/requests/new).",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/links/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

client.Links.delete("link_id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.links.delete id: 'link-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.links.delete('linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/links/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `link.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailLink": {
              "auth": true,
              "display-name": "Get a link's details",
              "docs": "Get the details of a specific link.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/links/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a link
link = client.Links.get(id="link_id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.links.detail id: 'link-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.links.detail('linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "access_mode": "recurrent",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "bcef7f35-67f2-4b19-b009-cb38795faf09",
                      "external_id": "56ab5706-6e00-48a4-91c9-ca55968678d9",
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "institution": "erebor_mx_retail",
                      "institution_user_id": "sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=",
                      "last_accessed_at": "2019-09-27T13:02:03Z",
                      "refresh_rate": "7d",
                      "status": "valid",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/links/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `link.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailLinkRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Link",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListLinks": {
              "auth": true,
              "display-name": "List all links",
              "docs": "Get a paginated list of all the existing links in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/links/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List links
for link in client.Links.list():
    pprint(link)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.links.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.links.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "access_mode": "single",
                    "created_at": "2022-05-01",
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "created_by__not_in": "578947e2-3c9a-4401-bbad-59b2f2d2b91b,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e",
                    "external_id": "InternalUser4000",
                    "external_id__in": "InternalUser4000,InternalUser4001",
                    "fields": "link,balance,account",
                    "id": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "id__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "institution": "erebor_mx_retail",
                    "institution__in": "erebor_mx_retail,gringotts_co_retail",
                    "institution_user_id": "ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=",
                    "institution_user_id__in": "ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=,YwuTM0uEEh1BbVgDZBcNpa_-Tm3l2q8ZkZNrlhp-pNA=",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "refresh_rate": "24h",
                    "status": "invalid",
                    "status__in": "invalid,unconfirmed",
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "access_mode": "recurrent",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "bcef7f35-67f2-4b19-b009-cb38795faf09",
                          "external_id": "56ab5706-6e00-48a4-91c9-ca55968678d9",
                          "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "institution": "erebor_mx_retail",
                          "institution_user_id": "sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=",
                          "last_accessed_at": "2019-09-27T13:02:03Z",
                          "refresh_rate": "7d",
                          "status": "valid",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/links/",
              "request": {
                "name": "ListLinksRequest",
                "query-parameters": {
                  "access_mode": {
                    "docs": "Return links only with this access mode. Can be either `single` or `recurrent`.",
                    "type": "optional<string>",
                  },
                  "created_at": {
                    "docs": "Return links that were last updated in Belvo's database on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return links that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return links that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return links that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return links that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return links that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_by__not_in": {
                    "docs": "Return links that were not created by these Belvo users.",
                    "type": "optional<string>",
                  },
                  "external_id": {
                    "docs": "Return links with this external ID.",
                    "type": "optional<string>",
                  },
                  "external_id__in": {
                    "docs": "Return links with these external IDs.",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information only for this `link.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information only for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "institution": {
                    "docs": "Return links created for this institution (use the Belvo-designated name, such as `erebor_mx_retail`).",
                    "type": "optional<string>",
                  },
                  "institution__in": {
                    "docs": "Return links created for these institutions (use the Belvo-designated name, such as `erebor_mx_retail` and `gringotts_co_retail`).",
                    "type": "optional<string>",
                  },
                  "institution_user_id": {
                    "docs": "Return links with this specific institution user ID.",
                    "type": "optional<string>",
                  },
                  "institution_user_id__in": {
                    "docs": "Return links with these institution user IDs.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "refresh_rate": {
                    "docs": "Return links with this refresh rate. Choose between `6h`, `12h`, `24h`, `7d`, or `30d`.",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "Return links with this status. Choose between `valid`, `invalid`, `unconfirmed`, or `token_required`.",
                    "type": "optional<string>",
                  },
                  "status__in": {
                    "docs": "Return links with these statuses. Choose between `valid`, `invalid`, `unconfirmed`, or `token_required`.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.PaginatedResponseLink",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchLinks": {
              "auth": true,
              "display-name": "Complete a links request",
              "docs": "Used to resume a Link register session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/links/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume a link
link = client.Links.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.links.resume(
  session_id: 'your-session-id',
  token: 'otp-token',
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.links.resume('yourSessionId', 'yourOTPToken', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": {
                      "access_mode": "recurrent",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "bcef7f35-67f2-4b19-b009-cb38795faf09",
                      "external_id": "56ab5706-6e00-48a4-91c9-ca55968678d9",
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "institution": "erebor_mx_retail",
                      "institution_user_id": "sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=",
                      "last_accessed_at": "2019-09-27T13:02:03Z",
                      "refresh_rate": "7d",
                      "status": "valid",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/links/",
              "request": {
                "body": "root.PatchBodyWithoutSaveData",
                "content-type": "application/json",
                "name": "PatchLinksRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Link",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RegisterLink": {
              "auth": true,
              "display-name": "Register a new link",
              "docs": "Register a new link with your Belvo account.

<div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
<strong>Note: </strong> We recommend using our <a href="https://developers.belvo.com/docs/connect-widget" target="_blank">Connect Widget</a> to handle link creation and link status updates.
</div>
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/links/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "institution": "",
    "username": "",
    "password": ""
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Register a link
link = client.Links.create(
    institution="erebor_mx_retail",
    username="johndoe",
    password="supersecret"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.links.register(
  institution: 'erebor_mx_retail',
  username: 'johndoe',
  password: 'supersecret'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.links.register('erebor_mx_retail', 'johndoe', 'supersecret')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "institution": "erebor_mx_retail",
                    "username": "username",
                  },
                  "response": {
                    "body": {
                      "access_mode": "recurrent",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "bcef7f35-67f2-4b19-b009-cb38795faf09",
                      "external_id": "56ab5706-6e00-48a4-91c9-ca55968678d9",
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "institution": "erebor_mx_retail",
                      "institution_user_id": "sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=",
                      "last_accessed_at": "2019-09-27T13:02:03Z",
                      "refresh_rate": "7d",
                      "status": "valid",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/links/",
              "request": {
                "body": {
                  "properties": {
                    "access_mode": "optional<root.EnumLinkAccessModeRequest>",
                    "certificate": {
                      "docs": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

Belvo supports a base64 encoded `certificate`. If the `certificate` parameter is used, you *must* also provide the `private_key` parameter.
",
                      "type": "optional<string>",
                    },
                    "credentials_storage": {
                      "docs": "Indicates whether or not to store credentials (and the duration for which to store the credentials). By default, this is set to `store`. For links where `access_mode=recurrent`, this must be set to `store`.

Choose either:
  - `store` to store credentials
  - `nostore` to not store credentials
  - `30d` to store credentials only for 30 days
",
                      "type": "optional<string>",
                    },
                    "external_id": {
                      "docs": "An additional identifier for the link, provided by you, to store in the Belvo database. **Cannot** include any Personal Identifiable Information (PII). **Must** be at least three characters long.

If we identify that the identifier contains PII, we will force a `null` value. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 3,
                        "pattern": undefined,
                      },
                    },
                    "fetch_historical": {
                      "docs": "Indicates whether or not to retrieve historical information for the link or not. For links where `access_mode=single`, the default is `false`. For links where `access_mode=recurrent` this is hardcoded to `true`.
",
                      "type": "optional<boolean>",
                    },
                    "institution": {
                      "docs": "The Belvo name for the institution.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[a-z]+_[a-z]{2}_[a-z]+",
                      },
                    },
                    "password": {
                      "docs": "The end-user's password used to log in to the institution.

‚ÑπÔ∏è **Note**: You must send through a password for all institutions except for IMSS (`imss_mx_employment`).
",
                      "type": "optional<string>",
                    },
                    "password2": {
                      "docs": "The end-user's second password used to log in to the institution.

‚ÑπÔ∏è This is only required by some institutions. To know which institutions require a second password, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.
",
                      "type": "optional<string>",
                    },
                    "private_key": {
                      "docs": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

Belvo supports a base64 encoded `private_key`. If the `private_key` parameter is used, you *must* also provide the `certificate` parameter.
",
                      "type": "optional<string>",
                    },
                    "token": {
                      "docs": "The MFA token required by the bank to log in.

We do not recommend sending the authentication token in the same request as registering the user. See our [Handling multi-factor authentication](https://developers.belvo.com/docs/handling-2-factor-authentication) article for more information and best practices.
",
                      "type": "optional<string>",
                    },
                    "username": {
                      "docs": "The end-user's username (or ID) used to log in to the institution.",
                      "type": "string",
                    },
                    "username2": {
                      "docs": "The end-user's second username (or email address) used to log in to the institution.

‚ÑπÔ∏è This is only required by some institutions. To know which institutions require a second username, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.
",
                      "type": "optional<string>",
                    },
                    "username3": {
                      "docs": "The end-user's third username used to log in to the institution.

‚ÑπÔ∏è This is only required by some institutions. To know which institutions require a third username, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.
",
                      "type": "optional<string>",
                    },
                    "username_type": {
                      "docs": "Type of document to be used as a username.

Some banking institutions accept different documents to be used as the `username` to login. For example, the *C√©dula de Ciudadan√≠a*, *C√©dula de Extranjer√≠a*, *Pasaporte'*, and so on.

For banks that require a document to log in, you **must** provide the `username_type` parameter to specify which document is used when creating the link.

‚ÑπÔ∏è To know which institutions require the `username_type` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.

For a list of standards codes, see the table below.

| Code | Description |
|-----------|-------|
| `001` | C√©dula de Ciudadan√≠a |
| `002` | C√©dula de Extranjer√≠a |
| `003` | Pasaporte |
| `004` | Tarjeta de Identidad |
| `005` | Registro Civil |
| `006` | N√∫mero Identificaci√≥n Personal |
| `020` | NIT |
| `021` | NIT Persona Natural |
| `022` | NIT Persona Extranjera |
| `023` | NIT Persona Jur√≠dica |
| `024` | NIT Menores |
| `025` | NIT Desasociado |
| `030` | Trj. Seguro Social Extranjero |
| `031` | Sociedad Extranjera sin NIT en Colombia |
| `032` | Fideicomiso |
| `033` | RIF Venezuela |
| `034` | CIF |
| `035` | N√∫mero de Identidad |
| `036` | RTN |
| `037` | C√©dula de Identidad |
| `038` | DIMEX |
| `039` | CED |
| `040` | PAS |
| `041` | Documento √önico de Identidad |
| `042` | NIT Salvadore√±o |
| `100` | Ag√™ncia e conta |
| `101` | C√≥digo do operador |
| `102` | Cart√£o de cr√©dito |
| `103` | CPF |
",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LinksRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "root.Link",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "UpdateLink": {
              "auth": true,
              "display-name": "Update a link's credentials",
              "docs": "Update the credentials of a specific link. If the successfully updated link is a recurrent one, we automatically trigger an update of the link. If we find fresh data, you'll [receive historical update](https://developers.belvo.com/docs/webhooks) webhooks.
<div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Note: </strong> We recommend using our <a href="https://developers.belvo.com/docs/connect-widget" target="_blank">Connect Widget</a> to handle updating <code>invalid</code> or <code>token_required</code> links. </div>
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.NotFoundError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PUT https://sandbox.belvo.com/api/links/{id} \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "password": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Update a link
link = client.Links.put(link="link_id", password="password")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.links.update(link: 'link-id', password: 'new-password')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.links.update('linkID', 'newSuperSecret')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "password": "password",
                  },
                  "response": {
                    "body": {
                      "access_mode": "recurrent",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "bcef7f35-67f2-4b19-b009-cb38795faf09",
                      "external_id": "56ab5706-6e00-48a4-91c9-ca55968678d9",
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "institution": "erebor_mx_retail",
                      "institution_user_id": "sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=",
                      "last_accessed_at": "2019-09-27T13:02:03Z",
                      "refresh_rate": "7d",
                      "status": "valid",
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/links/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `link.id` you want to update.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "certificate": {
                      "docs": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

Belvo supports a base64 encoded `certificate`. If the `certificate` parameter is used, you *must* also provide the `private_key` parameter.
",
                      "type": "optional<string>",
                    },
                    "password": {
                      "docs": "The end-user's password used to log in to the institution.",
                      "type": "string",
                    },
                    "password2": {
                      "docs": "The end-user's second password used to log in to the institution.

‚ÑπÔ∏è This is only required by some institutions. To know which institutions require a second password, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.
",
                      "type": "optional<string>",
                    },
                    "private_key": {
                      "docs": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

Belvo supports a base64 encoded `private_key`. If the `private_key` parameter is used, you *must* also provide the `certificate` parameter.
",
                      "type": "optional<string>",
                    },
                    "token": {
                      "docs": "The MFA token required by the bank to log in.
",
                      "type": "optional<string>",
                    },
                    "username_type": {
                      "docs": "Type of document to be used as a username.

  Some banking institutions accept different documents to be used as the `username` to login. For example, the *C√©dula de Ciudadan√≠a*, *C√©dula de Extranjer√≠a*, *Pasaporte'*, and so on.

  For banks that require a document to log in, you **must** provide the `username_type` parameter to specify which document is used when creating the link.

  ‚ÑπÔ∏è To know which institutions require the `username_type` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.

  For a list of standards codes, see the table below.

| Code | Description |
|-----------|-------|
| `001` | C√©dula de Ciudadan√≠a |
| `002` | C√©dula de Extranjer√≠a |
| `003` | Pasaporte |
| `004` | Tarjeta de Identidad |
| `005` | Registro Civil |
| `006` | N√∫mero Identificaci√≥n Personal |
| `020` | NIT |
| `021` | NIT Persona Natural |
| `022` | NIT Persona Extranjera |
| `023` | NIT Persona Jur√≠dica |
| `024` | NIT Menores |
| `025` | NIT Desasociado |
| `030` | Trj. Seguro Social Extranjero |
| `031` | Sociedad Extranjera sin NIT en Colombia |
| `032` | Fideicomiso |
| `033` | RIF Venezuela |
| `034` | CIF |
| `035` | N√∫mero de Identidad |
| `036` | RTN |
| `037` | C√©dula de Identidad |
| `038` | DIMEX |
| `039` | CED |
| `040` | PAS |
| `041` | Documento √önico de Identidad |
| `042` | NIT Salvadore√±o |
| `100` | Ag√™ncia e conta |
| `101` | C√≥digo do operador |
| `102` | Cart√£o de cr√©dito |
| `103` | CPF |
",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LinksPutRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Link",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListLinks:
      path: /api/links/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all the existing links in your Belvo account. By
        default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all links
      request:
        name: ListLinksRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          access_mode:
            type: optional<string>
            docs: >-
              Return links only with this access mode. Can be either `single` or
              `recurrent`.
          created_at:
            type: optional<string>
            docs: >-
              Return links that were last updated in Belvo's database on this
              date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gt:
            type: optional<string>
            docs: >-
              Return links that were last updated in Belvo's database after this
              date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return links that were last updated in Belvo's database after or
              on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return links that were last updated in Belvo's database before
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return links that were last updated in Belvo's database before or
              on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return links that were last updated in Belvo's database between
              two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_by__not_in:
            type: optional<string>
            docs: Return links that were not created by these Belvo users.
          external_id:
            type: optional<string>
            docs: Return links with this external ID.
          external_id__in:
            type: optional<string>
            docs: Return links with these external IDs.
          id:
            type: optional<string>
            docs: Return information only for this `link.id`.
          id__in:
            type: optional<string>
            docs: Return information only for these `link.id`s.
          institution:
            type: optional<string>
            docs: >-
              Return links created for this institution (use the
              Belvo-designated name, such as `erebor_mx_retail`).
          institution__in:
            type: optional<string>
            docs: >-
              Return links created for these institutions (use the
              Belvo-designated name, such as `erebor_mx_retail` and
              `gringotts_co_retail`).
          institution_user_id:
            type: optional<string>
            docs: Return links with this specific institution user ID.
          institution_user_id__in:
            type: optional<string>
            docs: Return links with these institution user IDs.
          refresh_rate:
            type: optional<string>
            docs: >-
              Return links with this refresh rate. Choose between `6h`, `12h`,
              `24h`, `7d`, or `30d`.
          status:
            type: optional<string>
            docs: >-
              Return links with this status. Choose between `valid`, `invalid`,
              `unconfirmed`, or `token_required`.
          status__in:
            type: optional<string>
            docs: >-
              Return links with these statuses. Choose between `valid`,
              `invalid`, `unconfirmed`, or `token_required`.
      response:
        docs: Ok
        type: root.PaginatedResponseLink
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            access_mode: single
            created_at: '2022-05-01'
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            created_by__not_in: >-
              578947e2-3c9a-4401-bbad-59b2f2d2b91b,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e
            external_id: InternalUser4000
            external_id__in: InternalUser4000,InternalUser4001
            id: 73694155-b871-41ec-94e3-37d17ff62b5d
            id__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
            institution: erebor_mx_retail
            institution__in: erebor_mx_retail,gringotts_co_retail
            institution_user_id: ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=
            institution_user_id__in: >-
              ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=,YwuTM0uEEh1BbVgDZBcNpa_-Tm3l2q8ZkZNrlhp-pNA=
            refresh_rate: 24h
            status: invalid
            status__in: invalid,unconfirmed
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution: erebor_mx_retail
                  access_mode: recurrent
                  last_accessed_at: '2019-09-27T13:02:03Z'
                  created_at: '2022-02-09T08:45:50Z'
                  external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
                  institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
                  status: valid
                  created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
                  refresh_rate: 7d
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/links/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List links

                for link in client.Links.list():
                    pprint(link)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.links.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.links.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RegisterLink:
      path: /api/links/
      method: POST
      auth: true
      docs: >
        Register a new link with your Belvo account.


        <div style="background-color:#f4f6f8; border-left: 6px solid
        #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px">

        <strong>Note: </strong> We recommend using our <a
        href="https://developers.belvo.com/docs/connect-widget"
        target="_blank">Connect Widget</a> to handle link creation and link
        status updates.

        </div>
      source:
        openapi: ../openapi.yml
      display-name: Register a new link
      request:
        name: LinksRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            institution:
              type: string
              docs: The Belvo name for the institution.
              validation:
                pattern: '[a-z]+_[a-z]{2}_[a-z]+'
            username:
              type: string
              docs: >-
                The end-user's username (or ID) used to log in to the
                institution.
            password:
              type: optional<string>
              docs: >
                The end-user's password used to log in to the institution.


                ‚ÑπÔ∏è **Note**: You must send through a password for all
                institutions except for IMSS (`imss_mx_employment`).
            external_id:
              type: optional<string>
              docs: >-
                An additional identifier for the link, provided by you, to store
                in the Belvo database. **Cannot** include any Personal
                Identifiable Information (PII). **Must** be at least three
                characters long.


                If we identify that the identifier contains PII, we will force a
                `null` value. For more information, see our [Link creation
                article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).
              validation:
                minLength: 3
            username2:
              type: optional<string>
              docs: >
                The end-user's second username (or email address) used to log in
                to the institution.


                ‚ÑπÔ∏è This is only required by some institutions. To know which
                institutions require a second username, get the
                [details](https://developers.belvo.com/reference/detailinstitution)
                for the institution and check the `form_fields` array in the
                response.
            username3:
              type: optional<string>
              docs: >
                The end-user's third username used to log in to the institution.


                ‚ÑπÔ∏è This is only required by some institutions. To know which
                institutions require a third username, get the
                [details](https://developers.belvo.com/reference/detailinstitution)
                for the institution and check the `form_fields` array in the
                response.
            password2:
              type: optional<string>
              docs: >
                The end-user's second password used to log in to the
                institution.


                ‚ÑπÔ∏è This is only required by some institutions. To know which
                institutions require a second password, get the
                [details](https://developers.belvo.com/reference/detailinstitution)
                for the institution and check the `form_fields` array in the
                response.
            token:
              type: optional<string>
              docs: >
                The MFA token required by the bank to log in.


                We do not recommend sending the authentication token in the same
                request as registering the user. See our [Handling multi-factor
                authentication](https://developers.belvo.com/docs/handling-2-factor-authentication)
                article for more information and best practices.
            access_mode: optional<root.EnumLinkAccessModeRequest>
            fetch_historical:
              type: optional<boolean>
              docs: >
                Indicates whether or not to retrieve historical information for
                the link or not. For links where `access_mode=single`, the
                default is `false`. For links where `access_mode=recurrent` this
                is hardcoded to `true`.
            credentials_storage:
              type: optional<string>
              docs: >
                Indicates whether or not to store credentials (and the duration
                for which to store the credentials). By default, this is set to
                `store`. For links where `access_mode=recurrent`, this must be
                set to `store`.


                Choose either:
                  - `store` to store credentials
                  - `nostore` to not store credentials
                  - `30d` to store credentials only for 30 days
            username_type:
              type: optional<string>
              docs: >
                Type of document to be used as a username.


                Some banking institutions accept different documents to be used
                as the `username` to login. For example, the *C√©dula de
                Ciudadan√≠a*, *C√©dula de Extranjer√≠a*, *Pasaporte'*, and so on.


                For banks that require a document to log in, you **must**
                provide the `username_type` parameter to specify which document
                is used when creating the link.


                ‚ÑπÔ∏è To know which institutions require the `username_type`
                parameter, get the
                [details](https://developers.belvo.com/reference/detailinstitution)
                for the institution and check the `form_fields` array in the
                response.


                For a list of standards codes, see the table below.


                | Code | Description |

                |-----------|-------|

                | `001` | C√©dula de Ciudadan√≠a |

                | `002` | C√©dula de Extranjer√≠a |

                | `003` | Pasaporte |

                | `004` | Tarjeta de Identidad |

                | `005` | Registro Civil |

                | `006` | N√∫mero Identificaci√≥n Personal |

                | `020` | NIT |

                | `021` | NIT Persona Natural |

                | `022` | NIT Persona Extranjera |

                | `023` | NIT Persona Jur√≠dica |

                | `024` | NIT Menores |

                | `025` | NIT Desasociado |

                | `030` | Trj. Seguro Social Extranjero |

                | `031` | Sociedad Extranjera sin NIT en Colombia |

                | `032` | Fideicomiso |

                | `033` | RIF Venezuela |

                | `034` | CIF |

                | `035` | N√∫mero de Identidad |

                | `036` | RTN |

                | `037` | C√©dula de Identidad |

                | `038` | DIMEX |

                | `039` | CED |

                | `040` | PAS |

                | `041` | Documento √önico de Identidad |

                | `042` | NIT Salvadore√±o |

                | `100` | Ag√™ncia e conta |

                | `101` | C√≥digo do operador |

                | `102` | Cart√£o de cr√©dito |

                | `103` | CPF |
            certificate:
              type: optional<string>
              docs: >
                For certain fiscal institutions, it is possible to log in using
                a certificate and a private key, which enables a faster
                connection to the institution.


                Belvo supports a base64 encoded `certificate`. If the
                `certificate` parameter is used, you *must* also provide the
                `private_key` parameter.
            private_key:
              type: optional<string>
              docs: >
                For certain fiscal institutions, it is possible to log in using
                a certificate and a private key, which enables a faster
                connection to the institution.


                Belvo supports a base64 encoded `private_key`. If the
                `private_key` parameter is used, you *must* also provide the
                `certificate` parameter.
        content-type: application/json
      response:
        docs: Created
        type: root.Link
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            institution: erebor_mx_retail
            username: username
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              institution: erebor_mx_retail
              access_mode: recurrent
              last_accessed_at: '2019-09-27T13:02:03Z'
              created_at: '2022-02-09T08:45:50Z'
              external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
              institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
              status: valid
              created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
              refresh_rate: 7d
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/links/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "institution": "",
                    "username": "",
                    "password": ""
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Register a link

                link = client.Links.create(
                    institution="erebor_mx_retail",
                    username="johndoe",
                    password="supersecret"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.links.register(
                  institution: 'erebor_mx_retail',
                  username: 'johndoe',
                  password: 'supersecret'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.links.register('erebor_mx_retail', 'johndoe', 'supersecret')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchLinks:
      path: /api/links/
      method: PATCH
      auth: true
      docs: >-
        Used to resume a Link register session that was paused because an MFA
        token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete a links request
      request:
        body: root.PatchBodyWithoutSaveData
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchLinksRequest
        content-type: application/json
      response:
        docs: Ok
        type: root.Link
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              institution: erebor_mx_retail
              access_mode: recurrent
              last_accessed_at: '2019-09-27T13:02:03Z'
              created_at: '2022-02-09T08:45:50Z'
              external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
              institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
              status: valid
              created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
              refresh_rate: 7d
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/links/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume a link

                link = client.Links.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.links.resume(
                  session_id: 'your-session-id',
                  token: 'otp-token',
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.links.resume('yourSessionId', 'yourOTPToken', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailLink:
      path: /api/links/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific link.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `link.id` you want to get detailed information about.
      display-name: Get a link's details
      request:
        name: DetailLinkRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.Link
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              institution: erebor_mx_retail
              access_mode: recurrent
              last_accessed_at: '2019-09-27T13:02:03Z'
              created_at: '2022-02-09T08:45:50Z'
              external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
              institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
              status: valid
              created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
              refresh_rate: 7d
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/links/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a link

                link = client.Links.get(id="link_id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.links.detail id: 'link-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.links.detail('linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    UpdateLink:
      path: /api/links/{id}/
      method: PUT
      auth: true
      docs: >
        Update the credentials of a specific link. If the successfully updated
        link is a recurrent one, we automatically trigger an update of the link.
        If we find fresh data, you'll [receive historical
        update](https://developers.belvo.com/docs/webhooks) webhooks.

        <div style="background-color:#f4f6f8; border-left: 6px solid
        #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px"> <strong>Note: </strong> We recommend using our <a
        href="https://developers.belvo.com/docs/connect-widget"
        target="_blank">Connect Widget</a> to handle updating
        <code>invalid</code> or <code>token_required</code> links. </div>
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `link.id` you want to update.
      display-name: Update a link's credentials
      request:
        name: LinksPutRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            password:
              type: string
              docs: The end-user's password used to log in to the institution.
            password2:
              type: optional<string>
              docs: >
                The end-user's second password used to log in to the
                institution.


                ‚ÑπÔ∏è This is only required by some institutions. To know which
                institutions require a second password, get the
                [details](https://developers.belvo.com/reference/detailinstitution)
                for the institution and check the `form_fields` array in the
                response.
            token:
              type: optional<string>
              docs: |
                The MFA token required by the bank to log in.
            username_type:
              type: optional<string>
              docs: |
                Type of document to be used as a username.

                  Some banking institutions accept different documents to be used as the `username` to login. For example, the *C√©dula de Ciudadan√≠a*, *C√©dula de Extranjer√≠a*, *Pasaporte'*, and so on.

                  For banks that require a document to log in, you **must** provide the `username_type` parameter to specify which document is used when creating the link.

                  ‚ÑπÔ∏è To know which institutions require the `username_type` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.

                  For a list of standards codes, see the table below.

                | Code | Description |
                |-----------|-------|
                | `001` | C√©dula de Ciudadan√≠a |
                | `002` | C√©dula de Extranjer√≠a |
                | `003` | Pasaporte |
                | `004` | Tarjeta de Identidad |
                | `005` | Registro Civil |
                | `006` | N√∫mero Identificaci√≥n Personal |
                | `020` | NIT |
                | `021` | NIT Persona Natural |
                | `022` | NIT Persona Extranjera |
                | `023` | NIT Persona Jur√≠dica |
                | `024` | NIT Menores |
                | `025` | NIT Desasociado |
                | `030` | Trj. Seguro Social Extranjero |
                | `031` | Sociedad Extranjera sin NIT en Colombia |
                | `032` | Fideicomiso |
                | `033` | RIF Venezuela |
                | `034` | CIF |
                | `035` | N√∫mero de Identidad |
                | `036` | RTN |
                | `037` | C√©dula de Identidad |
                | `038` | DIMEX |
                | `039` | CED |
                | `040` | PAS |
                | `041` | Documento √önico de Identidad |
                | `042` | NIT Salvadore√±o |
                | `100` | Ag√™ncia e conta |
                | `101` | C√≥digo do operador |
                | `102` | Cart√£o de cr√©dito |
                | `103` | CPF |
            certificate:
              type: optional<string>
              docs: >
                For certain fiscal institutions, it is possible to log in using
                a certificate and a private key, which enables a faster
                connection to the institution.


                Belvo supports a base64 encoded `certificate`. If the
                `certificate` parameter is used, you *must* also provide the
                `private_key` parameter.
            private_key:
              type: optional<string>
              docs: >
                For certain fiscal institutions, it is possible to log in using
                a certificate and a private key, which enables a faster
                connection to the institution.


                Belvo supports a base64 encoded `private_key`. If the
                `private_key` parameter is used, you *must* also provide the
                `certificate` parameter.
        content-type: application/json
      response:
        docs: Ok
        type: root.Link
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.NotFoundError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            password: password
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              institution: erebor_mx_retail
              access_mode: recurrent
              last_accessed_at: '2019-09-27T13:02:03Z'
              created_at: '2022-02-09T08:45:50Z'
              external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
              institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
              status: valid
              created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
              refresh_rate: 7d
          code-samples:
            - language: cURL
              code: |
                curl -X PUT https://sandbox.belvo.com/api/links/{id} \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "password": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Update a link

                link = client.Links.put(link="link_id", password="password")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.links.update(link: 'link-id', password: 'new-password')
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.links.update('linkID', 'newSuperSecret')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyLink:
      path: /api/links/{id}/
      method: DELETE
      auth: true
      docs: >-
        Delete a specific link and all associated accounts, transactions, and
        owners from your Belvo account.

        # Deleting links in batches

        To delete links in bulk, we recommend looping through the list of links
        you want to delete and making the delete request.

          > üöß **Rate limiting and IP blocking**
          > 
          > An important technical note for performing operations in batches is to take into consideration our rate-limiting: up to 80 requests every 30 seconds. If you exceed this limit, you run the risk of Belvo blocking your IP from making further requests.
          > 
          > For more information, or if your IP address has been blocked, please contact our [support team](https://support.belvo.com/hc/en-us/requests/new).
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `link.id` that you want to delete.
      display-name: Delete a link
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/links/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                client.Links.delete("link_id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.links.delete id: 'link-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.links.delete('linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    ChangeLinkAccessMode:
      path: /api/links/{id}/
      method: PATCH
      auth: true
      docs: >-
        Change a link's access mode from `single` to `recurrent` or from
        `recurrent` to single.

        ‚ÑπÔ∏è **Note**: When you change a link from `single`` to `recurrent`, they
        will only be updated the next day at the scheduled interval.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `link.id` you want to change the `access_mode` for.
      display-name: Change a link's access mode
      request:
        name: ChangeAccessMode
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            access_mode: root.EnumLinkAccessModeRequest
        content-type: application/json
      response:
        docs: Ok
        type: root.Link
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.NotFoundError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - path-parameters:
            id: e4bb1afb-4a4f-4dd6-8be0-e615d233185b
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            access_mode: single
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              institution: erebor_mx_retail
              access_mode: recurrent
              last_accessed_at: '2019-09-27T13:02:03Z'
              created_at: '2022-02-09T08:45:50Z'
              external_id: 56ab5706-6e00-48a4-91c9-ca55968678d9
              institution_user_id: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
              status: valid
              created_by: bcef7f35-67f2-4b19-b009-cb38795faf09
              refresh_rate: 7d
  source:
    openapi: ../openapi.yml
  display-name: Links
docs: >-
  A **Link** is a set of credentials associated to an end-user's access to an
  **institution**.


  <div style="background-color:#f4f6f8; border-left: 6px solid #808080;padding:
  12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">

  <strong>Example: </strong> The username and password combination used to log
  in to an online banking application would be a link.

  </div>


  You will need to register a **Link** before accessing information from that
  specific end-user, such as account or transaction details.


  <div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding:
  12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">

  <strong>Note: </strong> We recommend using our <a
  href="https://developers.belvo.com/docs/connect-widget"
  target="_blank">Connect Widget</a> to handle link creation and link status
  updates.

  </div>


  You have the possibility to register two types of links:


  ### Recurrent links (default)


  With recurrent links, Belvo automatically refreshes information weekly and
  notifies you via [Webhooks](https://developers.belvo.com/docs/webhooks) so you
  always have up-to-date data. Then, when you receive the webhook, you can make
  GET requests to the List or Detail endpoints to instantly access up-to-date
  information, without needing to connect to the institution.


  <img src="https://files.readme.io/7b6c0d4-Recurrent_Link_FLow.png"
  alt="fiscal-endpoints" width="950">


  You can also make POST calls directly to the institution, as with single
  links, as soon as the link is created. However, we recommend you follow the
  flow described above (waiting for the webhook event) for a more optimal
  experience.


  ### Single links


  Single links are used to perform ad hoc data access to accounts, owners,
  transactions, and so on. For example, you can use it when you want to do an
  underwriting process to assess risk before lending money.


  For single links, you have to perform POST calls to an institution **every
  time** you want to access fresh data.


  <img src="https://files.readme.io/eda7956-Single_Link_Flow.svg"
  alt="fiscal-endpoints" width="950">
",
    },
    "owners.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "An **owner** represents the person who has access to a Link and is the owner of all the accounts inside the Link.

You can use this endpoint in order to get useful information about your client, such as:

- their full name
- key contact information
- information about the ID document they used when opening the account

### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field         | Available Filters                 |
| ------------- | --------------------------------- |
| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |
| `email`       | `=`                               |
| `id`          | `=`, `in`                         |
| `link`        | `=`, `in`                         |

```curl cURL
# Filtering results so that you get the emails of one link:
https://sandbox.belvo.com/api/owners/?email=filtering@belvo.com

```
```javascript Node
// Filtering results so that you get the emails of one link:
client.owners.list({
  filters: {
    email: "filtering@belvo.com"
  }
})

```
```python Python
# Filtering results so that you get the emails of one link:
client.Owners.list(email="filtering@belvo.com")

```
```ruby Ruby
# Filtering results so that you get the emails of one link:
client.owners.list(params: {
  email: "filtering@belvo.com"
})

})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Owners",
          "endpoints": {
            "DestroyOwner": {
              "auth": true,
              "display-name": "Delete an owner",
              "docs": "Delete a specific owner from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/owners/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete a owner
client.Owners.delete("owner-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.owners.delete id: 'owner-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.owners.delete('ownerId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/owners/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `owner.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailOwner": {
              "auth": true,
              "display-name": "Get an owner's details",
              "docs": "Get the details of a specific owner.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/owners/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a owner
owner = client.Owners.get(id="owner-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.owners.detail id: 'owner-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.owners.detail('ownerId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Banking",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "address": "Retorno Gran Canaria 453 723
Cancun, COL 10447",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "display_name": "Maria Martinez Martin",
                      "document_id": {
                        "document_number": "235578435-S",
                        "document_type": "CPF",
                      },
                      "email": "maria@acme.com",
                      "id": "2b22f123-7c3a-4518-9ac2-863eb5d4613c",
                      "internal_identification": "7e5838e4",
                      "link": "c38fb126-fc98-4d6c-8c80-587a97dd56cf",
                      "phone_number": "90090508357",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/owners/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `owner.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailOwnerRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Owner",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListOwners": {
              "auth": true,
              "display-name": "List all owners",
              "docs": "Get a paginated list of all existing owners in your Belvo account. We return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/owners/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List owners
for owner in client.Owners.list():
    pprint(owner)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.owners.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.owners.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Banking",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "display_name__icontains": "Daniela",
                    "email": "lopes.d@gmail.com",
                    "fields": "link,balance,account",
                    "id": "73694155-b871-41ec-94e3-37d17ff62b5d",
                    "id__in": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 108,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "address": "Retorno Gran Canaria 453 723
Cancun, COL 10447",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "display_name": "Maria Martinez Martin",
                          "document_id": {
                            "document_number": "235578435-S",
                            "document_type": "CPF",
                          },
                          "email": "maria@acme.com",
                          "id": "c749315b-eec2-435d-a458-06912878564f",
                          "internal_identification": "7e5838e4",
                          "link": "c38fb126-fc98-4d6c-8c80-587a97dd56cf",
                          "phone_number": "90090508357",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/owners/",
              "request": {
                "name": "ListOwnersRequest",
                "query-parameters": {
                  "created_at__gt": {
                    "docs": "Return owners that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return owners that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return owners that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return owners that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return owners that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "display_name__icontains": {
                    "docs": "Return owners whose full display name partially matches your query. For example, `mar` will return results for Mark, Maria, Neymar, Remarque, and so on.",
                    "type": "optional<string>",
                  },
                  "email": {
                    "docs": "Returns owners whose email address match your query.",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information only for this `owner.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information only for these `owner.id`s.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "Return information only for this `link.id`.",
                    "type": "optional<string>",
                  },
                  "link__in": {
                    "docs": "Return balances only for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.OwnersPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchOwners": {
              "auth": true,
              "display-name": "Complete an owners request",
              "docs": "Used to resume an Owner retrieve session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/owners/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume owners
owners = client.Owners.resume(
  session="session-id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.owners.resume(
  session: 'session-id',
  token: 'token',
  link: 'link-id',
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.owners.resume('yourSessionId', 'yourOTPToken', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Banking",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "address": "Retorno Gran Canaria 453 723
Cancun, COL 10447",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "display_name": "Maria Martinez Martin",
                        "document_id": {
                          "document_number": "235578435-S",
                          "document_type": "CPF",
                        },
                        "email": "maria@acme.com",
                        "id": "2b22f123-7c3a-4518-9ac2-863eb5d4613c",
                        "internal_identification": "7e5838e4",
                        "link": "c38fb126-fc98-4d6c-8c80-587a97dd56cf",
                        "phone_number": "90090508357",
                      },
                    ],
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/owners/",
              "request": {
                "body": "root.PatchBody",
                "content-type": "application/json",
                "name": "PatchOwnersRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<root.Owner>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveOwners": {
              "auth": true,
              "display-name": "Retrieve owners for a link",
              "docs": "Retrieve owner information from a specific link.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/owners/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": ""
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve owners
owners = client.Owners.create(
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.owners.retrieve(link: 'link-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.owners.retrieve('linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Banking",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "address": "Retorno Gran Canaria 453 723
Cancun, COL 10447",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "display_name": "Maria Martinez Martin",
                        "document_id": {
                          "document_number": "235578435-S",
                          "document_type": "CPF",
                        },
                        "email": "maria@acme.com",
                        "id": "2b22f123-7c3a-4518-9ac2-863eb5d4613c",
                        "internal_identification": "7e5838e4",
                        "link": "c38fb126-fc98-4d6c-8c80-587a97dd56cf",
                        "phone_number": "90090508357",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/owners/",
              "request": {
                "body": "root.StandardRequest",
                "content-type": "application/json",
                "name": "RetrieveOwnersRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<root.Owner>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListOwners:
      path: /api/owners/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing owners in your Belvo account. We
        return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all owners
      request:
        name: ListOwnersRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          created_at__gt:
            type: optional<string>
            docs: >-
              Return owners that were last updated in Belvo's database after
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return owners that were last updated in Belvo's database after or
              on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return owners that were last updated in Belvo's database before
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return owners that were last updated in Belvo's database before or
              on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return owners that were last updated in Belvo's database between
              two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          display_name__icontains:
            type: optional<string>
            docs: >-
              Return owners whose full display name partially matches your
              query. For example, `mar` will return results for Mark, Maria,
              Neymar, Remarque, and so on.
          email:
            type: optional<string>
            docs: Returns owners whose email address match your query.
          id:
            type: optional<string>
            docs: Return information only for this `owner.id`.
          id__in:
            type: optional<string>
            docs: Return information only for these `owner.id`s.
          link:
            type: optional<string>
            docs: Return information only for this `link.id`.
          link__in:
            type: optional<string>
            docs: Return balances only for these `link.id`s.
      response:
        docs: Ok
        type: root.OwnersPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - name: Banking
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            display_name__icontains: Daniela
            email: lopes.d@gmail.com
            id: 73694155-b871-41ec-94e3-37d17ff62b5d
            id__in: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 108
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: c749315b-eec2-435d-a458-06912878564f
                  link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
                  internal_identification: 7e5838e4
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  display_name: Maria Martinez Martin
                  email: maria@acme.com
                  phone_number: '90090508357'
                  address: |-
                    Retorno Gran Canaria 453 723
                    Cancun, COL 10447
                  document_id:
                    document_type: CPF
                    document_number: 235578435-S
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/owners/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List owners

                for owner in client.Owners.list():
                    pprint(owner)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.owners.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.owners.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveOwners:
      path: /api/owners/
      method: POST
      auth: true
      docs: Retrieve owner information from a specific link.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve owners for a link
      request:
        body: root.StandardRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: RetrieveOwnersRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<root.Owner>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - name: Banking
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              - id: 2b22f123-7c3a-4518-9ac2-863eb5d4613c
                link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
                internal_identification: 7e5838e4
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                display_name: Maria Martinez Martin
                email: maria@acme.com
                phone_number: '90090508357'
                address: |-
                  Retorno Gran Canaria 453 723
                  Cancun, COL 10447
                document_id:
                  document_type: CPF
                  document_number: 235578435-S
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/owners/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": ""
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve owners

                owners = client.Owners.create(
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.owners.retrieve(link: 'link-id')
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.owners.retrieve('linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchOwners:
      path: /api/owners/
      method: PATCH
      auth: true
      docs: >-
        Used to resume an Owner retrieve session that was paused because an MFA
        token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete an owners request
      request:
        body: root.PatchBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchOwnersRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<root.Owner>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - name: Banking
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 2b22f123-7c3a-4518-9ac2-863eb5d4613c
                link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
                internal_identification: 7e5838e4
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                display_name: Maria Martinez Martin
                email: maria@acme.com
                phone_number: '90090508357'
                address: |-
                  Retorno Gran Canaria 453 723
                  Cancun, COL 10447
                document_id:
                  document_type: CPF
                  document_number: 235578435-S
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/owners/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume owners

                owners = client.Owners.resume(
                  session="session-id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.owners.resume(
                  session: 'session-id',
                  token: 'token',
                  link: 'link-id',
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.owners.resume('yourSessionId', 'yourOTPToken', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailOwner:
      path: /api/owners/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific owner.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `owner.id` you want to get detailed information about.
      display-name: Get an owner's details
      request:
        name: DetailOwnerRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.Owner
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: Banking
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 2b22f123-7c3a-4518-9ac2-863eb5d4613c
              link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
              internal_identification: 7e5838e4
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              display_name: Maria Martinez Martin
              email: maria@acme.com
              phone_number: '90090508357'
              address: |-
                Retorno Gran Canaria 453 723
                Cancun, COL 10447
              document_id:
                document_type: CPF
                document_number: 235578435-S
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/owners/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a owner

                owner = client.Owners.get(id="owner-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.owners.detail id: 'owner-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.owners.detail('ownerId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyOwner:
      path: /api/owners/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific owner from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `owner.id` that you want to delete.
      display-name: Delete an owner
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/owners/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete a owner

                client.Owners.delete("owner-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.owners.delete id: 'owner-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.owners.delete('ownerId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Owners
docs: >-
  An **owner** represents the person who has access to a Link and is the owner
  of all the accounts inside the Link.


  You can use this endpoint in order to get useful information about your
  client, such as:


  - their full name

  - key contact information

  - information about the ID document they used when opening the account


  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field         | Available Filters                 |

  | ------------- | --------------------------------- |

  | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

  | `email`       | `=`                               |

  | `id`          | `=`, `in`                         |

  | `link`        | `=`, `in`                         |


  ```curl cURL

  # Filtering results so that you get the emails of one link:

  https://sandbox.belvo.com/api/owners/?email=filtering@belvo.com


  ```

  ```javascript Node

  // Filtering results so that you get the emails of one link:

  client.owners.list({
    filters: {
      email: "filtering@belvo.com"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get the emails of one link:

  client.Owners.list(email="filtering@belvo.com")


  ```

  ```ruby Ruby

  # Filtering results so that you get the emails of one link:

  client.owners.list(params: {
    email: "filtering@belvo.com"
  })


  })

  ```
",
    },
    "paymentInstitutions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "A **payment institution** is an entity that Belvo can access information from. You can see a complete list of institutions available for payments by making a List request to this endpoint.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Payment Institutions",
          "endpoints": {
            "DetailPaymentInstitution": {
              "auth": true,
              "display-name": "Get details about a payment institution",
              "docs": "Get the details about a specific payment institution",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "active": true,
                      "country": "BRA",
                      "display_name": "Wakanda National Bank",
                      "form_fields": [
                        {
                          "label": "Document",
                          "length": 6,
                          "name": "username",
                          "optional": false,
                          "placeholder": "Username",
                          "type": "text",
                          "validation": "^.{1,}$",
                          "validation_message": "Invalid client number",
                          "values": [
                            {
                              "code": "001",
                              "label": "C√©dula de Ciudadan√≠a",
                              "placeholder": "DEF4444908M22",
                              "validation": "^.{1,}$",
                              "validation_message": "Invalid document number",
                            },
                          ],
                        },
                      ],
                      "icon_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png",
                      "id": "bbaceead-7b96-46d8-9354-38dec9707004",
                      "legal_entity_name": "Wakanda Bank, National Association",
                      "logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png",
                      "name": "wakanda_national",
                      "primary_color": "#fdbc24",
                      "text_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png",
                      "website": "https://www.wakandanational.com",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/institutions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The payment `institution.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentInstitution",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListPaymentInstitutions": {
              "auth": true,
              "display-name": "List all payment institutions",
              "docs": "List all available payment institutions.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "country": "COL",
                    "country__in": "COL,BRA",
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "page": 1,
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://belvo.com/payments/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "active": true,
                          "country": "BRA",
                          "display_name": "Wakanda National Bank",
                          "form_fields": [
                            {
                              "label": "Document",
                              "length": 6,
                              "name": "username",
                              "optional": false,
                              "placeholder": "Username",
                              "type": "text",
                              "validation": "^.{1,}$",
                              "validation_message": "Invalid client number",
                            },
                          ],
                          "icon_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png",
                          "id": "bbaceead-7b96-46d8-9354-38dec9707004",
                          "legal_entity_name": "Wakanda Bank, National Association",
                          "logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png",
                          "name": "wakanda_national",
                          "primary_color": "#fdbc24",
                          "text_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png",
                          "website": "https://www.wakandanational.com",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/institutions/",
              "request": {
                "name": "ListPaymentInstitutionsRequest",
                "query-parameters": {
                  "country": {
                    "docs": "Return institutions only for this country.",
                    "type": "optional<string>",
                  },
                  "country__in": {
                    "docs": "Return institutions only for one of these countries.",
                    "type": "optional<string>",
                  },
                  "created_at": {
                    "docs": "Return results only for this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return results only after this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return results only for this date and after (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return results only before this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return results only for this date and before (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return results between this date range (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentsInstitutionsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListPaymentInstitutions:
      path: /payments/institutions/
      method: GET
      auth: true
      docs: List all available payment institutions.
      source:
        openapi: ../openapi.yml
      display-name: List all payment institutions
      request:
        name: ListPaymentInstitutionsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          country:
            type: optional<string>
            docs: Return institutions only for this country.
          country__in:
            type: optional<string>
            docs: Return institutions only for one of these countries.
          created_at:
            type: optional<string>
            docs: Return results only for this date (in `YYYY-MM-DD` format).
          created_at__gt:
            type: optional<string>
            docs: Return results only after this date (in `YYYY-MM-DD` format).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return results only for this date and after (in `YYYY-MM-DD`
              format).
          created_at__lt:
            type: optional<string>
            docs: Return results only before this date (in `YYYY-MM-DD` format).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return results only for this date and before (in `YYYY-MM-DD`
              format).
          created_at__range:
            type: optional<string>
            docs: Return results between this date range (in `YYYY-MM-DD` format).
      response:
        docs: OK
        type: root.PaymentsInstitutionsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            country: COL
            country__in: COL,BRA
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
          response:
            body:
              count: 130
              next: https://belvo.com/payments/{endpoint}/?page=2
              previous: previous
              results:
                - id: bbaceead-7b96-46d8-9354-38dec9707004
                  active: true
                  name: wakanda_national
                  display_name: Wakanda National Bank
                  legal_entity_name: Wakanda Bank, National Association
                  website: https://www.wakandanational.com
                  logo: >-
                    https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png
                  icon_logo: >-
                    https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png
                  text_logo: >-
                    https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png
                  primary_color: '#fdbc24'
                  country: BRA
                  form_fields:
                    - name: username
                      type: text
                      label: Document
                      validation: ^.{1,}$
                      placeholder: Username
                      validation_message: Invalid client number
                      length: 6
                      optional: false
    DetailPaymentInstitution:
      path: /payments/institutions/{id}/
      method: GET
      auth: true
      docs: Get the details about a specific payment institution
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: >-
            The payment `institution.id` you want to get detailed information
            about.
      display-name: Get details about a payment institution
      response:
        docs: OK
        type: root.PaymentInstitution
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: bbaceead-7b96-46d8-9354-38dec9707004
              active: true
              name: wakanda_national
              display_name: Wakanda National Bank
              legal_entity_name: Wakanda Bank, National Association
              website: https://www.wakandanational.com
              logo: >-
                https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png
              icon_logo: >-
                https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png
              text_logo: >-
                https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png
              primary_color: '#fdbc24'
              country: BRA
              form_fields:
                - name: username
                  type: text
                  label: Document
                  validation: ^.{1,}$
                  placeholder: Username
                  validation_message: Invalid client number
                  values:
                    - code: '001'
                      label: C√©dula de Ciudadan√≠a
                      validation: ^.{1,}$
                      validation_message: Invalid document number
                      placeholder: DEF4444908M22
                  length: 6
                  optional: false
  source:
    openapi: ../openapi.yml
  display-name: Payment Institutions
docs: >
  A **payment institution** is an entity that Belvo can access information from.
  You can see a complete list of institutions available for payments by making a
  List request to this endpoint.
",
    },
    "paymentIntents.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
A **payment intent** is a single point of access to create payments using any payment method offered by Belvo.

A payment intent captures all payment information (such as the amount to be charged, the description of the payment, the provider, and so on) and guides your customers through the payment flow.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Payment Intents",
          "endpoints": {
            "CreatePaymentIntent": {
              "auth": true,
              "display-name": "Create a new payment intent",
              "docs": "Create a payment intent.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "allowed_payment_method_types": [
                      "open_finance",
                    ],
                    "amount": "350000",
                    "customer": "06dc2f14-1217-4480-9b36-550a944a39d1",
                    "description": "Training shoes",
                    "payment_method_details": {
                      "pse": {
                        "belvo_flow": true,
                        "beneficiary_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                      },
                    },
                    "provider": "belvo",
                  },
                  "response": {
                    "body": {
                      "allowed_payment_method_types": [
                        "open_finance",
                      ],
                      "amount": "350000.00",
                      "charges": [
                        {
                          "amount": "100.12",
                          "beneficiary": "58524ccc-89ac-4ab6-b62b-c3da3f19a722",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "currency": "BRL",
                          "customer": "531aa631-70a0-4eeb-ab97-51dea3e90c89",
                          "description": "Training shoes",
                          "failure_code": "failure_code",
                          "failure_message": "failure_message",
                          "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "metadata": {
                            "internal_reference_id": "GGq73487w2",
                          },
                          "payment_intent": "50c04229-7b1d-4a53-951c-8ad53e10c6ca",
                          "payment_method_details": {},
                          "payment_method_information": {},
                          "payment_method_type": "open_finance",
                          "provider": "belvo",
                          "status": "PENDING",
                          "transactions": [
                            {
                              "amount": "1020.00",
                              "beneficiary": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                              "created_at": "2022-02-09T08:45:50Z",
                              "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                              "currency": "BRL",
                              "customer": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310",
                              "description": "Training shoes",
                              "id": "fd0f3303-cafb-47ea-9753-21155cb144ab",
                              "payer": {
                                "key": "value",
                              },
                              "payment_intent": "004a28bb-fac2-4172-884b-5b6ea15314ad",
                              "transaction_type": "INFLOW",
                            },
                          ],
                          "updated_at": "2022-02-09T08:45:50Z",
                        },
                      ],
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "currency": "BRL",
                      "customer": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "description": "Training shoes",
                      "failure_code": "failure_code",
                      "failure_message": "failure_message",
                      "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "last_error": {
                        "error_code": "invalid_credentials",
                        "error_message": "The credentials sent are incorrect, please try again.",
                      },
                      "metadata": {
                        "internal_reference_id": "GGq73487w2",
                      },
                      "next_step": {
                        "pse_display_confirmation_required": {
                          "payer_institution": {
                            "active": true,
                            "display_name": "Wakanda National Bank",
                            "icon_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png",
                            "id": "bbaceead-7b96-46d8-9354-38dec9707004",
                            "logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png",
                            "name": "wakanda_national",
                            "primary_color": "#fdbc24",
                            "text_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png",
                            "website": "https://www.wakandanational.com",
                          },
                        },
                        "ready_to_confirm": true,
                        "type": "pse_display_confirmation_required",
                      },
                      "payment_method_details": {
                        "pse": {
                          "belvo_flow": true,
                          "beneficiary_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                          "callback_url": "https://www.acmecorp.com/checkout/3487321",
                          "password": "***",
                          "payer_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                          "payer_institution": "db201c6a-e0ee-4caa-92d6-72b480d6d86f",
                          "username": "***",
                        },
                      },
                      "payment_method_information": {
                        "pse": {
                          "bank_payment_id": "456213985641233659874512459842",
                          "end_to_end_id": "2007300520",
                          "provider_request_id": "c978c0c97ea847e78e8849634473c1f1",
                          "redirect_url": "https://wakandanational.com/",
                        },
                      },
                      "provider": "belvo",
                      "selected_payment_method_type": "open_finance",
                      "status": "REQUIRES_PAYMENT_METHOD",
                      "updated_at": "2022-02-09T08:45:50Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/payments/payment-intents/",
              "request": {
                "body": {
                  "properties": {
                    "allowed_payment_method_types": {
                      "docs": "A list of payment method types allowed in this payment intent. For PSE, this value must be set to `pse`.",
                      "type": "list<root.EnumPaymentLinkAllowedPaymentMethod>",
                    },
                    "amount": {
                      "docs": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: `350000`.

**Note:** You can send through this value either as a string or an integer. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `350000.00`.
",
                      "type": "CreatePaymentIntentPseAmount",
                    },
                    "customer": {
                      "docs": "Belvo's unique ID to reference the customer.
",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "description": {
                      "docs": "The description of the payment.
",
                      "type": "string",
                    },
                    "metadata": {
                      "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.

‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
                      "type": "optional<map<string, unknown>>",
                    },
                    "payment_method_details": {
                      "type": "root.PSE",
                    },
                    "provider": "root.EnumPaymentLinkProvider",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreatePaymentIntentPse",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK (Created)",
                "status-code": 201,
                "type": "root.PaymentIntentPse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailPaymentIntent": {
              "auth": true,
              "display-name": "Get details about a payment intent",
              "docs": "Get the details about a specific payment intent.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "allowed_payment_method_types": [
                        "open_finance",
                      ],
                      "amount": "350000.00",
                      "charges": [
                        {
                          "amount": "100.12",
                          "beneficiary": "58524ccc-89ac-4ab6-b62b-c3da3f19a722",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "currency": "BRL",
                          "customer": "531aa631-70a0-4eeb-ab97-51dea3e90c89",
                          "description": "Training shoes",
                          "failure_code": "failure_code",
                          "failure_message": "failure_message",
                          "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "metadata": {
                            "internal_reference_id": "GGq73487w2",
                          },
                          "payment_intent": "50c04229-7b1d-4a53-951c-8ad53e10c6ca",
                          "payment_method_details": {},
                          "payment_method_information": {},
                          "payment_method_type": "open_finance",
                          "provider": "belvo",
                          "status": "PENDING",
                          "transactions": [
                            {
                              "amount": "1020.00",
                              "beneficiary": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                              "created_at": "2022-02-09T08:45:50Z",
                              "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                              "currency": "BRL",
                              "customer": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310",
                              "description": "Training shoes",
                              "id": "fd0f3303-cafb-47ea-9753-21155cb144ab",
                              "payer": {
                                "key": "value",
                              },
                              "payment_intent": "004a28bb-fac2-4172-884b-5b6ea15314ad",
                              "transaction_type": "INFLOW",
                            },
                          ],
                          "updated_at": "2022-02-09T08:45:50Z",
                        },
                      ],
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "currency": "BRL",
                      "customer": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "description": "Training shoes",
                      "failure_code": "failure_code",
                      "failure_message": "failure_message",
                      "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "last_error": {
                        "error_code": "invalid_credentials",
                        "error_message": "The credentials sent are incorrect, please try again.",
                      },
                      "metadata": {
                        "internal_reference_id": "GGq73487w2",
                      },
                      "next_step": {
                        "pse_display_confirmation_required": {
                          "payer_institution": {
                            "active": true,
                            "display_name": "Wakanda National Bank",
                            "icon_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png",
                            "id": "bbaceead-7b96-46d8-9354-38dec9707004",
                            "logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png",
                            "name": "wakanda_national",
                            "primary_color": "#fdbc24",
                            "text_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png",
                            "website": "https://www.wakandanational.com",
                          },
                        },
                        "ready_to_confirm": true,
                        "type": "pse_display_confirmation_required",
                      },
                      "payment_method_details": {
                        "pse": {
                          "belvo_flow": true,
                          "beneficiary_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                          "callback_url": "https://www.acmecorp.com/checkout/3487321",
                          "password": "***",
                          "payer_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                          "payer_institution": "db201c6a-e0ee-4caa-92d6-72b480d6d86f",
                          "username": "***",
                        },
                      },
                      "payment_method_information": {
                        "pse": {
                          "bank_payment_id": "456213985641233659874512459842",
                          "end_to_end_id": "2007300520",
                          "provider_request_id": "c978c0c97ea847e78e8849634473c1f1",
                          "redirect_url": "https://wakandanational.com/",
                        },
                      },
                      "provider": "belvo",
                      "selected_payment_method_type": "open_finance",
                      "status": "REQUIRES_PAYMENT_METHOD",
                      "updated_at": "2022-02-09T08:45:50Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/payment-intents/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `payment-intent.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentIntentPse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListPaymentIntents": {
              "auth": true,
              "display-name": "List all payment intents",
              "docs": "List all payment intents associated with your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "amount": "1000.00",
                    "amount__gt": "1000.00",
                    "amount__gte": "1000.00",
                    "amount__lt": "1000.00",
                    "amount__lte": "1000.00",
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "customer": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "customer__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "id__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "page": 1,
                    "payment_method_type": "pse",
                    "provider": "payments_way",
                    "status": "SUCCEEDED",
                    "status__in": "PROCESSING,SUCCEEDED",
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "allowed_payment_method_types": [
                            "open_finance",
                          ],
                          "amount": "350000.00",
                          "charges": [
                            {
                              "amount": "100.12",
                              "beneficiary": "58524ccc-89ac-4ab6-b62b-c3da3f19a722",
                              "created_at": "2022-02-09T08:45:50Z",
                              "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                              "customer": "531aa631-70a0-4eeb-ab97-51dea3e90c89",
                              "description": "Training shoes",
                              "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                              "metadata": {
                                "internal_reference_id": "GGq73487w2",
                              },
                              "payment_intent": "50c04229-7b1d-4a53-951c-8ad53e10c6ca",
                              "payment_method_details": {},
                              "payment_method_information": {},
                              "provider": "belvo",
                              "status": "PENDING",
                              "transactions": [
                                {
                                  "amount": "1020.00",
                                  "beneficiary": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                                  "created_at": "2022-02-09T08:45:50Z",
                                  "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                                  "currency": "BRL",
                                  "customer": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310",
                                  "description": "Training shoes",
                                  "id": "fd0f3303-cafb-47ea-9753-21155cb144ab",
                                  "payer": {
                                    "key": "value",
                                  },
                                  "payment_intent": "004a28bb-fac2-4172-884b-5b6ea15314ad",
                                  "transaction_type": "INFLOW",
                                },
                              ],
                              "updated_at": "2022-02-09T08:45:50Z",
                            },
                          ],
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "currency": "BRL",
                          "customer": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "description": "Training shoes",
                          "failure_code": "failure_code",
                          "failure_message": "failure_message",
                          "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "last_error": {
                            "error_code": "invalid_credentials",
                            "error_message": "The credentials sent are incorrect, please try again.",
                          },
                          "metadata": {
                            "internal_reference_id": "GGq73487w2",
                          },
                          "next_step": {
                            "ready_to_confirm": true,
                            "type": "pse_display_confirmation_required",
                          },
                          "payment_method_details": {
                            "pse": {
                              "belvo_flow": true,
                              "beneficiary_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                              "callback_url": "https://www.acmecorp.com/checkout/3487321",
                              "password": "***",
                              "payer_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                              "payer_institution": "db201c6a-e0ee-4caa-92d6-72b480d6d86f",
                              "username": "***",
                            },
                          },
                          "payment_method_information": {},
                          "provider": "belvo",
                          "selected_payment_method_type": "open_finance",
                          "status": "REQUIRES_PAYMENT_METHOD",
                          "updated_at": "2022-02-09T08:45:50Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/payment-intents/",
              "request": {
                "name": "ListPaymentIntentsRequest",
                "query-parameters": {
                  "amount": {
                    "docs": "Return results only for this value.",
                    "type": "optional<string>",
                  },
                  "amount__gt": {
                    "docs": "Return results only for more than this amount.",
                    "type": "optional<string>",
                  },
                  "amount__gte": {
                    "docs": "Return results only for and more than this amount.",
                    "type": "optional<string>",
                  },
                  "amount__lt": {
                    "docs": "Return results only for less than this amount.",
                    "type": "optional<string>",
                  },
                  "amount__lte": {
                    "docs": "Return results only for this amount or less.",
                    "type": "optional<string>",
                  },
                  "created_at": {
                    "docs": "Return results only for this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return results only after this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return results only for this date and after (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return results only before this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return results only for this date and before (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return results between this date range (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "customer": {
                    "docs": "The `customer.id` you want to get results for.",
                    "type": "optional<string>",
                  },
                  "customer__in": {
                    "docs": "One or more `customer.id`s (comma separated) that you want to get results for.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "One or more `payment-intent.id`s (comma separated) that you want to get results for.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "payment_method_type": {
                    "docs": "Return results only for this value.",
                    "type": "optional<string>",
                  },
                  "provider": {
                    "docs": "Return results only for this value.",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "Return results only for this value.",
                    "type": "optional<string>",
                  },
                  "status__in": {
                    "docs": "Return results for listed status.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentIntentPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchPaymentIntent": {
              "auth": true,
              "display-name": "Complete a payment intent",
              "docs": "Complete a new payment intent.

During the payment intent flow, you need to fill in the payment intent with required information about your customer (their institution, bank account, and login credentials). This is done by sending PATCH requests with the information that Belvo asked you display in each `next_step` object. If you need more information on how to complete a payment intent, check our <a href="https://developers.belvo.com/docs/colombia-pse#payment-intents" target="_blank">PSE payment initiation</a> guides for  üá®üá¥ Colombia.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "request": {
                    "payment_method_details": {},
                  },
                  "response": {
                    "body": {
                      "allowed_payment_method_types": [
                        "open_finance",
                      ],
                      "amount": "350000.00",
                      "charges": [
                        {
                          "amount": "100.12",
                          "beneficiary": "58524ccc-89ac-4ab6-b62b-c3da3f19a722",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "currency": "BRL",
                          "customer": "531aa631-70a0-4eeb-ab97-51dea3e90c89",
                          "description": "Training shoes",
                          "failure_code": "failure_code",
                          "failure_message": "failure_message",
                          "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "metadata": {
                            "internal_reference_id": "GGq73487w2",
                          },
                          "payment_intent": "50c04229-7b1d-4a53-951c-8ad53e10c6ca",
                          "payment_method_details": {},
                          "payment_method_information": {},
                          "payment_method_type": "open_finance",
                          "provider": "belvo",
                          "status": "PENDING",
                          "transactions": [
                            {
                              "amount": "1020.00",
                              "beneficiary": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                              "created_at": "2022-02-09T08:45:50Z",
                              "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                              "currency": "BRL",
                              "customer": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310",
                              "description": "Training shoes",
                              "id": "fd0f3303-cafb-47ea-9753-21155cb144ab",
                              "payer": {
                                "key": "value",
                              },
                              "payment_intent": "004a28bb-fac2-4172-884b-5b6ea15314ad",
                              "transaction_type": "INFLOW",
                            },
                          ],
                          "updated_at": "2022-02-09T08:45:50Z",
                        },
                      ],
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "currency": "BRL",
                      "customer": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "description": "Training shoes",
                      "failure_code": "failure_code",
                      "failure_message": "failure_message",
                      "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "last_error": {
                        "error_code": "invalid_credentials",
                        "error_message": "The credentials sent are incorrect, please try again.",
                      },
                      "metadata": {
                        "internal_reference_id": "GGq73487w2",
                      },
                      "next_step": {
                        "pse_display_confirmation_required": {
                          "payer_institution": {
                            "active": true,
                            "display_name": "Wakanda National Bank",
                            "icon_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png",
                            "id": "bbaceead-7b96-46d8-9354-38dec9707004",
                            "logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png",
                            "name": "wakanda_national",
                            "primary_color": "#fdbc24",
                            "text_logo": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png",
                            "website": "https://www.wakandanational.com",
                          },
                        },
                        "ready_to_confirm": true,
                        "type": "pse_display_confirmation_required",
                      },
                      "payment_method_details": {
                        "pse": {
                          "belvo_flow": true,
                          "beneficiary_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                          "callback_url": "https://www.acmecorp.com/checkout/3487321",
                          "password": "***",
                          "payer_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                          "payer_institution": "db201c6a-e0ee-4caa-92d6-72b480d6d86f",
                          "username": "***",
                        },
                      },
                      "payment_method_information": {
                        "pse": {
                          "bank_payment_id": "456213985641233659874512459842",
                          "end_to_end_id": "2007300520",
                          "provider_request_id": "c978c0c97ea847e78e8849634473c1f1",
                          "redirect_url": "https://wakandanational.com/",
                        },
                      },
                      "provider": "belvo",
                      "selected_payment_method_type": "open_finance",
                      "status": "REQUIRES_PAYMENT_METHOD",
                      "updated_at": "2022-02-09T08:45:50Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/payments/payment-intents/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `payment-intent.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "confirm": {
                      "docs": "Boolean that indicates whether this request confirms the payment intent. 

**Note:** You'll need to send this parameter set to `true` when the payment intent next_step returns `ready_to_confirm: true`, meaning the payment intent is ready to be confirmed.",
                      "type": "optional<boolean>",
                    },
                    "payment_method_details": {
                      "type": "root.PatchPaymentIntentsBodyPse",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "PatchPaymentIntentPse",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK (Created)",
                "status-code": 200,
                "type": "root.PaymentIntentPse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "CreatePaymentIntentPseAmount": {
            "discriminated": false,
            "docs": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: `350000`.

**Note:** You can send through this value either as a string or an integer. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `350000.00`.
",
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[1-9]\d{0,9}",
                },
              },
              "long",
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListPaymentIntents:
      path: /payments/payment-intents/
      method: GET
      auth: true
      docs: List all payment intents associated with your Belvo account.
      source:
        openapi: ../openapi.yml
      display-name: List all payment intents
      request:
        name: ListPaymentIntentsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          id__in:
            type: optional<string>
            docs: >-
              One or more `payment-intent.id`s (comma separated) that you want
              to get results for.
          created_at:
            type: optional<string>
            docs: Return results only for this date (in `YYYY-MM-DD` format).
          created_at__gt:
            type: optional<string>
            docs: Return results only after this date (in `YYYY-MM-DD` format).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return results only for this date and after (in `YYYY-MM-DD`
              format).
          created_at__lt:
            type: optional<string>
            docs: Return results only before this date (in `YYYY-MM-DD` format).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return results only for this date and before (in `YYYY-MM-DD`
              format).
          created_at__range:
            type: optional<string>
            docs: Return results between this date range (in `YYYY-MM-DD` format).
          provider:
            type: optional<string>
            docs: Return results only for this value.
          payment_method_type:
            type: optional<string>
            docs: Return results only for this value.
          customer:
            type: optional<string>
            docs: The `customer.id` you want to get results for.
          customer__in:
            type: optional<string>
            docs: >-
              One or more `customer.id`s (comma separated) that you want to get
              results for.
          amount:
            type: optional<string>
            docs: Return results only for this value.
          amount__gt:
            type: optional<string>
            docs: Return results only for more than this amount.
          amount__gte:
            type: optional<string>
            docs: Return results only for and more than this amount.
          amount__lt:
            type: optional<string>
            docs: Return results only for less than this amount.
          amount__lte:
            type: optional<string>
            docs: Return results only for this amount or less.
          status:
            type: optional<string>
            docs: Return results only for this value.
          status__in:
            type: optional<string>
            docs: Return results for listed status.
      response:
        docs: OK
        type: root.PaymentIntentPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            id__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            provider: payments_way
            payment_method_type: pse
            customer: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            customer__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            amount: '1000.00'
            amount__gt: '1000.00'
            amount__gte: '1000.00'
            amount__lt: '1000.00'
            amount__lte: '1000.00'
            status: SUCCEEDED
            status__in: PROCESSING,SUCCEEDED
          response:
            body:
              count: 130
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              previous: previous
              results:
                - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  customer: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  allowed_payment_method_types:
                    - open_finance
                  amount: '350000.00'
                  currency: BRL
                  description: Training shoes
                  failure_code: failure_code
                  failure_message: failure_message
                  metadata:
                    internal_reference_id: GGq73487w2
                  next_step:
                    type: pse_display_confirmation_required
                    ready_to_confirm: true
                  last_error:
                    error_code: invalid_credentials
                    error_message: The credentials sent are incorrect, please try again.
                  payment_method_details:
                    pse:
                      payer_institution: db201c6a-e0ee-4caa-92d6-72b480d6d86f
                      payer_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                      beneficiary_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                      username: '***'
                      password: '***'
                      callback_url: https://www.acmecorp.com/checkout/3487321
                      belvo_flow: true
                  payment_method_information: {}
                  charges:
                    - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                      created_at: '2022-02-09T08:45:50Z'
                      created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                      customer: 531aa631-70a0-4eeb-ab97-51dea3e90c89
                      status: PENDING
                      amount: '100.12'
                      description: Training shoes
                      metadata:
                        internal_reference_id: GGq73487w2
                      beneficiary: 58524ccc-89ac-4ab6-b62b-c3da3f19a722
                      provider: belvo
                      payment_method_details: {}
                      payment_method_information: {}
                      payment_intent: 50c04229-7b1d-4a53-951c-8ad53e10c6ca
                      transactions:
                        - id: fd0f3303-cafb-47ea-9753-21155cb144ab
                          created_at: '2022-02-09T08:45:50Z'
                          created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                          amount: '1020.00'
                          currency: BRL
                          description: Training shoes
                          transaction_type: INFLOW
                          beneficiary: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                          payer:
                            key: value
                          payment_intent: 004a28bb-fac2-4172-884b-5b6ea15314ad
                          customer: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
                      updated_at: '2022-02-09T08:45:50Z'
                  provider: belvo
                  selected_payment_method_type: open_finance
                  status: REQUIRES_PAYMENT_METHOD
                  updated_at: '2022-02-09T08:45:50Z'
    CreatePaymentIntent:
      path: /payments/payment-intents/
      method: POST
      auth: true
      docs: Create a payment intent.
      source:
        openapi: ../openapi.yml
      display-name: Create a new payment intent
      request:
        name: CreatePaymentIntentPse
        body:
          properties:
            amount:
              type: CreatePaymentIntentPseAmount
              docs: >
                Amount to be paid by your customer. For PSE, you can only send
                whole numbers. For example: `350000`.


                **Note:** You can send through this value either as a string or
                an integer. Regardless of the type you choose to send the
                `amount` as, Belvo returns a string with two decimal points,
                separated by a period ( `.`). For example, `350000.00`.
            customer:
              type: string
              docs: |
                Belvo's unique ID to reference the customer.
              validation:
                format: uuid
            description:
              type: string
              docs: |
                The description of the payment.
            allowed_payment_method_types:
              docs: >-
                A list of payment method types allowed in this payment intent.
                For PSE, this value must be set to `pse`.
              type: list<root.EnumPaymentLinkAllowedPaymentMethod>
            payment_method_details:
              type: root.PSE
            provider: root.EnumPaymentLinkProvider
            metadata:
              type: optional<map<string, unknown>>
              docs: >-
                Optional and customizable object where you can provide any
                additional key-value pairs for your internal purposes. For
                example, an internal reference number for the payment intent.


                ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have
                up to 50 characters each and each value can be up to 500
                characters). We do not support nested objects, only ASCII
                values.
        content-type: application/json
      response:
        docs: OK (Created)
        type: root.PaymentIntentPse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - request:
            amount: '350000'
            customer: 06dc2f14-1217-4480-9b36-550a944a39d1
            description: Training shoes
            allowed_payment_method_types:
              - open_finance
            payment_method_details:
              pse:
                beneficiary_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                belvo_flow: true
            provider: belvo
          response:
            body:
              id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              created_at: '2022-02-09T08:45:50Z'
              created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              customer: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              allowed_payment_method_types:
                - open_finance
              amount: '350000.00'
              currency: BRL
              description: Training shoes
              failure_code: failure_code
              failure_message: failure_message
              metadata:
                internal_reference_id: GGq73487w2
              next_step:
                type: pse_display_confirmation_required
                pse_display_confirmation_required:
                  payer_institution:
                    id: bbaceead-7b96-46d8-9354-38dec9707004
                    active: true
                    name: wakanda_national
                    display_name: Wakanda National Bank
                    website: https://www.wakandanational.com
                    logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png
                    icon_logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png
                    text_logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png
                    primary_color: '#fdbc24'
                ready_to_confirm: true
              last_error:
                error_code: invalid_credentials
                error_message: The credentials sent are incorrect, please try again.
              payment_method_details:
                pse:
                  payer_institution: db201c6a-e0ee-4caa-92d6-72b480d6d86f
                  payer_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                  beneficiary_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                  username: '***'
                  password: '***'
                  callback_url: https://www.acmecorp.com/checkout/3487321
                  belvo_flow: true
              payment_method_information:
                pse:
                  provider_request_id: c978c0c97ea847e78e8849634473c1f1
                  redirect_url: https://wakandanational.com/
                  bank_payment_id: '456213985641233659874512459842'
                  end_to_end_id: '2007300520'
              charges:
                - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  customer: 531aa631-70a0-4eeb-ab97-51dea3e90c89
                  failure_code: failure_code
                  failure_message: failure_message
                  status: PENDING
                  amount: '100.12'
                  currency: BRL
                  description: Training shoes
                  metadata:
                    internal_reference_id: GGq73487w2
                  beneficiary: 58524ccc-89ac-4ab6-b62b-c3da3f19a722
                  provider: belvo
                  payment_method_type: open_finance
                  payment_method_details: {}
                  payment_method_information: {}
                  payment_intent: 50c04229-7b1d-4a53-951c-8ad53e10c6ca
                  transactions:
                    - id: fd0f3303-cafb-47ea-9753-21155cb144ab
                      created_at: '2022-02-09T08:45:50Z'
                      created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                      amount: '1020.00'
                      currency: BRL
                      description: Training shoes
                      transaction_type: INFLOW
                      beneficiary: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                      payer:
                        key: value
                      payment_intent: 004a28bb-fac2-4172-884b-5b6ea15314ad
                      customer: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
                  updated_at: '2022-02-09T08:45:50Z'
              provider: belvo
              selected_payment_method_type: open_finance
              status: REQUIRES_PAYMENT_METHOD
              updated_at: '2022-02-09T08:45:50Z'
    DetailPaymentIntent:
      path: /payments/payment-intents/{id}/
      method: GET
      auth: true
      docs: Get the details about a specific payment intent.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `payment-intent.id` you want to get detailed information about.
      display-name: Get details about a payment intent
      response:
        docs: OK
        type: root.PaymentIntentPse
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              created_at: '2022-02-09T08:45:50Z'
              created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              customer: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              allowed_payment_method_types:
                - open_finance
              amount: '350000.00'
              currency: BRL
              description: Training shoes
              failure_code: failure_code
              failure_message: failure_message
              metadata:
                internal_reference_id: GGq73487w2
              next_step:
                type: pse_display_confirmation_required
                pse_display_confirmation_required:
                  payer_institution:
                    id: bbaceead-7b96-46d8-9354-38dec9707004
                    active: true
                    name: wakanda_national
                    display_name: Wakanda National Bank
                    website: https://www.wakandanational.com
                    logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png
                    icon_logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png
                    text_logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png
                    primary_color: '#fdbc24'
                ready_to_confirm: true
              last_error:
                error_code: invalid_credentials
                error_message: The credentials sent are incorrect, please try again.
              payment_method_details:
                pse:
                  payer_institution: db201c6a-e0ee-4caa-92d6-72b480d6d86f
                  payer_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                  beneficiary_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                  username: '***'
                  password: '***'
                  callback_url: https://www.acmecorp.com/checkout/3487321
                  belvo_flow: true
              payment_method_information:
                pse:
                  provider_request_id: c978c0c97ea847e78e8849634473c1f1
                  redirect_url: https://wakandanational.com/
                  bank_payment_id: '456213985641233659874512459842'
                  end_to_end_id: '2007300520'
              charges:
                - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  customer: 531aa631-70a0-4eeb-ab97-51dea3e90c89
                  failure_code: failure_code
                  failure_message: failure_message
                  status: PENDING
                  amount: '100.12'
                  currency: BRL
                  description: Training shoes
                  metadata:
                    internal_reference_id: GGq73487w2
                  beneficiary: 58524ccc-89ac-4ab6-b62b-c3da3f19a722
                  provider: belvo
                  payment_method_type: open_finance
                  payment_method_details: {}
                  payment_method_information: {}
                  payment_intent: 50c04229-7b1d-4a53-951c-8ad53e10c6ca
                  transactions:
                    - id: fd0f3303-cafb-47ea-9753-21155cb144ab
                      created_at: '2022-02-09T08:45:50Z'
                      created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                      amount: '1020.00'
                      currency: BRL
                      description: Training shoes
                      transaction_type: INFLOW
                      beneficiary: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                      payer:
                        key: value
                      payment_intent: 004a28bb-fac2-4172-884b-5b6ea15314ad
                      customer: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
                  updated_at: '2022-02-09T08:45:50Z'
              provider: belvo
              selected_payment_method_type: open_finance
              status: REQUIRES_PAYMENT_METHOD
              updated_at: '2022-02-09T08:45:50Z'
    PatchPaymentIntent:
      path: /payments/payment-intents/{id}/
      method: PATCH
      auth: true
      docs: >-
        Complete a new payment intent.


        During the payment intent flow, you need to fill in the payment intent
        with required information about your customer (their institution, bank
        account, and login credentials). This is done by sending PATCH requests
        with the information that Belvo asked you display in each `next_step`
        object. If you need more information on how to complete a payment
        intent, check our <a
        href="https://developers.belvo.com/docs/colombia-pse#payment-intents"
        target="_blank">PSE payment initiation</a> guides for  üá®üá¥ Colombia.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `payment-intent.id` you want to get detailed information about.
      display-name: Complete a payment intent
      request:
        name: PatchPaymentIntentPse
        body:
          properties:
            payment_method_details:
              type: root.PatchPaymentIntentsBodyPse
            confirm:
              type: optional<boolean>
              docs: >-
                Boolean that indicates whether this request confirms the payment
                intent. 


                **Note:** You'll need to send this parameter set to `true` when
                the payment intent next_step returns `ready_to_confirm: true`,
                meaning the payment intent is ready to be confirmed.
        content-type: application/json
      response:
        docs: OK (Created)
        type: root.PaymentIntentPse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          request:
            payment_method_details: {}
          response:
            body:
              id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              created_at: '2022-02-09T08:45:50Z'
              created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              customer: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              allowed_payment_method_types:
                - open_finance
              amount: '350000.00'
              currency: BRL
              description: Training shoes
              failure_code: failure_code
              failure_message: failure_message
              metadata:
                internal_reference_id: GGq73487w2
              next_step:
                type: pse_display_confirmation_required
                pse_display_confirmation_required:
                  payer_institution:
                    id: bbaceead-7b96-46d8-9354-38dec9707004
                    active: true
                    name: wakanda_national
                    display_name: Wakanda National Bank
                    website: https://www.wakandanational.com
                    logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png
                    icon_logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png
                    text_logo: >-
                      https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png
                    primary_color: '#fdbc24'
                ready_to_confirm: true
              last_error:
                error_code: invalid_credentials
                error_message: The credentials sent are incorrect, please try again.
              payment_method_details:
                pse:
                  payer_institution: db201c6a-e0ee-4caa-92d6-72b480d6d86f
                  payer_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                  beneficiary_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                  username: '***'
                  password: '***'
                  callback_url: https://www.acmecorp.com/checkout/3487321
                  belvo_flow: true
              payment_method_information:
                pse:
                  provider_request_id: c978c0c97ea847e78e8849634473c1f1
                  redirect_url: https://wakandanational.com/
                  bank_payment_id: '456213985641233659874512459842'
                  end_to_end_id: '2007300520'
              charges:
                - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  customer: 531aa631-70a0-4eeb-ab97-51dea3e90c89
                  failure_code: failure_code
                  failure_message: failure_message
                  status: PENDING
                  amount: '100.12'
                  currency: BRL
                  description: Training shoes
                  metadata:
                    internal_reference_id: GGq73487w2
                  beneficiary: 58524ccc-89ac-4ab6-b62b-c3da3f19a722
                  provider: belvo
                  payment_method_type: open_finance
                  payment_method_details: {}
                  payment_method_information: {}
                  payment_intent: 50c04229-7b1d-4a53-951c-8ad53e10c6ca
                  transactions:
                    - id: fd0f3303-cafb-47ea-9753-21155cb144ab
                      created_at: '2022-02-09T08:45:50Z'
                      created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                      amount: '1020.00'
                      currency: BRL
                      description: Training shoes
                      transaction_type: INFLOW
                      beneficiary: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                      payer:
                        key: value
                      payment_intent: 004a28bb-fac2-4172-884b-5b6ea15314ad
                      customer: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
                  updated_at: '2022-02-09T08:45:50Z'
              provider: belvo
              selected_payment_method_type: open_finance
              status: REQUIRES_PAYMENT_METHOD
              updated_at: '2022-02-09T08:45:50Z'
  source:
    openapi: ../openapi.yml
  display-name: Payment Intents
docs: >

  A **payment intent** is a single point of access to create payments using any
  payment method offered by Belvo.


  A payment intent captures all payment information (such as the amount to be
  charged, the description of the payment, the provider, and so on) and guides
  your customers through the payment flow.
types:
  CreatePaymentIntentPseAmount:
    discriminated: false
    docs: >
      Amount to be paid by your customer. For PSE, you can only send whole
      numbers. For example: `350000`.


      **Note:** You can send through this value either as a string or an
      integer. Regardless of the type you choose to send the `amount` as, Belvo
      returns a string with two decimal points, separated by a period ( `.`).
      For example, `350000.00`.
    union:
      - type: string
        validation:
          pattern: '[1-9]\d{0,9}'
      - long
    source:
      openapi: ../openapi.yml
    inline: true
",
    },
    "paymentLinks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "This is a Payment link.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Payment Links",
          "endpoints": {
            "CreatePaymentlink": {
              "auth": true,
              "display-name": "Create a payment link",
              "docs": "Create a new payment link to start a hosted-widget payment.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "allowed_payment_method_types": [
                      "open_finance",
                    ],
                    "amount": "1234.12",
                    "customer": "06dc2f14-1217-4480-9b36-550a944a39d1",
                    "description": "Shoe payment",
                    "payment_method_details": {
                      "open_finance": {
                        "beneficiary_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                      },
                    },
                    "provider": "belvo",
                  },
                  "response": {
                    "body": {
                      "access_token": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU",
                      "callback_urls": {
                        "cancel": "https://www.acmecorp.com/checkout/3487548/cancel",
                        "success": "https://www.acmecorp.com/checkout/3487548/success",
                      },
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "62053a72-e2d5-4c95-a578-6b16616900ac",
                      "expires_at": "2023-02-09T08:45:50Z",
                      "expires_in": "7d",
                      "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "payment_intent": {
                        "allowed_payment_method_types": [
                          "open_finance",
                        ],
                        "amount": "1234.12",
                        "charges": [
                          {
                            "amount": "100.12",
                            "beneficiary": "58524ccc-89ac-4ab6-b62b-c3da3f19a722",
                            "created_at": "2022-02-09T08:45:50Z",
                            "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                            "customer": "531aa631-70a0-4eeb-ab97-51dea3e90c89",
                            "description": "Training shoes",
                            "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                            "metadata": {
                              "internal_reference_id": "GGq73487w2",
                            },
                            "payment_intent": "50c04229-7b1d-4a53-951c-8ad53e10c6ca",
                            "payment_method_details": {},
                            "payment_method_information": {},
                            "provider": "belvo",
                            "status": "PENDING",
                            "transactions": [
                              {
                                "amount": "1020.00",
                                "beneficiary": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                                "created_at": "2022-02-09T08:45:50Z",
                                "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                                "currency": "BRL",
                                "customer": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310",
                                "description": "Training shoes",
                                "id": "fd0f3303-cafb-47ea-9753-21155cb144ab",
                                "payer": {
                                  "key": "value",
                                },
                                "payment_intent": "004a28bb-fac2-4172-884b-5b6ea15314ad",
                                "transaction_type": "INFLOW",
                              },
                            ],
                            "updated_at": "2022-02-09T08:45:50Z",
                          },
                        ],
                        "created_at": "2022-02-09T08:45:50Z",
                        "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                        "currency": "BRL",
                        "customer": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                        "description": "Training shoes",
                        "failure_code": "failure_code",
                        "failure_message": "failure_message",
                        "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                        "last_error": {
                          "error_code": "payment_error",
                          "error_message": "Unexpected error to confirm the payment",
                        },
                        "metadata": {
                          "internal_reference_id": "GGq73487w2",
                        },
                        "next_step": {
                          "ready_to_confirm": false,
                          "type": "open_finance_display_payment_failed",
                        },
                        "payment_method_details": {
                          "open_finance": {
                            "beneficiary_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                            "callback_url": "https://www.acmecorp.com/checkout/3487321",
                            "payer_institution": "600f1b4a-1ef9-4f89-b341-1a35f0c32cc0",
                          },
                        },
                        "payment_method_information": {},
                        "provider": "belvo",
                        "selected_payment_method_type": "open_finance",
                        "status": "REQUIRES_PAYMENT_METHOD",
                        "updated_at": "2022-02-09T08:45:50Z",
                      },
                      "payment_url": "https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU",
                      "status": "ACTIVE",
                      "updated_at": "2022-02-09T08:45:50Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/payments/payment-links/",
              "request": {
                "body": "CreatePaymentlinkRequest",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK (Created)",
                "status-code": 201,
                "type": "CreatePaymentlinkResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailCreatePaymentlink": {
              "auth": true,
              "display-name": "Get details about a payment link",
              "docs": "Get the details about a payment link.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "access_token": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU",
                  },
                  "response": {
                    "body": {
                      "access_token": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU",
                      "callback_urls": {
                        "cancel": "https://www.acmecorp.com/checkout/3487548/cancel",
                        "success": "https://www.acmecorp.com/checkout/3487548/success",
                      },
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "62053a72-e2d5-4c95-a578-6b16616900ac",
                      "expires_at": "2023-02-09T08:45:50Z",
                      "expires_in": "7d",
                      "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "payment_intent": {
                        "allowed_payment_method_types": [
                          "open_finance",
                        ],
                        "amount": "1234.12",
                        "charges": [
                          {
                            "amount": "100.12",
                            "beneficiary": "58524ccc-89ac-4ab6-b62b-c3da3f19a722",
                            "created_at": "2022-02-09T08:45:50Z",
                            "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                            "customer": "531aa631-70a0-4eeb-ab97-51dea3e90c89",
                            "description": "Training shoes",
                            "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                            "metadata": {
                              "internal_reference_id": "GGq73487w2",
                            },
                            "payment_intent": "50c04229-7b1d-4a53-951c-8ad53e10c6ca",
                            "payment_method_details": {},
                            "payment_method_information": {},
                            "provider": "belvo",
                            "status": "PENDING",
                            "transactions": [
                              {
                                "amount": "1020.00",
                                "beneficiary": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                                "created_at": "2022-02-09T08:45:50Z",
                                "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                                "currency": "BRL",
                                "customer": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310",
                                "description": "Training shoes",
                                "id": "fd0f3303-cafb-47ea-9753-21155cb144ab",
                                "payer": {
                                  "key": "value",
                                },
                                "payment_intent": "004a28bb-fac2-4172-884b-5b6ea15314ad",
                                "transaction_type": "INFLOW",
                              },
                            ],
                            "updated_at": "2022-02-09T08:45:50Z",
                          },
                        ],
                        "created_at": "2022-02-09T08:45:50Z",
                        "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                        "currency": "BRL",
                        "customer": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                        "description": "Training shoes",
                        "failure_code": "failure_code",
                        "failure_message": "failure_message",
                        "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                        "last_error": {
                          "error_code": "payment_error",
                          "error_message": "Unexpected error to confirm the payment",
                        },
                        "metadata": {
                          "internal_reference_id": "GGq73487w2",
                        },
                        "next_step": {
                          "ready_to_confirm": false,
                          "type": "open_finance_display_payment_failed",
                        },
                        "payment_method_details": {
                          "open_finance": {
                            "beneficiary_bank_account": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                            "callback_url": "https://www.acmecorp.com/checkout/3487321",
                            "payer_institution": "600f1b4a-1ef9-4f89-b341-1a35f0c32cc0",
                          },
                        },
                        "payment_method_information": {},
                        "provider": "belvo",
                        "selected_payment_method_type": "open_finance",
                        "status": "REQUIRES_PAYMENT_METHOD",
                        "updated_at": "2022-02-09T08:45:50Z",
                      },
                      "payment_url": "https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU",
                      "status": "ACTIVE",
                      "updated_at": "2022-02-09T08:45:50Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/payment-links/{access_token}/",
              "path-parameters": {
                "access_token": {
                  "docs": "The `access_token` of the payment link you want to get detailed information about. 

**Note:** You can retrieve the `access_token` for a payment link by making a [GET List all payment links](https://developers.belvo.com/reference/listpaymentlinks) request.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK (Created)",
                "status-code": 200,
                "type": "DetailCreatePaymentlinkResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListPaymentLinks": {
              "auth": true,
              "display-name": "List all payment links",
              "docs": "List all payment links associated with your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "page": 1,
                    "page_size": 100,
                    "search": "trai",
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "access_token": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU",
                          "callback_urls": {
                            "cancel": "https://www.acmecorp.com/checkout/3487548/cancel",
                            "success": "https://www.acmecorp.com/checkout/3487548/success",
                          },
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "62053a72-e2d5-4c95-a578-6b16616900ac",
                          "expires_at": "2023-02-09T08:45:50Z",
                          "expires_in": "7d",
                          "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "payment_intent": "b7dd85b1-671e-45c7-aba6-b4b37a8fc0c2",
                          "payment_url": "https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU",
                          "status": "ACTIVE",
                          "updated_at": "2022-02-09T08:45:50Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/payment-links/",
              "request": {
                "name": "ListPaymentLinksRequest",
                "query-parameters": {
                  "created_at": {
                    "docs": "Return results only for this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return results only after this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return results only for this date and after (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return results only before this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return results only for this date and before (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return results between this date range (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "ordering": {
                    "docs": "Return results in a specified time order. Can be either:

  - `created_at` returns payment links from newest to oldest (in ascending order).
  - `-created_at` returns payment links from oldest to newest (in descending order).",
                    "type": "optional<ListPaymentLinksRequestOrdering>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page.

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 100. If you enter a value greater than 100, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "search": {
                    "docs": "Return results for one or more payment links that match the description you searched for. 

**Note:** This filter supports both full and partial search queries, with a minimum of three characters required. For example, searching for `trai` may match the following values:

  - `Awesome training sneakers` 
  - `Training equipment`",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "Return payment links with this status. Can be either `ACTIVE` or `INACTIVE`.",
                    "type": "optional<ListPaymentLinksRequestStatus>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentLinkPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "CreatePaymentlinkRequest": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.CreatePaymentLinkOfpi",
              },
              {
                "type": "root.CreatePaymentLinkPse",
              },
            ],
          },
          "CreatePaymentlinkResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.PaymentLinkOfpi",
              },
              {
                "type": "root.PaymentLinkPse",
              },
            ],
          },
          "DetailCreatePaymentlinkResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.PaymentLinkOfpi",
              },
              {
                "type": "root.PaymentLinkPse",
              },
            ],
          },
          "ListPaymentLinksRequestOrdering": {
            "enum": [
              {
                "name": "Ascending",
                "value": "created_at",
              },
              {
                "name": "Descending",
                "value": "-created_at",
              },
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListPaymentLinksRequestStatus": {
            "enum": [
              "ACTIVE",
              "INACTIVE",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "types:
  ListPaymentLinksRequestStatus:
    enum:
      - ACTIVE
      - INACTIVE
    source:
      openapi: ../openapi.yml
  ListPaymentLinksRequestOrdering:
    enum:
      - value: created_at
        name: Ascending
      - value: '-created_at'
        name: Descending
    source:
      openapi: ../openapi.yml
  CreatePaymentlinkRequest:
    discriminated: false
    union:
      - type: root.CreatePaymentLinkOfpi
      - type: root.CreatePaymentLinkPse
    source:
      openapi: ../openapi.yml
  CreatePaymentlinkResponse:
    discriminated: false
    union:
      - type: root.PaymentLinkOfpi
      - type: root.PaymentLinkPse
    source:
      openapi: ../openapi.yml
  DetailCreatePaymentlinkResponse:
    discriminated: false
    union:
      - type: root.PaymentLinkOfpi
      - type: root.PaymentLinkPse
    source:
      openapi: ../openapi.yml
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListPaymentLinks:
      path: /payments/payment-links/
      method: GET
      auth: true
      docs: >-
        List all payment links associated with your Belvo account. By default,
        we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all payment links
      request:
        name: ListPaymentLinksRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page.


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 100. If you enter a value greater than 100, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 100
          created_at:
            type: optional<string>
            docs: Return results only for this date (in `YYYY-MM-DD` format).
          created_at__gt:
            type: optional<string>
            docs: Return results only after this date (in `YYYY-MM-DD` format).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return results only for this date and after (in `YYYY-MM-DD`
              format).
          created_at__lt:
            type: optional<string>
            docs: Return results only before this date (in `YYYY-MM-DD` format).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return results only for this date and before (in `YYYY-MM-DD`
              format).
          created_at__range:
            type: optional<string>
            docs: Return results between this date range (in `YYYY-MM-DD` format).
          status:
            type: optional<ListPaymentLinksRequestStatus>
            docs: >-
              Return payment links with this status. Can be either `ACTIVE` or
              `INACTIVE`.
          ordering:
            type: optional<ListPaymentLinksRequestOrdering>
            docs: |-
              Return results in a specified time order. Can be either:

                - `created_at` returns payment links from newest to oldest (in ascending order).
                - `-created_at` returns payment links from oldest to newest (in descending order).
          search:
            type: optional<string>
            docs: >-
              Return results for one or more payment links that match the
              description you searched for. 


              **Note:** This filter supports both full and partial search
              queries, with a minimum of three characters required. For example,
              searching for `trai` may match the following values:

                - `Awesome training sneakers` 
                - `Training equipment`
      response:
        docs: OK
        type: root.PaymentLinkPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            search: trai
          response:
            body:
              count: 130
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              previous: previous
              results:
                - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 62053a72-e2d5-4c95-a578-6b16616900ac
                  payment_url: >-
                    https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
                  access_token: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
                  callback_urls:
                    cancel: https://www.acmecorp.com/checkout/3487548/cancel
                    success: https://www.acmecorp.com/checkout/3487548/success
                  payment_intent: b7dd85b1-671e-45c7-aba6-b4b37a8fc0c2
                  updated_at: '2022-02-09T08:45:50Z'
                  status: ACTIVE
                  expires_in: 7d
                  expires_at: '2023-02-09T08:45:50Z'
    CreatePaymentlink:
      path: /payments/payment-links/
      method: POST
      auth: true
      docs: Create a new payment link to start a hosted-widget payment.
      source:
        openapi: ../openapi.yml
      display-name: Create a payment link
      request:
        body: CreatePaymentlinkRequest
        content-type: application/json
      response:
        docs: OK (Created)
        type: CreatePaymentlinkResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - request:
            amount: '1234.12'
            customer: 06dc2f14-1217-4480-9b36-550a944a39d1
            description: Shoe payment
            allowed_payment_method_types:
              - open_finance
            provider: belvo
            payment_method_details:
              open_finance:
                beneficiary_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
          response:
            body:
              id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              created_at: '2022-02-09T08:45:50Z'
              created_by: 62053a72-e2d5-4c95-a578-6b16616900ac
              payment_url: https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
              access_token: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
              callback_urls:
                cancel: https://www.acmecorp.com/checkout/3487548/cancel
                success: https://www.acmecorp.com/checkout/3487548/success
              payment_intent:
                id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                created_at: '2022-02-09T08:45:50Z'
                created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                customer: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                allowed_payment_method_types:
                  - open_finance
                amount: '1234.12'
                currency: BRL
                description: Training shoes
                failure_code: failure_code
                failure_message: failure_message
                metadata:
                  internal_reference_id: GGq73487w2
                next_step:
                  type: open_finance_display_payment_failed
                  ready_to_confirm: false
                last_error:
                  error_code: payment_error
                  error_message: Unexpected error to confirm the payment
                payment_method_details:
                  open_finance:
                    beneficiary_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                    payer_institution: 600f1b4a-1ef9-4f89-b341-1a35f0c32cc0
                    callback_url: https://www.acmecorp.com/checkout/3487321
                payment_method_information: {}
                charges:
                  - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                    created_at: '2022-02-09T08:45:50Z'
                    created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                    customer: 531aa631-70a0-4eeb-ab97-51dea3e90c89
                    status: PENDING
                    amount: '100.12'
                    description: Training shoes
                    metadata:
                      internal_reference_id: GGq73487w2
                    beneficiary: 58524ccc-89ac-4ab6-b62b-c3da3f19a722
                    provider: belvo
                    payment_method_details: {}
                    payment_method_information: {}
                    payment_intent: 50c04229-7b1d-4a53-951c-8ad53e10c6ca
                    transactions:
                      - id: fd0f3303-cafb-47ea-9753-21155cb144ab
                        created_at: '2022-02-09T08:45:50Z'
                        created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                        amount: '1020.00'
                        currency: BRL
                        description: Training shoes
                        transaction_type: INFLOW
                        beneficiary: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                        payer:
                          key: value
                        payment_intent: 004a28bb-fac2-4172-884b-5b6ea15314ad
                        customer: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
                    updated_at: '2022-02-09T08:45:50Z'
                provider: belvo
                selected_payment_method_type: open_finance
                status: REQUIRES_PAYMENT_METHOD
                updated_at: '2022-02-09T08:45:50Z'
              updated_at: '2022-02-09T08:45:50Z'
              status: ACTIVE
              expires_in: 7d
              expires_at: '2023-02-09T08:45:50Z'
    DetailCreatePaymentlink:
      path: /payments/payment-links/{access_token}/
      method: GET
      auth: true
      docs: Get the details about a payment link.
      source:
        openapi: ../openapi.yml
      path-parameters:
        access_token:
          type: string
          docs: >-
            The `access_token` of the payment link you want to get detailed
            information about. 


            **Note:** You can retrieve the `access_token` for a payment link by
            making a [GET List all payment
            links](https://developers.belvo.com/reference/listpaymentlinks)
            request.
      display-name: Get details about a payment link
      response:
        docs: OK (Created)
        type: DetailCreatePaymentlinkResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            access_token: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
          response:
            body:
              id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              created_at: '2022-02-09T08:45:50Z'
              created_by: 62053a72-e2d5-4c95-a578-6b16616900ac
              payment_url: https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
              access_token: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
              callback_urls:
                cancel: https://www.acmecorp.com/checkout/3487548/cancel
                success: https://www.acmecorp.com/checkout/3487548/success
              payment_intent:
                id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                created_at: '2022-02-09T08:45:50Z'
                created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                customer: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                allowed_payment_method_types:
                  - open_finance
                amount: '1234.12'
                currency: BRL
                description: Training shoes
                failure_code: failure_code
                failure_message: failure_message
                metadata:
                  internal_reference_id: GGq73487w2
                next_step:
                  type: open_finance_display_payment_failed
                  ready_to_confirm: false
                last_error:
                  error_code: payment_error
                  error_message: Unexpected error to confirm the payment
                payment_method_details:
                  open_finance:
                    beneficiary_bank_account: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                    payer_institution: 600f1b4a-1ef9-4f89-b341-1a35f0c32cc0
                    callback_url: https://www.acmecorp.com/checkout/3487321
                payment_method_information: {}
                charges:
                  - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                    created_at: '2022-02-09T08:45:50Z'
                    created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                    customer: 531aa631-70a0-4eeb-ab97-51dea3e90c89
                    status: PENDING
                    amount: '100.12'
                    description: Training shoes
                    metadata:
                      internal_reference_id: GGq73487w2
                    beneficiary: 58524ccc-89ac-4ab6-b62b-c3da3f19a722
                    provider: belvo
                    payment_method_details: {}
                    payment_method_information: {}
                    payment_intent: 50c04229-7b1d-4a53-951c-8ad53e10c6ca
                    transactions:
                      - id: fd0f3303-cafb-47ea-9753-21155cb144ab
                        created_at: '2022-02-09T08:45:50Z'
                        created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                        amount: '1020.00'
                        currency: BRL
                        description: Training shoes
                        transaction_type: INFLOW
                        beneficiary: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                        payer:
                          key: value
                        payment_intent: 004a28bb-fac2-4172-884b-5b6ea15314ad
                        customer: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
                    updated_at: '2022-02-09T08:45:50Z'
                provider: belvo
                selected_payment_method_type: open_finance
                status: REQUIRES_PAYMENT_METHOD
                updated_at: '2022-02-09T08:45:50Z'
              updated_at: '2022-02-09T08:45:50Z'
              status: ACTIVE
              expires_in: 7d
              expires_at: '2023-02-09T08:45:50Z'
  source:
    openapi: ../openapi.yml
  display-name: Payment Links
docs: |
  This is a Payment link.
",
    },
    "paymentTransactions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Each time you receive an inflow payment from your customer, a **transaction** is created in the Belvo database.

You can use the Payment Transactions resource in order to get useful information about a transaction as well as the specific charge associated with it.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Payment Transactions",
          "endpoints": {
            "DetailPaymentTransactions": {
              "auth": true,
              "display-name": "Get details about a payment transaction",
              "docs": "Get the details about a specific payment transaction.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "amount": "1020.00",
                      "beneficiary": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "currency": "BRL",
                      "customer": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310",
                      "description": "Training shoes",
                      "id": "fd0f3303-cafb-47ea-9753-21155cb144ab",
                      "payer": {
                        "key": "value",
                      },
                      "payment_intent": "004a28bb-fac2-4172-884b-5b6ea15314ad",
                      "transaction_type": "INFLOW",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/transactions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `transaction.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentTransaction",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListPaymentTransactions": {
              "auth": true,
              "display-name": "List all payment transactions",
              "docs": "List all payment transactions associated with your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "amount": "1000.00",
                    "amount__gt": "1000.00",
                    "amount__gte": "1000.00",
                    "amount__lt": "1000.00",
                    "amount__lte": "1000.00",
                    "amount__range": "1001.00,2000.00",
                    "beneficiary": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "beneficiary__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "charge": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "charge__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "created_at": "2022-09-15",
                    "created_at__gt": "2022-09-15",
                    "created_at__gte": "2022-09-15",
                    "created_at__lt": "2022-09-15",
                    "created_at__lte": "2022-09-15",
                    "created_at__range": "2022-09-15,2022-09-20",
                    "currency": "COP",
                    "description": "Training shoes",
                    "id__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "page": 1,
                    "payer": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d",
                    "payer__in": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264",
                    "transaction__type": "INFLOW",
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "amount": "1020.00",
                          "beneficiary": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "currency": "BRL",
                          "customer": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310",
                          "description": "Training shoes",
                          "id": "fd0f3303-cafb-47ea-9753-21155cb144ab",
                          "payer": {
                            "key": "value",
                          },
                          "payment_intent": "004a28bb-fac2-4172-884b-5b6ea15314ad",
                          "transaction_type": "INFLOW",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/transactions/",
              "request": {
                "name": "ListPaymentTransactionsRequest",
                "query-parameters": {
                  "amount": {
                    "docs": "Return results only for this value.",
                    "type": "optional<string>",
                  },
                  "amount__gt": {
                    "docs": "Return results only for more than this amount.",
                    "type": "optional<string>",
                  },
                  "amount__gte": {
                    "docs": "Return results only for and more than this amount.",
                    "type": "optional<string>",
                  },
                  "amount__lt": {
                    "docs": "Return results only for less than this amount.",
                    "type": "optional<string>",
                  },
                  "amount__lte": {
                    "docs": "Return results only for this amount or less.",
                    "type": "optional<string>",
                  },
                  "amount__range": {
                    "docs": "Return results between this amount range",
                    "type": "optional<string>",
                  },
                  "beneficiary": {
                    "docs": "The `beneficiary.id` you want to get results for.",
                    "type": "optional<string>",
                  },
                  "beneficiary__in": {
                    "docs": "One or more `beneficiary.id`s (comma separated) that you want to get results for.",
                    "type": "optional<string>",
                  },
                  "charge": {
                    "docs": "The `charge.id` you want to get results for.",
                    "type": "optional<string>",
                  },
                  "charge__in": {
                    "docs": "One or more `charge.id`s (comma separated) that you want to get results for.",
                    "type": "optional<string>",
                  },
                  "created_at": {
                    "docs": "Return results only for this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return results only after this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return results only for this date and after (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return results only before this date (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return results only for this date and before (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return results between this date range (in `YYYY-MM-DD` format).",
                    "type": "optional<string>",
                  },
                  "currency": {
                    "docs": "Return results for a matched value type.",
                    "type": "optional<string>",
                  },
                  "description": {
                    "docs": "Return results for a matched value type.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "One or more payment `transaction.id`s (comma separated) that you want to get results for.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "payer": {
                    "docs": "The payer's `bank-account.id` you want to get results for.",
                    "type": "optional<string>",
                  },
                  "payer__in": {
                    "docs": "One or more payer `bank-account.id`s (comma separated) that you want to get results for.",
                    "type": "optional<string>",
                  },
                  "transaction__type": {
                    "docs": "Return results for a matched value type.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentsTransactionsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListPaymentTransactions:
      path: /payments/transactions/
      method: GET
      auth: true
      docs: List all payment transactions associated with your Belvo account.
      source:
        openapi: ../openapi.yml
      display-name: List all payment transactions
      request:
        name: ListPaymentTransactionsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          id__in:
            type: optional<string>
            docs: >-
              One or more payment `transaction.id`s (comma separated) that you
              want to get results for.
          created_at:
            type: optional<string>
            docs: Return results only for this date (in `YYYY-MM-DD` format).
          created_at__gt:
            type: optional<string>
            docs: Return results only after this date (in `YYYY-MM-DD` format).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return results only for this date and after (in `YYYY-MM-DD`
              format).
          created_at__lt:
            type: optional<string>
            docs: Return results only before this date (in `YYYY-MM-DD` format).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return results only for this date and before (in `YYYY-MM-DD`
              format).
          created_at__range:
            type: optional<string>
            docs: Return results between this date range (in `YYYY-MM-DD` format).
          charge:
            type: optional<string>
            docs: The `charge.id` you want to get results for.
          charge__in:
            type: optional<string>
            docs: >-
              One or more `charge.id`s (comma separated) that you want to get
              results for.
          beneficiary:
            type: optional<string>
            docs: The `beneficiary.id` you want to get results for.
          beneficiary__in:
            type: optional<string>
            docs: >-
              One or more `beneficiary.id`s (comma separated) that you want to
              get results for.
          payer:
            type: optional<string>
            docs: The payer's `bank-account.id` you want to get results for.
          payer__in:
            type: optional<string>
            docs: >-
              One or more payer `bank-account.id`s (comma separated) that you
              want to get results for.
          transaction__type:
            type: optional<string>
            docs: Return results for a matched value type.
          currency:
            type: optional<string>
            docs: Return results for a matched value type.
          description:
            type: optional<string>
            docs: Return results for a matched value type.
          amount:
            type: optional<string>
            docs: Return results only for this value.
          amount__gt:
            type: optional<string>
            docs: Return results only for more than this amount.
          amount__gte:
            type: optional<string>
            docs: Return results only for and more than this amount.
          amount__lt:
            type: optional<string>
            docs: Return results only for less than this amount.
          amount__lte:
            type: optional<string>
            docs: Return results only for this amount or less.
          amount__range:
            type: optional<string>
            docs: Return results between this amount range
      response:
        docs: OK
        type: root.PaymentsTransactionsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            id__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            created_at: '2022-09-15'
            created_at__gt: '2022-09-15'
            created_at__gte: '2022-09-15'
            created_at__lt: '2022-09-15'
            created_at__lte: '2022-09-15'
            created_at__range: 2022-09-15,2022-09-20
            charge: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            charge__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            beneficiary: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            beneficiary__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            payer: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
            payer__in: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
            transaction__type: INFLOW
            currency: COP
            description: Training shoes
            amount: '1000.00'
            amount__gt: '1000.00'
            amount__gte: '1000.00'
            amount__lt: '1000.00'
            amount__lte: '1000.00'
            amount__range: 1001.00,2000.00
          response:
            body:
              count: 130
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              previous: previous
              results:
                - id: fd0f3303-cafb-47ea-9753-21155cb144ab
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  amount: '1020.00'
                  currency: BRL
                  description: Training shoes
                  transaction_type: INFLOW
                  beneficiary: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
                  payer:
                    key: value
                  payment_intent: 004a28bb-fac2-4172-884b-5b6ea15314ad
                  customer: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
    DetailPaymentTransactions:
      path: /payments/transactions/{id}/
      method: GET
      auth: true
      docs: Get the details about a specific payment transaction.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `transaction.id` you want to get detailed information about.
      display-name: Get details about a payment transaction
      response:
        docs: OK
        type: root.PaymentTransaction
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: fd0f3303-cafb-47ea-9753-21155cb144ab
              created_at: '2022-02-09T08:45:50Z'
              created_by: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              amount: '1020.00'
              currency: BRL
              description: Training shoes
              transaction_type: INFLOW
              beneficiary: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
              payer:
                key: value
              payment_intent: 004a28bb-fac2-4172-884b-5b6ea15314ad
              customer: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
  source:
    openapi: ../openapi.yml
  display-name: Payment Transactions
docs: >
  Each time you receive an inflow payment from your customer, a **transaction**
  is created in the Belvo database.


  You can use the Payment Transactions resource in order to get useful
  information about a transaction as well as the specific charge associated with
  it.
",
    },
    "paymentWebhooks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Registering a webhook will let you know about any relevant updates that occur during the payment process. To set up a webhook, you need to make a [POST Register a new payment webhook](https://api.belvo.com/payments/webhooks/) request, providing some key details such as the name of the webhook and a URL where webhook events should be sent to.

",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Payment Webhooks",
          "endpoints": {
            "DeletePaymentWebhooks": {
              "auth": true,
              "display-name": "Delete a payment webhook",
              "docs": "Delete a specific payment webhook from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/payments/webhooks/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `webhook.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailPaymentWebhooks": {
              "auth": true,
              "display-name": "Get details about a payment webhook",
              "docs": "Get the details about a specific payment webhook.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "a3b92311-1888-449f-acaa-49ae28d68fcd",
                  },
                  "response": {
                    "body": {
                      "auth_header": "Authorization",
                      "auth_token": "*******",
                      "created_at": "2022-02-09T08:45:50Z",
                      "created_by": "38322582-7c76-4775-abe8-0fb2bdeb8204",
                      "id": "32ab6809-6253-4fb0-be0f-94cce6ebb692",
                      "name": {
                        "key": "value",
                      },
                      "url": "https://mycompany.com/security/webhook",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/webhooks/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `webhook.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentWebhook",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListPaymentWebhooks": {
              "auth": true,
              "display-name": "List all payment webhooks",
              "docs": "List all payment webhooks associated with your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "auth_header": "Authorization",
                          "auth_token": "*******",
                          "created_at": "2022-02-09T08:45:50Z",
                          "created_by": "38322582-7c76-4775-abe8-0fb2bdeb8204",
                          "id": "32ab6809-6253-4fb0-be0f-94cce6ebb692",
                          "name": {
                            "key": "value",
                          },
                          "url": "https://mycompany.com/security/webhook",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/webhooks/",
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.PaymentsWebhooksPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RegisterPaymentWebhook": {
              "auth": true,
              "display-name": "Register a new payment webhook",
              "docs": "Register a new payments webhook for your Belvo account.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "name": "Your webhook name",
                    "url": "https://mycompany.com/security/webhook",
                  },
                  "response": {
                    "body": [
                      {
                        "auth_header": "Authorization",
                        "auth_token": "*******",
                        "created_at": "2022-02-09T08:45:50Z",
                        "created_by": "38322582-7c76-4775-abe8-0fb2bdeb8204",
                        "id": "32ab6809-6253-4fb0-be0f-94cce6ebb692",
                        "name": {
                          "key": "value",
                        },
                        "url": "https://mycompany.com/security/webhook",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/payments/webhooks/",
              "request": {
                "body": {
                  "properties": {
                    "auth_header": {
                      "docs": "The authentication header for the request. **Must** be set to `Authorization`.",
                      "type": "optional<string>",
                    },
                    "auth_token": {
                      "docs": "The authentication token you need to send webhook events. Can be either:


  - `Bearer` and a token (for Bearer authentication). 
  - `Basic` and a base64-encoded username:password string (for Basic authentication).",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "The name you want to provide to identify the webhook.",
                      "type": "string",
                    },
                    "url": {
                      "docs": "The URL where webhook events should be sent to.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "PaymentWebhookRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Ok",
                "status-code": 201,
                "type": "list<root.PaymentWebhook>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListPaymentWebhooks:
      path: /payments/webhooks/
      method: GET
      auth: true
      docs: List all payment webhooks associated with your Belvo account.
      source:
        openapi: ../openapi.yml
      display-name: List all payment webhooks
      response:
        docs: OK
        type: root.PaymentsWebhooksPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - response:
            body:
              count: 130
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              previous: previous
              results:
                - id: 32ab6809-6253-4fb0-be0f-94cce6ebb692
                  name:
                    key: value
                  url: https://mycompany.com/security/webhook
                  auth_header: Authorization
                  auth_token: '*******'
                  created_at: '2022-02-09T08:45:50Z'
                  created_by: 38322582-7c76-4775-abe8-0fb2bdeb8204
    RegisterPaymentWebhook:
      path: /payments/webhooks/
      method: POST
      auth: true
      docs: |
        Register a new payments webhook for your Belvo account.
      source:
        openapi: ../openapi.yml
      display-name: Register a new payment webhook
      request:
        name: PaymentWebhookRequest
        body:
          properties:
            name:
              type: string
              docs: The name you want to provide to identify the webhook.
            url:
              type: string
              docs: The URL where webhook events should be sent to.
            auth_header:
              type: optional<string>
              docs: >-
                The authentication header for the request. **Must** be set to
                `Authorization`.
            auth_token:
              type: optional<string>
              docs: >-
                The authentication token you need to send webhook events. Can be
                either:


                  - `Bearer` and a token (for Bearer authentication). 
                  - `Basic` and a base64-encoded username:password string (for Basic authentication).
        content-type: application/json
      response:
        docs: Ok
        type: list<root.PaymentWebhook>
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - request:
            name: Your webhook name
            url: https://mycompany.com/security/webhook
          response:
            body:
              - id: 32ab6809-6253-4fb0-be0f-94cce6ebb692
                name:
                  key: value
                url: https://mycompany.com/security/webhook
                auth_header: Authorization
                auth_token: '*******'
                created_at: '2022-02-09T08:45:50Z'
                created_by: 38322582-7c76-4775-abe8-0fb2bdeb8204
    DetailPaymentWebhooks:
      path: /payments/webhooks/{id}/
      method: GET
      auth: true
      docs: Get the details about a specific payment webhook.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `webhook.id` you want to get detailed information about.
      display-name: Get details about a payment webhook
      response:
        docs: OK
        type: root.PaymentWebhook
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: a3b92311-1888-449f-acaa-49ae28d68fcd
          response:
            body:
              id: 32ab6809-6253-4fb0-be0f-94cce6ebb692
              name:
                key: value
              url: https://mycompany.com/security/webhook
              auth_header: Authorization
              auth_token: '*******'
              created_at: '2022-02-09T08:45:50Z'
              created_by: 38322582-7c76-4775-abe8-0fb2bdeb8204
    DeletePaymentWebhooks:
      path: /payments/webhooks/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific payment webhook from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `webhook.id` that you want to delete.
      display-name: Delete a payment webhook
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
  source:
    openapi: ../openapi.yml
  display-name: Payment Webhooks
docs: >+
  Registering a webhook will let you know about any relevant updates that occur
  during the payment process. To set up a webhook, you need to make a [POST
  Register a new payment webhook](https://api.belvo.com/payments/webhooks/)
  request, providing some key details such as the name of the webhook and a URL
  where webhook events should be sent to.

",
    },
    "receivableTransactions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "With our receivable transactions resource, you can gain access to every transaction processed by the end user (business) conducted through a POS terminal. For each transaction, we return the:

- gross and net amounts
- type of card used
- fees applied to the transaction
- and more!",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Receivable Transactions",
          "endpoints": {
            "DestroyReceivableTransaction": {
              "auth": true,
              "display-name": "Delete a receivable transaction",
              "docs": "Delete a specific receivable transaction from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/receivables/transactions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `transaction.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailReceivableTransaction": {
              "auth": true,
              "display-name": "Get a receivable transaction's details",
              "docs": "Get the details of a specific receivable transaction.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "account": {
                        "id": "a7a3104c-5a3c-4536-81e1-14523097f645",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                      },
                      "collected_at": "2020-04-23T21:32:55Z",
                      "created_at": "2020-04-23T21:30:20Z",
                      "currency": "BRL",
                      "fees": [
                        {
                          "type": "TRANSACTION_FEE",
                          "value": 2.21,
                        },
                      ],
                      "gross_amount": 106.7,
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "institution_transaction_id": "134532345",
                      "net_amount": 104.58,
                      "number_of_installments": {
                        "paid": 1,
                        "total": 2,
                      },
                      "status": "APPROVED",
                      "type": "MASTERCARD_CREDIT",
                      "value_date": "2022-01-16",
                      "value_hour": "19:47",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/receivables/transactions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `transaction.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailReceivableTransactionRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.ReceivablesTransaction",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListReceivableTransactions": {
              "auth": true,
              "display-name": "List all receivable transactions",
              "docs": "Get a paginated list of all the existing receivable transactions in your Belvo account. We return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "account": "d979df3a-5d0f-4cc9-9bd4-b75c28b45963",
                    "account__in": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509",
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "value_date": "2022-05-05",
                    "value_date__gt": "2022-05-06",
                    "value_date__gte": "2022-05-04",
                    "value_date__lt": "2022-03-02",
                    "value_date__lte": "2022-03-01",
                    "value_date__range": "2022-03-01,2022-05-06",
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "account": {
                            "id": "a7a3104c-5a3c-4536-81e1-14523097f645",
                            "institution": {
                              "name": "erebor_mx_retail",
                            },
                          },
                          "collected_at": "2020-04-23T21:32:55Z",
                          "created_at": "2020-04-23T21:30:20Z",
                          "currency": "BRL",
                          "fees": [
                            {
                              "value": 2.21,
                            },
                          ],
                          "gross_amount": 106.7,
                          "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "institution_transaction_id": "134532345",
                          "net_amount": 104.58,
                          "number_of_installments": {
                            "paid": 1,
                            "total": 2,
                          },
                          "status": "APPROVED",
                          "type": "MASTERCARD_CREDIT",
                          "value_date": "2022-01-16",
                          "value_hour": "19:47",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/receivables/transactions/",
              "request": {
                "name": "ListReceivableTransactionsRequest",
                "query-parameters": {
                  "account": {
                    "docs": "The `account.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "account__in": {
                    "docs": "Return receivable transactions only for these `account.id`s.",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return receivable transactions that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return receivable transactions that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return receivable transactions that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return receivable transactions that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return receivable transactions that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return information for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "value_date": {
                    "docs": "Return receivable transactions for exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__gt": {
                    "docs": "Return receivable transactions for after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__gte": {
                    "docs": "Return receivable transactions for this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__lt": {
                    "docs": "Return receivable transactions for before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__lte": {
                    "docs": "Return receivable transactions for this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__range": {
                    "docs": "Return receivable transactions for this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.ReceivablesTransactionsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveReceivableTransactions": {
              "auth": true,
              "display-name": "Retrieve receivable transactions for a link",
              "docs": "Retrieve all receivable transactions for an existing link.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-08-05",
                    "date_to": "2020-10-05",
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": {
                      "account": {
                        "id": "a7a3104c-5a3c-4536-81e1-14523097f645",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                      },
                      "collected_at": "2020-04-23T21:32:55Z",
                      "created_at": "2020-04-23T21:30:20Z",
                      "currency": "BRL",
                      "fees": [
                        {
                          "type": "TRANSACTION_FEE",
                          "value": 2.21,
                        },
                      ],
                      "gross_amount": 106.7,
                      "id": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                      "institution_transaction_id": "134532345",
                      "net_amount": 104.58,
                      "number_of_installments": {
                        "paid": 1,
                        "total": 2,
                      },
                      "status": "APPROVED",
                      "type": "MASTERCARD_CREDIT",
                      "value_date": "2022-01-16",
                      "value_hour": "19:47",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/receivables/transactions/",
              "request": {
                "body": {
                  "properties": {
                    "date_from": {
                      "docs": "The date from which you want to start getting transactions for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "date_to": {
                      "docs": "The date you want to stop getting transactions for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "link": {
                      "docs": "The `link.id` that you want to get information for.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                    "token": {
                      "docs": "The OTP token generated by the bank.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ReceivableTransactionRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "root.ReceivablesTransaction",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListReceivableTransactions:
      path: /receivables/transactions/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all the existing receivable transactions in your
        Belvo account. We return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all receivable transactions
      request:
        name: ListReceivableTransactionsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
              `account.id` filters in order to improve your performance.
            validation:
              format: uuid
          account:
            type: optional<string>
            docs: >
              The `account.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
              `account.id` filters in order to improve your performance.
            validation:
              format: uuid
          account__in:
            type: optional<string>
            docs: Return receivable transactions only for these `account.id`s.
          created_at__gt:
            type: optional<string>
            docs: >-
              Return receivable transactions that were last updated in Belvo's
              database after this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return receivable transactions that were last updated in Belvo's
              database after or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return receivable transactions that were last updated in Belvo's
              database before this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return receivable transactions that were last updated in Belvo's
              database before or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return receivable transactions that were last updated in Belvo's
              database between two dates (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          link__in:
            type: optional<string>
            docs: Return information for these `link.id`s.
          value_date:
            type: optional<string>
            docs: >-
              Return receivable transactions for exactly this date (`YYYY-MM-DD`
              or full ISO-8601 timestamp).
          value_date__gt:
            type: optional<string>
            docs: >-
              Return receivable transactions for after this date (`YYYY-MM-DD`
              or full ISO-8601 timestamp).
          value_date__gte:
            type: optional<string>
            docs: >-
              Return receivable transactions for this date or later
              (`YYYY-MM-DD` or full ISO-8601 timestamp).
          value_date__lt:
            type: optional<string>
            docs: >-
              Return receivable transactions for before this date (`YYYY-MM-DD`
              or full ISO-8601 timestamp).
          value_date__lte:
            type: optional<string>
            docs: >-
              Return receivable transactions for this date or earlier
              (`YYYY-MM-DD` or full ISO-8601 timestamp).
          value_date__range:
            type: optional<string>
            docs: >-
              Return receivable transactions for this date range (`YYYY-MM-DD`
              or full ISO-8601 timestamp).
      response:
        docs: Ok
        type: root.ReceivablesTransactionsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
            account__in: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            value_date: '2022-05-05'
            value_date__gt: '2022-05-06'
            value_date__gte: '2022-05-04'
            value_date__lt: '2022-03-02'
            value_date__lte: '2022-03-01'
            value_date__range: 2022-03-01,2022-05-06
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  account:
                    id: a7a3104c-5a3c-4536-81e1-14523097f645
                    institution:
                      name: erebor_mx_retail
                  created_at: '2020-04-23T21:30:20Z'
                  collected_at: '2020-04-23T21:32:55Z'
                  value_hour: '19:47'
                  value_date: '2022-01-16'
                  institution_transaction_id: '134532345'
                  currency: BRL
                  type: MASTERCARD_CREDIT
                  gross_amount: 106.7
                  net_amount: 104.58
                  fees:
                    - value: 2.21
                  status: APPROVED
                  number_of_installments:
                    paid: 1
                    total: 2
    RetrieveReceivableTransactions:
      path: /receivables/transactions/
      method: POST
      auth: true
      docs: Retrieve all receivable transactions for an existing link.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve receivable transactions for a link
      request:
        name: ReceivableTransactionRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: The `link.id` that you want to get information for.
              validation:
                format: uuid
            date_from:
              type: string
              docs: >-
                The date from which you want to start getting transactions for,
                in `YYYY-MM-DD` format.


                ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            date_to:
              type: string
              docs: >-
                The date you want to stop getting transactions for, in
                `YYYY-MM-DD` format.


                ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date
                (in other words, no future dates).
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            token:
              type: optional<string>
              docs: The OTP token generated by the bank.
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: root.ReceivablesTransaction
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
            date_from: '2020-08-05'
            date_to: '2020-10-05'
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              account:
                id: a7a3104c-5a3c-4536-81e1-14523097f645
                institution:
                  name: erebor_mx_retail
                  type: bank
              created_at: '2020-04-23T21:30:20Z'
              collected_at: '2020-04-23T21:32:55Z'
              value_hour: '19:47'
              value_date: '2022-01-16'
              institution_transaction_id: '134532345'
              currency: BRL
              type: MASTERCARD_CREDIT
              gross_amount: 106.7
              net_amount: 104.58
              fees:
                - type: TRANSACTION_FEE
                  value: 2.21
              status: APPROVED
              number_of_installments:
                paid: 1
                total: 2
    DetailReceivableTransaction:
      path: /receivables/transactions/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific receivable transaction.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `transaction.id` you want to get detailed information about.
      display-name: Get a receivable transaction's details
      request:
        name: DetailReceivableTransactionRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.ReceivablesTransaction
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 30cb4806-6e00-48a4-91c9-ca55968576c8
              account:
                id: a7a3104c-5a3c-4536-81e1-14523097f645
                institution:
                  name: erebor_mx_retail
                  type: bank
              created_at: '2020-04-23T21:30:20Z'
              collected_at: '2020-04-23T21:32:55Z'
              value_hour: '19:47'
              value_date: '2022-01-16'
              institution_transaction_id: '134532345'
              currency: BRL
              type: MASTERCARD_CREDIT
              gross_amount: 106.7
              net_amount: 104.58
              fees:
                - type: TRANSACTION_FEE
                  value: 2.21
              status: APPROVED
              number_of_installments:
                paid: 1
                total: 2
    DestroyReceivableTransaction:
      path: /receivables/transactions/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific receivable transaction from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `transaction.id` that you want to delete.
      display-name: Delete a receivable transaction
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
  source:
    openapi: ../openapi.yml
  display-name: Receivable Transactions
docs: >-
  With our receivable transactions resource, you can gain access to every
  transaction processed by the end user (business) conducted through a POS
  terminal. For each transaction, we return the:


  - gross and net amounts

  - type of card used

  - fees applied to the transaction

  - and more!
",
    },
    "recurringExpenses.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Belvo's Recurring Expenses API allows you to identify a user's regular payments for subscription services, such as Netflix or gym memberships, as well as utility payments, such as electricity or phone bills. We return information for up to 365 days.

<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
    <strong>Info: </strong> The recurring expenses resource is <b>only</b> available for Checking and Savings accounts associated with banking links.
 </div>

 ### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field     | Available Filters |
| --------- | ----------------- |
| `account` | `=`, `in`         |
| `id`      | `=`, `in`         |
| `link`    | `=`, `in`         |

```curl cURL
# Filtering results so that you get the recurring expenses of one account:
https://sandbox.belvo.com/api/recurring-expenses/?account=89c91f42-df34-4c5d-a4f1-6e1e40438af4

```
```javascript Node
// Filtering results so that you get the recurring expenses of one account:
client. recurringExpenses.list({
  filters: {
    account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
  }
})

```
```python Python
# Filtering results so that you get the recurring expenses of one account:
client. RecurringExpenses.list(account="89c91f42-df34-4c5d-a4f1-6e1e40438af4")

```
```ruby Ruby
# Filtering results so that you get the recurring expenses of one account:
client. recurring_expenses.list(params: {
  account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Recurring Expenses",
          "endpoints": {
            "DestroyRecurringExpense": {
              "auth": true,
              "display-name": "Delete a recurring expense",
              "docs": "Delete a specific recurring expense from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete Tax compliance status
client.RecurringExpenses.delete('recurring-expenses.id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.recurring_expenses.delete id: 'recurring-expenses.id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.recurringExpenses.delete('recurring-expenses.id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/recurring-expenses/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `recurring-expenses.id` that you want to delete",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailRecurringExpense": {
              "auth": true,
              "display-name": "Get a recurring expense's details",
              "docs": "Get the details of a specific recurring expense.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get Recurring Expense
client.RecurringExpenses.get('recurring-expenses.id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.recurring_expenses.detail id: 'recurring-expenses.id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.recurringExpenses.detail('recurring-expenses.id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "current": 5874.13,
                          },
                          "balance_type": "ASSET",
                          "bank_product_id": "bank_product_id",
                          "category": "CHECKING_ACCOUNT",
                          "collected_at": "2019-09-27T13:01:41Z",
                          "created_at": "2022-02-09T08:45:50Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "MXN",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "institution": {
                            "name": "erebor_mx_retail",
                          },
                          "internal_identification": "internal_identification",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Cuenta Perfiles- M.N. - MXN-666",
                          "number": "4057068115181",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "150194683119900273",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Cuentas de efectivo",
                        },
                        "average_transaction_amount": 32.9,
                        "category": "Bills & Utilities",
                        "days_since_last_transaction": 5,
                        "frequency": "MONTHLY",
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "median_transaction_amount": 32.9,
                        "name": "Netflix",
                        "payment_type": "SUBSCRIPTION",
                        "transactions": [
                          {
                            "amount": 2145.45,
                            "description": "Netflix.com/march",
                            "value_date": "2019-10-23",
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/recurring-expenses/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `recurring-expenses.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailRecurringExpenseRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.RecurringExpenses>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListRecurringExpenses": {
              "auth": true,
              "display-name": "List all recurring expenses",
              "docs": "Get a paginated list of all recurring expenses in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Recurring Expenses
for income in client.RecurringExpenses.list():
pprint(income)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.recurring_expenses.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.recurringExpenses.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "account": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "account_in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "account": {
                            "balance": {
                              "current": 5874.13,
                            },
                            "balance_type": "ASSET",
                            "category": "CHECKING_ACCOUNT",
                            "collected_at": "2019-09-27T13:01:41Z",
                            "created_at": "2022-02-09T08:45:50Z",
                            "currency": "MXN",
                            "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                            "last_accessed_at": "2021-03-09T10:28:40Z",
                            "loan_data": {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "contract_end_date": "2027-10-01",
                              "monthly_payment": 1000,
                              "outstanding_balance": 182000,
                              "principal": 192000,
                            },
                            "name": "Cuenta Perfiles- M.N. - MXN-666",
                            "number": "4057068115181",
                            "public_identification_name": "CLABE",
                            "public_identification_value": "150194683119900273",
                            "type": "Cuentas de efectivo",
                          },
                          "average_transaction_amount": 32.9,
                          "category": "Bills & Utilities",
                          "days_since_last_transaction": 5,
                          "frequency": "MONTHLY",
                          "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                          "median_transaction_amount": 32.9,
                          "name": "Netflix",
                          "payment_type": "SUBSCRIPTION",
                          "transactions": [
                            {
                              "amount": 2145.45,
                              "description": "Netflix.com/march",
                              "value_date": "2019-10-23",
                            },
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/recurring-expenses/",
              "request": {
                "name": "ListRecurringExpensesRequest",
                "query-parameters": {
                  "account": {
                    "docs": "The `account.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "account_in": {
                    "docs": "Return recurring expenses for these `accound.id`s.",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information for this `recurring-expense.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information for these `recurring-expense.id`s.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return information for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.RecurringExpensesPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchRecurringExpenses": {
              "auth": true,
              "display-name": "Complete a recurring expenses request",
              "docs": "Used to resume an Recurring Expenses retrieve session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume Recurring Expenses
incomes = client.RecurringExpenses.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.recurring_expenses.resume(
  session: 'session_id',
  token: 'token',
  link: 'link_id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.recurringExpenses.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "current": 5874.13,
                          },
                          "balance_type": "ASSET",
                          "bank_product_id": "bank_product_id",
                          "category": "CHECKING_ACCOUNT",
                          "collected_at": "2019-09-27T13:01:41Z",
                          "created_at": "2022-02-09T08:45:50Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "MXN",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "institution": {
                            "name": "erebor_mx_retail",
                          },
                          "internal_identification": "internal_identification",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Cuenta Perfiles- M.N. - MXN-666",
                          "number": "4057068115181",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "150194683119900273",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Cuentas de efectivo",
                        },
                        "average_transaction_amount": 32.9,
                        "category": "Bills & Utilities",
                        "days_since_last_transaction": 5,
                        "frequency": "MONTHLY",
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "median_transaction_amount": 32.9,
                        "name": "Netflix",
                        "payment_type": "SUBSCRIPTION",
                        "transactions": [
                          {
                            "amount": 2145.45,
                            "description": "Netflix.com/march",
                            "value_date": "2019-10-23",
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/recurring-expenses/",
              "request": {
                "body": "root.PatchBody",
                "content-type": "application/json",
                "name": "PatchRecurringExpensesRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when save_data=false)",
                "status-code": 200,
                "type": "list<root.RecurringExpenses>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveRecurringExpenses": {
              "auth": true,
              "display-name": "Retrieve recurring expenses for a link",
              "docs": "Retrieve recurring expense insights for <b>checking and savings accounts</b> from a specific link. You can receive insights for a period of up to 365 days, depending on the transaction history available for each [bank](https://developers.belvo.com/docs/institution).",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve Recurring Expense
client.RecurringExpenses.create('link-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.recurring_expenses.retrieve(
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.recurringExpenses.retrieve('linkID')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "current": 5874.13,
                          },
                          "balance_type": "ASSET",
                          "bank_product_id": "bank_product_id",
                          "category": "CHECKING_ACCOUNT",
                          "collected_at": "2019-09-27T13:01:41Z",
                          "created_at": "2022-02-09T08:45:50Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "MXN",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "institution": {
                            "name": "erebor_mx_retail",
                          },
                          "internal_identification": "internal_identification",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Cuenta Perfiles- M.N. - MXN-666",
                          "number": "4057068115181",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "150194683119900273",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Cuentas de efectivo",
                        },
                        "average_transaction_amount": 32.9,
                        "category": "Bills & Utilities",
                        "days_since_last_transaction": 5,
                        "frequency": "MONTHLY",
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "median_transaction_amount": 32.9,
                        "name": "Netflix",
                        "payment_type": "SUBSCRIPTION",
                        "transactions": [
                          {
                            "amount": 2145.45,
                            "description": "Netflix.com/march",
                            "value_date": "2019-10-23",
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/recurring-expenses/",
              "request": {
                "body": {
                  "properties": {
                    "date_from": {
                      "docs": "The date from which you want to start getting recurring expenses for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_to`.



‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "date_to": {
                      "docs": "The date you want to stop getting recurring expenses for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_from`.



‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "link": {
                      "docs": "The `link.id` that you want to get information for.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                    "token": {
                      "docs": "The OTP token generated by the bank.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RecurringExpensesRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when save_data=false)",
                "status-code": 200,
                "type": "list<root.RecurringExpenses>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListRecurringExpenses:
      path: /api/recurring-expenses/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all recurring expenses in your Belvo account. By
        default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all recurring expenses
      request:
        name: ListRecurringExpensesRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
              `account.id` filters in order to improve your performance.
            validation:
              format: uuid
          account:
            type: optional<string>
            docs: >
              The `account.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
              `account.id` filters in order to improve your performance.
            validation:
              format: uuid
          account_in:
            type: optional<string>
            docs: Return recurring expenses for these `accound.id`s.
          id:
            type: optional<string>
            docs: Return information for this `recurring-expense.id`.
          id__in:
            type: optional<string>
            docs: Return information for these `recurring-expense.id`s.
          link__in:
            type: optional<string>
            docs: Return information for these `link.id`s.
      response:
        docs: Ok
        type: root.RecurringExpensesPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account_in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                  account:
                    id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                    collected_at: '2019-09-27T13:01:41Z'
                    created_at: '2022-02-09T08:45:50Z'
                    category: CHECKING_ACCOUNT
                    balance_type: ASSET
                    type: Cuentas de efectivo
                    name: Cuenta Perfiles- M.N. - MXN-666
                    number: '4057068115181'
                    balance:
                      current: 5874.13
                    currency: MXN
                    public_identification_name: CLABE
                    public_identification_value: '150194683119900273'
                    last_accessed_at: '2021-03-09T10:28:40Z'
                    loan_data:
                      collected_at: '2022-02-09T08:45:50Z'
                      principal: 192000
                      outstanding_balance: 182000
                      monthly_payment: 1000
                      contract_end_date: '2027-10-01'
                  name: Netflix
                  transactions:
                    - amount: 2145.45
                      description: Netflix.com/march
                      value_date: '2019-10-23'
                  frequency: MONTHLY
                  average_transaction_amount: 32.9
                  median_transaction_amount: 32.9
                  days_since_last_transaction: 5
                  category: Bills & Utilities
                  payment_type: SUBSCRIPTION
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Recurring Expenses

                for income in client.RecurringExpenses.list():

                pprint(income)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.recurring_expenses.list
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.recurringExpenses.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveRecurringExpenses:
      path: /api/recurring-expenses/
      method: POST
      auth: true
      docs: >-
        Retrieve recurring expense insights for <b>checking and savings
        accounts</b> from a specific link. You can receive insights for a period
        of up to 365 days, depending on the transaction history available for
        each [bank](https://developers.belvo.com/docs/institution).
      source:
        openapi: ../openapi.yml
      display-name: Retrieve recurring expenses for a link
      request:
        name: RecurringExpensesRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: The `link.id` that you want to get information for.
              validation:
                format: uuid
            token:
              type: optional<string>
              docs: The OTP token generated by the bank.
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
            date_from:
              type: optional<string>
              docs: >-
                The date from which you want to start getting recurring expenses
                for, in `YYYY-MM-DD` format, within the last 365 days. When you
                use this parameter, you must also send `date_to`.




                ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            date_to:
              type: optional<string>
              docs: >-
                The date you want to stop getting recurring expenses for, in
                `YYYY-MM-DD` format, within the last 365 days. When you use this
                parameter, you must also send `date_from`.




                ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date
                (in other words, no future dates).
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
        content-type: application/json
      response:
        docs: Ok (when save_data=false)
        type: list<root.RecurringExpenses>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                account:
                  id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                  collected_at: '2019-09-27T13:01:41Z'
                  created_at: '2022-02-09T08:45:50Z'
                  category: CHECKING_ACCOUNT
                  balance_type: ASSET
                  type: Cuentas de efectivo
                  name: Cuenta Perfiles- M.N. - MXN-666
                  number: '4057068115181'
                  balance:
                    current: 5874.13
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '150194683119900273'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  bank_product_id: bank_product_id
                  internal_identification: internal_identification
                name: Netflix
                transactions:
                  - amount: 2145.45
                    description: Netflix.com/march
                    value_date: '2019-10-23'
                frequency: MONTHLY
                average_transaction_amount: 32.9
                median_transaction_amount: 32.9
                days_since_last_transaction: 5
                category: Bills & Utilities
                payment_type: SUBSCRIPTION
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve Recurring Expense

                client.RecurringExpenses.create('link-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.recurring_expenses.retrieve(
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.recurringExpenses.retrieve('linkID')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchRecurringExpenses:
      path: /api/recurring-expenses/
      method: PATCH
      auth: true
      docs: >-
        Used to resume an Recurring Expenses retrieve session that was paused
        because an MFA token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete a recurring expenses request
      request:
        body: root.PatchBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchRecurringExpensesRequest
        content-type: application/json
      response:
        docs: Ok (when save_data=false)
        type: list<root.RecurringExpenses>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                account:
                  id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                  collected_at: '2019-09-27T13:01:41Z'
                  created_at: '2022-02-09T08:45:50Z'
                  category: CHECKING_ACCOUNT
                  balance_type: ASSET
                  type: Cuentas de efectivo
                  name: Cuenta Perfiles- M.N. - MXN-666
                  number: '4057068115181'
                  balance:
                    current: 5874.13
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '150194683119900273'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  bank_product_id: bank_product_id
                  internal_identification: internal_identification
                name: Netflix
                transactions:
                  - amount: 2145.45
                    description: Netflix.com/march
                    value_date: '2019-10-23'
                frequency: MONTHLY
                average_transaction_amount: 32.9
                median_transaction_amount: 32.9
                days_since_last_transaction: 5
                category: Bills & Utilities
                payment_type: SUBSCRIPTION
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume Recurring Expenses

                incomes = client.RecurringExpenses.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.recurring_expenses.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.recurringExpenses.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailRecurringExpense:
      path: /api/recurring-expenses/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific recurring expense.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: >-
            The `recurring-expenses.id` you want to get detailed information
            about.
      display-name: Get a recurring expense's details
      request:
        name: DetailRecurringExpenseRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: list<root.RecurringExpenses>
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                account:
                  id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                  collected_at: '2019-09-27T13:01:41Z'
                  created_at: '2022-02-09T08:45:50Z'
                  category: CHECKING_ACCOUNT
                  balance_type: ASSET
                  type: Cuentas de efectivo
                  name: Cuenta Perfiles- M.N. - MXN-666
                  number: '4057068115181'
                  balance:
                    current: 5874.13
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '150194683119900273'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  bank_product_id: bank_product_id
                  internal_identification: internal_identification
                name: Netflix
                transactions:
                  - amount: 2145.45
                    description: Netflix.com/march
                    value_date: '2019-10-23'
                frequency: MONTHLY
                average_transaction_amount: 32.9
                median_transaction_amount: 32.9
                days_since_last_transaction: 5
                category: Bills & Utilities
                payment_type: SUBSCRIPTION
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get Recurring Expense

                client.RecurringExpenses.get('recurring-expenses.id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.recurring_expenses.detail id: 'recurring-expenses.id'
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.recurringExpenses.detail('recurring-expenses.id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyRecurringExpense:
      path: /api/recurring-expenses/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific recurring expense from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `recurring-expenses.id` that you want to delete
      display-name: Delete a recurring expense
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - name: Belvo Python SDK
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete Tax compliance status

                client.RecurringExpenses.delete('recurring-expenses.id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.recurring_expenses.delete id: 'recurring-expenses.id'
            - name: Belvo Node SDK
              language: node
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.recurringExpenses.delete('recurring-expenses.id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Recurring Expenses
docs: >-
  Belvo's Recurring Expenses API allows you to identify a user's regular
  payments for subscription services, such as Netflix or gym memberships, as
  well as utility payments, such as electricity or phone bills. We return
  information for up to 365 days.


  <div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding:
  12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
      <strong>Info: </strong> The recurring expenses resource is <b>only</b> available for Checking and Savings accounts associated with banking links.
   </div>

   ### **üî¶ Filterable fields**

  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field     | Available Filters |

  | --------- | ----------------- |

  | `account` | `=`, `in`         |

  | `id`      | `=`, `in`         |

  | `link`    | `=`, `in`         |


  ```curl cURL

  # Filtering results so that you get the recurring expenses of one account:

  https://sandbox.belvo.com/api/recurring-expenses/?account=89c91f42-df34-4c5d-a4f1-6e1e40438af4


  ```

  ```javascript Node

  // Filtering results so that you get the recurring expenses of one account:

  client. recurringExpenses.list({
    filters: {
      account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get the recurring expenses of one account:

  client. RecurringExpenses.list(account="89c91f42-df34-4c5d-a4f1-6e1e40438af4")


  ```

  ```ruby Ruby

  # Filtering results so that you get the recurring expenses of one account:

  client. recurring_expenses.list(params: {
    account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
  })

  ```
",
    },
    "riskInsights.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Belvo's Risk Insights endpoint exposes a set of features that can be used to improve your company's credit risk and opportunity decisions. This set of features can be used as building blocks to create or iterate on your credit score using transactional banking data to improve the predictive power of your models. You can use these components as you require and make the most sense for your specific use case. 

We take up to 90 days of transactional data from the user's checking, savings, loans, and credit card accounts to calculate the risk insights.

If you need to know the currency of the account, do a GET Details to the Accounts endpoint (using the account ID you receive from in the accounts array of the response).

### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field  | Available Filters |
| ------ | ----------------- |
| `id`   | `=`, `in`         |
| `link` | `=`, `in`         |

```curl cURL
# Filtering results so that you get the risk insights of one link:
https://sandbox.belvo.com/api/risk-insights/?link=89c91f42-df34-4c5d-a4f1-6e1e40438af4

```
```javascript Node
// Filtering results so that you get the risk insights of one link:
client. riskInsights.list({
  filters: {
    account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
  }
})

```
```python Python
# Filtering results so that you get the risk insights of one link:
client. RiskInsights.list(link="89c91f42-df34-4c5d-a4f1-6e1e40438af4")

```
```ruby Ruby
# Filtering results so that you get the risk insights of one link:
client. risk_insights.list(params: {
  link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Risk Insights",
          "endpoints": {
            "DestroyRiskInsights": {
              "auth": true,
              "display-name": "Delete a risk insight",
              "docs": "Delete a specific risk insight from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
https://sandbox.belvo.com/api/risk-insights/{id}/ \
-H 'Host: sandbox.belvo.com' \
-u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete Risk insight
client.RiskInsights.delete('risk-insights.id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "python",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.risk_insights.delete id: 'risk-insights.id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "ruby",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.riskInsights.delete('risk-insights.id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "javascript",
                      "name": "javascript",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/risk-insights/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `risk-insights.id` that you want to delete",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailRiskInsights": {
              "auth": true,
              "display-name": "Get a risk insight's details",
              "docs": "Get the details of a specific risk insight.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/risk-insights/{id} \
-u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get Risk insight
client.RiskInsights.get('risk-insights.id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "python",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.risk_insights.detail id: 'risk-insights.id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "ruby",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.riskInsights.detail('risk-insights.id')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "javascript",
                      "name": "javascript",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": [
                      {
                        "accounts": [
                          "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "00293c8e-1152-440b-9892-3c071fb88672",
                          "cf638fba-ef45-4c10-bc6f-adecc4b2bf4e",
                        ],
                        "balances_metrics": {
                          "balance_threshold_x": 267,
                          "closing_balance": 24.19,
                          "days_balance_below_0_1m": 0,
                          "days_balance_below_0_1w": 0,
                          "days_balance_below_0_3m": 0,
                          "days_balance_below_x_1m": 3,
                          "days_balance_below_x_1w": 3,
                          "days_balance_below_x_3m": 3,
                          "max_balance_1m": 3062.11,
                          "max_balance_1w": 3062.11,
                          "max_balance_3m": 3062.11,
                          "min_balance_1m": 0.51,
                          "min_balance_1w": 0.51,
                          "min_balance_3m": 0.51,
                        },
                        "cashflow_metrics": {
                          "positive_to_negative_ratio_1m": 0.98,
                          "positive_to_negative_ratio_1w": 0.98,
                          "positive_to_negative_ratio_3m": 0.98,
                          "sum_negative_1m": 10237.03,
                          "sum_negative_1w": 10237.03,
                          "sum_negative_3m": 10237.03,
                          "sum_positive_1m": 10022.01,
                          "sum_positive_1w": 10022.01,
                          "sum_positive_3m": 10022.01,
                        },
                        "created_at": "2022-02-01T20:25:47Z",
                        "credit_cards_metrics": {
                          "num_accounts": 2,
                          "sum_credit_limit": 600.5,
                          "sum_credit_used": 200.5,
                        },
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                        "loans_metrics": {
                          "num_accounts": 5,
                          "sum_loans_monthly_payment": 400,
                          "sum_loans_outstanding_principal": 2000,
                          "sum_loans_principal": 5000,
                        },
                        "transactions_metrics": {
                          "max_incoming_amount_1m": 3030,
                          "max_incoming_amount_1w": 3030,
                          "max_incoming_amount_3m": 3030,
                          "max_outgoing_amount_1m": 3027.44,
                          "max_outgoing_amount_1w": 3027.44,
                          "max_outgoing_amount_3m": 3027.44,
                          "mean_incoming_amount_1m": 3030,
                          "mean_incoming_amount_1w": 3030,
                          "mean_incoming_amount_3m": 3030,
                          "mean_outgoing_amount_1m": 3027.44,
                          "mean_outgoing_amount_1w": 3027.44,
                          "mean_outgoing_amount_3m": 3027.44,
                          "num_incoming_transactions_1m": 20,
                          "num_incoming_transactions_1w": 20,
                          "num_incoming_transactions_3m": 20,
                          "num_outgoing_transactions_1m": 19,
                          "num_outgoing_transactions_1w": 19,
                          "num_outgoing_transactions_3m": 19,
                          "num_transactions_1m": 39,
                          "num_transactions_1w": 39,
                          "num_transactions_3m": 39,
                          "sum_incoming_amount_1m": 10022.01,
                          "sum_incoming_amount_1w": 10022.01,
                          "sum_incoming_amount_3m": 10022.01,
                          "sum_outgoing_amount_1m": 10237.03,
                          "sum_outgoing_amount_1w": 10237.03,
                          "sum_outgoing_amount_3m": 10237.03,
                        },
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/risk-insights/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `risk-insights.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailRiskInsightsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.RiskInsights>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListRiskInsights": {
              "auth": true,
              "display-name": "List all risk insights",
              "docs": "Get a paginated list of all risk insight analyses in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/risk-insights/ \
-u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Risk insights
for risk_insight in client.RiskInsights.list():
pprint(income)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "python",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.risk_insights.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "ruby",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.riskInsights.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "javascript",
                      "name": "javascript",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "accounts": [
                            "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                            "00293c8e-1152-440b-9892-3c071fb88672",
                            "cf638fba-ef45-4c10-bc6f-adecc4b2bf4e",
                          ],
                          "balances_metrics": {
                            "balance_threshold_x": 267,
                            "closing_balance": 24.19,
                            "days_balance_below_0_1m": 0,
                            "days_balance_below_0_1w": 0,
                            "days_balance_below_0_3m": 0,
                            "days_balance_below_x_1m": 3,
                            "days_balance_below_x_1w": 3,
                            "days_balance_below_x_3m": 3,
                            "max_balance_1m": 3062.11,
                            "max_balance_1w": 3062.11,
                            "max_balance_3m": 3062.11,
                            "min_balance_1m": 0.51,
                            "min_balance_1w": 0.51,
                            "min_balance_3m": 0.51,
                          },
                          "cashflow_metrics": {
                            "positive_to_negative_ratio_1m": 0.98,
                            "positive_to_negative_ratio_1w": 0.98,
                            "positive_to_negative_ratio_3m": 0.98,
                            "sum_negative_1m": 10237.03,
                            "sum_negative_1w": 10237.03,
                            "sum_negative_3m": 10237.03,
                            "sum_positive_1m": 10022.01,
                            "sum_positive_1w": 10022.01,
                            "sum_positive_3m": 10022.01,
                          },
                          "created_at": "2022-02-01T20:25:47Z",
                          "credit_cards_metrics": {
                            "num_accounts": 2,
                            "sum_credit_limit": 600.5,
                            "sum_credit_used": 200.5,
                          },
                          "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loans_metrics": {
                            "num_accounts": 5,
                            "sum_loans_monthly_payment": 400,
                            "sum_loans_outstanding_principal": 2000,
                            "sum_loans_principal": 5000,
                          },
                          "transactions_metrics": {
                            "max_incoming_amount_1m": 3030,
                            "max_incoming_amount_1w": 3030,
                            "max_incoming_amount_3m": 3030,
                            "max_outgoing_amount_1m": 3027.44,
                            "max_outgoing_amount_1w": 3027.44,
                            "max_outgoing_amount_3m": 3027.44,
                            "mean_incoming_amount_1m": 3030,
                            "mean_incoming_amount_1w": 3030,
                            "mean_incoming_amount_3m": 3030,
                            "mean_outgoing_amount_1m": 3027.44,
                            "mean_outgoing_amount_1w": 3027.44,
                            "mean_outgoing_amount_3m": 3027.44,
                            "num_incoming_transactions_1m": 20,
                            "num_incoming_transactions_1w": 20,
                            "num_incoming_transactions_3m": 20,
                            "num_outgoing_transactions_1m": 19,
                            "num_outgoing_transactions_1w": 19,
                            "num_outgoing_transactions_3m": 19,
                            "num_transactions_1m": 39,
                            "num_transactions_1w": 39,
                            "num_transactions_3m": 39,
                            "sum_incoming_amount_1m": 10022.01,
                            "sum_incoming_amount_1w": 10022.01,
                            "sum_incoming_amount_3m": 10022.01,
                            "sum_outgoing_amount_1m": 10237.03,
                            "sum_outgoing_amount_1w": 10237.03,
                            "sum_outgoing_amount_3m": 10237.03,
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/risk-insights/",
              "request": {
                "name": "ListRiskInsightsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information for this `risk-insight.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information for these `risk-insight.id`s.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return information for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.RiskInsightsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchRiskInsights": {
              "auth": true,
              "display-name": "Complete a risk insights request",
              "docs": "Used to resume an Risk insights retrieve session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
https://sandbox.belvo.com/api/risk-insights/ \
-H 'Content-Type: application/json' \
-H 'Host: sandbox.belvo.com' \
-H 'cache-control: no-cache' \
-d '{
    "session": "",
    "token": "",
    "link": ""
}' \
-u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume Risk insights
risk_insights = client.RiskInsights.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "python",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
    # https://developers.belvo.com/docs/belvo-sdks

    require 'belvo'

    client = Belvo::Client.new(
      'Secret Key ID',
      'Secret Key PASSWORD',
      'sandbox'
    )

    client.risk_insights.resume(
      session: 'session_id',
      token: 'token',
      link: 'link_id'
    )
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "ruby",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.riskInsights.resume('sessionId', 'token', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "javascript",
                      "name": "javascript",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "accounts": [
                          "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "00293c8e-1152-440b-9892-3c071fb88672",
                          "cf638fba-ef45-4c10-bc6f-adecc4b2bf4e",
                        ],
                        "balances_metrics": {
                          "balance_threshold_x": 267,
                          "closing_balance": 24.19,
                          "days_balance_below_0_1m": 0,
                          "days_balance_below_0_1w": 0,
                          "days_balance_below_0_3m": 0,
                          "days_balance_below_x_1m": 3,
                          "days_balance_below_x_1w": 3,
                          "days_balance_below_x_3m": 3,
                          "max_balance_1m": 3062.11,
                          "max_balance_1w": 3062.11,
                          "max_balance_3m": 3062.11,
                          "min_balance_1m": 0.51,
                          "min_balance_1w": 0.51,
                          "min_balance_3m": 0.51,
                        },
                        "cashflow_metrics": {
                          "positive_to_negative_ratio_1m": 0.98,
                          "positive_to_negative_ratio_1w": 0.98,
                          "positive_to_negative_ratio_3m": 0.98,
                          "sum_negative_1m": 10237.03,
                          "sum_negative_1w": 10237.03,
                          "sum_negative_3m": 10237.03,
                          "sum_positive_1m": 10022.01,
                          "sum_positive_1w": 10022.01,
                          "sum_positive_3m": 10022.01,
                        },
                        "created_at": "2022-02-01T20:25:47Z",
                        "credit_cards_metrics": {
                          "num_accounts": 2,
                          "sum_credit_limit": 600.5,
                          "sum_credit_used": 200.5,
                        },
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                        "loans_metrics": {
                          "num_accounts": 5,
                          "sum_loans_monthly_payment": 400,
                          "sum_loans_outstanding_principal": 2000,
                          "sum_loans_principal": 5000,
                        },
                        "transactions_metrics": {
                          "max_incoming_amount_1m": 3030,
                          "max_incoming_amount_1w": 3030,
                          "max_incoming_amount_3m": 3030,
                          "max_outgoing_amount_1m": 3027.44,
                          "max_outgoing_amount_1w": 3027.44,
                          "max_outgoing_amount_3m": 3027.44,
                          "mean_incoming_amount_1m": 3030,
                          "mean_incoming_amount_1w": 3030,
                          "mean_incoming_amount_3m": 3030,
                          "mean_outgoing_amount_1m": 3027.44,
                          "mean_outgoing_amount_1w": 3027.44,
                          "mean_outgoing_amount_3m": 3027.44,
                          "num_incoming_transactions_1m": 20,
                          "num_incoming_transactions_1w": 20,
                          "num_incoming_transactions_3m": 20,
                          "num_outgoing_transactions_1m": 19,
                          "num_outgoing_transactions_1w": 19,
                          "num_outgoing_transactions_3m": 19,
                          "num_transactions_1m": 39,
                          "num_transactions_1w": 39,
                          "num_transactions_3m": 39,
                          "sum_incoming_amount_1m": 10022.01,
                          "sum_incoming_amount_1w": 10022.01,
                          "sum_incoming_amount_3m": 10022.01,
                          "sum_outgoing_amount_1m": 10237.03,
                          "sum_outgoing_amount_1w": 10237.03,
                          "sum_outgoing_amount_3m": 10237.03,
                        },
                      },
                    ],
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/risk-insights/",
              "request": {
                "body": "root.PatchBody",
                "content-type": "application/json",
                "name": "PatchRiskInsightsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when save_data=false)",
                "status-code": 200,
                "type": "list<root.RiskInsights>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveRiskInsights": {
              "auth": true,
              "display-name": "Retrieve risk insights for a link",
              "docs": "Request the risk insights for a given link ID.

If you need to know the currency of the account, just do a GET Details to the accounts endpoint (using the ID you receive from the accounts response).",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/risk-insights/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link_id"
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve Risk insights
client.RiskInsights.create('link-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "python",
                    },
                    {
                      "code": "# For more information about our SDKs go to:
# https://developers.belvo.com/docs/belvo-sdks

require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.risk_insights.retrieve(
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "ruby",
                    },
                    {
                      "code": "// For more information about our SDKs go to:
// https://developers.belvo.com/docs/belvo-sdks

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.riskInsights.retrieve('linkID')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "javascript",
                      "name": "javascript",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "accounts": [
                          "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "00293c8e-1152-440b-9892-3c071fb88672",
                          "cf638fba-ef45-4c10-bc6f-adecc4b2bf4e",
                        ],
                        "balances_metrics": {
                          "balance_threshold_x": 267,
                          "closing_balance": 24.19,
                          "days_balance_below_0_1m": 0,
                          "days_balance_below_0_1w": 0,
                          "days_balance_below_0_3m": 0,
                          "days_balance_below_x_1m": 3,
                          "days_balance_below_x_1w": 3,
                          "days_balance_below_x_3m": 3,
                          "max_balance_1m": 3062.11,
                          "max_balance_1w": 3062.11,
                          "max_balance_3m": 3062.11,
                          "min_balance_1m": 0.51,
                          "min_balance_1w": 0.51,
                          "min_balance_3m": 0.51,
                        },
                        "cashflow_metrics": {
                          "positive_to_negative_ratio_1m": 0.98,
                          "positive_to_negative_ratio_1w": 0.98,
                          "positive_to_negative_ratio_3m": 0.98,
                          "sum_negative_1m": 10237.03,
                          "sum_negative_1w": 10237.03,
                          "sum_negative_3m": 10237.03,
                          "sum_positive_1m": 10022.01,
                          "sum_positive_1w": 10022.01,
                          "sum_positive_3m": 10022.01,
                        },
                        "created_at": "2022-02-01T20:25:47Z",
                        "credit_cards_metrics": {
                          "num_accounts": 2,
                          "sum_credit_limit": 600.5,
                          "sum_credit_used": 200.5,
                        },
                        "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                        "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                        "loans_metrics": {
                          "num_accounts": 5,
                          "sum_loans_monthly_payment": 400,
                          "sum_loans_outstanding_principal": 2000,
                          "sum_loans_principal": 5000,
                        },
                        "transactions_metrics": {
                          "max_incoming_amount_1m": 3030,
                          "max_incoming_amount_1w": 3030,
                          "max_incoming_amount_3m": 3030,
                          "max_outgoing_amount_1m": 3027.44,
                          "max_outgoing_amount_1w": 3027.44,
                          "max_outgoing_amount_3m": 3027.44,
                          "mean_incoming_amount_1m": 3030,
                          "mean_incoming_amount_1w": 3030,
                          "mean_incoming_amount_3m": 3030,
                          "mean_outgoing_amount_1m": 3027.44,
                          "mean_outgoing_amount_1w": 3027.44,
                          "mean_outgoing_amount_3m": 3027.44,
                          "num_incoming_transactions_1m": 20,
                          "num_incoming_transactions_1w": 20,
                          "num_incoming_transactions_3m": 20,
                          "num_outgoing_transactions_1m": 19,
                          "num_outgoing_transactions_1w": 19,
                          "num_outgoing_transactions_3m": 19,
                          "num_transactions_1m": 39,
                          "num_transactions_1w": 39,
                          "num_transactions_3m": 39,
                          "sum_incoming_amount_1m": 10022.01,
                          "sum_incoming_amount_1w": 10022.01,
                          "sum_incoming_amount_3m": 10022.01,
                          "sum_outgoing_amount_1m": 10237.03,
                          "sum_outgoing_amount_1w": 10237.03,
                          "sum_outgoing_amount_3m": 10237.03,
                        },
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/risk-insights/",
              "request": {
                "body": "root.StandardRequest",
                "content-type": "application/json",
                "name": "RetrieveRiskInsightsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when save_data=false)",
                "status-code": 200,
                "type": "list<root.RiskInsights>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListRiskInsights:
      path: /api/risk-insights/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all risk insight analyses in your Belvo account.
        By default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all risk insights
      request:
        name: ListRiskInsightsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          id:
            type: optional<string>
            docs: Return information for this `risk-insight.id`.
          id__in:
            type: optional<string>
            docs: Return information for these `risk-insight.id`s.
          link__in:
            type: optional<string>
            docs: Return information for these `link.id`s.
      response:
        docs: Ok
        type: root.RiskInsightsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  accounts:
                    - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                    - 00293c8e-1152-440b-9892-3c071fb88672
                    - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
                  created_at: '2022-02-01T20:25:47Z'
                  transactions_metrics:
                    num_transactions_1w: 39
                    num_transactions_1m: 39
                    num_transactions_3m: 39
                    num_incoming_transactions_1w: 20
                    num_incoming_transactions_1m: 20
                    num_incoming_transactions_3m: 20
                    num_outgoing_transactions_1w: 19
                    num_outgoing_transactions_1m: 19
                    num_outgoing_transactions_3m: 19
                    sum_incoming_amount_1w: 10022.01
                    sum_incoming_amount_1m: 10022.01
                    sum_incoming_amount_3m: 10022.01
                    sum_outgoing_amount_1w: 10237.03
                    sum_outgoing_amount_1m: 10237.03
                    sum_outgoing_amount_3m: 10237.03
                    max_incoming_amount_1w: 3030
                    max_incoming_amount_1m: 3030
                    max_incoming_amount_3m: 3030
                    max_outgoing_amount_1w: 3027.44
                    max_outgoing_amount_1m: 3027.44
                    max_outgoing_amount_3m: 3027.44
                    mean_incoming_amount_1w: 3030
                    mean_incoming_amount_1m: 3030
                    mean_incoming_amount_3m: 3030
                    mean_outgoing_amount_1w: 3027.44
                    mean_outgoing_amount_1m: 3027.44
                    mean_outgoing_amount_3m: 3027.44
                  balances_metrics:
                    min_balance_1w: 0.51
                    min_balance_1m: 0.51
                    min_balance_3m: 0.51
                    max_balance_1w: 3062.11
                    max_balance_1m: 3062.11
                    max_balance_3m: 3062.11
                    closing_balance: 24.19
                    days_balance_below_0_1w: 0
                    days_balance_below_0_1m: 0
                    days_balance_below_0_3m: 0
                    days_balance_below_x_1w: 3
                    days_balance_below_x_1m: 3
                    days_balance_below_x_3m: 3
                    balance_threshold_x: 267
                  cashflow_metrics:
                    sum_positive_1w: 10022.01
                    sum_positive_1m: 10022.01
                    sum_positive_3m: 10022.01
                    sum_negative_1w: 10237.03
                    sum_negative_1m: 10237.03
                    sum_negative_3m: 10237.03
                    positive_to_negative_ratio_1w: 0.98
                    positive_to_negative_ratio_1m: 0.98
                    positive_to_negative_ratio_3m: 0.98
                  credit_cards_metrics:
                    num_accounts: 2
                    sum_credit_limit: 600.5
                    sum_credit_used: 200.5
                  loans_metrics:
                    num_accounts: 5
                    sum_loans_principal: 5000
                    sum_loans_outstanding_principal: 2000
                    sum_loans_monthly_payment: 400
          code-samples:
            - name: cURL
              language: cURL
              code: |
                curl https://sandbox.belvo.com/api/risk-insights/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: python
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Risk insights

                for risk_insight in client.RiskInsights.list():

                pprint(income)
            - name: ruby
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.risk_insights.list
            - name: javascript
              language: javascript
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.riskInsights.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveRiskInsights:
      path: /api/risk-insights/
      method: POST
      auth: true
      docs: >-
        Request the risk insights for a given link ID.


        If you need to know the currency of the account, just do a GET Details
        to the accounts endpoint (using the ID you receive from the accounts
        response).
      source:
        openapi: ../openapi.yml
      display-name: Retrieve risk insights for a link
      request:
        body: root.StandardRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: RetrieveRiskInsightsRequest
        content-type: application/json
      response:
        docs: Ok (when save_data=false)
        type: list<root.RiskInsights>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                accounts:
                  - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  - 00293c8e-1152-440b-9892-3c071fb88672
                  - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
                created_at: '2022-02-01T20:25:47Z'
                transactions_metrics:
                  num_transactions_1w: 39
                  num_transactions_1m: 39
                  num_transactions_3m: 39
                  num_incoming_transactions_1w: 20
                  num_incoming_transactions_1m: 20
                  num_incoming_transactions_3m: 20
                  num_outgoing_transactions_1w: 19
                  num_outgoing_transactions_1m: 19
                  num_outgoing_transactions_3m: 19
                  sum_incoming_amount_1w: 10022.01
                  sum_incoming_amount_1m: 10022.01
                  sum_incoming_amount_3m: 10022.01
                  sum_outgoing_amount_1w: 10237.03
                  sum_outgoing_amount_1m: 10237.03
                  sum_outgoing_amount_3m: 10237.03
                  max_incoming_amount_1w: 3030
                  max_incoming_amount_1m: 3030
                  max_incoming_amount_3m: 3030
                  max_outgoing_amount_1w: 3027.44
                  max_outgoing_amount_1m: 3027.44
                  max_outgoing_amount_3m: 3027.44
                  mean_incoming_amount_1w: 3030
                  mean_incoming_amount_1m: 3030
                  mean_incoming_amount_3m: 3030
                  mean_outgoing_amount_1w: 3027.44
                  mean_outgoing_amount_1m: 3027.44
                  mean_outgoing_amount_3m: 3027.44
                balances_metrics:
                  min_balance_1w: 0.51
                  min_balance_1m: 0.51
                  min_balance_3m: 0.51
                  max_balance_1w: 3062.11
                  max_balance_1m: 3062.11
                  max_balance_3m: 3062.11
                  closing_balance: 24.19
                  days_balance_below_0_1w: 0
                  days_balance_below_0_1m: 0
                  days_balance_below_0_3m: 0
                  days_balance_below_x_1w: 3
                  days_balance_below_x_1m: 3
                  days_balance_below_x_3m: 3
                  balance_threshold_x: 267
                cashflow_metrics:
                  sum_positive_1w: 10022.01
                  sum_positive_1m: 10022.01
                  sum_positive_3m: 10022.01
                  sum_negative_1w: 10237.03
                  sum_negative_1m: 10237.03
                  sum_negative_3m: 10237.03
                  positive_to_negative_ratio_1w: 0.98
                  positive_to_negative_ratio_1m: 0.98
                  positive_to_negative_ratio_3m: 0.98
                credit_cards_metrics:
                  num_accounts: 2
                  sum_credit_limit: 600.5
                  sum_credit_used: 200.5
                loans_metrics:
                  num_accounts: 5
                  sum_loans_principal: 5000
                  sum_loans_outstanding_principal: 2000
                  sum_loans_monthly_payment: 400
          code-samples:
            - name: cURL
              language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/risk-insights/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link_id"
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: python
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve Risk insights

                client.RiskInsights.create('link-id')
            - name: ruby
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.risk_insights.retrieve(
                  link: 'link-id'
                )
            - name: javascript
              language: javascript
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.riskInsights.retrieve('linkID')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchRiskInsights:
      path: /api/risk-insights/
      method: PATCH
      auth: true
      docs: >-
        Used to resume an Risk insights retrieve session that was paused because
        an MFA token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete a risk insights request
      request:
        body: root.PatchBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchRiskInsightsRequest
        content-type: application/json
      response:
        docs: Ok (when save_data=false)
        type: list<root.RiskInsights>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                accounts:
                  - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  - 00293c8e-1152-440b-9892-3c071fb88672
                  - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
                created_at: '2022-02-01T20:25:47Z'
                transactions_metrics:
                  num_transactions_1w: 39
                  num_transactions_1m: 39
                  num_transactions_3m: 39
                  num_incoming_transactions_1w: 20
                  num_incoming_transactions_1m: 20
                  num_incoming_transactions_3m: 20
                  num_outgoing_transactions_1w: 19
                  num_outgoing_transactions_1m: 19
                  num_outgoing_transactions_3m: 19
                  sum_incoming_amount_1w: 10022.01
                  sum_incoming_amount_1m: 10022.01
                  sum_incoming_amount_3m: 10022.01
                  sum_outgoing_amount_1w: 10237.03
                  sum_outgoing_amount_1m: 10237.03
                  sum_outgoing_amount_3m: 10237.03
                  max_incoming_amount_1w: 3030
                  max_incoming_amount_1m: 3030
                  max_incoming_amount_3m: 3030
                  max_outgoing_amount_1w: 3027.44
                  max_outgoing_amount_1m: 3027.44
                  max_outgoing_amount_3m: 3027.44
                  mean_incoming_amount_1w: 3030
                  mean_incoming_amount_1m: 3030
                  mean_incoming_amount_3m: 3030
                  mean_outgoing_amount_1w: 3027.44
                  mean_outgoing_amount_1m: 3027.44
                  mean_outgoing_amount_3m: 3027.44
                balances_metrics:
                  min_balance_1w: 0.51
                  min_balance_1m: 0.51
                  min_balance_3m: 0.51
                  max_balance_1w: 3062.11
                  max_balance_1m: 3062.11
                  max_balance_3m: 3062.11
                  closing_balance: 24.19
                  days_balance_below_0_1w: 0
                  days_balance_below_0_1m: 0
                  days_balance_below_0_3m: 0
                  days_balance_below_x_1w: 3
                  days_balance_below_x_1m: 3
                  days_balance_below_x_3m: 3
                  balance_threshold_x: 267
                cashflow_metrics:
                  sum_positive_1w: 10022.01
                  sum_positive_1m: 10022.01
                  sum_positive_3m: 10022.01
                  sum_negative_1w: 10237.03
                  sum_negative_1m: 10237.03
                  sum_negative_3m: 10237.03
                  positive_to_negative_ratio_1w: 0.98
                  positive_to_negative_ratio_1m: 0.98
                  positive_to_negative_ratio_3m: 0.98
                credit_cards_metrics:
                  num_accounts: 2
                  sum_credit_limit: 600.5
                  sum_credit_used: 200.5
                loans_metrics:
                  num_accounts: 5
                  sum_loans_principal: 5000
                  sum_loans_outstanding_principal: 2000
                  sum_loans_monthly_payment: 400
          code-samples:
            - name: cURL
              language: cURL
              code: |
                curl -X PATCH \
                https://sandbox.belvo.com/api/risk-insights/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "session": "",
                    "token": "",
                    "link": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: python
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume Risk insights

                risk_insights = client.RiskInsights.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: ruby
              language: ruby
              code: |
                # For more information about our SDKs go to:
                    # https://developers.belvo.com/docs/belvo-sdks

                    require 'belvo'

                    client = Belvo::Client.new(
                      'Secret Key ID',
                      'Secret Key PASSWORD',
                      'sandbox'
                    )

                    client.risk_insights.resume(
                      session: 'session_id',
                      token: 'token',
                      link: 'link_id'
                    )
            - name: javascript
              language: javascript
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.riskInsights.resume('sessionId', 'token', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailRiskInsights:
      path: /api/risk-insights/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific risk insight.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `risk-insights.id` you want to get detailed information about.
      display-name: Get a risk insight's details
      request:
        name: DetailRiskInsightsRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: list<root.RiskInsights>
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                accounts:
                  - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  - 00293c8e-1152-440b-9892-3c071fb88672
                  - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
                created_at: '2022-02-01T20:25:47Z'
                transactions_metrics:
                  num_transactions_1w: 39
                  num_transactions_1m: 39
                  num_transactions_3m: 39
                  num_incoming_transactions_1w: 20
                  num_incoming_transactions_1m: 20
                  num_incoming_transactions_3m: 20
                  num_outgoing_transactions_1w: 19
                  num_outgoing_transactions_1m: 19
                  num_outgoing_transactions_3m: 19
                  sum_incoming_amount_1w: 10022.01
                  sum_incoming_amount_1m: 10022.01
                  sum_incoming_amount_3m: 10022.01
                  sum_outgoing_amount_1w: 10237.03
                  sum_outgoing_amount_1m: 10237.03
                  sum_outgoing_amount_3m: 10237.03
                  max_incoming_amount_1w: 3030
                  max_incoming_amount_1m: 3030
                  max_incoming_amount_3m: 3030
                  max_outgoing_amount_1w: 3027.44
                  max_outgoing_amount_1m: 3027.44
                  max_outgoing_amount_3m: 3027.44
                  mean_incoming_amount_1w: 3030
                  mean_incoming_amount_1m: 3030
                  mean_incoming_amount_3m: 3030
                  mean_outgoing_amount_1w: 3027.44
                  mean_outgoing_amount_1m: 3027.44
                  mean_outgoing_amount_3m: 3027.44
                balances_metrics:
                  min_balance_1w: 0.51
                  min_balance_1m: 0.51
                  min_balance_3m: 0.51
                  max_balance_1w: 3062.11
                  max_balance_1m: 3062.11
                  max_balance_3m: 3062.11
                  closing_balance: 24.19
                  days_balance_below_0_1w: 0
                  days_balance_below_0_1m: 0
                  days_balance_below_0_3m: 0
                  days_balance_below_x_1w: 3
                  days_balance_below_x_1m: 3
                  days_balance_below_x_3m: 3
                  balance_threshold_x: 267
                cashflow_metrics:
                  sum_positive_1w: 10022.01
                  sum_positive_1m: 10022.01
                  sum_positive_3m: 10022.01
                  sum_negative_1w: 10237.03
                  sum_negative_1m: 10237.03
                  sum_negative_3m: 10237.03
                  positive_to_negative_ratio_1w: 0.98
                  positive_to_negative_ratio_1m: 0.98
                  positive_to_negative_ratio_3m: 0.98
                credit_cards_metrics:
                  num_accounts: 2
                  sum_credit_limit: 600.5
                  sum_credit_used: 200.5
                loans_metrics:
                  num_accounts: 5
                  sum_loans_principal: 5000
                  sum_loans_outstanding_principal: 2000
                  sum_loans_monthly_payment: 400
          code-samples:
            - name: cURL
              language: cURL
              code: |
                curl https://sandbox.belvo.com/api/risk-insights/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: python
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get Risk insight

                client.RiskInsights.get('risk-insights.id')
            - name: ruby
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.risk_insights.detail id: 'risk-insights.id'
            - name: javascript
              language: javascript
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.riskInsights.detail('risk-insights.id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyRiskInsights:
      path: /api/risk-insights/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific risk insight from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `risk-insights.id` that you want to delete
      display-name: Delete a risk insight
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - name: cURL
              language: cURL
              code: |
                curl -X DELETE \
                https://sandbox.belvo.com/api/risk-insights/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: python
              language: python
              code: >
                # For more information about our SDKs go to:

                # https://developers.belvo.com/docs/belvo-sdks


                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete Risk insight

                client.RiskInsights.delete('risk-insights.id')
            - name: ruby
              language: ruby
              code: |
                # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.risk_insights.delete id: 'risk-insights.id'
            - name: javascript
              language: javascript
              code: |
                // For more information about our SDKs go to:
                // https://developers.belvo.com/docs/belvo-sdks

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.riskInsights.delete('risk-insights.id')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Risk Insights
docs: >-
  Belvo's Risk Insights endpoint exposes a set of features that can be used to
  improve your company's credit risk and opportunity decisions. This set of
  features can be used as building blocks to create or iterate on your credit
  score using transactional banking data to improve the predictive power of your
  models. You can use these components as you require and make the most sense
  for your specific use case. 


  We take up to 90 days of transactional data from the user's checking, savings,
  loans, and credit card accounts to calculate the risk insights.


  If you need to know the currency of the account, do a GET Details to the
  Accounts endpoint (using the account ID you receive from in the accounts array
  of the response).


  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field  | Available Filters |

  | ------ | ----------------- |

  | `id`   | `=`, `in`         |

  | `link` | `=`, `in`         |


  ```curl cURL

  # Filtering results so that you get the risk insights of one link:

  https://sandbox.belvo.com/api/risk-insights/?link=89c91f42-df34-4c5d-a4f1-6e1e40438af4


  ```

  ```javascript Node

  // Filtering results so that you get the risk insights of one link:

  client. riskInsights.list({
    filters: {
      account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get the risk insights of one link:

  client. RiskInsights.list(link="89c91f42-df34-4c5d-a4f1-6e1e40438af4")


  ```

  ```ruby Ruby

  # Filtering results so that you get the risk insights of one link:

  client. risk_insights.list(params: {
    link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
  })

  ```
",
    },
    "secretKeys.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "# Get your Payments API keys

In order to use Belvo's Payments API, you need to first request your secret keys (see the code example below):


```curl
POST https://api.belvo.com/payments/secret-keys/
Authorization: Basic username:password
```

Where:

- `username` is the username you use to log in to the Belvo dashboard (in plain text).
- `password` is the password you use to log in to the Belvo dashboard (in plain text).


If you have entered your credentials correctly, you will receive a **201 Response** with your secret keys:


```json
{
    "id": "Your Belvo secretID",
    "password": "Your Belvo secretPassword"
}

```
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Secret Keys",
          "endpoints": {
            "CreateSecretKeys": {
              "auth": true,
              "display-name": "Request API keys",
              "docs": "Request API keys to use with Belvo's Payments API.

You will need to send through the username and password (in plain text) you use to login to the Belvo dashboard in the Authorization header.

For example:

  ```curl
  POST https://api.belvo.com/payments/secret-keys/
  Authorization: Basic username:password
  ```
",
              "errors": [
                "root.BadRequestError",
                "root.RequestTimeoutError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "created_at": "2022-02-09T08:45:50Z",
                        "id": "fc6694b5-ced2-47db-8d14-f15c9e942f31",
                        "last_used": "2022-02-09T08:45:50Z",
                        "password": "******",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/payments/secret-keys/",
              "response": {
                "docs": "Ok",
                "status-code": 201,
                "type": "list<root.SecretKeys>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListSecretKeys": {
              "auth": true,
              "display-name": "List all secret keys",
              "docs": "Get a paginated list of all existing secret keys in your Belvo account. We return up to 100 results per page.


  **Note**: We only return the ID of the secret keys.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "created_at": "2022-02-09T08:45:50Z",
                          "id": "fc6694b5-ced2-47db-8d14-f15c9e942f31",
                          "last_used": "2022-02-09T08:45:50Z",
                          "password": "******",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/payments/secret-keys/",
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SecretKeysPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListSecretKeys:
      path: /payments/secret-keys/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing secret keys in your Belvo account.
        We return up to 100 results per page.


          **Note**: We only return the ID of the secret keys.
      source:
        openapi: ../openapi.yml
      display-name: List all secret keys
      response:
        docs: OK
        type: root.SecretKeysPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - response:
            body:
              count: 130
              next: https://api.belvo.com/payments/{endpoint}/?page=2
              previous: previous
              results:
                - id: fc6694b5-ced2-47db-8d14-f15c9e942f31
                  password: '******'
                  created_at: '2022-02-09T08:45:50Z'
                  last_used: '2022-02-09T08:45:50Z'
    CreateSecretKeys:
      path: /payments/secret-keys/
      method: POST
      auth: true
      docs: >
        Request API keys to use with Belvo's Payments API.


        You will need to send through the username and password (in plain text)
        you use to login to the Belvo dashboard in the Authorization header.


        For example:

          ```curl
          POST https://api.belvo.com/payments/secret-keys/
          Authorization: Basic username:password
          ```
      source:
        openapi: ../openapi.yml
      display-name: Request API keys
      response:
        docs: Ok
        type: list<root.SecretKeys>
        status-code: 201
      errors:
        - root.BadRequestError
        - root.RequestTimeoutError
      examples:
        - response:
            body:
              - id: fc6694b5-ced2-47db-8d14-f15c9e942f31
                password: '******'
                created_at: '2022-02-09T08:45:50Z'
                last_used: '2022-02-09T08:45:50Z'
  source:
    openapi: ../openapi.yml
  display-name: Secret Keys
docs: >
  # Get your Payments API keys


  In order to use Belvo's Payments API, you need to first request your secret
  keys (see the code example below):



  ```curl

  POST https://api.belvo.com/payments/secret-keys/

  Authorization: Basic username:password

  ```


  Where:


  - `username` is the username you use to log in to the Belvo dashboard (in
  plain text).

  - `password` is the password you use to log in to the Belvo dashboard (in
  plain text).



  If you have entered your credentials correctly, you will receive a **201
  Response** with your secret keys:



  ```json

  {
      "id": "Your Belvo secretID",
      "password": "Your Belvo secretPassword"
  }


  ```
",
    },
    "taxComplianceStatus.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "A **tax compliance status** indicates about whether a person or business is complying with their tax obligations at the moment of the request. The information is extracted from SAT's _Opinion de cumplimiento de Obligaciones Fiscales_ document.

### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field         | Available Filters                 |
| ------------- | --------------------------------- |
| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |
| `id`          | `=`, `in`                         |
| `link`        | `=`, `in`                         |

```curl cURL
# Filtering results so that you get Tax Compliance Status from one link:
https://api.belvo.com/api/tax-compliance-status/?link=link-id

# Filtering results so that you get Tax Compliance Status from one link:
https://api.belvo.com/api/tax-compliance-status/?link=link-id1,link-id2
```
```javascript Node
//  Filtering results so that you get the Tax Compliance Status from one link:
client.taxComplianceStatus.list({
  filters: {
    link: "link-id"
  }
})

//  Filtering results so that you get the Tax Compliance Status from two links:
client.taxComplianceStatus.list({
  filters: {
    link__in: "link-id-1, link-id-2"
  }
})

```
```python Python
# Filtering results so that you get the Tax Compliance Status from one link:
client.TaxComplianceStatus.list(link="link-id")

# Filtering results so that you get the Tax Compliance Status from two links:
client.TaxComplianceStatus.list(link__in="link-id1,link-id2")
```
```ruby Ruby
# Filtering results so that you get the Tax Compliance Status from one link:
client.tax_compliance_status.list(params: {
  link: "link-id"
})


# Filtering results so that you get the Tax Compliance Status from two link:
client.tax_compliance_status.list(params: {
  link__in: "link-id1, link-id1"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Tax compliance status",
          "endpoints": {
            "DestroyTaxComplianceStatus": {
              "auth": true,
              "display-name": "Delete a tax compliance status",
              "docs": "Delete a specific Tax compliance status from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete Tax compliance status
client.TaxComplianceStatus.delete('tax-compliance-status-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.tax_compliance_status.delete id: 'tax-compliance-status-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxComplianceStatus.delete('taxComplianceStatusId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/tax-compliance-status/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `tax-compliance-status.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailTaxComplianceStatus": {
              "auth": true,
              "display-name": "Get a tax compliance status's details",
              "docs": "Get the details of a specific Tax compliance status.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get Tax compliance status
client.TaxComplianceStatus.get('tax-compliance-status-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_status.detail id: 'tax-compliance-status-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxComplianceStatus.detail('taxComplianceStatusId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:45:50Z",
                      "id": "91106968-1abd-4d64-85c1-4e73d96fb997",
                      "internal_identification": "20NE1234567",
                      "outcome": "POSITIVE",
                      "pdf": "=PDF-STRING=",
                      "rfc": "KDFC211118IS0",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-compliance-status/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `tax-compliance-status.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailTaxComplianceStatusRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.TaxComplianceStatus",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListTaxComplianceStatus": {
              "auth": true,
              "display-name": "List all tax compliance statuses",
              "docs": "Get a paginated list of all existing Tax compliance statuses in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-compliance-status/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List Tax compliance status
client.TaxComplianceStatus.list()
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.tax_compliance_status.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxComplianceStatus.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:45:50Z",
                          "id": "91106968-1abd-4d64-85c1-4e73d96fb997",
                          "internal_identification": "20NE1234567",
                          "outcome": "POSITIVE",
                          "pdf": "=PDF-STRING=",
                          "rfc": "KDFC211118IS0",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-compliance-status/",
              "request": {
                "name": "ListTaxComplianceStatusRequest",
                "query-parameters": {
                  "created_at__gt": {
                    "docs": "Return tax compliance statuses that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return tax compliance statuses that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return tax compliance statuses that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return tax compliance statuses that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return tax compliance statuses that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information for this `tax-compliance-status.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information for these `tax-compliance-status.id`s.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return information for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.TaxComplianceStatusPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveTaxComplianceStatus": {
              "auth": true,
              "display-name": "Retrieve tax compliance statuses for a link",
              "docs": "Retrieve the Tax compliance status information for a specific fiscal link.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/tax-compliance-status/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link-id",
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve Tax compliance status
client.TaxComplianceStatus.create('link-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.tax_compliance_status.retrieve(
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxComplianceStatus.retrieve('linkID')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                  },
                  "response": {
                    "body": {
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:45:50Z",
                      "id": "91106968-1abd-4d64-85c1-4e73d96fb997",
                      "internal_identification": "20NE1234567",
                      "outcome": "POSITIVE",
                      "pdf": "=PDF-STRING=",
                      "rfc": "KDFC211118IS0",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/tax-compliance-status/",
              "request": {
                "body": {
                  "properties": {
                    "attach_pdf": {
                      "default": false,
                      "docs": "When set to `true`, you will receive the PDF in binary format in the response.",
                      "type": "optional<boolean>",
                    },
                    "link": {
                      "docs": "The fiscal `link.id` to use.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaxComplianceStatusRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "root.TaxComplianceStatus",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListTaxComplianceStatus:
      path: /api/tax-compliance-status/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing Tax compliance statuses in your
        Belvo account. By default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all tax compliance statuses
      request:
        name: ListTaxComplianceStatusRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          created_at__gt:
            type: optional<string>
            docs: >-
              Return tax compliance statuses that were last updated in Belvo's
              database after this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return tax compliance statuses that were last updated in Belvo's
              database after or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return tax compliance statuses that were last updated in Belvo's
              database before this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return tax compliance statuses that were last updated in Belvo's
              database before or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return tax compliance statuses that were last updated in Belvo's
              database between two dates (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          id:
            type: optional<string>
            docs: Return information for this `tax-compliance-status.id`.
          id__in:
            type: optional<string>
            docs: Return information for these `tax-compliance-status.id`s.
          link__in:
            type: optional<string>
            docs: Return information for these `link.id`s.
      response:
        docs: Ok
        type: root.TaxComplianceStatusPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 91106968-1abd-4d64-85c1-4e73d96fb997
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:45:50Z'
                  internal_identification: 20NE1234567
                  pdf: '=PDF-STRING='
                  rfc: KDFC211118IS0
                  outcome: POSITIVE
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-compliance-status/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List Tax compliance status

                client.TaxComplianceStatus.list()
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.tax_compliance_status.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxComplianceStatus.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveTaxComplianceStatus:
      path: /api/tax-compliance-status/
      method: POST
      auth: true
      docs: >-
        Retrieve the Tax compliance status information for a specific fiscal
        link.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve tax compliance statuses for a link
      request:
        name: TaxComplianceStatusRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: The fiscal `link.id` to use.
              validation:
                format: uuid
            attach_pdf:
              type: optional<boolean>
              docs: >-
                When set to `true`, you will receive the PDF in binary format in
                the response.
              default: false
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: root.TaxComplianceStatus
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          response:
            body:
              id: 91106968-1abd-4d64-85c1-4e73d96fb997
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:45:50Z'
              internal_identification: 20NE1234567
              pdf: '=PDF-STRING='
              rfc: KDFC211118IS0
              outcome: POSITIVE
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-compliance-status/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link-id",
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve Tax compliance status

                client.TaxComplianceStatus.create('link-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.tax_compliance_status.retrieve(
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxComplianceStatus.retrieve('linkID')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailTaxComplianceStatus:
      path: /api/tax-compliance-status/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific Tax compliance status.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: >-
            The `tax-compliance-status.id` you want to get detailed information
            about.
      display-name: Get a tax compliance status's details
      request:
        name: DetailTaxComplianceStatusRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.TaxComplianceStatus
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 91106968-1abd-4d64-85c1-4e73d96fb997
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:45:50Z'
              internal_identification: 20NE1234567
              pdf: '=PDF-STRING='
              rfc: KDFC211118IS0
              outcome: POSITIVE
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get Tax compliance status

                client.TaxComplianceStatus.get('tax-compliance-status-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_status.detail id: 'tax-compliance-status-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxComplianceStatus.detail('taxComplianceStatusId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyTaxComplianceStatus:
      path: /api/tax-compliance-status/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific Tax compliance status from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `tax-compliance-status.id` that you want to delete.
      display-name: Delete a tax compliance status
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete Tax compliance status

                client.TaxComplianceStatus.delete('tax-compliance-status-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: >
                # check our Ruby gem on github

                # https://github.com/belvo-finance/belvo-ruby

                require 'belvo'


                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )


                client.tax_compliance_status.delete id:
                'tax-compliance-status-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxComplianceStatus.delete('taxComplianceStatusId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Tax compliance status
docs: >-
  A **tax compliance status** indicates about whether a person or business is
  complying with their tax obligations at the moment of the request. The
  information is extracted from SAT's _Opinion de cumplimiento de Obligaciones
  Fiscales_ document.


  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field         | Available Filters                 |

  | ------------- | --------------------------------- |

  | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

  | `id`          | `=`, `in`                         |

  | `link`        | `=`, `in`                         |


  ```curl cURL

  # Filtering results so that you get Tax Compliance Status from one link:

  https://api.belvo.com/api/tax-compliance-status/?link=link-id


  # Filtering results so that you get Tax Compliance Status from one link:

  https://api.belvo.com/api/tax-compliance-status/?link=link-id1,link-id2

  ```

  ```javascript Node

  //  Filtering results so that you get the Tax Compliance Status from one link:

  client.taxComplianceStatus.list({
    filters: {
      link: "link-id"
    }
  })


  //  Filtering results so that you get the Tax Compliance Status from two
  links:

  client.taxComplianceStatus.list({
    filters: {
      link__in: "link-id-1, link-id-2"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get the Tax Compliance Status from one link:

  client.TaxComplianceStatus.list(link="link-id")


  # Filtering results so that you get the Tax Compliance Status from two links:

  client.TaxComplianceStatus.list(link__in="link-id1,link-id2")

  ```

  ```ruby Ruby

  # Filtering results so that you get the Tax Compliance Status from one link:

  client.tax_compliance_status.list(params: {
    link: "link-id"
  })



  # Filtering results so that you get the Tax Compliance Status from two link:

  client.tax_compliance_status.list(params: {
    link__in: "link-id1, link-id1"
  })

  ```
",
    },
    "taxDeclarations.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Our Tax declarations endpoint lets you retrieve the electronic representation of the tax declaration document emitted by a country's tax authority.

At the moment, the Tax Declaration resource is available for:

- üá®üá¥ Colombia (DIAN)",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Tax declarations",
          "endpoints": {
            "DestroyTaxDeclaration": {
              "auth": true,
              "display-name": "Delete a tax declration",
              "docs": "Delete a specific Tax declaration from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete Tax declaration
client.TaxDeclaration.delete('tax-declaration-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

client.tax_declarations.delete id: 'tax-declaration-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxDeclaration.delete('taxDeclarationId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/tax-declarations/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `tax-declration.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailTaxDeclaration": {
              "auth": true,
              "display-name": "Get a tax declaration's details",
              "docs": "Get the details of a specific Tax declaration.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get Tax declaration
client.TaxDeclaration.get('tax-declaration-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

client = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_declaration.detail id: 'tax-declaration-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxDeclaration.detail('taxDeclarationId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "annual_income_statement": {
                        "annual_totals": {
                          "total_applicable_deductions": 0,
                          "total_exempt_income": 115004000,
                          "total_exemptions_and_deductions": 0,
                          "total_ordinary_net_income": 0,
                        },
                        "gross_income": {
                          "capital_income": 0,
                          "earned_income": 115004000,
                          "fee_based_income": 0,
                          "non_labor_income": 0,
                        },
                        "net_income": {
                          "capital_income": 0,
                          "earned_income": 115004000,
                          "fee_based_income": 0,
                          "non_labor_income": 0,
                        },
                        "non_taxable_income": {
                          "capital_income": 0,
                          "earned_income": 115004000,
                          "fee_based_income": 0,
                          "non_labor_income": 0,
                        },
                      },
                      "collected_at": "2020-04-23T21:32:55Z",
                      "created_at": "2020-04-23T21:30:20Z",
                      "date_issued": "2022-09-02",
                      "document_information": {
                        "form_number": "2117680087604",
                        "name": "Declaracion de Renta y Complementario o de Ingresos y Patrimonio para Personas Juridicas y Asimiladas y Personas Naturales y Asimiladas no Residentes y Sucesiones Iliquidas de Causantes no Residentes",
                        "type": "110",
                        "year": 2021,
                      },
                      "equity_statement": {
                        "total_debts": 77626000,
                        "total_gross_equity": 4648000,
                        "total_net_equity": 0,
                      },
                      "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                      "link": "8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac",
                      "pdf": "==BINARY-STRING==",
                      "pension_income_statement": {
                        "net_pension_income": 0,
                        "net_taxable_pension_income": 0,
                      },
                      "tax_assessment": {
                        "balance_payable": 0,
                        "balance_refundable": 84000,
                        "fortuitous_profit_tax": 0,
                        "net_income_tax": 9144000,
                        "previous_year_balance": 1514000,
                        "total_payment": 0,
                        "total_tax_due": 9144000,
                        "total_tax_on_taxable_net_income": 9144000,
                        "total_withheld_tax": 7714000,
                      },
                      "tax_payer_information": {
                        "document_id": {
                          "document_number": "7113223466",
                          "document_type": "NIT",
                        },
                        "first_last_name": "Restrepo",
                        "first_name": "Carlos",
                        "main_economic_activity": "0010",
                        "other_names": "Alberto",
                        "reporting_id": {
                          "reporting_type": "sectional_address_code",
                          "reporting_value": "32",
                        },
                        "second_last_name": "Vives",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-declarations/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `tax-declaration.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailTaxDeclarationRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "DetailTaxDeclarationResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListTaxDeclarations": {
              "auth": true,
              "display-name": "List all tax declarations",
              "docs": "Get a paginated list of all existing tax declarations in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-declarations/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List tax declarations
for tax_declaration in client.TaxDeclarations.list()
  pprint(tax_declaration)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_declarations.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxDeclarations.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "year": "2021",
                    "year__gt": "2020",
                    "year__gte": "2019",
                    "year__lt": "2018",
                    "year__lte": "2017",
                    "year__range": "2017,2021",
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "annual_income_statement": {
                            "annual_totals": {
                              "total_applicable_deductions": 0,
                              "total_exempt_income": 115004000,
                              "total_exemptions_and_deductions": 0,
                              "total_ordinary_net_income": 0,
                            },
                            "gross_income": {
                              "capital_income": 0,
                              "earned_income": 115004000,
                              "fee_based_income": 0,
                              "non_labor_income": 0,
                            },
                            "net_income": {
                              "capital_income": 0,
                              "earned_income": 115004000,
                              "fee_based_income": 0,
                              "non_labor_income": 0,
                            },
                            "non_taxable_income": {
                              "capital_income": 0,
                              "earned_income": 115004000,
                              "fee_based_income": 0,
                              "non_labor_income": 0,
                            },
                          },
                          "collected_at": "2020-04-23T21:32:55Z",
                          "created_at": "2020-04-23T21:30:20Z",
                          "date_issued": "2022-09-02",
                          "document_information": {
                            "form_number": "2117680087604",
                            "name": "Declaracion de Renta y Complementario o de Ingresos y Patrimonio para Personas Juridicas y Asimiladas y Personas Naturales y Asimiladas no Residentes y Sucesiones Iliquidas de Causantes no Residentes",
                            "type": "110",
                            "year": 2021,
                          },
                          "equity_statement": {
                            "total_debts": 77626000,
                            "total_gross_equity": 4648000,
                            "total_net_equity": 0,
                          },
                          "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                          "link": "8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac",
                          "pdf": "==BINARY-STRING==",
                          "pension_income_statement": {
                            "net_pension_income": 0,
                            "net_taxable_pension_income": 0,
                          },
                          "tax_assessment": {
                            "balance_payable": 0,
                            "balance_refundable": 84000,
                            "fortuitous_profit_tax": 0,
                            "net_income_tax": 9144000,
                            "previous_year_balance": 1514000,
                            "total_payment": 0,
                            "total_tax_due": 9144000,
                            "total_tax_on_taxable_net_income": 9144000,
                            "total_withheld_tax": 7714000,
                          },
                          "tax_payer_information": {
                            "document_id": {
                              "document_number": "7113223466",
                              "document_type": "NIT",
                            },
                            "first_last_name": "Restrepo",
                            "first_name": "Carlos",
                            "main_economic_activity": "0010",
                            "other_names": "Alberto",
                            "reporting_id": {
                              "reporting_type": "sectional_address_code",
                              "reporting_value": "32",
                            },
                            "second_last_name": "Vives",
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-declarations/",
              "request": {
                "name": "ListTaxDeclarationsRequest",
                "query-parameters": {
                  "created_at__gt": {
                    "docs": "Return tax declarations that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return tax declarations that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return tax declarations that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return tax declarations that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return tax declarations that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information for this `tax-declaration.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information for these `tax-declaration.id`s.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return information for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "year": {
                    "docs": "Return tax declarations for this year (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "year__gt": {
                    "docs": "Return tax declarations for after this year (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "year__gte": {
                    "docs": "Return tax declarations for this year or after (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "year__lt": {
                    "docs": "Return tax declarations for before this year (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "year__lte": {
                    "docs": "Return tax declarations for this year or earlier (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "year__range": {
                    "docs": "Return tax declarations between these two years (`YYYY`).",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "ListTaxDeclarationsResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveTaxDeclarations": {
              "auth": true,
              "display-name": "Retrieve tax declarations for a link",
              "docs": "Retrieve tax declaration information for a specific fiscal link.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "### Retrieve Tax Declarations
curl -X POST \
  https://sandbox.belvo.com/api/tax-declarations/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "year_from": YYYY,
    "year_to": YYYY,
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve Tax Declarations
tax_declarations = client.TaxDeclarations.create(
  link="link_id",
  year_from="2019",
  year_to="2020",
  attach_pdf=True
)",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

# Retrieve Tax Declarations
sandbox.tax_declarations.retrieve(
  link: 'link-id',
  year_from: "2019",
  year_to: "2020"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

// Retrieve Tax Declarations
client.connect()
  .then(function () {
    client.taxDeclarations.retrieve('linkID', "2019", "2020")
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                    "year_from": "2018",
                    "year_to": "2019",
                  },
                  "response": {
                    "body": [
                      {
                        "annual_costs_and_deductions_statement": {
                          "administration_expenses": 3266000,
                          "costs": 1881843000,
                          "distribution_and_sales_expenses": 0,
                          "financial_expenses": 0,
                          "total_costs_and_deductible_expenses": 191449000,
                        },
                        "annual_income_statement": {
                          "dividends": 0,
                          "gross_income_from_ordinary_activities": 210043000,
                          "other_income": 0,
                          "returns_rebates_and_discounts_on_sales": 0,
                          "total_gross_income": 210043000,
                          "total_net_income": 210043000,
                        },
                        "collected_at": "2020-04-23T21:32:55Z",
                        "created_at": "2020-04-23T21:30:20Z",
                        "date_issued": "2022-09-02",
                        "document_information": {
                          "form_number": "2117680087604",
                          "name": "Declaracion de Renta y Complementario o de Ingresos y Patrimonio para Personas Juridicas y Asimiladas y Personas Naturales y Asimiladas no Residentes y Sucesiones Iliquidas de Causantes no Residentes",
                          "type": "110",
                          "year": 2021,
                        },
                        "equity_statement": {
                          "accounts_documents_and_finance_leases_receivable": 0,
                          "cash_and_cash_equivalents": 4648000,
                          "debts": 207030000,
                          "inventory": 0,
                          "investments_and_derivative_financial_instruments": 77626000,
                          "property_plant_and_equipment_investment_properties": 0,
                          "total_gross_equity": 220860000,
                          "total_net_equity": 13830000,
                        },
                        "id": "1c83ead8-6665-429c-a17a-ddc76cb3a95e",
                        "link": "8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac",
                        "pdf": "==BINARY-STRING==",
                        "tax_assessment": {
                          "fortuitous_profit_tax": 0,
                          "net_income_tax": 5764000,
                          "net_income_taxable": 18594000,
                          "total_balance_in_favor": 1889000,
                          "total_balance_payable": 0,
                          "total_payment": 0,
                          "total_tax_due": 5764000,
                          "total_tax_on_taxable_net_income": 5764000,
                          "total_withholdings_for_the_taxable_year_to_be_declared": 7361000,
                        },
                        "tax_payer_information": {
                          "company_name": "Trusty Spanners",
                          "document_id": {
                            "document_number": "8312224477",
                            "document_type": "NIT",
                          },
                          "first_last_name": "Restrepo",
                          "first_name": "Carlos",
                          "main_economic_activity": "0032",
                          "other_names": "Alberto",
                          "reporting_id": {
                            "reporting_type": "sectional_address_code",
                            "reporting_value": "32",
                          },
                          "second_last_name": "Vives",
                        },
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/tax-declarations/",
              "request": {
                "body": {
                  "properties": {
                    "attach_pdf": {
                      "default": false,
                      "docs": "When this is set to `true`, you will receive the PDF as a binary string in the response.",
                      "type": "optional<boolean>",
                    },
                    "link": {
                      "docs": "The fiscal `link.id` you want specific tax declaration information for.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                    "year_from": {
                      "docs": "The starting year you want to get tax declaration for, in `YYYY` format.
",
                      "type": "string",
                    },
                    "year_to": {
                      "docs": "The year you want to stop getting tax declaration for, in `YYYY` format.
",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaxDeclarationsRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<RetrieveTaxDeclarationsResponseItem>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "DetailTaxDeclarationResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxDeclarationIndividual",
              },
              {
                "type": "root.TaxDeclarationBusiness",
              },
            ],
          },
          "ListTaxDeclarationsResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxDeclarationIndividualPaginated",
              },
              {
                "type": "root.TaxDeclarationBusinessPaginated",
              },
            ],
          },
          "RetrieveTaxDeclarationsResponseItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxDeclarationBusiness",
              },
              {
                "type": "root.TaxDeclarationIndividual",
              },
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  ListTaxDeclarationsResponse:
    discriminated: false
    union:
      - type: root.TaxDeclarationIndividualPaginated
      - type: root.TaxDeclarationBusinessPaginated
    source:
      openapi: ../openapi.yml
  RetrieveTaxDeclarationsResponseItem:
    discriminated: false
    union:
      - type: root.TaxDeclarationBusiness
      - type: root.TaxDeclarationIndividual
    source:
      openapi: ../openapi.yml
  DetailTaxDeclarationResponse:
    discriminated: false
    union:
      - type: root.TaxDeclarationIndividual
      - type: root.TaxDeclarationBusiness
    source:
      openapi: ../openapi.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListTaxDeclarations:
      path: /api/tax-declarations/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing tax declarations in your Belvo
        account. By default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all tax declarations
      request:
        name: ListTaxDeclarationsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          link__in:
            type: optional<string>
            docs: Return information for these `link.id`s.
          created_at__gt:
            type: optional<string>
            docs: >-
              Return tax declarations that were last updated in Belvo's database
              after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return tax declarations that were last updated in Belvo's database
              after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return tax declarations that were last updated in Belvo's database
              before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return tax declarations that were last updated in Belvo's database
              before or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return tax declarations that were last updated in Belvo's database
              between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          id:
            type: optional<string>
            docs: Return information for this `tax-declaration.id`.
          id__in:
            type: optional<string>
            docs: Return information for these `tax-declaration.id`s.
          year:
            type: optional<string>
            docs: Return tax declarations for this year (`YYYY`).
          year__gt:
            type: optional<string>
            docs: Return tax declarations for after this year (`YYYY`).
          year__gte:
            type: optional<string>
            docs: Return tax declarations for this year or after (`YYYY`).
          year__lt:
            type: optional<string>
            docs: Return tax declarations for before this year (`YYYY`).
          year__lte:
            type: optional<string>
            docs: Return tax declarations for this year or earlier (`YYYY`).
          year__range:
            type: optional<string>
            docs: Return tax declarations between these two years (`YYYY`).
      response:
        docs: Ok
        type: ListTaxDeclarationsResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            year: '2021'
            year__gt: '2020'
            year__gte: '2019'
            year__lt: '2018'
            year__lte: '2017'
            year__range: 2017,2021
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                  link: 8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac
                  collected_at: '2020-04-23T21:32:55Z'
                  created_at: '2020-04-23T21:30:20Z'
                  document_information:
                    name: >-
                      Declaracion de Renta y Complementario o de Ingresos y
                      Patrimonio para Personas Juridicas y Asimiladas y Personas
                      Naturales y Asimiladas no Residentes y Sucesiones
                      Iliquidas de Causantes no Residentes
                    type: '110'
                    form_number: '2117680087604'
                    year: 2021
                  tax_payer_information:
                    first_last_name: Restrepo
                    second_last_name: Vives
                    first_name: Carlos
                    other_names: Alberto
                    main_economic_activity: '0010'
                    document_id:
                      document_type: NIT
                      document_number: '7113223466'
                    reporting_id:
                      reporting_type: sectional_address_code
                      reporting_value: '32'
                  equity_statement:
                    total_gross_equity: 4648000
                    total_debts: 77626000
                    total_net_equity: 0
                  annual_income_statement:
                    gross_income:
                      earned_income: 115004000
                      fee_based_income: 0
                      capital_income: 0
                      non_labor_income: 0
                    non_taxable_income:
                      earned_income: 115004000
                      fee_based_income: 0
                      capital_income: 0
                      non_labor_income: 0
                    net_income:
                      earned_income: 115004000
                      fee_based_income: 0
                      capital_income: 0
                      non_labor_income: 0
                    annual_totals:
                      total_exempt_income: 115004000
                      total_applicable_deductions: 0
                      total_exemptions_and_deductions: 0
                      total_ordinary_net_income: 0
                  pension_income_statement:
                    net_pension_income: 0
                    net_taxable_pension_income: 0
                  tax_assessment:
                    fortuitous_profit_tax: 0
                    total_tax_on_taxable_net_income: 9144000
                    net_income_tax: 9144000
                    total_tax_due: 9144000
                    previous_year_balance: 1514000
                    total_withheld_tax: 7714000
                    balance_payable: 0
                    balance_refundable: 84000
                    total_payment: 0
                  date_issued: '2022-09-02'
                  pdf: '==BINARY-STRING=='
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-declarations/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List tax declarations

                for tax_declaration in client.TaxDeclarations.list()
                  pprint(tax_declaration)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_declarations.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxDeclarations.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveTaxDeclarations:
      path: /api/tax-declarations/
      method: POST
      auth: true
      docs: Retrieve tax declaration information for a specific fiscal link.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve tax declarations for a link
      request:
        name: TaxDeclarationsRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: >-
                The fiscal `link.id` you want specific tax declaration
                information for.
              validation:
                format: uuid
            year_from:
              type: string
              docs: >
                The starting year you want to get tax declaration for, in `YYYY`
                format.
            year_to:
              type: string
              docs: >
                The year you want to stop getting tax declaration for, in `YYYY`
                format.
            attach_pdf:
              type: optional<boolean>
              docs: >-
                When this is set to `true`, you will receive the PDF as a binary
                string in the response.
              default: false
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<RetrieveTaxDeclarationsResponseItem>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            year_from: '2018'
            year_to: '2019'
          response:
            body:
              - id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
                link: 8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac
                collected_at: '2020-04-23T21:32:55Z'
                created_at: '2020-04-23T21:30:20Z'
                document_information:
                  name: >-
                    Declaracion de Renta y Complementario o de Ingresos y
                    Patrimonio para Personas Juridicas y Asimiladas y Personas
                    Naturales y Asimiladas no Residentes y Sucesiones Iliquidas
                    de Causantes no Residentes
                  type: '110'
                  form_number: '2117680087604'
                  year: 2021
                tax_payer_information:
                  first_last_name: Restrepo
                  second_last_name: Vives
                  first_name: Carlos
                  other_names: Alberto
                  company_name: Trusty Spanners
                  main_economic_activity: '0032'
                  document_id:
                    document_type: NIT
                    document_number: '8312224477'
                  reporting_id:
                    reporting_type: sectional_address_code
                    reporting_value: '32'
                equity_statement:
                  cash_and_cash_equivalents: 4648000
                  investments_and_derivative_financial_instruments: 77626000
                  accounts_documents_and_finance_leases_receivable: 0
                  inventory: 0
                  property_plant_and_equipment_investment_properties: 0
                  total_gross_equity: 220860000
                  debts: 207030000
                  total_net_equity: 13830000
                annual_income_statement:
                  gross_income_from_ordinary_activities: 210043000
                  dividends: 0
                  other_income: 0
                  total_gross_income: 210043000
                  returns_rebates_and_discounts_on_sales: 0
                  total_net_income: 210043000
                annual_costs_and_deductions_statement:
                  costs: 1881843000
                  administration_expenses: 3266000
                  distribution_and_sales_expenses: 0
                  financial_expenses: 0
                  total_costs_and_deductible_expenses: 191449000
                tax_assessment:
                  net_income_taxable: 18594000
                  fortuitous_profit_tax: 0
                  total_tax_on_taxable_net_income: 5764000
                  net_income_tax: 5764000
                  total_tax_due: 5764000
                  total_withholdings_for_the_taxable_year_to_be_declared: 7361000
                  total_balance_payable: 0
                  total_balance_in_favor: 1889000
                  total_payment: 0
                date_issued: '2022-09-02'
                pdf: '==BINARY-STRING=='
          code-samples:
            - language: cURL
              code: |-
                ### Retrieve Tax Declarations
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-declarations/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "year_from": YYYY,
                    "year_to": YYYY,
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >-
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve Tax Declarations

                tax_declarations = client.TaxDeclarations.create(
                  link="link_id",
                  year_from="2019",
                  year_to="2020",
                  attach_pdf=True
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                # Retrieve Tax Declarations
                sandbox.tax_declarations.retrieve(
                  link: 'link-id',
                  year_from: "2019",
                  year_to: "2020"
                )
            - name: Belvo Node SDK
              language: node
              code: |-
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                // Retrieve Tax Declarations
                client.connect()
                  .then(function () {
                    client.taxDeclarations.retrieve('linkID', "2019", "2020")
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailTaxDeclaration:
      path: /api/tax-declarations/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific Tax declaration.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `tax-declaration.id` you want to get detailed information about.
      display-name: Get a tax declaration's details
      request:
        name: DetailTaxDeclarationRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: DetailTaxDeclarationResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
              link: 8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac
              collected_at: '2020-04-23T21:32:55Z'
              created_at: '2020-04-23T21:30:20Z'
              document_information:
                name: >-
                  Declaracion de Renta y Complementario o de Ingresos y
                  Patrimonio para Personas Juridicas y Asimiladas y Personas
                  Naturales y Asimiladas no Residentes y Sucesiones Iliquidas de
                  Causantes no Residentes
                type: '110'
                form_number: '2117680087604'
                year: 2021
              tax_payer_information:
                first_last_name: Restrepo
                second_last_name: Vives
                first_name: Carlos
                other_names: Alberto
                main_economic_activity: '0010'
                document_id:
                  document_type: NIT
                  document_number: '7113223466'
                reporting_id:
                  reporting_type: sectional_address_code
                  reporting_value: '32'
              equity_statement:
                total_gross_equity: 4648000
                total_debts: 77626000
                total_net_equity: 0
              annual_income_statement:
                gross_income:
                  earned_income: 115004000
                  fee_based_income: 0
                  capital_income: 0
                  non_labor_income: 0
                non_taxable_income:
                  earned_income: 115004000
                  fee_based_income: 0
                  capital_income: 0
                  non_labor_income: 0
                net_income:
                  earned_income: 115004000
                  fee_based_income: 0
                  capital_income: 0
                  non_labor_income: 0
                annual_totals:
                  total_exempt_income: 115004000
                  total_applicable_deductions: 0
                  total_exemptions_and_deductions: 0
                  total_ordinary_net_income: 0
              pension_income_statement:
                net_pension_income: 0
                net_taxable_pension_income: 0
              tax_assessment:
                fortuitous_profit_tax: 0
                total_tax_on_taxable_net_income: 9144000
                net_income_tax: 9144000
                total_tax_due: 9144000
                previous_year_balance: 1514000
                total_withheld_tax: 7714000
                balance_payable: 0
                balance_refundable: 84000
                total_payment: 0
              date_issued: '2022-09-02'
              pdf: '==BINARY-STRING=='
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get Tax declaration

                client.TaxDeclaration.get('tax-declaration-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_declaration.detail id: 'tax-declaration-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxDeclaration.detail('taxDeclarationId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyTaxDeclaration:
      path: /api/tax-declarations/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific Tax declaration from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `tax-declration.id` that you want to delete.
      display-name: Delete a tax declration
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete Tax declaration

                client.TaxDeclaration.delete('tax-declaration-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.tax_declarations.delete id: 'tax-declaration-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxDeclaration.delete('taxDeclarationId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Tax declarations
docs: >-
  Our Tax declarations endpoint lets you retrieve the electronic representation
  of the tax declaration document emitted by a country's tax authority.


  At the moment, the Tax Declaration resource is available for:


  - üá®üá¥ Colombia (DIAN)
",
    },
    "taxRetentions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "A **tax retention** is the amount of money that the payer must deduct from the total amount of a purchase invoice, according to the fiscal institution‚Äôs regulations.

With Belvo‚Äôs Tax Retentions resource, you can quickly and easily consult information regarding a user‚Äôs tax retentions over a given period or for a specific invoice. This is particularly useful when you want to aid your user in their tax returns as for each invoice you receive the:

- invoice amount
- amount that is exempt from taxation
- total amount that is taxed
- breakdown of all the taxes applied to the invoice


### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field         | Available Filters                 |
| ------------- | --------------------------------- |
| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |
| `link`        | `=`, `in`                         |

```curl cURL
# Filtering results so that you get Tax Retentions from one link:
https://sandbox.belvo.com/api/tax-retentions/?link=link-id

# Filtering results so that you get Tax Retentions from two links 
https://api.belvo.com/api/tax-retentions/?link=link-id1,link-id2
```
```javascript Node
//  Filtering results so that you get the Tax Retentions from one link:
client.taxRetentions.list({
  filters: {
    link: "link-id"
  }
})

//  Filtering results so that you get the Tax Retentions from two links:
client.taxRetentions.list({
  filters: {
    link__in: "link-id-1, link-id-2"
  }
})

```
```python Python
# Filtering results so that you get the Tax Retentions from one link:
client.TaxRetentions.list(link="link-id")

# Filtering results so that you get the Tax Retentions from two links:
client.TaxRetentions.list(link__in="link-id1,link-id2")
```
```ruby Ruby
# Filtering results so that you get the Tax Retentions from one link:
client.tax_retentions.list(params: {
  link: "link-id"
})


# Filtering results so that you get the Tax Retentions from two link:
client.tax_retentions.list(params: {
  link__in: "link-id1, link-id1"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Tax retentions",
          "endpoints": {
            "DestroyTaxRetention": {
              "auth": true,
              "display-name": "Delete a tax retention",
              "docs": "Delete a specific tax retention from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/tax-retentions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `tax-retention.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailTaxRetentions": {
              "auth": true,
              "display-name": "Get a tax retention's details",
              "docs": "Get the details of a specific tax retention.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "cancelled_at": "2024-01-15T09:30:00Z",
                      "certified_at": "2019-01-03T21:10:41Z",
                      "code": 25,
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "id": "c749315b-eec2-435d-a458-06912878564f",
                      "invoice_identification": "def404af-5eef-4112-aa99-d1ec8493b89a",
                      "issued_at": "2019-01-03T21:10:40Z",
                      "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                      "receiver_id": "GYGK3207809L1",
                      "receiver_name": "ACME LTD",
                      "receiver_nationality": "NATIONAL",
                      "retention_breakdown": [
                        {
                          "base_amount": 0.03,
                          "payment_status": "PAID",
                          "retained_amount": 0,
                          "tax_type": "01",
                        },
                      ],
                      "sender_id": "JKUF980404P0",
                      "sender_name": "Roberto Nunez Batman",
                      "total_exempt_amount": 1000.8,
                      "total_invoice_amount": 53249.8,
                      "total_retained_amount": 1550.7,
                      "total_taxable_amount": 43249,
                      "version": "1.0",
                      "xml": "=XML-STRING=",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-retentions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `tax-retention.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailTaxRetentionsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.TaxRetentions",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListTaxRetentions": {
              "auth": true,
              "display-name": "List all tax retentions",
              "docs": "Get a paginated list of all existing tax retentions in your Belvo account. We return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 130,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": "previous",
                      "results": [
                        {
                          "cancelled_at": "2024-01-15T09:30:00Z",
                          "certified_at": "2019-01-03T21:10:41Z",
                          "code": 25,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "id": "c749315b-eec2-435d-a458-06912878564f",
                          "invoice_identification": "def404af-5eef-4112-aa99-d1ec8493b89a",
                          "issued_at": "2019-01-03T21:10:40Z",
                          "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                          "receiver_id": "GYGK3207809L1",
                          "receiver_name": "ACME LTD",
                          "receiver_nationality": "NATIONAL",
                          "retention_breakdown": [
                            {
                              "base_amount": 0.03,
                              "retained_amount": 0,
                              "tax_type": "01",
                            },
                          ],
                          "sender_id": "JKUF980404P0",
                          "sender_name": "Roberto Nunez Batman",
                          "total_exempt_amount": 1000.8,
                          "total_invoice_amount": 53249.8,
                          "total_retained_amount": 1550.7,
                          "total_taxable_amount": 43249,
                          "version": "1.0",
                          "xml": "=XML-STRING=",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-retentions/",
              "request": {
                "name": "ListTaxRetentionsRequest",
                "query-parameters": {
                  "created_at__gt": {
                    "docs": "Return tax retentions that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return tax retentions that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return tax retentions that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return tax retentions that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return tax retentions that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return information for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.TaxRetentionsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveTaxRetentions": {
              "auth": true,
              "display-name": "Retrieve tax retentions for a link",
              "docs": "Retrieve tax retention information from a specific link. The maximum number of tax retentions that can be returned for a period is 500.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-01-01",
                    "date_to": "2020-02-01",
                    "link": "9e432f18-36ca-4bd6-a3f3-1971e58dc1e8",
                    "type": "OUTFLOW",
                  },
                  "response": {
                    "body": [
                      {
                        "cancelled_at": "2024-01-15T09:30:00Z",
                        "certified_at": "2019-01-03T21:10:41Z",
                        "code": 25,
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "id": "c749315b-eec2-435d-a458-06912878564f",
                        "invoice_identification": "def404af-5eef-4112-aa99-d1ec8493b89a",
                        "issued_at": "2019-01-03T21:10:40Z",
                        "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                        "receiver_id": "GYGK3207809L1",
                        "receiver_name": "ACME LTD",
                        "receiver_nationality": "NATIONAL",
                        "retention_breakdown": [
                          {
                            "base_amount": 0.03,
                            "retained_amount": 0,
                            "tax_type": "01",
                          },
                        ],
                        "sender_id": "JKUF980404P0",
                        "sender_name": "Roberto Nunez Batman",
                        "total_exempt_amount": 1000.8,
                        "total_invoice_amount": 53249.8,
                        "total_retained_amount": 1550.7,
                        "total_taxable_amount": 43249,
                        "version": "1.0",
                        "xml": "=XML-STRING=",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/tax-retentions/",
              "request": {
                "body": {
                  "properties": {
                    "attach_xml": {
                      "default": true,
                      "docs": "When set to `true`, you will receive the XML tax retention in the response.",
                      "type": "optional<boolean>",
                    },
                    "date_from": {
                      "docs": "The date from which you want to start getting tax retentions for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "date_to": {
                      "docs": "The date you want to stop getting tax retentions for, in `YYYY-MM-DD` format.

‚ö†Ô∏è The number of days between `date_from` and `date_to` cannot be over 365.
",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
                      },
                    },
                    "link": {
                      "docs": "The `link.id` that you want to get information for.
",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                    "type": "root.EnumTaxRetentionType",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaxRetentionsRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<root.TaxRetentions>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListTaxRetentions:
      path: /api/tax-retentions/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing tax retentions in your Belvo
        account. We return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all tax retentions
      request:
        name: ListTaxRetentionsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          created_at__gt:
            type: optional<string>
            docs: >-
              Return tax retentions that were last updated in Belvo's database
              after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return tax retentions that were last updated in Belvo's database
              after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return tax retentions that were last updated in Belvo's database
              before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return tax retentions that were last updated in Belvo's database
              before or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return tax retentions that were last updated in Belvo's database
              between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          link__in:
            type: optional<string>
            docs: Return information for these `link.id`s.
      response:
        docs: Ok
        type: root.TaxRetentionsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 130
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              previous: previous
              results:
                - id: c749315b-eec2-435d-a458-06912878564f
                  link: 19697249-01b8-443e-a451-76bfc5fbeebf
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  invoice_identification: def404af-5eef-4112-aa99-d1ec8493b89a
                  version: '1.0'
                  code: 25
                  issued_at: '2019-01-03T21:10:40Z'
                  certified_at: '2019-01-03T21:10:41Z'
                  cancelled_at: '2024-01-15T09:30:00Z'
                  sender_id: JKUF980404P0
                  sender_name: Roberto Nunez Batman
                  receiver_nationality: NATIONAL
                  receiver_id: GYGK3207809L1
                  receiver_name: ACME LTD
                  total_invoice_amount: 53249.8
                  total_exempt_amount: 1000.8
                  total_retained_amount: 1550.7
                  total_taxable_amount: 43249
                  retention_breakdown:
                    - base_amount: 0.03
                      tax_type: '01'
                      retained_amount: 0
                  xml: '=XML-STRING='
    RetrieveTaxRetentions:
      path: /api/tax-retentions/
      method: POST
      auth: true
      docs: >-
        Retrieve tax retention information from a specific link. The maximum
        number of tax retentions that can be returned for a period is 500.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve tax retentions for a link
      request:
        name: TaxRetentionsRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: |
                The `link.id` that you want to get information for.
              validation:
                format: uuid
            date_from:
              type: string
              docs: >
                The date from which you want to start getting tax retentions
                for, in `YYYY-MM-DD` format.


                ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            date_to:
              type: string
              docs: >
                The date you want to stop getting tax retentions for, in
                `YYYY-MM-DD` format.


                ‚ö†Ô∏è The number of days between `date_from` and `date_to` cannot
                be over 365.
              validation:
                pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            type: root.EnumTaxRetentionType
            attach_xml:
              type: optional<boolean>
              docs: >-
                When set to `true`, you will receive the XML tax retention in
                the response.
              default: true
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<root.TaxRetentions>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
            date_from: '2020-01-01'
            date_to: '2020-02-01'
            type: OUTFLOW
          response:
            body:
              - id: c749315b-eec2-435d-a458-06912878564f
                link: 19697249-01b8-443e-a451-76bfc5fbeebf
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                invoice_identification: def404af-5eef-4112-aa99-d1ec8493b89a
                version: '1.0'
                code: 25
                issued_at: '2019-01-03T21:10:40Z'
                certified_at: '2019-01-03T21:10:41Z'
                cancelled_at: '2024-01-15T09:30:00Z'
                sender_id: JKUF980404P0
                sender_name: Roberto Nunez Batman
                receiver_nationality: NATIONAL
                receiver_id: GYGK3207809L1
                receiver_name: ACME LTD
                total_invoice_amount: 53249.8
                total_exempt_amount: 1000.8
                total_retained_amount: 1550.7
                total_taxable_amount: 43249
                retention_breakdown:
                  - base_amount: 0.03
                    tax_type: '01'
                    retained_amount: 0
                xml: '=XML-STRING='
    DetailTaxRetentions:
      path: /api/tax-retentions/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific tax retention.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `tax-retention.id` you want to get detailed information about.
      display-name: Get a tax retention's details
      request:
        name: DetailTaxRetentionsRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.TaxRetentions
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: c749315b-eec2-435d-a458-06912878564f
              link: 19697249-01b8-443e-a451-76bfc5fbeebf
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              invoice_identification: def404af-5eef-4112-aa99-d1ec8493b89a
              version: '1.0'
              code: 25
              issued_at: '2019-01-03T21:10:40Z'
              certified_at: '2019-01-03T21:10:41Z'
              cancelled_at: '2024-01-15T09:30:00Z'
              sender_id: JKUF980404P0
              sender_name: Roberto Nunez Batman
              receiver_nationality: NATIONAL
              receiver_id: GYGK3207809L1
              receiver_name: ACME LTD
              total_invoice_amount: 53249.8
              total_exempt_amount: 1000.8
              total_retained_amount: 1550.7
              total_taxable_amount: 43249
              retention_breakdown:
                - base_amount: 0.03
                  tax_type: '01'
                  retained_amount: 0
                  payment_status: PAID
              xml: '=XML-STRING='
    DestroyTaxRetention:
      path: /api/tax-retentions/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific tax retention from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `tax-retention.id` that you want to delete.
      display-name: Delete a tax retention
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
  source:
    openapi: ../openapi.yml
  display-name: Tax retentions
docs: >-
  A **tax retention** is the amount of money that the payer must deduct from the
  total amount of a purchase invoice, according to the fiscal institution‚Äôs
  regulations.


  With Belvo‚Äôs Tax Retentions resource, you can quickly and easily consult
  information regarding a user‚Äôs tax retentions over a given period or for a
  specific invoice. This is particularly useful when you want to aid your user
  in their tax returns as for each invoice you receive the:


  - invoice amount

  - amount that is exempt from taxation

  - total amount that is taxed

  - breakdown of all the taxes applied to the invoice



  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field         | Available Filters                 |

  | ------------- | --------------------------------- |

  | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

  | `link`        | `=`, `in`                         |


  ```curl cURL

  # Filtering results so that you get Tax Retentions from one link:

  https://sandbox.belvo.com/api/tax-retentions/?link=link-id


  # Filtering results so that you get Tax Retentions from two links 

  https://api.belvo.com/api/tax-retentions/?link=link-id1,link-id2

  ```

  ```javascript Node

  //  Filtering results so that you get the Tax Retentions from one link:

  client.taxRetentions.list({
    filters: {
      link: "link-id"
    }
  })


  //  Filtering results so that you get the Tax Retentions from two links:

  client.taxRetentions.list({
    filters: {
      link__in: "link-id-1, link-id-2"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get the Tax Retentions from one link:

  client.TaxRetentions.list(link="link-id")


  # Filtering results so that you get the Tax Retentions from two links:

  client.TaxRetentions.list(link__in="link-id1,link-id2")

  ```

  ```ruby Ruby

  # Filtering results so that you get the Tax Retentions from one link:

  client.tax_retentions.list(params: {
    link: "link-id"
  })



  # Filtering results so that you get the Tax Retentions from two link:

  client.tax_retentions.list(params: {
    link__in: "link-id1, link-id1"
  })

  ```
",
    },
    "taxReturns.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "A **tax return** is the representation of the tax return document sent every year by a person or a business to the tax authority in the country.

The tax return data structure will be different depending on if it is related to a person or a business (you will find examples for both in the endpoints below).

### **üî¶ Filterable fields**

| Field                                   | Available Filters                      |
| --------------------------------------- | -------------------------------------- |
| `created_at `                           | `gt`, `gte`, `lt`, `lte`, `range`      |
| `id`                                    | `=`, `in`                              |
| `ejercicio`                             | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `tipo_declaracion`                      | `=`, `in`                              |
| `link`                                  | `=`, `in`                              |

```curl cURL
# Filtering results so that you get Tax Returns from one link:
https://api.belvo.com/api/tax-returns/?link=link-id

# Filtering results so that you get Tax Returns from two links and are of type normal:
https://api.belvo.com/api/tax-returns/?link__in=link-id1,link-id2&tipo_declaracion=Normal,
```
```javascript Node
//  Filtering results so that you get the Tax Returns from one link:
client.taxReturns.list({
  filters: {
    link: "link-id"
  }
})

//  Filtering results so that you get the Tax Returns from two links and are of type normal:
client.taxReturns.list({
  filters: {
    link__in: "link-id-1, link-id-2",
    tipo_declaracion: "Normal"
  }
})

```
```python Python
# Filtering results so that you get the Tax Return from one link:
client.TaxReturns.list(link="link-id")

# Filtering results so that you get the Tax Returns from two links and are of type normal:
client.TaxReturns.list(link__in="link-id1,link-id2", tipo_declaracion: "Normal")
```
```ruby Ruby
# Filtering results so that you get the Tax Return from one link:
client.tax_returns.list(params: {
  link: "link-id"
})


# Filtering results so that you get the Tax Returns from two links and are of type normal:
client.tax_returns.list(params: {
  link__in: "link-id1, link-id1",
  tipo_declaracion: "Normal"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Tax returns",
          "endpoints": {
            "DestroyTaxReturn": {
              "auth": true,
              "display-name": "Delete a tax return",
              "docs": "Delete a specific tax return from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/tax-returns/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete a tax return
client.TaxReturns.delete("tax-return-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.delete id: 'tax-return-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.delete('taxReturnId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/tax-returns/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the tax return you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailTaxReturn": {
              "auth": true,
              "display-name": "Get a tax return's details",
              "docs": "Get the details of a specific tax return.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a tax return
tax_return = client.TaxReturns.get(id="tax-return-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.detail id: 'tax-return-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.detail('taxReturnId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "datos_informativos": {
                        "credito_fiscal_autorizado_inversion_equipos_fijos": 0,
                        "credito_fiscal_autorizado_produccion_distribucion_cinematografica": 0,
                        "credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento": 0,
                        "credito_fiscal_autorizado_proyectos_inversion_artes": 0,
                        "credito_fiscal_autorizado_proyectos_investigacion_desarrollo": 0,
                        "saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica": 0,
                        "saldo_credito_fiscal_anteriores_proyectos_inversion_artes": 0,
                        "saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo": 0,
                      },
                      "deducciones_personales": {
                        "aportaciones_voluntarias_complementarias_al_sar": [
                          {
                            "monto_deducible": 12.03,
                            "rfc_emisor": "ABC666666A99",
                          },
                          {
                            "monto_deducible": 87.22,
                            "rfc_emisor": "ABC777777A99",
                          },
                        ],
                        "donativos": [
                          {
                            "monto_deducible": 10.03,
                            "rfc_emisor": "ABC555555A99",
                          },
                        ],
                        "honorarios_medicos_dentales_hospitalarios": [
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 1000,
                            "rfc_emisor": "ABC444444A44",
                          },
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 502.34,
                            "rfc_emisor": "ABC444444A44",
                          },
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 258.83,
                            "rfc_emisor": "ABC333333A33",
                          },
                          {
                            "monto_deducible": 14183.1,
                            "rfc_emisor": "ABC444444A55",
                          },
                          {
                            "monto_deducible": 1658,
                            "rfc_emisor": "ABC444444A66",
                          },
                          {
                            "monto_deducible": 1600,
                            "rfc_emisor": "ABC444444A77",
                          },
                          {
                            "monto_deducible": 1064,
                            "rfc_emisor": "ABC444444A88",
                          },
                          {
                            "monto_deducible": 927.57,
                            "rfc_emisor": "ABC444444A99",
                          },
                        ],
                        "primas_por_seguros_de_gasto_medico": [
                          {
                            "monto_deducible": 20.03,
                            "rfc_emisor": "ABC777777A99",
                          },
                        ],
                      },
                      "determinacion_impuesto": {
                        "accion_saldo_a_favor": "DEVOLUCI√ìN",
                        "base_gravable": 126864,
                        "deducciones_personales": 23264,
                        "ingresos_acumulables": 150128,
                        "isr_conforme_tarifa_final": 13789,
                        "isr_favorable": 10308,
                        "isr_retenido": 24097,
                        "nombre_banco": "BANCO SA",
                        "num_clabe": "000000000000000001",
                        "pagos_provisionales": 0,
                        "titular_clabe_permite_verificacion": "S√ç",
                      },
                      "dividendos": {
                        "monto_acumulable_dividendos_utilidades": {
                          "key": "value",
                        },
                        "monto_total_isr_pagado_sociedad": {
                          "key": "value",
                        },
                      },
                      "id": "02589c41-ba22-4d44-8558-8111cc751318",
                      "informacion_general": {
                        "ejercicio": 2018,
                        "fecha_hora_presentacion": "2020-01-07T17:28:00-05:00",
                        "nombre": "JOHN DOE",
                        "numero_operacion": "00000000001",
                        "periodo_declaracion": "Del Ejercicio",
                        "rfc": "ABCD111111A11",
                        "tipo_declaracion": "Normal",
                      },
                      "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                      "pdf": "=PDF-STRING=",
                      "receipt_pdf": "=PDF-STRING=",
                      "retenciones": {
                        "dividendos": {
                          "key": "value",
                        },
                        "servicios_profesionales": [
                          {
                            "monto_retenciones": 46000,
                            "retenciones_isr": 4600,
                            "rfc_retenedor": "ABC444444A00",
                          },
                        ],
                        "sueldos_salarios": [
                          {
                            "monto_retenciones": 118263,
                            "retenciones_isr": 19497,
                            "rfc_retenedor": "ABC444444A99",
                          },
                        ],
                      },
                      "servicios_profesionales": {
                        "deducciones_autorizadas": {
                          "deducciones_autorizadas": 11870,
                          "detalle_deducciones": [
                            {
                              "concepto": "GASOLINA Y MANTENIMIENTO DE TRANSPORTE",
                              "monto_detallado": 9682,
                              "tipo_deduccion": "GASTOS",
                            },
                            {
                              "concepto": "COMPRAS Y GASTOS GENERALES",
                              "monto_detallado": 2188,
                              "tipo_deduccion": "GASTOS",
                            },
                          ],
                          "total_deducciones_autorizadas": 11870,
                        },
                        "ingresos": {
                          "ingresos_acumulables": 46000,
                          "total_ingresos": 46000,
                        },
                        "pagos_provisionales": {
                          "pagos_provisionales_efectuados_en_ejercicio": 0,
                        },
                        "resultado_fiscal": {
                          "perdidas_fiscales_ejercicios_anteriores_aplicadas": 0,
                          "ptu_pagada_ejercicio": 0,
                          "utilidad_fiscal": 34130,
                          "utilidad_gravable": 34130,
                        },
                        "retenciones_isr": {
                          "isr_retenido_personas_morales": 4600,
                        },
                      },
                      "sueldos_salarios": {
                        "impuesto_retenido": 19497,
                        "ingreso_anual": 118263,
                        "ingresos_acumulables": 115998,
                        "ingresos_exentos": 2265,
                        "retenedores": [
                          {
                            "ingreso_anual": 2265,
                            "ingresos_exentos": 118263,
                            "nombre_denominacion_razon_social": "ACME CORP",
                            "rfc_retenedor": "ABCD222222A22",
                            "subsidio_empleo": 0,
                          },
                        ],
                        "subsidio_empleo": 0,
                      },
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a tax return
tax_return = client.TaxReturns.get(id="tax-return-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.detail id: 'tax-return-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.detail('taxReturnId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal Monthly (PFAE)",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                      "informacion_general": {
                        "ejercicio": {
                          "key": "value",
                        },
                        "fecha_hora_presentacion": {
                          "key": "value",
                        },
                        "nombre": {
                          "key": "value",
                        },
                        "numero_operacion": {
                          "key": "value",
                        },
                        "periodo_declaracion": {
                          "key": "value",
                        },
                        "rfc": {
                          "key": "value",
                        },
                        "tipo_declaracion": {
                          "key": "value",
                        },
                      },
                      "isr": {
                        "detalle_del_pago": {
                          "a_cargo": 0,
                          "cantidad_a_cargo": 0,
                          "cantidad_a_pagar": 0,
                          "parte_actualizada": 0,
                          "recargos": 0,
                          "total_aplicaciones": 0,
                          "total_contribuciones": 0,
                        },
                        "determinacion": {
                          "base_gravable_pago_provisional": 0,
                          "compra_gastos_periodo": 399,
                          "compras_gastos_periodos_anteriores": 1596,
                          "impuesto_retenido": 0,
                          "ingresos_periodo": 0,
                          "ingresos_periodos_anteriores": 0,
                          "isr_cargo": 0,
                          "isr_causado": 0,
                          "isr_retenido_periodos_anteriores": 0,
                          "pagos_provisionales_efectuados_anterioridad": 0,
                          "total_compras_gastos": 1995,
                          "total_ingresos": 0,
                        },
                        "tipo": "PFAE",
                      },
                      "iva": {
                        "detalle_del_pago": {
                          "cantidad_a_cargo": 0,
                          "cantidad_a_pagar": 0,
                          "total_aplicaciones": 0,
                          "total_contribuciones": 0,
                        },
                        "determinacion": {
                          "actividades_exentas": 0,
                          "actividades_gravadas_tasa_0": 0,
                          "actividades_gravadas_tasa_16": 0,
                          "iva_acreditable_periodo": 0,
                          "iva_cobrado_periodo_tasa_16": 0,
                          "iva_retenido": 0,
                        },
                      },
                      "pdf": "===PDF_BINARY====",
                      "receipt_pdf": "===PDF_BINARY====",
                      "type": "monthly",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a tax return
tax_return = client.TaxReturns.get(id="tax-return-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.detail id: 'tax-return-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.detail('taxReturnId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal Monthly (PFAI)",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                      "informacion_general": {
                        "ejercicio": {
                          "key": "value",
                        },
                        "fecha_hora_presentacion": {
                          "key": "value",
                        },
                        "nombre": {
                          "key": "value",
                        },
                        "numero_operacion": {
                          "key": "value",
                        },
                        "periodo_declaracion": {
                          "key": "value",
                        },
                        "rfc": {
                          "key": "value",
                        },
                        "tipo_declaracion": {
                          "key": "value",
                        },
                      },
                      "isr": {
                        "detalle_del_pago": {
                          "a_cargo": 0,
                          "cantidad_a_cargo": 0,
                          "cantidad_a_pagar": 0,
                          "parte_actualizada": 0,
                          "recargos": 0,
                          "total_aplicaciones": 0,
                          "total_contribuciones": 0,
                        },
                        "determinacion": {
                          "base_gravable_pago_provisional": 0,
                          "compra_gastos_periodo": 399,
                          "compras_gastos_periodos_anteriores": 1596,
                          "deducc√≠on_opcional": 700,
                          "impuesto_predial": 0,
                          "impuesto_retenido": 0,
                          "ingresos_periodo": 0,
                          "ingresos_periodos_anteriores": 0,
                          "isr_cargo": 0,
                          "isr_causado": 0,
                          "isr_retenido_periodos_anteriores": 0,
                          "optas_por_el_c√°lculo_acumulado": "NO",
                          "pagos_provisionales_efectuados_anterioridad": 0,
                          "tienes_facilidades_administrativas_o_est√≠mulos_deducibles": "NO",
                          "tipo_de_deducc√≠on": "dedducc√≠on opicional",
                          "total_compras_gastos": 1995,
                          "total_deducciones_autorizadas": 700,
                          "total_ingresos": 0,
                        },
                        "tipo": "PFAE",
                      },
                      "iva": {
                        "detalle_del_pago": {
                          "cantidad_a_cargo": 0,
                          "cantidad_a_pagar": 0,
                          "total_aplicaciones": 0,
                          "total_contribuciones": 0,
                        },
                        "determinacion": {
                          "actividades_exentas": 0,
                          "actividades_gravadas_tasa_0": 0,
                          "actividades_gravadas_tasa_16": 0,
                          "cantidad_a_cargo": 54,
                          "impuesto_a_cargo": 54,
                          "iva_acreditable_periodo": 0,
                          "iva_cobrado_periodo_tasa_16": 0,
                          "iva_retenido": 0,
                        },
                      },
                      "pdf": "===PDF_BINARY====",
                      "receipt_pdf": "===PDF_BINARY====",
                      "type": "monthly",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a tax return
tax_return = client.TaxReturns.get(id="tax-return-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.detail id: 'tax-return-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.detail('taxReturnId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Business",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "cifras_cierre_ejercicio": {
                        "coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente": 0.4567,
                        "isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar": {
                          "key": "value",
                        },
                        "perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas": {
                          "key": "value",
                        },
                        "porcentaje_de_participacion_consolidable": {
                          "key": "value",
                        },
                        "saldo_actualizado_de_cuenta_de_capital_de_aportacion": {
                          "key": "value",
                        },
                        "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores": {
                          "key": "value",
                        },
                        "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores": {
                          "key": "value",
                        },
                        "saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida": {
                          "key": "value",
                        },
                        "saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables": {
                          "key": "value",
                        },
                        "saldo_promedio_anual_de_creditos": 142795,
                        "saldo_promedio_anual_de_deudas": 144765,
                      },
                      "collected_at": "2022-02-09T08:45:50Z",
                      "conciliacion_entre_resultado_contable_fiscal": {
                        "ajuste_anual_inflacion_acumulable": 95,
                        "ajuste_anual_inflacion_deducible": {
                          "key": "value",
                        },
                        "anticipos_de_clientes": {
                          "key": "value",
                        },
                        "anticipos_de_clientes_ejercicios_anteriores": {
                          "key": "value",
                        },
                        "costo_de_ventas_contable": {
                          "key": "value",
                        },
                        "costo_vendido_fiscal": {
                          "key": "value",
                        },
                        "deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores": 0,
                        "deduccion_inversiones": {
                          "key": "value",
                        },
                        "deducciones_contables_no_fiscales": 117415,
                        "deducciones_fiscales_no_contables": 0,
                        "depreciacion_y_amortizacion_contable": 106,
                        "donacion_bienes_basicos_subsistencia_humana": 0,
                        "efectos_reexpresion": {
                          "key": "value",
                        },
                        "estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores": 0,
                        "estimulo_fiscal_por_deduccion_inmediata_inversiones": {
                          "key": "value",
                        },
                        "ganancia_en_enajenacion_acciones_por_reembolso_capital": {
                          "key": "value",
                        },
                        "ganancia_en_enajenacion_de_terrenos_y_activo_fijo": {
                          "key": "value",
                        },
                        "gastos_que_no_reunen_requisitos_fiscales": 4307,
                        "ingresos_contables_no_fiscales": {
                          "key": "value",
                        },
                        "ingresos_fiscales_no_contables": 95,
                        "intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no": 0,
                        "intereses_moratorios_devengados_a_favor_cobrados_o_no": {
                          "key": "value",
                        },
                        "intereses_moratorios_efectivamente_cobrados": {
                          "key": "value",
                        },
                        "intereses_moratorios_efectivamente_pagados": {
                          "key": "value",
                        },
                        "inventario_acumulable_del_ejercicio": {
                          "key": "value",
                        },
                        "isr_ietu_impac_ptu": 113002,
                        "otras_deducciones_contables_no_fiscales": 0,
                        "otras_deducciones_fiscales_no_contables": {
                          "key": "value",
                        },
                        "otros_ingresos_contables_no_fiscales": {
                          "key": "value",
                        },
                        "otros_ingresos_fiscales_no_contables": {
                          "key": "value",
                        },
                        "perdida_contable_enajenacion_de_acciones": {
                          "key": "value",
                        },
                        "perdida_contable_enajenacion_de_activo_fijo": {
                          "key": "value",
                        },
                        "perdida_en_participacion_subsidiaria": {
                          "key": "value",
                        },
                        "perdida_fiscal_en_enajenacion_acciones": {
                          "key": "value",
                        },
                        "perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo": {
                          "key": "value",
                        },
                        "resultado_posicion_monetaria": {
                          "key": "value",
                        },
                        "saldos_a_favor_impuestos_y_su_actualizacion": {
                          "key": "value",
                        },
                        "utilidad_contable_enajenacion_de_acciones": {
                          "key": "value",
                        },
                        "utilidad_contable_enajenacion_de_activo_fijo": {
                          "key": "value",
                        },
                        "utilidad_en_participacion_subsidiaria": {
                          "key": "value",
                        },
                        "utilidad_o_perdida_fiscal_antes_de_ptu": 416133,
                        "utilidad_o_perdida_neta": 298623,
                        "utilidad_o_perdida_neta_historica": 298623,
                      },
                      "created_at": "2022-02-09T08:46:20Z",
                      "datos_adicionales": {
                        "estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal": "NO",
                        "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero": "SIN SELECCI√ìN",
                        "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp": "SIN SELECCI√ìN",
                        "indica_si_optas_por_dictaminar_tus_estados_financieros": "NO",
                        "indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente": "NO",
                        "optas_por_presentar_informacion_sobre_tu_situacion_fiscal": "SIN SELECCI√ìN",
                      },
                      "deducciones_autorizadas": {
                        "aportaciones_para_fondos_de_pensiones_y_jubilaciones": {
                          "key": "value",
                        },
                        "aportaciones_sar_infonavit_y_jubilaciones_vejez": {
                          "key": "value",
                        },
                        "combustible_y_lubricantes": {
                          "key": "value",
                        },
                        "consumos_en_restaurantes": 11254,
                        "contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps": {
                          "key": "value",
                        },
                        "credito_al_salario_no_disminuido_de_contribuciones": {
                          "key": "value",
                        },
                        "cuotas_imss": {
                          "key": "value",
                        },
                        "deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores": {
                          "key": "value",
                        },
                        "donativos_otorgados": {
                          "key": "value",
                        },
                        "fletes_y_acarreos_pagados_a_parsonas_fisicas": {
                          "key": "value",
                        },
                        "honorarios_pagados_a_personas_fisicas": {
                          "key": "value",
                        },
                        "monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador": {
                          "key": "value",
                        },
                        "monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador": {
                          "key": "value",
                        },
                        "monto_total_pagos_que_sean_ingresos_exentos_para_trabajador": {
                          "key": "value",
                        },
                        "otras_deducciones_autorizadas": 424346,
                        "perdida_por_creditos_incobrables": {
                          "key": "value",
                        },
                        "perdida_por_operaciones_financieras_derivadas": {
                          "key": "value",
                        },
                        "regalias_y_asistencia_tecnica": {
                          "key": "value",
                        },
                        "seguros_fianzas": {
                          "key": "value",
                        },
                        "sueldos_salarios": {
                          "key": "value",
                        },
                        "total_deducciones_autorizadas": 495127,
                        "uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno": {
                          "key": "value",
                        },
                        "uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas": {
                          "key": "value",
                        },
                        "viaticos_y_gastos_viaje": 59527,
                      },
                      "detalle_pago_r1_isr_personas_morales": {
                        "a_cargo": 113002,
                        "cantidad_a_cargo": 113002,
                        "cantidad_a_favor": {
                          "key": "value",
                        },
                        "cantidad_a_pagar": 113002,
                        "desea_aplicar_alguna_compensacion_o_estimulo": "NO",
                        "importe_de_primera_parcialidad": {
                          "key": "value",
                        },
                        "importe_sin_primera_parcialidad": {
                          "key": "value",
                        },
                        "multa_por_correccion": {
                          "key": "value",
                        },
                        "opta_por_pagar_parcialidades": "SIN SELECCI√ìN",
                        "parte_actualizada": {
                          "key": "value",
                        },
                        "recargos": {
                          "key": "value",
                        },
                        "total_contribuciones": 113002,
                      },
                      "determinacion_del_impuesto_sobre_la_renta": {
                        "datos_informativos_ejercicio": {
                          "credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar": 0,
                          "credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar": 0,
                          "credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar": 0,
                          "credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                          "gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico": 0,
                          "impac_recuperado_en_ejercicio_derivado_de_deconsolidacion": 0,
                          "ingresos_obtenidos_por_apoyos_gubernamentales": 0,
                          "monto_aplicado_del_estimulo_fiscal_de_chatarrizacion": 0,
                          "monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles": 0,
                          "saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos": 0,
                        },
                        "datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio": {
                          "saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar": 0,
                          "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar": 0,
                          "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar": 0,
                          "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                        },
                        "determinacion_del_impuesto_sobre_la_renta": {
                          "diferencia_a_cargo": 113002,
                          "impuesto_causado_en_ejercicio": 113002,
                          "impuesto_sobre_la_renta_del_ejercicio": 113002,
                          "isr_a_cargo_del_ejercicio": 113002,
                          "perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio": 39462,
                          "resultado_fiscal": 376672,
                          "tienes_estimulos_fiscales_a_acreditar": "SIN SELECCI√ìN",
                          "total_deducciones_autorizadas_y_deduccion_inmediata_inversiones": 495126,
                          "total_ingresos_acumulables": 911260,
                          "utilidad_fiscal_del_ejercicio": 416134,
                          "utilidad_o_perdida_fiscal_antes_de_ptu": 416134,
                        },
                        "impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes": {
                          "key": "value",
                        },
                      },
                      "dividendos_o_utilidades_distribuidos": {
                        "monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre": {
                          "key": "value",
                        },
                        "monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre": {
                          "key": "value",
                        },
                        "no_provenientes_de_cufin_ni_cufinre_en_acciones": {
                          "key": "value",
                        },
                        "no_provenientes_de_cufin_ni_cufinre_en_efectivo": {
                          "key": "value",
                        },
                        "provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente": {
                          "key": "value",
                        },
                        "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014": {
                          "key": "value",
                        },
                        "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores": {
                          "key": "value",
                        },
                        "provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre": {
                          "key": "value",
                        },
                      },
                      "estado_posicion_financiera_balance": {
                        "activo": {
                          "cargos_y_gastos_diferidos": 9319,
                          "cuentas_documentos_por_cobrar_extranjero": {},
                          "cuentas_documentos_por_cobrar_nacionales": {},
                          "depreciacion_acumulada": -106,
                          "efectivo_caja_depositos_instituciones_credito_nacionales": 726644,
                          "otros_activos_circulantes": 13277,
                          "otros_activos_fijos": 12756,
                          "suma_activo": 761890,
                        },
                        "capital_contable": {
                          "capital_social_proveniente_aportaciones": 10000,
                          "perdidas_acumuladas": -38450,
                          "suma_capital_contable": 270173,
                          "suma_pasivo_mas_capital_contable": 761890,
                          "utilidad_del_ejercicio": 298623,
                        },
                        "pasivo": {
                          "anticipos_de_clientes": {},
                          "contribuciones_por_pagar": 223490,
                          "cuentas_documentos_por_pagar_extranjero": {},
                          "cuentas_documentos_por_pagar_nacionales": {
                            "partes_no_relacionadas": 268227,
                            "total": 268227,
                          },
                          "suma_pasivo": 491717,
                        },
                      },
                      "estado_resultados": {
                        "compras_netas_importacion": {},
                        "compras_netas_nacionales": {},
                        "costo_mercancias": {
                          "key": "value",
                        },
                        "costo_ventas_servicios": {
                          "key": "value",
                        },
                        "devoluciones_descuentos_bonificaciones_ventas_extranjero": {},
                        "devoluciones_descuentos_bonificaciones_ventas_nacionales": {},
                        "efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria": {
                          "key": "value",
                        },
                        "efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria": {
                          "key": "value",
                        },
                        "ganancia_cambiaria": {},
                        "gastos_indirectos_fabricacion": {},
                        "gastos_operacion": {
                          "partes_no_relacionadas": 499540,
                          "total": 499540,
                        },
                        "gastos_partidas_discontinuas_extraordinarias": {
                          "key": "value",
                        },
                        "ietu": {
                          "key": "value",
                        },
                        "impac": {
                          "key": "value",
                        },
                        "ingresos_netos": {
                          "partes_no_relacionadas": 911165,
                          "total": 911165,
                        },
                        "ingresos_partidas_discontinuas_extraordinarias": {
                          "key": "value",
                        },
                        "intereses_devengados_a_cargo_extranjero": {},
                        "intereses_devengados_a_cargo_nacionales": {},
                        "intereses_devengados_a_favor_extranjero": {},
                        "intereses_devengados_a_favor_nacionales": {},
                        "intereses_moratorios_a_cargo_extranjero": {},
                        "intereses_moratorios_a_cargo_nacionales": {},
                        "intereses_moratorios_a_favor_extranjero": {},
                        "intereses_moratorios_a_favor_nacionales": {},
                        "inventario_final": {
                          "key": "value",
                        },
                        "inventario_inicial": {
                          "key": "value",
                        },
                        "isr": 113002,
                        "mano_de_obra": {},
                        "maquilas": {},
                        "otras_operaciones_financieras": {
                          "key": "value",
                        },
                        "otras_operaciones_financieras_extranjero": {},
                        "otras_operaciones_financieras_nacionales": {},
                        "otros_gastos": {
                          "key": "value",
                        },
                        "otros_gastos_extranjero": {
                          "key": "value",
                        },
                        "otros_gastos_nacionales": {
                          "key": "value",
                        },
                        "otros_productos": {
                          "key": "value",
                        },
                        "otros_productos_extranjero": {
                          "key": "value",
                        },
                        "otros_productos_nacionales": {
                          "key": "value",
                        },
                        "perdida_antes_impuesto": {
                          "key": "value",
                        },
                        "perdida_bruta": {
                          "key": "value",
                        },
                        "perdida_cambiaria": {},
                        "perdida_neta": {
                          "key": "value",
                        },
                        "perdida_operacion": {
                          "key": "value",
                        },
                        "perdida_participacion_subsidiaria": {
                          "key": "value",
                        },
                        "ptu": {
                          "key": "value",
                        },
                        "resultado_integral_financiamiento": {
                          "key": "value",
                        },
                        "resultado_posicion_monetaria_desfavorable": {},
                        "resultado_posicion_monetaria_favorable": {},
                        "utilidad_antes_impuesto": 411625,
                        "utilidad_bruta": 911165,
                        "utilidad_neta": 298623,
                        "utilidad_operacion": 411625,
                        "utilidad_participacion_subsidiaria": {
                          "key": "value",
                        },
                        "ventas_servicios_extranjero": {},
                        "ventas_servicios_nacionales": {
                          "partes_no_relacionadas": 911165,
                          "total": 911165,
                        },
                      },
                      "id": "02589c41-ba22-4d44-8558-8111cc751318",
                      "informacion_general": {
                        "denominacion_razon_social": "ACME CORP",
                        "ejercicio": 2018,
                        "fecha_hora_presentacion": "2020-01-07T16:55:00-06:00",
                        "numero_operacion": "000000000001",
                        "periodo_declaracion": "Del Ejercicio",
                        "rfc": "ABC1111111A1",
                        "tipo_complementaria": {
                          "key": "value",
                        },
                        "tipo_declaracion": "Normal",
                      },
                      "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                      "pdf": "=PDF-STRING=",
                      "receipt_pdf": "=PDF-STRING=",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a tax return
tax_return = client.TaxReturns.get(id="tax-return-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.detail id: 'tax-return-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.detail('taxReturnId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Business Monthly",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "detalle_pago_isr": {
                        "r12_isr_retenciones_por_salarios": {
                          "a_cargo": 415945,
                          "aplica_primera_parcialidad": "NO",
                          "cantidad_a_cargo": 415566,
                          "cantidad_a_pagar": 415566,
                          "parte_actualizada": 0,
                          "recargos": 0,
                          "subsidio_empleo": 379,
                          "total_aplicaciones": 379,
                          "total_de_contribuciones": 415945,
                        },
                        "r13_isr_retenciones_por_asimilados_a_salarios": {
                          "a_cargo": 254588,
                          "aplica_primera_parcialidad": "NO",
                          "cantidad_a_cargo": 254588,
                          "cantidad_a_pagar": 254588,
                          "parte_actualizada": 0,
                          "recargos": 0,
                          "total_aplicaciones": 0,
                          "total_de_contribuciones": 254588,
                        },
                        "r14_isr_retenciones_por_servicios_profesionales": {
                          "a_cargo": 104482,
                          "aplica_primera_parcialidad": "NO",
                          "cantidad_a_cargo": 104482,
                          "cantidad_a_pagar": 104482,
                          "parte_actualizada": 0,
                          "recargos": 0,
                          "total_aplicaciones": 0,
                          "total_de_contribuciones": 104482,
                        },
                        "r1_isr_personas_morales": {
                          "a_cargo": 0,
                          "aplica_primera_parcialidad": "NO",
                          "cantidad_a_cargo": 0,
                          "cantidad_a_pagar": 0,
                          "total_aplicaciones": 0,
                          "total_de_contribuciones": 0,
                        },
                      },
                      "detalle_pago_iva": {
                        "r21_iva": {
                          "a_cargo": 312421,
                          "aplica_primera_parcialidad": "NO",
                          "cantidad_a_cargo": 312421,
                          "cantidad_a_pagar": 312421,
                          "parte_actualizada": 0,
                          "recargos": 0,
                          "total_aplicaciones": 0,
                          "total_de_contribuciones": 312421,
                        },
                        "r21_iva_retenciones": {
                          "a_cargo": 111448,
                          "aplica_primera_parcialidad": "NO",
                          "cantidad_a_cargo": 111448,
                          "cantidad_a_pagar": 111448,
                          "parte_actualizada": 0,
                          "recargos": 0,
                          "total_aplicaciones": 0,
                          "total_de_contribuciones": 111448,
                        },
                      },
                      "determinacion_isr": {
                        "personas_morales_regimen_general": {
                          "anticipos_rendimientos_distribuidos_periodo": 16746509,
                          "base_gravable_pago_provisional": 946992,
                          "coeficiente_utilidad": 0.2318,
                          "diferencia_a_cargo": 0,
                          "impuesto_a_cargo": 0,
                          "impuesto_retenido": 29925,
                          "impuestos_del_periodo": 284098,
                          "ingresos_nominales_mes_que_declara": 6482479,
                          "isr_causado": 284098,
                          "pagos_provisionales_efectuados_anterioridad": 303039,
                          "suma_ingresos_nominales_meses_anteriores_ejercicio": 69848414,
                          "total_ingresos_nominales": 76330893,
                          "utilidad_fiscal_pago_provisional": 17693501,
                        },
                      },
                      "determinacion_iva": {
                        "detalle_total_actos_actividades_pagados_tasa_16": {
                          "otros_actos_pagados_tasa_16": 2094706,
                          "total_actos_pagados_tasa_16": 2094706,
                        },
                        "detalle_valor_actos_actividades_gravados_tasa_16": {
                          "otros_actos_actividades_gravados_tasa_16": 6457950,
                          "total_actos_actividades_gravados_tasa_16": 6457950,
                        },
                        "determinacion_iva": {
                          "cantidad_a_cargo": 312421,
                          "diferencia_a_cargo": 312421,
                          "impuesto_a_cargo": 312421,
                          "impuesto_causado": 1033272,
                          "iva_retenido_al_contribuyente": 385698,
                          "saldo_a_favor_periodo": 0,
                          "suma_actos_actividades_gravados": 6457950,
                          "total_iva_acreditable": 335153,
                          "valor_actos_actividades_gravados_tasa_16": 6457950,
                        },
                        "determinacion_iva_acreditable": {
                          "iva_acreditable": 335153,
                          "iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": 0,
                          "iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados": 335153,
                          "total_actos_actividades_pagados_importacion_bienes_tasa_16": 0,
                          "total_iva_acreditable_periodo": 335153,
                          "total_iva_actos_actividades_gravados": 335153,
                          "total_iva_actos_actividades_pagados_tasa_16": 335153,
                          "total_iva_trasladado_contribuyente": 335153,
                        },
                        "montos_actos_actividades_pagados": {
                          "total_actos_actividades_pagados_no_paga_iva": 0,
                          "total_actos_actividades_pagados_tasa_0": 0,
                          "total_actos_actividades_pagados_tasa_16": 2094706,
                          "total_actos_actividades_sujetos_estimulo_rfn": 0,
                        },
                      },
                      "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                      "informacion_general": {
                        "denominacion_razon_social": "Aloha Mahalo SC",
                        "ejercicio": 2020,
                        "fecha_hora_presentacion": "2021-01-18T19:24:00-06:00",
                        "numero_operacion": "400475119",
                        "periodo_declaracion": "Diciembre",
                        "rfc": "DPA950805RR2",
                        "tipo_complementaria": {
                          "key": "value",
                        },
                        "tipo_declaracion": "Normal",
                      },
                      "pdf": "===PDF_BINARY====",
                      "receipt_pdf": "===PDF_BINARY====",
                      "type": "monthly",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-returns/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `tax-return.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailTaxReturnRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "DetailTaxReturnResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListTaxReturns": {
              "auth": true,
              "display-name": "List all tax returns",
              "docs": "Get a paginated list of all existing tax returns in your Belvo account. By default, we return up to 100 results per page. The results will include a mix of both monthly and yearly tax returns.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List tax returns
for tax_return in client.TaxReturns.list()
  pprint(tax_return)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "ejercicio": "2018",
                    "ejercicio__gt": "2019",
                    "ejercicio__gte": "2017",
                    "ejercicio__lt": "2020",
                    "ejercicio__lte": "2021",
                    "ejercicio__range": "2015,2021",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "tipo_declaracion": "Normal",
                    "tipo_declaracion__in": "Normal,Commercial",
                  },
                  "response": {
                    "body": {
                      "count": 101,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": {
                        "key": "value",
                      },
                      "results": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "datos_informativos": {
                            "credito_fiscal_autorizado_inversion_equipos_fijos": 0,
                            "credito_fiscal_autorizado_produccion_distribucion_cinematografica": 0,
                            "credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento": 0,
                            "credito_fiscal_autorizado_proyectos_inversion_artes": 0,
                            "credito_fiscal_autorizado_proyectos_investigacion_desarrollo": 0,
                            "saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica": 0,
                            "saldo_credito_fiscal_anteriores_proyectos_inversion_artes": 0,
                            "saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo": 0,
                          },
                          "deducciones_personales": {
                            "aportaciones_voluntarias_complementarias_al_sar": [
                              {
                                "monto_deducible": 12.03,
                                "rfc_emisor": "ABC666666A99",
                              },
                              {
                                "monto_deducible": 87.22,
                                "rfc_emisor": "ABC777777A99",
                              },
                            ],
                            "donativos": [
                              {
                                "monto_deducible": 10.03,
                                "rfc_emisor": "ABC555555A99",
                              },
                            ],
                            "honorarios_medicos_dentales_hospitalarios": [
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 1000,
                                "rfc_emisor": "ABC444444A44",
                              },
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 502.34,
                                "rfc_emisor": "ABC444444A44",
                              },
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 258.83,
                                "rfc_emisor": "ABC333333A33",
                              },
                              {
                                "monto_deducible": 14183.1,
                                "rfc_emisor": "ABC444444A55",
                              },
                              {
                                "monto_deducible": 1658,
                                "rfc_emisor": "ABC444444A66",
                              },
                              {
                                "monto_deducible": 1600,
                                "rfc_emisor": "ABC444444A77",
                              },
                              {
                                "monto_deducible": 1064,
                                "rfc_emisor": "ABC444444A88",
                              },
                              {
                                "monto_deducible": 927.57,
                                "rfc_emisor": "ABC444444A99",
                              },
                            ],
                            "primas_por_seguros_de_gasto_medico": [
                              {
                                "monto_deducible": 20.03,
                                "rfc_emisor": "ABC777777A99",
                              },
                            ],
                          },
                          "determinacion_impuesto": {
                            "accion_saldo_a_favor": "DEVOLUCI√ìN",
                            "base_gravable": 126864,
                            "deducciones_personales": 23264,
                            "ingresos_acumulables": 150128,
                            "isr_conforme_tarifa_final": 13789,
                            "isr_favorable": 10308,
                            "isr_retenido": 24097,
                            "nombre_banco": "BANCO SA",
                            "num_clabe": "000000000000000001",
                            "pagos_provisionales": 0,
                            "titular_clabe_permite_verificacion": "S√ç",
                          },
                          "dividendos": {},
                          "id": "02589c41-ba22-4d44-8558-8111cc751318",
                          "informacion_general": {
                            "ejercicio": 2018,
                            "fecha_hora_presentacion": "2020-01-07T17:28:00-05:00",
                            "nombre": "JOHN DOE",
                            "numero_operacion": "00000000001",
                            "periodo_declaracion": "Del Ejercicio",
                            "rfc": "ABCD111111A11",
                            "tipo_declaracion": "Normal",
                          },
                          "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                          "pdf": "=PDF-STRING=",
                          "receipt_pdf": "=PDF-STRING=",
                          "retenciones": {
                            "servicios_profesionales": [
                              {
                                "monto_retenciones": 46000,
                                "retenciones_isr": 4600,
                                "rfc_retenedor": "ABC444444A00",
                              },
                            ],
                            "sueldos_salarios": [
                              {
                                "monto_retenciones": 118263,
                                "retenciones_isr": 19497,
                                "rfc_retenedor": "ABC444444A99",
                              },
                            ],
                          },
                          "servicios_profesionales": {
                            "deducciones_autorizadas": {
                              "deducciones_autorizadas": 11870,
                              "detalle_deducciones": [
                                {
                                  "concepto": "GASOLINA Y MANTENIMIENTO DE TRANSPORTE",
                                  "monto_detallado": 9682,
                                  "tipo_deduccion": "GASTOS",
                                },
                                {
                                  "concepto": "COMPRAS Y GASTOS GENERALES",
                                  "monto_detallado": 2188,
                                  "tipo_deduccion": "GASTOS",
                                },
                              ],
                              "total_deducciones_autorizadas": 11870,
                            },
                            "ingresos": {
                              "ingresos_acumulables": 46000,
                              "total_ingresos": 46000,
                            },
                            "pagos_provisionales": {
                              "pagos_provisionales_efectuados_en_ejercicio": 0,
                            },
                            "resultado_fiscal": {
                              "perdidas_fiscales_ejercicios_anteriores_aplicadas": 0,
                              "ptu_pagada_ejercicio": 0,
                              "utilidad_fiscal": 34130,
                              "utilidad_gravable": 34130,
                            },
                            "retenciones_isr": {
                              "isr_retenido_personas_morales": 4600,
                            },
                          },
                          "sueldos_salarios": {
                            "impuesto_retenido": 19497,
                            "ingreso_anual": 118263,
                            "ingresos_acumulables": 115998,
                            "ingresos_exentos": 2265,
                            "retenedores": [
                              {
                                "ingreso_anual": 2265,
                                "ingresos_exentos": 118263,
                                "nombre_denominacion_razon_social": "ACME CORP",
                                "rfc_retenedor": "ABCD222222A22",
                                "subsidio_empleo": 0,
                              },
                            ],
                            "subsidio_empleo": 0,
                          },
                          "type": "yearly",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List tax returns
for tax_return in client.TaxReturns.list()
  pprint(tax_return)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal Monthly (PFAe)",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "ejercicio": "2018",
                    "ejercicio__gt": "2019",
                    "ejercicio__gte": "2017",
                    "ejercicio__lt": "2020",
                    "ejercicio__lte": "2021",
                    "ejercicio__range": "2015,2021",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "tipo_declaracion": "Normal",
                    "tipo_declaracion__in": "Normal,Commercial",
                  },
                  "response": {
                    "body": {
                      "count": 101,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": {
                        "key": "value",
                      },
                      "results": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "informacion_general": {},
                          "isr": {
                            "detalle_del_pago": {
                              "a_cargo": 0,
                              "cantidad_a_cargo": 0,
                              "cantidad_a_pagar": 0,
                              "parte_actualizada": 0,
                              "recargos": 0,
                              "total_aplicaciones": 0,
                              "total_contribuciones": 0,
                            },
                            "determinacion": {
                              "base_gravable_pago_provisional": 0,
                              "compra_gastos_periodo": 399,
                              "compras_gastos_periodos_anteriores": 1596,
                              "impuesto_retenido": 0,
                              "ingresos_periodo": 0,
                              "ingresos_periodos_anteriores": 0,
                              "isr_cargo": 0,
                              "isr_causado": 0,
                              "isr_retenido_periodos_anteriores": 0,
                              "pagos_provisionales_efectuados_anterioridad": 0,
                              "total_compras_gastos": 1995,
                              "total_ingresos": 0,
                            },
                            "tipo": "PFAE",
                          },
                          "iva": {
                            "detalle_del_pago": {
                              "cantidad_a_cargo": 0,
                              "cantidad_a_pagar": 0,
                              "total_aplicaciones": 0,
                              "total_contribuciones": 0,
                            },
                            "determinacion": {
                              "actividades_exentas": 0,
                              "actividades_gravadas_tasa_0": 0,
                              "actividades_gravadas_tasa_16": 0,
                              "iva_acreditable_periodo": 0,
                              "iva_cobrado_periodo_tasa_16": 0,
                              "iva_retenido": 0,
                            },
                          },
                          "pdf": "===PDF_BINARY====",
                          "receipt_pdf": "===PDF_BINARY====",
                          "type": "monthly",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List tax returns
for tax_return in client.TaxReturns.list()
  pprint(tax_return)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal Monthly (PFAI)",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "ejercicio": "2018",
                    "ejercicio__gt": "2019",
                    "ejercicio__gte": "2017",
                    "ejercicio__lt": "2020",
                    "ejercicio__lte": "2021",
                    "ejercicio__range": "2015,2021",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "tipo_declaracion": "Normal",
                    "tipo_declaracion__in": "Normal,Commercial",
                  },
                  "response": {
                    "body": {
                      "count": 101,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": {
                        "key": "value",
                      },
                      "results": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "informacion_general": {},
                          "isr": {
                            "detalle_del_pago": {
                              "a_cargo": 0,
                              "cantidad_a_cargo": 0,
                              "cantidad_a_pagar": 0,
                              "parte_actualizada": 0,
                              "recargos": 0,
                              "total_aplicaciones": 0,
                              "total_contribuciones": 0,
                            },
                            "determinacion": {
                              "base_gravable_pago_provisional": 0,
                              "compra_gastos_periodo": 399,
                              "compras_gastos_periodos_anteriores": 1596,
                              "deducc√≠on_opcional": 700,
                              "impuesto_predial": 0,
                              "impuesto_retenido": 0,
                              "ingresos_periodo": 0,
                              "ingresos_periodos_anteriores": 0,
                              "isr_cargo": 0,
                              "isr_causado": 0,
                              "isr_retenido_periodos_anteriores": 0,
                              "optas_por_el_c√°lculo_acumulado": "NO",
                              "pagos_provisionales_efectuados_anterioridad": 0,
                              "tienes_facilidades_administrativas_o_est√≠mulos_deducibles": "NO",
                              "tipo_de_deducc√≠on": "dedducc√≠on opicional",
                              "total_compras_gastos": 1995,
                              "total_deducciones_autorizadas": 700,
                              "total_ingresos": 0,
                            },
                            "tipo": "PFAE",
                          },
                          "iva": {
                            "detalle_del_pago": {
                              "cantidad_a_cargo": 0,
                              "cantidad_a_pagar": 0,
                              "total_aplicaciones": 0,
                              "total_contribuciones": 0,
                            },
                            "determinacion": {
                              "actividades_exentas": 0,
                              "actividades_gravadas_tasa_0": 0,
                              "actividades_gravadas_tasa_16": 0,
                              "cantidad_a_cargo": 54,
                              "impuesto_a_cargo": 54,
                              "iva_acreditable_periodo": 0,
                              "iva_cobrado_periodo_tasa_16": 0,
                              "iva_retenido": 0,
                            },
                          },
                          "pdf": "===PDF_BINARY====",
                          "receipt_pdf": "===PDF_BINARY====",
                          "type": "monthly",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List tax returns
for tax_return in client.TaxReturns.list()
  pprint(tax_return)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Business",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "ejercicio": "2018",
                    "ejercicio__gt": "2019",
                    "ejercicio__gte": "2017",
                    "ejercicio__lt": "2020",
                    "ejercicio__lte": "2021",
                    "ejercicio__range": "2015,2021",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "tipo_declaracion": "Normal",
                    "tipo_declaracion__in": "Normal,Commercial",
                  },
                  "response": {
                    "body": {
                      "count": 101,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": {
                        "key": "value",
                      },
                      "results": [
                        {
                          "cifras_cierre_ejercicio": {
                            "coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente": 0.4567,
                            "saldo_promedio_anual_de_creditos": 142795,
                            "saldo_promedio_anual_de_deudas": 144765,
                          },
                          "collected_at": "2022-02-09T08:45:50Z",
                          "conciliacion_entre_resultado_contable_fiscal": {
                            "ajuste_anual_inflacion_acumulable": 95,
                            "deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores": 0,
                            "deducciones_contables_no_fiscales": 117415,
                            "deducciones_fiscales_no_contables": 0,
                            "depreciacion_y_amortizacion_contable": 106,
                            "donacion_bienes_basicos_subsistencia_humana": 0,
                            "estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores": 0,
                            "gastos_que_no_reunen_requisitos_fiscales": 4307,
                            "ingresos_fiscales_no_contables": 95,
                            "intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no": 0,
                            "isr_ietu_impac_ptu": 113002,
                            "otras_deducciones_contables_no_fiscales": 0,
                            "utilidad_o_perdida_fiscal_antes_de_ptu": 416133,
                            "utilidad_o_perdida_neta": 298623,
                            "utilidad_o_perdida_neta_historica": 298623,
                          },
                          "created_at": "2022-02-09T08:46:20Z",
                          "datos_adicionales": {
                            "estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal": "NO",
                            "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero": "SIN SELECCI√ìN",
                            "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp": "SIN SELECCI√ìN",
                            "indica_si_optas_por_dictaminar_tus_estados_financieros": "NO",
                            "indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente": "NO",
                            "optas_por_presentar_informacion_sobre_tu_situacion_fiscal": "SIN SELECCI√ìN",
                          },
                          "deducciones_autorizadas": {
                            "consumos_en_restaurantes": 11254,
                            "otras_deducciones_autorizadas": 424346,
                            "total_deducciones_autorizadas": 495127,
                            "viaticos_y_gastos_viaje": 59527,
                          },
                          "detalle_pago_r1_isr_personas_morales": {
                            "a_cargo": 113002,
                            "cantidad_a_cargo": 113002,
                            "cantidad_a_pagar": 113002,
                            "desea_aplicar_alguna_compensacion_o_estimulo": "NO",
                            "opta_por_pagar_parcialidades": "SIN SELECCI√ìN",
                            "total_contribuciones": 113002,
                          },
                          "determinacion_del_impuesto_sobre_la_renta": {
                            "datos_informativos_ejercicio": {
                              "credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar": 0,
                              "credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar": 0,
                              "credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar": 0,
                              "credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                              "gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico": 0,
                              "impac_recuperado_en_ejercicio_derivado_de_deconsolidacion": 0,
                              "ingresos_obtenidos_por_apoyos_gubernamentales": 0,
                              "monto_aplicado_del_estimulo_fiscal_de_chatarrizacion": 0,
                              "monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles": 0,
                              "saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos": 0,
                            },
                            "datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio": {
                              "saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar": 0,
                              "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar": 0,
                              "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar": 0,
                              "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                            },
                            "determinacion_del_impuesto_sobre_la_renta": {
                              "diferencia_a_cargo": 113002,
                              "impuesto_causado_en_ejercicio": 113002,
                              "impuesto_sobre_la_renta_del_ejercicio": 113002,
                              "isr_a_cargo_del_ejercicio": 113002,
                              "perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio": 39462,
                              "resultado_fiscal": 376672,
                              "tienes_estimulos_fiscales_a_acreditar": "SIN SELECCI√ìN",
                              "total_deducciones_autorizadas_y_deduccion_inmediata_inversiones": 495126,
                              "total_ingresos_acumulables": 911260,
                              "utilidad_fiscal_del_ejercicio": 416134,
                              "utilidad_o_perdida_fiscal_antes_de_ptu": 416134,
                            },
                          },
                          "dividendos_o_utilidades_distribuidos": {},
                          "estado_posicion_financiera_balance": {
                            "activo": {
                              "cargos_y_gastos_diferidos": 9319,
                              "cuentas_documentos_por_cobrar_extranjero": {},
                              "cuentas_documentos_por_cobrar_nacionales": {},
                              "depreciacion_acumulada": -106,
                              "efectivo_caja_depositos_instituciones_credito_nacionales": 726644,
                              "otros_activos_circulantes": 13277,
                              "otros_activos_fijos": 12756,
                              "suma_activo": 761890,
                            },
                            "capital_contable": {
                              "capital_social_proveniente_aportaciones": 10000,
                              "perdidas_acumuladas": -38450,
                              "suma_capital_contable": 270173,
                              "suma_pasivo_mas_capital_contable": 761890,
                              "utilidad_del_ejercicio": 298623,
                            },
                            "pasivo": {
                              "anticipos_de_clientes": {},
                              "contribuciones_por_pagar": 223490,
                              "cuentas_documentos_por_pagar_extranjero": {},
                              "cuentas_documentos_por_pagar_nacionales": {
                                "partes_no_relacionadas": 268227,
                                "total": 268227,
                              },
                              "suma_pasivo": 491717,
                            },
                          },
                          "estado_resultados": {
                            "compras_netas_importacion": {},
                            "compras_netas_nacionales": {},
                            "devoluciones_descuentos_bonificaciones_ventas_extranjero": {},
                            "devoluciones_descuentos_bonificaciones_ventas_nacionales": {},
                            "ganancia_cambiaria": {},
                            "gastos_indirectos_fabricacion": {},
                            "gastos_operacion": {
                              "partes_no_relacionadas": 499540,
                              "total": 499540,
                            },
                            "ingresos_netos": {
                              "partes_no_relacionadas": 911165,
                              "total": 911165,
                            },
                            "intereses_devengados_a_cargo_extranjero": {},
                            "intereses_devengados_a_cargo_nacionales": {},
                            "intereses_devengados_a_favor_extranjero": {},
                            "intereses_devengados_a_favor_nacionales": {},
                            "intereses_moratorios_a_cargo_extranjero": {},
                            "intereses_moratorios_a_cargo_nacionales": {},
                            "intereses_moratorios_a_favor_extranjero": {},
                            "intereses_moratorios_a_favor_nacionales": {},
                            "isr": 113002,
                            "mano_de_obra": {},
                            "maquilas": {},
                            "otras_operaciones_financieras_extranjero": {},
                            "otras_operaciones_financieras_nacionales": {},
                            "perdida_cambiaria": {},
                            "resultado_posicion_monetaria_desfavorable": {},
                            "resultado_posicion_monetaria_favorable": {},
                            "utilidad_antes_impuesto": 411625,
                            "utilidad_bruta": 911165,
                            "utilidad_neta": 298623,
                            "utilidad_operacion": 411625,
                            "ventas_servicios_extranjero": {},
                            "ventas_servicios_nacionales": {
                              "partes_no_relacionadas": 911165,
                              "total": 911165,
                            },
                          },
                          "id": "02589c41-ba22-4d44-8558-8111cc751318",
                          "informacion_general": {
                            "denominacion_razon_social": "ACME CORP",
                            "ejercicio": 2018,
                            "fecha_hora_presentacion": "2020-01-07T16:55:00-06:00",
                            "numero_operacion": "000000000001",
                            "periodo_declaracion": "Del Ejercicio",
                            "rfc": "ABC1111111A1",
                            "tipo_declaracion": "Normal",
                          },
                          "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                          "pdf": "=PDF-STRING=",
                          "receipt_pdf": "=PDF-STRING=",
                          "type": "yearly",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-returns/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List tax returns
for tax_return in client.TaxReturns.list()
  pprint(tax_return)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_returns.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxReturns.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Business Monthly",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "ejercicio": "2018",
                    "ejercicio__gt": "2019",
                    "ejercicio__gte": "2017",
                    "ejercicio__lt": "2020",
                    "ejercicio__lte": "2021",
                    "ejercicio__range": "2015,2021",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "tipo_declaracion": "Normal",
                    "tipo_declaracion__in": "Normal,Commercial",
                  },
                  "response": {
                    "body": {
                      "count": 101,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "previous": {
                        "key": "value",
                      },
                      "results": [
                        {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "detalle_pago_isr": {
                            "r12_isr_retenciones_por_salarios": {
                              "a_cargo": 415945,
                              "aplica_primera_parcialidad": "NO",
                              "cantidad_a_cargo": 415566,
                              "cantidad_a_pagar": 415566,
                              "parte_actualizada": 0,
                              "recargos": 0,
                              "subsidio_empleo": 379,
                              "total_aplicaciones": 379,
                              "total_de_contribuciones": 415945,
                            },
                            "r13_isr_retenciones_por_asimilados_a_salarios": {
                              "a_cargo": 254588,
                              "aplica_primera_parcialidad": "NO",
                              "cantidad_a_cargo": 254588,
                              "cantidad_a_pagar": 254588,
                              "parte_actualizada": 0,
                              "recargos": 0,
                              "total_aplicaciones": 0,
                              "total_de_contribuciones": 254588,
                            },
                            "r14_isr_retenciones_por_servicios_profesionales": {
                              "a_cargo": 104482,
                              "aplica_primera_parcialidad": "NO",
                              "cantidad_a_cargo": 104482,
                              "cantidad_a_pagar": 104482,
                              "parte_actualizada": 0,
                              "recargos": 0,
                              "total_aplicaciones": 0,
                              "total_de_contribuciones": 104482,
                            },
                            "r1_isr_personas_morales": {
                              "a_cargo": 0,
                              "aplica_primera_parcialidad": "NO",
                              "cantidad_a_cargo": 0,
                              "cantidad_a_pagar": 0,
                              "total_aplicaciones": 0,
                              "total_de_contribuciones": 0,
                            },
                          },
                          "detalle_pago_iva": {
                            "r21_iva": {
                              "a_cargo": 312421,
                              "aplica_primera_parcialidad": "NO",
                              "cantidad_a_cargo": 312421,
                              "cantidad_a_pagar": 312421,
                              "parte_actualizada": 0,
                              "recargos": 0,
                              "total_aplicaciones": 0,
                              "total_de_contribuciones": 312421,
                            },
                            "r21_iva_retenciones": {
                              "a_cargo": 111448,
                              "aplica_primera_parcialidad": "NO",
                              "cantidad_a_cargo": 111448,
                              "cantidad_a_pagar": 111448,
                              "parte_actualizada": 0,
                              "recargos": 0,
                              "total_aplicaciones": 0,
                              "total_de_contribuciones": 111448,
                            },
                          },
                          "determinacion_isr": {
                            "personas_morales_regimen_general": {
                              "anticipos_rendimientos_distribuidos_periodo": 16746509,
                              "base_gravable_pago_provisional": 946992,
                              "coeficiente_utilidad": 0.2318,
                              "diferencia_a_cargo": 0,
                              "impuesto_a_cargo": 0,
                              "impuesto_retenido": 29925,
                              "impuestos_del_periodo": 284098,
                              "ingresos_nominales_mes_que_declara": 6482479,
                              "isr_causado": 284098,
                              "pagos_provisionales_efectuados_anterioridad": 303039,
                              "suma_ingresos_nominales_meses_anteriores_ejercicio": 69848414,
                              "total_ingresos_nominales": 76330893,
                              "utilidad_fiscal_pago_provisional": 17693501,
                            },
                          },
                          "determinacion_iva": {
                            "detalle_total_actos_actividades_pagados_tasa_16": {
                              "otros_actos_pagados_tasa_16": 2094706,
                              "total_actos_pagados_tasa_16": 2094706,
                            },
                            "detalle_valor_actos_actividades_gravados_tasa_16": {
                              "otros_actos_actividades_gravados_tasa_16": 6457950,
                              "total_actos_actividades_gravados_tasa_16": 6457950,
                            },
                            "determinacion_iva": {
                              "cantidad_a_cargo": 312421,
                              "diferencia_a_cargo": 312421,
                              "impuesto_a_cargo": 312421,
                              "impuesto_causado": 1033272,
                              "iva_retenido_al_contribuyente": 385698,
                              "saldo_a_favor_periodo": 0,
                              "suma_actos_actividades_gravados": 6457950,
                              "total_iva_acreditable": 335153,
                              "valor_actos_actividades_gravados_tasa_16": 6457950,
                            },
                            "determinacion_iva_acreditable": {
                              "iva_acreditable": 335153,
                              "iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": 0,
                              "iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados": 335153,
                              "total_actos_actividades_pagados_importacion_bienes_tasa_16": 0,
                              "total_iva_acreditable_periodo": 335153,
                              "total_iva_actos_actividades_gravados": 335153,
                              "total_iva_actos_actividades_pagados_tasa_16": 335153,
                              "total_iva_trasladado_contribuyente": 335153,
                            },
                            "montos_actos_actividades_pagados": {
                              "total_actos_actividades_pagados_no_paga_iva": 0,
                              "total_actos_actividades_pagados_tasa_0": 0,
                              "total_actos_actividades_pagados_tasa_16": 2094706,
                              "total_actos_actividades_sujetos_estimulo_rfn": 0,
                            },
                          },
                          "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                          "informacion_general": {
                            "denominacion_razon_social": "Aloha Mahalo SC",
                            "ejercicio": 2020,
                            "fecha_hora_presentacion": "2021-01-18T19:24:00-06:00",
                            "numero_operacion": "400475119",
                            "periodo_declaracion": "Diciembre",
                            "rfc": "DPA950805RR2",
                            "tipo_declaracion": "Normal",
                          },
                          "pdf": "===PDF_BINARY====",
                          "receipt_pdf": "===PDF_BINARY====",
                          "type": "monthly",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-returns/",
              "request": {
                "name": "ListTaxReturnsRequest",
                "query-parameters": {
                  "created_at__gt": {
                    "docs": "Return tax returns that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return tax returns that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return tax returns that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return tax returns that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return tax returns that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "ejercicio": {
                    "docs": "Return tax returns for exactly this year (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "ejercicio__gt": {
                    "docs": "Return tax returns for after this year (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "ejercicio__gte": {
                    "docs": "Return tax returns for this year or later (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "ejercicio__lt": {
                    "docs": "Return tax returns for before this year (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "ejercicio__lte": {
                    "docs": "Return tax returns for this year and earlier (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "ejercicio__range": {
                    "docs": "Return tax returns for this range of years (`YYYY`).",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information for this `tax-return.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information for these `tax-return.id`s.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return information for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "tipo_declaracion": {
                    "docs": "Return tax returns with this declaration type.",
                    "type": "optional<string>",
                  },
                  "tipo_declaracion__in": {
                    "docs": "Return tax returns with these declaration types.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "ListTaxReturnsResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveTaxReturns": {
              "auth": true,
              "display-name": "Retrieve tax returns for a link",
              "docs": "Retrieve tax return information for a specific fiscal link.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "### Yearly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "year_from": YYYY,
    "year_to": YYYY,
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]

### Monthly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "2019-01-01",
    "date_to": "2019-04-01",
    "type": "monthly",
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Yearly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  year_from="2019",
  year_to="2020",
  attach_pdf=True
)

# Monthly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  date_from="2019-01-01",
  date_to="2019-04-01",
  attach_pdf=True,
  type_="monthly"
)",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

# Yearly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'link-id',
  year_from: "2019",
  year_to: "2020"
)

# Monthly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'some-link-uuid',
  options: {
    type: TaxReturnType::MONTHLY,
    date_from: '2019-01-01',
    date_to: '2019-04-01',
  }
      )
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

// Yearly Tax Returns
client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019", "2020")
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});

// Monthly Tax Returns

client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2018-01-01",
                    "date_to": "2019-01-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                    "type": "type",
                  },
                  "response": {
                    "body": [
                      {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "datos_informativos": {
                          "credito_fiscal_autorizado_inversion_equipos_fijos": 0,
                          "credito_fiscal_autorizado_produccion_distribucion_cinematografica": 0,
                          "credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento": 0,
                          "credito_fiscal_autorizado_proyectos_inversion_artes": 0,
                          "credito_fiscal_autorizado_proyectos_investigacion_desarrollo": 0,
                          "saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica": 0,
                          "saldo_credito_fiscal_anteriores_proyectos_inversion_artes": 0,
                          "saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo": 0,
                        },
                        "deducciones_personales": {
                          "aportaciones_voluntarias_complementarias_al_sar": [
                            {
                              "monto_deducible": 12.03,
                              "rfc_emisor": "ABC666666A99",
                            },
                            {
                              "monto_deducible": 87.22,
                              "rfc_emisor": "ABC777777A99",
                            },
                          ],
                          "donativos": [
                            {
                              "monto_deducible": 10.03,
                              "rfc_emisor": "ABC555555A99",
                            },
                          ],
                          "honorarios_medicos_dentales_hospitalarios": [
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 1000,
                              "rfc_emisor": "ABC444444A44",
                            },
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 502.34,
                              "rfc_emisor": "ABC444444A44",
                            },
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 258.83,
                              "rfc_emisor": "ABC333333A33",
                            },
                            {
                              "monto_deducible": 14183.1,
                              "rfc_emisor": "ABC444444A55",
                            },
                            {
                              "monto_deducible": 1658,
                              "rfc_emisor": "ABC444444A66",
                            },
                            {
                              "monto_deducible": 1600,
                              "rfc_emisor": "ABC444444A77",
                            },
                            {
                              "monto_deducible": 1064,
                              "rfc_emisor": "ABC444444A88",
                            },
                            {
                              "monto_deducible": 927.57,
                              "rfc_emisor": "ABC444444A99",
                            },
                          ],
                          "primas_por_seguros_de_gasto_medico": [
                            {
                              "monto_deducible": 20.03,
                              "rfc_emisor": "ABC777777A99",
                            },
                          ],
                        },
                        "determinacion_impuesto": {
                          "accion_saldo_a_favor": "DEVOLUCI√ìN",
                          "base_gravable": 126864,
                          "deducciones_personales": 23264,
                          "ingresos_acumulables": 150128,
                          "isr_conforme_tarifa_final": 13789,
                          "isr_favorable": 10308,
                          "isr_retenido": 24097,
                          "nombre_banco": "BANCO SA",
                          "num_clabe": "000000000000000001",
                          "pagos_provisionales": 0,
                          "titular_clabe_permite_verificacion": "S√ç",
                        },
                        "dividendos": {
                          "monto_acumulable_dividendos_utilidades": {
                            "key": "value",
                          },
                          "monto_total_isr_pagado_sociedad": {
                            "key": "value",
                          },
                        },
                        "id": "02589c41-ba22-4d44-8558-8111cc751318",
                        "informacion_general": {
                          "ejercicio": 2018,
                          "fecha_hora_presentacion": "2020-01-07T17:28:00-05:00",
                          "nombre": "JOHN DOE",
                          "numero_operacion": "00000000001",
                          "periodo_declaracion": "Del Ejercicio",
                          "rfc": "ABCD111111A11",
                          "tipo_declaracion": "Normal",
                        },
                        "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                        "pdf": "=PDF-STRING=",
                        "receipt_pdf": "=PDF-STRING=",
                        "retenciones": {
                          "dividendos": {
                            "key": "value",
                          },
                          "servicios_profesionales": [
                            {
                              "monto_retenciones": 46000,
                              "retenciones_isr": 4600,
                              "rfc_retenedor": "ABC444444A00",
                            },
                          ],
                          "sueldos_salarios": [
                            {
                              "monto_retenciones": 118263,
                              "retenciones_isr": 19497,
                              "rfc_retenedor": "ABC444444A99",
                            },
                          ],
                        },
                        "servicios_profesionales": {
                          "deducciones_autorizadas": {
                            "deducciones_autorizadas": 11870,
                            "detalle_deducciones": [
                              {
                                "concepto": "GASOLINA Y MANTENIMIENTO DE TRANSPORTE",
                                "monto_detallado": 9682,
                                "tipo_deduccion": "GASTOS",
                              },
                              {
                                "concepto": "COMPRAS Y GASTOS GENERALES",
                                "monto_detallado": 2188,
                                "tipo_deduccion": "GASTOS",
                              },
                            ],
                            "total_deducciones_autorizadas": 11870,
                          },
                          "ingresos": {
                            "ingresos_acumulables": 46000,
                            "total_ingresos": 46000,
                          },
                          "pagos_provisionales": {
                            "pagos_provisionales_efectuados_en_ejercicio": 0,
                          },
                          "resultado_fiscal": {
                            "perdidas_fiscales_ejercicios_anteriores_aplicadas": 0,
                            "ptu_pagada_ejercicio": 0,
                            "utilidad_fiscal": 34130,
                            "utilidad_gravable": 34130,
                          },
                          "retenciones_isr": {
                            "isr_retenido_personas_morales": 4600,
                          },
                        },
                        "sueldos_salarios": {
                          "impuesto_retenido": 19497,
                          "ingreso_anual": 118263,
                          "ingresos_acumulables": 115998,
                          "ingresos_exentos": 2265,
                          "retenedores": [
                            {
                              "ingreso_anual": 2265,
                              "ingresos_exentos": 118263,
                              "nombre_denominacion_razon_social": "ACME CORP",
                              "rfc_retenedor": "ABCD222222A22",
                              "subsidio_empleo": 0,
                            },
                          ],
                          "subsidio_empleo": 0,
                        },
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "### Yearly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "year_from": YYYY,
    "year_to": YYYY,
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]

### Monthly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "2019-01-01",
    "date_to": "2019-04-01",
    "type": "monthly",
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Yearly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  year_from="2019",
  year_to="2020",
  attach_pdf=True
)

# Monthly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  date_from="2019-01-01",
  date_to="2019-04-01",
  attach_pdf=True,
  type_="monthly"
)",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

# Yearly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'link-id',
  year_from: "2019",
  year_to: "2020"
)

# Monthly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'some-link-uuid',
  options: {
    type: TaxReturnType::MONTHLY,
    date_from: '2019-01-01',
    date_to: '2019-04-01',
  }
      )
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

// Yearly Tax Returns
client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019", "2020")
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});

// Monthly Tax Returns

client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal Monthly (PFAE)",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2018-01-01",
                    "date_to": "2019-01-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                    "type": "type",
                  },
                  "response": {
                    "body": [
                      {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                        "informacion_general": {
                          "ejercicio": {
                            "key": "value",
                          },
                          "fecha_hora_presentacion": {
                            "key": "value",
                          },
                          "nombre": {
                            "key": "value",
                          },
                          "numero_operacion": {
                            "key": "value",
                          },
                          "periodo_declaracion": {
                            "key": "value",
                          },
                          "rfc": {
                            "key": "value",
                          },
                          "tipo_declaracion": {
                            "key": "value",
                          },
                        },
                        "isr": {
                          "detalle_del_pago": {
                            "a_cargo": 0,
                            "cantidad_a_cargo": 0,
                            "cantidad_a_pagar": 0,
                            "parte_actualizada": 0,
                            "recargos": 0,
                            "total_aplicaciones": 0,
                            "total_contribuciones": 0,
                          },
                          "determinacion": {
                            "base_gravable_pago_provisional": 0,
                            "compra_gastos_periodo": 399,
                            "compras_gastos_periodos_anteriores": 1596,
                            "impuesto_retenido": 0,
                            "ingresos_periodo": 0,
                            "ingresos_periodos_anteriores": 0,
                            "isr_cargo": 0,
                            "isr_causado": 0,
                            "isr_retenido_periodos_anteriores": 0,
                            "pagos_provisionales_efectuados_anterioridad": 0,
                            "total_compras_gastos": 1995,
                            "total_ingresos": 0,
                          },
                          "tipo": "PFAE",
                        },
                        "iva": {
                          "detalle_del_pago": {
                            "cantidad_a_cargo": 0,
                            "cantidad_a_pagar": 0,
                            "total_aplicaciones": 0,
                            "total_contribuciones": 0,
                          },
                          "determinacion": {
                            "actividades_exentas": 0,
                            "actividades_gravadas_tasa_0": 0,
                            "actividades_gravadas_tasa_16": 0,
                            "iva_acreditable_periodo": 0,
                            "iva_cobrado_periodo_tasa_16": 0,
                            "iva_retenido": 0,
                          },
                        },
                        "pdf": "===PDF_BINARY====",
                        "receipt_pdf": "===PDF_BINARY====",
                        "type": "monthly",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "### Yearly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "year_from": YYYY,
    "year_to": YYYY,
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]

### Monthly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "2019-01-01",
    "date_to": "2019-04-01",
    "type": "monthly",
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Yearly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  year_from="2019",
  year_to="2020",
  attach_pdf=True
)

# Monthly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  date_from="2019-01-01",
  date_to="2019-04-01",
  attach_pdf=True,
  type_="monthly"
)",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

# Yearly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'link-id',
  year_from: "2019",
  year_to: "2020"
)

# Monthly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'some-link-uuid',
  options: {
    type: TaxReturnType::MONTHLY,
    date_from: '2019-01-01',
    date_to: '2019-04-01',
  }
      )
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

// Yearly Tax Returns
client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019", "2020")
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});

// Monthly Tax Returns

client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Personal Monthly (PFAI)",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2018-01-01",
                    "date_to": "2019-01-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                    "type": "type",
                  },
                  "response": {
                    "body": [
                      {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                        "informacion_general": {
                          "ejercicio": {
                            "key": "value",
                          },
                          "fecha_hora_presentacion": {
                            "key": "value",
                          },
                          "nombre": {
                            "key": "value",
                          },
                          "numero_operacion": {
                            "key": "value",
                          },
                          "periodo_declaracion": {
                            "key": "value",
                          },
                          "rfc": {
                            "key": "value",
                          },
                          "tipo_declaracion": {
                            "key": "value",
                          },
                        },
                        "isr": {
                          "detalle_del_pago": {
                            "a_cargo": 0,
                            "cantidad_a_cargo": 0,
                            "cantidad_a_pagar": 0,
                            "parte_actualizada": 0,
                            "recargos": 0,
                            "total_aplicaciones": 0,
                            "total_contribuciones": 0,
                          },
                          "determinacion": {
                            "base_gravable_pago_provisional": 0,
                            "compra_gastos_periodo": 399,
                            "compras_gastos_periodos_anteriores": 1596,
                            "deducc√≠on_opcional": 700,
                            "impuesto_predial": 0,
                            "impuesto_retenido": 0,
                            "ingresos_periodo": 0,
                            "ingresos_periodos_anteriores": 0,
                            "isr_cargo": 0,
                            "isr_causado": 0,
                            "isr_retenido_periodos_anteriores": 0,
                            "optas_por_el_c√°lculo_acumulado": "NO",
                            "pagos_provisionales_efectuados_anterioridad": 0,
                            "tienes_facilidades_administrativas_o_est√≠mulos_deducibles": "NO",
                            "tipo_de_deducc√≠on": "dedducc√≠on opicional",
                            "total_compras_gastos": 1995,
                            "total_deducciones_autorizadas": 700,
                            "total_ingresos": 0,
                          },
                          "tipo": "PFAE",
                        },
                        "iva": {
                          "detalle_del_pago": {
                            "cantidad_a_cargo": 0,
                            "cantidad_a_pagar": 0,
                            "total_aplicaciones": 0,
                            "total_contribuciones": 0,
                          },
                          "determinacion": {
                            "actividades_exentas": 0,
                            "actividades_gravadas_tasa_0": 0,
                            "actividades_gravadas_tasa_16": 0,
                            "cantidad_a_cargo": 54,
                            "impuesto_a_cargo": 54,
                            "iva_acreditable_periodo": 0,
                            "iva_cobrado_periodo_tasa_16": 0,
                            "iva_retenido": 0,
                          },
                        },
                        "pdf": "===PDF_BINARY====",
                        "receipt_pdf": "===PDF_BINARY====",
                        "type": "monthly",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "### Yearly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "year_from": YYYY,
    "year_to": YYYY,
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]

### Monthly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "2019-01-01",
    "date_to": "2019-04-01",
    "type": "monthly",
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Yearly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  year_from="2019",
  year_to="2020",
  attach_pdf=True
)

# Monthly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  date_from="2019-01-01",
  date_to="2019-04-01",
  attach_pdf=True,
  type_="monthly"
)",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

# Yearly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'link-id',
  year_from: "2019",
  year_to: "2020"
)

# Monthly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'some-link-uuid',
  options: {
    type: TaxReturnType::MONTHLY,
    date_from: '2019-01-01',
    date_to: '2019-04-01',
  }
      )
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

// Yearly Tax Returns
client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019", "2020")
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});

// Monthly Tax Returns

client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Business",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2018-01-01",
                    "date_to": "2019-01-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                    "type": "type",
                  },
                  "response": {
                    "body": [
                      {
                        "cifras_cierre_ejercicio": {
                          "coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente": 0.4567,
                          "isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar": {
                            "key": "value",
                          },
                          "perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas": {
                            "key": "value",
                          },
                          "porcentaje_de_participacion_consolidable": {
                            "key": "value",
                          },
                          "saldo_actualizado_de_cuenta_de_capital_de_aportacion": {
                            "key": "value",
                          },
                          "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores": {
                            "key": "value",
                          },
                          "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores": {
                            "key": "value",
                          },
                          "saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida": {
                            "key": "value",
                          },
                          "saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables": {
                            "key": "value",
                          },
                          "saldo_promedio_anual_de_creditos": 142795,
                          "saldo_promedio_anual_de_deudas": 144765,
                        },
                        "collected_at": "2022-02-09T08:45:50Z",
                        "conciliacion_entre_resultado_contable_fiscal": {
                          "ajuste_anual_inflacion_acumulable": 95,
                          "ajuste_anual_inflacion_deducible": {
                            "key": "value",
                          },
                          "anticipos_de_clientes": {
                            "key": "value",
                          },
                          "anticipos_de_clientes_ejercicios_anteriores": {
                            "key": "value",
                          },
                          "costo_de_ventas_contable": {
                            "key": "value",
                          },
                          "costo_vendido_fiscal": {
                            "key": "value",
                          },
                          "deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores": 0,
                          "deduccion_inversiones": {
                            "key": "value",
                          },
                          "deducciones_contables_no_fiscales": 117415,
                          "deducciones_fiscales_no_contables": 0,
                          "depreciacion_y_amortizacion_contable": 106,
                          "donacion_bienes_basicos_subsistencia_humana": 0,
                          "efectos_reexpresion": {
                            "key": "value",
                          },
                          "estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores": 0,
                          "estimulo_fiscal_por_deduccion_inmediata_inversiones": {
                            "key": "value",
                          },
                          "ganancia_en_enajenacion_acciones_por_reembolso_capital": {
                            "key": "value",
                          },
                          "ganancia_en_enajenacion_de_terrenos_y_activo_fijo": {
                            "key": "value",
                          },
                          "gastos_que_no_reunen_requisitos_fiscales": 4307,
                          "ingresos_contables_no_fiscales": {
                            "key": "value",
                          },
                          "ingresos_fiscales_no_contables": 95,
                          "intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no": 0,
                          "intereses_moratorios_devengados_a_favor_cobrados_o_no": {
                            "key": "value",
                          },
                          "intereses_moratorios_efectivamente_cobrados": {
                            "key": "value",
                          },
                          "intereses_moratorios_efectivamente_pagados": {
                            "key": "value",
                          },
                          "inventario_acumulable_del_ejercicio": {
                            "key": "value",
                          },
                          "isr_ietu_impac_ptu": 113002,
                          "otras_deducciones_contables_no_fiscales": 0,
                          "otras_deducciones_fiscales_no_contables": {
                            "key": "value",
                          },
                          "otros_ingresos_contables_no_fiscales": {
                            "key": "value",
                          },
                          "otros_ingresos_fiscales_no_contables": {
                            "key": "value",
                          },
                          "perdida_contable_enajenacion_de_acciones": {
                            "key": "value",
                          },
                          "perdida_contable_enajenacion_de_activo_fijo": {
                            "key": "value",
                          },
                          "perdida_en_participacion_subsidiaria": {
                            "key": "value",
                          },
                          "perdida_fiscal_en_enajenacion_acciones": {
                            "key": "value",
                          },
                          "perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo": {
                            "key": "value",
                          },
                          "resultado_posicion_monetaria": {
                            "key": "value",
                          },
                          "saldos_a_favor_impuestos_y_su_actualizacion": {
                            "key": "value",
                          },
                          "utilidad_contable_enajenacion_de_acciones": {
                            "key": "value",
                          },
                          "utilidad_contable_enajenacion_de_activo_fijo": {
                            "key": "value",
                          },
                          "utilidad_en_participacion_subsidiaria": {
                            "key": "value",
                          },
                          "utilidad_o_perdida_fiscal_antes_de_ptu": 416133,
                          "utilidad_o_perdida_neta": 298623,
                          "utilidad_o_perdida_neta_historica": 298623,
                        },
                        "created_at": "2022-02-09T08:46:20Z",
                        "datos_adicionales": {
                          "estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal": "NO",
                          "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero": "SIN SELECCI√ìN",
                          "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp": "SIN SELECCI√ìN",
                          "indica_si_optas_por_dictaminar_tus_estados_financieros": "NO",
                          "indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente": "NO",
                          "optas_por_presentar_informacion_sobre_tu_situacion_fiscal": "SIN SELECCI√ìN",
                        },
                        "deducciones_autorizadas": {
                          "aportaciones_para_fondos_de_pensiones_y_jubilaciones": {
                            "key": "value",
                          },
                          "aportaciones_sar_infonavit_y_jubilaciones_vejez": {
                            "key": "value",
                          },
                          "combustible_y_lubricantes": {
                            "key": "value",
                          },
                          "consumos_en_restaurantes": 11254,
                          "contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps": {
                            "key": "value",
                          },
                          "credito_al_salario_no_disminuido_de_contribuciones": {
                            "key": "value",
                          },
                          "cuotas_imss": {
                            "key": "value",
                          },
                          "deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores": {
                            "key": "value",
                          },
                          "donativos_otorgados": {
                            "key": "value",
                          },
                          "fletes_y_acarreos_pagados_a_parsonas_fisicas": {
                            "key": "value",
                          },
                          "honorarios_pagados_a_personas_fisicas": {
                            "key": "value",
                          },
                          "monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador": {
                            "key": "value",
                          },
                          "monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador": {
                            "key": "value",
                          },
                          "monto_total_pagos_que_sean_ingresos_exentos_para_trabajador": {
                            "key": "value",
                          },
                          "otras_deducciones_autorizadas": 424346,
                          "perdida_por_creditos_incobrables": {
                            "key": "value",
                          },
                          "perdida_por_operaciones_financieras_derivadas": {
                            "key": "value",
                          },
                          "regalias_y_asistencia_tecnica": {
                            "key": "value",
                          },
                          "seguros_fianzas": {
                            "key": "value",
                          },
                          "sueldos_salarios": {
                            "key": "value",
                          },
                          "total_deducciones_autorizadas": 495127,
                          "uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno": {
                            "key": "value",
                          },
                          "uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas": {
                            "key": "value",
                          },
                          "viaticos_y_gastos_viaje": 59527,
                        },
                        "detalle_pago_r1_isr_personas_morales": {
                          "a_cargo": 113002,
                          "cantidad_a_cargo": 113002,
                          "cantidad_a_favor": {
                            "key": "value",
                          },
                          "cantidad_a_pagar": 113002,
                          "desea_aplicar_alguna_compensacion_o_estimulo": "NO",
                          "importe_de_primera_parcialidad": {
                            "key": "value",
                          },
                          "importe_sin_primera_parcialidad": {
                            "key": "value",
                          },
                          "multa_por_correccion": {
                            "key": "value",
                          },
                          "opta_por_pagar_parcialidades": "SIN SELECCI√ìN",
                          "parte_actualizada": {
                            "key": "value",
                          },
                          "recargos": {
                            "key": "value",
                          },
                          "total_contribuciones": 113002,
                        },
                        "determinacion_del_impuesto_sobre_la_renta": {
                          "datos_informativos_ejercicio": {
                            "credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar": 0,
                            "credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar": 0,
                            "credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar": 0,
                            "credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                            "gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico": 0,
                            "impac_recuperado_en_ejercicio_derivado_de_deconsolidacion": 0,
                            "ingresos_obtenidos_por_apoyos_gubernamentales": 0,
                            "monto_aplicado_del_estimulo_fiscal_de_chatarrizacion": 0,
                            "monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles": 0,
                            "saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos": 0,
                          },
                          "datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio": {
                            "saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar": 0,
                            "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar": 0,
                            "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar": 0,
                            "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                          },
                          "determinacion_del_impuesto_sobre_la_renta": {
                            "diferencia_a_cargo": 113002,
                            "impuesto_causado_en_ejercicio": 113002,
                            "impuesto_sobre_la_renta_del_ejercicio": 113002,
                            "isr_a_cargo_del_ejercicio": 113002,
                            "perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio": 39462,
                            "resultado_fiscal": 376672,
                            "tienes_estimulos_fiscales_a_acreditar": "SIN SELECCI√ìN",
                            "total_deducciones_autorizadas_y_deduccion_inmediata_inversiones": 495126,
                            "total_ingresos_acumulables": 911260,
                            "utilidad_fiscal_del_ejercicio": 416134,
                            "utilidad_o_perdida_fiscal_antes_de_ptu": 416134,
                          },
                          "impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes": {
                            "key": "value",
                          },
                        },
                        "dividendos_o_utilidades_distribuidos": {
                          "monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre": {
                            "key": "value",
                          },
                          "monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre": {
                            "key": "value",
                          },
                          "no_provenientes_de_cufin_ni_cufinre_en_acciones": {
                            "key": "value",
                          },
                          "no_provenientes_de_cufin_ni_cufinre_en_efectivo": {
                            "key": "value",
                          },
                          "provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente": {
                            "key": "value",
                          },
                          "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014": {
                            "key": "value",
                          },
                          "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores": {
                            "key": "value",
                          },
                          "provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre": {
                            "key": "value",
                          },
                        },
                        "estado_posicion_financiera_balance": {
                          "activo": {
                            "cargos_y_gastos_diferidos": 9319,
                            "cuentas_documentos_por_cobrar_extranjero": {},
                            "cuentas_documentos_por_cobrar_nacionales": {},
                            "depreciacion_acumulada": -106,
                            "efectivo_caja_depositos_instituciones_credito_nacionales": 726644,
                            "otros_activos_circulantes": 13277,
                            "otros_activos_fijos": 12756,
                            "suma_activo": 761890,
                          },
                          "capital_contable": {
                            "capital_social_proveniente_aportaciones": 10000,
                            "perdidas_acumuladas": -38450,
                            "suma_capital_contable": 270173,
                            "suma_pasivo_mas_capital_contable": 761890,
                            "utilidad_del_ejercicio": 298623,
                          },
                          "pasivo": {
                            "anticipos_de_clientes": {},
                            "contribuciones_por_pagar": 223490,
                            "cuentas_documentos_por_pagar_extranjero": {},
                            "cuentas_documentos_por_pagar_nacionales": {
                              "partes_no_relacionadas": 268227,
                              "total": 268227,
                            },
                            "suma_pasivo": 491717,
                          },
                        },
                        "estado_resultados": {
                          "compras_netas_importacion": {},
                          "compras_netas_nacionales": {},
                          "costo_mercancias": {
                            "key": "value",
                          },
                          "costo_ventas_servicios": {
                            "key": "value",
                          },
                          "devoluciones_descuentos_bonificaciones_ventas_extranjero": {},
                          "devoluciones_descuentos_bonificaciones_ventas_nacionales": {},
                          "efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria": {
                            "key": "value",
                          },
                          "efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria": {
                            "key": "value",
                          },
                          "ganancia_cambiaria": {},
                          "gastos_indirectos_fabricacion": {},
                          "gastos_operacion": {
                            "partes_no_relacionadas": 499540,
                            "total": 499540,
                          },
                          "gastos_partidas_discontinuas_extraordinarias": {
                            "key": "value",
                          },
                          "ietu": {
                            "key": "value",
                          },
                          "impac": {
                            "key": "value",
                          },
                          "ingresos_netos": {
                            "partes_no_relacionadas": 911165,
                            "total": 911165,
                          },
                          "ingresos_partidas_discontinuas_extraordinarias": {
                            "key": "value",
                          },
                          "intereses_devengados_a_cargo_extranjero": {},
                          "intereses_devengados_a_cargo_nacionales": {},
                          "intereses_devengados_a_favor_extranjero": {},
                          "intereses_devengados_a_favor_nacionales": {},
                          "intereses_moratorios_a_cargo_extranjero": {},
                          "intereses_moratorios_a_cargo_nacionales": {},
                          "intereses_moratorios_a_favor_extranjero": {},
                          "intereses_moratorios_a_favor_nacionales": {},
                          "inventario_final": {
                            "key": "value",
                          },
                          "inventario_inicial": {
                            "key": "value",
                          },
                          "isr": 113002,
                          "mano_de_obra": {},
                          "maquilas": {},
                          "otras_operaciones_financieras": {
                            "key": "value",
                          },
                          "otras_operaciones_financieras_extranjero": {},
                          "otras_operaciones_financieras_nacionales": {},
                          "otros_gastos": {
                            "key": "value",
                          },
                          "otros_gastos_extranjero": {
                            "key": "value",
                          },
                          "otros_gastos_nacionales": {
                            "key": "value",
                          },
                          "otros_productos": {
                            "key": "value",
                          },
                          "otros_productos_extranjero": {
                            "key": "value",
                          },
                          "otros_productos_nacionales": {
                            "key": "value",
                          },
                          "perdida_antes_impuesto": {
                            "key": "value",
                          },
                          "perdida_bruta": {
                            "key": "value",
                          },
                          "perdida_cambiaria": {},
                          "perdida_neta": {
                            "key": "value",
                          },
                          "perdida_operacion": {
                            "key": "value",
                          },
                          "perdida_participacion_subsidiaria": {
                            "key": "value",
                          },
                          "ptu": {
                            "key": "value",
                          },
                          "resultado_integral_financiamiento": {
                            "key": "value",
                          },
                          "resultado_posicion_monetaria_desfavorable": {},
                          "resultado_posicion_monetaria_favorable": {},
                          "utilidad_antes_impuesto": 411625,
                          "utilidad_bruta": 911165,
                          "utilidad_neta": 298623,
                          "utilidad_operacion": 411625,
                          "utilidad_participacion_subsidiaria": {
                            "key": "value",
                          },
                          "ventas_servicios_extranjero": {},
                          "ventas_servicios_nacionales": {
                            "partes_no_relacionadas": 911165,
                            "total": 911165,
                          },
                        },
                        "id": "02589c41-ba22-4d44-8558-8111cc751318",
                        "informacion_general": {
                          "denominacion_razon_social": "ACME CORP",
                          "ejercicio": 2018,
                          "fecha_hora_presentacion": "2020-01-07T16:55:00-06:00",
                          "numero_operacion": "000000000001",
                          "periodo_declaracion": "Del Ejercicio",
                          "rfc": "ABC1111111A1",
                          "tipo_complementaria": {
                            "key": "value",
                          },
                          "tipo_declaracion": "Normal",
                        },
                        "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                        "pdf": "=PDF-STRING=",
                        "receipt_pdf": "=PDF-STRING=",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "### Yearly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "year_from": YYYY,
    "year_to": YYYY,
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]

### Monthly Tax Returns
curl -X POST \
  https://sandbox.belvo.com/api/tax-returns/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "date_from": "2019-01-01",
    "date_to": "2019-04-01",
    "type": "monthly",
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Yearly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  year_from="2019",
  year_to="2020",
  attach_pdf=True
)

# Monthly Tax Returns
tax_returns = client.TaxReturns.create(
  link="link_id",
  date_from="2019-01-01",
  date_to="2019-04-01",
  attach_pdf=True,
  type_="monthly"
)",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

# Yearly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'link-id',
  year_from: "2019",
  year_to: "2020"
)

# Monthly Tax Returns
sandbox.tax_returns.retrieve(
  link: 'some-link-uuid',
  options: {
    type: TaxReturnType::MONTHLY,
    date_from: '2019-01-01',
    date_to: '2019-04-01',
  }
      )
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

// Yearly Tax Returns
client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019", "2020")
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});

// Monthly Tax Returns

client.connect()
  .then(function () {
    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Tax Return Business Monthly",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2018-01-01",
                    "date_to": "2019-01-01",
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                    "type": "type",
                  },
                  "response": {
                    "body": [
                      {
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "detalle_pago_isr": {
                          "r12_isr_retenciones_por_salarios": {
                            "a_cargo": 415945,
                            "aplica_primera_parcialidad": "NO",
                            "cantidad_a_cargo": 415566,
                            "cantidad_a_pagar": 415566,
                            "parte_actualizada": 0,
                            "recargos": 0,
                            "subsidio_empleo": 379,
                            "total_aplicaciones": 379,
                            "total_de_contribuciones": 415945,
                          },
                          "r13_isr_retenciones_por_asimilados_a_salarios": {
                            "a_cargo": 254588,
                            "aplica_primera_parcialidad": "NO",
                            "cantidad_a_cargo": 254588,
                            "cantidad_a_pagar": 254588,
                            "parte_actualizada": 0,
                            "recargos": 0,
                            "total_aplicaciones": 0,
                            "total_de_contribuciones": 254588,
                          },
                          "r14_isr_retenciones_por_servicios_profesionales": {
                            "a_cargo": 104482,
                            "aplica_primera_parcialidad": "NO",
                            "cantidad_a_cargo": 104482,
                            "cantidad_a_pagar": 104482,
                            "parte_actualizada": 0,
                            "recargos": 0,
                            "total_aplicaciones": 0,
                            "total_de_contribuciones": 104482,
                          },
                          "r1_isr_personas_morales": {
                            "a_cargo": 0,
                            "aplica_primera_parcialidad": "NO",
                            "cantidad_a_cargo": 0,
                            "cantidad_a_pagar": 0,
                            "total_aplicaciones": 0,
                            "total_de_contribuciones": 0,
                          },
                        },
                        "detalle_pago_iva": {
                          "r21_iva": {
                            "a_cargo": 312421,
                            "aplica_primera_parcialidad": "NO",
                            "cantidad_a_cargo": 312421,
                            "cantidad_a_pagar": 312421,
                            "parte_actualizada": 0,
                            "recargos": 0,
                            "total_aplicaciones": 0,
                            "total_de_contribuciones": 312421,
                          },
                          "r21_iva_retenciones": {
                            "a_cargo": 111448,
                            "aplica_primera_parcialidad": "NO",
                            "cantidad_a_cargo": 111448,
                            "cantidad_a_pagar": 111448,
                            "parte_actualizada": 0,
                            "recargos": 0,
                            "total_aplicaciones": 0,
                            "total_de_contribuciones": 111448,
                          },
                        },
                        "determinacion_isr": {
                          "personas_morales_regimen_general": {
                            "anticipos_rendimientos_distribuidos_periodo": 16746509,
                            "base_gravable_pago_provisional": 946992,
                            "coeficiente_utilidad": 0.2318,
                            "diferencia_a_cargo": 0,
                            "impuesto_a_cargo": 0,
                            "impuesto_retenido": 29925,
                            "impuestos_del_periodo": 284098,
                            "ingresos_nominales_mes_que_declara": 6482479,
                            "isr_causado": 284098,
                            "pagos_provisionales_efectuados_anterioridad": 303039,
                            "suma_ingresos_nominales_meses_anteriores_ejercicio": 69848414,
                            "total_ingresos_nominales": 76330893,
                            "utilidad_fiscal_pago_provisional": 17693501,
                          },
                        },
                        "determinacion_iva": {
                          "detalle_total_actos_actividades_pagados_tasa_16": {
                            "otros_actos_pagados_tasa_16": 2094706,
                            "total_actos_pagados_tasa_16": 2094706,
                          },
                          "detalle_valor_actos_actividades_gravados_tasa_16": {
                            "otros_actos_actividades_gravados_tasa_16": 6457950,
                            "total_actos_actividades_gravados_tasa_16": 6457950,
                          },
                          "determinacion_iva": {
                            "cantidad_a_cargo": 312421,
                            "diferencia_a_cargo": 312421,
                            "impuesto_a_cargo": 312421,
                            "impuesto_causado": 1033272,
                            "iva_retenido_al_contribuyente": 385698,
                            "saldo_a_favor_periodo": 0,
                            "suma_actos_actividades_gravados": 6457950,
                            "total_iva_acreditable": 335153,
                            "valor_actos_actividades_gravados_tasa_16": 6457950,
                          },
                          "determinacion_iva_acreditable": {
                            "iva_acreditable": 335153,
                            "iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": 0,
                            "iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados": 335153,
                            "total_actos_actividades_pagados_importacion_bienes_tasa_16": 0,
                            "total_iva_acreditable_periodo": 335153,
                            "total_iva_actos_actividades_gravados": 335153,
                            "total_iva_actos_actividades_pagados_tasa_16": 335153,
                            "total_iva_trasladado_contribuyente": 335153,
                          },
                          "montos_actos_actividades_pagados": {
                            "total_actos_actividades_pagados_no_paga_iva": 0,
                            "total_actos_actividades_pagados_tasa_0": 0,
                            "total_actos_actividades_pagados_tasa_16": 2094706,
                            "total_actos_actividades_sujetos_estimulo_rfn": 0,
                          },
                        },
                        "id": "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                        "informacion_general": {
                          "denominacion_razon_social": "Aloha Mahalo SC",
                          "ejercicio": 2020,
                          "fecha_hora_presentacion": "2021-01-18T19:24:00-06:00",
                          "numero_operacion": "400475119",
                          "periodo_declaracion": "Diciembre",
                          "rfc": "DPA950805RR2",
                          "tipo_complementaria": {
                            "key": "value",
                          },
                          "tipo_declaracion": "Normal",
                        },
                        "pdf": "===PDF_BINARY====",
                        "receipt_pdf": "===PDF_BINARY====",
                        "type": "monthly",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/tax-returns/",
              "request": {
                "body": "RetrieveTaxReturnsRequestBody",
                "content-type": "application/json",
                "name": "RetrieveTaxReturnsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<RetrieveTaxReturnsResponseItem>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "DetailTaxReturnResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxReturnPersonal",
              },
              {
                "type": "root.TaxReturnPersonalMonthly",
              },
              {
                "type": "root.TaxReturnBusiness",
              },
              {
                "type": "root.TaxReturnBusinessMonthly",
              },
            ],
          },
          "ListTaxReturnsResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxReturnsPersonalPaginated",
              },
              {
                "type": "root.TaxReturnsPersonalMonthlyPaginated",
              },
              {
                "type": "root.TaxReturnsBusinessPaginated",
              },
              {
                "type": "root.TaxReturnsBusinessMonthlyPaginated",
              },
            ],
          },
          "RetrieveTaxReturnsRequestBody": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxReturnsMonthlyRequest",
              },
              {
                "type": "root.TaxReturnsYearlyRequest",
              },
            ],
          },
          "RetrieveTaxReturnsResponseItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxReturnPersonal",
              },
              {
                "type": "root.TaxReturnPersonalMonthly",
              },
              {
                "type": "root.TaxReturnBusiness",
              },
              {
                "type": "root.TaxReturnBusinessMonthly",
              },
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  ListTaxReturnsResponse:
    discriminated: false
    union:
      - type: root.TaxReturnsPersonalPaginated
      - type: root.TaxReturnsPersonalMonthlyPaginated
      - type: root.TaxReturnsBusinessPaginated
      - type: root.TaxReturnsBusinessMonthlyPaginated
    source:
      openapi: ../openapi.yml
  RetrieveTaxReturnsRequestBody:
    discriminated: false
    union:
      - type: root.TaxReturnsMonthlyRequest
      - type: root.TaxReturnsYearlyRequest
    source:
      openapi: ../openapi.yml
  RetrieveTaxReturnsResponseItem:
    discriminated: false
    union:
      - type: root.TaxReturnPersonal
      - type: root.TaxReturnPersonalMonthly
      - type: root.TaxReturnBusiness
      - type: root.TaxReturnBusinessMonthly
    source:
      openapi: ../openapi.yml
  DetailTaxReturnResponse:
    discriminated: false
    union:
      - type: root.TaxReturnPersonal
      - type: root.TaxReturnPersonalMonthly
      - type: root.TaxReturnBusiness
      - type: root.TaxReturnBusinessMonthly
    source:
      openapi: ../openapi.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListTaxReturns:
      path: /api/tax-returns/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing tax returns in your Belvo account.
        By default, we return up to 100 results per page. The results will
        include a mix of both monthly and yearly tax returns.
      source:
        openapi: ../openapi.yml
      display-name: List all tax returns
      request:
        name: ListTaxReturnsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          created_at__gt:
            type: optional<string>
            docs: >-
              Return tax returns that were last updated in Belvo's database
              after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return tax returns that were last updated in Belvo's database
              after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return tax returns that were last updated in Belvo's database
              before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return tax returns that were last updated in Belvo's database
              before or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return tax returns that were last updated in Belvo's database
              between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          id:
            type: optional<string>
            docs: Return information for this `tax-return.id`.
          id__in:
            type: optional<string>
            docs: Return information for these `tax-return.id`s.
          ejercicio:
            type: optional<string>
            docs: Return tax returns for exactly this year (`YYYY`).
          ejercicio__lt:
            type: optional<string>
            docs: Return tax returns for before this year (`YYYY`).
          ejercicio__lte:
            type: optional<string>
            docs: Return tax returns for this year and earlier (`YYYY`).
          ejercicio__gt:
            type: optional<string>
            docs: Return tax returns for after this year (`YYYY`).
          ejercicio__gte:
            type: optional<string>
            docs: Return tax returns for this year or later (`YYYY`).
          ejercicio__range:
            type: optional<string>
            docs: Return tax returns for this range of years (`YYYY`).
          tipo_declaracion:
            type: optional<string>
            docs: Return tax returns with this declaration type.
          tipo_declaracion__in:
            type: optional<string>
            docs: Return tax returns with these declaration types.
          link__in:
            type: optional<string>
            docs: Return information for these `link.id`s.
      response:
        docs: Ok
        type: ListTaxReturnsResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - name: Tax Return Personal
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            ejercicio: '2018'
            ejercicio__lt: '2020'
            ejercicio__lte: '2021'
            ejercicio__gt: '2019'
            ejercicio__gte: '2017'
            ejercicio__range: 2015,2021
            tipo_declaracion: Normal
            tipo_declaracion__in: Normal,Commercial
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 101
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 02589c41-ba22-4d44-8558-8111cc751318
                  link: 19697249-01b8-443e-a451-76bfc5fbeebf
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  informacion_general:
                    ejercicio: 2018
                    fecha_hora_presentacion: '2020-01-07T17:28:00-05:00'
                    numero_operacion: '00000000001'
                    periodo_declaracion: Del Ejercicio
                    rfc: ABCD111111A11
                    tipo_declaracion: Normal
                    nombre: JOHN DOE
                  sueldos_salarios:
                    retenedores:
                      - rfc_retenedor: ABCD222222A22
                        nombre_denominacion_razon_social: ACME CORP
                        ingresos_exentos: 118263
                        ingreso_anual: 2265
                        subsidio_empleo: 0
                    impuesto_retenido: 19497
                    ingreso_anual: 118263
                    ingresos_acumulables: 115998
                    ingresos_exentos: 2265
                    subsidio_empleo: 0
                  servicios_profesionales:
                    deducciones_autorizadas:
                      deducciones_autorizadas: 11870
                      detalle_deducciones:
                        - tipo_deduccion: GASTOS
                          concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
                          monto_detallado: 9682
                        - tipo_deduccion: GASTOS
                          concepto: COMPRAS Y GASTOS GENERALES
                          monto_detallado: 2188
                      total_deducciones_autorizadas: 11870
                    ingresos:
                      ingresos_acumulables: 46000
                      total_ingresos: 46000
                    resultado_fiscal:
                      utilidad_fiscal: 34130
                      ptu_pagada_ejercicio: 0
                      perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
                      utilidad_gravable: 34130
                    pagos_provisionales:
                      pagos_provisionales_efectuados_en_ejercicio: 0
                    retenciones_isr:
                      isr_retenido_personas_morales: 4600
                  deducciones_personales:
                    honorarios_medicos_dentales_hospitalarios:
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC444444A44
                        monto_deducible: 1000
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC444444A44
                        monto_deducible: 502.34
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC333333A33
                        monto_deducible: 258.83
                      - rfc_emisor: ABC444444A55
                        monto_deducible: 14183.1
                      - rfc_emisor: ABC444444A66
                        monto_deducible: 1658
                      - rfc_emisor: ABC444444A77
                        monto_deducible: 1600
                      - rfc_emisor: ABC444444A88
                        monto_deducible: 1064
                      - rfc_emisor: ABC444444A99
                        monto_deducible: 927.57
                    donativos:
                      - rfc_emisor: ABC555555A99
                        monto_deducible: 10.03
                    aportaciones_voluntarias_complementarias_al_sar:
                      - rfc_emisor: ABC666666A99
                        monto_deducible: 12.03
                      - rfc_emisor: ABC777777A99
                        monto_deducible: 87.22
                    primas_por_seguros_de_gasto_medico:
                      - rfc_emisor: ABC777777A99
                        monto_deducible: 20.03
                  determinacion_impuesto:
                    base_gravable: 126864
                    deducciones_personales: 23264
                    ingresos_acumulables: 150128
                    isr_favorable: 10308
                    isr_conforme_tarifa_final: 13789
                    isr_retenido: 24097
                    num_clabe: '000000000000000001'
                    nombre_banco: BANCO SA
                    pagos_provisionales: 0
                    titular_clabe_permite_verificacion: S√ç
                    accion_saldo_a_favor: DEVOLUCI√ìN
                  retenciones:
                    sueldos_salarios:
                      - rfc_retenedor: ABC444444A99
                        monto_retenciones: 118263
                        retenciones_isr: 19497
                    servicios_profesionales:
                      - rfc_retenedor: ABC444444A00
                        monto_retenciones: 46000
                        retenciones_isr: 4600
                  datos_informativos:
                    credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
                    credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
                    credito_fiscal_autorizado_proyectos_inversion_artes: 0
                    credito_fiscal_autorizado_inversion_equipos_fijos: 0
                    credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
                    saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
                    saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
                    saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
                  pdf: '=PDF-STRING='
                  receipt_pdf: '=PDF-STRING='
                  dividendos: {}
                  type: yearly
              previous:
                key: value
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List tax returns

                for tax_return in client.TaxReturns.list()
                  pprint(tax_return)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Personal Monthly (PFAe)
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            ejercicio: '2018'
            ejercicio__lt: '2020'
            ejercicio__lte: '2021'
            ejercicio__gt: '2019'
            ejercicio__gte: '2017'
            ejercicio__range: 2015,2021
            tipo_declaracion: Normal
            tipo_declaracion__in: Normal,Commercial
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 101
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  isr:
                    tipo: PFAE
                    determinacion:
                      ingresos_periodos_anteriores: 0
                      ingresos_periodo: 0
                      total_ingresos: 0
                      compras_gastos_periodos_anteriores: 1596
                      compra_gastos_periodo: 399
                      total_compras_gastos: 1995
                      base_gravable_pago_provisional: 0
                      isr_causado: 0
                      pagos_provisionales_efectuados_anterioridad: 0
                      isr_retenido_periodos_anteriores: 0
                      impuesto_retenido: 0
                      isr_cargo: 0
                    detalle_del_pago:
                      a_cargo: 0
                      parte_actualizada: 0
                      recargos: 0
                      total_contribuciones: 0
                      total_aplicaciones: 0
                      cantidad_a_cargo: 0
                      cantidad_a_pagar: 0
                  iva:
                    determinacion:
                      actividades_gravadas_tasa_16: 0
                      actividades_gravadas_tasa_0: 0
                      actividades_exentas: 0
                      iva_cobrado_periodo_tasa_16: 0
                      iva_acreditable_periodo: 0
                      iva_retenido: 0
                    detalle_del_pago:
                      total_contribuciones: 0
                      total_aplicaciones: 0
                      cantidad_a_cargo: 0
                      cantidad_a_pagar: 0
                  pdf: '===PDF_BINARY===='
                  receipt_pdf: '===PDF_BINARY===='
                  type: monthly
                  informacion_general: {}
              previous:
                key: value
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List tax returns

                for tax_return in client.TaxReturns.list()
                  pprint(tax_return)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Personal Monthly (PFAI)
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            ejercicio: '2018'
            ejercicio__lt: '2020'
            ejercicio__lte: '2021'
            ejercicio__gt: '2019'
            ejercicio__gte: '2017'
            ejercicio__range: 2015,2021
            tipo_declaracion: Normal
            tipo_declaracion__in: Normal,Commercial
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 101
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  isr:
                    tipo: PFAE
                    determinacion:
                      ingresos_periodos_anteriores: 0
                      ingresos_periodo: 0
                      total_ingresos: 0
                      compras_gastos_periodos_anteriores: 1596
                      compra_gastos_periodo: 399
                      total_compras_gastos: 1995
                      base_gravable_pago_provisional: 0
                      isr_causado: 0
                      pagos_provisionales_efectuados_anterioridad: 0
                      isr_retenido_periodos_anteriores: 0
                      impuesto_retenido: 0
                      isr_cargo: 0
                      tipo_de_deducc√≠on: dedducc√≠on opicional
                      optas_por_el_c√°lculo_acumulado: 'NO'
                      deducc√≠on_opcional: 700
                      impuesto_predial: 0
                      total_deducciones_autorizadas: 700
                      tienes_facilidades_administrativas_o_est√≠mulos_deducibles: 'NO'
                    detalle_del_pago:
                      a_cargo: 0
                      parte_actualizada: 0
                      recargos: 0
                      total_contribuciones: 0
                      total_aplicaciones: 0
                      cantidad_a_cargo: 0
                      cantidad_a_pagar: 0
                  iva:
                    determinacion:
                      actividades_gravadas_tasa_16: 0
                      actividades_gravadas_tasa_0: 0
                      actividades_exentas: 0
                      iva_cobrado_periodo_tasa_16: 0
                      iva_acreditable_periodo: 0
                      iva_retenido: 0
                      impuesto_a_cargo: 54
                      cantidad_a_cargo: 54
                    detalle_del_pago:
                      total_contribuciones: 0
                      total_aplicaciones: 0
                      cantidad_a_cargo: 0
                      cantidad_a_pagar: 0
                  pdf: '===PDF_BINARY===='
                  receipt_pdf: '===PDF_BINARY===='
                  type: monthly
                  informacion_general: {}
              previous:
                key: value
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List tax returns

                for tax_return in client.TaxReturns.list()
                  pprint(tax_return)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Business
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            ejercicio: '2018'
            ejercicio__lt: '2020'
            ejercicio__lte: '2021'
            ejercicio__gt: '2019'
            ejercicio__gte: '2017'
            ejercicio__range: 2015,2021
            tipo_declaracion: Normal
            tipo_declaracion__in: Normal,Commercial
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 101
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 02589c41-ba22-4d44-8558-8111cc751318
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  informacion_general:
                    ejercicio: 2018
                    fecha_hora_presentacion: '2020-01-07T16:55:00-06:00'
                    numero_operacion: '000000000001'
                    periodo_declaracion: Del Ejercicio
                    rfc: ABC1111111A1
                    tipo_declaracion: Normal
                    denominacion_razon_social: ACME CORP
                  datos_adicionales:
                    indica_si_optas_por_dictaminar_tus_estados_financieros: 'NO'
                    estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: 'NO'
                    estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN SELECCI√ìN
                    estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN SELECCI√ìN
                    optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCI√ìN
                    indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: 'NO'
                  estado_resultados:
                    ventas_servicios_nacionales:
                      partes_no_relacionadas: 911165
                      total: 911165
                    ventas_servicios_extranjero: {}
                    devoluciones_descuentos_bonificaciones_ventas_nacionales: {}
                    devoluciones_descuentos_bonificaciones_ventas_extranjero: {}
                    ingresos_netos:
                      partes_no_relacionadas: 911165
                      total: 911165
                    compras_netas_nacionales: {}
                    compras_netas_importacion: {}
                    mano_de_obra: {}
                    maquilas: {}
                    gastos_indirectos_fabricacion: {}
                    utilidad_bruta: 911165
                    gastos_operacion:
                      partes_no_relacionadas: 499540
                      total: 499540
                    utilidad_operacion: 411625
                    intereses_devengados_a_favor_nacionales: {}
                    intereses_devengados_a_favor_extranjero: {}
                    intereses_moratorios_a_favor_nacionales: {}
                    intereses_moratorios_a_favor_extranjero: {}
                    ganancia_cambiaria: {}
                    intereses_devengados_a_cargo_nacionales: {}
                    intereses_devengados_a_cargo_extranjero: {}
                    intereses_moratorios_a_cargo_nacionales: {}
                    intereses_moratorios_a_cargo_extranjero: {}
                    perdida_cambiaria: {}
                    resultado_posicion_monetaria_favorable: {}
                    resultado_posicion_monetaria_desfavorable: {}
                    otras_operaciones_financieras_nacionales: {}
                    otras_operaciones_financieras_extranjero: {}
                    utilidad_antes_impuesto: 411625
                    isr: 113002
                    utilidad_neta: 298623
                  estado_posicion_financiera_balance:
                    activo:
                      efectivo_caja_depositos_instituciones_credito_nacionales: 726644
                      cuentas_documentos_por_cobrar_nacionales: {}
                      cuentas_documentos_por_cobrar_extranjero: {}
                      otros_activos_circulantes: 13277
                      otros_activos_fijos: 12756
                      depreciacion_acumulada: -106
                      cargos_y_gastos_diferidos: 9319
                      suma_activo: 761890
                    pasivo:
                      cuentas_documentos_por_pagar_nacionales:
                        partes_no_relacionadas: 268227
                        total: 268227
                      cuentas_documentos_por_pagar_extranjero: {}
                      contribuciones_por_pagar: 223490
                      anticipos_de_clientes: {}
                      suma_pasivo: 491717
                    capital_contable:
                      capital_social_proveniente_aportaciones: 10000
                      utilidad_del_ejercicio: 298623
                      perdidas_acumuladas: -38450
                      suma_capital_contable: 270173
                      suma_pasivo_mas_capital_contable: 761890
                  conciliacion_entre_resultado_contable_fiscal:
                    utilidad_o_perdida_neta: 298623
                    utilidad_o_perdida_neta_historica: 298623
                    ingresos_fiscales_no_contables: 95
                    ajuste_anual_inflacion_acumulable: 95
                    deducciones_contables_no_fiscales: 117415
                    depreciacion_y_amortizacion_contable: 106
                    gastos_que_no_reunen_requisitos_fiscales: 4307
                    isr_ietu_impac_ptu: 113002
                    intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
                    otras_deducciones_contables_no_fiscales: 0
                    deducciones_fiscales_no_contables: 0
                    donacion_bienes_basicos_subsistencia_humana: 0
                    estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
                    deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
                    utilidad_o_perdida_fiscal_antes_de_ptu: 416133
                  deducciones_autorizadas:
                    viaticos_y_gastos_viaje: 59527
                    consumos_en_restaurantes: 11254
                    otras_deducciones_autorizadas: 424346
                    total_deducciones_autorizadas: 495127
                  cifras_cierre_ejercicio:
                    saldo_promedio_anual_de_creditos: 142795
                    saldo_promedio_anual_de_deudas: 144765
                    coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
                  determinacion_del_impuesto_sobre_la_renta:
                    determinacion_del_impuesto_sobre_la_renta:
                      total_ingresos_acumulables: 911260
                      total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
                      utilidad_o_perdida_fiscal_antes_de_ptu: 416134
                      utilidad_fiscal_del_ejercicio: 416134
                      perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
                      resultado_fiscal: 376672
                      impuesto_causado_en_ejercicio: 113002
                      tienes_estimulos_fiscales_a_acreditar: SIN SELECCI√ìN
                      impuesto_sobre_la_renta_del_ejercicio: 113002
                      diferencia_a_cargo: 113002
                      isr_a_cargo_del_ejercicio: 113002
                    datos_informativos_ejercicio:
                      monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
                      monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
                      impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
                      ingresos_obtenidos_por_apoyos_gubernamentales: 0
                      gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
                      credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
                      credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
                      credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
                      saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
                      credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
                    datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
                      saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar: 0
                      saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
                      saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
                      saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
                  detalle_pago_r1_isr_personas_morales:
                    a_cargo: 113002
                    total_contribuciones: 113002
                    desea_aplicar_alguna_compensacion_o_estimulo: 'NO'
                    cantidad_a_cargo: 113002
                    opta_por_pagar_parcialidades: SIN SELECCI√ìN
                    cantidad_a_pagar: 113002
                  pdf: '=PDF-STRING='
                  receipt_pdf: '=PDF-STRING='
                  link: 19697249-01b8-443e-a451-76bfc5fbeebf
                  dividendos_o_utilidades_distribuidos: {}
                  type: yearly
              previous:
                key: value
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List tax returns

                for tax_return in client.TaxReturns.list()
                  pprint(tax_return)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Business Monthly
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            ejercicio: '2018'
            ejercicio__lt: '2020'
            ejercicio__lte: '2021'
            ejercicio__gt: '2019'
            ejercicio__gte: '2017'
            ejercicio__range: 2015,2021
            tipo_declaracion: Normal
            tipo_declaracion__in: Normal,Commercial
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 101
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  informacion_general:
                    rfc: DPA950805RR2
                    denominacion_razon_social: Aloha Mahalo SC
                    tipo_declaracion: Normal
                    ejercicio: 2020
                    periodo_declaracion: Diciembre
                    fecha_hora_presentacion: '2021-01-18T19:24:00-06:00'
                    numero_operacion: '400475119'
                  determinacion_isr:
                    personas_morales_regimen_general:
                      suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
                      ingresos_nominales_mes_que_declara: 6482479
                      total_ingresos_nominales: 76330893
                      impuestos_del_periodo: 284098
                      coeficiente_utilidad: 0.2318
                      pagos_provisionales_efectuados_anterioridad: 303039
                      utilidad_fiscal_pago_provisional: 17693501
                      impuesto_retenido: 29925
                      anticipos_rendimientos_distribuidos_periodo: 16746509
                      diferencia_a_cargo: 0
                      base_gravable_pago_provisional: 946992
                      impuesto_a_cargo: 0
                      isr_causado: 284098
                  detalle_pago_isr:
                    r1_isr_personas_morales:
                      a_cargo: 0
                      total_aplicaciones: 0
                      total_de_contribuciones: 0
                      cantidad_a_cargo: 0
                      aplica_primera_parcialidad: 'NO'
                      cantidad_a_pagar: 0
                    r12_isr_retenciones_por_salarios:
                      a_cargo: 415945
                      parte_actualizada: 0
                      recargos: 0
                      total_aplicaciones: 379
                      total_de_contribuciones: 415945
                      subsidio_empleo: 379
                      cantidad_a_cargo: 415566
                      aplica_primera_parcialidad: 'NO'
                      cantidad_a_pagar: 415566
                    r13_isr_retenciones_por_asimilados_a_salarios:
                      a_cargo: 254588
                      parte_actualizada: 0
                      recargos: 0
                      total_aplicaciones: 0
                      total_de_contribuciones: 254588
                      cantidad_a_cargo: 254588
                      aplica_primera_parcialidad: 'NO'
                      cantidad_a_pagar: 254588
                    r14_isr_retenciones_por_servicios_profesionales:
                      a_cargo: 104482
                      parte_actualizada: 0
                      recargos: 0
                      total_aplicaciones: 0
                      total_de_contribuciones: 104482
                      cantidad_a_cargo: 104482
                      aplica_primera_parcialidad: 'NO'
                      cantidad_a_pagar: 104482
                  determinacion_iva:
                    montos_actos_actividades_pagados:
                      total_actos_actividades_pagados_tasa_16: 2094706
                      total_actos_actividades_sujetos_estimulo_rfn: 0
                      total_actos_actividades_pagados_tasa_0: 0
                      total_actos_actividades_pagados_no_paga_iva: 0
                    detalle_total_actos_actividades_pagados_tasa_16:
                      otros_actos_pagados_tasa_16: 2094706
                      total_actos_pagados_tasa_16: 2094706
                    determinacion_iva_acreditable:
                      total_iva_actos_actividades_pagados_tasa_16: 335153
                      total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
                      iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
                      total_iva_trasladado_contribuyente: 335153
                      iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
                      iva_acreditable: 335153
                      total_iva_acreditable_periodo: 335153
                      total_iva_actos_actividades_gravados: 335153
                    determinacion_iva:
                      valor_actos_actividades_gravados_tasa_16: 6457950
                      cantidad_a_cargo: 312421
                      suma_actos_actividades_gravados: 6457950
                      saldo_a_favor_periodo: 0
                      impuesto_causado: 1033272
                      diferencia_a_cargo: 312421
                      iva_retenido_al_contribuyente: 385698
                      impuesto_a_cargo: 312421
                      total_iva_acreditable: 335153
                    detalle_valor_actos_actividades_gravados_tasa_16:
                      otros_actos_actividades_gravados_tasa_16: 6457950
                      total_actos_actividades_gravados_tasa_16: 6457950
                  detalle_pago_iva:
                    r21_iva:
                      a_cargo: 312421
                      parte_actualizada: 0
                      total_aplicaciones: 0
                      recargos: 0
                      total_de_contribuciones: 312421
                      cantidad_a_cargo: 312421
                      aplica_primera_parcialidad: 'NO'
                      cantidad_a_pagar: 312421
                    r21_iva_retenciones:
                      a_cargo: 111448
                      parte_actualizada: 0
                      total_aplicaciones: 0
                      recargos: 0
                      total_de_contribuciones: 111448
                      cantidad_a_cargo: 111448
                      aplica_primera_parcialidad: 'NO'
                      cantidad_a_pagar: 111448
                  pdf: '===PDF_BINARY===='
                  receipt_pdf: '===PDF_BINARY===='
                  type: monthly
              previous:
                key: value
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List tax returns

                for tax_return in client.TaxReturns.list()
                  pprint(tax_return)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveTaxReturns:
      path: /api/tax-returns/
      method: POST
      auth: true
      docs: Retrieve tax return information for a specific fiscal link.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve tax returns for a link
      request:
        body: RetrieveTaxReturnsRequestBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: RetrieveTaxReturnsRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<RetrieveTaxReturnsResponseItem>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - name: Tax Return Personal
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            type: type
            date_from: '2018-01-01'
            date_to: '2019-01-01'
          response:
            body:
              - id: 02589c41-ba22-4d44-8558-8111cc751318
                link: 19697249-01b8-443e-a451-76bfc5fbeebf
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                informacion_general:
                  ejercicio: 2018
                  fecha_hora_presentacion: '2020-01-07T17:28:00-05:00'
                  numero_operacion: '00000000001'
                  periodo_declaracion: Del Ejercicio
                  rfc: ABCD111111A11
                  tipo_declaracion: Normal
                  nombre: JOHN DOE
                sueldos_salarios:
                  retenedores:
                    - rfc_retenedor: ABCD222222A22
                      nombre_denominacion_razon_social: ACME CORP
                      ingresos_exentos: 118263
                      ingreso_anual: 2265
                      subsidio_empleo: 0
                  impuesto_retenido: 19497
                  ingreso_anual: 118263
                  ingresos_acumulables: 115998
                  ingresos_exentos: 2265
                  subsidio_empleo: 0
                servicios_profesionales:
                  deducciones_autorizadas:
                    deducciones_autorizadas: 11870
                    detalle_deducciones:
                      - tipo_deduccion: GASTOS
                        concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
                        monto_detallado: 9682
                      - tipo_deduccion: GASTOS
                        concepto: COMPRAS Y GASTOS GENERALES
                        monto_detallado: 2188
                    total_deducciones_autorizadas: 11870
                  ingresos:
                    ingresos_acumulables: 46000
                    total_ingresos: 46000
                  resultado_fiscal:
                    utilidad_fiscal: 34130
                    ptu_pagada_ejercicio: 0
                    perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
                    utilidad_gravable: 34130
                  pagos_provisionales:
                    pagos_provisionales_efectuados_en_ejercicio: 0
                  retenciones_isr:
                    isr_retenido_personas_morales: 4600
                deducciones_personales:
                  honorarios_medicos_dentales_hospitalarios:
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC444444A44
                      monto_deducible: 1000
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC444444A44
                      monto_deducible: 502.34
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC333333A33
                      monto_deducible: 258.83
                    - rfc_emisor: ABC444444A55
                      monto_deducible: 14183.1
                    - rfc_emisor: ABC444444A66
                      monto_deducible: 1658
                    - rfc_emisor: ABC444444A77
                      monto_deducible: 1600
                    - rfc_emisor: ABC444444A88
                      monto_deducible: 1064
                    - rfc_emisor: ABC444444A99
                      monto_deducible: 927.57
                  donativos:
                    - rfc_emisor: ABC555555A99
                      monto_deducible: 10.03
                  aportaciones_voluntarias_complementarias_al_sar:
                    - rfc_emisor: ABC666666A99
                      monto_deducible: 12.03
                    - rfc_emisor: ABC777777A99
                      monto_deducible: 87.22
                  primas_por_seguros_de_gasto_medico:
                    - rfc_emisor: ABC777777A99
                      monto_deducible: 20.03
                determinacion_impuesto:
                  base_gravable: 126864
                  deducciones_personales: 23264
                  ingresos_acumulables: 150128
                  isr_favorable: 10308
                  isr_conforme_tarifa_final: 13789
                  isr_retenido: 24097
                  num_clabe: '000000000000000001'
                  nombre_banco: BANCO SA
                  pagos_provisionales: 0
                  titular_clabe_permite_verificacion: S√ç
                  accion_saldo_a_favor: DEVOLUCI√ìN
                retenciones:
                  sueldos_salarios:
                    - rfc_retenedor: ABC444444A99
                      monto_retenciones: 118263
                      retenciones_isr: 19497
                  dividendos:
                    key: value
                  servicios_profesionales:
                    - rfc_retenedor: ABC444444A00
                      monto_retenciones: 46000
                      retenciones_isr: 4600
                dividendos:
                  monto_acumulable_dividendos_utilidades:
                    key: value
                  monto_total_isr_pagado_sociedad:
                    key: value
                datos_informativos:
                  credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
                  credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
                  credito_fiscal_autorizado_proyectos_inversion_artes: 0
                  credito_fiscal_autorizado_inversion_equipos_fijos: 0
                  credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
                  saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
                  saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
                  saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
                pdf: '=PDF-STRING='
                receipt_pdf: '=PDF-STRING='
          code-samples:
            - language: cURL
              code: |-
                ### Yearly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "year_from": YYYY,
                    "year_to": YYYY,
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]

                ### Monthly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "2019-01-01",
                    "date_to": "2019-04-01",
                    "type": "monthly",
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >-
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Yearly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  year_from="2019",
                  year_to="2020",
                  attach_pdf=True
                )


                # Monthly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  date_from="2019-01-01",
                  date_to="2019-04-01",
                  attach_pdf=True,
                  type_="monthly"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                # Yearly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'link-id',
                  year_from: "2019",
                  year_to: "2020"
                )

                # Monthly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'some-link-uuid',
                  options: {
                    type: TaxReturnType::MONTHLY,
                    date_from: '2019-01-01',
                    date_to: '2019-04-01',
                  }
                      )
            - name: Belvo Node SDK
              language: node
              code: |-
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                // Yearly Tax Returns
                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019", "2020")
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });

                // Monthly Tax Returns

                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Personal Monthly (PFAE)
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            type: type
            date_from: '2018-01-01'
            date_to: '2019-01-01'
          response:
            body:
              - id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                informacion_general:
                  rfc:
                    key: value
                  nombre:
                    key: value
                  tipo_declaracion:
                    key: value
                  ejercicio:
                    key: value
                  periodo_declaracion:
                    key: value
                  fecha_hora_presentacion:
                    key: value
                  numero_operacion:
                    key: value
                isr:
                  tipo: PFAE
                  determinacion:
                    ingresos_periodos_anteriores: 0
                    ingresos_periodo: 0
                    total_ingresos: 0
                    compras_gastos_periodos_anteriores: 1596
                    compra_gastos_periodo: 399
                    total_compras_gastos: 1995
                    base_gravable_pago_provisional: 0
                    isr_causado: 0
                    pagos_provisionales_efectuados_anterioridad: 0
                    isr_retenido_periodos_anteriores: 0
                    impuesto_retenido: 0
                    isr_cargo: 0
                  detalle_del_pago:
                    a_cargo: 0
                    parte_actualizada: 0
                    recargos: 0
                    total_contribuciones: 0
                    total_aplicaciones: 0
                    cantidad_a_cargo: 0
                    cantidad_a_pagar: 0
                iva:
                  determinacion:
                    actividades_gravadas_tasa_16: 0
                    actividades_gravadas_tasa_0: 0
                    actividades_exentas: 0
                    iva_cobrado_periodo_tasa_16: 0
                    iva_acreditable_periodo: 0
                    iva_retenido: 0
                  detalle_del_pago:
                    total_contribuciones: 0
                    total_aplicaciones: 0
                    cantidad_a_cargo: 0
                    cantidad_a_pagar: 0
                pdf: '===PDF_BINARY===='
                receipt_pdf: '===PDF_BINARY===='
                type: monthly
          code-samples:
            - language: cURL
              code: |-
                ### Yearly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "year_from": YYYY,
                    "year_to": YYYY,
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]

                ### Monthly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "2019-01-01",
                    "date_to": "2019-04-01",
                    "type": "monthly",
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >-
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Yearly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  year_from="2019",
                  year_to="2020",
                  attach_pdf=True
                )


                # Monthly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  date_from="2019-01-01",
                  date_to="2019-04-01",
                  attach_pdf=True,
                  type_="monthly"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                # Yearly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'link-id',
                  year_from: "2019",
                  year_to: "2020"
                )

                # Monthly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'some-link-uuid',
                  options: {
                    type: TaxReturnType::MONTHLY,
                    date_from: '2019-01-01',
                    date_to: '2019-04-01',
                  }
                      )
            - name: Belvo Node SDK
              language: node
              code: |-
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                // Yearly Tax Returns
                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019", "2020")
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });

                // Monthly Tax Returns

                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Personal Monthly (PFAI)
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            type: type
            date_from: '2018-01-01'
            date_to: '2019-01-01'
          response:
            body:
              - id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                informacion_general:
                  rfc:
                    key: value
                  nombre:
                    key: value
                  tipo_declaracion:
                    key: value
                  ejercicio:
                    key: value
                  periodo_declaracion:
                    key: value
                  fecha_hora_presentacion:
                    key: value
                  numero_operacion:
                    key: value
                isr:
                  tipo: PFAE
                  determinacion:
                    ingresos_periodos_anteriores: 0
                    ingresos_periodo: 0
                    total_ingresos: 0
                    compras_gastos_periodos_anteriores: 1596
                    compra_gastos_periodo: 399
                    total_compras_gastos: 1995
                    base_gravable_pago_provisional: 0
                    isr_causado: 0
                    pagos_provisionales_efectuados_anterioridad: 0
                    isr_retenido_periodos_anteriores: 0
                    impuesto_retenido: 0
                    isr_cargo: 0
                    tipo_de_deducc√≠on: dedducc√≠on opicional
                    optas_por_el_c√°lculo_acumulado: 'NO'
                    deducc√≠on_opcional: 700
                    impuesto_predial: 0
                    total_deducciones_autorizadas: 700
                    tienes_facilidades_administrativas_o_est√≠mulos_deducibles: 'NO'
                  detalle_del_pago:
                    a_cargo: 0
                    parte_actualizada: 0
                    recargos: 0
                    total_contribuciones: 0
                    total_aplicaciones: 0
                    cantidad_a_cargo: 0
                    cantidad_a_pagar: 0
                iva:
                  determinacion:
                    actividades_gravadas_tasa_16: 0
                    actividades_gravadas_tasa_0: 0
                    actividades_exentas: 0
                    iva_cobrado_periodo_tasa_16: 0
                    iva_acreditable_periodo: 0
                    iva_retenido: 0
                    impuesto_a_cargo: 54
                    cantidad_a_cargo: 54
                  detalle_del_pago:
                    total_contribuciones: 0
                    total_aplicaciones: 0
                    cantidad_a_cargo: 0
                    cantidad_a_pagar: 0
                pdf: '===PDF_BINARY===='
                receipt_pdf: '===PDF_BINARY===='
                type: monthly
          code-samples:
            - language: cURL
              code: |-
                ### Yearly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "year_from": YYYY,
                    "year_to": YYYY,
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]

                ### Monthly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "2019-01-01",
                    "date_to": "2019-04-01",
                    "type": "monthly",
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >-
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Yearly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  year_from="2019",
                  year_to="2020",
                  attach_pdf=True
                )


                # Monthly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  date_from="2019-01-01",
                  date_to="2019-04-01",
                  attach_pdf=True,
                  type_="monthly"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                # Yearly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'link-id',
                  year_from: "2019",
                  year_to: "2020"
                )

                # Monthly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'some-link-uuid',
                  options: {
                    type: TaxReturnType::MONTHLY,
                    date_from: '2019-01-01',
                    date_to: '2019-04-01',
                  }
                      )
            - name: Belvo Node SDK
              language: node
              code: |-
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                // Yearly Tax Returns
                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019", "2020")
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });

                // Monthly Tax Returns

                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Business
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            type: type
            date_from: '2018-01-01'
            date_to: '2019-01-01'
          response:
            body:
              - id: 02589c41-ba22-4d44-8558-8111cc751318
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                informacion_general:
                  ejercicio: 2018
                  fecha_hora_presentacion: '2020-01-07T16:55:00-06:00'
                  numero_operacion: '000000000001'
                  periodo_declaracion: Del Ejercicio
                  rfc: ABC1111111A1
                  tipo_declaracion: Normal
                  tipo_complementaria:
                    key: value
                  denominacion_razon_social: ACME CORP
                datos_adicionales:
                  indica_si_optas_por_dictaminar_tus_estados_financieros: 'NO'
                  estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: 'NO'
                  estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN SELECCI√ìN
                  estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN SELECCI√ìN
                  optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCI√ìN
                  indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: 'NO'
                estado_resultados:
                  ventas_servicios_nacionales:
                    partes_no_relacionadas: 911165
                    total: 911165
                  ventas_servicios_extranjero: {}
                  devoluciones_descuentos_bonificaciones_ventas_nacionales: {}
                  devoluciones_descuentos_bonificaciones_ventas_extranjero: {}
                  ingresos_netos:
                    partes_no_relacionadas: 911165
                    total: 911165
                  inventario_inicial:
                    key: value
                  compras_netas_nacionales: {}
                  compras_netas_importacion: {}
                  inventario_final:
                    key: value
                  costo_mercancias:
                    key: value
                  mano_de_obra: {}
                  maquilas: {}
                  gastos_indirectos_fabricacion: {}
                  costo_ventas_servicios:
                    key: value
                  utilidad_bruta: 911165
                  perdida_bruta:
                    key: value
                  gastos_operacion:
                    partes_no_relacionadas: 499540
                    total: 499540
                  utilidad_operacion: 411625
                  perdida_operacion:
                    key: value
                  intereses_devengados_a_favor_nacionales: {}
                  intereses_devengados_a_favor_extranjero: {}
                  intereses_moratorios_a_favor_nacionales: {}
                  intereses_moratorios_a_favor_extranjero: {}
                  ganancia_cambiaria: {}
                  intereses_devengados_a_cargo_nacionales: {}
                  intereses_devengados_a_cargo_extranjero: {}
                  intereses_moratorios_a_cargo_nacionales: {}
                  intereses_moratorios_a_cargo_extranjero: {}
                  perdida_cambiaria: {}
                  resultado_posicion_monetaria_favorable: {}
                  resultado_posicion_monetaria_desfavorable: {}
                  otras_operaciones_financieras_nacionales: {}
                  otras_operaciones_financieras_extranjero: {}
                  otras_operaciones_financieras:
                    key: value
                  resultado_integral_financiamiento:
                    key: value
                  otros_gastos_nacionales:
                    key: value
                  otros_gastos_extranjero:
                    key: value
                  otros_gastos:
                    key: value
                  otros_productos_nacionales:
                    key: value
                  otros_productos_extranjero:
                    key: value
                  otros_productos:
                    key: value
                  ingresos_partidas_discontinuas_extraordinarias:
                    key: value
                  gastos_partidas_discontinuas_extraordinarias:
                    key: value
                  utilidad_antes_impuesto: 411625
                  perdida_antes_impuesto:
                    key: value
                  isr: 113002
                  ietu:
                    key: value
                  impac:
                    key: value
                  ptu:
                    key: value
                  utilidad_participacion_subsidiaria:
                    key: value
                  perdida_participacion_subsidiaria:
                    key: value
                  efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria:
                    key: value
                  efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria:
                    key: value
                  utilidad_neta: 298623
                  perdida_neta:
                    key: value
                estado_posicion_financiera_balance:
                  activo:
                    efectivo_caja_depositos_instituciones_credito_nacionales: 726644
                    cuentas_documentos_por_cobrar_nacionales: {}
                    cuentas_documentos_por_cobrar_extranjero: {}
                    otros_activos_circulantes: 13277
                    otros_activos_fijos: 12756
                    depreciacion_acumulada: -106
                    cargos_y_gastos_diferidos: 9319
                    suma_activo: 761890
                  pasivo:
                    cuentas_documentos_por_pagar_nacionales:
                      partes_no_relacionadas: 268227
                      total: 268227
                    cuentas_documentos_por_pagar_extranjero: {}
                    contribuciones_por_pagar: 223490
                    anticipos_de_clientes: {}
                    suma_pasivo: 491717
                  capital_contable:
                    capital_social_proveniente_aportaciones: 10000
                    utilidad_del_ejercicio: 298623
                    perdidas_acumuladas: -38450
                    suma_capital_contable: 270173
                    suma_pasivo_mas_capital_contable: 761890
                conciliacion_entre_resultado_contable_fiscal:
                  utilidad_o_perdida_neta: 298623
                  efectos_reexpresion:
                    key: value
                  resultado_posicion_monetaria:
                    key: value
                  utilidad_o_perdida_neta_historica: 298623
                  ingresos_fiscales_no_contables: 95
                  ajuste_anual_inflacion_acumulable: 95
                  anticipos_de_clientes:
                    key: value
                  intereses_moratorios_efectivamente_cobrados:
                    key: value
                  ganancia_en_enajenacion_acciones_por_reembolso_capital:
                    key: value
                  ganancia_en_enajenacion_de_terrenos_y_activo_fijo:
                    key: value
                  inventario_acumulable_del_ejercicio:
                    key: value
                  otros_ingresos_fiscales_no_contables:
                    key: value
                  deducciones_contables_no_fiscales: 117415
                  costo_de_ventas_contable:
                    key: value
                  depreciacion_y_amortizacion_contable: 106
                  gastos_que_no_reunen_requisitos_fiscales: 4307
                  isr_ietu_impac_ptu: 113002
                  perdida_contable_enajenacion_de_acciones:
                    key: value
                  perdida_contable_enajenacion_de_activo_fijo:
                    key: value
                  perdida_en_participacion_subsidiaria:
                    key: value
                  intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
                  otras_deducciones_contables_no_fiscales: 0
                  deducciones_fiscales_no_contables: 0
                  ajuste_anual_inflacion_deducible:
                    key: value
                  costo_vendido_fiscal:
                    key: value
                  deduccion_inversiones:
                    key: value
                  estimulo_fiscal_por_deduccion_inmediata_inversiones:
                    key: value
                  donacion_bienes_basicos_subsistencia_humana: 0
                  estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
                  deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
                  perdida_fiscal_en_enajenacion_acciones:
                    key: value
                  perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo:
                    key: value
                  intereses_moratorios_efectivamente_pagados:
                    key: value
                  otras_deducciones_fiscales_no_contables:
                    key: value
                  ingresos_contables_no_fiscales:
                    key: value
                  intereses_moratorios_devengados_a_favor_cobrados_o_no:
                    key: value
                  anticipos_de_clientes_ejercicios_anteriores:
                    key: value
                  saldos_a_favor_impuestos_y_su_actualizacion:
                    key: value
                  utilidad_contable_enajenacion_de_activo_fijo:
                    key: value
                  utilidad_contable_enajenacion_de_acciones:
                    key: value
                  utilidad_en_participacion_subsidiaria:
                    key: value
                  otros_ingresos_contables_no_fiscales:
                    key: value
                  utilidad_o_perdida_fiscal_antes_de_ptu: 416133
                deducciones_autorizadas:
                  sueldos_salarios:
                    key: value
                  honorarios_pagados_a_personas_fisicas:
                    key: value
                  regalias_y_asistencia_tecnica:
                    key: value
                  donativos_otorgados:
                    key: value
                  uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas:
                    key: value
                  fletes_y_acarreos_pagados_a_parsonas_fisicas:
                    key: value
                  contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps:
                    key: value
                  seguros_fianzas:
                    key: value
                  perdida_por_creditos_incobrables:
                    key: value
                  viaticos_y_gastos_viaje: 59527
                  combustible_y_lubricantes:
                    key: value
                  credito_al_salario_no_disminuido_de_contribuciones:
                    key: value
                  aportaciones_sar_infonavit_y_jubilaciones_vejez:
                    key: value
                  aportaciones_para_fondos_de_pensiones_y_jubilaciones:
                    key: value
                  cuotas_imss:
                    key: value
                  consumos_en_restaurantes: 11254
                  perdida_por_operaciones_financieras_derivadas:
                    key: value
                  deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores:
                    key: value
                  monto_total_pagos_que_sean_ingresos_exentos_para_trabajador:
                    key: value
                  monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador:
                    key: value
                  monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador:
                    key: value
                  uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno:
                    key: value
                  otras_deducciones_autorizadas: 424346
                  total_deducciones_autorizadas: 495127
                cifras_cierre_ejercicio:
                  perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas:
                    key: value
                  saldo_promedio_anual_de_creditos: 142795
                  saldo_promedio_anual_de_deudas: 144765
                  coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
                  porcentaje_de_participacion_consolidable:
                    key: value
                  isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar:
                    key: value
                  saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores:
                    key: value
                  saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores:
                    key: value
                  saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida:
                    key: value
                  saldo_actualizado_de_cuenta_de_capital_de_aportacion:
                    key: value
                  saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables:
                    key: value
                determinacion_del_impuesto_sobre_la_renta:
                  determinacion_del_impuesto_sobre_la_renta:
                    total_ingresos_acumulables: 911260
                    total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
                    utilidad_o_perdida_fiscal_antes_de_ptu: 416134
                    utilidad_fiscal_del_ejercicio: 416134
                    perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
                    resultado_fiscal: 376672
                    impuesto_causado_en_ejercicio: 113002
                    tienes_estimulos_fiscales_a_acreditar: SIN SELECCI√ìN
                    impuesto_sobre_la_renta_del_ejercicio: 113002
                    diferencia_a_cargo: 113002
                    isr_a_cargo_del_ejercicio: 113002
                  impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes:
                    key: value
                  datos_informativos_ejercicio:
                    monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
                    monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
                    impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
                    ingresos_obtenidos_por_apoyos_gubernamentales: 0
                    gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
                    credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
                    credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
                    credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
                    saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
                    credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
                  datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
                    saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar: 0
                    saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
                    saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
                    saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
                dividendos_o_utilidades_distribuidos:
                  provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores:
                    key: value
                  provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014:
                    key: value
                  provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre:
                    key: value
                  no_provenientes_de_cufin_ni_cufinre_en_efectivo:
                    key: value
                  no_provenientes_de_cufin_ni_cufinre_en_acciones:
                    key: value
                  monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre:
                    key: value
                  monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre:
                    key: value
                  provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente:
                    key: value
                detalle_pago_r1_isr_personas_morales:
                  a_cargo: 113002
                  parte_actualizada:
                    key: value
                  recargos:
                    key: value
                  multa_por_correccion:
                    key: value
                  total_contribuciones: 113002
                  desea_aplicar_alguna_compensacion_o_estimulo: 'NO'
                  cantidad_a_cargo: 113002
                  opta_por_pagar_parcialidades: SIN SELECCI√ìN
                  importe_de_primera_parcialidad:
                    key: value
                  importe_sin_primera_parcialidad:
                    key: value
                  cantidad_a_favor:
                    key: value
                  cantidad_a_pagar: 113002
                pdf: '=PDF-STRING='
                receipt_pdf: '=PDF-STRING='
                link: 19697249-01b8-443e-a451-76bfc5fbeebf
          code-samples:
            - language: cURL
              code: |-
                ### Yearly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "year_from": YYYY,
                    "year_to": YYYY,
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]

                ### Monthly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "2019-01-01",
                    "date_to": "2019-04-01",
                    "type": "monthly",
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >-
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Yearly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  year_from="2019",
                  year_to="2020",
                  attach_pdf=True
                )


                # Monthly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  date_from="2019-01-01",
                  date_to="2019-04-01",
                  attach_pdf=True,
                  type_="monthly"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                # Yearly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'link-id',
                  year_from: "2019",
                  year_to: "2020"
                )

                # Monthly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'some-link-uuid',
                  options: {
                    type: TaxReturnType::MONTHLY,
                    date_from: '2019-01-01',
                    date_to: '2019-04-01',
                  }
                      )
            - name: Belvo Node SDK
              language: node
              code: |-
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                // Yearly Tax Returns
                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019", "2020")
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });

                // Monthly Tax Returns

                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Business Monthly
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
            type: type
            date_from: '2018-01-01'
            date_to: '2019-01-01'
          response:
            body:
              - id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                informacion_general:
                  rfc: DPA950805RR2
                  denominacion_razon_social: Aloha Mahalo SC
                  tipo_declaracion: Normal
                  ejercicio: 2020
                  periodo_declaracion: Diciembre
                  fecha_hora_presentacion: '2021-01-18T19:24:00-06:00'
                  numero_operacion: '400475119'
                  tipo_complementaria:
                    key: value
                determinacion_isr:
                  personas_morales_regimen_general:
                    suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
                    ingresos_nominales_mes_que_declara: 6482479
                    total_ingresos_nominales: 76330893
                    impuestos_del_periodo: 284098
                    coeficiente_utilidad: 0.2318
                    pagos_provisionales_efectuados_anterioridad: 303039
                    utilidad_fiscal_pago_provisional: 17693501
                    impuesto_retenido: 29925
                    anticipos_rendimientos_distribuidos_periodo: 16746509
                    diferencia_a_cargo: 0
                    base_gravable_pago_provisional: 946992
                    impuesto_a_cargo: 0
                    isr_causado: 284098
                detalle_pago_isr:
                  r1_isr_personas_morales:
                    a_cargo: 0
                    total_aplicaciones: 0
                    total_de_contribuciones: 0
                    cantidad_a_cargo: 0
                    aplica_primera_parcialidad: 'NO'
                    cantidad_a_pagar: 0
                  r12_isr_retenciones_por_salarios:
                    a_cargo: 415945
                    parte_actualizada: 0
                    recargos: 0
                    total_aplicaciones: 379
                    total_de_contribuciones: 415945
                    subsidio_empleo: 379
                    cantidad_a_cargo: 415566
                    aplica_primera_parcialidad: 'NO'
                    cantidad_a_pagar: 415566
                  r13_isr_retenciones_por_asimilados_a_salarios:
                    a_cargo: 254588
                    parte_actualizada: 0
                    recargos: 0
                    total_aplicaciones: 0
                    total_de_contribuciones: 254588
                    cantidad_a_cargo: 254588
                    aplica_primera_parcialidad: 'NO'
                    cantidad_a_pagar: 254588
                  r14_isr_retenciones_por_servicios_profesionales:
                    a_cargo: 104482
                    parte_actualizada: 0
                    recargos: 0
                    total_aplicaciones: 0
                    total_de_contribuciones: 104482
                    cantidad_a_cargo: 104482
                    aplica_primera_parcialidad: 'NO'
                    cantidad_a_pagar: 104482
                determinacion_iva:
                  montos_actos_actividades_pagados:
                    total_actos_actividades_pagados_tasa_16: 2094706
                    total_actos_actividades_sujetos_estimulo_rfn: 0
                    total_actos_actividades_pagados_tasa_0: 0
                    total_actos_actividades_pagados_no_paga_iva: 0
                  detalle_total_actos_actividades_pagados_tasa_16:
                    otros_actos_pagados_tasa_16: 2094706
                    total_actos_pagados_tasa_16: 2094706
                  determinacion_iva_acreditable:
                    total_iva_actos_actividades_pagados_tasa_16: 335153
                    total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
                    iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
                    total_iva_trasladado_contribuyente: 335153
                    iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
                    iva_acreditable: 335153
                    total_iva_acreditable_periodo: 335153
                    total_iva_actos_actividades_gravados: 335153
                  determinacion_iva:
                    valor_actos_actividades_gravados_tasa_16: 6457950
                    cantidad_a_cargo: 312421
                    suma_actos_actividades_gravados: 6457950
                    saldo_a_favor_periodo: 0
                    impuesto_causado: 1033272
                    diferencia_a_cargo: 312421
                    iva_retenido_al_contribuyente: 385698
                    impuesto_a_cargo: 312421
                    total_iva_acreditable: 335153
                  detalle_valor_actos_actividades_gravados_tasa_16:
                    otros_actos_actividades_gravados_tasa_16: 6457950
                    total_actos_actividades_gravados_tasa_16: 6457950
                detalle_pago_iva:
                  r21_iva:
                    a_cargo: 312421
                    parte_actualizada: 0
                    total_aplicaciones: 0
                    recargos: 0
                    total_de_contribuciones: 312421
                    cantidad_a_cargo: 312421
                    aplica_primera_parcialidad: 'NO'
                    cantidad_a_pagar: 312421
                  r21_iva_retenciones:
                    a_cargo: 111448
                    parte_actualizada: 0
                    total_aplicaciones: 0
                    recargos: 0
                    total_de_contribuciones: 111448
                    cantidad_a_cargo: 111448
                    aplica_primera_parcialidad: 'NO'
                    cantidad_a_pagar: 111448
                pdf: '===PDF_BINARY===='
                receipt_pdf: '===PDF_BINARY===='
                type: monthly
          code-samples:
            - language: cURL
              code: |-
                ### Yearly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "year_from": YYYY,
                    "year_to": YYYY,
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]

                ### Monthly Tax Returns
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-returns/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "date_from": "2019-01-01",
                    "date_to": "2019-04-01",
                    "type": "monthly",
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >-
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Yearly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  year_from="2019",
                  year_to="2020",
                  attach_pdf=True
                )


                # Monthly Tax Returns

                tax_returns = client.TaxReturns.create(
                  link="link_id",
                  date_from="2019-01-01",
                  date_to="2019-04-01",
                  attach_pdf=True,
                  type_="monthly"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                # Yearly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'link-id',
                  year_from: "2019",
                  year_to: "2020"
                )

                # Monthly Tax Returns
                sandbox.tax_returns.retrieve(
                  link: 'some-link-uuid',
                  options: {
                    type: TaxReturnType::MONTHLY,
                    date_from: '2019-01-01',
                    date_to: '2019-04-01',
                  }
                      )
            - name: Belvo Node SDK
              language: node
              code: |-
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                // Yearly Tax Returns
                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019", "2020")
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });

                // Monthly Tax Returns

                client.connect()
                  .then(function () {
                    client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailTaxReturn:
      path: /api/tax-returns/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific tax return.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `tax-return.id` you want to get detailed information about.
      display-name: Get a tax return's details
      request:
        name: DetailTaxReturnRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: DetailTaxReturnResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: Tax Return Personal
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 02589c41-ba22-4d44-8558-8111cc751318
              link: 19697249-01b8-443e-a451-76bfc5fbeebf
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              informacion_general:
                ejercicio: 2018
                fecha_hora_presentacion: '2020-01-07T17:28:00-05:00'
                numero_operacion: '00000000001'
                periodo_declaracion: Del Ejercicio
                rfc: ABCD111111A11
                tipo_declaracion: Normal
                nombre: JOHN DOE
              sueldos_salarios:
                retenedores:
                  - rfc_retenedor: ABCD222222A22
                    nombre_denominacion_razon_social: ACME CORP
                    ingresos_exentos: 118263
                    ingreso_anual: 2265
                    subsidio_empleo: 0
                impuesto_retenido: 19497
                ingreso_anual: 118263
                ingresos_acumulables: 115998
                ingresos_exentos: 2265
                subsidio_empleo: 0
              servicios_profesionales:
                deducciones_autorizadas:
                  deducciones_autorizadas: 11870
                  detalle_deducciones:
                    - tipo_deduccion: GASTOS
                      concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
                      monto_detallado: 9682
                    - tipo_deduccion: GASTOS
                      concepto: COMPRAS Y GASTOS GENERALES
                      monto_detallado: 2188
                  total_deducciones_autorizadas: 11870
                ingresos:
                  ingresos_acumulables: 46000
                  total_ingresos: 46000
                resultado_fiscal:
                  utilidad_fiscal: 34130
                  ptu_pagada_ejercicio: 0
                  perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
                  utilidad_gravable: 34130
                pagos_provisionales:
                  pagos_provisionales_efectuados_en_ejercicio: 0
                retenciones_isr:
                  isr_retenido_personas_morales: 4600
              deducciones_personales:
                honorarios_medicos_dentales_hospitalarios:
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC444444A44
                    monto_deducible: 1000
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC444444A44
                    monto_deducible: 502.34
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC333333A33
                    monto_deducible: 258.83
                  - rfc_emisor: ABC444444A55
                    monto_deducible: 14183.1
                  - rfc_emisor: ABC444444A66
                    monto_deducible: 1658
                  - rfc_emisor: ABC444444A77
                    monto_deducible: 1600
                  - rfc_emisor: ABC444444A88
                    monto_deducible: 1064
                  - rfc_emisor: ABC444444A99
                    monto_deducible: 927.57
                donativos:
                  - rfc_emisor: ABC555555A99
                    monto_deducible: 10.03
                aportaciones_voluntarias_complementarias_al_sar:
                  - rfc_emisor: ABC666666A99
                    monto_deducible: 12.03
                  - rfc_emisor: ABC777777A99
                    monto_deducible: 87.22
                primas_por_seguros_de_gasto_medico:
                  - rfc_emisor: ABC777777A99
                    monto_deducible: 20.03
              determinacion_impuesto:
                base_gravable: 126864
                deducciones_personales: 23264
                ingresos_acumulables: 150128
                isr_favorable: 10308
                isr_conforme_tarifa_final: 13789
                isr_retenido: 24097
                num_clabe: '000000000000000001'
                nombre_banco: BANCO SA
                pagos_provisionales: 0
                titular_clabe_permite_verificacion: S√ç
                accion_saldo_a_favor: DEVOLUCI√ìN
              retenciones:
                sueldos_salarios:
                  - rfc_retenedor: ABC444444A99
                    monto_retenciones: 118263
                    retenciones_isr: 19497
                dividendos:
                  key: value
                servicios_profesionales:
                  - rfc_retenedor: ABC444444A00
                    monto_retenciones: 46000
                    retenciones_isr: 4600
              dividendos:
                monto_acumulable_dividendos_utilidades:
                  key: value
                monto_total_isr_pagado_sociedad:
                  key: value
              datos_informativos:
                credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
                credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
                credito_fiscal_autorizado_proyectos_inversion_artes: 0
                credito_fiscal_autorizado_inversion_equipos_fijos: 0
                credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
                saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
                saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
                saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
              pdf: '=PDF-STRING='
              receipt_pdf: '=PDF-STRING='
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a tax return

                tax_return = client.TaxReturns.get(id="tax-return-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.detail id: 'tax-return-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.detail('taxReturnId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Personal Monthly (PFAE)
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              informacion_general:
                rfc:
                  key: value
                nombre:
                  key: value
                tipo_declaracion:
                  key: value
                ejercicio:
                  key: value
                periodo_declaracion:
                  key: value
                fecha_hora_presentacion:
                  key: value
                numero_operacion:
                  key: value
              isr:
                tipo: PFAE
                determinacion:
                  ingresos_periodos_anteriores: 0
                  ingresos_periodo: 0
                  total_ingresos: 0
                  compras_gastos_periodos_anteriores: 1596
                  compra_gastos_periodo: 399
                  total_compras_gastos: 1995
                  base_gravable_pago_provisional: 0
                  isr_causado: 0
                  pagos_provisionales_efectuados_anterioridad: 0
                  isr_retenido_periodos_anteriores: 0
                  impuesto_retenido: 0
                  isr_cargo: 0
                detalle_del_pago:
                  a_cargo: 0
                  parte_actualizada: 0
                  recargos: 0
                  total_contribuciones: 0
                  total_aplicaciones: 0
                  cantidad_a_cargo: 0
                  cantidad_a_pagar: 0
              iva:
                determinacion:
                  actividades_gravadas_tasa_16: 0
                  actividades_gravadas_tasa_0: 0
                  actividades_exentas: 0
                  iva_cobrado_periodo_tasa_16: 0
                  iva_acreditable_periodo: 0
                  iva_retenido: 0
                detalle_del_pago:
                  total_contribuciones: 0
                  total_aplicaciones: 0
                  cantidad_a_cargo: 0
                  cantidad_a_pagar: 0
              pdf: '===PDF_BINARY===='
              receipt_pdf: '===PDF_BINARY===='
              type: monthly
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a tax return

                tax_return = client.TaxReturns.get(id="tax-return-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.detail id: 'tax-return-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.detail('taxReturnId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Personal Monthly (PFAI)
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              informacion_general:
                rfc:
                  key: value
                nombre:
                  key: value
                tipo_declaracion:
                  key: value
                ejercicio:
                  key: value
                periodo_declaracion:
                  key: value
                fecha_hora_presentacion:
                  key: value
                numero_operacion:
                  key: value
              isr:
                tipo: PFAE
                determinacion:
                  ingresos_periodos_anteriores: 0
                  ingresos_periodo: 0
                  total_ingresos: 0
                  compras_gastos_periodos_anteriores: 1596
                  compra_gastos_periodo: 399
                  total_compras_gastos: 1995
                  base_gravable_pago_provisional: 0
                  isr_causado: 0
                  pagos_provisionales_efectuados_anterioridad: 0
                  isr_retenido_periodos_anteriores: 0
                  impuesto_retenido: 0
                  isr_cargo: 0
                  tipo_de_deducc√≠on: dedducc√≠on opicional
                  optas_por_el_c√°lculo_acumulado: 'NO'
                  deducc√≠on_opcional: 700
                  impuesto_predial: 0
                  total_deducciones_autorizadas: 700
                  tienes_facilidades_administrativas_o_est√≠mulos_deducibles: 'NO'
                detalle_del_pago:
                  a_cargo: 0
                  parte_actualizada: 0
                  recargos: 0
                  total_contribuciones: 0
                  total_aplicaciones: 0
                  cantidad_a_cargo: 0
                  cantidad_a_pagar: 0
              iva:
                determinacion:
                  actividades_gravadas_tasa_16: 0
                  actividades_gravadas_tasa_0: 0
                  actividades_exentas: 0
                  iva_cobrado_periodo_tasa_16: 0
                  iva_acreditable_periodo: 0
                  iva_retenido: 0
                  impuesto_a_cargo: 54
                  cantidad_a_cargo: 54
                detalle_del_pago:
                  total_contribuciones: 0
                  total_aplicaciones: 0
                  cantidad_a_cargo: 0
                  cantidad_a_pagar: 0
              pdf: '===PDF_BINARY===='
              receipt_pdf: '===PDF_BINARY===='
              type: monthly
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a tax return

                tax_return = client.TaxReturns.get(id="tax-return-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.detail id: 'tax-return-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.detail('taxReturnId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Business
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 02589c41-ba22-4d44-8558-8111cc751318
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              informacion_general:
                ejercicio: 2018
                fecha_hora_presentacion: '2020-01-07T16:55:00-06:00'
                numero_operacion: '000000000001'
                periodo_declaracion: Del Ejercicio
                rfc: ABC1111111A1
                tipo_declaracion: Normal
                tipo_complementaria:
                  key: value
                denominacion_razon_social: ACME CORP
              datos_adicionales:
                indica_si_optas_por_dictaminar_tus_estados_financieros: 'NO'
                estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: 'NO'
                estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN SELECCI√ìN
                estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN SELECCI√ìN
                optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCI√ìN
                indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: 'NO'
              estado_resultados:
                ventas_servicios_nacionales:
                  partes_no_relacionadas: 911165
                  total: 911165
                ventas_servicios_extranjero: {}
                devoluciones_descuentos_bonificaciones_ventas_nacionales: {}
                devoluciones_descuentos_bonificaciones_ventas_extranjero: {}
                ingresos_netos:
                  partes_no_relacionadas: 911165
                  total: 911165
                inventario_inicial:
                  key: value
                compras_netas_nacionales: {}
                compras_netas_importacion: {}
                inventario_final:
                  key: value
                costo_mercancias:
                  key: value
                mano_de_obra: {}
                maquilas: {}
                gastos_indirectos_fabricacion: {}
                costo_ventas_servicios:
                  key: value
                utilidad_bruta: 911165
                perdida_bruta:
                  key: value
                gastos_operacion:
                  partes_no_relacionadas: 499540
                  total: 499540
                utilidad_operacion: 411625
                perdida_operacion:
                  key: value
                intereses_devengados_a_favor_nacionales: {}
                intereses_devengados_a_favor_extranjero: {}
                intereses_moratorios_a_favor_nacionales: {}
                intereses_moratorios_a_favor_extranjero: {}
                ganancia_cambiaria: {}
                intereses_devengados_a_cargo_nacionales: {}
                intereses_devengados_a_cargo_extranjero: {}
                intereses_moratorios_a_cargo_nacionales: {}
                intereses_moratorios_a_cargo_extranjero: {}
                perdida_cambiaria: {}
                resultado_posicion_monetaria_favorable: {}
                resultado_posicion_monetaria_desfavorable: {}
                otras_operaciones_financieras_nacionales: {}
                otras_operaciones_financieras_extranjero: {}
                otras_operaciones_financieras:
                  key: value
                resultado_integral_financiamiento:
                  key: value
                otros_gastos_nacionales:
                  key: value
                otros_gastos_extranjero:
                  key: value
                otros_gastos:
                  key: value
                otros_productos_nacionales:
                  key: value
                otros_productos_extranjero:
                  key: value
                otros_productos:
                  key: value
                ingresos_partidas_discontinuas_extraordinarias:
                  key: value
                gastos_partidas_discontinuas_extraordinarias:
                  key: value
                utilidad_antes_impuesto: 411625
                perdida_antes_impuesto:
                  key: value
                isr: 113002
                ietu:
                  key: value
                impac:
                  key: value
                ptu:
                  key: value
                utilidad_participacion_subsidiaria:
                  key: value
                perdida_participacion_subsidiaria:
                  key: value
                efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria:
                  key: value
                efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria:
                  key: value
                utilidad_neta: 298623
                perdida_neta:
                  key: value
              estado_posicion_financiera_balance:
                activo:
                  efectivo_caja_depositos_instituciones_credito_nacionales: 726644
                  cuentas_documentos_por_cobrar_nacionales: {}
                  cuentas_documentos_por_cobrar_extranjero: {}
                  otros_activos_circulantes: 13277
                  otros_activos_fijos: 12756
                  depreciacion_acumulada: -106
                  cargos_y_gastos_diferidos: 9319
                  suma_activo: 761890
                pasivo:
                  cuentas_documentos_por_pagar_nacionales:
                    partes_no_relacionadas: 268227
                    total: 268227
                  cuentas_documentos_por_pagar_extranjero: {}
                  contribuciones_por_pagar: 223490
                  anticipos_de_clientes: {}
                  suma_pasivo: 491717
                capital_contable:
                  capital_social_proveniente_aportaciones: 10000
                  utilidad_del_ejercicio: 298623
                  perdidas_acumuladas: -38450
                  suma_capital_contable: 270173
                  suma_pasivo_mas_capital_contable: 761890
              conciliacion_entre_resultado_contable_fiscal:
                utilidad_o_perdida_neta: 298623
                efectos_reexpresion:
                  key: value
                resultado_posicion_monetaria:
                  key: value
                utilidad_o_perdida_neta_historica: 298623
                ingresos_fiscales_no_contables: 95
                ajuste_anual_inflacion_acumulable: 95
                anticipos_de_clientes:
                  key: value
                intereses_moratorios_efectivamente_cobrados:
                  key: value
                ganancia_en_enajenacion_acciones_por_reembolso_capital:
                  key: value
                ganancia_en_enajenacion_de_terrenos_y_activo_fijo:
                  key: value
                inventario_acumulable_del_ejercicio:
                  key: value
                otros_ingresos_fiscales_no_contables:
                  key: value
                deducciones_contables_no_fiscales: 117415
                costo_de_ventas_contable:
                  key: value
                depreciacion_y_amortizacion_contable: 106
                gastos_que_no_reunen_requisitos_fiscales: 4307
                isr_ietu_impac_ptu: 113002
                perdida_contable_enajenacion_de_acciones:
                  key: value
                perdida_contable_enajenacion_de_activo_fijo:
                  key: value
                perdida_en_participacion_subsidiaria:
                  key: value
                intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
                otras_deducciones_contables_no_fiscales: 0
                deducciones_fiscales_no_contables: 0
                ajuste_anual_inflacion_deducible:
                  key: value
                costo_vendido_fiscal:
                  key: value
                deduccion_inversiones:
                  key: value
                estimulo_fiscal_por_deduccion_inmediata_inversiones:
                  key: value
                donacion_bienes_basicos_subsistencia_humana: 0
                estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
                deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
                perdida_fiscal_en_enajenacion_acciones:
                  key: value
                perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo:
                  key: value
                intereses_moratorios_efectivamente_pagados:
                  key: value
                otras_deducciones_fiscales_no_contables:
                  key: value
                ingresos_contables_no_fiscales:
                  key: value
                intereses_moratorios_devengados_a_favor_cobrados_o_no:
                  key: value
                anticipos_de_clientes_ejercicios_anteriores:
                  key: value
                saldos_a_favor_impuestos_y_su_actualizacion:
                  key: value
                utilidad_contable_enajenacion_de_activo_fijo:
                  key: value
                utilidad_contable_enajenacion_de_acciones:
                  key: value
                utilidad_en_participacion_subsidiaria:
                  key: value
                otros_ingresos_contables_no_fiscales:
                  key: value
                utilidad_o_perdida_fiscal_antes_de_ptu: 416133
              deducciones_autorizadas:
                sueldos_salarios:
                  key: value
                honorarios_pagados_a_personas_fisicas:
                  key: value
                regalias_y_asistencia_tecnica:
                  key: value
                donativos_otorgados:
                  key: value
                uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas:
                  key: value
                fletes_y_acarreos_pagados_a_parsonas_fisicas:
                  key: value
                contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps:
                  key: value
                seguros_fianzas:
                  key: value
                perdida_por_creditos_incobrables:
                  key: value
                viaticos_y_gastos_viaje: 59527
                combustible_y_lubricantes:
                  key: value
                credito_al_salario_no_disminuido_de_contribuciones:
                  key: value
                aportaciones_sar_infonavit_y_jubilaciones_vejez:
                  key: value
                aportaciones_para_fondos_de_pensiones_y_jubilaciones:
                  key: value
                cuotas_imss:
                  key: value
                consumos_en_restaurantes: 11254
                perdida_por_operaciones_financieras_derivadas:
                  key: value
                deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores:
                  key: value
                monto_total_pagos_que_sean_ingresos_exentos_para_trabajador:
                  key: value
                monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador:
                  key: value
                monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador:
                  key: value
                uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno:
                  key: value
                otras_deducciones_autorizadas: 424346
                total_deducciones_autorizadas: 495127
              cifras_cierre_ejercicio:
                perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas:
                  key: value
                saldo_promedio_anual_de_creditos: 142795
                saldo_promedio_anual_de_deudas: 144765
                coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
                porcentaje_de_participacion_consolidable:
                  key: value
                isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar:
                  key: value
                saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores:
                  key: value
                saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores:
                  key: value
                saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida:
                  key: value
                saldo_actualizado_de_cuenta_de_capital_de_aportacion:
                  key: value
                saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables:
                  key: value
              determinacion_del_impuesto_sobre_la_renta:
                determinacion_del_impuesto_sobre_la_renta:
                  total_ingresos_acumulables: 911260
                  total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
                  utilidad_o_perdida_fiscal_antes_de_ptu: 416134
                  utilidad_fiscal_del_ejercicio: 416134
                  perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
                  resultado_fiscal: 376672
                  impuesto_causado_en_ejercicio: 113002
                  tienes_estimulos_fiscales_a_acreditar: SIN SELECCI√ìN
                  impuesto_sobre_la_renta_del_ejercicio: 113002
                  diferencia_a_cargo: 113002
                  isr_a_cargo_del_ejercicio: 113002
                impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes:
                  key: value
                datos_informativos_ejercicio:
                  monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
                  monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
                  impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
                  ingresos_obtenidos_por_apoyos_gubernamentales: 0
                  gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
                  credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
                  credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
                  credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
                  saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
                  credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
                datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
                  saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar: 0
                  saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
                  saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
                  saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
              dividendos_o_utilidades_distribuidos:
                provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores:
                  key: value
                provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014:
                  key: value
                provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre:
                  key: value
                no_provenientes_de_cufin_ni_cufinre_en_efectivo:
                  key: value
                no_provenientes_de_cufin_ni_cufinre_en_acciones:
                  key: value
                monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre:
                  key: value
                monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre:
                  key: value
                provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente:
                  key: value
              detalle_pago_r1_isr_personas_morales:
                a_cargo: 113002
                parte_actualizada:
                  key: value
                recargos:
                  key: value
                multa_por_correccion:
                  key: value
                total_contribuciones: 113002
                desea_aplicar_alguna_compensacion_o_estimulo: 'NO'
                cantidad_a_cargo: 113002
                opta_por_pagar_parcialidades: SIN SELECCI√ìN
                importe_de_primera_parcialidad:
                  key: value
                importe_sin_primera_parcialidad:
                  key: value
                cantidad_a_favor:
                  key: value
                cantidad_a_pagar: 113002
              pdf: '=PDF-STRING='
              receipt_pdf: '=PDF-STRING='
              link: 19697249-01b8-443e-a451-76bfc5fbeebf
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a tax return

                tax_return = client.TaxReturns.get(id="tax-return-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.detail id: 'tax-return-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.detail('taxReturnId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Tax Return Business Monthly
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              informacion_general:
                rfc: DPA950805RR2
                denominacion_razon_social: Aloha Mahalo SC
                tipo_declaracion: Normal
                ejercicio: 2020
                periodo_declaracion: Diciembre
                fecha_hora_presentacion: '2021-01-18T19:24:00-06:00'
                numero_operacion: '400475119'
                tipo_complementaria:
                  key: value
              determinacion_isr:
                personas_morales_regimen_general:
                  suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
                  ingresos_nominales_mes_que_declara: 6482479
                  total_ingresos_nominales: 76330893
                  impuestos_del_periodo: 284098
                  coeficiente_utilidad: 0.2318
                  pagos_provisionales_efectuados_anterioridad: 303039
                  utilidad_fiscal_pago_provisional: 17693501
                  impuesto_retenido: 29925
                  anticipos_rendimientos_distribuidos_periodo: 16746509
                  diferencia_a_cargo: 0
                  base_gravable_pago_provisional: 946992
                  impuesto_a_cargo: 0
                  isr_causado: 284098
              detalle_pago_isr:
                r1_isr_personas_morales:
                  a_cargo: 0
                  total_aplicaciones: 0
                  total_de_contribuciones: 0
                  cantidad_a_cargo: 0
                  aplica_primera_parcialidad: 'NO'
                  cantidad_a_pagar: 0
                r12_isr_retenciones_por_salarios:
                  a_cargo: 415945
                  parte_actualizada: 0
                  recargos: 0
                  total_aplicaciones: 379
                  total_de_contribuciones: 415945
                  subsidio_empleo: 379
                  cantidad_a_cargo: 415566
                  aplica_primera_parcialidad: 'NO'
                  cantidad_a_pagar: 415566
                r13_isr_retenciones_por_asimilados_a_salarios:
                  a_cargo: 254588
                  parte_actualizada: 0
                  recargos: 0
                  total_aplicaciones: 0
                  total_de_contribuciones: 254588
                  cantidad_a_cargo: 254588
                  aplica_primera_parcialidad: 'NO'
                  cantidad_a_pagar: 254588
                r14_isr_retenciones_por_servicios_profesionales:
                  a_cargo: 104482
                  parte_actualizada: 0
                  recargos: 0
                  total_aplicaciones: 0
                  total_de_contribuciones: 104482
                  cantidad_a_cargo: 104482
                  aplica_primera_parcialidad: 'NO'
                  cantidad_a_pagar: 104482
              determinacion_iva:
                montos_actos_actividades_pagados:
                  total_actos_actividades_pagados_tasa_16: 2094706
                  total_actos_actividades_sujetos_estimulo_rfn: 0
                  total_actos_actividades_pagados_tasa_0: 0
                  total_actos_actividades_pagados_no_paga_iva: 0
                detalle_total_actos_actividades_pagados_tasa_16:
                  otros_actos_pagados_tasa_16: 2094706
                  total_actos_pagados_tasa_16: 2094706
                determinacion_iva_acreditable:
                  total_iva_actos_actividades_pagados_tasa_16: 335153
                  total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
                  iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
                  total_iva_trasladado_contribuyente: 335153
                  iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
                  iva_acreditable: 335153
                  total_iva_acreditable_periodo: 335153
                  total_iva_actos_actividades_gravados: 335153
                determinacion_iva:
                  valor_actos_actividades_gravados_tasa_16: 6457950
                  cantidad_a_cargo: 312421
                  suma_actos_actividades_gravados: 6457950
                  saldo_a_favor_periodo: 0
                  impuesto_causado: 1033272
                  diferencia_a_cargo: 312421
                  iva_retenido_al_contribuyente: 385698
                  impuesto_a_cargo: 312421
                  total_iva_acreditable: 335153
                detalle_valor_actos_actividades_gravados_tasa_16:
                  otros_actos_actividades_gravados_tasa_16: 6457950
                  total_actos_actividades_gravados_tasa_16: 6457950
              detalle_pago_iva:
                r21_iva:
                  a_cargo: 312421
                  parte_actualizada: 0
                  total_aplicaciones: 0
                  recargos: 0
                  total_de_contribuciones: 312421
                  cantidad_a_cargo: 312421
                  aplica_primera_parcialidad: 'NO'
                  cantidad_a_pagar: 312421
                r21_iva_retenciones:
                  a_cargo: 111448
                  parte_actualizada: 0
                  total_aplicaciones: 0
                  recargos: 0
                  total_de_contribuciones: 111448
                  cantidad_a_cargo: 111448
                  aplica_primera_parcialidad: 'NO'
                  cantidad_a_pagar: 111448
              pdf: '===PDF_BINARY===='
              receipt_pdf: '===PDF_BINARY===='
              type: monthly
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-returns/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a tax return

                tax_return = client.TaxReturns.get(id="tax-return-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.detail id: 'tax-return-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.detail('taxReturnId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyTaxReturn:
      path: /api/tax-returns/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific tax return from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The ID of the tax return you want to delete.
      display-name: Delete a tax return
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/tax-returns/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete a tax return

                client.TaxReturns.delete("tax-return-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_returns.delete id: 'tax-return-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxReturns.delete('taxReturnId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Tax returns
docs: >-
  A **tax return** is the representation of the tax return document sent every
  year by a person or a business to the tax authority in the country.


  The tax return data structure will be different depending on if it is related
  to a person or a business (you will find examples for both in the endpoints
  below).


  ### **üî¶ Filterable fields**


  | Field                                   | Available
  Filters                      |

  | --------------------------------------- |
  -------------------------------------- |

  | `created_at `                           | `gt`, `gte`, `lt`, `lte`,
  `range`      |

  | `id`                                    | `=`,
  `in`                              |

  | `ejercicio`                             | `=`, `gt`, `gte`, `lt`, `lte`,
  `range` |

  | `tipo_declaracion`                      | `=`,
  `in`                              |

  | `link`                                  | `=`,
  `in`                              |


  ```curl cURL

  # Filtering results so that you get Tax Returns from one link:

  https://api.belvo.com/api/tax-returns/?link=link-id


  # Filtering results so that you get Tax Returns from two links and are of type
  normal:

  https://api.belvo.com/api/tax-returns/?link__in=link-id1,link-id2&tipo_declaracion=Normal,

  ```

  ```javascript Node

  //  Filtering results so that you get the Tax Returns from one link:

  client.taxReturns.list({
    filters: {
      link: "link-id"
    }
  })


  //  Filtering results so that you get the Tax Returns from two links and are
  of type normal:

  client.taxReturns.list({
    filters: {
      link__in: "link-id-1, link-id-2",
      tipo_declaracion: "Normal"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get the Tax Return from one link:

  client.TaxReturns.list(link="link-id")


  # Filtering results so that you get the Tax Returns from two links and are of
  type normal:

  client.TaxReturns.list(link__in="link-id1,link-id2", tipo_declaracion:
  "Normal")

  ```

  ```ruby Ruby

  # Filtering results so that you get the Tax Return from one link:

  client.tax_returns.list(params: {
    link: "link-id"
  })



  # Filtering results so that you get the Tax Returns from two links and are of
  type normal:

  client.tax_returns.list(params: {
    link__in: "link-id1, link-id1",
    tipo_declaracion: "Normal"
  })

  ```
",
    },
    "taxStatus.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Our **Tax status** endpoint lets you retrieve information about a person's or business's tax situation, according to the country's tax authority. 

- For SAT (Mexico), this information is extracted from the _Constancia de situaci√≥n fiscal_ document.
- For DIAN (Colombia), this information is extracted from the _Registro √önico Tributario_ document.



### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field         | Available Filters                 |
| ------------- | --------------------------------- |
| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |
| `id`          | `=`, `in`                         |
| `link`        | `=`, `in`                         |

```curl cURL
# Filtering results so that you get institutions from just one link:
https://api.belvo.com/api/institutions/?link=link
```
```javascript Node
//  Filtering results so that you get institutions from just one link:
client.taxstatus.list({
  filters: {
    link: "link_id"
  }
})

```
```python Python
# Filtering results so that you get institutions from just one link:
client.TaxStatus.list(link="link")
```
```ruby Ruby
# Filtering results so that you get institutions from just one link:
client.tax_status.list(params: {
  link: "link"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Tax status",
          "endpoints": {
            "DestroyTaxStatus": {
              "auth": true,
              "display-name": "Delete a tax status",
              "docs": "Delete a specific tax status from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/tax-status/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete tax status
client.TaxStatus.delete('tax-status-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_status.delete id: 'tax-status-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxStatus.delete('taxStatusId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/tax-status/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "the `tax-status.id` that you want to delete",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailTaxStatus": {
              "auth": true,
              "display-name": "Get a tax status's details",
              "docs": "Get the details of a specific tax status.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-status/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get tax status
client.TaxStatus.get('tax-status-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_status.detail id: 'tax-status-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxStatus.detail('taxStatusId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Personal Tax Status",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "address": {
                        "between_street": [
                          {
                            "street_one": "CALLE PRINCIPE",
                            "street_two": "CALLE NUEVA ROMA",
                          },
                        ],
                        "exterior_number": "4360",
                        "interior_number": "PLANTA BAJA",
                        "municipality": "ALTOS DE MIRAMAR",
                        "postal_code": "21255",
                        "state": "CIUDAD DE MEXICO",
                        "street": "GENERAL GIMENO",
                        "street_type": "BOULEVARD (BLVD.)",
                        "suburb": "BUENAVENTURA",
                      },
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "digital_stamp": "||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN FISCAL|2044441088666600000034||",
                      "digital_stamp_chain": "ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=",
                      "economic_activity": [
                        {
                          "economic_activity": "Asalariado",
                          "initial_date": "2014-11-05",
                          "order": "1",
                          "percentage": "100",
                        },
                      ],
                      "id": "6de34cb3-bf0d-445d-b832-7ec7781e2c6f",
                      "id_cif": "2274235873432",
                      "link": "401d5a8e-79e2-472e-a1ca-8f4646f5cb24",
                      "obligations": [
                        {
                          "expiration": "Conjuntamente con la declaraci√≥n anual del ejercicio.",
                          "initial_date": "2004-03-31",
                          "obligation": "Declaraci√≥n informativa de IVA con la anual de ISR",
                        },
                        {
                          "expiration": "A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo que corresponda.",
                          "initial_date": "2004-03-31",
                          "obligation": "Pago definitivo mensual de IVA.",
                        },
                      ],
                      "official_name": "Alfredo Gonzalo Robin",
                      "pdf": "=PDF-STRING=",
                      "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
                      "regimes": [
                        {
                          "end_date": "end_date",
                          "initial_date": "2003-01-01",
                          "regimen": "R√©gimen de Sueldos y Salarios e Ingresos Asimilados a Salarios",
                        },
                      ],
                      "tax_payer_information": {
                        "commercial_name": "Alfredo Gonzalo Robin",
                        "curp": "BEMP930403HDFLLT00",
                        "email": "alfredo@robin.com",
                        "first_last_name": "Gonzalo",
                        "last_status_change_date": "2000-06-01",
                        "name": "Alfredo",
                        "phone": "667507132",
                        "rfc": "GGTF770303G7",
                        "second_last_name": "Robin",
                        "start_operations_date": "2000-06-01",
                        "status_padron": "ACTIVO",
                      },
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-status/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get tax status
client.TaxStatus.get('tax-status-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_status.detail id: 'tax-status-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxStatus.detail('taxStatusId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Business Tax Status",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "address": {
                        "between_street": [
                          {
                            "street_one": "CALLE PRINCIPE",
                            "street_two": "CALLE NUEVA ROMA",
                          },
                        ],
                        "exterior_number": "4360",
                        "interior_number": "PLANTA BAJA",
                        "municipality": "ALTOS DE MIRAMAR",
                        "postal_code": "21255",
                        "state": "CIUDAD DE MEXICO",
                        "street": "GENERAL GIMENO",
                        "street_type": "BOULEVARD (BLVD.)",
                        "suburb": "BUENAVENTURA",
                      },
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "digital_stamp": "||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN FISCAL|2044441088666600000034||",
                      "digital_stamp_chain": "EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=",
                      "economic_activity": [
                        {
                          "economic_activity": "Otros servicios profesionales, cient√≠ficos y t√©cnicos",
                          "initial_date": "2014-11-05",
                          "order": "1",
                          "percentage": "100",
                        },
                      ],
                      "id": "6de34cb3-bf0d-445d-b832-7ec7781e2c6f",
                      "id_cif": "2274235873432",
                      "link": "0b2edc42-7214-4c68-b22e-ae6885bf7c07",
                      "obligations": [
                        {
                          "expiration": "Conjuntamente con la declaraci√≥n anual del ejercicio.",
                          "initial_date": "2004-03-31",
                          "obligation": "Declaraci√≥n informativa de IVA con la anual de ISR",
                        },
                        {
                          "expiration": "A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo que corresponda.",
                          "initial_date": "2004-03-31",
                          "obligation": "Pago definitivo mensual de IVA.",
                        },
                      ],
                      "official_name": "ACNE SA DE CV",
                      "pdf": "=PDF-STRING=",
                      "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
                      "regimes": [
                        {
                          "end_date": "end_date",
                          "initial_date": "2003-01-01",
                          "regimen": "R√©gimen General de Ley Personas Morales",
                        },
                      ],
                      "tax_payer_information": {
                        "email": "contact@acne.com",
                        "last_status_change_date": "1995-08-01",
                        "phone": "555507122",
                        "rfc": "GHTF980303F7",
                        "social_name": "ACNE SA DE CV",
                        "start_operations_date": "1995-08-01",
                        "status_padron": "ACTIVO",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-status/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `tax-status.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailTaxStatusRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "DetailTaxStatusResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListTaxStatus": {
              "auth": true,
              "display-name": "List all tax statuses",
              "docs": "Get a paginated list of all existing tax status in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-status/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List tax status
client.TaxStatus.list()
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_status.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxStatus.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Personal Tax Status",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 101,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "address": {
                            "between_street": [
                              {
                                "street_one": "CALLE PRINCIPE",
                                "street_two": "CALLE NUEVA ROMA",
                              },
                            ],
                            "exterior_number": "4360",
                            "interior_number": "PLANTA BAJA",
                            "municipality": "ALTOS DE MIRAMAR",
                            "postal_code": "21255",
                            "state": "CIUDAD DE MEXICO",
                            "street": "GENERAL GIMENO",
                            "street_type": "BOULEVARD (BLVD.)",
                            "suburb": "BUENAVENTURA",
                          },
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "digital_stamp": "||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN FISCAL|2044441088666600000034||",
                          "digital_stamp_chain": "ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=",
                          "economic_activity": [
                            {
                              "economic_activity": "Asalariado",
                              "initial_date": "2014-11-05",
                              "order": "1",
                              "percentage": "100",
                            },
                          ],
                          "id": "e88d29d1-3dc6-407f-825c-a9b50453e349",
                          "id_cif": "2274235873432",
                          "link": "401d5a8e-79e2-472e-a1ca-8f4646f5cb24",
                          "obligations": [
                            {
                              "expiration": "Conjuntamente con la declaraci√≥n anual del ejercicio.",
                              "initial_date": "2004-03-31",
                              "obligation": "Declaraci√≥n informativa de IVA con la anual de ISR",
                            },
                            {
                              "expiration": "A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo que corresponda.",
                              "initial_date": "2004-03-31",
                              "obligation": "Pago definitivo mensual de IVA.",
                            },
                          ],
                          "official_name": "Alfredo Gonzalo Robin",
                          "pdf": "=PDF-STRING=",
                          "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
                          "regimes": [
                            {
                              "initial_date": "2003-01-01",
                              "regimen": "R√©gimen de Sueldos y Salarios e Ingresos Asimilados a Salarios",
                            },
                          ],
                          "tax_payer_information": {
                            "commercial_name": "Alfredo Gonzalo Robin",
                            "curp": "BEMP930403HDFLLT00",
                            "email": "alfredo@robin.com",
                            "first_last_name": "Gonzalo",
                            "last_status_change_date": "2000-06-01",
                            "name": "Alfredo",
                            "phone": "667507132",
                            "rfc": "GGTF770303G7",
                            "second_last_name": "Robin",
                            "start_operations_date": "2000-06-01",
                            "status_padron": "ACTIVO",
                          },
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/tax-status/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List tax status
client.TaxStatus.list()
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_status.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxStatus.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Business Tax Status",
                  "query-parameters": {
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "fields": "link,balance,account",
                    "id": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73",
                    "id__in": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "link__in": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                  },
                  "response": {
                    "body": {
                      "count": 101,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "address": {
                            "between_street": [
                              {
                                "street_one": "CALLE PRINCIPE",
                                "street_two": "CALLE NUEVA ROMA",
                              },
                            ],
                            "exterior_number": "4360",
                            "interior_number": "PLANTA BAJA",
                            "municipality": "ALTOS DE MIRAMAR",
                            "postal_code": "21255",
                            "state": "CIUDAD DE MEXICO",
                            "street": "GENERAL GIMENO",
                            "street_type": "BOULEVARD (BLVD.)",
                            "suburb": "BUENAVENTURA",
                          },
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "digital_stamp": "||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN FISCAL|2044441088666600000034||",
                          "digital_stamp_chain": "EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=",
                          "economic_activity": [
                            {
                              "economic_activity": "Otros servicios profesionales, cient√≠ficos y t√©cnicos",
                              "initial_date": "2014-11-05",
                              "order": "1",
                              "percentage": "100",
                            },
                          ],
                          "id": "6de34cb3-bf0d-445d-b832-7ec7781e2c6f",
                          "id_cif": "2274235873432",
                          "link": "0b2edc42-7214-4c68-b22e-ae6885bf7c07",
                          "obligations": [
                            {
                              "expiration": "Conjuntamente con la declaraci√≥n anual del ejercicio.",
                              "initial_date": "2004-03-31",
                              "obligation": "Declaraci√≥n informativa de IVA con la anual de ISR",
                            },
                            {
                              "expiration": "A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo que corresponda.",
                              "initial_date": "2004-03-31",
                              "obligation": "Pago definitivo mensual de IVA.",
                            },
                          ],
                          "official_name": "ACNE SA DE CV",
                          "pdf": "=PDF-STRING=",
                          "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
                          "regimes": [
                            {
                              "initial_date": "2003-01-01",
                              "regimen": "R√©gimen General de Ley Personas Morales",
                            },
                          ],
                          "tax_payer_information": {
                            "email": "contact@acne.com",
                            "last_status_change_date": "1995-08-01",
                            "phone": "555507122",
                            "rfc": "GHTF980303F7",
                            "social_name": "ACNE SA DE CV",
                            "start_operations_date": "1995-08-01",
                            "status_padron": "ACTIVO",
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/tax-status/",
              "request": {
                "name": "ListTaxStatusRequest",
                "query-parameters": {
                  "created_at__gt": {
                    "docs": "Return tax statuses that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return tax statuses that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return tax statuses that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return tax statuses that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return tax statuses that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "Return information for this `tax-status.id`.",
                    "type": "optional<string>",
                  },
                  "id__in": {
                    "docs": "Return information for these `tax-status.id`s.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "link__in": {
                    "docs": "Return information for these `link.id`s.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.TaxStatusPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveTaxStatus": {
              "auth": true,
              "display-name": "Retrieve tax statuses for a link",
              "docs": "Retrieve tax status information for a specific fiscal link.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/tax-status/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link-id",
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve tax status
client.TaxStatus.create('link-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_status.retrieve(
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxStatus.retrieve('linkID')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Personal Tax Status",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                  },
                  "response": {
                    "body": {
                      "address": {
                        "between_street": [
                          {
                            "street_one": "CALLE PRINCIPE",
                            "street_two": "CALLE NUEVA ROMA",
                          },
                        ],
                        "exterior_number": "4360",
                        "interior_number": "PLANTA BAJA",
                        "municipality": "ALTOS DE MIRAMAR",
                        "postal_code": "21255",
                        "state": "CIUDAD DE MEXICO",
                        "street": "GENERAL GIMENO",
                        "street_type": "BOULEVARD (BLVD.)",
                        "suburb": "BUENAVENTURA",
                      },
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "digital_stamp": "||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN FISCAL|2044441088666600000034||",
                      "digital_stamp_chain": "ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=",
                      "economic_activity": [
                        {
                          "economic_activity": "Asalariado",
                          "initial_date": "2014-11-05",
                          "order": "1",
                          "percentage": "100",
                        },
                      ],
                      "id": "6de34cb3-bf0d-445d-b832-7ec7781e2c6f",
                      "id_cif": "2274235873432",
                      "link": "401d5a8e-79e2-472e-a1ca-8f4646f5cb24",
                      "obligations": [
                        {
                          "expiration": "Conjuntamente con la declaraci√≥n anual del ejercicio.",
                          "initial_date": "2004-03-31",
                          "obligation": "Declaraci√≥n informativa de IVA con la anual de ISR",
                        },
                        {
                          "expiration": "A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo que corresponda.",
                          "initial_date": "2004-03-31",
                          "obligation": "Pago definitivo mensual de IVA.",
                        },
                      ],
                      "official_name": "Alfredo Gonzalo Robin",
                      "pdf": "=PDF-STRING=",
                      "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
                      "regimes": [
                        {
                          "end_date": "end_date",
                          "initial_date": "2003-01-01",
                          "regimen": "R√©gimen de Sueldos y Salarios e Ingresos Asimilados a Salarios",
                        },
                      ],
                      "tax_payer_information": {
                        "commercial_name": "Alfredo Gonzalo Robin",
                        "curp": "BEMP930403HDFLLT00",
                        "email": "alfredo@robin.com",
                        "first_last_name": "Gonzalo",
                        "last_status_change_date": "2000-06-01",
                        "name": "Alfredo",
                        "phone": "667507132",
                        "rfc": "GGTF770303G7",
                        "second_last_name": "Robin",
                        "start_operations_date": "2000-06-01",
                        "status_padron": "ACTIVO",
                      },
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/tax-status/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "link-id",
    "attach_pdf": false
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve tax status
client.TaxStatus.create('link-id')
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.tax_status.retrieve(
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.taxStatus.retrieve('linkID')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Business Tax Status",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "d4617561-1c01-4b2f-83b6-a594f7b3bc57",
                  },
                  "response": {
                    "body": {
                      "address": {
                        "between_street": [
                          {
                            "street_one": "CALLE PRINCIPE",
                            "street_two": "CALLE NUEVA ROMA",
                          },
                        ],
                        "exterior_number": "4360",
                        "interior_number": "PLANTA BAJA",
                        "municipality": "ALTOS DE MIRAMAR",
                        "postal_code": "21255",
                        "state": "CIUDAD DE MEXICO",
                        "street": "GENERAL GIMENO",
                        "street_type": "BOULEVARD (BLVD.)",
                        "suburb": "BUENAVENTURA",
                      },
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:46:20Z",
                      "digital_stamp": "||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN FISCAL|2044441088666600000034||",
                      "digital_stamp_chain": "EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=",
                      "economic_activity": [
                        {
                          "economic_activity": "Otros servicios profesionales, cient√≠ficos y t√©cnicos",
                          "initial_date": "2014-11-05",
                          "order": "1",
                          "percentage": "100",
                        },
                      ],
                      "id": "6de34cb3-bf0d-445d-b832-7ec7781e2c6f",
                      "id_cif": "2274235873432",
                      "link": "0b2edc42-7214-4c68-b22e-ae6885bf7c07",
                      "obligations": [
                        {
                          "expiration": "Conjuntamente con la declaraci√≥n anual del ejercicio.",
                          "initial_date": "2004-03-31",
                          "obligation": "Declaraci√≥n informativa de IVA con la anual de ISR",
                        },
                        {
                          "expiration": "A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo que corresponda.",
                          "initial_date": "2004-03-31",
                          "obligation": "Pago definitivo mensual de IVA.",
                        },
                      ],
                      "official_name": "ACNE SA DE CV",
                      "pdf": "=PDF-STRING=",
                      "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
                      "regimes": [
                        {
                          "end_date": "end_date",
                          "initial_date": "2003-01-01",
                          "regimen": "R√©gimen General de Ley Personas Morales",
                        },
                      ],
                      "tax_payer_information": {
                        "email": "contact@acne.com",
                        "last_status_change_date": "1995-08-01",
                        "phone": "555507122",
                        "rfc": "GHTF980303F7",
                        "social_name": "ACNE SA DE CV",
                        "start_operations_date": "1995-08-01",
                        "status_padron": "ACTIVO",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/tax-status/",
              "request": {
                "body": {
                  "properties": {
                    "attach_pdf": {
                      "default": false,
                      "docs": "When set to `true`, you will receive the PDF in binary format in the response.",
                      "type": "optional<boolean>",
                    },
                    "link": {
                      "docs": "The fiscal `link.id` to use.",
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "save_data": {
                      "default": true,
                      "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.
When set to `false`, the data won't be persisted and we return a 200 OK response.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaxStatusRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "RetrieveTaxStatusResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "DetailTaxStatusResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxStatusSat",
              },
              {
                "type": "root.TaxStatusDian",
              },
            ],
          },
          "RetrieveTaxStatusResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "root.TaxStatusSat",
              },
              {
                "type": "root.TaxStatusDian",
              },
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListTaxStatus:
      path: /api/tax-status/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing tax status in your Belvo account.
        By default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all tax statuses
      request:
        name: ListTaxStatusRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page. 


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: optional<string>
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          created_at__gt:
            type: optional<string>
            docs: >-
              Return tax statuses that were last updated in Belvo's database
              after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return tax statuses that were last updated in Belvo's database
              after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return tax statuses that were last updated in Belvo's database
              before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return tax statuses that were last updated in Belvo's database
              before or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return tax statuses that were last updated in Belvo's database
              between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          id:
            type: optional<string>
            docs: Return information for this `tax-status.id`.
          id__in:
            type: optional<string>
            docs: Return information for these `tax-status.id`s.
          link__in:
            type: optional<string>
            docs: Return information for these `link.id`s.
      response:
        docs: Ok
        type: root.TaxStatusPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - name: Personal Tax Status
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 101
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: e88d29d1-3dc6-407f-825c-a9b50453e349
                  link: 401d5a8e-79e2-472e-a1ca-8f4646f5cb24
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
                  official_name: Alfredo Gonzalo Robin
                  id_cif: '2274235873432'
                  tax_payer_information:
                    rfc: GGTF770303G7
                    curp: BEMP930403HDFLLT00
                    name: Alfredo
                    first_last_name: Gonzalo
                    second_last_name: Robin
                    start_operations_date: '2000-06-01'
                    status_padron: ACTIVO
                    last_status_change_date: '2000-06-01'
                    commercial_name: Alfredo Gonzalo Robin
                    email: alfredo@robin.com
                    phone: '667507132'
                  address:
                    postal_code: '21255'
                    street_type: BOULEVARD (BLVD.)
                    street: GENERAL GIMENO
                    exterior_number: '4360'
                    interior_number: PLANTA BAJA
                    suburb: BUENAVENTURA
                    municipality: ALTOS DE MIRAMAR
                    state: CIUDAD DE MEXICO
                    between_street:
                      - street_one: CALLE PRINCIPE
                        street_two: CALLE NUEVA ROMA
                  economic_activity:
                    - economic_activity: Asalariado
                      initial_date: '2014-11-05'
                      order: '1'
                      percentage: '100'
                  regimes:
                    - initial_date: '2003-01-01'
                      regimen: >-
                        R√©gimen de Sueldos y Salarios e Ingresos Asimilados a
                        Salarios
                  obligations:
                    - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
                      expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
                      initial_date: '2004-03-31'
                    - obligation: Pago definitivo mensual de IVA.
                      expiration: >-
                        A m√°s tardar el d√≠a 17 del mes inmediato posterior al
                        periodo que corresponda.
                      initial_date: '2004-03-31'
                  digital_stamp: >-
                    ||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
                    FISCAL|2044441088666600000034||
                  digital_stamp_chain: >-
                    ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=
                  pdf: '=PDF-STRING='
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-status/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List tax status

                client.TaxStatus.list()
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_status.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxStatus.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Business Tax Status
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            id: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
            id__in: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
            link__in: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
          response:
            body:
              count: 101
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
                  link: 0b2edc42-7214-4c68-b22e-ae6885bf7c07
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
                  official_name: ACNE SA DE CV
                  id_cif: '2274235873432'
                  tax_payer_information:
                    rfc: GHTF980303F7
                    start_operations_date: '1995-08-01'
                    status_padron: ACTIVO
                    last_status_change_date: '1995-08-01'
                    social_name: ACNE SA DE CV
                    email: contact@acne.com
                    phone: '555507122'
                  address:
                    postal_code: '21255'
                    street_type: BOULEVARD (BLVD.)
                    street: GENERAL GIMENO
                    exterior_number: '4360'
                    interior_number: PLANTA BAJA
                    suburb: BUENAVENTURA
                    municipality: ALTOS DE MIRAMAR
                    state: CIUDAD DE MEXICO
                    between_street:
                      - street_one: CALLE PRINCIPE
                        street_two: CALLE NUEVA ROMA
                  economic_activity:
                    - economic_activity: Otros servicios profesionales, cient√≠ficos y t√©cnicos
                      initial_date: '2014-11-05'
                      order: '1'
                      percentage: '100'
                  regimes:
                    - initial_date: '2003-01-01'
                      regimen: R√©gimen General de Ley Personas Morales
                  obligations:
                    - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
                      expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
                      initial_date: '2004-03-31'
                    - obligation: Pago definitivo mensual de IVA.
                      expiration: >-
                        A m√°s tardar el d√≠a 17 del mes inmediato posterior al
                        periodo que corresponda.
                      initial_date: '2004-03-31'
                  digital_stamp: >-
                    ||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
                    FISCAL|2044441088666600000034||
                  digital_stamp_chain: >-
                    EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
                  pdf: '=PDF-STRING='
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-status/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List tax status

                client.TaxStatus.list()
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_status.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxStatus.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveTaxStatus:
      path: /api/tax-status/
      method: POST
      auth: true
      docs: Retrieve tax status information for a specific fiscal link.
      source:
        openapi: ../openapi.yml
      display-name: Retrieve tax statuses for a link
      request:
        name: TaxStatusRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        body:
          properties:
            link:
              type: string
              docs: The fiscal `link.id` to use.
              validation:
                format: uuid
            attach_pdf:
              type: optional<boolean>
              docs: >-
                When set to `true`, you will receive the PDF in binary format in
                the response.
              default: false
            save_data:
              type: optional<boolean>
              docs: >-
                Indicates whether or not to persist the data in Belvo. By
                default, this is set to `true` and we return a 201 Created
                response.

                When set to `false`, the data won't be persisted and we return a
                200 OK response.
              default: true
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: RetrieveTaxStatusResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.InternalServerError
      examples:
        - name: Personal Tax Status
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          response:
            body:
              id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
              link: 401d5a8e-79e2-472e-a1ca-8f4646f5cb24
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
              official_name: Alfredo Gonzalo Robin
              id_cif: '2274235873432'
              tax_payer_information:
                rfc: GGTF770303G7
                curp: BEMP930403HDFLLT00
                name: Alfredo
                first_last_name: Gonzalo
                second_last_name: Robin
                start_operations_date: '2000-06-01'
                status_padron: ACTIVO
                last_status_change_date: '2000-06-01'
                commercial_name: Alfredo Gonzalo Robin
                email: alfredo@robin.com
                phone: '667507132'
              address:
                postal_code: '21255'
                street_type: BOULEVARD (BLVD.)
                street: GENERAL GIMENO
                exterior_number: '4360'
                interior_number: PLANTA BAJA
                suburb: BUENAVENTURA
                municipality: ALTOS DE MIRAMAR
                state: CIUDAD DE MEXICO
                between_street:
                  - street_one: CALLE PRINCIPE
                    street_two: CALLE NUEVA ROMA
              economic_activity:
                - economic_activity: Asalariado
                  initial_date: '2014-11-05'
                  order: '1'
                  percentage: '100'
              regimes:
                - end_date: end_date
                  initial_date: '2003-01-01'
                  regimen: >-
                    R√©gimen de Sueldos y Salarios e Ingresos Asimilados a
                    Salarios
              obligations:
                - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
                  expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
                  initial_date: '2004-03-31'
                - obligation: Pago definitivo mensual de IVA.
                  expiration: >-
                    A m√°s tardar el d√≠a 17 del mes inmediato posterior al
                    periodo que corresponda.
                  initial_date: '2004-03-31'
              digital_stamp: >-
                ||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
                FISCAL|2044441088666600000034||
              digital_stamp_chain: >-
                ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=
              pdf: '=PDF-STRING='
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-status/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link-id",
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve tax status

                client.TaxStatus.create('link-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_status.retrieve(
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxStatus.retrieve('linkID')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Business Tax Status
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: d4617561-1c01-4b2f-83b6-a594f7b3bc57
          response:
            body:
              id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
              link: 0b2edc42-7214-4c68-b22e-ae6885bf7c07
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
              official_name: ACNE SA DE CV
              id_cif: '2274235873432'
              tax_payer_information:
                rfc: GHTF980303F7
                start_operations_date: '1995-08-01'
                status_padron: ACTIVO
                last_status_change_date: '1995-08-01'
                social_name: ACNE SA DE CV
                email: contact@acne.com
                phone: '555507122'
              address:
                postal_code: '21255'
                street_type: BOULEVARD (BLVD.)
                street: GENERAL GIMENO
                exterior_number: '4360'
                interior_number: PLANTA BAJA
                suburb: BUENAVENTURA
                municipality: ALTOS DE MIRAMAR
                state: CIUDAD DE MEXICO
                between_street:
                  - street_one: CALLE PRINCIPE
                    street_two: CALLE NUEVA ROMA
              economic_activity:
                - economic_activity: Otros servicios profesionales, cient√≠ficos y t√©cnicos
                  initial_date: '2014-11-05'
                  order: '1'
                  percentage: '100'
              regimes:
                - end_date: end_date
                  initial_date: '2003-01-01'
                  regimen: R√©gimen General de Ley Personas Morales
              obligations:
                - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
                  expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
                  initial_date: '2004-03-31'
                - obligation: Pago definitivo mensual de IVA.
                  expiration: >-
                    A m√°s tardar el d√≠a 17 del mes inmediato posterior al
                    periodo que corresponda.
                  initial_date: '2004-03-31'
              digital_stamp: >-
                ||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
                FISCAL|2044441088666600000034||
              digital_stamp_chain: >-
                EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
              pdf: '=PDF-STRING='
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/tax-status/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "link-id",
                    "attach_pdf": false
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve tax status

                client.TaxStatus.create('link-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_status.retrieve(
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxStatus.retrieve('linkID')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailTaxStatus:
      path: /api/tax-status/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific tax status.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `tax-status.id` you want to get detailed information about.
      display-name: Get a tax status's details
      request:
        name: DetailTaxStatusRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: DetailTaxStatusResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: Personal Tax Status
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
              link: 401d5a8e-79e2-472e-a1ca-8f4646f5cb24
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
              official_name: Alfredo Gonzalo Robin
              id_cif: '2274235873432'
              tax_payer_information:
                rfc: GGTF770303G7
                curp: BEMP930403HDFLLT00
                name: Alfredo
                first_last_name: Gonzalo
                second_last_name: Robin
                start_operations_date: '2000-06-01'
                status_padron: ACTIVO
                last_status_change_date: '2000-06-01'
                commercial_name: Alfredo Gonzalo Robin
                email: alfredo@robin.com
                phone: '667507132'
              address:
                postal_code: '21255'
                street_type: BOULEVARD (BLVD.)
                street: GENERAL GIMENO
                exterior_number: '4360'
                interior_number: PLANTA BAJA
                suburb: BUENAVENTURA
                municipality: ALTOS DE MIRAMAR
                state: CIUDAD DE MEXICO
                between_street:
                  - street_one: CALLE PRINCIPE
                    street_two: CALLE NUEVA ROMA
              economic_activity:
                - economic_activity: Asalariado
                  initial_date: '2014-11-05'
                  order: '1'
                  percentage: '100'
              regimes:
                - end_date: end_date
                  initial_date: '2003-01-01'
                  regimen: >-
                    R√©gimen de Sueldos y Salarios e Ingresos Asimilados a
                    Salarios
              obligations:
                - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
                  expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
                  initial_date: '2004-03-31'
                - obligation: Pago definitivo mensual de IVA.
                  expiration: >-
                    A m√°s tardar el d√≠a 17 del mes inmediato posterior al
                    periodo que corresponda.
                  initial_date: '2004-03-31'
              digital_stamp: >-
                ||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
                FISCAL|2044441088666600000034||
              digital_stamp_chain: >-
                ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=
              pdf: '=PDF-STRING='
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-status/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get tax status

                client.TaxStatus.get('tax-status-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_status.detail id: 'tax-status-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxStatus.detail('taxStatusId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Business Tax Status
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
              link: 0b2edc42-7214-4c68-b22e-ae6885bf7c07
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:46:20Z'
              place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
              official_name: ACNE SA DE CV
              id_cif: '2274235873432'
              tax_payer_information:
                rfc: GHTF980303F7
                start_operations_date: '1995-08-01'
                status_padron: ACTIVO
                last_status_change_date: '1995-08-01'
                social_name: ACNE SA DE CV
                email: contact@acne.com
                phone: '555507122'
              address:
                postal_code: '21255'
                street_type: BOULEVARD (BLVD.)
                street: GENERAL GIMENO
                exterior_number: '4360'
                interior_number: PLANTA BAJA
                suburb: BUENAVENTURA
                municipality: ALTOS DE MIRAMAR
                state: CIUDAD DE MEXICO
                between_street:
                  - street_one: CALLE PRINCIPE
                    street_two: CALLE NUEVA ROMA
              economic_activity:
                - economic_activity: Otros servicios profesionales, cient√≠ficos y t√©cnicos
                  initial_date: '2014-11-05'
                  order: '1'
                  percentage: '100'
              regimes:
                - end_date: end_date
                  initial_date: '2003-01-01'
                  regimen: R√©gimen General de Ley Personas Morales
              obligations:
                - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
                  expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
                  initial_date: '2004-03-31'
                - obligation: Pago definitivo mensual de IVA.
                  expiration: >-
                    A m√°s tardar el d√≠a 17 del mes inmediato posterior al
                    periodo que corresponda.
                  initial_date: '2004-03-31'
              digital_stamp: >-
                ||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
                FISCAL|2044441088666600000034||
              digital_stamp_chain: >-
                EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
              pdf: '=PDF-STRING='
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/tax-status/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get tax status

                client.TaxStatus.get('tax-status-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_status.detail id: 'tax-status-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxStatus.detail('taxStatusId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyTaxStatus:
      path: /api/tax-status/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific tax status from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: the `tax-status.id` that you want to delete
      display-name: Delete a tax status
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/tax-status/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete tax status

                client.TaxStatus.delete('tax-status-id')
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.tax_status.delete id: 'tax-status-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.taxStatus.delete('taxStatusId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Tax status
docs: >-
  Our **Tax status** endpoint lets you retrieve information about a person's or
  business's tax situation, according to the country's tax authority. 


  - For SAT (Mexico), this information is extracted from the _Constancia de
  situaci√≥n fiscal_ document.

  - For DIAN (Colombia), this information is extracted from the _Registro √önico
  Tributario_ document.




  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field         | Available Filters                 |

  | ------------- | --------------------------------- |

  | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

  | `id`          | `=`, `in`                         |

  | `link`        | `=`, `in`                         |


  ```curl cURL

  # Filtering results so that you get institutions from just one link:

  https://api.belvo.com/api/institutions/?link=link

  ```

  ```javascript Node

  //  Filtering results so that you get institutions from just one link:

  client.taxstatus.list({
    filters: {
      link: "link_id"
    }
  })


  ```

  ```python Python

  # Filtering results so that you get institutions from just one link:

  client.TaxStatus.list(link="link")

  ```

  ```ruby Ruby

  # Filtering results so that you get institutions from just one link:

  client.tax_status.list(params: {
    link: "link"
  })

  ```
types:
  RetrieveTaxStatusResponse:
    discriminated: false
    union:
      - type: root.TaxStatusSat
      - type: root.TaxStatusDian
    source:
      openapi: ../openapi.yml
  DetailTaxStatusResponse:
    discriminated: false
    union:
      - type: root.TaxStatusSat
      - type: root.TaxStatusDian
    source:
      openapi: ../openapi.yml
",
    },
    "transactions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "A **transaction** contains the detailed information of each movement inside an account. For example, a purchase at a store or a restaurant.

### **üî¶ Filterable fields**

Please see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.

| Field                         | Available Filters                      |
| ----------------------------- | -------------------------------------- |
| `account`                     | `=`, `in`                              |
| `account**balance**available` | `=`, `lt`, `lte`, `range`              |
| `account**balance**current`   | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `account_type`                | `=`, `in`                              |
| `accounting_date`             | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `amount`                      | `=`, `gt`, `gte`, `lt`, `lte`, `range` |
| `credit_card_data__bill_name` | `=`, `in`                              |
| `created_at `                 | `gt`, `gte`, `lt`, `lte`, `range`      |
| `currency`                    | `=`, `in`                              |
| `id`                          | `=`, `in`                              |
| `institution`                 | `=`, `in`                              |
| `link`                        | `=`, `in`                              |
| `reference`                   | `=`, `in`                              |
| `status`                      | `=`, `in`                              |
| `type`                        | `=`, `in`                              |
| `value_date`                  | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

```curl cURL
# Filtering results to have transactions just from one link
https://api.belvo.com/api/transactions/?link=link_id

# Filtering results to have transactions just form one link and between a date range
https://api.belvo.com/api/transactions/?link=link_id&value_date__range=2020-10-01,2020-12-01

```
```javascript Node
// Filtering results to have transactions just from one link

client.transactions.list({
  filters: {
    link: "link_id"
  }
})

// Filtering results to have transactions just form one link and between a date range
client.transactions.list({
  filters: {
    link: "link_id",
    value_date__range: "2020-10-01,2020-12-01"
  }
})

```
```python Python
# Filtering results to have links just from two institutions
client.Transactions.list(link="link_id")

# Filtering results from one institution and a certain status
client.Transactions.list(link="link_id", value_date__range="2020-10-01,2020-12-01")

```
```ruby Ruby
# Filtering results to have links just from two institutions
client.transactions.list(params: {
  link: "link_id"
})

# Filtering results from one institution and a certain status
client.transactions.list(params: {
  link: "link_id",
  value_date__range: "2020-10-01,2020-12-01"
})
```",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Transactions",
          "endpoints": {
            "DestroyTransaction": {
              "auth": true,
              "display-name": "Delete a transaction",
              "docs": "Delete a specific transaction from your Belvo account.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X DELETE \
  https://sandbox.belvo.com/api/transactions/{id}/ \
  -H 'Host: sandbox.belvo.com' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Delete a transaction
client.Transactions.delete("transaction-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.delete id: 'transaction-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.delete('transactionId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/transactions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `transaction.id` that you want to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "DetailTransaction": {
              "auth": true,
              "display-name": "Get a transaction's details",
              "docs": "Get the details of a specific transaction.",
              "errors": [
                "root.UnauthorizedError",
                "root.NotFoundError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/transactions/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a transaction
transaction = client.Transactions.get(id="transaction-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.detail id: 'transaction-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.detail('transactionId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Checking Account Transaction",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "account": {
                        "balance": {
                          "available": 0,
                          "current": 0,
                        },
                        "balance_type": "ASSET",
                        "bank_product_id": "46",
                        "category": "CHECKING_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "MXN",
                        "funds_data": [
                          {
                            "collected_at": "2020-04-23T21:32:55Z",
                          },
                        ],
                        "id": "02589c41-ba22-4d44-8558-8111cc751318",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "internal_identification": "996685090015",
                        "last_accessed_at": "2021-03-09T10:28:40Z",
                        "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "CUENTA NARANJA LITE +",
                        "number": "996685090015",
                        "public_identification_name": "CLABE",
                        "public_identification_value": "058597000010485108",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "CUENTA NARANJA LITE +",
                      },
                      "accounting_date": "2019-10-23T13:01:41Z",
                      "amount": 932.5,
                      "balance": 16907.96,
                      "category": "Income & Payments",
                      "collected_at": "2022-07-20T22:09:33Z",
                      "created_at": "2022-07-20T22:09:35Z",
                      "credit_card_data": {
                        "bill_amount": 300,
                        "bill_name": "apr-2020",
                        "bill_status": "PAID",
                        "collected_at": "2019-09-27T13:01:41Z",
                        "previous_bill_total": "9614.30",
                      },
                      "currency": "MXN",
                      "description": "Transferencia interbancaria",
                      "id": "e5588958-48f2-427c-9300-945207532f5d",
                      "internal_identification": "LCzHexIyHi",
                      "merchant": {
                        "logo": "https://logo.clearbit.com/asesor-contable.es",
                        "merchant_name": "Merchants R Us Global",
                        "website": "https://merchants-r-us.com",
                      },
                      "observations": "OPTIONAL OBSERVATIONS",
                      "reference": "085904452810319225",
                      "status": "UNCATEGORIZED",
                      "subcategory": "Freelance",
                      "type": "INFLOW",
                      "value_date": "2022-07-11",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/transactions/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a transaction
transaction = client.Transactions.get(id="transaction-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.detail id: 'transaction-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.detail('transactionId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Savings Account Transaction",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "account": {
                        "balance": {
                          "available": 4.09,
                          "current": 4.09,
                        },
                        "balance_type": "ASSET",
                        "category": "SAVINGS_ACCOUNT",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2019-09-27T13:01:41Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "end_date": "end_date",
                          "interest_rate": 4,
                          "last_payment_date": "last_payment_date",
                          "minimum_payment": 2400.3,
                          "monthly_payment": 1.1,
                          "next_payment_date": "2019-12-13",
                          "no_interest_payment": 2690.83,
                        },
                        "currency": "MXN",
                        "funds_data": [
                          {
                            "collected_at": "2020-04-23T21:32:55Z",
                          },
                        ],
                        "id": "02589c41-ba22-4d44-8558-8111cc751318",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "internal_identification": "996685090015",
                        "last_accessed_at": "2021-03-09T10:28:40Z",
                        "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Mi ahorro Erebor",
                        "number": "997468860036",
                        "public_identification_name": "CLABE",
                        "public_identification_value": "058597000011543422",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Cuentas de efectivo",
                      },
                      "accounting_date": "2019-10-23T13:01:41Z",
                      "amount": 4.09,
                      "balance": 16907.96,
                      "category": "Income & Payments",
                      "collected_at": "2022-07-20T22:09:33Z",
                      "created_at": "2022-07-20T22:09:35Z",
                      "credit_card_data": {
                        "bill_amount": 300,
                        "bill_name": "apr-2020",
                        "bill_status": "PAID",
                        "collected_at": "2019-09-27T13:01:41Z",
                        "previous_bill_total": "9614.30",
                      },
                      "currency": "MXN",
                      "description": "Interes",
                      "id": "e5588958-48f2-427c-9300-945207532f5d",
                      "internal_identification": "0089608418",
                      "merchant": {
                        "logo": "https://logo.clearbit.com/asesor-contable.es",
                        "merchant_name": "Merchants R Us Global",
                        "website": "https://merchants-r-us.com",
                      },
                      "observations": "OPTIONAL OBSERVATIONS",
                      "reference": "8703",
                      "status": "UNCATEGORIZED",
                      "subcategory": "Freelance",
                      "type": "INFLOW",
                      "value_date": "2022-07-11",
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/transactions/{id} \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Get a transaction
transaction = client.Transactions.get(id="transaction-id")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.detail id: 'transaction-id'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.detail('transactionId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Credit Card Transaction",
                  "path-parameters": {
                    "id": "id",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "response": {
                    "body": {
                      "account": {
                        "balance": {
                          "available": 5621.12,
                          "current": 5874.13,
                        },
                        "balance_type": "LIABILITY",
                        "category": "CREDIT_CARD",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:46:20Z",
                        "credit_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "credit_limit": 192000,
                          "cutting_date": "2019-12-11",
                          "interest_rate": 4,
                          "minimum_payment": 2400,
                          "next_payment_date": "2019-12-01",
                          "no_interest_payment": 37390.83,
                        },
                        "currency": "MXN",
                        "id": "02589c41-ba22-4d44-8558-8111cc751318",
                        "institution": {
                          "name": "erebor_mx_retail",
                          "type": "bank",
                        },
                        "last_accessed_at": "2021-03-09T10:28:40Z",
                        "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                        "loan_data": {
                          "collected_at": "2022-02-09T08:45:50Z",
                          "contract_amount": 202000,
                          "contract_end_date": "2027-10-01",
                          "contract_number": "890ASLDJF87SD00",
                          "contract_start_date": "2020-03-01",
                          "credit_limit": 1.1,
                          "cutting_date": "cutting_date",
                          "cutting_day": "cutting_day",
                          "fees": [
                            {
                              "type": "OPERATION_FEE",
                              "value": 5.6,
                            },
                          ],
                          "interest_rate": 1.1,
                          "interest_rates": [
                            {
                              "name": "jurosEfetivo",
                              "value": 7.85,
                            },
                          ],
                          "last_payment_date": "last_payment_date",
                          "last_period_balance": 1.1,
                          "limit_day": "limit_day",
                          "loan_type": "Consignado",
                          "monthly_payment": 1000,
                          "no_interest_payment": 1.1,
                          "number_of_installments_outstanding": 48,
                          "number_of_installments_total": 60,
                          "outstanding_balance": 182000,
                          "outstanding_principal": 142023,
                          "payment_day": "27",
                          "principal": 192000,
                        },
                        "name": "Erebor Gold",
                        "number": "4057068115181",
                        "public_identification_name": "CLABE",
                        "public_identification_value": "150194683119900273",
                        "receivables_data": {
                          "anticipated": 1393.46,
                          "available": 800.37,
                          "collected_at": "2022-02-09T08:45:50Z",
                          "current": 2193.83,
                        },
                        "type": "Tarjetas de cr√©dito",
                      },
                      "accounting_date": "2019-10-23T13:01:41Z",
                      "amount": 2145.45,
                      "balance": 16907.96,
                      "category": "Income & Payments",
                      "collected_at": "2022-02-09T08:45:50Z",
                      "created_at": "2022-02-09T08:45:50Z",
                      "credit_card_data": {
                        "bill_amount": 300,
                        "bill_name": "apr-2020",
                        "bill_status": "PAID",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "previous_bill_total": "2000.00",
                      },
                      "currency": "MXN",
                      "description": "SEVEN BUDDHAS RFC:XXXXXXXXXX",
                      "id": "9e432f18-36ca-4bd6-a3f3-1971e58dc1e8",
                      "internal_identification": "TXpRMU9UQTROMWhZV2xSU1FUazJSMDl",
                      "merchant": {
                        "logo": "https://logo.clearbit.com/asesor-contable.es",
                        "merchant_name": "Merchants R Us Global",
                        "website": "https://merchants-r-us.com",
                      },
                      "observations": "OPTIONAL OBSERVATIONS",
                      "reference": "8703",
                      "status": "PROCESSED",
                      "subcategory": "Freelance",
                      "type": "OUTFLOW",
                      "value_date": "2019-10-23",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/transactions/{id}/",
              "path-parameters": {
                "id": {
                  "docs": "The `transaction.id` you want to get detailed information about.",
                  "type": "string",
                },
              },
              "request": {
                "name": "DetailTransactionRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Transaction",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "ListTransactions": {
              "auth": true,
              "display-name": "List all transactions",
              "docs": "Get a paginated list of all existing transactions in your Belvo account. By default, we return up to 100 results per page.",
              "errors": [
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/transactions/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List transactions
for transaction in client.Transactions.list():
    pprint(transaction)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Checking Account Transaction",
                  "query-parameters": {
                    "account": "d979df3a-5d0f-4cc9-9bd4-b75c28b45963",
                    "account__balance__available": "4000.00",
                    "account__balance__available__lt": "6000.00",
                    "account__balance__available__lte": "5999.00",
                    "account__balance__available__range": "3000.00,4350.00",
                    "account__balance__current": "4000.00",
                    "account__balance__current__gt": "4020.00",
                    "account__balance__current__gte": "4019.00",
                    "account__balance__current__lt": "3000.00",
                    "account__balance__current__lte": "2999.00",
                    "account__balance__current__range": "2999.00,4000.00",
                    "account__in": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509",
                    "account_type": "Cuentas de efectivo",
                    "account_type__in": "Cuentas de efectivo,Depositos Ahorro",
                    "accounting_date": "2022-05-05",
                    "accounting_date__gt": "2022-05-06",
                    "accounting_date__gte": "2022-05-04",
                    "accounting_date__lt": "2022-03-02",
                    "accounting_date__lte": "2022-03-01",
                    "accounting_date__range": "2022-03-01,2022-05-06",
                    "amount": "1000.00",
                    "amount__gt": "520.00",
                    "amount__gte": "519.00",
                    "amount__lt": "540.00",
                    "amount__lte": "541.00",
                    "amount__range": "519.00,541.00",
                    "collected_at": "2022-05-01",
                    "collected_at__gt": "2022-05-05",
                    "collected_at__gte": "2022-05-04",
                    "collected_at__lt": "2022-04-01",
                    "collected_at__lte": "2022-03-30",
                    "collected_at__range": "2022-03-03,2022-05-04",
                    "created_at": "2022-05-01",
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "credit_card_data__bill_name__in": "maio-2022,feb-2022",
                    "currency": "COP",
                    "currency__in": "COP,MXN",
                    "fields": "link,balance,account",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "reference": "085904452810319225",
                    "reference__in": "085904452810319225,8703",
                    "status": "PENDING",
                    "status__in": "PENDING,PROCESSED",
                    "type": "OUTFLOW",
                    "type__in": "INFLOW,OUTFLOW",
                    "value_date": "2022-05-05",
                    "value_date__gt": "2022-05-06",
                    "value_date__gte": "2022-05-04",
                    "value_date__lt": "2022-03-02",
                    "value_date__lte": "2022-03-01",
                    "value_date__range": "2022-03-01,2022-05-06",
                  },
                  "response": {
                    "body": {
                      "count": 198,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "account": {
                            "balance": {
                              "available": 0,
                              "current": 0,
                            },
                            "balance_type": "ASSET",
                            "bank_product_id": "46",
                            "category": "CHECKING_ACCOUNT",
                            "collected_at": "2022-02-09T08:45:50Z",
                            "created_at": "2022-02-09T08:46:20Z",
                            "currency": "MXN",
                            "id": "02589c41-ba22-4d44-8558-8111cc751318",
                            "institution": {
                              "name": "erebor_mx_retail",
                              "type": "bank",
                            },
                            "internal_identification": "996685090015",
                            "last_accessed_at": "2021-03-09T10:28:40Z",
                            "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                            "loan_data": {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "contract_end_date": "2027-10-01",
                              "monthly_payment": 1000,
                              "outstanding_balance": 182000,
                              "principal": 192000,
                            },
                            "name": "CUENTA NARANJA LITE +",
                            "number": "996685090015",
                            "public_identification_name": "CLABE",
                            "public_identification_value": "058597000010485108",
                            "type": "CUENTA NARANJA LITE +",
                          },
                          "accounting_date": "2019-10-23T13:01:41Z",
                          "amount": 932.5,
                          "balance": 16907.96,
                          "category": "Income & Payments",
                          "collected_at": "2022-07-20T22:09:33Z",
                          "created_at": "2022-07-20T22:09:35Z",
                          "currency": "MXN",
                          "description": "Transferencia interbancaria",
                          "id": "e5588958-48f2-427c-9300-945207532f5d",
                          "internal_identification": "LCzHexIyHi",
                          "merchant": {
                            "logo": "https://logo.clearbit.com/asesor-contable.es",
                            "merchant_name": "Merchants R Us Global",
                            "website": "https://merchants-r-us.com",
                          },
                          "observations": "OPTIONAL OBSERVATIONS",
                          "reference": "085904452810319225",
                          "status": "UNCATEGORIZED",
                          "subcategory": "Freelance",
                          "type": "INFLOW",
                          "value_date": "2022-07-11",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/transactions/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List transactions
for transaction in client.Transactions.list():
    pprint(transaction)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Savings Account Transaction",
                  "query-parameters": {
                    "account": "d979df3a-5d0f-4cc9-9bd4-b75c28b45963",
                    "account__balance__available": "4000.00",
                    "account__balance__available__lt": "6000.00",
                    "account__balance__available__lte": "5999.00",
                    "account__balance__available__range": "3000.00,4350.00",
                    "account__balance__current": "4000.00",
                    "account__balance__current__gt": "4020.00",
                    "account__balance__current__gte": "4019.00",
                    "account__balance__current__lt": "3000.00",
                    "account__balance__current__lte": "2999.00",
                    "account__balance__current__range": "2999.00,4000.00",
                    "account__in": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509",
                    "account_type": "Cuentas de efectivo",
                    "account_type__in": "Cuentas de efectivo,Depositos Ahorro",
                    "accounting_date": "2022-05-05",
                    "accounting_date__gt": "2022-05-06",
                    "accounting_date__gte": "2022-05-04",
                    "accounting_date__lt": "2022-03-02",
                    "accounting_date__lte": "2022-03-01",
                    "accounting_date__range": "2022-03-01,2022-05-06",
                    "amount": "1000.00",
                    "amount__gt": "520.00",
                    "amount__gte": "519.00",
                    "amount__lt": "540.00",
                    "amount__lte": "541.00",
                    "amount__range": "519.00,541.00",
                    "collected_at": "2022-05-01",
                    "collected_at__gt": "2022-05-05",
                    "collected_at__gte": "2022-05-04",
                    "collected_at__lt": "2022-04-01",
                    "collected_at__lte": "2022-03-30",
                    "collected_at__range": "2022-03-03,2022-05-04",
                    "created_at": "2022-05-01",
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "credit_card_data__bill_name__in": "maio-2022,feb-2022",
                    "currency": "COP",
                    "currency__in": "COP,MXN",
                    "fields": "link,balance,account",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "reference": "085904452810319225",
                    "reference__in": "085904452810319225,8703",
                    "status": "PENDING",
                    "status__in": "PENDING,PROCESSED",
                    "type": "OUTFLOW",
                    "type__in": "INFLOW,OUTFLOW",
                    "value_date": "2022-05-05",
                    "value_date__gt": "2022-05-06",
                    "value_date__gte": "2022-05-04",
                    "value_date__lt": "2022-03-02",
                    "value_date__lte": "2022-03-01",
                    "value_date__range": "2022-03-01,2022-05-06",
                  },
                  "response": {
                    "body": {
                      "count": 198,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "account": {
                            "balance": {
                              "available": 4.09,
                              "current": 4.09,
                            },
                            "balance_type": "ASSET",
                            "category": "SAVINGS_ACCOUNT",
                            "collected_at": "2022-02-09T08:45:50Z",
                            "created_at": "2022-02-09T08:46:20Z",
                            "currency": "MXN",
                            "id": "02589c41-ba22-4d44-8558-8111cc751318",
                            "institution": {
                              "name": "erebor_mx_retail",
                              "type": "bank",
                            },
                            "internal_identification": "996685090015",
                            "last_accessed_at": "2021-03-09T10:28:40Z",
                            "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                            "loan_data": {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "contract_end_date": "2027-10-01",
                              "monthly_payment": 1000,
                              "outstanding_balance": 182000,
                              "principal": 192000,
                            },
                            "name": "Mi ahorro Erebor",
                            "number": "997468860036",
                            "public_identification_name": "CLABE",
                            "public_identification_value": "058597000011543422",
                            "type": "Cuentas de efectivo",
                          },
                          "accounting_date": "2019-10-23T13:01:41Z",
                          "amount": 4.09,
                          "balance": 16907.96,
                          "category": "Income & Payments",
                          "collected_at": "2022-07-20T22:09:33Z",
                          "created_at": "2022-07-20T22:09:35Z",
                          "currency": "MXN",
                          "description": "Interes",
                          "id": "e5588958-48f2-427c-9300-945207532f5d",
                          "internal_identification": "0089608418",
                          "merchant": {
                            "logo": "https://logo.clearbit.com/asesor-contable.es",
                            "merchant_name": "Merchants R Us Global",
                            "website": "https://merchants-r-us.com",
                          },
                          "observations": "OPTIONAL OBSERVATIONS",
                          "reference": "8703",
                          "status": "UNCATEGORIZED",
                          "subcategory": "Freelance",
                          "type": "INFLOW",
                          "value_date": "2022-07-11",
                        },
                      ],
                    },
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl https://sandbox.belvo.com/api/transactions/ \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from pprint import pprint
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# List transactions
for transaction in client.Transactions.list():
    pprint(transaction)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.list
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.list()
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Credit Card Transaction",
                  "query-parameters": {
                    "account": "d979df3a-5d0f-4cc9-9bd4-b75c28b45963",
                    "account__balance__available": "4000.00",
                    "account__balance__available__lt": "6000.00",
                    "account__balance__available__lte": "5999.00",
                    "account__balance__available__range": "3000.00,4350.00",
                    "account__balance__current": "4000.00",
                    "account__balance__current__gt": "4020.00",
                    "account__balance__current__gte": "4019.00",
                    "account__balance__current__lt": "3000.00",
                    "account__balance__current__lte": "2999.00",
                    "account__balance__current__range": "2999.00,4000.00",
                    "account__in": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509",
                    "account_type": "Cuentas de efectivo",
                    "account_type__in": "Cuentas de efectivo,Depositos Ahorro",
                    "accounting_date": "2022-05-05",
                    "accounting_date__gt": "2022-05-06",
                    "accounting_date__gte": "2022-05-04",
                    "accounting_date__lt": "2022-03-02",
                    "accounting_date__lte": "2022-03-01",
                    "accounting_date__range": "2022-03-01,2022-05-06",
                    "amount": "1000.00",
                    "amount__gt": "520.00",
                    "amount__gte": "519.00",
                    "amount__lt": "540.00",
                    "amount__lte": "541.00",
                    "amount__range": "519.00,541.00",
                    "collected_at": "2022-05-01",
                    "collected_at__gt": "2022-05-05",
                    "collected_at__gte": "2022-05-04",
                    "collected_at__lt": "2022-04-01",
                    "collected_at__lte": "2022-03-30",
                    "collected_at__range": "2022-03-03,2022-05-04",
                    "created_at": "2022-05-01",
                    "created_at__gt": "2022-05-05",
                    "created_at__gte": "2022-05-04",
                    "created_at__lt": "2022-04-01",
                    "created_at__lte": "2022-03-30",
                    "created_at__range": "2022-03-03,2022-05-04",
                    "credit_card_data__bill_name__in": "maio-2022,feb-2022",
                    "currency": "COP",
                    "currency__in": "COP,MXN",
                    "fields": "link,balance,account",
                    "link": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4",
                    "omit": "link,balance",
                    "page": 1,
                    "page_size": 100,
                    "reference": "085904452810319225",
                    "reference__in": "085904452810319225,8703",
                    "status": "PENDING",
                    "status__in": "PENDING,PROCESSED",
                    "type": "OUTFLOW",
                    "type__in": "INFLOW,OUTFLOW",
                    "value_date": "2022-05-05",
                    "value_date__gt": "2022-05-06",
                    "value_date__gte": "2022-05-04",
                    "value_date__lt": "2022-03-02",
                    "value_date__lte": "2022-03-01",
                    "value_date__range": "2022-03-01,2022-05-06",
                  },
                  "response": {
                    "body": {
                      "count": 198,
                      "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
                      "results": [
                        {
                          "account": {
                            "balance": {
                              "available": 5621.12,
                              "current": 5874.13,
                            },
                            "balance_type": "LIABILITY",
                            "category": "CREDIT_CARD",
                            "collected_at": "2022-02-09T08:45:50Z",
                            "created_at": "2022-02-09T08:46:20Z",
                            "credit_data": {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "credit_limit": 192000,
                              "cutting_date": "2019-12-11",
                              "interest_rate": 4,
                              "minimum_payment": 2400,
                              "next_payment_date": "2019-12-01",
                              "no_interest_payment": 37390.83,
                            },
                            "currency": "MXN",
                            "id": "02589c41-ba22-4d44-8558-8111cc751318",
                            "institution": {
                              "name": "erebor_mx_retail",
                              "type": "bank",
                            },
                            "last_accessed_at": "2021-03-09T10:28:40Z",
                            "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                            "loan_data": {
                              "collected_at": "2022-02-09T08:45:50Z",
                              "contract_end_date": "2027-10-01",
                              "monthly_payment": 1000,
                              "outstanding_balance": 182000,
                              "principal": 192000,
                            },
                            "name": "Erebor Gold",
                            "number": "4057068115181",
                            "public_identification_name": "CLABE",
                            "public_identification_value": "150194683119900273",
                            "type": "Tarjetas de cr√©dito",
                          },
                          "accounting_date": "2019-10-23T13:01:41Z",
                          "amount": 2145.45,
                          "balance": 16907.96,
                          "category": "Income & Payments",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:45:50Z",
                          "credit_card_data": {
                            "bill_name": "apr-2020",
                            "collected_at": "2022-02-09T08:45:50Z",
                            "previous_bill_total": "2000.00",
                          },
                          "currency": "MXN",
                          "description": "SEVEN BUDDHAS RFC:XXXXXXXXXX",
                          "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
                          "internal_identification": "TXpRMU9UQTROMWhZV2xSU1FUazJSMDl",
                          "merchant": {
                            "logo": "https://logo.clearbit.com/asesor-contable.es",
                            "merchant_name": "Merchants R Us Global",
                            "website": "https://merchants-r-us.com",
                          },
                          "observations": "OPTIONAL OBSERVATIONS",
                          "reference": "8703",
                          "status": "PROCESSED",
                          "subcategory": "Freelance",
                          "type": "OUTFLOW",
                          "value_date": "2019-10-23",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/transactions/",
              "request": {
                "name": "ListTransactionsRequest",
                "query-parameters": {
                  "account": {
                    "docs": "The `account.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `account.id` filter in order to improve your performance.
",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "account__balance__available": {
                    "docs": "Return transactions that have a `account.balance.available` matching exactly this value.",
                    "type": "optional<string>",
                  },
                  "account__balance__available__lt": {
                    "docs": "Return transactions that have a `account.balance.available` less than this value.",
                    "type": "optional<string>",
                  },
                  "account__balance__available__lte": {
                    "docs": "Return transactions that have a `account.balance.available` less than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "account__balance__available__range": {
                    "docs": "Return transactions that have a `account.balance.available` within a range of two values.",
                    "type": "optional<string>",
                  },
                  "account__balance__current": {
                    "docs": "Return transactions that have a `account.balance.current` matching exactly this value.",
                    "type": "optional<string>",
                  },
                  "account__balance__current__gt": {
                    "docs": "Return transactions that have a `account.balance.current` greater than this value.",
                    "type": "optional<string>",
                  },
                  "account__balance__current__gte": {
                    "docs": "Return transactions that have a `account.balance.current` greater than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "account__balance__current__lt": {
                    "docs": "Return transactions that have a `account.balance.current` less than this value.",
                    "type": "optional<string>",
                  },
                  "account__balance__current__lte": {
                    "docs": "Return transactions that have a `account.balance.current` less than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "account__balance__current__range": {
                    "docs": "Return transactions that have a `account.balance.current` within a range of two values.",
                    "type": "optional<string>",
                  },
                  "account__in": {
                    "docs": "Return transactions only for these `account.id`s.",
                    "type": "optional<string>",
                  },
                  "account_type": {
                    "docs": "Return information only for transactions matching this account type, as designated by the institution.",
                    "type": "optional<string>",
                  },
                  "account_type__in": {
                    "docs": "Return information only for transactions matching these account types, as designated by the institution.",
                    "type": "optional<string>",
                  },
                  "accounting_date": {
                    "docs": "Return transactions that were processed by the institution on exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "accounting_date__gt": {
                    "docs": "Return transactions that were processed by the institution after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "accounting_date__gte": {
                    "docs": "Return transactions that were processed by the institution on this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "accounting_date__lt": {
                    "docs": "Return transactions that were processed by the institution before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "accounting_date__lte": {
                    "docs": "Return transactions that were processed by the institution on this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "accounting_date__range": {
                    "docs": "Return transactions that were processed by the institution in this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "amount": {
                    "docs": "Return transactions matching exactly this value.",
                    "type": "optional<string>",
                  },
                  "amount__gt": {
                    "docs": "Return transactions greater than this value.",
                    "type": "optional<string>",
                  },
                  "amount__gte": {
                    "docs": "Return transactions greater than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "amount__lt": {
                    "docs": "Return transactions less than this value.",
                    "type": "optional<string>",
                  },
                  "amount__lte": {
                    "docs": "Return transactions less than or equal to this value.",
                    "type": "optional<string>",
                  },
                  "amount__range": {
                    "docs": "Return transactions between these two values.",
                    "type": "optional<string>",
                  },
                  "collected_at": {
                    "docs": "Return transactions that were retrieved from the institution on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "collected_at__gt": {
                    "docs": "Return transactions that were retrieved from the institution after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "collected_at__gte": {
                    "docs": "Return transactions that were retrieved from the institution after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "collected_at__lt": {
                    "docs": "Return transactions that were retrieved from the institution before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "collected_at__lte": {
                    "docs": "Return transactions that were retrieved from the institution before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "collected_at__range": {
                    "docs": "Return transactions that were retrieved from the institution between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at": {
                    "docs": "Return transactions that were last updated in Belvo's database on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gt": {
                    "docs": "Return transactions that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__gte": {
                    "docs": "Return transactions that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lt": {
                    "docs": "Return transactions that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__lte": {
                    "docs": "Return transactions that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "created_at__range": {
                    "docs": "Return transactions that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
                    "type": "optional<string>",
                  },
                  "credit_card_data__bill_name__in": {
                    "docs": "Return transactions for one of these bill names.",
                    "type": "optional<string>",
                  },
                  "currency": {
                    "docs": "Return transactions in only this three-letter currency code.",
                    "type": "optional<string>",
                  },
                  "currency__in": {
                    "docs": "Return transactions in one of these three-letter currency codes.",
                    "type": "optional<string>",
                  },
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The `link.id` you want to filter by.

‚ÑπÔ∏è We highly recommend adding the `account.id` filter as well in order to improve your performance.
",
                    "type": "string",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "page": {
                    "docs": "A page number within the paginated result set.",
                    "type": "optional<integer>",
                  },
                  "page_size": {
                    "default": 100,
                    "docs": "Indicates how many results to return per page. By default we return 100 results per page.

‚ÑπÔ∏è The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 1000,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "reference": {
                    "docs": "Returns transactions with this institution-assigned reference number.",
                    "type": "optional<string>",
                  },
                  "reference__in": {
                    "docs": "Returns transactions with these institution-assigned reference numbers.",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "Return transactions with this status. Can be either `PENDING`, `PROCESSED`, or `UNCATEGORIZED`.",
                    "type": "optional<string>",
                  },
                  "status__in": {
                    "docs": "Return transactions with these statuses. Can be either `PENDING`, `PROCESSED`, or `UNCATEGORIZED`.",
                    "type": "optional<string>",
                  },
                  "type": {
                    "docs": "Return transactions with this type. Can be either `INFLOW` or `OUTFLOW`.",
                    "type": "optional<string>",
                  },
                  "type__in": {
                    "docs": "Return transactions with this types. Can be either `INFLOW` or `OUTFLOW`.",
                    "type": "optional<string>",
                  },
                  "value_date": {
                    "docs": "Return transactions that occurred on exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__gt": {
                    "docs": "Return transactions that occurred after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__gte": {
                    "docs": "Return transactions that occurred on this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__lt": {
                    "docs": "Return transactions that occurred before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__lte": {
                    "docs": "Return transactions that occurred on this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                  "value_date__range": {
                    "docs": "Return transactions for this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.TransactionsPaginatedResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "PatchTransactions": {
              "auth": true,
              "display-name": "Complete a transactions request",
              "docs": "Used to resume a Transaction retrieve session that was paused because an MFA token was required by the institution.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/transactions/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume transactions
transactions = client.Transactions.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.resume(
  session: 'session-id',
  token: 'token',
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Checking Account Transaction",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "available": 0,
                            "current": 0,
                          },
                          "balance_type": "ASSET",
                          "bank_product_id": "46",
                          "category": "CHECKING_ACCOUNT",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "MXN",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "02589c41-ba22-4d44-8558-8111cc751318",
                          "institution": {
                            "name": "erebor_mx_retail",
                            "type": "bank",
                          },
                          "internal_identification": "996685090015",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "CUENTA NARANJA LITE +",
                          "number": "996685090015",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "058597000010485108",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "CUENTA NARANJA LITE +",
                        },
                        "accounting_date": "2019-10-23T13:01:41Z",
                        "amount": 932.5,
                        "balance": 16907.96,
                        "category": "Income & Payments",
                        "collected_at": "2022-07-20T22:09:33Z",
                        "created_at": "2022-07-20T22:09:35Z",
                        "credit_card_data": {
                          "bill_amount": 300,
                          "bill_name": "apr-2020",
                          "bill_status": "PAID",
                          "collected_at": "2019-09-27T13:01:41Z",
                          "previous_bill_total": "9614.30",
                        },
                        "currency": "MXN",
                        "description": "Transferencia interbancaria",
                        "id": "e5588958-48f2-427c-9300-945207532f5d",
                        "internal_identification": "LCzHexIyHi",
                        "merchant": {
                          "logo": "https://logo.clearbit.com/asesor-contable.es",
                          "merchant_name": "Merchants R Us Global",
                          "website": "https://merchants-r-us.com",
                        },
                        "observations": "OPTIONAL OBSERVATIONS",
                        "reference": "085904452810319225",
                        "status": "UNCATEGORIZED",
                        "subcategory": "Freelance",
                        "type": "INFLOW",
                        "value_date": "2022-07-11",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/transactions/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume transactions
transactions = client.Transactions.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.resume(
  session: 'session-id',
  token: 'token',
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Savings Account Transaction",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "available": 4.09,
                            "current": 4.09,
                          },
                          "balance_type": "ASSET",
                          "category": "SAVINGS_ACCOUNT",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "MXN",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "02589c41-ba22-4d44-8558-8111cc751318",
                          "institution": {
                            "name": "erebor_mx_retail",
                            "type": "bank",
                          },
                          "internal_identification": "996685090015",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Mi ahorro Erebor",
                          "number": "997468860036",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "058597000011543422",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Cuentas de efectivo",
                        },
                        "accounting_date": "2019-10-23T13:01:41Z",
                        "amount": 4.09,
                        "balance": 16907.96,
                        "category": "Income & Payments",
                        "collected_at": "2022-07-20T22:09:33Z",
                        "created_at": "2022-07-20T22:09:35Z",
                        "credit_card_data": {
                          "bill_amount": 300,
                          "bill_name": "apr-2020",
                          "bill_status": "PAID",
                          "collected_at": "2019-09-27T13:01:41Z",
                          "previous_bill_total": "9614.30",
                        },
                        "currency": "MXN",
                        "description": "Interes",
                        "id": "e5588958-48f2-427c-9300-945207532f5d",
                        "internal_identification": "0089608418",
                        "merchant": {
                          "logo": "https://logo.clearbit.com/asesor-contable.es",
                          "merchant_name": "Merchants R Us Global",
                          "website": "https://merchants-r-us.com",
                        },
                        "observations": "OPTIONAL OBSERVATIONS",
                        "reference": "8703",
                        "status": "UNCATEGORIZED",
                        "subcategory": "Freelance",
                        "type": "INFLOW",
                        "value_date": "2022-07-11",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X PATCH \
  https://sandbox.belvo.com/api/transactions/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
      "session": "",
      "token": "",
      "link": ""
  }' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Resume transactions
transactions = client.Transactions.resume(
  session="session_id",
  token="token",
  link="link_id"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

sandbox.transactions.resume(
  session: 'session-id',
  token: 'token',
  link: 'link-id'
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Credit Card Transaction",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "link": "683005d6-f45c-4adb-b289-f1a12f50f80c",
                    "session": "6e7b283c6efa449c9c028a16b5c249fa",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "available": 5621.12,
                            "current": 5874.13,
                          },
                          "balance_type": "LIABILITY",
                          "category": "CREDIT_CARD",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "credit_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400,
                            "next_payment_date": "2019-12-01",
                            "no_interest_payment": 37390.83,
                          },
                          "currency": "MXN",
                          "id": "02589c41-ba22-4d44-8558-8111cc751318",
                          "institution": {
                            "name": "erebor_mx_retail",
                            "type": "bank",
                          },
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Erebor Gold",
                          "number": "4057068115181",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "150194683119900273",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Tarjetas de cr√©dito",
                        },
                        "accounting_date": "2019-10-23T13:01:41Z",
                        "amount": 2145.45,
                        "balance": 16907.96,
                        "category": "Income & Payments",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:45:50Z",
                        "credit_card_data": {
                          "bill_amount": 300,
                          "bill_name": "apr-2020",
                          "bill_status": "PAID",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "previous_bill_total": "2000.00",
                        },
                        "currency": "MXN",
                        "description": "SEVEN BUDDHAS RFC:XXXXXXXXXX",
                        "id": "9e432f18-36ca-4bd6-a3f3-1971e58dc1e8",
                        "internal_identification": "TXpRMU9UQTROMWhZV2xSU1FUazJSMDl",
                        "merchant": {
                          "logo": "https://logo.clearbit.com/asesor-contable.es",
                          "merchant_name": "Merchants R Us Global",
                          "website": "https://merchants-r-us.com",
                        },
                        "observations": "OPTIONAL OBSERVATIONS",
                        "reference": "8703",
                        "status": "PROCESSED",
                        "subcategory": "Freelance",
                        "type": "OUTFLOW",
                        "value_date": "2019-10-23",
                      },
                    ],
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/transactions/",
              "request": {
                "body": "root.PatchBody",
                "content-type": "application/json",
                "name": "PatchTransactionsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<root.Transaction>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveTransactions": {
              "auth": true,
              "display-name": "Retrieve transactions for a link",
              "docs": "Retrieve transactions for one or more accounts from a specific link.
<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info: </strong> When retrieving transactions, it is important to understand that the available transaction data ranges depend on each institution. <br><br>
If you try to access older information than what we can access, we will return all the data we can read within that date range. For example, if you request transactions for the last year and we can only access the last six months, we will return the information corresponding to these six months of data. </div>
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/transactions/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "account": "",
    "date_from": "",
    "date_to": ""
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve transactions
transactions = client.Transactions.create(
  "link_id",
  "2019-07-01",
  date_to="2019-07-31"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

transactions = sandbox.transactions.retrieve(
  link: 'link_id',
  date_from: '2022-01-01',
  options: {
    account: account, //optional
    date_to: '2022-01-24'
  }
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Checking Account Transaction",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-08-05",
                    "date_to": "2020-10-05",
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "available": 0,
                            "current": 0,
                          },
                          "balance_type": "ASSET",
                          "bank_product_id": "46",
                          "category": "CHECKING_ACCOUNT",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "MXN",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "02589c41-ba22-4d44-8558-8111cc751318",
                          "institution": {
                            "name": "erebor_mx_retail",
                            "type": "bank",
                          },
                          "internal_identification": "996685090015",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "CUENTA NARANJA LITE +",
                          "number": "996685090015",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "058597000010485108",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "CUENTA NARANJA LITE +",
                        },
                        "accounting_date": "2019-10-23T13:01:41Z",
                        "amount": 932.5,
                        "balance": 16907.96,
                        "category": "Income & Payments",
                        "collected_at": "2022-07-20T22:09:33Z",
                        "created_at": "2022-07-20T22:09:35Z",
                        "credit_card_data": {
                          "bill_amount": 300,
                          "bill_name": "apr-2020",
                          "bill_status": "PAID",
                          "collected_at": "2019-09-27T13:01:41Z",
                          "previous_bill_total": "9614.30",
                        },
                        "currency": "MXN",
                        "description": "Transferencia interbancaria",
                        "id": "e5588958-48f2-427c-9300-945207532f5d",
                        "internal_identification": "LCzHexIyHi",
                        "merchant": {
                          "logo": "https://logo.clearbit.com/asesor-contable.es",
                          "merchant_name": "Merchants R Us Global",
                          "website": "https://merchants-r-us.com",
                        },
                        "observations": "OPTIONAL OBSERVATIONS",
                        "reference": "085904452810319225",
                        "status": "UNCATEGORIZED",
                        "subcategory": "Freelance",
                        "type": "INFLOW",
                        "value_date": "2022-07-11",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/transactions/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "account": "",
    "date_from": "",
    "date_to": ""
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve transactions
transactions = client.Transactions.create(
  "link_id",
  "2019-07-01",
  date_to="2019-07-31"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

transactions = sandbox.transactions.retrieve(
  link: 'link_id',
  date_from: '2022-01-01',
  options: {
    account: account, //optional
    date_to: '2022-01-24'
  }
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Savings Account Transaction",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-08-05",
                    "date_to": "2020-10-05",
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "available": 4.09,
                            "current": 4.09,
                          },
                          "balance_type": "ASSET",
                          "category": "SAVINGS_ACCOUNT",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "credit_data": {
                            "collected_at": "2019-09-27T13:01:41Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400.3,
                            "next_payment_date": "2019-12-13",
                            "no_interest_payment": 2690.83,
                          },
                          "currency": "MXN",
                          "funds_data": [
                            {
                              "collected_at": "2020-04-23T21:32:55Z",
                            },
                          ],
                          "id": "02589c41-ba22-4d44-8558-8111cc751318",
                          "institution": {
                            "name": "erebor_mx_retail",
                            "type": "bank",
                          },
                          "internal_identification": "996685090015",
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Mi ahorro Erebor",
                          "number": "997468860036",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "058597000011543422",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Cuentas de efectivo",
                        },
                        "accounting_date": "2019-10-23T13:01:41Z",
                        "amount": 4.09,
                        "balance": 16907.96,
                        "category": "Income & Payments",
                        "collected_at": "2022-07-20T22:09:33Z",
                        "created_at": "2022-07-20T22:09:35Z",
                        "credit_card_data": {
                          "bill_amount": 300,
                          "bill_name": "apr-2020",
                          "bill_status": "PAID",
                          "collected_at": "2019-09-27T13:01:41Z",
                          "previous_bill_total": "9614.30",
                        },
                        "currency": "MXN",
                        "description": "Interes",
                        "id": "e5588958-48f2-427c-9300-945207532f5d",
                        "internal_identification": "0089608418",
                        "merchant": {
                          "logo": "https://logo.clearbit.com/asesor-contable.es",
                          "merchant_name": "Merchants R Us Global",
                          "website": "https://merchants-r-us.com",
                        },
                        "observations": "OPTIONAL OBSERVATIONS",
                        "reference": "8703",
                        "status": "UNCATEGORIZED",
                        "subcategory": "Freelance",
                        "type": "INFLOW",
                        "value_date": "2022-07-11",
                      },
                    ],
                  },
                },
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/transactions/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "account": "",
    "date_from": "",
    "date_to": ""
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve transactions
transactions = client.Transactions.create(
  "link_id",
  "2019-07-01",
  date_to="2019-07-31"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

transactions = sandbox.transactions.retrieve(
  link: 'link_id',
  date_from: '2022-01-01',
  options: {
    account: account, //optional
    date_to: '2022-01-24'
  }
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "name": "Credit Card Transaction",
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-08-05",
                    "date_to": "2020-10-05",
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": [
                      {
                        "account": {
                          "balance": {
                            "available": 5621.12,
                            "current": 5874.13,
                          },
                          "balance_type": "LIABILITY",
                          "category": "CREDIT_CARD",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "created_at": "2022-02-09T08:46:20Z",
                          "credit_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "credit_limit": 192000,
                            "cutting_date": "2019-12-11",
                            "interest_rate": 4,
                            "minimum_payment": 2400,
                            "next_payment_date": "2019-12-01",
                            "no_interest_payment": 37390.83,
                          },
                          "currency": "MXN",
                          "id": "02589c41-ba22-4d44-8558-8111cc751318",
                          "institution": {
                            "name": "erebor_mx_retail",
                            "type": "bank",
                          },
                          "last_accessed_at": "2021-03-09T10:28:40Z",
                          "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                          "loan_data": {
                            "collected_at": "2022-02-09T08:45:50Z",
                            "contract_end_date": "2027-10-01",
                            "monthly_payment": 1000,
                            "outstanding_balance": 182000,
                            "principal": 192000,
                          },
                          "name": "Erebor Gold",
                          "number": "4057068115181",
                          "public_identification_name": "CLABE",
                          "public_identification_value": "150194683119900273",
                          "receivables_data": {
                            "anticipated": 1393.46,
                            "available": 800.37,
                            "collected_at": "2022-02-09T08:45:50Z",
                            "current": 2193.83,
                          },
                          "type": "Tarjetas de cr√©dito",
                        },
                        "accounting_date": "2019-10-23T13:01:41Z",
                        "amount": 2145.45,
                        "balance": 16907.96,
                        "category": "Income & Payments",
                        "collected_at": "2022-02-09T08:45:50Z",
                        "created_at": "2022-02-09T08:45:50Z",
                        "credit_card_data": {
                          "bill_amount": 300,
                          "bill_name": "apr-2020",
                          "bill_status": "PAID",
                          "collected_at": "2022-02-09T08:45:50Z",
                          "previous_bill_total": "2000.00",
                        },
                        "currency": "MXN",
                        "description": "SEVEN BUDDHAS RFC:XXXXXXXXXX",
                        "id": "9e432f18-36ca-4bd6-a3f3-1971e58dc1e8",
                        "internal_identification": "TXpRMU9UQTROMWhZV2xSU1FUazJSMDl",
                        "merchant": {
                          "logo": "https://logo.clearbit.com/asesor-contable.es",
                          "merchant_name": "Merchants R Us Global",
                          "website": "https://merchants-r-us.com",
                        },
                        "observations": "OPTIONAL OBSERVATIONS",
                        "reference": "8703",
                        "status": "PROCESSED",
                        "subcategory": "Freelance",
                        "type": "OUTFLOW",
                        "value_date": "2019-10-23",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/transactions/",
              "request": {
                "body": "root.TransactionsRequest",
                "content-type": "application/json",
                "name": "RetrieveTransactionsRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Ok (when `save_data=false`)",
                "status-code": 200,
                "type": "list<root.Transaction>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "RetrieveTransactions_async": {
              "auth": true,
              "display-name": "Retrieve transactions for a link",
              "docs": "Retrieve transactions for one or more accounts from a specific link.
<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info: </strong> When retrieving transactions, it is important to understand that the available transaction data ranges depend on each institution. <br><br>
If you try to access older information than what we can access, we will return all the data we can read within that date range. For example, if you request transactions for the last year and we can only access the last six months, we will return the information corresponding to these six months of data. </div>
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.RequestTimeoutError",
                "root.PreconditionError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X POST \
  https://sandbox.belvo.com/api/transactions/ \
  -H 'Content-Type: application/json' \
  -H 'Host: sandbox.belvo.com' \
  -H 'cache-control: no-cache' \
  -d '{
    "link": "",
    "account": "",
    "date_from": "",
    "date_to": ""
}' \
  -u [Secret Key ID]:[Secret Key PASSWORD]
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": undefined,
                    },
                    {
                      "code": "# check our python-client library on github
# https://github.com/belvo-finance/belvo-python
from belvo.client import Client

# Login to Belvo API
client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

# Retrieve transactions
transactions = client.Transactions.create(
  "link_id",
  "2019-07-01",
  date_to="2019-07-31"
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Belvo Python SDK",
                    },
                    {
                      "code": "# check our Ruby gem on github
# https://github.com/belvo-finance/belvo-ruby
require 'belvo'

sandbox = Belvo::Client.new(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
)

transactions = sandbox.transactions.retrieve(
  link: 'link_id',
  date_from: '2022-01-01',
  options: {
    account: account, //optional
    date_to: '2022-01-24'
  }
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "ruby",
                      "name": "Belvo Ruby SDK",
                    },
                    {
                      "code": "// check our node package on github
// https://github.com/belvo-finance/belvo-js

var belvo = require('belvo').default;

var client = new belvo(
  'Secret Key ID',
  'Secret Key PASSWORD',
  'sandbox'
);

client.connect()
  .then(function () {
    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
      .then(function (res) {
        console.log(res);
      })
      .catch(function (error) {
        console.log(error);
      });
});
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "node",
                      "name": "Belvo Node SDK",
                    },
                  ],
                  "headers": {
                    "X-Belvo-Request-Mode": "async",
                  },
                  "query-parameters": {
                    "fields": "link,balance,account",
                    "omit": "link,balance",
                  },
                  "request": {
                    "date_from": "2020-08-05",
                    "date_to": "2020-10-05",
                    "link": "2ccd5e15-194a-4a19-a45a-e7223c7e6717",
                  },
                  "response": {
                    "body": {
                      "request_id": "b5d0106ac9cc43d5b36199fe831f6bbe",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/transactions/",
              "request": {
                "body": "root.TransactionsRequest",
                "content-type": "application/json",
                "headers": {
                  "X-Belvo-Request-Mode": {
                    "name": "belvoRequestMode",
                    "type": "literal<"async">",
                  },
                },
                "name": "RetrieveTransactionsAsyncRequest",
                "query-parameters": {
                  "fields": {
                    "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                  "omit": {
                    "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Accepted (when `X-Belvo-Request-Mode` is `async`)",
                "status-code": 202,
                "type": "root.AsynchronousAccepted202",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListTransactions:
      path: /api/transactions/
      method: GET
      auth: true
      docs: >-
        Get a paginated list of all existing transactions in your Belvo account.
        By default, we return up to 100 results per page.
      source:
        openapi: ../openapi.yml
      display-name: List all transactions
      request:
        name: ListTransactionsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            default: 100
            docs: >
              Indicates how many results to return per page. By default we
              return 100 results per page.


              ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
              maximum is 1000. If you enter a value greater than 1000, our API
              will default to the maximum value (1000).
            validation:
              min: 1
              max: 1000
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          link:
            type: string
            docs: >
              The `link.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `account.id` filter as well in
              order to improve your performance.
            validation:
              format: uuid
          account:
            type: optional<string>
            docs: >
              The `account.id` you want to filter by.


              ‚ÑπÔ∏è We highly recommend adding the `account.id` filter in order to
              improve your performance.
            validation:
              format: uuid
          account__balance__available:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.available`
              matching exactly this value.
          account__balance__available__lt:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.available` less
              than this value.
          account__balance__available__lte:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.available` less
              than or equal to this value.
          account__balance__available__range:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.available` within
              a range of two values.
          account__balance__current:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.current` matching
              exactly this value.
          account__balance__current__gt:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.current` greater
              than this value.
          account__balance__current__gte:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.current` greater
              than or equal to this value.
          account__balance__current__lt:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.current` less
              than this value.
          account__balance__current__lte:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.current` less
              than or equal to this value.
          account__balance__current__range:
            type: optional<string>
            docs: >-
              Return transactions that have a `account.balance.current` within a
              range of two values.
          account__in:
            type: optional<string>
            docs: Return transactions only for these `account.id`s.
          account_type:
            type: optional<string>
            docs: >-
              Return information only for transactions matching this account
              type, as designated by the institution.
          account_type__in:
            type: optional<string>
            docs: >-
              Return information only for transactions matching these account
              types, as designated by the institution.
          accounting_date:
            type: optional<string>
            docs: >-
              Return transactions that were processed by the institution on
              exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).
          accounting_date__gt:
            type: optional<string>
            docs: >-
              Return transactions that were processed by the institution after
              this date (`YYYY-MM-DD` or full ISO-8601 timestamp).
          accounting_date__gte:
            type: optional<string>
            docs: >-
              Return transactions that were processed by the institution on this
              date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).
          accounting_date__lt:
            type: optional<string>
            docs: >-
              Return transactions that were processed by the institution before
              this date (`YYYY-MM-DD` or full ISO-8601 timestamp).
          accounting_date__lte:
            type: optional<string>
            docs: >-
              Return transactions that were processed by the institution on this
              date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).
          accounting_date__range:
            type: optional<string>
            docs: >-
              Return transactions that were processed by the institution in this
              date range (`YYYY-MM-DD` or full ISO-8601 timestamp).
          amount:
            type: optional<string>
            docs: Return transactions matching exactly this value.
          amount__gt:
            type: optional<string>
            docs: Return transactions greater than this value.
          amount__gte:
            type: optional<string>
            docs: Return transactions greater than or equal to this value.
          amount__lt:
            type: optional<string>
            docs: Return transactions less than this value.
          amount__lte:
            type: optional<string>
            docs: Return transactions less than or equal to this value.
          amount__range:
            type: optional<string>
            docs: Return transactions between these two values.
          collected_at:
            type: optional<string>
            docs: >-
              Return transactions that were retrieved from the institution on
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          collected_at__gt:
            type: optional<string>
            docs: >-
              Return transactions that were retrieved from the institution after
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          collected_at__gte:
            type: optional<string>
            docs: >-
              Return transactions that were retrieved from the institution after
              or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          collected_at__lt:
            type: optional<string>
            docs: >-
              Return transactions that were retrieved from the institution
              before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          collected_at__lte:
            type: optional<string>
            docs: >-
              Return transactions that were retrieved from the institution
              before or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          collected_at__range:
            type: optional<string>
            docs: >-
              Return transactions that were retrieved from the institution
              between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at:
            type: optional<string>
            docs: >-
              Return transactions that were last updated in Belvo's database on
              this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gt:
            type: optional<string>
            docs: >-
              Return transactions that were last updated in Belvo's database
              after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__gte:
            type: optional<string>
            docs: >-
              Return transactions that were last updated in Belvo's database
              after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lt:
            type: optional<string>
            docs: >-
              Return transactions that were last updated in Belvo's database
              before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          created_at__lte:
            type: optional<string>
            docs: >-
              Return transactions that were last updated in Belvo's database
              before or on this date (`YYYY-MM-DD` or full `ISO-8601`
              timestamp).
          created_at__range:
            type: optional<string>
            docs: >-
              Return transactions that were last updated in Belvo's database
              between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          credit_card_data__bill_name__in:
            type: optional<string>
            docs: Return transactions for one of these bill names.
          currency:
            type: optional<string>
            docs: Return transactions in only this three-letter currency code.
          currency__in:
            type: optional<string>
            docs: Return transactions in one of these three-letter currency codes.
          reference:
            type: optional<string>
            docs: >-
              Returns transactions with this institution-assigned reference
              number.
          reference__in:
            type: optional<string>
            docs: >-
              Returns transactions with these institution-assigned reference
              numbers.
          status:
            type: optional<string>
            docs: >-
              Return transactions with this status. Can be either `PENDING`,
              `PROCESSED`, or `UNCATEGORIZED`.
          status__in:
            type: optional<string>
            docs: >-
              Return transactions with these statuses. Can be either `PENDING`,
              `PROCESSED`, or `UNCATEGORIZED`.
          type:
            type: optional<string>
            docs: >-
              Return transactions with this type. Can be either `INFLOW` or
              `OUTFLOW`.
          type__in:
            type: optional<string>
            docs: >-
              Return transactions with this types. Can be either `INFLOW` or
              `OUTFLOW`.
          value_date:
            type: optional<string>
            docs: >-
              Return transactions that occurred on exactly this date
              (`YYYY-MM-DD` or full ISO-8601 timestamp).
          value_date__gt:
            type: optional<string>
            docs: >-
              Return transactions that occurred after this date (`YYYY-MM-DD` or
              full ISO-8601 timestamp).
          value_date__gte:
            type: optional<string>
            docs: >-
              Return transactions that occurred on this date or later
              (`YYYY-MM-DD` or full ISO-8601 timestamp).
          value_date__lt:
            type: optional<string>
            docs: >-
              Return transactions that occurred before this date (`YYYY-MM-DD`
              or full ISO-8601 timestamp).
          value_date__lte:
            type: optional<string>
            docs: >-
              Return transactions that occurred on this date or earlier
              (`YYYY-MM-DD` or full ISO-8601 timestamp).
          value_date__range:
            type: optional<string>
            docs: >-
              Return transactions for this date range (`YYYY-MM-DD` or full
              ISO-8601 timestamp).
      response:
        docs: Ok
        type: root.TransactionsPaginatedResponse
        status-code: 200
      errors:
        - root.UnauthorizedError
      examples:
        - name: Checking Account Transaction
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
            account__balance__available: '4000.00'
            account__balance__available__lt: '6000.00'
            account__balance__available__lte: '5999.00'
            account__balance__available__range: 3000.00,4350.00
            account__balance__current: '4000.00'
            account__balance__current__gt: '4020.00'
            account__balance__current__gte: '4019.00'
            account__balance__current__lt: '3000.00'
            account__balance__current__lte: '2999.00'
            account__balance__current__range: 2999.00,4000.00
            account__in: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
            account_type: Cuentas de efectivo
            account_type__in: Cuentas de efectivo,Depositos Ahorro
            accounting_date: '2022-05-05'
            accounting_date__gt: '2022-05-06'
            accounting_date__gte: '2022-05-04'
            accounting_date__lt: '2022-03-02'
            accounting_date__lte: '2022-03-01'
            accounting_date__range: 2022-03-01,2022-05-06
            amount: '1000.00'
            amount__gt: '520.00'
            amount__gte: '519.00'
            amount__lt: '540.00'
            amount__lte: '541.00'
            amount__range: 519.00,541.00
            collected_at: '2022-05-01'
            collected_at__gt: '2022-05-05'
            collected_at__gte: '2022-05-04'
            collected_at__lt: '2022-04-01'
            collected_at__lte: '2022-03-30'
            collected_at__range: 2022-03-03,2022-05-04
            created_at: '2022-05-01'
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            credit_card_data__bill_name__in: maio-2022,feb-2022
            currency: COP
            currency__in: COP,MXN
            reference: '085904452810319225'
            reference__in: 085904452810319225,8703
            status: PENDING
            status__in: PENDING,PROCESSED
            type: OUTFLOW
            type__in: INFLOW,OUTFLOW
            value_date: '2022-05-05'
            value_date__gt: '2022-05-06'
            value_date__gte: '2022-05-04'
            value_date__lt: '2022-03-02'
            value_date__lte: '2022-03-01'
            value_date__range: 2022-03-01,2022-05-06
          response:
            body:
              count: 198
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: e5588958-48f2-427c-9300-945207532f5d
                  internal_identification: LCzHexIyHi
                  account:
                    id: 02589c41-ba22-4d44-8558-8111cc751318
                    link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                    institution:
                      name: erebor_mx_retail
                      type: bank
                    collected_at: '2022-02-09T08:45:50Z'
                    created_at: '2022-02-09T08:46:20Z'
                    category: CHECKING_ACCOUNT
                    balance_type: ASSET
                    type: CUENTA NARANJA LITE +
                    name: CUENTA NARANJA LITE +
                    number: '996685090015'
                    balance:
                      current: 0
                      available: 0
                    currency: MXN
                    public_identification_name: CLABE
                    public_identification_value: '058597000010485108'
                    last_accessed_at: '2021-03-09T10:28:40Z'
                    loan_data:
                      collected_at: '2022-02-09T08:45:50Z'
                      principal: 192000
                      outstanding_balance: 182000
                      monthly_payment: 1000
                      contract_end_date: '2027-10-01'
                    bank_product_id: '46'
                    internal_identification: '996685090015'
                  collected_at: '2022-07-20T22:09:33Z'
                  created_at: '2022-07-20T22:09:35Z'
                  value_date: '2022-07-11'
                  accounting_date: '2019-10-23T13:01:41Z'
                  amount: 932.5
                  balance: 16907.96
                  currency: MXN
                  description: Transferencia interbancaria
                  observations: OPTIONAL OBSERVATIONS
                  merchant:
                    logo: https://logo.clearbit.com/asesor-contable.es
                    website: https://merchants-r-us.com
                    merchant_name: Merchants R Us Global
                  category: Income & Payments
                  subcategory: Freelance
                  reference: '085904452810319225'
                  type: INFLOW
                  status: UNCATEGORIZED
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/transactions/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List transactions

                for transaction in client.Transactions.list():
                    pprint(transaction)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Savings Account Transaction
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
            account__balance__available: '4000.00'
            account__balance__available__lt: '6000.00'
            account__balance__available__lte: '5999.00'
            account__balance__available__range: 3000.00,4350.00
            account__balance__current: '4000.00'
            account__balance__current__gt: '4020.00'
            account__balance__current__gte: '4019.00'
            account__balance__current__lt: '3000.00'
            account__balance__current__lte: '2999.00'
            account__balance__current__range: 2999.00,4000.00
            account__in: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
            account_type: Cuentas de efectivo
            account_type__in: Cuentas de efectivo,Depositos Ahorro
            accounting_date: '2022-05-05'
            accounting_date__gt: '2022-05-06'
            accounting_date__gte: '2022-05-04'
            accounting_date__lt: '2022-03-02'
            accounting_date__lte: '2022-03-01'
            accounting_date__range: 2022-03-01,2022-05-06
            amount: '1000.00'
            amount__gt: '520.00'
            amount__gte: '519.00'
            amount__lt: '540.00'
            amount__lte: '541.00'
            amount__range: 519.00,541.00
            collected_at: '2022-05-01'
            collected_at__gt: '2022-05-05'
            collected_at__gte: '2022-05-04'
            collected_at__lt: '2022-04-01'
            collected_at__lte: '2022-03-30'
            collected_at__range: 2022-03-03,2022-05-04
            created_at: '2022-05-01'
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            credit_card_data__bill_name__in: maio-2022,feb-2022
            currency: COP
            currency__in: COP,MXN
            reference: '085904452810319225'
            reference__in: 085904452810319225,8703
            status: PENDING
            status__in: PENDING,PROCESSED
            type: OUTFLOW
            type__in: INFLOW,OUTFLOW
            value_date: '2022-05-05'
            value_date__gt: '2022-05-06'
            value_date__gte: '2022-05-04'
            value_date__lt: '2022-03-02'
            value_date__lte: '2022-03-01'
            value_date__range: 2022-03-01,2022-05-06
          response:
            body:
              count: 198
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: e5588958-48f2-427c-9300-945207532f5d
                  internal_identification: '0089608418'
                  account:
                    id: 02589c41-ba22-4d44-8558-8111cc751318
                    link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                    institution:
                      name: erebor_mx_retail
                      type: bank
                    collected_at: '2022-02-09T08:45:50Z'
                    created_at: '2022-02-09T08:46:20Z'
                    category: SAVINGS_ACCOUNT
                    balance_type: ASSET
                    type: Cuentas de efectivo
                    name: Mi ahorro Erebor
                    number: '997468860036'
                    balance:
                      current: 4.09
                      available: 4.09
                    currency: MXN
                    public_identification_name: CLABE
                    public_identification_value: '058597000011543422'
                    last_accessed_at: '2021-03-09T10:28:40Z'
                    loan_data:
                      collected_at: '2022-02-09T08:45:50Z'
                      principal: 192000
                      outstanding_balance: 182000
                      monthly_payment: 1000
                      contract_end_date: '2027-10-01'
                    internal_identification: '996685090015'
                  collected_at: '2022-07-20T22:09:33Z'
                  created_at: '2022-07-20T22:09:35Z'
                  value_date: '2022-07-11'
                  accounting_date: '2019-10-23T13:01:41Z'
                  amount: 4.09
                  balance: 16907.96
                  currency: MXN
                  description: Interes
                  observations: OPTIONAL OBSERVATIONS
                  merchant:
                    logo: https://logo.clearbit.com/asesor-contable.es
                    website: https://merchants-r-us.com
                    merchant_name: Merchants R Us Global
                  category: Income & Payments
                  subcategory: Freelance
                  reference: '8703'
                  type: INFLOW
                  status: UNCATEGORIZED
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/transactions/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List transactions

                for transaction in client.Transactions.list():
                    pprint(transaction)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Credit Card Transaction
          query-parameters:
            page: 1
            page_size: 100
            omit: link,balance
            fields: link,balance,account
            link: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
            account: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
            account__balance__available: '4000.00'
            account__balance__available__lt: '6000.00'
            account__balance__available__lte: '5999.00'
            account__balance__available__range: 3000.00,4350.00
            account__balance__current: '4000.00'
            account__balance__current__gt: '4020.00'
            account__balance__current__gte: '4019.00'
            account__balance__current__lt: '3000.00'
            account__balance__current__lte: '2999.00'
            account__balance__current__range: 2999.00,4000.00
            account__in: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
            account_type: Cuentas de efectivo
            account_type__in: Cuentas de efectivo,Depositos Ahorro
            accounting_date: '2022-05-05'
            accounting_date__gt: '2022-05-06'
            accounting_date__gte: '2022-05-04'
            accounting_date__lt: '2022-03-02'
            accounting_date__lte: '2022-03-01'
            accounting_date__range: 2022-03-01,2022-05-06
            amount: '1000.00'
            amount__gt: '520.00'
            amount__gte: '519.00'
            amount__lt: '540.00'
            amount__lte: '541.00'
            amount__range: 519.00,541.00
            collected_at: '2022-05-01'
            collected_at__gt: '2022-05-05'
            collected_at__gte: '2022-05-04'
            collected_at__lt: '2022-04-01'
            collected_at__lte: '2022-03-30'
            collected_at__range: 2022-03-03,2022-05-04
            created_at: '2022-05-01'
            created_at__gt: '2022-05-05'
            created_at__gte: '2022-05-04'
            created_at__lt: '2022-04-01'
            created_at__lte: '2022-03-30'
            created_at__range: 2022-03-03,2022-05-04
            credit_card_data__bill_name__in: maio-2022,feb-2022
            currency: COP
            currency__in: COP,MXN
            reference: '085904452810319225'
            reference__in: 085904452810319225,8703
            status: PENDING
            status__in: PENDING,PROCESSED
            type: OUTFLOW
            type__in: INFLOW,OUTFLOW
            value_date: '2022-05-05'
            value_date__gt: '2022-05-06'
            value_date__gte: '2022-05-04'
            value_date__lt: '2022-03-02'
            value_date__lte: '2022-03-01'
            value_date__range: 2022-03-01,2022-05-06
          response:
            body:
              count: 198
              next: https://sandbox.belvo.com/api/{endpoint}/?page=2
              results:
                - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
                  internal_identification: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
                  account:
                    id: 02589c41-ba22-4d44-8558-8111cc751318
                    link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                    institution:
                      name: erebor_mx_retail
                      type: bank
                    collected_at: '2022-02-09T08:45:50Z'
                    created_at: '2022-02-09T08:46:20Z'
                    category: CREDIT_CARD
                    balance_type: LIABILITY
                    type: Tarjetas de cr√©dito
                    name: Erebor Gold
                    number: '4057068115181'
                    balance:
                      current: 5874.13
                      available: 5621.12
                    currency: MXN
                    public_identification_name: CLABE
                    public_identification_value: '150194683119900273'
                    last_accessed_at: '2021-03-09T10:28:40Z'
                    credit_data:
                      credit_limit: 192000
                      collected_at: '2022-02-09T08:45:50Z'
                      cutting_date: '2019-12-11'
                      next_payment_date: '2019-12-01'
                      minimum_payment: 2400
                      no_interest_payment: 37390.83
                      interest_rate: 4
                    loan_data:
                      collected_at: '2022-02-09T08:45:50Z'
                      principal: 192000
                      outstanding_balance: 182000
                      monthly_payment: 1000
                      contract_end_date: '2027-10-01'
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:45:50Z'
                  value_date: '2019-10-23'
                  accounting_date: '2019-10-23T13:01:41Z'
                  amount: 2145.45
                  balance: 16907.96
                  currency: MXN
                  description: SEVEN BUDDHAS RFC:XXXXXXXXXX
                  observations: OPTIONAL OBSERVATIONS
                  merchant:
                    logo: https://logo.clearbit.com/asesor-contable.es
                    website: https://merchants-r-us.com
                    merchant_name: Merchants R Us Global
                  category: Income & Payments
                  subcategory: Freelance
                  reference: '8703'
                  type: OUTFLOW
                  status: PROCESSED
                  credit_card_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    bill_name: apr-2020
                    previous_bill_total: '2000.00'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/transactions/ \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from pprint import pprint

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # List transactions

                for transaction in client.Transactions.list():
                    pprint(transaction)
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.list
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.list()
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveTransactions:
      path: /api/transactions/
      method: POST
      auth: true
      docs: >
        Retrieve transactions for one or more accounts from a specific link.

        <div style="background-color:#f4f6f8; border-left: 6px solid
        #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px"> <strong>Info: </strong> When retrieving
        transactions, it is important to understand that the available
        transaction data ranges depend on each institution. <br><br>

        If you try to access older information than what we can access, we will
        return all the data we can read within that date range. For example, if
        you request transactions for the last year and we can only access the
        last six months, we will return the information corresponding to these
        six months of data. </div>
      source:
        openapi: ../openapi.yml
      display-name: Retrieve transactions for a link
      request:
        body: root.TransactionsRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: RetrieveTransactionsRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<root.Transaction>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - name: Checking Account Transaction
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
            date_from: '2020-08-05'
            date_to: '2020-10-05'
          response:
            body:
              - id: e5588958-48f2-427c-9300-945207532f5d
                internal_identification: LCzHexIyHi
                account:
                  id: 02589c41-ba22-4d44-8558-8111cc751318
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                    type: bank
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  category: CHECKING_ACCOUNT
                  balance_type: ASSET
                  type: CUENTA NARANJA LITE +
                  name: CUENTA NARANJA LITE +
                  number: '996685090015'
                  balance:
                    current: 0
                    available: 0
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '058597000010485108'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  bank_product_id: '46'
                  internal_identification: '996685090015'
                collected_at: '2022-07-20T22:09:33Z'
                created_at: '2022-07-20T22:09:35Z'
                value_date: '2022-07-11'
                accounting_date: '2019-10-23T13:01:41Z'
                amount: 932.5
                balance: 16907.96
                currency: MXN
                description: Transferencia interbancaria
                observations: OPTIONAL OBSERVATIONS
                merchant:
                  logo: https://logo.clearbit.com/asesor-contable.es
                  website: https://merchants-r-us.com
                  merchant_name: Merchants R Us Global
                category: Income & Payments
                subcategory: Freelance
                reference: '085904452810319225'
                type: INFLOW
                status: UNCATEGORIZED
                credit_card_data:
                  collected_at: '2019-09-27T13:01:41Z'
                  bill_name: apr-2020
                  bill_status: PAID
                  bill_amount: 300
                  previous_bill_total: '9614.30'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/transactions/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "account": "",
                    "date_from": "",
                    "date_to": ""
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve transactions

                transactions = client.Transactions.create(
                  "link_id",
                  "2019-07-01",
                  date_to="2019-07-31"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                transactions = sandbox.transactions.retrieve(
                  link: 'link_id',
                  date_from: '2022-01-01',
                  options: {
                    account: account, //optional
                    date_to: '2022-01-24'
                  }
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Savings Account Transaction
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
            date_from: '2020-08-05'
            date_to: '2020-10-05'
          response:
            body:
              - id: e5588958-48f2-427c-9300-945207532f5d
                internal_identification: '0089608418'
                account:
                  id: 02589c41-ba22-4d44-8558-8111cc751318
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                    type: bank
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  category: SAVINGS_ACCOUNT
                  balance_type: ASSET
                  type: Cuentas de efectivo
                  name: Mi ahorro Erebor
                  number: '997468860036'
                  balance:
                    current: 4.09
                    available: 4.09
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '058597000011543422'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  internal_identification: '996685090015'
                collected_at: '2022-07-20T22:09:33Z'
                created_at: '2022-07-20T22:09:35Z'
                value_date: '2022-07-11'
                accounting_date: '2019-10-23T13:01:41Z'
                amount: 4.09
                balance: 16907.96
                currency: MXN
                description: Interes
                observations: OPTIONAL OBSERVATIONS
                merchant:
                  logo: https://logo.clearbit.com/asesor-contable.es
                  website: https://merchants-r-us.com
                  merchant_name: Merchants R Us Global
                category: Income & Payments
                subcategory: Freelance
                reference: '8703'
                type: INFLOW
                status: UNCATEGORIZED
                credit_card_data:
                  collected_at: '2019-09-27T13:01:41Z'
                  bill_name: apr-2020
                  bill_status: PAID
                  bill_amount: 300
                  previous_bill_total: '9614.30'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/transactions/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "account": "",
                    "date_from": "",
                    "date_to": ""
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve transactions

                transactions = client.Transactions.create(
                  "link_id",
                  "2019-07-01",
                  date_to="2019-07-31"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                transactions = sandbox.transactions.retrieve(
                  link: 'link_id',
                  date_from: '2022-01-01',
                  options: {
                    account: account, //optional
                    date_to: '2022-01-24'
                  }
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Credit Card Transaction
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
            date_from: '2020-08-05'
            date_to: '2020-10-05'
          response:
            body:
              - id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
                internal_identification: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
                account:
                  id: 02589c41-ba22-4d44-8558-8111cc751318
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                    type: bank
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  category: CREDIT_CARD
                  balance_type: LIABILITY
                  type: Tarjetas de cr√©dito
                  name: Erebor Gold
                  number: '4057068115181'
                  balance:
                    current: 5874.13
                    available: 5621.12
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '150194683119900273'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2022-02-09T08:45:50Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-01'
                    minimum_payment: 2400
                    no_interest_payment: 37390.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:45:50Z'
                value_date: '2019-10-23'
                accounting_date: '2019-10-23T13:01:41Z'
                amount: 2145.45
                balance: 16907.96
                currency: MXN
                description: SEVEN BUDDHAS RFC:XXXXXXXXXX
                observations: OPTIONAL OBSERVATIONS
                merchant:
                  logo: https://logo.clearbit.com/asesor-contable.es
                  website: https://merchants-r-us.com
                  merchant_name: Merchants R Us Global
                category: Income & Payments
                subcategory: Freelance
                reference: '8703'
                type: OUTFLOW
                status: PROCESSED
                credit_card_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  bill_name: apr-2020
                  bill_status: PAID
                  bill_amount: 300
                  previous_bill_total: '2000.00'
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/transactions/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "account": "",
                    "date_from": "",
                    "date_to": ""
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve transactions

                transactions = client.Transactions.create(
                  "link_id",
                  "2019-07-01",
                  date_to="2019-07-31"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                transactions = sandbox.transactions.retrieve(
                  link: 'link_id',
                  date_from: '2022-01-01',
                  options: {
                    account: account, //optional
                    date_to: '2022-01-24'
                  }
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    RetrieveTransactions_async:
      path: /api/transactions/
      method: POST
      auth: true
      docs: >
        Retrieve transactions for one or more accounts from a specific link.

        <div style="background-color:#f4f6f8; border-left: 6px solid
        #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px"> <strong>Info: </strong> When retrieving
        transactions, it is important to understand that the available
        transaction data ranges depend on each institution. <br><br>

        If you try to access older information than what we can access, we will
        return all the data we can read within that date range. For example, if
        you request transactions for the last year and we can only access the
        last six months, we will return the information corresponding to these
        six months of data. </div>
      source:
        openapi: ../openapi.yml
      display-name: Retrieve transactions for a link
      request:
        body: root.TransactionsRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        headers:
          X-Belvo-Request-Mode:
            type: literal<"async">
            name: belvoRequestMode
        name: RetrieveTransactionsAsyncRequest
        content-type: application/json
      response:
        docs: Accepted (when `X-Belvo-Request-Mode` is `async`)
        type: root.AsynchronousAccepted202
        status-code: 202
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - query-parameters:
            omit: link,balance
            fields: link,balance,account
          headers:
            X-Belvo-Request-Mode: async
          request:
            link: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
            date_from: '2020-08-05'
            date_to: '2020-10-05'
          response:
            body:
              request_id: b5d0106ac9cc43d5b36199fe831f6bbe
          code-samples:
            - language: cURL
              code: |
                curl -X POST \
                  https://sandbox.belvo.com/api/transactions/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                    "link": "",
                    "account": "",
                    "date_from": "",
                    "date_to": ""
                }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Retrieve transactions

                transactions = client.Transactions.create(
                  "link_id",
                  "2019-07-01",
                  date_to="2019-07-31"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                transactions = sandbox.transactions.retrieve(
                  link: 'link_id',
                  date_from: '2022-01-01',
                  options: {
                    account: account, //optional
                    date_to: '2022-01-24'
                  }
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    PatchTransactions:
      path: /api/transactions/
      method: PATCH
      auth: true
      docs: >-
        Used to resume a Transaction retrieve session that was paused because an
        MFA token was required by the institution.
      source:
        openapi: ../openapi.yml
      display-name: Complete a transactions request
      request:
        body: root.PatchBody
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
        name: PatchTransactionsRequest
        content-type: application/json
      response:
        docs: Ok (when `save_data=false`)
        type: list<root.Transaction>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.RequestTimeoutError
        - root.PreconditionError
        - root.InternalServerError
      examples:
        - name: Checking Account Transaction
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: e5588958-48f2-427c-9300-945207532f5d
                internal_identification: LCzHexIyHi
                account:
                  id: 02589c41-ba22-4d44-8558-8111cc751318
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                    type: bank
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  category: CHECKING_ACCOUNT
                  balance_type: ASSET
                  type: CUENTA NARANJA LITE +
                  name: CUENTA NARANJA LITE +
                  number: '996685090015'
                  balance:
                    current: 0
                    available: 0
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '058597000010485108'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  bank_product_id: '46'
                  internal_identification: '996685090015'
                collected_at: '2022-07-20T22:09:33Z'
                created_at: '2022-07-20T22:09:35Z'
                value_date: '2022-07-11'
                accounting_date: '2019-10-23T13:01:41Z'
                amount: 932.5
                balance: 16907.96
                currency: MXN
                description: Transferencia interbancaria
                observations: OPTIONAL OBSERVATIONS
                merchant:
                  logo: https://logo.clearbit.com/asesor-contable.es
                  website: https://merchants-r-us.com
                  merchant_name: Merchants R Us Global
                category: Income & Payments
                subcategory: Freelance
                reference: '085904452810319225'
                type: INFLOW
                status: UNCATEGORIZED
                credit_card_data:
                  collected_at: '2019-09-27T13:01:41Z'
                  bill_name: apr-2020
                  bill_status: PAID
                  bill_amount: 300
                  previous_bill_total: '9614.30'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/transactions/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume transactions

                transactions = client.Transactions.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.resume(
                  session: 'session-id',
                  token: 'token',
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Savings Account Transaction
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: e5588958-48f2-427c-9300-945207532f5d
                internal_identification: '0089608418'
                account:
                  id: 02589c41-ba22-4d44-8558-8111cc751318
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                    type: bank
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  category: SAVINGS_ACCOUNT
                  balance_type: ASSET
                  type: Cuentas de efectivo
                  name: Mi ahorro Erebor
                  number: '997468860036'
                  balance:
                    current: 4.09
                    available: 4.09
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '058597000011543422'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2019-09-27T13:01:41Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-13'
                    minimum_payment: 2400.3
                    no_interest_payment: 2690.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  funds_data:
                    - collected_at: '2020-04-23T21:32:55Z'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                  internal_identification: '996685090015'
                collected_at: '2022-07-20T22:09:33Z'
                created_at: '2022-07-20T22:09:35Z'
                value_date: '2022-07-11'
                accounting_date: '2019-10-23T13:01:41Z'
                amount: 4.09
                balance: 16907.96
                currency: MXN
                description: Interes
                observations: OPTIONAL OBSERVATIONS
                merchant:
                  logo: https://logo.clearbit.com/asesor-contable.es
                  website: https://merchants-r-us.com
                  merchant_name: Merchants R Us Global
                category: Income & Payments
                subcategory: Freelance
                reference: '8703'
                type: INFLOW
                status: UNCATEGORIZED
                credit_card_data:
                  collected_at: '2019-09-27T13:01:41Z'
                  bill_name: apr-2020
                  bill_status: PAID
                  bill_amount: 300
                  previous_bill_total: '9614.30'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/transactions/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume transactions

                transactions = client.Transactions.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.resume(
                  session: 'session-id',
                  token: 'token',
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Credit Card Transaction
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          request:
            session: 6e7b283c6efa449c9c028a16b5c249fa
            link: 683005d6-f45c-4adb-b289-f1a12f50f80c
          response:
            body:
              - id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
                internal_identification: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
                account:
                  id: 02589c41-ba22-4d44-8558-8111cc751318
                  link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                  institution:
                    name: erebor_mx_retail
                    type: bank
                  collected_at: '2022-02-09T08:45:50Z'
                  created_at: '2022-02-09T08:46:20Z'
                  category: CREDIT_CARD
                  balance_type: LIABILITY
                  type: Tarjetas de cr√©dito
                  name: Erebor Gold
                  number: '4057068115181'
                  balance:
                    current: 5874.13
                    available: 5621.12
                  currency: MXN
                  public_identification_name: CLABE
                  public_identification_value: '150194683119900273'
                  last_accessed_at: '2021-03-09T10:28:40Z'
                  credit_data:
                    credit_limit: 192000
                    collected_at: '2022-02-09T08:45:50Z'
                    cutting_date: '2019-12-11'
                    next_payment_date: '2019-12-01'
                    minimum_payment: 2400
                    no_interest_payment: 37390.83
                    interest_rate: 4
                  loan_data:
                    collected_at: '2022-02-09T08:45:50Z'
                    principal: 192000
                    outstanding_balance: 182000
                    monthly_payment: 1000
                    contract_end_date: '2027-10-01'
                  receivables_data:
                    current: 2193.83
                    available: 800.37
                    anticipated: 1393.46
                    collected_at: '2022-02-09T08:45:50Z'
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:45:50Z'
                value_date: '2019-10-23'
                accounting_date: '2019-10-23T13:01:41Z'
                amount: 2145.45
                balance: 16907.96
                currency: MXN
                description: SEVEN BUDDHAS RFC:XXXXXXXXXX
                observations: OPTIONAL OBSERVATIONS
                merchant:
                  logo: https://logo.clearbit.com/asesor-contable.es
                  website: https://merchants-r-us.com
                  merchant_name: Merchants R Us Global
                category: Income & Payments
                subcategory: Freelance
                reference: '8703'
                type: OUTFLOW
                status: PROCESSED
                credit_card_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  bill_name: apr-2020
                  bill_status: PAID
                  bill_amount: 300
                  previous_bill_total: '2000.00'
          code-samples:
            - language: cURL
              code: |
                curl -X PATCH \
                  https://sandbox.belvo.com/api/transactions/ \
                  -H 'Content-Type: application/json' \
                  -H 'Host: sandbox.belvo.com' \
                  -H 'cache-control: no-cache' \
                  -d '{
                      "session": "",
                      "token": "",
                      "link": ""
                  }' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Resume transactions

                transactions = client.Transactions.resume(
                  session="session_id",
                  token="token",
                  link="link_id"
                )
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.resume(
                  session: 'session-id',
                  token: 'token',
                  link: 'link-id'
                )
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DetailTransaction:
      path: /api/transactions/{id}/
      method: GET
      auth: true
      docs: Get the details of a specific transaction.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `transaction.id` you want to get detailed information about.
      display-name: Get a transaction's details
      request:
        name: DetailTransactionRequest
        query-parameters:
          omit:
            type: optional<string>
            docs: >-
              Omit certain fields from being returned in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
          fields:
            type: optional<string>
            docs: >-
              Return only the specified fields in the response. For more
              information, see our [Filtering
              responses](https://developers.belvo.com/docs/searching-and-filtering)
              DevPortal article.
      response:
        docs: Ok
        type: root.Transaction
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - name: Checking Account Transaction
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: e5588958-48f2-427c-9300-945207532f5d
              internal_identification: LCzHexIyHi
              account:
                id: 02589c41-ba22-4d44-8558-8111cc751318
                link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: CHECKING_ACCOUNT
                balance_type: ASSET
                type: CUENTA NARANJA LITE +
                name: CUENTA NARANJA LITE +
                number: '996685090015'
                balance:
                  current: 0
                  available: 0
                currency: MXN
                public_identification_name: CLABE
                public_identification_value: '058597000010485108'
                last_accessed_at: '2021-03-09T10:28:40Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                funds_data:
                  - collected_at: '2020-04-23T21:32:55Z'
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
                bank_product_id: '46'
                internal_identification: '996685090015'
              collected_at: '2022-07-20T22:09:33Z'
              created_at: '2022-07-20T22:09:35Z'
              value_date: '2022-07-11'
              accounting_date: '2019-10-23T13:01:41Z'
              amount: 932.5
              balance: 16907.96
              currency: MXN
              description: Transferencia interbancaria
              observations: OPTIONAL OBSERVATIONS
              merchant:
                logo: https://logo.clearbit.com/asesor-contable.es
                website: https://merchants-r-us.com
                merchant_name: Merchants R Us Global
              category: Income & Payments
              subcategory: Freelance
              reference: '085904452810319225'
              type: INFLOW
              status: UNCATEGORIZED
              credit_card_data:
                collected_at: '2019-09-27T13:01:41Z'
                bill_name: apr-2020
                bill_status: PAID
                bill_amount: 300
                previous_bill_total: '9614.30'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/transactions/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a transaction

                transaction = client.Transactions.get(id="transaction-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.detail id: 'transaction-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.detail('transactionId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Savings Account Transaction
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: e5588958-48f2-427c-9300-945207532f5d
              internal_identification: '0089608418'
              account:
                id: 02589c41-ba22-4d44-8558-8111cc751318
                link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: SAVINGS_ACCOUNT
                balance_type: ASSET
                type: Cuentas de efectivo
                name: Mi ahorro Erebor
                number: '997468860036'
                balance:
                  current: 4.09
                  available: 4.09
                currency: MXN
                public_identification_name: CLABE
                public_identification_value: '058597000011543422'
                last_accessed_at: '2021-03-09T10:28:40Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2019-09-27T13:01:41Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-13'
                  minimum_payment: 2400.3
                  no_interest_payment: 2690.83
                  interest_rate: 4
                  end_date: end_date
                  monthly_payment: 1.1
                  last_payment_date: last_payment_date
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                funds_data:
                  - collected_at: '2020-04-23T21:32:55Z'
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
                internal_identification: '996685090015'
              collected_at: '2022-07-20T22:09:33Z'
              created_at: '2022-07-20T22:09:35Z'
              value_date: '2022-07-11'
              accounting_date: '2019-10-23T13:01:41Z'
              amount: 4.09
              balance: 16907.96
              currency: MXN
              description: Interes
              observations: OPTIONAL OBSERVATIONS
              merchant:
                logo: https://logo.clearbit.com/asesor-contable.es
                website: https://merchants-r-us.com
                merchant_name: Merchants R Us Global
              category: Income & Payments
              subcategory: Freelance
              reference: '8703'
              type: INFLOW
              status: UNCATEGORIZED
              credit_card_data:
                collected_at: '2019-09-27T13:01:41Z'
                bill_name: apr-2020
                bill_status: PAID
                bill_amount: 300
                previous_bill_total: '9614.30'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/transactions/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a transaction

                transaction = client.Transactions.get(id="transaction-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.detail id: 'transaction-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.detail('transactionId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
        - name: Credit Card Transaction
          path-parameters:
            id: id
          query-parameters:
            omit: link,balance
            fields: link,balance,account
          response:
            body:
              id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
              internal_identification: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
              account:
                id: 02589c41-ba22-4d44-8558-8111cc751318
                link: 30cb4806-6e00-48a4-91c9-ca55968576c8
                institution:
                  name: erebor_mx_retail
                  type: bank
                collected_at: '2022-02-09T08:45:50Z'
                created_at: '2022-02-09T08:46:20Z'
                category: CREDIT_CARD
                balance_type: LIABILITY
                type: Tarjetas de cr√©dito
                name: Erebor Gold
                number: '4057068115181'
                balance:
                  current: 5874.13
                  available: 5621.12
                currency: MXN
                public_identification_name: CLABE
                public_identification_value: '150194683119900273'
                last_accessed_at: '2021-03-09T10:28:40Z'
                credit_data:
                  credit_limit: 192000
                  collected_at: '2022-02-09T08:45:50Z'
                  cutting_date: '2019-12-11'
                  next_payment_date: '2019-12-01'
                  minimum_payment: 2400
                  no_interest_payment: 37390.83
                  interest_rate: 4
                loan_data:
                  collected_at: '2022-02-09T08:45:50Z'
                  contract_amount: 202000
                  principal: 192000
                  loan_type: Consignado
                  payment_day: '27'
                  outstanding_principal: 142023
                  outstanding_balance: 182000
                  monthly_payment: 1000
                  interest_rates:
                    - name: jurosEfetivo
                      value: 7.85
                  fees:
                    - type: OPERATION_FEE
                      value: 5.6
                  number_of_installments_total: 60
                  number_of_installments_outstanding: 48
                  contract_start_date: '2020-03-01'
                  contract_end_date: '2027-10-01'
                  contract_number: 890ASLDJF87SD00
                  credit_limit: 1.1
                  last_period_balance: 1.1
                  interest_rate: 1.1
                  limit_day: limit_day
                  cutting_day: cutting_day
                  cutting_date: cutting_date
                  last_payment_date: last_payment_date
                  no_interest_payment: 1.1
                receivables_data:
                  current: 2193.83
                  available: 800.37
                  anticipated: 1393.46
                  collected_at: '2022-02-09T08:45:50Z'
              collected_at: '2022-02-09T08:45:50Z'
              created_at: '2022-02-09T08:45:50Z'
              value_date: '2019-10-23'
              accounting_date: '2019-10-23T13:01:41Z'
              amount: 2145.45
              balance: 16907.96
              currency: MXN
              description: SEVEN BUDDHAS RFC:XXXXXXXXXX
              observations: OPTIONAL OBSERVATIONS
              merchant:
                logo: https://logo.clearbit.com/asesor-contable.es
                website: https://merchants-r-us.com
                merchant_name: Merchants R Us Global
              category: Income & Payments
              subcategory: Freelance
              reference: '8703'
              type: OUTFLOW
              status: PROCESSED
              credit_card_data:
                collected_at: '2022-02-09T08:45:50Z'
                bill_name: apr-2020
                bill_status: PAID
                bill_amount: 300
                previous_bill_total: '2000.00'
          code-samples:
            - language: cURL
              code: |
                curl https://sandbox.belvo.com/api/transactions/{id} \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Get a transaction

                transaction = client.Transactions.get(id="transaction-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.detail id: 'transaction-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.detail('transactionId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
    DestroyTransaction:
      path: /api/transactions/{id}/
      method: DELETE
      auth: true
      docs: Delete a specific transaction from your Belvo account.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The `transaction.id` that you want to delete.
      display-name: Delete a transaction
      errors:
        - root.UnauthorizedError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - language: cURL
              code: |
                curl -X DELETE \
                  https://sandbox.belvo.com/api/transactions/{id}/ \
                  -H 'Host: sandbox.belvo.com' \
                  -u [Secret Key ID]:[Secret Key PASSWORD]
            - name: Belvo Python SDK
              language: python
              code: >
                # check our python-client library on github

                # https://github.com/belvo-finance/belvo-python

                from belvo.client import Client


                # Login to Belvo API

                client = Client("Secret Key ID", "Secret Key PASSWORD",
                "sandbox")


                # Delete a transaction

                client.Transactions.delete("transaction-id")
            - name: Belvo Ruby SDK
              language: ruby
              code: |
                # check our Ruby gem on github
                # https://github.com/belvo-finance/belvo-ruby
                require 'belvo'

                sandbox = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                sandbox.transactions.delete id: 'transaction-id'
            - name: Belvo Node SDK
              language: node
              code: |
                // check our node package on github
                // https://github.com/belvo-finance/belvo-js

                var belvo = require('belvo').default;

                var client = new belvo(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                );

                client.connect()
                  .then(function () {
                    client.transactions.delete('transactionId')
                      .then(function (res) {
                        console.log(res);
                      })
                      .catch(function (error) {
                        console.log(error);
                      });
                });
  source:
    openapi: ../openapi.yml
  display-name: Transactions
docs: >-
  A **transaction** contains the detailed information of each movement inside an
  account. For example, a purchase at a store or a restaurant.


  ### **üî¶ Filterable fields**


  Please see the table below for an alphabetized list of fields that you can
  filter your responses by. For more information on how to use filters, see our
  [Filtering
  responses](https://developers.belvo.com/docs/searching-and-filtering) article.


  | Field                         | Available Filters                      |

  | ----------------------------- | -------------------------------------- |

  | `account`                     | `=`, `in`                              |

  | `account**balance**available` | `=`, `lt`, `lte`, `range`              |

  | `account**balance**current`   | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `account_type`                | `=`, `in`                              |

  | `accounting_date`             | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `amount`                      | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

  | `credit_card_data__bill_name` | `=`, `in`                              |

  | `created_at `                 | `gt`, `gte`, `lt`, `lte`, `range`      |

  | `currency`                    | `=`, `in`                              |

  | `id`                          | `=`, `in`                              |

  | `institution`                 | `=`, `in`                              |

  | `link`                        | `=`, `in`                              |

  | `reference`                   | `=`, `in`                              |

  | `status`                      | `=`, `in`                              |

  | `type`                        | `=`, `in`                              |

  | `value_date`                  | `=`, `gt`, `gte`, `lt`, `lte`, `range` |


  ```curl cURL

  # Filtering results to have transactions just from one link

  https://api.belvo.com/api/transactions/?link=link_id


  # Filtering results to have transactions just form one link and between a date
  range

  https://api.belvo.com/api/transactions/?link=link_id&value_date__range=2020-10-01,2020-12-01


  ```

  ```javascript Node

  // Filtering results to have transactions just from one link


  client.transactions.list({
    filters: {
      link: "link_id"
    }
  })


  // Filtering results to have transactions just form one link and between a
  date range

  client.transactions.list({
    filters: {
      link: "link_id",
      value_date__range: "2020-10-01,2020-12-01"
    }
  })


  ```

  ```python Python

  # Filtering results to have links just from two institutions

  client.Transactions.list(link="link_id")


  # Filtering results from one institution and a certain status

  client.Transactions.list(link="link_id",
  value_date__range="2020-10-01,2020-12-01")


  ```

  ```ruby Ruby

  # Filtering results to have links just from two institutions

  client.transactions.list(params: {
    link: "link_id"
  })


  # Filtering results from one institution and a certain status

  client.transactions.list(params: {
    link: "link_id",
    value_date__range: "2020-10-01,2020-12-01"
  })

  ```
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BasicAuthScheme",
      "auth-schemes": {
        "BasicAuthScheme": {
          "scheme": "basic",
        },
      },
      "default-environment": "Production",
      "display-name": "Belvo API Docs",
      "environments": {
        "Development": "https://development.belvo.com",
        "Production": "https://api.belvo.com",
        "Sandbox": "https://sandbox.belvo.com",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Belvo API Docs
default-environment: Production
environments:
  Production: https://api.belvo.com
  Sandbox: https://sandbox.belvo.com
  Development: https://development.belvo.com
auth-schemes:
  BasicAuthScheme:
    scheme: basic
auth: BasicAuthScheme
",
  },
}