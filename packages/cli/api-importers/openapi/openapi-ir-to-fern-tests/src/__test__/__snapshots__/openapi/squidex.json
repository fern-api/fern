{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "BadRequestError": {
            "docs": "User request not valid.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "message",
                  "statusCode": 1,
                },
              },
            ],
            "status-code": 400,
            "type": "ErrorDto",
          },
          "ConflictError": {
            "docs": "Team name is already in use.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "message",
                  "statusCode": 1,
                },
              },
            ],
            "status-code": 409,
            "type": "ErrorDto",
          },
          "ContentTooLargeError": {
            "docs": "Asset exceeds the maximum upload size.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "message",
                  "statusCode": 1,
                },
              },
            ],
            "status-code": 413,
            "type": "ErrorDto",
          },
          "ForbiddenError": {
            "docs": "User is the current user.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "message",
                  "statusCode": 1,
                },
              },
            ],
            "status-code": 403,
            "type": "ErrorDto",
          },
          "InternalServerError": {
            "docs": "Operation failed.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "message",
                  "statusCode": 1,
                },
              },
            ],
            "status-code": 500,
            "type": "ErrorDto",
          },
          "NotFoundError": {
            "docs": "User not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "NotImplementedError": {
            "docs": "Not configured.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "message",
                  "statusCode": 1,
                },
              },
            ],
            "status-code": 501,
            "type": "ErrorDto",
          },
        },
        "types": {
          "ActionTypeEnum": {
            "docs": "",
            "enum": [
              "Broadcast",
              "User",
              "Group",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AddFieldDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The name of the field. Must be unique within the schema.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$",
                },
              },
              "partitioning": {
                "docs": "Determines the optional partitioning of the field.",
                "type": "optional<string>",
              },
              "properties": {
                "docs": "The field properties.",
                "type": "FieldPropertiesDto",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AlgoliaRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "apiKey": {
                "docs": "The API key to grant access to Squidex.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "appId": {
                "docs": "The application ID.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "delete": {
                "docs": "The condition when to delete the entry.",
                "type": "string",
              },
              "document": {
                "docs": "The optional custom document.",
                "type": "string",
              },
              "indexName": {
                "docs": "The name of the index.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AllContentsByPostDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ids": {
                "docs": "The list of ids to query.",
                "type": "optional<list<string>>",
              },
              "oData": {
                "docs": "The optional odata query.",
                "type": "optional<string>",
              },
              "q": "optional<unknown>",
              "references": {
                "docs": "The ID of the reference content item.",
                "type": "optional<string>",
              },
              "referencing": {
                "docs": "The ID of the referencing content item.",
                "type": "optional<string>",
              },
              "scheduledFrom": {
                "docs": "The start of the schedule.",
                "type": "optional<datetime>",
              },
              "scheduledTo": {
                "docs": "The end of the schedule.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AppDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "canAccessApi": {
                "availability": "deprecated",
                "docs": "Indicates if the user can access the api.",
                "type": "boolean",
              },
              "canAccessContent": {
                "docs": "Indicates if the user can access at least one content.",
                "type": "boolean",
              },
              "created": {
                "docs": "The timestamp when the app has been created.",
                "type": "datetime",
              },
              "description": {
                "docs": "The optional description of the app.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "The ID of the app.",
                "type": "string",
              },
              "label": {
                "docs": "The optional label of the app.",
                "type": "optional<string>",
              },
              "lastModified": {
                "docs": "The timestamp when the app has been modified last.",
                "type": "datetime",
              },
              "name": {
                "docs": "The name of the app.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^[a-z0-9]+(\-[a-z0-9]+)*$",
                },
              },
              "permissions": {
                "docs": "The permission level of the user.",
                "type": "list<string>",
              },
              "roleName": {
                "docs": "The role name of the user.",
                "type": "optional<string>",
              },
              "roleProperties": {
                "docs": "The properties from the role.",
                "type": "map<string, unknown>",
              },
              "teamId": {
                "docs": "The ID of the team.",
                "type": "optional<string>",
              },
              "version": {
                "docs": "The version of the app.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AppLanguageDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "englishName": {
                "docs": "The english name of the language.",
                "type": "string",
              },
              "fallback": {
                "docs": "The fallback languages.",
                "type": "list<string>",
              },
              "isMaster": {
                "docs": "Indicates if the language is the master language.",
                "type": "boolean",
              },
              "isOptional": {
                "docs": "Indicates if the language is optional.",
                "type": "boolean",
              },
              "iso2Code": {
                "docs": "The iso code of the language.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AppLanguagesDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The languages.",
                "type": "list<AppLanguageDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AppSettingsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "editors": {
                "docs": "The configured UI editors.",
                "type": "list<EditorDto>",
              },
              "hideDateTimeModeButton": {
                "docs": "Hide the datetime mode button.",
                "type": "boolean",
              },
              "hideScheduler": {
                "docs": "Hide the scheduler for content items.",
                "type": "boolean",
              },
              "patterns": {
                "docs": "The configured app patterns.",
                "type": "list<PatternDto>",
              },
              "version": {
                "docs": "The version of the app.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ArrayFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "maxItems": {
                "docs": "The maximum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "minItems": {
                "docs": "The minimum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "uniqueFields": {
                "docs": "The fields that must be unique.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetChangedRuleTriggerDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "condition": {
                "docs": "Javascript condition when to trigger.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "_meta": {
                "docs": "The metadata.",
                "type": "optional<AssetMeta>",
              },
              "created": {
                "docs": "The date and time when the asset has been created.",
                "type": "datetime",
              },
              "createdBy": {
                "docs": "The user that has created the schema.",
                "type": "string",
              },
              "editToken": {
                "docs": "The UI token.",
                "type": "optional<string>",
              },
              "fileHash": {
                "docs": "The file hash.",
                "type": "optional<string>",
              },
              "fileName": {
                "docs": "The file name.",
                "type": "string",
              },
              "fileSize": {
                "docs": "The size of the file in bytes.",
                "type": "long",
              },
              "fileType": {
                "docs": "The file type.",
                "type": "string",
              },
              "fileVersion": {
                "docs": "The version of the file.",
                "type": "long",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
              "isImage": {
                "availability": "deprecated",
                "docs": "Determines of the created file is an image.",
                "type": "boolean",
              },
              "isProtected": {
                "docs": "True, when the asset is not public.",
                "type": "boolean",
              },
              "lastModified": {
                "docs": "The date and time when the asset has been modified last.",
                "type": "datetime",
              },
              "lastModifiedBy": {
                "docs": "The user that has updated the asset.",
                "type": "string",
              },
              "metadata": {
                "docs": "The asset metadata.",
                "type": "map<string, unknown>",
              },
              "metadataText": {
                "docs": "The formatted text representation of the metadata.",
                "type": "string",
              },
              "mimeType": {
                "docs": "The mime type.",
                "type": "string",
              },
              "parentId": {
                "docs": "The ID of the parent folder. Empty for files without parent.",
                "type": "string",
              },
              "pixelHeight": {
                "availability": "deprecated",
                "docs": "The height of the image in pixels if the asset is an image.",
                "type": "optional<integer>",
              },
              "pixelWidth": {
                "availability": "deprecated",
                "docs": "The width of the image in pixels if the asset is an image.",
                "type": "optional<integer>",
              },
              "slug": {
                "docs": "The slug.",
                "type": "string",
              },
              "tags": {
                "docs": "The asset tags.",
                "type": "optional<list<string>>",
              },
              "type": {
                "docs": "The type of the asset.",
                "type": "AssetType",
              },
              "version": {
                "docs": "The version of the asset.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetFolderDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "folderName": {
                "docs": "The folder name.",
                "type": "string",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
              "parentId": {
                "docs": "The ID of the parent folder. Empty for files without parent.",
                "type": "string",
              },
              "version": {
                "docs": "The version of the asset folder.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetFolderScope": {
            "docs": "",
            "enum": [
              "PathAndItems",
              "Path",
              "Items",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetFoldersDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The assets folders.",
                "type": "list<AssetFolderDto>",
              },
              "path": {
                "docs": "The path to the current folder.",
                "type": "list<AssetFolderDto>",
              },
              "total": {
                "docs": "The total number of assets.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetMeta": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isDuplicate": {
                "docs": "Indicates whether the asset is a duplicate.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetPreviewMode": {
            "docs": "",
            "enum": [
              "ImageAndFileName",
              "Image",
              "FileName",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetScriptsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "annotate": {
                "docs": "The script that is executed when annotating a content.",
                "type": "optional<string>",
              },
              "create": {
                "docs": "The script that is executed when creating an asset.",
                "type": "optional<string>",
              },
              "delete": {
                "docs": "The script that is executed when deleting a content.",
                "type": "optional<string>",
              },
              "move": {
                "docs": "The script that is executed when moving a content.",
                "type": "optional<string>",
              },
              "query": {
                "docs": "The script that is executed for each asset when querying assets.",
                "type": "optional<string>",
              },
              "queryPre": {
                "docs": "The script that is executed for all assets when querying assets.",
                "type": "optional<string>",
              },
              "update": {
                "docs": "The script that is executed when updating a content.",
                "type": "optional<string>",
              },
              "version": {
                "docs": "The version of the app.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetType": {
            "docs": "",
            "enum": [
              "Unknown",
              "Image",
              "Audio",
              "Video",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The assets.",
                "type": "list<AssetDto>",
              },
              "total": {
                "docs": "The total number of assets.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssetsFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowDuplicates": {
                "docs": "True, if duplicate values are allowed.",
                "type": "boolean",
              },
              "allowedExtensions": {
                "docs": "The allowed file extensions.",
                "type": "optional<list<string>>",
              },
              "aspectHeight": {
                "docs": "The image aspect height in pixels.",
                "type": "optional<integer>",
              },
              "aspectWidth": {
                "docs": "The image aspect width in pixels.",
                "type": "optional<integer>",
              },
              "defaultValue": {
                "docs": "The default value as a list of asset ids.",
                "type": "optional<list<string>>",
              },
              "defaultValues": {
                "docs": "The language specific default value as a list of asset ids.",
                "type": "optional<LocalizedValueOfReadonlyListOfString>",
              },
              "expectedType": {
                "docs": "The expected type.",
                "type": "optional<AssetType>",
              },
              "folderId": {
                "docs": "The initial id to the folder.",
                "type": "optional<string>",
              },
              "maxHeight": {
                "docs": "The maximum image height in pixels.",
                "type": "optional<integer>",
              },
              "maxItems": {
                "docs": "The maximum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "maxSize": {
                "docs": "The maximum file size in bytes.",
                "type": "optional<integer>",
              },
              "maxWidth": {
                "docs": "The maximum image width in pixels.",
                "type": "optional<integer>",
              },
              "minHeight": {
                "docs": "The minimum image height in pixels.",
                "type": "optional<integer>",
              },
              "minItems": {
                "docs": "The minimum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "minSize": {
                "docs": "The minimum file size in bytes.",
                "type": "optional<integer>",
              },
              "minWidth": {
                "docs": "The minimum image width in pixels.",
                "type": "optional<integer>",
              },
              "mustBeImage": {
                "availability": "deprecated",
                "docs": "True to resolve first image in the content list.",
                "type": "boolean",
              },
              "previewFormat": {
                "docs": "The preview format.",
                "type": "optional<string>",
              },
              "previewMode": {
                "docs": "The preview mode for the asset.",
                "type": "AssetPreviewMode",
              },
              "resolveFirst": {
                "docs": "True to resolve first asset in the content list.",
                "type": "boolean",
              },
              "resolveImage": {
                "availability": "deprecated",
                "docs": "True to resolve first image in the content list.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AssignContributorDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "contributorId": {
                "docs": "The id or email of the user to add to the app.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "invite": {
                "docs": "Set to true to invite the user if he does not exist.",
                "type": "optional<boolean>",
              },
              "role": {
                "docs": "The role of the contributor.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AzureQueueRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "connectionString": {
                "docs": "The connection string to the storage account.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "payload": {
                "docs": "Leave it empty to use the full event as body.",
                "type": "string",
              },
              "queue": {
                "docs": "The name of the queue.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BackupJobDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "handledAssets": {
                "docs": "The number of handled assets.",
                "type": "integer",
              },
              "handledEvents": {
                "docs": "The number of handled events.",
                "type": "integer",
              },
              "id": {
                "docs": "The ID of the backup job.",
                "type": "string",
              },
              "started": {
                "docs": "The time when the job has been started.",
                "type": "datetime",
              },
              "status": {
                "docs": "The status of the operation.",
                "type": "JobStatus",
              },
              "stopped": {
                "docs": "The time when the job has been stopped.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BackupJobsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The backups.",
                "type": "list<BackupJobDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BooleanFieldEditor": {
            "docs": "",
            "enum": [
              "Checkbox",
              "Toggle",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BooleanFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "defaultValue": {
                "docs": "The default value for the field value.",
                "type": "optional<boolean>",
              },
              "defaultValues": {
                "docs": "The language specific default value for the field value.",
                "type": "optional<LocalizedValueOfNullableBoolean>",
              },
              "editor": {
                "docs": "The editor that is used to manage this field.",
                "type": "BooleanFieldEditor",
              },
              "inlineEditable": {
                "docs": "Indicates that the inline editor is enabled for this field.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BulkResultDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "contentId": {
                "availability": "deprecated",
                "docs": "The ID of the entity that has been handled successfully or not.",
                "type": "optional<string>",
              },
              "error": {
                "docs": "The error when the bulk job failed.",
                "type": "optional<ErrorDto>",
              },
              "id": {
                "docs": "The ID of the entity that has been handled successfully or not.",
                "type": "optional<string>",
              },
              "jobIndex": {
                "docs": "The index of the bulk job where the result belongs to. The order can change.",
                "type": "integer",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BulkUpdateAssetType": {
            "docs": "",
            "enum": [
              "Annotate",
              "Move",
              "Delete",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BulkUpdateAssetsJobDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "expectedVersion": {
                "docs": "The expected version.",
                "type": "optional<long>",
              },
              "fileName": {
                "docs": "The new name of the asset.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "An optional ID of the asset to update.",
                "type": "optional<string>",
              },
              "isProtected": {
                "docs": "True, when the asset is not public.",
                "type": "optional<boolean>",
              },
              "metadata": {
                "docs": "The asset metadata.",
                "type": "optional<map<string, unknown>>",
              },
              "parentId": {
                "docs": "The parent folder id.",
                "type": "optional<string>",
              },
              "permanent": {
                "docs": "True to delete the asset permanently.",
                "type": "optional<boolean>",
              },
              "slug": {
                "docs": "The new slug of the asset.",
                "type": "optional<string>",
              },
              "tags": {
                "docs": "The new asset tags.",
                "type": "optional<list<string>>",
              },
              "type": {
                "docs": "The update type.",
                "type": "optional<BulkUpdateAssetType>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BulkUpdateContentType": {
            "docs": "",
            "enum": [
              "Upsert",
              "ChangeStatus",
              "Create",
              "Delete",
              "Patch",
              "Update",
              "Validate",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BulkUpdateContentsJobDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "The data of the content when type is set to 'Upsert', 'Create', 'Update' or 'Patch.",
                "type": "optional<ContentData>",
              },
              "dueTime": {
                "docs": "The due time.",
                "type": "optional<datetime>",
              },
              "expectedCount": {
                "docs": "The number of expected items. Set it to a higher number to update multiple items when a query is defined.",
                "type": "optional<long>",
              },
              "expectedVersion": {
                "docs": "The expected version.",
                "type": "optional<long>",
              },
              "id": {
                "docs": "An optional ID of the content to update.",
                "type": "optional<string>",
              },
              "patch": {
                "docs": "Makes the update as patch.",
                "type": "optional<boolean>",
              },
              "permanent": {
                "docs": "True to delete the content permanently.",
                "type": "optional<boolean>",
              },
              "query": {
                "docs": "An optional query to identify the content to update.",
                "type": "optional<QueryJsonDto>",
              },
              "schema": {
                "docs": "The optional schema id or name.",
                "type": "optional<string>",
              },
              "status": {
                "docs": "The new status when the type is set to 'ChangeStatus' or 'Upsert'.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The update type.",
                "type": "optional<BulkUpdateContentType>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CallsUsageDtoDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowedBytes": {
                "docs": "The included API traffic.",
                "type": "long",
              },
              "allowedCalls": {
                "docs": "The included API calls.",
                "type": "long",
              },
              "averageElapsedMs": {
                "docs": "The average duration in milliseconds.",
                "type": "double",
              },
              "blockingApiCalls": {
                "docs": "The amount of calls that will block the app.",
                "type": "long",
              },
              "details": {
                "docs": "The statistics by date and group.",
                "type": "map<string, list<CallsUsagePerDateDto>>",
              },
              "monthBytes": {
                "docs": "The total number of bytes transferred this month.",
                "type": "long",
              },
              "monthCalls": {
                "docs": "The total number of API calls this month.",
                "type": "long",
              },
              "totalBytes": {
                "docs": "The total number of bytes transferred.",
                "type": "long",
              },
              "totalCalls": {
                "docs": "The total number of API calls.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CallsUsagePerDateDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "averageElapsedMs": {
                "docs": "The average duration in milliseconds.",
                "type": "double",
              },
              "date": {
                "docs": "The date when the usage was tracked.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "totalBytes": {
                "docs": "The total number of bytes transferred.",
                "type": "long",
              },
              "totalCalls": {
                "docs": "The total number of API calls.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ChangePlanDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "planId": {
                "docs": "The new plan id.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "allowAnonymous": {
                "docs": "True to allow anonymous access without an access token for this client.",
                "type": "boolean",
              },
              "apiCallsLimit": {
                "docs": "The number of allowed api calls per month for this client.",
                "type": "long",
              },
              "apiTrafficLimit": {
                "docs": "The number of allowed api traffic bytes per month for this client.",
                "type": "long",
              },
              "id": {
                "docs": "The client id.",
                "type": "string",
              },
              "name": {
                "docs": "The client name.",
                "type": "string",
              },
              "role": {
                "docs": "The role of the client.",
                "type": "optional<string>",
              },
              "secret": {
                "docs": "The client secret.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The clients.",
                "type": "list<ClientDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CommentDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "text": {
                "docs": "The text of the comment.",
                "type": "string",
              },
              "time": {
                "docs": "The time when the comment was created or updated last.",
                "type": "datetime",
              },
              "url": {
                "docs": "The url where the comment is created.",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user": {
                "docs": "The user who created or updated the comment.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CommentRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client": {
                "docs": "An optional client name.",
                "type": "string",
              },
              "text": {
                "docs": "The comment text.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CommentRuleTriggerDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "condition": {
                "docs": "Javascript condition when to trigger.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CommentsDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdComments": {
                "docs": "The created comments including the updates.",
                "type": "optional<list<CommentDto>>",
              },
              "deletedComments": {
                "docs": "The deleted comments since the last version.",
                "type": "optional<list<string>>",
              },
              "updatedComments": {
                "docs": "The updates comments since the last version.",
                "type": "optional<list<CommentDto>>",
              },
              "version": {
                "docs": "The current version.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ComponentFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "schemaIds": {
                "docs": "The ID of the embedded schemas.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ComponentsFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "maxItems": {
                "docs": "The maximum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "minItems": {
                "docs": "The minimum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "schemaIds": {
                "docs": "The ID of the embedded schemas.",
                "type": "optional<list<string>>",
              },
              "uniqueFields": {
                "docs": "The fields that must be unique.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConfigurePreviewUrlsDto": "map<string, string>",
          "ContentChangedRuleTriggerDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "handleAll": {
                "docs": "Determines whether the trigger should handle all content changes events.",
                "type": "boolean",
              },
              "referencedSchemas": {
                "docs": "The schema references.",
                "type": "optional<list<SchemaCondition>>",
              },
              "schemas": {
                "docs": "The schema settings.",
                "type": "optional<list<SchemaCondition>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ContentData": "map<string, ContentFieldData>",
          "ContentDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "created": {
                "docs": "The date and time when the content item has been created.",
                "type": "datetime",
              },
              "createdBy": {
                "docs": "The user that has created the content item.",
                "type": "string",
              },
              "data": "unknown",
              "editToken": {
                "docs": "The UI token.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "The if of the content item.",
                "type": "string",
              },
              "isDeleted": {
                "docs": "Indicates whether the content is deleted.",
                "type": "boolean",
              },
              "lastModified": {
                "docs": "The date and time when the content item has been modified last.",
                "type": "datetime",
              },
              "lastModifiedBy": {
                "docs": "The user that has updated the content item.",
                "type": "string",
              },
              "newStatus": {
                "docs": "The new status of the content.",
                "type": "optional<string>",
              },
              "newStatusColor": {
                "docs": "The color of the new status.",
                "type": "optional<string>",
              },
              "referenceData": {
                "docs": "The reference data for the frontend UI.",
                "type": "optional<ContentData>",
              },
              "referenceFields": {
                "docs": "The reference fields.",
                "type": "optional<list<FieldDto>>",
              },
              "scheduleJob": {
                "docs": "The scheduled status.",
                "type": "optional<ScheduleJobDto>",
              },
              "schemaDisplayName": {
                "docs": "The display name of the schema.",
                "type": "optional<string>",
              },
              "schemaId": {
                "docs": "The ID of the schema.",
                "type": "string",
              },
              "schemaName": {
                "docs": "The name of the schema.",
                "type": "optional<string>",
              },
              "status": {
                "docs": "The status of the content.",
                "type": "string",
              },
              "statusColor": {
                "docs": "The color of the status.",
                "type": "string",
              },
              "version": {
                "docs": "The version of the content.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ContentFieldData": "map<string, unknown>",
          "ContentsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The content items.",
                "type": "list<ContentDto>",
              },
              "statuses": {
                "docs": "The possible statuses.",
                "type": "list<StatusInfoDto>",
              },
              "total": {
                "docs": "The total number of content items.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ContributorDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "contributorEmail": {
                "docs": "The email address.",
                "type": "string",
              },
              "contributorId": {
                "docs": "The ID of the user that contributes to the app.",
                "type": "string",
              },
              "contributorName": {
                "docs": "The display name.",
                "type": "string",
              },
              "role": {
                "docs": "The role of the contributor.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ContributorsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "_meta": {
                "docs": "The metadata to provide information about this request.",
                "type": "optional<ContributorsMetadata>",
              },
              "items": {
                "docs": "The contributors.",
                "type": "list<ContributorDto>",
              },
              "maxContributors": {
                "docs": "The maximum number of allowed contributors.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ContributorsMetadata": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isInvited": {
                "docs": "Indicates whether the user has been invited.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateContentRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client": {
                "docs": "An optional client name.",
                "type": "string",
              },
              "data": {
                "docs": "The content data.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "publish": {
                "docs": "Publish the content.",
                "type": "boolean",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CreateRuleDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action": {
                "docs": "The action properties.",
                "type": "RuleActionDto",
              },
              "trigger": {
                "docs": "The trigger properties.",
                "type": "RuleTriggerDto",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CurrentStorageDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "maxAllowed": {
                "docs": "The maximum allowed asset size.",
                "type": "long",
              },
              "size": {
                "docs": "The size in bytes.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DateTimeCalculatedDefaultValue": {
            "docs": "",
            "enum": [
              "Now",
              "Today",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DateTimeFieldEditor": {
            "docs": "",
            "enum": [
              "Date",
              "DateTime",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DateTimeFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "calculatedDefaultValue": {
                "docs": "The calculated default value for the field value.",
                "type": "optional<DateTimeCalculatedDefaultValue>",
              },
              "defaultValue": {
                "docs": "The default value for the field value.",
                "type": "optional<datetime>",
              },
              "defaultValues": {
                "docs": "The language specific default value for the field value.",
                "type": "optional<LocalizedValueOfNullableInstant>",
              },
              "editor": {
                "docs": "The editor that is used to manage this field.",
                "type": "DateTimeFieldEditor",
              },
              "format": {
                "docs": "The format pattern when displayed in the UI.",
                "type": "optional<string>",
              },
              "maxValue": {
                "docs": "The maximum allowed value for the field value.",
                "type": "optional<datetime>",
              },
              "minValue": {
                "docs": "The minimum allowed value for the field value.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DiscourseRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "apiKey": {
                "docs": "The api key to authenticate to your discourse server.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "apiUsername": {
                "docs": "The api username to authenticate to your discourse server.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "category": {
                "docs": "The optional category id.",
                "type": "optional<integer>",
              },
              "text": {
                "docs": "The text as markdown.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "title": {
                "docs": "The optional title when creating new topics.",
                "type": "string",
              },
              "topic": {
                "docs": "The optional topic id.",
                "type": "optional<integer>",
              },
              "url": {
                "docs": "The url to the discourse server.",
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EditorDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The name of the editor.",
                "type": "string",
              },
              "url": {
                "docs": "The url to the editor.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ElasticSearchRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "delete": {
                "docs": "The condition when to delete the document.",
                "type": "string",
              },
              "document": {
                "docs": "The optional custom document.",
                "type": "string",
              },
              "host": {
                "docs": "The url to the instance or cluster.",
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "indexName": {
                "docs": "The name of the index.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "password": {
                "docs": "The optional password.",
                "type": "string",
              },
              "username": {
                "docs": "The optional username.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EmailRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "messageBody": {
                "docs": "The message body.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "messageFrom": {
                "docs": "The email sending address.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "messageSubject": {
                "docs": "The subject line for this email message.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "messageTo": {
                "docs": "The email message will be sent to.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "serverHost": {
                "docs": "The IP address or host to the SMTP server.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "serverPassword": {
                "docs": "The password for the SMTP server.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "serverPort": {
                "docs": "The port to the SMTP server.",
                "type": "integer",
              },
              "serverUsername": {
                "docs": "The username for the SMTP server.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ErrorDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "details": {
                "docs": "Detailed error messages.",
                "type": "optional<list<string>>",
              },
              "errorCode": {
                "docs": "The error code.",
                "type": "optional<string>",
              },
              "message": {
                "docs": "Error message.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "statusCode": {
                "docs": "Status code of the http response.",
                "type": "integer",
              },
              "traceId": {
                "docs": "The optional trace id.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "Link to the error details.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EventConsumerDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "count": {
                "docs": "The number of handled events.",
                "type": "integer",
              },
              "error": {
                "docs": "The error details if the event consumer has been stopped after a failure.",
                "type": "optional<string>",
              },
              "isResetting": {
                "docs": "Indicates if the event consumer is resetting at the moment.",
                "type": "boolean",
              },
              "isStopped": {
                "docs": "Indicates if the event consumer has been started.",
                "type": "boolean",
              },
              "name": {
                "docs": "The name of the event consumer.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "position": {
                "docs": "The position within the vent stream.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EventConsumersDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The event consumers.",
                "type": "list<EventConsumerDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ExposedValues": "map<string, string>",
          "FastlyRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "apiKey": {
                "docs": "The API key to grant access to Squidex.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "serviceId": {
                "docs": "The ID of the fastly service.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "FeatureDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The name of the feature.",
                "type": "string",
              },
              "text": {
                "docs": "The description text.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "FeaturesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "features": {
                "docs": "The latest features.",
                "type": "list<FeatureDto>",
              },
              "version": {
                "docs": "The recent version.",
                "type": "integer",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "FieldDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "fieldId": {
                "docs": "The ID of the field.",
                "type": "long",
              },
              "isDisabled": {
                "docs": "Defines if the field is disabled.",
                "type": "boolean",
              },
              "isHidden": {
                "docs": "Defines if the field is hidden.",
                "type": "boolean",
              },
              "isLocked": {
                "docs": "Defines if the field is locked.",
                "type": "boolean",
              },
              "name": {
                "docs": "The name of the field. Must be unique within the schema.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]+(\-[a-z0-9]+)*$",
                },
              },
              "nested": {
                "docs": "The nested fields.",
                "type": "optional<list<NestedFieldDto>>",
              },
              "partitioning": {
                "docs": "Defines the partitioning of the field.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "properties": {
                "docs": "The field properties.",
                "type": "FieldPropertiesDto",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "FieldPropertiesDto": {
            "availability": undefined,
            "base-properties": {
              "editorUrl": {
                "docs": "Optional url to the editor.",
                "type": "optional<string>",
              },
              "hints": {
                "docs": "Hints to describe the field.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 1000,
                  "minLength": 0,
                  "pattern": undefined,
                },
              },
              "isHalfWidth": {
                "docs": "Indicates if the field should be rendered with half width only.",
                "type": "boolean",
              },
              "isRequired": {
                "docs": "Indicates if the field is required.",
                "type": "boolean",
              },
              "isRequiredOnPublish": {
                "docs": "Indicates if the field is required when publishing.",
                "type": "boolean",
              },
              "label": {
                "docs": "Optional label for the editor.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 100,
                  "minLength": 0,
                  "pattern": undefined,
                },
              },
              "placeholder": {
                "docs": "Placeholder to show when no value has been entered.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 100,
                  "minLength": 0,
                  "pattern": undefined,
                },
              },
              "tags": {
                "docs": "Tags for automation processes.",
                "type": "optional<list<string>>",
              },
            },
            "discriminant": "fieldType",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": {
              "Array": "ArrayFieldPropertiesDto",
              "Assets": "AssetsFieldPropertiesDto",
              "Boolean": "BooleanFieldPropertiesDto",
              "Component": "ComponentFieldPropertiesDto",
              "Components": "ComponentsFieldPropertiesDto",
              "DateTime": "DateTimeFieldPropertiesDto",
              "Geolocation": "GeolocationFieldPropertiesDto",
              "Json": "JsonFieldPropertiesDto",
              "Number": "NumberFieldPropertiesDto",
              "References": "ReferencesFieldPropertiesDto",
              "String": "StringFieldPropertiesDto",
              "Tags": "TagsFieldPropertiesDto",
              "UI": "UiFieldPropertiesDto",
            },
          },
          "FieldRuleAction": {
            "docs": "",
            "enum": [
              "Disable",
              "Hide",
              "Require",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "FieldRuleDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action": {
                "docs": "The action to perform when the condition is met.",
                "type": "FieldRuleAction",
              },
              "condition": {
                "docs": "The condition.",
                "type": "optional<string>",
              },
              "field": {
                "docs": "The field to update.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "GeolocationFieldEditor": {
            "docs": "",
            "type": "literal<"Map">",
          },
          "GeolocationFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "editor": {
                "docs": "The editor that is used to manage this field.",
                "type": "GeolocationFieldEditor",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "HistoryEventDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "actor": {
                "docs": "The user who called the action.",
                "type": "string",
              },
              "created": {
                "docs": "The time when the event happened.",
                "type": "datetime",
              },
              "eventId": {
                "docs": "Gets a unique id for the event.",
                "type": "string",
              },
              "eventType": {
                "docs": "The type of the original event.",
                "type": "string",
              },
              "message": {
                "docs": "The message for the event.",
                "type": "string",
              },
              "version": {
                "docs": "The version identifier.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ImageFormat": {
            "docs": "",
            "enum": [
              "AVIF",
              "BMP",
              "GIF",
              "JPEG",
              "PNG",
              "TGA",
              "TIFF",
              "WEBP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "JobStatus": {
            "docs": "",
            "enum": [
              "Created",
              "Started",
              "Completed",
              "Failed",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "JsonFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "graphQLSchema": {
                "docs": "The GraphQL schema.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LanguageDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "englishName": {
                "docs": "The english name of the language.",
                "type": "string",
              },
              "iso2Code": {
                "docs": "The iso code of the language.",
                "type": "string",
              },
              "nativeName": {
                "docs": "The native name of the language.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocalizedValueOfNullableBoolean": "map<string, optional<boolean>>",
          "LocalizedValueOfNullableDouble": "map<string, optional<double>>",
          "LocalizedValueOfNullableInstant": "map<string, optional<datetime>>",
          "LocalizedValueOfReadonlyListOfString": "map<string, list<string>>",
          "LocalizedValueOfString": "map<string, string>",
          "LogDownloadDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "downloadUrl": {
                "docs": "The url to download the log.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ManualRuleTriggerDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "MediumRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accessToken": {
                "docs": "The self issued access token.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "canonicalUrl": {
                "docs": "The original home of this content, if it was originally published elsewhere.",
                "type": "string",
              },
              "content": {
                "docs": "The content, either html or markdown.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "isHtml": {
                "docs": "Indicates whether the content is markdown or html.",
                "type": "boolean",
              },
              "publicationId": {
                "docs": "Optional publication id.",
                "type": "string",
              },
              "tags": {
                "docs": "The optional comma separated list of tags.",
                "type": "string",
              },
              "title": {
                "docs": "The title, used for the url.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NestedFieldDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "fieldId": {
                "docs": "The ID of the field.",
                "type": "long",
              },
              "isDisabled": {
                "docs": "Defines if the field is disabled.",
                "type": "boolean",
              },
              "isHidden": {
                "docs": "Defines if the field is hidden.",
                "type": "boolean",
              },
              "isLocked": {
                "docs": "Defines if the field is locked.",
                "type": "boolean",
              },
              "name": {
                "docs": "The name of the field. Must be unique within the schema.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]+(\-[a-z0-9]+)*$",
                },
              },
              "properties": {
                "docs": "The field properties.",
                "type": "FieldPropertiesDto",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NotificationRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client": {
                "docs": "An optional client name.",
                "type": "string",
              },
              "text": {
                "docs": "The text to send.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "url": {
                "docs": "The optional url to attach to the notification.",
                "type": "string",
              },
              "user": {
                "docs": "The user id or email.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NumberFieldEditor": {
            "docs": "",
            "enum": [
              "Input",
              "Radio",
              "Dropdown",
              "Stars",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NumberFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowedValues": {
                "docs": "The allowed values for the field value.",
                "type": "optional<list<double>>",
              },
              "defaultValue": {
                "docs": "The default value for the field value.",
                "type": "optional<double>",
              },
              "defaultValues": {
                "docs": "The language specific default value for the field value.",
                "type": "optional<LocalizedValueOfNullableDouble>",
              },
              "editor": {
                "docs": "The editor that is used to manage this field.",
                "type": "NumberFieldEditor",
              },
              "inlineEditable": {
                "docs": "Indicates that the inline editor is enabled for this field.",
                "type": "boolean",
              },
              "isUnique": {
                "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
                "type": "boolean",
              },
              "maxValue": {
                "docs": "The maximum allowed value for the field value.",
                "type": "optional<double>",
              },
              "minValue": {
                "docs": "The minimum allowed value for the field value.",
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "OpenSearchRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "delete": {
                "docs": "The condition when to delete the document.",
                "type": "string",
              },
              "document": {
                "docs": "The optional custom document.",
                "type": "string",
              },
              "host": {
                "docs": "The url to the instance or cluster.",
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "indexName": {
                "docs": "The name of the index.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "password": {
                "docs": "The optional password.",
                "type": "string",
              },
              "username": {
                "docs": "The optional username.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PatternDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "message": {
                "docs": "The regex message.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The name of the suggestion.",
                "type": "string",
              },
              "regex": {
                "docs": "The regex pattern.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PlanChangedDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "redirectUri": {
                "docs": "Optional redirect uri.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PlanDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "confirmText": {
                "docs": "An optional confirm text for the monthly subscription.",
                "type": "optional<string>",
              },
              "costs": {
                "docs": "The monthly costs of the plan.",
                "type": "string",
              },
              "id": {
                "docs": "The ID of the plan.",
                "type": "string",
              },
              "maxApiBytes": {
                "docs": "The maximum number of API traffic.",
                "type": "long",
              },
              "maxApiCalls": {
                "docs": "The maximum number of API calls.",
                "type": "long",
              },
              "maxAssetSize": {
                "docs": "The maximum allowed asset size.",
                "type": "long",
              },
              "maxContributors": {
                "docs": "The maximum number of contributors.",
                "type": "integer",
              },
              "name": {
                "docs": "The name of the plan.",
                "type": "string",
              },
              "yearlyConfirmText": {
                "docs": "An optional confirm text for the yearly subscription.",
                "type": "optional<string>",
              },
              "yearlyCosts": {
                "docs": "The yearly costs of the plan.",
                "type": "optional<string>",
              },
              "yearlyId": {
                "docs": "The yearly ID of the plan.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PlansDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "currentPlanId": {
                "docs": "The current plan id.",
                "type": "optional<string>",
              },
              "locked": {
                "docs": "The reason why the plan cannot be changed.",
                "type": "PlansLockedReason",
              },
              "planOwner": {
                "docs": "The plan owner.",
                "type": "optional<string>",
              },
              "plans": {
                "docs": "The available plans.",
                "type": "list<PlanDto>",
              },
              "portalLink": {
                "docs": "The link to the management portal.",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "referral": {
                "docs": "The referral management.",
                "type": "optional<ReferralInfo>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PlansLockedReason": {
            "docs": "",
            "enum": [
              "None",
              "NotOwner",
              "NoPermission",
              "ManagedByTeam",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PrerenderRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "token": {
                "docs": "The prerender token from your account.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "url": {
                "docs": "The url to recache.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PropertyPath": "list<string>",
          "QueryDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ids": {
                "docs": "The optional list of ids to query.",
                "type": "optional<list<string>>",
              },
              "oData": {
                "docs": "The optional odata query.",
                "type": "optional<string>",
              },
              "parentId": {
                "docs": "The parent id (for assets).",
                "type": "optional<string>",
              },
              "q": "optional<unknown>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "QueryJsonDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "filter": "optional<unknown>",
              "fullText": "optional<string>",
              "random": "long",
              "skip": "long",
              "sort": "optional<list<SortNode>>",
              "take": "long",
              "top": "long",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ReferencesFieldEditor": {
            "docs": "",
            "enum": [
              "List",
              "Dropdown",
              "Tags",
              "Checkboxes",
              "Input",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ReferencesFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowDuplicates": {
                "docs": "True, if duplicate values are allowed.",
                "type": "boolean",
              },
              "defaultValue": {
                "docs": "The default value as a list of content ids.",
                "type": "optional<list<string>>",
              },
              "defaultValues": {
                "docs": "The language specific default value as a list of content ids.",
                "type": "optional<LocalizedValueOfReadonlyListOfString>",
              },
              "editor": {
                "docs": "The editor that is used to manage this field.",
                "type": "ReferencesFieldEditor",
              },
              "maxItems": {
                "docs": "The maximum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "minItems": {
                "docs": "The minimum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "mustBePublished": {
                "docs": "True when all references must be published.",
                "type": "boolean",
              },
              "resolveReference": {
                "docs": "True to resolve references in the content list.",
                "type": "boolean",
              },
              "schemaIds": {
                "docs": "The ID of the referenced schemas.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ReferralInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": "string",
              "condition": "string",
              "earned": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ReorderFieldsDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "fieldIds": {
                "docs": "The field ids in the target order.",
                "type": "list<long>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResizeMode": {
            "docs": "",
            "enum": [
              "Crop",
              "CropUpsize",
              "Pad",
              "BoxPad",
              "Max",
              "Min",
              "Stretch",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Resource": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "_links": {
                "docs": "The links.",
                "type": "map<string, ResourceLink>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceLink": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "href": {
                "docs": "The link url.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "metadata": {
                "docs": "Additional data about the link.",
                "type": "optional<string>",
              },
              "method": {
                "docs": "The link method.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourcesDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RestoreJobDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "log": {
                "docs": "The status log.",
                "type": "list<string>",
              },
              "started": {
                "docs": "The time when the job has been started.",
                "type": "datetime",
              },
              "status": {
                "docs": "The status of the operation.",
                "type": "JobStatus",
              },
              "stopped": {
                "docs": "The time when the job has been stopped.",
                "type": "optional<datetime>",
              },
              "url": {
                "docs": "The uri to load from.",
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoleDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "isDefaultRole": {
                "docs": "Indicates if the role is an builtin default role.",
                "type": "boolean",
              },
              "name": {
                "docs": "The role name.",
                "type": "string",
              },
              "numClients": {
                "docs": "The number of clients with this role.",
                "type": "integer",
              },
              "numContributors": {
                "docs": "The number of contributors with this role.",
                "type": "integer",
              },
              "permissions": {
                "docs": "Associated list of permissions.",
                "type": "list<string>",
              },
              "properties": {
                "docs": "Associated list of UI properties.",
                "type": "map<string, unknown>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RolesDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The roles.",
                "type": "list<RoleDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleActionDto": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "actionType",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": {
              "Algolia": "AlgoliaRuleActionDto",
              "AzureQueue": "AzureQueueRuleActionDto",
              "Comment": "CommentRuleActionDto",
              "CreateContent": "CreateContentRuleActionDto",
              "Discourse": "DiscourseRuleActionDto",
              "ElasticSearch": "ElasticSearchRuleActionDto",
              "Email": "EmailRuleActionDto",
              "Fastly": "FastlyRuleActionDto",
              "Medium": "MediumRuleActionDto",
              "Notification": "NotificationRuleActionDto",
              "OpenSearch": "OpenSearchRuleActionDto",
              "Prerender": "PrerenderRuleActionDto",
              "Script": "ScriptRuleActionDto",
              "SignalR": "SignalRRuleActionDto",
              "Slack": "SlackRuleActionDto",
              "Tweet": "TweetRuleActionDto",
              "Typesense": "TypesenseRuleActionDto",
              "Webhook": "WebhookRuleActionDto",
            },
          },
          "RuleDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "action": {
                "docs": "The action properties.",
                "type": "RuleActionDto",
              },
              "created": {
                "docs": "The date and time when the rule has been created.",
                "type": "datetime",
              },
              "createdBy": {
                "docs": "The user that has created the rule.",
                "type": "string",
              },
              "id": {
                "docs": "The ID of the rule.",
                "type": "string",
              },
              "isEnabled": {
                "docs": "Determines if the rule is enabled.",
                "type": "boolean",
              },
              "lastExecuted": {
                "availability": "deprecated",
                "docs": "The date and time when the rule was executed the last time.",
                "type": "optional<datetime>",
              },
              "lastModified": {
                "docs": "The date and time when the rule has been modified last.",
                "type": "datetime",
              },
              "lastModifiedBy": {
                "docs": "The user that has updated the rule.",
                "type": "string",
              },
              "name": {
                "docs": "Optional rule name.",
                "type": "optional<string>",
              },
              "numFailed": {
                "docs": "The number of failed executions.",
                "type": "long",
              },
              "numSucceeded": {
                "docs": "The number of completed executions.",
                "type": "long",
              },
              "trigger": {
                "docs": "The trigger properties.",
                "type": "RuleTriggerDto",
              },
              "version": {
                "docs": "The version of the rule.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleElementDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "Describes the action or trigger type.",
                "type": "string",
              },
              "display": {
                "docs": "The label for the action or trigger type.",
                "type": "string",
              },
              "iconColor": {
                "docs": "The color for the icon.",
                "type": "optional<string>",
              },
              "iconImage": {
                "docs": "The image for the icon.",
                "type": "optional<string>",
              },
              "properties": {
                "docs": "The properties.",
                "type": "list<RuleElementPropertyDto>",
              },
              "readMore": {
                "docs": "The optional link to the product that is integrated.",
                "type": "optional<string>",
              },
              "title": {
                "docs": "Optional title.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleElementPropertyDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "The optional description.",
                "type": "optional<string>",
              },
              "display": {
                "docs": "The label to use.",
                "type": "string",
              },
              "editor": {
                "docs": "The html editor.",
                "type": "RuleFieldEditor",
              },
              "isFormattable": {
                "docs": "Indicates if the property is formattable.",
                "type": "boolean",
              },
              "isRequired": {
                "docs": "Indicates if the property is required.",
                "type": "boolean",
              },
              "name": {
                "docs": "The name of the editor.",
                "type": "string",
              },
              "options": {
                "docs": "The options, if the editor is a dropdown.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleEventDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "created": {
                "docs": "The time when the event has been created.",
                "type": "datetime",
              },
              "description": {
                "docs": "The description.",
                "type": "string",
              },
              "eventName": {
                "docs": "The name of the event.",
                "type": "string",
              },
              "id": {
                "docs": "The ID of the event.",
                "type": "string",
              },
              "jobResult": {
                "docs": "The result of the job.",
                "type": "RuleJobResult",
              },
              "lastDump": {
                "docs": "The last dump.",
                "type": "optional<string>",
              },
              "nextAttempt": {
                "docs": "The next attempt.",
                "type": "optional<datetime>",
              },
              "numCalls": {
                "docs": "The number of calls.",
                "type": "integer",
              },
              "result": {
                "docs": "The result of the event.",
                "type": "RuleResult",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleEventsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The rule events.",
                "type": "list<RuleEventDto>",
              },
              "total": {
                "docs": "The total number of rule events.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleFieldEditor": {
            "docs": "",
            "enum": [
              "Checkbox",
              "Dropdown",
              "Email",
              "Javascript",
              "Number",
              "Password",
              "Text",
              "TextArea",
              "Url",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleJobResult": {
            "docs": "",
            "enum": [
              "Pending",
              "Success",
              "Retry",
              "Failed",
              "Cancelled",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleResult": {
            "docs": "",
            "enum": [
              "Pending",
              "Success",
              "Failed",
              "Timeout",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RuleTriggerDto": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "triggerType",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": {
              "AssetChanged": "AssetChangedRuleTriggerDto",
              "Comment": "CommentRuleTriggerDto",
              "ContentChanged": "ContentChangedRuleTriggerDto",
              "Manual": "ManualRuleTriggerDto",
              "SchemaChanged": "SchemaChangedRuleTriggerDto",
              "Usage": "UsageRuleTriggerDto",
            },
          },
          "RulesDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The rules.",
                "type": "list<RuleDto>",
              },
              "runningRuleId": {
                "docs": "The ID of the rule that is currently rerunning.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ScheduleJobDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "color": {
                "docs": "The color of the scheduled status.",
                "type": "string",
              },
              "dueTime": {
                "docs": "The target date and time when the content should be scheduled.",
                "type": "datetime",
              },
              "id": {
                "docs": "The ID of the schedule job.",
                "type": "string",
              },
              "scheduledBy": {
                "docs": "The user who schedule the content.",
                "type": "string",
              },
              "status": {
                "docs": "The new status.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SchemaChangedRuleTriggerDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "condition": {
                "docs": "Javascript condition when to trigger.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SchemaCondition": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "condition": "optional<string>",
              "schemaId": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SchemaDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "category": {
                "docs": "The name of the category.",
                "type": "optional<string>",
              },
              "created": {
                "docs": "The date and time when the schema has been created.",
                "type": "datetime",
              },
              "createdBy": {
                "docs": "The user that has created the schema.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "fieldRules": {
                "docs": "The field rules.",
                "type": "list<FieldRuleDto>",
              },
              "fields": {
                "docs": "The list of fields.",
                "type": "list<FieldDto>",
              },
              "fieldsInLists": {
                "docs": "The name of fields that are used in content lists.",
                "type": "list<string>",
              },
              "fieldsInReferences": {
                "docs": "The name of fields that are used in content references.",
                "type": "list<string>",
              },
              "id": {
                "docs": "The ID of the schema.",
                "type": "string",
              },
              "isPublished": {
                "docs": "Indicates if the schema is published.",
                "type": "boolean",
              },
              "isSingleton": {
                "availability": "deprecated",
                "docs": "Indicates if the schema is a singleton.",
                "type": "boolean",
              },
              "lastModified": {
                "docs": "The date and time when the schema has been modified last.",
                "type": "datetime",
              },
              "lastModifiedBy": {
                "docs": "The user that has updated the schema.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "name": {
                "docs": "The name of the schema. Unique within the app.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": "^[a-z0-9]+(\-[a-z0-9]+)*$",
                },
              },
              "previewUrls": {
                "docs": "The preview Urls.",
                "type": "map<string, string>",
              },
              "properties": {
                "docs": "The schema properties.",
                "type": "SchemaPropertiesDto",
              },
              "scripts": {
                "docs": "The scripts.",
                "type": "SchemaScriptsDto",
              },
              "type": {
                "docs": "The type of the schema.",
                "type": "SchemaType",
              },
              "version": {
                "docs": "The version of the schema.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SchemaPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "contentEditorUrl": {
                "docs": "The url to the editor plugin.",
                "type": "optional<string>",
              },
              "contentSidebarUrl": {
                "docs": "The url to a the sidebar plugin for content items.",
                "type": "optional<string>",
              },
              "contentsSidebarUrl": {
                "docs": "The url to a the sidebar plugin for content lists.",
                "type": "optional<string>",
              },
              "hints": {
                "docs": "Hints to describe the schema.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 1000,
                  "minLength": 0,
                  "pattern": undefined,
                },
              },
              "label": {
                "docs": "Optional label for the editor.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 100,
                  "minLength": 0,
                  "pattern": undefined,
                },
              },
              "tags": {
                "docs": "Tags for automation processes.",
                "type": "optional<list<string>>",
              },
              "validateOnPublish": {
                "docs": "True to validate the content items on publish.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SchemaScriptsDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "change": {
                "docs": "The script that is executed when change a content status.",
                "type": "optional<string>",
              },
              "create": {
                "docs": "The script that is executed when creating a content.",
                "type": "optional<string>",
              },
              "delete": {
                "docs": "The script that is executed when deleting a content.",
                "type": "optional<string>",
              },
              "query": {
                "docs": "The script that is executed for each content when querying contents.",
                "type": "optional<string>",
              },
              "queryPre": {
                "docs": "The script that is executed for all contents when querying contents.",
                "type": "optional<string>",
              },
              "update": {
                "docs": "The script that is executed when updating a content.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SchemaType": {
            "docs": "",
            "enum": [
              "Default",
              "Singleton",
              "Component",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SchemasDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The schemas.",
                "type": "list<SchemaDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ScriptRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "script": {
                "docs": "The script to render.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SearchResultDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "label": {
                "docs": "An optional label.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The name of the search result.",
                "type": "string",
              },
              "type": {
                "docs": "The type of the search result.",
                "type": "SearchResultType",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SearchResultType": {
            "docs": "",
            "enum": [
              "Asset",
              "Content",
              "Dashboard",
              "Setting",
              "Rule",
              "Schema",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SignalRRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action": {
                "docs": "* Broadcast = send to all users.
 * User = send to all target users(s).
 * Group = send to all target group(s).",
                "type": "ActionTypeEnum",
              },
              "connectionString": {
                "docs": "The connection string to the Azure SignalR.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "hubName": {
                "docs": "The name of the hub.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "methodName": {
                "docs": "Set the Name of the hub method received by the customer.",
                "type": "string",
              },
              "payload": {
                "docs": "Leave it empty to use the full event as body.",
                "type": "string",
              },
              "target": {
                "docs": "Define target users or groups by id or name. One item per line. Not needed for Broadcast action.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SimulatedRuleEventDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "actionData": {
                "docs": "The name of the action.",
                "type": "optional<string>",
              },
              "actionName": {
                "docs": "The data for the action.",
                "type": "optional<string>",
              },
              "enrichedEvent": "optional<unknown>",
              "error": {
                "docs": "The name of the event.",
                "type": "optional<string>",
              },
              "event": "unknown",
              "eventId": {
                "docs": "The unique event id.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "eventName": {
                "docs": "The name of the event.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "skipReasons": {
                "docs": "The reason why the event has been skipped.",
                "type": "list<SkipReason>",
              },
              "uniqueId": {
                "docs": "The the unique id of the simulated event.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SimulatedRuleEventsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The simulated rule events.",
                "type": "list<SimulatedRuleEventDto>",
              },
              "total": {
                "docs": "The total number of simulated rule events.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SkipReason": {
            "docs": "",
            "enum": [
              "None",
              "ConditionDoesNotMatch",
              "ConditionPrecheckDoesNotMatch",
              "Disabled",
              "Failed",
              "FromRule",
              "NoAction",
              "NoTrigger",
              "TooOld",
              "WrongEvent",
              "WrongEventForTrigger",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SlackRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "text": {
                "docs": "The text that is sent as message to slack.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "webhookUrl": {
                "docs": "The slack webhook url.",
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SortNode": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "order": "SortOrder",
              "path": "PropertyPath",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SortOrder": {
            "docs": "",
            "enum": [
              "Ascending",
              "Descending",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "StatusInfoDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "color": {
                "docs": "The color of the status.",
                "type": "string",
              },
              "status": {
                "docs": "The name of the status.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "StorageUsagePerDateDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "date": {
                "docs": "The date when the usage was tracked.",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "totalCount": {
                "docs": "The number of assets.",
                "type": "long",
              },
              "totalSize": {
                "docs": "The size in bytes.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "StringContentType": {
            "docs": "",
            "enum": [
              "Unspecified",
              "Html",
              "Markdown",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "StringFieldEditor": {
            "docs": "",
            "enum": [
              "Input",
              "Color",
              "Markdown",
              "Dropdown",
              "Html",
              "Radio",
              "RichText",
              "Slug",
              "StockPhoto",
              "TextArea",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "StringFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowedValues": {
                "docs": "The allowed values for the field value.",
                "type": "optional<list<string>>",
              },
              "contentType": {
                "docs": "How the string content should be interpreted.",
                "type": "StringContentType",
              },
              "createEnum": {
                "docs": "Indicates whether GraphQL Enum should be created.",
                "type": "boolean",
              },
              "defaultValue": {
                "docs": "The default value for the field value.",
                "type": "optional<string>",
              },
              "defaultValues": {
                "docs": "The language specific default value for the field value.",
                "type": "optional<LocalizedValueOfString>",
              },
              "editor": {
                "docs": "The editor that is used to manage this field.",
                "type": "StringFieldEditor",
              },
              "folderId": {
                "docs": "The initial id to the folder when the control supports file uploads.",
                "type": "optional<string>",
              },
              "inlineEditable": {
                "docs": "Indicates that the inline editor is enabled for this field.",
                "type": "boolean",
              },
              "isEmbeddable": {
                "docs": "Indicates that other content items or references are embedded.",
                "type": "boolean",
              },
              "isUnique": {
                "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
                "type": "boolean",
              },
              "maxCharacters": {
                "docs": "The maximum allowed of normal characters for the field value.",
                "type": "optional<integer>",
              },
              "maxLength": {
                "docs": "The maximum allowed length for the field value.",
                "type": "optional<integer>",
              },
              "maxWords": {
                "docs": "The maximum allowed number of words for the field value.",
                "type": "optional<integer>",
              },
              "minCharacters": {
                "docs": "The minimum allowed of normal characters for the field value.",
                "type": "optional<integer>",
              },
              "minLength": {
                "docs": "The minimum allowed length for the field value.",
                "type": "optional<integer>",
              },
              "minWords": {
                "docs": "The minimum allowed number of words for the field value.",
                "type": "optional<integer>",
              },
              "pattern": {
                "docs": "The pattern to enforce a specific format for the field value.",
                "type": "optional<string>",
              },
              "patternMessage": {
                "docs": "The validation message for the pattern.",
                "type": "optional<string>",
              },
              "schemaIds": {
                "docs": "The allowed schema ids that can be embedded.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TagsFieldEditor": {
            "docs": "",
            "enum": [
              "Tags",
              "Checkboxes",
              "Dropdown",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TagsFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowedValues": {
                "docs": "The allowed values for the field value.",
                "type": "optional<list<string>>",
              },
              "createEnum": {
                "docs": "Indicates whether GraphQL Enum should be created.",
                "type": "boolean",
              },
              "defaultValue": {
                "docs": "The default value.",
                "type": "optional<list<string>>",
              },
              "defaultValues": {
                "docs": "The language specific default value for the field value.",
                "type": "optional<LocalizedValueOfReadonlyListOfString>",
              },
              "editor": {
                "docs": "The editor that is used to manage this field.",
                "type": "TagsFieldEditor",
              },
              "maxItems": {
                "docs": "The maximum allowed items for the field value.",
                "type": "optional<integer>",
              },
              "minItems": {
                "docs": "The minimum allowed items for the field value.",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TeamDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "created": {
                "docs": "The timestamp when the team has been created.",
                "type": "datetime",
              },
              "id": {
                "docs": "The ID of the team.",
                "type": "string",
              },
              "lastModified": {
                "docs": "The timestamp when the team has been modified last.",
                "type": "datetime",
              },
              "name": {
                "docs": "The name of the team.",
                "type": "string",
              },
              "roleName": {
                "docs": "The role name of the user.",
                "type": "optional<string>",
              },
              "version": {
                "docs": "The version of the team.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TemplateDetailsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "details": {
                "docs": "The details of the template.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TemplateDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "The description of the template.",
                "type": "string",
              },
              "isStarter": {
                "docs": "True, if the template is a starter.",
                "type": "boolean",
              },
              "name": {
                "docs": "The name of the template.",
                "type": "string",
              },
              "title": {
                "docs": "The title of the template.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TemplatesDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The event consumers.",
                "type": "list<TemplateDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TranslationDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "result": {
                "docs": "The result of the translation.",
                "type": "TranslationResultCode",
              },
              "text": {
                "docs": "The translated text.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TranslationResultCode": {
            "docs": "",
            "enum": [
              "Translated",
              "LanguageNotSupported",
              "NotTranslated",
              "NotConfigured",
              "Unauthorized",
              "Failed",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TweetRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accessSecret": {
                "docs": " The generated access secret.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "accessToken": {
                "docs": " The generated access token.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "text": {
                "docs": "The text that is sent as tweet to twitter.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TypesenseRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "apiKey": {
                "docs": "The api key.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "delete": {
                "docs": "The condition when to delete the document.",
                "type": "string",
              },
              "document": {
                "docs": "The optional custom document.",
                "type": "string",
              },
              "host": {
                "docs": "The url to the instance or cluster.",
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "indexName": {
                "docs": "The name of the index.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UiFieldEditor": {
            "docs": "",
            "type": "literal<"Separator">",
          },
          "UiFieldPropertiesDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "editor": {
                "docs": "The editor that is used to manage this field.",
                "type": "UiFieldEditor",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UiSettingsDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "canCreateApps": {
                "docs": "True when the user can create apps.",
                "type": "boolean",
              },
              "canCreateTeams": {
                "docs": "True when the user can create teams.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateFieldDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "properties": {
                "docs": "The field properties.",
                "type": "FieldPropertiesDto",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpdateSettingDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "value": "unknown",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpsertCommentDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "text": {
                "docs": "The comment text.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "url": {
                "docs": "The url where the comment is created.",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpsertSchemaDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "category": {
                "docs": "The category.",
                "type": "optional<string>",
              },
              "fieldRules": {
                "docs": "The optional field Rules.",
                "type": "optional<list<FieldRuleDto>>",
              },
              "fields": {
                "docs": "Optional fields.",
                "type": "optional<list<UpsertSchemaFieldDto>>",
              },
              "fieldsInLists": {
                "docs": "The names of the fields that should be shown in lists, including meta fields.",
                "type": "optional<list<string>>",
              },
              "fieldsInReferences": {
                "docs": "The names of the fields that should be used in references.",
                "type": "optional<list<string>>",
              },
              "isPublished": {
                "docs": "Set it to true to autopublish the schema.",
                "type": "boolean",
              },
              "previewUrls": {
                "docs": "The optional preview urls.",
                "type": "optional<map<string, optional<string>>>",
              },
              "properties": {
                "docs": "The optional properties.",
                "type": "optional<SchemaPropertiesDto>",
              },
              "scripts": {
                "docs": "The optional scripts.",
                "type": "optional<SchemaScriptsDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpsertSchemaFieldDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isDisabled": {
                "docs": "Defines if the field is disabled.",
                "type": "boolean",
              },
              "isHidden": {
                "docs": "Defines if the field is hidden.",
                "type": "boolean",
              },
              "isLocked": {
                "docs": "Defines if the field is locked.",
                "type": "boolean",
              },
              "name": {
                "docs": "The name of the field. Must be unique within the schema.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$",
                },
              },
              "nested": {
                "docs": "The nested fields.",
                "type": "optional<list<UpsertSchemaNestedFieldDto>>",
              },
              "partitioning": {
                "docs": "Determines the optional partitioning of the field.",
                "type": "optional<string>",
              },
              "properties": {
                "docs": "The field properties.",
                "type": "FieldPropertiesDto",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UpsertSchemaNestedFieldDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isDisabled": {
                "docs": "Defines if the field is disabled.",
                "type": "boolean",
              },
              "isHidden": {
                "docs": "Defines if the field is hidden.",
                "type": "boolean",
              },
              "isLocked": {
                "docs": "Defines if the field is locked.",
                "type": "boolean",
              },
              "name": {
                "docs": "The name of the field. Must be unique within the schema.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$",
                },
              },
              "properties": {
                "docs": "The field properties.",
                "type": "FieldPropertiesDto",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsageRuleTriggerDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "limit": {
                "docs": "The number of monthly api calls.",
                "type": "integer",
              },
              "numDays": {
                "docs": "The number of days to check or null for the current month.",
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 30,
                  "min": 1,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "displayName": {
                "docs": "The display name (usually first name and last name) of the user.",
                "type": "string",
              },
              "email": {
                "docs": "The email of the user. Unique value.",
                "type": "string",
              },
              "id": {
                "docs": "The ID of the user.",
                "type": "string",
              },
              "isLocked": {
                "docs": "Determines if the user is locked.",
                "type": "boolean",
              },
              "permissions": {
                "docs": "Additional permissions for the user.",
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserProperty": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "value": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "items": {
                "docs": "The users.",
                "type": "list<UserDto>",
              },
              "total": {
                "docs": "The total number of users.",
                "type": "long",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WebhookMethod": {
            "docs": "",
            "enum": [
              "POST",
              "PUT",
              "GET",
              "DELETE",
              "PATCH",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WebhookRuleActionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "headers": {
                "docs": "The message headers in the format '[Key]=[Value]', one entry per line.",
                "type": "string",
              },
              "method": {
                "docs": "The type of the request.",
                "type": "WebhookMethod",
              },
              "payload": {
                "docs": "Leave it empty to use the full event as body.",
                "type": "string",
              },
              "payloadType": {
                "docs": "The mime type of the payload.",
                "type": "string",
              },
              "sharedSecret": {
                "docs": "The shared secret that is used to calculate the payload signature.",
                "type": "string",
              },
              "url": {
                "docs": "The url to the webhook.",
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WorkflowDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The workflow id.",
                "type": "optional<string>",
              },
              "initial": {
                "docs": "The initial step.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The name of the workflow.",
                "type": "optional<string>",
              },
              "schemaIds": {
                "docs": "The schema ids.",
                "type": "optional<list<string>>",
              },
              "steps": {
                "docs": "The workflow steps.",
                "type": "optional<map<string, WorkflowStepDto>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WorkflowStepDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "color": {
                "docs": "The optional color.",
                "type": "optional<string>",
              },
              "noUpdate": {
                "docs": "Indicates if updates should not be allowed.",
                "type": "optional<boolean>",
              },
              "noUpdateExpression": {
                "docs": "Optional expression that must evaluate to true when you want to prevent updates.",
                "type": "optional<string>",
              },
              "noUpdateRoles": {
                "docs": "Optional list of roles to restrict the updates for users with these roles.",
                "type": "optional<list<string>>",
              },
              "transitions": {
                "docs": "The transitions.",
                "type": "optional<map<string, WorkflowTransitionDto>>",
              },
              "validate": {
                "docs": "True if the content should be validated when moving to this step.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WorkflowTransitionDto": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "expression": {
                "docs": "The optional expression.",
                "type": "optional<string>",
              },
              "roles": {
                "docs": "The optional restricted role.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WorkflowsDto": {
            "docs": undefined,
            "extends": [
              "Resource",
            ],
            "inline": undefined,
            "properties": {
              "errors": {
                "docs": "The errros that should be fixed.",
                "type": "list<string>",
              },
              "items": {
                "docs": "The workflow.",
                "type": "list<WorkflowDto>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "errors:
  InternalServerError:
    status-code: 500
    type: ErrorDto
    docs: Operation failed.
    examples:
      - value:
          message: message
          statusCode: 1
  BadRequestError:
    status-code: 400
    type: ErrorDto
    docs: User request not valid.
    examples:
      - value:
          message: message
          statusCode: 1
  NotFoundError:
    status-code: 404
    type: unknown
    docs: User not found.
  ForbiddenError:
    status-code: 403
    type: ErrorDto
    docs: User is the current user.
    examples:
      - value:
          message: message
          statusCode: 1
  ConflictError:
    status-code: 409
    type: ErrorDto
    docs: Team name is already in use.
    examples:
      - value:
          message: message
          statusCode: 1
  NotImplementedError:
    status-code: 501
    type: ErrorDto
    docs: Not configured.
    examples:
      - value:
          message: message
          statusCode: 1
  ContentTooLargeError:
    status-code: 413
    type: ErrorDto
    docs: Asset exceeds the maximum upload size.
    examples:
      - value:
          message: message
          statusCode: 1
types:
  ErrorDto:
    properties:
      message:
        type: string
        docs: Error message.
        validation:
          minLength: 1
      errorCode:
        type: optional<string>
        docs: The error code.
      traceId:
        type: optional<string>
        docs: The optional trace id.
      type:
        type: optional<string>
        docs: Link to the error details.
      details:
        type: optional<list<string>>
        docs: Detailed error messages.
      statusCode:
        type: integer
        docs: Status code of the http response.
    source:
      openapi: ../openapi.json
  UserProperty:
    properties:
      name:
        type: string
        validation:
          minLength: 1
      value:
        type: string
        validation:
          minLength: 1
    source:
      openapi: ../openapi.json
  UiSettingsDto:
    properties:
      canCreateApps:
        type: boolean
        docs: True when the user can create apps.
      canCreateTeams:
        type: boolean
        docs: True when the user can create teams.
    source:
      openapi: ../openapi.json
  UpdateSettingDto:
    properties:
      value: unknown
    source:
      openapi: ../openapi.json
  ContentsDto:
    properties:
      total:
        type: long
        docs: The total number of content items.
      items:
        docs: The content items.
        type: list<ContentDto>
      statuses:
        docs: The possible statuses.
        type: list<StatusInfoDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  ContentDto:
    properties:
      id:
        type: string
        docs: The if of the content item.
      createdBy:
        type: string
        docs: The user that has created the content item.
      lastModifiedBy:
        type: string
        docs: The user that has updated the content item.
      data: unknown
      referenceData:
        type: optional<ContentData>
        docs: The reference data for the frontend UI.
      created:
        type: datetime
        docs: The date and time when the content item has been created.
      lastModified:
        type: datetime
        docs: The date and time when the content item has been modified last.
      status:
        type: string
        docs: The status of the content.
      newStatus:
        type: optional<string>
        docs: The new status of the content.
      statusColor:
        type: string
        docs: The color of the status.
      newStatusColor:
        type: optional<string>
        docs: The color of the new status.
      editToken:
        type: optional<string>
        docs: The UI token.
      scheduleJob:
        type: optional<ScheduleJobDto>
        docs: The scheduled status.
      schemaId:
        type: string
        docs: The ID of the schema.
      schemaName:
        type: optional<string>
        docs: The name of the schema.
      schemaDisplayName:
        type: optional<string>
        docs: The display name of the schema.
      referenceFields:
        type: optional<list<FieldDto>>
        docs: The reference fields.
      isDeleted:
        type: boolean
        docs: Indicates whether the content is deleted.
      version:
        type: long
        docs: The version of the content.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  ContentData: map<string, ContentFieldData>
  ContentFieldData: map<string, unknown>
  ScheduleJobDto:
    properties:
      id:
        type: string
        docs: The ID of the schedule job.
      status:
        type: string
        docs: The new status.
      dueTime:
        type: datetime
        docs: The target date and time when the content should be scheduled.
      color:
        type: string
        docs: The color of the scheduled status.
      scheduledBy:
        type: string
        docs: The user who schedule the content.
    source:
      openapi: ../openapi.json
  FieldDto:
    properties:
      fieldId:
        type: long
        docs: The ID of the field.
      name:
        type: string
        docs: The name of the field. Must be unique within the schema.
        validation:
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          minLength: 1
      isHidden:
        type: boolean
        docs: Defines if the field is hidden.
      isLocked:
        type: boolean
        docs: Defines if the field is locked.
      isDisabled:
        type: boolean
        docs: Defines if the field is disabled.
      partitioning:
        type: string
        docs: Defines the partitioning of the field.
        validation:
          minLength: 1
      properties:
        type: FieldPropertiesDto
        docs: The field properties.
      nested:
        type: optional<list<NestedFieldDto>>
        docs: The nested fields.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  FieldPropertiesDto:
    discriminant: fieldType
    base-properties:
      label:
        type: optional<string>
        docs: Optional label for the editor.
        validation:
          minLength: 0
          maxLength: 100
      hints:
        type: optional<string>
        docs: Hints to describe the field.
        validation:
          minLength: 0
          maxLength: 1000
      placeholder:
        type: optional<string>
        docs: Placeholder to show when no value has been entered.
        validation:
          minLength: 0
          maxLength: 100
      isRequired:
        type: boolean
        docs: Indicates if the field is required.
      isRequiredOnPublish:
        type: boolean
        docs: Indicates if the field is required when publishing.
      isHalfWidth:
        type: boolean
        docs: Indicates if the field should be rendered with half width only.
      editorUrl:
        type: optional<string>
        docs: Optional url to the editor.
      tags:
        type: optional<list<string>>
        docs: Tags for automation processes.
    union:
      Array: ArrayFieldPropertiesDto
      Assets: AssetsFieldPropertiesDto
      Boolean: BooleanFieldPropertiesDto
      Component: ComponentFieldPropertiesDto
      Components: ComponentsFieldPropertiesDto
      DateTime: DateTimeFieldPropertiesDto
      Geolocation: GeolocationFieldPropertiesDto
      Json: JsonFieldPropertiesDto
      Number: NumberFieldPropertiesDto
      References: ReferencesFieldPropertiesDto
      String: StringFieldPropertiesDto
      Tags: TagsFieldPropertiesDto
      UI: UiFieldPropertiesDto
    source:
      openapi: ../openapi.json
  ArrayFieldPropertiesDto:
    properties:
      minItems:
        type: optional<integer>
        docs: The minimum allowed items for the field value.
      maxItems:
        type: optional<integer>
        docs: The maximum allowed items for the field value.
      uniqueFields:
        type: optional<list<string>>
        docs: The fields that must be unique.
    source:
      openapi: ../openapi.json
  AssetsFieldPropertiesDto:
    properties:
      previewMode:
        type: AssetPreviewMode
        docs: The preview mode for the asset.
      defaultValues:
        type: optional<LocalizedValueOfReadonlyListOfString>
        docs: The language specific default value as a list of asset ids.
      defaultValue:
        type: optional<list<string>>
        docs: The default value as a list of asset ids.
      folderId:
        type: optional<string>
        docs: The initial id to the folder.
      previewFormat:
        type: optional<string>
        docs: The preview format.
      minItems:
        type: optional<integer>
        docs: The minimum allowed items for the field value.
      maxItems:
        type: optional<integer>
        docs: The maximum allowed items for the field value.
      minSize:
        type: optional<integer>
        docs: The minimum file size in bytes.
      maxSize:
        type: optional<integer>
        docs: The maximum file size in bytes.
      minWidth:
        type: optional<integer>
        docs: The minimum image width in pixels.
      maxWidth:
        type: optional<integer>
        docs: The maximum image width in pixels.
      minHeight:
        type: optional<integer>
        docs: The minimum image height in pixels.
      maxHeight:
        type: optional<integer>
        docs: The maximum image height in pixels.
      aspectWidth:
        type: optional<integer>
        docs: The image aspect width in pixels.
      aspectHeight:
        type: optional<integer>
        docs: The image aspect height in pixels.
      expectedType:
        type: optional<AssetType>
        docs: The expected type.
      resolveFirst:
        type: boolean
        docs: True to resolve first asset in the content list.
      mustBeImage:
        type: boolean
        docs: True to resolve first image in the content list.
        availability: deprecated
      resolveImage:
        type: boolean
        docs: True to resolve first image in the content list.
        availability: deprecated
      allowedExtensions:
        type: optional<list<string>>
        docs: The allowed file extensions.
      allowDuplicates:
        type: boolean
        docs: True, if duplicate values are allowed.
    source:
      openapi: ../openapi.json
  AssetPreviewMode:
    enum:
      - ImageAndFileName
      - Image
      - FileName
    docs: ''
    source:
      openapi: ../openapi.json
  LocalizedValueOfReadonlyListOfString: map<string, list<string>>
  AssetType:
    enum:
      - Unknown
      - Image
      - Audio
      - Video
    docs: ''
    source:
      openapi: ../openapi.json
  BooleanFieldPropertiesDto:
    properties:
      defaultValues:
        type: optional<LocalizedValueOfNullableBoolean>
        docs: The language specific default value for the field value.
      defaultValue:
        type: optional<boolean>
        docs: The default value for the field value.
      inlineEditable:
        type: boolean
        docs: Indicates that the inline editor is enabled for this field.
      editor:
        type: BooleanFieldEditor
        docs: The editor that is used to manage this field.
    source:
      openapi: ../openapi.json
  LocalizedValueOfNullableBoolean: map<string, optional<boolean>>
  BooleanFieldEditor:
    enum:
      - Checkbox
      - Toggle
    docs: ''
    source:
      openapi: ../openapi.json
  ComponentFieldPropertiesDto:
    properties:
      schemaIds:
        type: optional<list<string>>
        docs: The ID of the embedded schemas.
    source:
      openapi: ../openapi.json
  ComponentsFieldPropertiesDto:
    properties:
      minItems:
        type: optional<integer>
        docs: The minimum allowed items for the field value.
      maxItems:
        type: optional<integer>
        docs: The maximum allowed items for the field value.
      schemaIds:
        type: optional<list<string>>
        docs: The ID of the embedded schemas.
      uniqueFields:
        type: optional<list<string>>
        docs: The fields that must be unique.
    source:
      openapi: ../openapi.json
  DateTimeFieldPropertiesDto:
    properties:
      defaultValues:
        type: optional<LocalizedValueOfNullableInstant>
        docs: The language specific default value for the field value.
      defaultValue:
        type: optional<datetime>
        docs: The default value for the field value.
      maxValue:
        type: optional<datetime>
        docs: The maximum allowed value for the field value.
      minValue:
        type: optional<datetime>
        docs: The minimum allowed value for the field value.
      format:
        type: optional<string>
        docs: The format pattern when displayed in the UI.
      editor:
        type: DateTimeFieldEditor
        docs: The editor that is used to manage this field.
      calculatedDefaultValue:
        type: optional<DateTimeCalculatedDefaultValue>
        docs: The calculated default value for the field value.
    source:
      openapi: ../openapi.json
  LocalizedValueOfNullableInstant: map<string, optional<datetime>>
  DateTimeFieldEditor:
    enum:
      - Date
      - DateTime
    docs: ''
    source:
      openapi: ../openapi.json
  DateTimeCalculatedDefaultValue:
    enum:
      - Now
      - Today
    docs: ''
    source:
      openapi: ../openapi.json
  GeolocationFieldPropertiesDto:
    properties:
      editor:
        type: GeolocationFieldEditor
        docs: The editor that is used to manage this field.
    source:
      openapi: ../openapi.json
  GeolocationFieldEditor:
    type: literal<"Map">
    docs: ''
  JsonFieldPropertiesDto:
    properties:
      graphQLSchema:
        type: optional<string>
        docs: The GraphQL schema.
    source:
      openapi: ../openapi.json
  NumberFieldPropertiesDto:
    properties:
      defaultValues:
        type: optional<LocalizedValueOfNullableDouble>
        docs: The language specific default value for the field value.
      defaultValue:
        type: optional<double>
        docs: The default value for the field value.
      maxValue:
        type: optional<double>
        docs: The maximum allowed value for the field value.
      minValue:
        type: optional<double>
        docs: The minimum allowed value for the field value.
      allowedValues:
        type: optional<list<double>>
        docs: The allowed values for the field value.
      isUnique:
        type: boolean
        docs: >-
          Indicates if the field value must be unique. Ignored for nested fields
          and localized fields.
      inlineEditable:
        type: boolean
        docs: Indicates that the inline editor is enabled for this field.
      editor:
        type: NumberFieldEditor
        docs: The editor that is used to manage this field.
    source:
      openapi: ../openapi.json
  LocalizedValueOfNullableDouble: map<string, optional<double>>
  NumberFieldEditor:
    enum:
      - Input
      - Radio
      - Dropdown
      - Stars
    docs: ''
    source:
      openapi: ../openapi.json
  ReferencesFieldPropertiesDto:
    properties:
      defaultValues:
        type: optional<LocalizedValueOfReadonlyListOfString>
        docs: The language specific default value as a list of content ids.
      defaultValue:
        type: optional<list<string>>
        docs: The default value as a list of content ids.
      minItems:
        type: optional<integer>
        docs: The minimum allowed items for the field value.
      maxItems:
        type: optional<integer>
        docs: The maximum allowed items for the field value.
      allowDuplicates:
        type: boolean
        docs: True, if duplicate values are allowed.
      resolveReference:
        type: boolean
        docs: True to resolve references in the content list.
      mustBePublished:
        type: boolean
        docs: True when all references must be published.
      editor:
        type: ReferencesFieldEditor
        docs: The editor that is used to manage this field.
      schemaIds:
        type: optional<list<string>>
        docs: The ID of the referenced schemas.
    source:
      openapi: ../openapi.json
  ReferencesFieldEditor:
    enum:
      - List
      - Dropdown
      - Tags
      - Checkboxes
      - Input
    docs: ''
    source:
      openapi: ../openapi.json
  StringFieldPropertiesDto:
    properties:
      defaultValues:
        type: optional<LocalizedValueOfString>
        docs: The language specific default value for the field value.
      defaultValue:
        type: optional<string>
        docs: The default value for the field value.
      pattern:
        type: optional<string>
        docs: The pattern to enforce a specific format for the field value.
      patternMessage:
        type: optional<string>
        docs: The validation message for the pattern.
      folderId:
        type: optional<string>
        docs: The initial id to the folder when the control supports file uploads.
      minLength:
        type: optional<integer>
        docs: The minimum allowed length for the field value.
      maxLength:
        type: optional<integer>
        docs: The maximum allowed length for the field value.
      minCharacters:
        type: optional<integer>
        docs: The minimum allowed of normal characters for the field value.
      maxCharacters:
        type: optional<integer>
        docs: The maximum allowed of normal characters for the field value.
      minWords:
        type: optional<integer>
        docs: The minimum allowed number of words for the field value.
      maxWords:
        type: optional<integer>
        docs: The maximum allowed number of words for the field value.
      allowedValues:
        type: optional<list<string>>
        docs: The allowed values for the field value.
      schemaIds:
        type: optional<list<string>>
        docs: The allowed schema ids that can be embedded.
      isUnique:
        type: boolean
        docs: >-
          Indicates if the field value must be unique. Ignored for nested fields
          and localized fields.
      isEmbeddable:
        type: boolean
        docs: Indicates that other content items or references are embedded.
      inlineEditable:
        type: boolean
        docs: Indicates that the inline editor is enabled for this field.
      createEnum:
        type: boolean
        docs: Indicates whether GraphQL Enum should be created.
      contentType:
        type: StringContentType
        docs: How the string content should be interpreted.
      editor:
        type: StringFieldEditor
        docs: The editor that is used to manage this field.
    source:
      openapi: ../openapi.json
  LocalizedValueOfString: map<string, string>
  StringContentType:
    enum:
      - Unspecified
      - Html
      - Markdown
    docs: ''
    source:
      openapi: ../openapi.json
  StringFieldEditor:
    enum:
      - Input
      - Color
      - Markdown
      - Dropdown
      - Html
      - Radio
      - RichText
      - Slug
      - StockPhoto
      - TextArea
    docs: ''
    source:
      openapi: ../openapi.json
  TagsFieldPropertiesDto:
    properties:
      defaultValues:
        type: optional<LocalizedValueOfReadonlyListOfString>
        docs: The language specific default value for the field value.
      defaultValue:
        type: optional<list<string>>
        docs: The default value.
      minItems:
        type: optional<integer>
        docs: The minimum allowed items for the field value.
      maxItems:
        type: optional<integer>
        docs: The maximum allowed items for the field value.
      allowedValues:
        type: optional<list<string>>
        docs: The allowed values for the field value.
      createEnum:
        type: boolean
        docs: Indicates whether GraphQL Enum should be created.
      editor:
        type: TagsFieldEditor
        docs: The editor that is used to manage this field.
    source:
      openapi: ../openapi.json
  TagsFieldEditor:
    enum:
      - Tags
      - Checkboxes
      - Dropdown
    docs: ''
    source:
      openapi: ../openapi.json
  UiFieldPropertiesDto:
    properties:
      editor:
        type: UiFieldEditor
        docs: The editor that is used to manage this field.
    source:
      openapi: ../openapi.json
  UiFieldEditor:
    type: literal<"Separator">
    docs: ''
  NestedFieldDto:
    properties:
      fieldId:
        type: long
        docs: The ID of the field.
      name:
        type: string
        docs: The name of the field. Must be unique within the schema.
        validation:
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          minLength: 1
      isHidden:
        type: boolean
        docs: Defines if the field is hidden.
      isLocked:
        type: boolean
        docs: Defines if the field is locked.
      isDisabled:
        type: boolean
        docs: Defines if the field is disabled.
      properties:
        type: FieldPropertiesDto
        docs: The field properties.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  Resource:
    properties:
      _links:
        type: map<string, ResourceLink>
        docs: The links.
    source:
      openapi: ../openapi.json
  ResourceLink:
    properties:
      href:
        type: string
        docs: The link url.
        validation:
          minLength: 1
      method:
        type: string
        docs: The link method.
        validation:
          minLength: 1
      metadata:
        type: optional<string>
        docs: Additional data about the link.
    source:
      openapi: ../openapi.json
  StatusInfoDto:
    properties:
      status:
        type: string
        docs: The name of the status.
      color:
        type: string
        docs: The color of the status.
    source:
      openapi: ../openapi.json
  AllContentsByPostDto:
    properties:
      ids:
        type: optional<list<string>>
        docs: The list of ids to query.
      scheduledFrom:
        type: optional<datetime>
        docs: The start of the schedule.
      scheduledTo:
        type: optional<datetime>
        docs: The end of the schedule.
      referencing:
        type: optional<string>
        docs: The ID of the referencing content item.
      references:
        type: optional<string>
        docs: The ID of the reference content item.
      oData:
        type: optional<string>
        docs: The optional odata query.
      q: optional<unknown>
    source:
      openapi: ../openapi.json
  BulkResultDto:
    properties:
      error:
        type: optional<ErrorDto>
        docs: The error when the bulk job failed.
      jobIndex:
        type: integer
        docs: >-
          The index of the bulk job where the result belongs to. The order can
          change.
      id:
        type: optional<string>
        docs: The ID of the entity that has been handled successfully or not.
      contentId:
        type: optional<string>
        docs: The ID of the entity that has been handled successfully or not.
        availability: deprecated
    source:
      openapi: ../openapi.json
  BulkUpdateContentsJobDto:
    properties:
      query:
        type: optional<QueryJsonDto>
        docs: An optional query to identify the content to update.
      id:
        type: optional<string>
        docs: An optional ID of the content to update.
      data:
        type: optional<ContentData>
        docs: >-
          The data of the content when type is set to 'Upsert', 'Create',
          'Update' or 'Patch.
      status:
        type: optional<string>
        docs: The new status when the type is set to 'ChangeStatus' or 'Upsert'.
      dueTime:
        type: optional<datetime>
        docs: The due time.
      type:
        type: optional<BulkUpdateContentType>
        docs: The update type.
      schema:
        type: optional<string>
        docs: The optional schema id or name.
      patch:
        type: optional<boolean>
        docs: Makes the update as patch.
      permanent:
        type: optional<boolean>
        docs: True to delete the content permanently.
      expectedCount:
        type: optional<long>
        docs: >-
          The number of expected items. Set it to a higher number to update
          multiple items when a query is defined.
      expectedVersion:
        type: optional<long>
        docs: The expected version.
    source:
      openapi: ../openapi.json
  QueryJsonDto:
    properties:
      filter: optional<unknown>
      fullText: optional<string>
      skip: long
      take: long
      random: long
      top: long
      sort: optional<list<SortNode>>
    source:
      openapi: ../openapi.json
  SortNode:
    properties:
      path: PropertyPath
      order: SortOrder
    source:
      openapi: ../openapi.json
  PropertyPath: list<string>
  SortOrder:
    enum:
      - Ascending
      - Descending
    docs: ''
    source:
      openapi: ../openapi.json
  BulkUpdateContentType:
    enum:
      - Upsert
      - ChangeStatus
      - Create
      - Delete
      - Patch
      - Update
      - Validate
    docs: ''
    source:
      openapi: ../openapi.json
  UsersDto:
    properties:
      total:
        type: long
        docs: The total number of users.
      items:
        docs: The users.
        type: list<UserDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  UserDto:
    properties:
      id:
        type: string
        docs: The ID of the user.
      email:
        type: string
        docs: The email of the user. Unique value.
      displayName:
        type: string
        docs: The display name (usually first name and last name) of the user.
      isLocked:
        type: boolean
        docs: Determines if the user is locked.
      permissions:
        docs: Additional permissions for the user.
        type: list<string>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  ResourcesDto:
    properties: {}
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  TranslationDto:
    properties:
      result:
        type: TranslationResultCode
        docs: The result of the translation.
      text:
        type: optional<string>
        docs: The translated text.
    source:
      openapi: ../openapi.json
  TranslationResultCode:
    enum:
      - Translated
      - LanguageNotSupported
      - NotTranslated
      - NotConfigured
      - Unauthorized
      - Failed
    docs: ''
    source:
      openapi: ../openapi.json
  TemplatesDto:
    properties:
      items:
        docs: The event consumers.
        type: list<TemplateDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  TemplateDto:
    properties:
      name:
        type: string
        docs: The name of the template.
      title:
        type: string
        docs: The title of the template.
      description:
        type: string
        docs: The description of the template.
      isStarter:
        type: boolean
        docs: True, if the template is a starter.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  TemplateDetailsDto:
    properties:
      details:
        type: string
        docs: The details of the template.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  ContributorsDto:
    properties:
      items:
        docs: The contributors.
        type: list<ContributorDto>
      maxContributors:
        type: long
        docs: The maximum number of allowed contributors.
      _meta:
        type: optional<ContributorsMetadata>
        docs: The metadata to provide information about this request.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  ContributorDto:
    properties:
      contributorId:
        type: string
        docs: The ID of the user that contributes to the app.
      contributorName:
        type: string
        docs: The display name.
      contributorEmail:
        type: string
        docs: The email address.
      role:
        type: optional<string>
        docs: The role of the contributor.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  ContributorsMetadata:
    properties:
      isInvited:
        type: string
        docs: Indicates whether the user has been invited.
    source:
      openapi: ../openapi.json
  AssignContributorDto:
    properties:
      contributorId:
        type: string
        docs: The id or email of the user to add to the app.
        validation:
          minLength: 1
      role:
        type: optional<string>
        docs: The role of the contributor.
      invite:
        type: optional<boolean>
        docs: Set to true to invite the user if he does not exist.
    source:
      openapi: ../openapi.json
  TeamDto:
    properties:
      id:
        type: string
        docs: The ID of the team.
      name:
        type: string
        docs: The name of the team.
      version:
        type: long
        docs: The version of the team.
      created:
        type: datetime
        docs: The timestamp when the team has been created.
      lastModified:
        type: datetime
        docs: The timestamp when the team has been modified last.
      roleName:
        type: optional<string>
        docs: The role name of the user.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  LogDownloadDto:
    properties:
      downloadUrl:
        type: optional<string>
        docs: The url to download the log.
    source:
      openapi: ../openapi.json
  CallsUsageDtoDto:
    properties:
      totalCalls:
        type: long
        docs: The total number of API calls.
      totalBytes:
        type: long
        docs: The total number of bytes transferred.
      monthCalls:
        type: long
        docs: The total number of API calls this month.
      monthBytes:
        type: long
        docs: The total number of bytes transferred this month.
      blockingApiCalls:
        type: long
        docs: The amount of calls that will block the app.
      allowedBytes:
        type: long
        docs: The included API traffic.
      allowedCalls:
        type: long
        docs: The included API calls.
      averageElapsedMs:
        type: double
        docs: The average duration in milliseconds.
      details:
        type: map<string, list<CallsUsagePerDateDto>>
        docs: The statistics by date and group.
    source:
      openapi: ../openapi.json
  CallsUsagePerDateDto:
    properties:
      date:
        type: string
        docs: The date when the usage was tracked.
        validation:
          format: date
      totalCalls:
        type: long
        docs: The total number of API calls.
      totalBytes:
        type: long
        docs: The total number of bytes transferred.
      averageElapsedMs:
        type: double
        docs: The average duration in milliseconds.
    source:
      openapi: ../openapi.json
  CurrentStorageDto:
    properties:
      size:
        type: long
        docs: The size in bytes.
      maxAllowed:
        type: long
        docs: The maximum allowed asset size.
    source:
      openapi: ../openapi.json
  StorageUsagePerDateDto:
    properties:
      date:
        type: string
        docs: The date when the usage was tracked.
        validation:
          format: date
      totalCount:
        type: long
        docs: The number of assets.
      totalSize:
        type: long
        docs: The size in bytes.
    source:
      openapi: ../openapi.json
  SearchResultDto:
    properties:
      name:
        type: string
        docs: The name of the search result.
      type:
        type: SearchResultType
        docs: The type of the search result.
      label:
        type: optional<string>
        docs: An optional label.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  SearchResultType:
    enum:
      - Asset
      - Content
      - Dashboard
      - Setting
      - Rule
      - Schema
    docs: ''
    source:
      openapi: ../openapi.json
  SchemaDto:
    properties:
      id:
        type: string
        docs: The ID of the schema.
      createdBy:
        type: string
        docs: The user that has created the schema.
        validation:
          minLength: 1
      lastModifiedBy:
        type: string
        docs: The user that has updated the schema.
        validation:
          minLength: 1
      name:
        type: string
        docs: The name of the schema. Unique within the app.
        validation:
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
          minLength: 1
      type:
        type: SchemaType
        docs: The type of the schema.
      category:
        type: optional<string>
        docs: The name of the category.
      properties:
        type: SchemaPropertiesDto
        docs: The schema properties.
      isSingleton:
        type: boolean
        docs: Indicates if the schema is a singleton.
        availability: deprecated
      isPublished:
        type: boolean
        docs: Indicates if the schema is published.
      created:
        type: datetime
        docs: The date and time when the schema has been created.
      lastModified:
        type: datetime
        docs: The date and time when the schema has been modified last.
      version:
        type: long
        docs: The version of the schema.
      scripts:
        type: SchemaScriptsDto
        docs: The scripts.
      previewUrls:
        type: map<string, string>
        docs: The preview Urls.
      fieldsInLists:
        docs: The name of fields that are used in content lists.
        type: list<string>
      fieldsInReferences:
        docs: The name of fields that are used in content references.
        type: list<string>
      fieldRules:
        docs: The field rules.
        type: list<FieldRuleDto>
      fields:
        docs: The list of fields.
        type: list<FieldDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  SchemaType:
    enum:
      - Default
      - Singleton
      - Component
    docs: ''
    source:
      openapi: ../openapi.json
  SchemaPropertiesDto:
    properties:
      label:
        type: optional<string>
        docs: Optional label for the editor.
        validation:
          minLength: 0
          maxLength: 100
      hints:
        type: optional<string>
        docs: Hints to describe the schema.
        validation:
          minLength: 0
          maxLength: 1000
      contentsSidebarUrl:
        type: optional<string>
        docs: The url to a the sidebar plugin for content lists.
      contentSidebarUrl:
        type: optional<string>
        docs: The url to a the sidebar plugin for content items.
      contentEditorUrl:
        type: optional<string>
        docs: The url to the editor plugin.
      validateOnPublish:
        type: boolean
        docs: True to validate the content items on publish.
      tags:
        type: optional<list<string>>
        docs: Tags for automation processes.
    source:
      openapi: ../openapi.json
  SchemaScriptsDto:
    properties:
      query:
        type: optional<string>
        docs: The script that is executed for each content when querying contents.
      queryPre:
        type: optional<string>
        docs: The script that is executed for all contents when querying contents.
      create:
        type: optional<string>
        docs: The script that is executed when creating a content.
      update:
        type: optional<string>
        docs: The script that is executed when updating a content.
      delete:
        type: optional<string>
        docs: The script that is executed when deleting a content.
      change:
        type: optional<string>
        docs: The script that is executed when change a content status.
    source:
      openapi: ../openapi.json
  FieldRuleDto:
    properties:
      action:
        type: FieldRuleAction
        docs: The action to perform when the condition is met.
      field:
        type: string
        docs: The field to update.
        validation:
          minLength: 1
      condition:
        type: optional<string>
        docs: The condition.
    source:
      openapi: ../openapi.json
  FieldRuleAction:
    enum:
      - Disable
      - Hide
      - Require
    docs: ''
    source:
      openapi: ../openapi.json
  AddFieldDto:
    properties:
      name:
        type: string
        docs: The name of the field. Must be unique within the schema.
        validation:
          pattern: ^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$
          minLength: 1
      partitioning:
        type: optional<string>
        docs: Determines the optional partitioning of the field.
      properties:
        type: FieldPropertiesDto
        docs: The field properties.
    source:
      openapi: ../openapi.json
  ReorderFieldsDto:
    properties:
      fieldIds:
        docs: The field ids in the target order.
        type: list<long>
    source:
      openapi: ../openapi.json
  UpdateFieldDto:
    properties:
      properties:
        type: FieldPropertiesDto
        docs: The field properties.
    source:
      openapi: ../openapi.json
  SchemasDto:
    properties:
      items:
        docs: The schemas.
        type: list<SchemaDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  UpsertSchemaDto:
    properties:
      properties:
        type: optional<SchemaPropertiesDto>
        docs: The optional properties.
      scripts:
        type: optional<SchemaScriptsDto>
        docs: The optional scripts.
      fieldsInReferences:
        type: optional<list<string>>
        docs: The names of the fields that should be used in references.
      fieldsInLists:
        type: optional<list<string>>
        docs: >-
          The names of the fields that should be shown in lists, including meta
          fields.
      fields:
        type: optional<list<UpsertSchemaFieldDto>>
        docs: Optional fields.
      previewUrls:
        type: optional<map<string, optional<string>>>
        docs: The optional preview urls.
      fieldRules:
        type: optional<list<FieldRuleDto>>
        docs: The optional field Rules.
      category:
        type: optional<string>
        docs: The category.
      isPublished:
        type: boolean
        docs: Set it to true to autopublish the schema.
    source:
      openapi: ../openapi.json
  UpsertSchemaFieldDto:
    properties:
      name:
        type: string
        docs: The name of the field. Must be unique within the schema.
        validation:
          pattern: ^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$
          minLength: 1
      isHidden:
        type: boolean
        docs: Defines if the field is hidden.
      isLocked:
        type: boolean
        docs: Defines if the field is locked.
      isDisabled:
        type: boolean
        docs: Defines if the field is disabled.
      partitioning:
        type: optional<string>
        docs: Determines the optional partitioning of the field.
      properties:
        type: FieldPropertiesDto
        docs: The field properties.
      nested:
        type: optional<list<UpsertSchemaNestedFieldDto>>
        docs: The nested fields.
    source:
      openapi: ../openapi.json
  UpsertSchemaNestedFieldDto:
    properties:
      name:
        type: string
        docs: The name of the field. Must be unique within the schema.
        validation:
          pattern: ^[a-zA-Z0-9]+(\-[a-zA-Z0-9]+)*$
          minLength: 1
      isHidden:
        type: boolean
        docs: Defines if the field is hidden.
      isLocked:
        type: boolean
        docs: Defines if the field is locked.
      isDisabled:
        type: boolean
        docs: Defines if the field is disabled.
      properties:
        type: FieldPropertiesDto
        docs: The field properties.
    source:
      openapi: ../openapi.json
  ConfigurePreviewUrlsDto: map<string, string>
  RuleElementDto:
    properties:
      description:
        type: string
        docs: Describes the action or trigger type.
      display:
        type: string
        docs: The label for the action or trigger type.
      title:
        type: optional<string>
        docs: Optional title.
      iconColor:
        type: optional<string>
        docs: The color for the icon.
      iconImage:
        type: optional<string>
        docs: The image for the icon.
      readMore:
        type: optional<string>
        docs: The optional link to the product that is integrated.
      properties:
        docs: The properties.
        type: list<RuleElementPropertyDto>
    source:
      openapi: ../openapi.json
  RuleElementPropertyDto:
    properties:
      editor:
        type: RuleFieldEditor
        docs: The html editor.
      name:
        type: string
        docs: The name of the editor.
      display:
        type: string
        docs: The label to use.
      options:
        type: optional<list<string>>
        docs: The options, if the editor is a dropdown.
      description:
        type: optional<string>
        docs: The optional description.
      isFormattable:
        type: boolean
        docs: Indicates if the property is formattable.
      isRequired:
        type: boolean
        docs: Indicates if the property is required.
    source:
      openapi: ../openapi.json
  RuleFieldEditor:
    enum:
      - Checkbox
      - Dropdown
      - Email
      - Javascript
      - Number
      - Password
      - Text
      - TextArea
      - Url
    docs: ''
    source:
      openapi: ../openapi.json
  RulesDto:
    properties:
      items:
        docs: The rules.
        type: list<RuleDto>
      runningRuleId:
        type: optional<string>
        docs: The ID of the rule that is currently rerunning.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  RuleDto:
    properties:
      id:
        type: string
        docs: The ID of the rule.
      createdBy:
        type: string
        docs: The user that has created the rule.
      lastModifiedBy:
        type: string
        docs: The user that has updated the rule.
      created:
        type: datetime
        docs: The date and time when the rule has been created.
      lastModified:
        type: datetime
        docs: The date and time when the rule has been modified last.
      version:
        type: long
        docs: The version of the rule.
      isEnabled:
        type: boolean
        docs: Determines if the rule is enabled.
      name:
        type: optional<string>
        docs: Optional rule name.
      trigger:
        type: RuleTriggerDto
        docs: The trigger properties.
      action:
        type: RuleActionDto
        docs: The action properties.
      numSucceeded:
        type: long
        docs: The number of completed executions.
      numFailed:
        type: long
        docs: The number of failed executions.
      lastExecuted:
        type: optional<datetime>
        docs: The date and time when the rule was executed the last time.
        availability: deprecated
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  RuleTriggerDto:
    discriminant: triggerType
    base-properties: {}
    union:
      AssetChanged: AssetChangedRuleTriggerDto
      Comment: CommentRuleTriggerDto
      ContentChanged: ContentChangedRuleTriggerDto
      Manual: ManualRuleTriggerDto
      SchemaChanged: SchemaChangedRuleTriggerDto
      Usage: UsageRuleTriggerDto
    source:
      openapi: ../openapi.json
  AssetChangedRuleTriggerDto:
    properties:
      condition:
        type: optional<string>
        docs: Javascript condition when to trigger.
    source:
      openapi: ../openapi.json
  CommentRuleTriggerDto:
    properties:
      condition:
        type: optional<string>
        docs: Javascript condition when to trigger.
    source:
      openapi: ../openapi.json
  ContentChangedRuleTriggerDto:
    properties:
      schemas:
        type: optional<list<SchemaCondition>>
        docs: The schema settings.
      referencedSchemas:
        type: optional<list<SchemaCondition>>
        docs: The schema references.
      handleAll:
        type: boolean
        docs: >-
          Determines whether the trigger should handle all content changes
          events.
    source:
      openapi: ../openapi.json
  SchemaCondition:
    properties:
      schemaId: string
      condition: optional<string>
    source:
      openapi: ../openapi.json
  ManualRuleTriggerDto:
    properties: {}
    source:
      openapi: ../openapi.json
  SchemaChangedRuleTriggerDto:
    properties:
      condition:
        type: optional<string>
        docs: Javascript condition when to trigger.
    source:
      openapi: ../openapi.json
  UsageRuleTriggerDto:
    properties:
      limit:
        type: integer
        docs: The number of monthly api calls.
      numDays:
        type: optional<integer>
        docs: The number of days to check or null for the current month.
        validation:
          min: 1
          max: 30
    source:
      openapi: ../openapi.json
  RuleActionDto:
    discriminant: actionType
    base-properties: {}
    union:
      Algolia: AlgoliaRuleActionDto
      AzureQueue: AzureQueueRuleActionDto
      Comment: CommentRuleActionDto
      CreateContent: CreateContentRuleActionDto
      Discourse: DiscourseRuleActionDto
      ElasticSearch: ElasticSearchRuleActionDto
      Email: EmailRuleActionDto
      Fastly: FastlyRuleActionDto
      Medium: MediumRuleActionDto
      Notification: NotificationRuleActionDto
      OpenSearch: OpenSearchRuleActionDto
      Prerender: PrerenderRuleActionDto
      Script: ScriptRuleActionDto
      SignalR: SignalRRuleActionDto
      Slack: SlackRuleActionDto
      Tweet: TweetRuleActionDto
      Typesense: TypesenseRuleActionDto
      Webhook: WebhookRuleActionDto
    source:
      openapi: ../openapi.json
  AlgoliaRuleActionDto:
    properties:
      appId:
        type: string
        docs: The application ID.
        validation:
          minLength: 1
      apiKey:
        type: string
        docs: The API key to grant access to Squidex.
        validation:
          minLength: 1
      indexName:
        type: string
        docs: The name of the index.
        validation:
          minLength: 1
      document:
        type: string
        docs: The optional custom document.
      delete:
        type: string
        docs: The condition when to delete the entry.
    source:
      openapi: ../openapi.json
  AzureQueueRuleActionDto:
    properties:
      connectionString:
        type: string
        docs: The connection string to the storage account.
        validation:
          minLength: 1
      queue:
        type: string
        docs: The name of the queue.
        validation:
          minLength: 1
      payload:
        type: string
        docs: Leave it empty to use the full event as body.
    source:
      openapi: ../openapi.json
  CommentRuleActionDto:
    properties:
      text:
        type: string
        docs: The comment text.
        validation:
          minLength: 1
      client:
        type: string
        docs: An optional client name.
    source:
      openapi: ../openapi.json
  CreateContentRuleActionDto:
    properties:
      data:
        type: string
        docs: The content data.
        validation:
          minLength: 1
      schema:
        type: string
        docs: The name of the schema.
        validation:
          minLength: 1
      client:
        type: string
        docs: An optional client name.
      publish:
        type: boolean
        docs: Publish the content.
    source:
      openapi: ../openapi.json
  DiscourseRuleActionDto:
    properties:
      url:
        type: string
        docs: The url to the discourse server.
        validation:
          format: uri
          minLength: 1
      apiKey:
        type: string
        docs: The api key to authenticate to your discourse server.
        validation:
          minLength: 1
      apiUsername:
        type: string
        docs: The api username to authenticate to your discourse server.
        validation:
          minLength: 1
      text:
        type: string
        docs: The text as markdown.
        validation:
          minLength: 1
      title:
        type: string
        docs: The optional title when creating new topics.
      topic:
        type: optional<integer>
        docs: The optional topic id.
      category:
        type: optional<integer>
        docs: The optional category id.
    source:
      openapi: ../openapi.json
  ElasticSearchRuleActionDto:
    properties:
      host:
        type: string
        docs: The url to the instance or cluster.
        validation:
          format: uri
          minLength: 1
      indexName:
        type: string
        docs: The name of the index.
        validation:
          minLength: 1
      username:
        type: string
        docs: The optional username.
      password:
        type: string
        docs: The optional password.
      document:
        type: string
        docs: The optional custom document.
      delete:
        type: string
        docs: The condition when to delete the document.
    source:
      openapi: ../openapi.json
  EmailRuleActionDto:
    properties:
      serverHost:
        type: string
        docs: The IP address or host to the SMTP server.
        validation:
          minLength: 1
      serverPort:
        type: integer
        docs: The port to the SMTP server.
      serverUsername:
        type: string
        docs: The username for the SMTP server.
        validation:
          minLength: 1
      serverPassword:
        type: string
        docs: The password for the SMTP server.
        validation:
          minLength: 1
      messageFrom:
        type: string
        docs: The email sending address.
        validation:
          minLength: 1
      messageTo:
        type: string
        docs: The email message will be sent to.
        validation:
          minLength: 1
      messageSubject:
        type: string
        docs: The subject line for this email message.
        validation:
          minLength: 1
      messageBody:
        type: string
        docs: The message body.
        validation:
          minLength: 1
    source:
      openapi: ../openapi.json
  FastlyRuleActionDto:
    properties:
      apiKey:
        type: string
        docs: The API key to grant access to Squidex.
        validation:
          minLength: 1
      serviceId:
        type: string
        docs: The ID of the fastly service.
        validation:
          minLength: 1
    source:
      openapi: ../openapi.json
  MediumRuleActionDto:
    properties:
      accessToken:
        type: string
        docs: The self issued access token.
        validation:
          minLength: 1
      title:
        type: string
        docs: The title, used for the url.
        validation:
          minLength: 1
      content:
        type: string
        docs: The content, either html or markdown.
        validation:
          minLength: 1
      canonicalUrl:
        type: string
        docs: >-
          The original home of this content, if it was originally published
          elsewhere.
      tags:
        type: string
        docs: The optional comma separated list of tags.
      publicationId:
        type: string
        docs: Optional publication id.
      isHtml:
        type: boolean
        docs: Indicates whether the content is markdown or html.
    source:
      openapi: ../openapi.json
  NotificationRuleActionDto:
    properties:
      user:
        type: string
        docs: The user id or email.
        validation:
          minLength: 1
      text:
        type: string
        docs: The text to send.
        validation:
          minLength: 1
      url:
        type: string
        docs: The optional url to attach to the notification.
      client:
        type: string
        docs: An optional client name.
    source:
      openapi: ../openapi.json
  OpenSearchRuleActionDto:
    properties:
      host:
        type: string
        docs: The url to the instance or cluster.
        validation:
          format: uri
          minLength: 1
      indexName:
        type: string
        docs: The name of the index.
        validation:
          minLength: 1
      username:
        type: string
        docs: The optional username.
      password:
        type: string
        docs: The optional password.
      document:
        type: string
        docs: The optional custom document.
      delete:
        type: string
        docs: The condition when to delete the document.
    source:
      openapi: ../openapi.json
  PrerenderRuleActionDto:
    properties:
      token:
        type: string
        docs: The prerender token from your account.
        validation:
          minLength: 1
      url:
        type: string
        docs: The url to recache.
        validation:
          minLength: 1
    source:
      openapi: ../openapi.json
  ScriptRuleActionDto:
    properties:
      script:
        type: string
        docs: The script to render.
        validation:
          minLength: 1
    source:
      openapi: ../openapi.json
  SignalRRuleActionDto:
    properties:
      connectionString:
        type: string
        docs: The connection string to the Azure SignalR.
        validation:
          minLength: 1
      hubName:
        type: string
        docs: The name of the hub.
        validation:
          minLength: 1
      action:
        type: ActionTypeEnum
        docs: |-
          * Broadcast = send to all users.
           * User = send to all target users(s).
           * Group = send to all target group(s).
      methodName:
        type: string
        docs: Set the Name of the hub method received by the customer.
      target:
        type: string
        docs: >-
          Define target users or groups by id or name. One item per line. Not
          needed for Broadcast action.
      payload:
        type: string
        docs: Leave it empty to use the full event as body.
    source:
      openapi: ../openapi.json
  ActionTypeEnum:
    enum:
      - Broadcast
      - User
      - Group
    docs: ''
    source:
      openapi: ../openapi.json
  SlackRuleActionDto:
    properties:
      webhookUrl:
        type: string
        docs: The slack webhook url.
        validation:
          format: uri
          minLength: 1
      text:
        type: string
        docs: The text that is sent as message to slack.
        validation:
          minLength: 1
    source:
      openapi: ../openapi.json
  TweetRuleActionDto:
    properties:
      accessToken:
        type: string
        docs: ' The generated access token.'
        validation:
          minLength: 1
      accessSecret:
        type: string
        docs: ' The generated access secret.'
        validation:
          minLength: 1
      text:
        type: string
        docs: The text that is sent as tweet to twitter.
        validation:
          minLength: 1
    source:
      openapi: ../openapi.json
  TypesenseRuleActionDto:
    properties:
      host:
        type: string
        docs: The url to the instance or cluster.
        validation:
          format: uri
          minLength: 1
      indexName:
        type: string
        docs: The name of the index.
        validation:
          minLength: 1
      apiKey:
        type: string
        docs: The api key.
        validation:
          minLength: 1
      document:
        type: string
        docs: The optional custom document.
      delete:
        type: string
        docs: The condition when to delete the document.
    source:
      openapi: ../openapi.json
  WebhookRuleActionDto:
    properties:
      url:
        type: string
        docs: The url to the webhook.
        validation:
          format: uri
          minLength: 1
      method:
        type: WebhookMethod
        docs: The type of the request.
      payload:
        type: string
        docs: Leave it empty to use the full event as body.
      payloadType:
        type: string
        docs: The mime type of the payload.
      headers:
        type: string
        docs: The message headers in the format '[Key]=[Value]', one entry per line.
      sharedSecret:
        type: string
        docs: The shared secret that is used to calculate the payload signature.
    source:
      openapi: ../openapi.json
  WebhookMethod:
    enum:
      - POST
      - PUT
      - GET
      - DELETE
      - PATCH
    docs: ''
    source:
      openapi: ../openapi.json
  CreateRuleDto:
    properties:
      trigger:
        type: RuleTriggerDto
        docs: The trigger properties.
      action:
        type: RuleActionDto
        docs: The action properties.
    source:
      openapi: ../openapi.json
  SimulatedRuleEventsDto:
    properties:
      total:
        type: long
        docs: The total number of simulated rule events.
      items:
        docs: The simulated rule events.
        type: list<SimulatedRuleEventDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  SimulatedRuleEventDto:
    properties:
      eventId:
        type: string
        docs: The unique event id.
        validation:
          minLength: 1
      uniqueId:
        type: string
        docs: The the unique id of the simulated event.
        validation:
          minLength: 1
      eventName:
        type: string
        docs: The name of the event.
        validation:
          minLength: 1
      event: unknown
      enrichedEvent: optional<unknown>
      actionName:
        type: optional<string>
        docs: The data for the action.
      actionData:
        type: optional<string>
        docs: The name of the action.
      error:
        type: optional<string>
        docs: The name of the event.
      skipReasons:
        docs: The reason why the event has been skipped.
        type: list<SkipReason>
    source:
      openapi: ../openapi.json
  SkipReason:
    enum:
      - None
      - ConditionDoesNotMatch
      - ConditionPrecheckDoesNotMatch
      - Disabled
      - Failed
      - FromRule
      - NoAction
      - NoTrigger
      - TooOld
      - WrongEvent
      - WrongEventForTrigger
    docs: ''
    source:
      openapi: ../openapi.json
  RuleEventsDto:
    properties:
      total:
        type: long
        docs: The total number of rule events.
      items:
        docs: The rule events.
        type: list<RuleEventDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  RuleEventDto:
    properties:
      id:
        type: string
        docs: The ID of the event.
      created:
        type: datetime
        docs: The time when the event has been created.
      description:
        type: string
        docs: The description.
      eventName:
        type: string
        docs: The name of the event.
      lastDump:
        type: optional<string>
        docs: The last dump.
      numCalls:
        type: integer
        docs: The number of calls.
      nextAttempt:
        type: optional<datetime>
        docs: The next attempt.
      result:
        type: RuleResult
        docs: The result of the event.
      jobResult:
        type: RuleJobResult
        docs: The result of the job.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  RuleResult:
    enum:
      - Pending
      - Success
      - Failed
      - Timeout
    docs: ''
    source:
      openapi: ../openapi.json
  RuleJobResult:
    enum:
      - Pending
      - Success
      - Retry
      - Failed
      - Cancelled
    docs: ''
    source:
      openapi: ../openapi.json
  PlansDto:
    properties:
      plans:
        docs: The available plans.
        type: list<PlanDto>
      currentPlanId:
        type: optional<string>
        docs: The current plan id.
      planOwner:
        type: optional<string>
        docs: The plan owner.
      portalLink:
        type: optional<string>
        docs: The link to the management portal.
        validation:
          format: uri
      referral:
        type: optional<ReferralInfo>
        docs: The referral management.
      locked:
        type: PlansLockedReason
        docs: The reason why the plan cannot be changed.
    source:
      openapi: ../openapi.json
  PlanDto:
    properties:
      id:
        type: string
        docs: The ID of the plan.
      name:
        type: string
        docs: The name of the plan.
      costs:
        type: string
        docs: The monthly costs of the plan.
      confirmText:
        type: optional<string>
        docs: An optional confirm text for the monthly subscription.
      yearlyConfirmText:
        type: optional<string>
        docs: An optional confirm text for the yearly subscription.
      yearlyCosts:
        type: optional<string>
        docs: The yearly costs of the plan.
      yearlyId:
        type: optional<string>
        docs: The yearly ID of the plan.
      maxApiBytes:
        type: long
        docs: The maximum number of API traffic.
      maxApiCalls:
        type: long
        docs: The maximum number of API calls.
      maxAssetSize:
        type: long
        docs: The maximum allowed asset size.
      maxContributors:
        type: integer
        docs: The maximum number of contributors.
    source:
      openapi: ../openapi.json
  ReferralInfo:
    properties:
      code: string
      earned: string
      condition: string
    source:
      openapi: ../openapi.json
  PlansLockedReason:
    enum:
      - None
      - NotOwner
      - NoPermission
      - ManagedByTeam
    docs: ''
    source:
      openapi: ../openapi.json
  PlanChangedDto:
    properties:
      redirectUri:
        type: optional<string>
        docs: Optional redirect uri.
    source:
      openapi: ../openapi.json
  ChangePlanDto:
    properties:
      planId:
        type: string
        docs: The new plan id.
        validation:
          minLength: 1
    source:
      openapi: ../openapi.json
  ExposedValues: map<string, string>
  FeaturesDto:
    properties:
      features:
        docs: The latest features.
        type: list<FeatureDto>
      version:
        type: integer
        docs: The recent version.
    source:
      openapi: ../openapi.json
  FeatureDto:
    properties:
      name:
        type: string
        docs: The name of the feature.
      text:
        type: string
        docs: The description text.
    source:
      openapi: ../openapi.json
  LanguageDto:
    properties:
      iso2Code:
        type: string
        docs: The iso code of the language.
      englishName:
        type: string
        docs: The english name of the language.
      nativeName:
        type: string
        docs: The native name of the language.
    source:
      openapi: ../openapi.json
  HistoryEventDto:
    properties:
      message:
        type: string
        docs: The message for the event.
      eventType:
        type: string
        docs: The type of the original event.
      actor:
        type: string
        docs: The user who called the action.
      eventId:
        type: string
        docs: Gets a unique id for the event.
      created:
        type: datetime
        docs: The time when the event happened.
      version:
        type: long
        docs: The version identifier.
    source:
      openapi: ../openapi.json
  EventConsumersDto:
    properties:
      items:
        docs: The event consumers.
        type: list<EventConsumerDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  EventConsumerDto:
    properties:
      isStopped:
        type: boolean
        docs: Indicates if the event consumer has been started.
      isResetting:
        type: boolean
        docs: Indicates if the event consumer is resetting at the moment.
      count:
        type: integer
        docs: The number of handled events.
      name:
        type: string
        docs: The name of the event consumer.
        validation:
          minLength: 1
      error:
        type: optional<string>
        docs: >-
          The error details if the event consumer has been stopped after a
          failure.
      position:
        type: optional<string>
        docs: The position within the vent stream.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  QueryDto:
    properties:
      ids:
        type: optional<list<string>>
        docs: The optional list of ids to query.
      oData:
        type: optional<string>
        docs: The optional odata query.
      q: optional<unknown>
      parentId:
        type: optional<string>
        docs: The parent id (for assets).
    source:
      openapi: ../openapi.json
  CommentsDto:
    properties:
      createdComments:
        type: optional<list<CommentDto>>
        docs: The created comments including the updates.
      updatedComments:
        type: optional<list<CommentDto>>
        docs: The updates comments since the last version.
      deletedComments:
        type: optional<list<string>>
        docs: The deleted comments since the last version.
      version:
        type: long
        docs: The current version.
    source:
      openapi: ../openapi.json
  CommentDto:
    properties:
      id:
        type: string
        docs: The ID of the comment.
      time:
        type: datetime
        docs: The time when the comment was created or updated last.
      user:
        type: string
        docs: The user who created or updated the comment.
      text:
        type: string
        docs: The text of the comment.
      url:
        type: optional<string>
        docs: The url where the comment is created.
        validation:
          format: uri
    source:
      openapi: ../openapi.json
  UpsertCommentDto:
    properties:
      text:
        type: string
        docs: The comment text.
        validation:
          minLength: 1
      url:
        type: optional<string>
        docs: The url where the comment is created.
        validation:
          format: uri
    source:
      openapi: ../openapi.json
  BackupJobsDto:
    properties:
      items:
        docs: The backups.
        type: list<BackupJobDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  BackupJobDto:
    properties:
      id:
        type: string
        docs: The ID of the backup job.
      started:
        type: datetime
        docs: The time when the job has been started.
      stopped:
        type: optional<datetime>
        docs: The time when the job has been stopped.
      handledEvents:
        type: integer
        docs: The number of handled events.
      handledAssets:
        type: integer
        docs: The number of handled assets.
      status:
        type: JobStatus
        docs: The status of the operation.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  JobStatus:
    enum:
      - Created
      - Started
      - Completed
      - Failed
    docs: ''
    source:
      openapi: ../openapi.json
  RestoreJobDto:
    properties:
      url:
        type: string
        docs: The uri to load from.
        validation:
          format: uri
      log:
        docs: The status log.
        type: list<string>
      started:
        type: datetime
        docs: The time when the job has been started.
      stopped:
        type: optional<datetime>
        docs: The time when the job has been stopped.
      status:
        type: JobStatus
        docs: The status of the operation.
    source:
      openapi: ../openapi.json
  ResizeMode:
    enum:
      - Crop
      - CropUpsize
      - Pad
      - BoxPad
      - Max
      - Min
      - Stretch
    docs: ''
    source:
      openapi: ../openapi.json
  ImageFormat:
    enum:
      - AVIF
      - BMP
      - GIF
      - JPEG
      - PNG
      - TGA
      - TIFF
      - WEBP
    docs: ''
    source:
      openapi: ../openapi.json
  AssetFoldersDto:
    properties:
      total:
        type: long
        docs: The total number of assets.
      items:
        docs: The assets folders.
        type: list<AssetFolderDto>
      path:
        docs: The path to the current folder.
        type: list<AssetFolderDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  AssetFolderDto:
    properties:
      id:
        type: string
        docs: The ID of the asset.
      parentId:
        type: string
        docs: The ID of the parent folder. Empty for files without parent.
      folderName:
        type: string
        docs: The folder name.
      version:
        type: long
        docs: The version of the asset folder.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  AssetFolderScope:
    enum:
      - PathAndItems
      - Path
      - Items
    docs: ''
    source:
      openapi: ../openapi.json
  AssetsDto:
    properties:
      total:
        type: long
        docs: The total number of assets.
      items:
        docs: The assets.
        type: list<AssetDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  AssetDto:
    properties:
      id:
        type: string
        docs: The ID of the asset.
      parentId:
        type: string
        docs: The ID of the parent folder. Empty for files without parent.
      fileName:
        type: string
        docs: The file name.
      fileHash:
        type: optional<string>
        docs: The file hash.
      isProtected:
        type: boolean
        docs: True, when the asset is not public.
      slug:
        type: string
        docs: The slug.
      mimeType:
        type: string
        docs: The mime type.
      fileType:
        type: string
        docs: The file type.
      metadataText:
        type: string
        docs: The formatted text representation of the metadata.
      editToken:
        type: optional<string>
        docs: The UI token.
      metadata:
        type: map<string, unknown>
        docs: The asset metadata.
      tags:
        type: optional<list<string>>
        docs: The asset tags.
      fileSize:
        type: long
        docs: The size of the file in bytes.
      fileVersion:
        type: long
        docs: The version of the file.
      type:
        type: AssetType
        docs: The type of the asset.
      createdBy:
        type: string
        docs: The user that has created the schema.
      lastModifiedBy:
        type: string
        docs: The user that has updated the asset.
      created:
        type: datetime
        docs: The date and time when the asset has been created.
      lastModified:
        type: datetime
        docs: The date and time when the asset has been modified last.
      version:
        type: long
        docs: The version of the asset.
      _meta:
        type: optional<AssetMeta>
        docs: The metadata.
      isImage:
        type: boolean
        docs: Determines of the created file is an image.
        availability: deprecated
      pixelWidth:
        type: optional<integer>
        docs: The width of the image in pixels if the asset is an image.
        availability: deprecated
      pixelHeight:
        type: optional<integer>
        docs: The height of the image in pixels if the asset is an image.
        availability: deprecated
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  AssetMeta:
    properties:
      isDuplicate:
        type: string
        docs: Indicates whether the asset is a duplicate.
    source:
      openapi: ../openapi.json
  BulkUpdateAssetsJobDto:
    properties:
      id:
        type: optional<string>
        docs: An optional ID of the asset to update.
      type:
        type: optional<BulkUpdateAssetType>
        docs: The update type.
      parentId:
        type: optional<string>
        docs: The parent folder id.
      fileName:
        type: optional<string>
        docs: The new name of the asset.
      slug:
        type: optional<string>
        docs: The new slug of the asset.
      isProtected:
        type: optional<boolean>
        docs: True, when the asset is not public.
      tags:
        type: optional<list<string>>
        docs: The new asset tags.
      metadata:
        type: optional<map<string, unknown>>
        docs: The asset metadata.
      permanent:
        type: optional<boolean>
        docs: True to delete the asset permanently.
      expectedVersion:
        type: optional<long>
        docs: The expected version.
    source:
      openapi: ../openapi.json
  BulkUpdateAssetType:
    enum:
      - Annotate
      - Move
      - Delete
    docs: ''
    source:
      openapi: ../openapi.json
  AssetScriptsDto:
    properties:
      query:
        type: optional<string>
        docs: The script that is executed for each asset when querying assets.
      queryPre:
        type: optional<string>
        docs: The script that is executed for all assets when querying assets.
      create:
        type: optional<string>
        docs: The script that is executed when creating an asset.
      update:
        type: optional<string>
        docs: The script that is executed when updating a content.
      annotate:
        type: optional<string>
        docs: The script that is executed when annotating a content.
      move:
        type: optional<string>
        docs: The script that is executed when moving a content.
      delete:
        type: optional<string>
        docs: The script that is executed when deleting a content.
      version:
        type: long
        docs: The version of the app.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  ClientsDto:
    properties:
      items:
        docs: The clients.
        type: list<ClientDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  ClientDto:
    properties:
      id:
        type: string
        docs: The client id.
      secret:
        type: string
        docs: The client secret.
      name:
        type: string
        docs: The client name.
      role:
        type: optional<string>
        docs: The role of the client.
      apiCallsLimit:
        type: long
        docs: The number of allowed api calls per month for this client.
      apiTrafficLimit:
        type: long
        docs: The number of allowed api traffic bytes per month for this client.
      allowAnonymous:
        type: boolean
        docs: >-
          True to allow anonymous access without an access token for this
          client.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  AppLanguagesDto:
    properties:
      items:
        docs: The languages.
        type: list<AppLanguageDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  AppLanguageDto:
    properties:
      iso2Code:
        type: string
        docs: The iso code of the language.
      englishName:
        type: string
        docs: The english name of the language.
      fallback:
        docs: The fallback languages.
        type: list<string>
      isMaster:
        type: boolean
        docs: Indicates if the language is the master language.
      isOptional:
        type: boolean
        docs: Indicates if the language is optional.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  RolesDto:
    properties:
      items:
        docs: The roles.
        type: list<RoleDto>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  RoleDto:
    properties:
      name:
        type: string
        docs: The role name.
      numClients:
        type: integer
        docs: The number of clients with this role.
      numContributors:
        type: integer
        docs: The number of contributors with this role.
      isDefaultRole:
        type: boolean
        docs: Indicates if the role is an builtin default role.
      permissions:
        docs: Associated list of permissions.
        type: list<string>
      properties:
        type: map<string, unknown>
        docs: Associated list of UI properties.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  AppDto:
    properties:
      id:
        type: string
        docs: The ID of the app.
      name:
        type: string
        docs: The name of the app.
        validation:
          pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
      label:
        type: optional<string>
        docs: The optional label of the app.
      description:
        type: optional<string>
        docs: The optional description of the app.
      version:
        type: long
        docs: The version of the app.
      created:
        type: datetime
        docs: The timestamp when the app has been created.
      lastModified:
        type: datetime
        docs: The timestamp when the app has been modified last.
      teamId:
        type: optional<string>
        docs: The ID of the team.
      permissions:
        docs: The permission level of the user.
        type: list<string>
      canAccessApi:
        type: boolean
        docs: Indicates if the user can access the api.
        availability: deprecated
      canAccessContent:
        type: boolean
        docs: Indicates if the user can access at least one content.
      roleName:
        type: optional<string>
        docs: The role name of the user.
      roleProperties:
        type: map<string, unknown>
        docs: The properties from the role.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  AppSettingsDto:
    properties:
      patterns:
        docs: The configured app patterns.
        type: list<PatternDto>
      editors:
        docs: The configured UI editors.
        type: list<EditorDto>
      hideScheduler:
        type: boolean
        docs: Hide the scheduler for content items.
      hideDateTimeModeButton:
        type: boolean
        docs: Hide the datetime mode button.
      version:
        type: long
        docs: The version of the app.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  PatternDto:
    properties:
      name:
        type: string
        docs: The name of the suggestion.
      regex:
        type: string
        docs: The regex pattern.
      message:
        type: optional<string>
        docs: The regex message.
    source:
      openapi: ../openapi.json
  EditorDto:
    properties:
      name:
        type: string
        docs: The name of the editor.
      url:
        type: string
        docs: The url to the editor.
    source:
      openapi: ../openapi.json
  WorkflowsDto:
    properties:
      items:
        docs: The workflow.
        type: list<WorkflowDto>
      errors:
        docs: The errros that should be fixed.
        type: list<string>
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  WorkflowDto:
    properties:
      id:
        type: optional<string>
        docs: The workflow id.
      name:
        type: optional<string>
        docs: The name of the workflow.
      steps:
        type: optional<map<string, WorkflowStepDto>>
        docs: The workflow steps.
      schemaIds:
        type: optional<list<string>>
        docs: The schema ids.
      initial:
        type: optional<string>
        docs: The initial step.
    extends:
      - Resource
    source:
      openapi: ../openapi.json
  WorkflowStepDto:
    properties:
      transitions:
        type: optional<map<string, WorkflowTransitionDto>>
        docs: The transitions.
      color:
        type: optional<string>
        docs: The optional color.
      validate:
        type: optional<boolean>
        docs: True if the content should be validated when moving to this step.
      noUpdate:
        type: optional<boolean>
        docs: Indicates if updates should not be allowed.
      noUpdateExpression:
        type: optional<string>
        docs: >-
          Optional expression that must evaluate to true when you want to
          prevent updates.
      noUpdateRoles:
        type: optional<list<string>>
        docs: >-
          Optional list of roles to restrict the updates for users with these
          roles.
    source:
      openapi: ../openapi.json
  WorkflowTransitionDto:
    properties:
      expression:
        type: optional<string>
        docs: The optional expression.
      roles:
        type: optional<list<string>>
        docs: The optional restricted role.
    source:
      openapi: ../openapi.json
",
    },
    "apps.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteApp": {
              "auth": true,
              "display-name": "Delete the app.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to delete.",
                  "variable": "$appName",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteClient": {
              "auth": true,
              "display-name": "Revoke an app client.",
              "docs": "The application that uses this client credentials cannot access the API after it has been revoked.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "allowAnonymous": true,
                          "apiCallsLimit": 1000000,
                          "apiTrafficLimit": 1000000,
                          "id": "id",
                          "name": "name",
                          "role": "role",
                          "secret": "secret",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/clients/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the client that must be deleted.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Client deleted.",
                "status-code": 200,
                "type": "root.ClientsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteContributor": {
              "auth": true,
              "display-name": "Remove contributor.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isInvited": "isInvited",
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "contributorEmail": "contributorEmail",
                          "contributorId": "contributorId",
                          "contributorName": "contributorName",
                          "role": "role",
                        },
                      ],
                      "maxContributors": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/contributors/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the contributor.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Contributor removed.",
                "status-code": 200,
                "type": "root.ContributorsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteImage": {
              "auth": true,
              "display-name": "Remove the app image.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/image",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to update.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "App image removed.",
                "status-code": 200,
                "type": "root.AppDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteLanguage": {
              "auth": true,
              "display-name": "Deletes an app language.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "language": "language",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "englishName": "englishName",
                          "fallback": [
                            "fallback",
                          ],
                          "isMaster": true,
                          "isOptional": true,
                          "iso2Code": "iso2Code",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/languages/{language}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "language": {
                  "docs": "The language to delete from the app.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Language deleted.",
                "status-code": 200,
                "type": "root.AppLanguagesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteMyself": {
              "auth": true,
              "display-name": "Remove yourself.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isInvited": "isInvited",
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "contributorEmail": "contributorEmail",
                          "contributorId": "contributorId",
                          "contributorName": "contributorName",
                          "role": "role",
                        },
                      ],
                      "maxContributors": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/contributors/me",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Contributor removed.",
                "status-code": 200,
                "type": "root.ContributorsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteRole": {
              "auth": true,
              "display-name": "Remove role from app.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "roleName": "roleName",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "isDefaultRole": true,
                          "name": "name",
                          "numClients": 1,
                          "numContributors": 1,
                          "permissions": [
                            "permissions",
                          ],
                          "properties": {
                            "key": "value",
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/roles/{roleName}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "roleName": {
                  "docs": "The name of the role.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Role deleted.",
                "status-code": 200,
                "type": "root.RolesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteWorkflow": {
              "auth": true,
              "display-name": "Delete a workflow.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "errors": [
                        "errors",
                      ],
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "id": "id",
                          "initial": "initial",
                          "name": "name",
                          "schemaIds": [
                            "schemaIds",
                          ],
                          "steps": {
                            "key": {},
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/workflows/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the workflow to update.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Workflow deleted.",
                "status-code": 200,
                "type": "root.WorkflowsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getApp": {
              "auth": true,
              "display-name": "Get an app by name.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Apps returned.",
                "status-code": 200,
                "type": "root.AppDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getApps": {
              "auth": true,
              "display-name": "Get your apps.",
              "docs": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
You will retrieve all apps, where you are assigned as a contributor.",
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "canAccessApi": true,
                        "canAccessContent": true,
                        "created": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "id": "id",
                        "label": "label",
                        "lastModified": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "permissions": [
                          "permissions",
                        ],
                        "roleName": "roleName",
                        "roleProperties": {
                          "key": "value",
                        },
                        "teamId": "teamId",
                        "version": 1000000,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps",
              "response": {
                "docs": "Apps returned.",
                "status-code": 200,
                "type": "list<root.AppDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getAssetScripts": {
              "auth": true,
              "display-name": "Get the app asset scripts.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "annotate": "annotate",
                      "create": "create",
                      "delete": "delete",
                      "move": "move",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/scripts",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to get the asset scripts for.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Asset scripts returned.",
                "status-code": 200,
                "type": "root.AssetScriptsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getClients": {
              "auth": true,
              "display-name": "Get app clients.",
              "docs": "Gets all configured clients for the app with the specified name.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "allowAnonymous": true,
                          "apiCallsLimit": 1000000,
                          "apiTrafficLimit": 1000000,
                          "id": "id",
                          "name": "name",
                          "role": "role",
                          "secret": "secret",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/clients",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Clients returned.",
                "status-code": 200,
                "type": "root.ClientsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getContributors": {
              "auth": true,
              "display-name": "Get app contributors.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isInvited": "isInvited",
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "contributorEmail": "contributorEmail",
                          "contributorId": "contributorId",
                          "contributorName": "contributorName",
                          "role": "role",
                        },
                      ],
                      "maxContributors": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/contributors",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Contributors returned.",
                "status-code": 200,
                "type": "root.ContributorsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getImage": {
              "auth": true,
              "display-name": "Get the app image.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/image",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "App image found and content or (resized) image returned.",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getLanguages": {
              "auth": true,
              "display-name": "Get app languages.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "englishName": "englishName",
                          "fallback": [
                            "fallback",
                          ],
                          "isMaster": true,
                          "isOptional": true,
                          "iso2Code": "iso2Code",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/languages",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Languages returned.",
                "status-code": 200,
                "type": "root.AppLanguagesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getPermissions": {
              "auth": true,
              "display-name": "Get app permissions.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": [
                      "string",
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/roles/permissions",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "App permissions returned.",
                "status-code": 200,
                "type": "list<string>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getRoles": {
              "auth": true,
              "display-name": "Get app roles.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "isDefaultRole": true,
                          "name": "name",
                          "numClients": 1,
                          "numContributors": 1,
                          "permissions": [
                            "permissions",
                          ],
                          "properties": {
                            "key": "value",
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/roles",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Roles returned.",
                "status-code": 200,
                "type": "root.RolesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getSettings": {
              "auth": true,
              "display-name": "Get the app settings.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "editors": [
                        {
                          "name": "name",
                          "url": "url",
                        },
                      ],
                      "hideDateTimeModeButton": true,
                      "hideScheduler": true,
                      "patterns": [
                        {
                          "message": "message",
                          "name": "name",
                          "regex": "regex",
                        },
                      ],
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/settings",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to get the settings for.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "App settings returned.",
                "status-code": 200,
                "type": "root.AppSettingsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getTeamApps": {
              "auth": true,
              "display-name": "Get team apps.",
              "docs": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
You will retrieve all apps, where you are assigned as a contributor.",
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "response": {
                    "body": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "canAccessApi": true,
                        "canAccessContent": true,
                        "created": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "id": "id",
                        "label": "label",
                        "lastModified": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "permissions": [
                          "permissions",
                        ],
                        "roleName": "roleName",
                        "roleProperties": {
                          "key": "value",
                        },
                        "teamId": "teamId",
                        "version": 1000000,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams/{team}/apps",
              "path-parameters": {
                "team": {
                  "docs": "The ID of the team.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Apps returned.",
                "status-code": 200,
                "type": "list<root.AppDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getWorkflows": {
              "auth": true,
              "display-name": "Get app workflow.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "errors": [
                        "errors",
                      ],
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "id": "id",
                          "initial": "initial",
                          "name": "name",
                          "schemaIds": [
                            "schemaIds",
                          ],
                          "steps": {
                            "key": {},
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/workflows",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Workflows returned.",
                "status-code": 200,
                "type": "root.WorkflowsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postApp": {
              "auth": true,
              "display-name": "Create a new app.",
              "docs": "You can only create an app when you are authenticated as a user (OpenID implicit flow).
You will be assigned as owner of the new app automatically.",
              "errors": [
                "root.BadRequestError",
                "root.ConflictError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps",
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "The name of the app.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]+(\-[a-z0-9]+)*$",
                      },
                    },
                    "template": {
                      "docs": "Initialize the app with the inbuilt template.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateAppDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "App created.",
                "status-code": 201,
                "type": "root.AppDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postClient": {
              "auth": true,
              "display-name": "Create a new app client.",
              "docs": "Create a new client for the app with the specified name.
The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "allowAnonymous": true,
                          "apiCallsLimit": 1000000,
                          "apiTrafficLimit": 1000000,
                          "id": "id",
                          "name": "name",
                          "role": "role",
                          "secret": "secret",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/clients",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "The ID of the client.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]+(\-[a-z0-9]+)*$",
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateClientDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Client created.",
                "status-code": 201,
                "type": "root.ClientsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postContributor": {
              "auth": true,
              "display-name": "Assign contributor to app.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "contributorId": "contributorId",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isInvited": "isInvited",
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "contributorEmail": "contributorEmail",
                          "contributorId": "contributorId",
                          "contributorName": "contributorName",
                          "role": "role",
                        },
                      ],
                      "maxContributors": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/contributors",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": "root.AssignContributorDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Contributor assigned to app.",
                "status-code": 201,
                "type": "root.ContributorsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postLanguage": {
              "auth": true,
              "display-name": "Attaches an app language.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "language": "language",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "englishName": "englishName",
                          "fallback": [
                            "fallback",
                          ],
                          "isMaster": true,
                          "isOptional": true,
                          "iso2Code": "iso2Code",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/languages",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "language": {
                      "docs": "The language to add.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AddLanguageDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Language created.",
                "status-code": 201,
                "type": "root.AppLanguagesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postRole": {
              "auth": true,
              "display-name": "Add role to app.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "isDefaultRole": true,
                          "name": "name",
                          "numClients": 1,
                          "numContributors": 1,
                          "permissions": [
                            "permissions",
                          ],
                          "properties": {
                            "key": "value",
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/roles",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "The role name.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AddRoleDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Role created.",
                "status-code": 201,
                "type": "root.RolesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postWorkflow": {
              "auth": true,
              "display-name": "Create a workflow.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "errors": [
                        "errors",
                      ],
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "id": "id",
                          "initial": "initial",
                          "name": "name",
                          "schemaIds": [
                            "schemaIds",
                          ],
                          "steps": {
                            "key": {},
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/workflows",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "The name of the workflow.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AddWorkflowDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Workflow created.",
                "status-code": 200,
                "type": "root.WorkflowsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putApp": {
              "auth": true,
              "display-name": "Update the app.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to update.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "description": {
                      "docs": "The optional description of your app.",
                      "type": "optional<string>",
                    },
                    "label": {
                      "docs": "The optional label of your app.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateAppDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "App updated.",
                "status-code": 200,
                "type": "root.AppDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putAppTeam": {
              "auth": true,
              "display-name": "Transfer the app.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/team",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to update.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "teamId": {
                      "docs": "The ID of the team.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TransferToTeamDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "App transferred.",
                "status-code": 200,
                "type": "root.AppDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putAssetScripts": {
              "auth": true,
              "display-name": "Update the app asset scripts.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "annotate": "annotate",
                      "create": "create",
                      "delete": "delete",
                      "move": "move",
                      "query": "query",
                      "queryPre": "queryPre",
                      "update": "update",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/scripts",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to update.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "annotate": {
                      "docs": "The script that is executed when annotating a content.",
                      "type": "optional<string>",
                    },
                    "create": {
                      "docs": "The script that is executed when creating an asset.",
                      "type": "optional<string>",
                    },
                    "delete": {
                      "docs": "The script that is executed when deleting a content.",
                      "type": "optional<string>",
                    },
                    "move": {
                      "docs": "The script that is executed when moving a content.",
                      "type": "optional<string>",
                    },
                    "query": {
                      "docs": "The script that is executed for each asset when querying assets.",
                      "type": "optional<string>",
                    },
                    "queryPre": {
                      "docs": "The script that is executed for all assets when querying assets.",
                      "type": "optional<string>",
                    },
                    "update": {
                      "docs": "The script that is executed when updating a content.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateAssetScriptsDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Asset scripts updated.",
                "status-code": 200,
                "type": "root.AssetScriptsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putClient": {
              "auth": true,
              "display-name": "Updates an app client.",
              "docs": "Only the display name can be changed, create a new client if necessary.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "allowAnonymous": true,
                          "apiCallsLimit": 1000000,
                          "apiTrafficLimit": 1000000,
                          "id": "id",
                          "name": "name",
                          "role": "role",
                          "secret": "secret",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/clients/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the client that must be updated.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "allowAnonymous": {
                      "docs": "True to allow anonymous access without an access token for this client.",
                      "type": "optional<boolean>",
                    },
                    "apiCallsLimit": {
                      "docs": "The number of allowed api calls per month for this client.",
                      "type": "optional<long>",
                    },
                    "apiTrafficLimit": {
                      "docs": "The number of allowed api traffic bytes per month for this client.",
                      "type": "optional<long>",
                    },
                    "name": {
                      "docs": "The new display name of the client.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 20,
                        "minLength": 0,
                        "pattern": undefined,
                      },
                    },
                    "role": {
                      "docs": "The role of the client.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateClientDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Client updated.",
                "status-code": 200,
                "type": "root.ClientsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putLanguage": {
              "auth": true,
              "display-name": "Updates an app language.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "language": "language",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "englishName": "englishName",
                          "fallback": [
                            "fallback",
                          ],
                          "isMaster": true,
                          "isOptional": true,
                          "iso2Code": "iso2Code",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/languages/{language}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "language": {
                  "docs": "The language to update.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "fallback": {
                      "docs": "Optional fallback languages.",
                      "type": "optional<list<string>>",
                    },
                    "isMaster": {
                      "docs": "Set the value to true to make the language the master.",
                      "type": "optional<boolean>",
                    },
                    "isOptional": {
                      "docs": "Set the value to true to make the language optional.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateLanguageDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Language updated.",
                "status-code": 200,
                "type": "root.AppLanguagesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putRole": {
              "auth": true,
              "display-name": "Update an app role.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "roleName": "roleName",
                  },
                  "request": {
                    "permissions": [
                      "permissions",
                    ],
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "isDefaultRole": true,
                          "name": "name",
                          "numClients": 1,
                          "numContributors": 1,
                          "permissions": [
                            "permissions",
                          ],
                          "properties": {
                            "key": "value",
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/roles/{roleName}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "roleName": {
                  "docs": "The name of the role to be updated.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "permissions": {
                      "docs": "Associated list of permissions.",
                      "type": "list<string>",
                    },
                    "properties": {
                      "docs": "Associated list of UI properties.",
                      "type": "optional<map<string, unknown>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateRoleDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Role updated.",
                "status-code": 200,
                "type": "root.RolesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putSettings": {
              "auth": true,
              "display-name": "Update the app settings.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "editors": [
                      {
                        "name": "name",
                        "url": "url",
                      },
                    ],
                    "patterns": [
                      {
                        "name": "name",
                        "regex": "regex",
                      },
                    ],
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "editors": [
                        {
                          "name": "name",
                          "url": "url",
                        },
                      ],
                      "hideDateTimeModeButton": true,
                      "hideScheduler": true,
                      "patterns": [
                        {
                          "message": "message",
                          "name": "name",
                          "regex": "regex",
                        },
                      ],
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/settings",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to update.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "editors": {
                      "docs": "The configured UI editors.",
                      "type": "list<root.EditorDto>",
                    },
                    "hideDateTimeModeButton": {
                      "docs": "Hide the datetime mode button.",
                      "type": "optional<boolean>",
                    },
                    "hideScheduler": {
                      "docs": "Hide the scheduler for content items.",
                      "type": "optional<boolean>",
                    },
                    "patterns": {
                      "docs": "The configured app patterns.",
                      "type": "list<root.PatternDto>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateAppSettingsDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "App updated.",
                "status-code": 200,
                "type": "root.AppSettingsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putWorkflow": {
              "auth": true,
              "display-name": "Update a workflow.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {
                    "initial": "initial",
                    "steps": {
                      "key": {},
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "errors": [
                        "errors",
                      ],
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "id": "id",
                          "initial": "initial",
                          "name": "name",
                          "schemaIds": [
                            "schemaIds",
                          ],
                          "steps": {
                            "key": {},
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/workflows/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the workflow to update.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "initial": {
                      "docs": "The initial step.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "name": {
                      "docs": "The name of the workflow.",
                      "type": "optional<string>",
                    },
                    "schemaIds": {
                      "docs": "The schema ids.",
                      "type": "optional<list<string>>",
                    },
                    "steps": {
                      "docs": "The workflow steps.",
                      "type": "map<string, root.WorkflowStepDto>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateWorkflowDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Workflow updated.",
                "status-code": 200,
                "type": "root.WorkflowsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "uploadImage": {
              "auth": true,
              "display-name": "Upload the app image.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "canAccessApi": true,
                      "canAccessContent": true,
                      "created": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "label": "label",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "permissions": [
                        "permissions",
                      ],
                      "roleName": "roleName",
                      "roleProperties": {
                        "key": "value",
                      },
                      "teamId": "teamId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/image",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app to update.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "file": "optional<file>",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "AppsUploadImageRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "App image uploaded.",
                "status-code": 200,
                "type": "root.AppDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getAssetScripts:
      path: /api/apps/{app}/assets/scripts
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to get the asset scripts for.
      display-name: Get the app asset scripts.
      response:
        docs: Asset scripts returned.
        type: root.AssetScriptsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              query: query
              queryPre: queryPre
              create: create
              update: update
              annotate: annotate
              move: move
              delete: delete
              version: 1000000
    putAssetScripts:
      path: /api/apps/{app}/assets/scripts
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to update.
      display-name: Update the app asset scripts.
      request:
        name: UpdateAssetScriptsDto
        body:
          properties:
            query:
              type: optional<string>
              docs: The script that is executed for each asset when querying assets.
            queryPre:
              type: optional<string>
              docs: The script that is executed for all assets when querying assets.
            create:
              type: optional<string>
              docs: The script that is executed when creating an asset.
            update:
              type: optional<string>
              docs: The script that is executed when updating a content.
            annotate:
              type: optional<string>
              docs: The script that is executed when annotating a content.
            move:
              type: optional<string>
              docs: The script that is executed when moving a content.
            delete:
              type: optional<string>
              docs: The script that is executed when deleting a content.
        content-type: application/json
      response:
        docs: Asset scripts updated.
        type: root.AssetScriptsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              query: query
              queryPre: queryPre
              create: create
              update: update
              annotate: annotate
              move: move
              delete: delete
              version: 1000000
    getClients:
      path: /api/apps/{app}/clients
      method: GET
      auth: true
      docs: Gets all configured clients for the app with the specified name.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get app clients.
      response:
        docs: Clients returned.
        type: root.ClientsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  secret: secret
                  name: name
                  role: role
                  apiCallsLimit: 1000000
                  apiTrafficLimit: 1000000
                  allowAnonymous: true
    postClient:
      path: /api/apps/{app}/clients
      method: POST
      auth: true
      docs: >-
        Create a new client for the app with the specified name.

        The client secret is auto generated on the server and returned. The
        client does not expire, the access token is valid for 30 days.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Create a new app client.
      request:
        name: CreateClientDto
        body:
          properties:
            id:
              type: string
              docs: The ID of the client.
              validation:
                pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
                minLength: 1
        content-type: application/json
      response:
        docs: Client created.
        type: root.ClientsDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  secret: secret
                  name: name
                  role: role
                  apiCallsLimit: 1000000
                  apiTrafficLimit: 1000000
                  allowAnonymous: true
    putClient:
      path: /api/apps/{app}/clients/{id}
      method: PUT
      auth: true
      docs: Only the display name can be changed, create a new client if necessary.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the client that must be updated.
      display-name: Updates an app client.
      request:
        name: UpdateClientDto
        body:
          properties:
            name:
              type: optional<string>
              docs: The new display name of the client.
              validation:
                minLength: 0
                maxLength: 20
            role:
              type: optional<string>
              docs: The role of the client.
            allowAnonymous:
              type: optional<boolean>
              docs: >-
                True to allow anonymous access without an access token for this
                client.
            apiCallsLimit:
              type: optional<long>
              docs: The number of allowed api calls per month for this client.
            apiTrafficLimit:
              type: optional<long>
              docs: >-
                The number of allowed api traffic bytes per month for this
                client.
        content-type: application/json
      response:
        docs: Client updated.
        type: root.ClientsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  secret: secret
                  name: name
                  role: role
                  apiCallsLimit: 1000000
                  apiTrafficLimit: 1000000
                  allowAnonymous: true
    deleteClient:
      path: /api/apps/{app}/clients/{id}
      method: DELETE
      auth: true
      docs: >-
        The application that uses this client credentials cannot access the API
        after it has been revoked.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the client that must be deleted.
      display-name: Revoke an app client.
      response:
        docs: Client deleted.
        type: root.ClientsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  secret: secret
                  name: name
                  role: role
                  apiCallsLimit: 1000000
                  apiTrafficLimit: 1000000
                  allowAnonymous: true
    getContributors:
      path: /api/apps/{app}/contributors
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get app contributors.
      response:
        docs: Contributors returned.
        type: root.ContributorsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  contributorId: contributorId
                  contributorName: contributorName
                  contributorEmail: contributorEmail
                  role: role
              maxContributors: 1000000
              _meta:
                isInvited: isInvited
    postContributor:
      path: /api/apps/{app}/contributors
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Assign contributor to app.
      request:
        body: root.AssignContributorDto
        content-type: application/json
      response:
        docs: Contributor assigned to app.
        type: root.ContributorsDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            contributorId: contributorId
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  contributorId: contributorId
                  contributorName: contributorName
                  contributorEmail: contributorEmail
                  role: role
              maxContributors: 1000000
              _meta:
                isInvited: isInvited
    deleteMyself:
      path: /api/apps/{app}/contributors/me
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Remove yourself.
      response:
        docs: Contributor removed.
        type: root.ContributorsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  contributorId: contributorId
                  contributorName: contributorName
                  contributorEmail: contributorEmail
                  role: role
              maxContributors: 1000000
              _meta:
                isInvited: isInvited
    deleteContributor:
      path: /api/apps/{app}/contributors/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the contributor.
      display-name: Remove contributor.
      response:
        docs: Contributor removed.
        type: root.ContributorsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  contributorId: contributorId
                  contributorName: contributorName
                  contributorEmail: contributorEmail
                  role: role
              maxContributors: 1000000
              _meta:
                isInvited: isInvited
    getImage:
      path: /api/apps/{app}/image
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get the app image.
      response:
        docs: App image found and content or (resized) image returned.
        type: file
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
    uploadImage:
      path: /api/apps/{app}/image
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to update.
      display-name: Upload the app image.
      request:
        name: AppsUploadImageRequest
        body:
          properties:
            file: optional<file>
        content-type: multipart/form-data
      response:
        docs: App image uploaded.
        type: root.AppDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              label: label
              description: description
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              teamId: teamId
              permissions:
                - permissions
              canAccessApi: true
              canAccessContent: true
              roleName: roleName
              roleProperties:
                key: value
    deleteImage:
      path: /api/apps/{app}/image
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to update.
      display-name: Remove the app image.
      response:
        docs: App image removed.
        type: root.AppDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              label: label
              description: description
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              teamId: teamId
              permissions:
                - permissions
              canAccessApi: true
              canAccessContent: true
              roleName: roleName
              roleProperties:
                key: value
    getLanguages:
      path: /api/apps/{app}/languages
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get app languages.
      response:
        docs: Languages returned.
        type: root.AppLanguagesDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  iso2Code: iso2Code
                  englishName: englishName
                  fallback:
                    - fallback
                  isMaster: true
                  isOptional: true
    postLanguage:
      path: /api/apps/{app}/languages
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Attaches an app language.
      request:
        name: AddLanguageDto
        body:
          properties:
            language:
              type: string
              docs: The language to add.
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: Language created.
        type: root.AppLanguagesDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            language: language
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  iso2Code: iso2Code
                  englishName: englishName
                  fallback:
                    - fallback
                  isMaster: true
                  isOptional: true
    putLanguage:
      path: /api/apps/{app}/languages/{language}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        language:
          type: string
          docs: The language to update.
      display-name: Updates an app language.
      request:
        name: UpdateLanguageDto
        body:
          properties:
            isMaster:
              type: optional<boolean>
              docs: Set the value to true to make the language the master.
            isOptional:
              type: optional<boolean>
              docs: Set the value to true to make the language optional.
            fallback:
              type: optional<list<string>>
              docs: Optional fallback languages.
        content-type: application/json
      response:
        docs: Language updated.
        type: root.AppLanguagesDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            language: language
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  iso2Code: iso2Code
                  englishName: englishName
                  fallback:
                    - fallback
                  isMaster: true
                  isOptional: true
    deleteLanguage:
      path: /api/apps/{app}/languages/{language}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        language:
          type: string
          docs: The language to delete from the app.
      display-name: Deletes an app language.
      response:
        docs: Language deleted.
        type: root.AppLanguagesDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            language: language
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  iso2Code: iso2Code
                  englishName: englishName
                  fallback:
                    - fallback
                  isMaster: true
                  isOptional: true
    getRoles:
      path: /api/apps/{app}/roles
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get app roles.
      response:
        docs: Roles returned.
        type: root.RolesDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  name: name
                  numClients: 1
                  numContributors: 1
                  isDefaultRole: true
                  permissions:
                    - permissions
                  properties:
                    key: value
    postRole:
      path: /api/apps/{app}/roles
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Add role to app.
      request:
        name: AddRoleDto
        body:
          properties:
            name:
              type: string
              docs: The role name.
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: Role created.
        type: root.RolesDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            name: name
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  name: name
                  numClients: 1
                  numContributors: 1
                  isDefaultRole: true
                  permissions:
                    - permissions
                  properties:
                    key: value
    getPermissions:
      path: /api/apps/{app}/roles/permissions
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get app permissions.
      response:
        docs: App permissions returned.
        type: list<string>
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              - string
    putRole:
      path: /api/apps/{app}/roles/{roleName}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        roleName:
          type: string
          docs: The name of the role to be updated.
      display-name: Update an app role.
      request:
        name: UpdateRoleDto
        body:
          properties:
            permissions:
              docs: Associated list of permissions.
              type: list<string>
            properties:
              type: optional<map<string, unknown>>
              docs: Associated list of UI properties.
        content-type: application/json
      response:
        docs: Role updated.
        type: root.RolesDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            roleName: roleName
          request:
            permissions:
              - permissions
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  name: name
                  numClients: 1
                  numContributors: 1
                  isDefaultRole: true
                  permissions:
                    - permissions
                  properties:
                    key: value
    deleteRole:
      path: /api/apps/{app}/roles/{roleName}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        roleName:
          type: string
          docs: The name of the role.
      display-name: Remove role from app.
      response:
        docs: Role deleted.
        type: root.RolesDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            roleName: roleName
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  name: name
                  numClients: 1
                  numContributors: 1
                  isDefaultRole: true
                  permissions:
                    - permissions
                  properties:
                    key: value
    getApps:
      path: /api/apps
      method: GET
      auth: true
      docs: >-
        You can only retrieve the list of apps when you are authenticated as a
        user (OpenID implicit flow).

        You will retrieve all apps, where you are assigned as a contributor.
      source:
        openapi: ../openapi.json
      display-name: Get your apps.
      response:
        docs: Apps returned.
        type: list<root.AppDto>
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              - _links:
                  key:
                    href: href
                    method: method
                id: id
                name: name
                label: label
                description: description
                version: 1000000
                created: '2024-01-15T09:30:00Z'
                lastModified: '2024-01-15T09:30:00Z'
                teamId: teamId
                permissions:
                  - permissions
                canAccessApi: true
                canAccessContent: true
                roleName: roleName
                roleProperties:
                  key: value
    postApp:
      path: /api/apps
      method: POST
      auth: true
      docs: >-
        You can only create an app when you are authenticated as a user (OpenID
        implicit flow).

        You will be assigned as owner of the new app automatically.
      source:
        openapi: ../openapi.json
      display-name: Create a new app.
      request:
        name: CreateAppDto
        body:
          properties:
            name:
              type: string
              docs: The name of the app.
              validation:
                pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
                minLength: 1
            template:
              type: optional<string>
              docs: Initialize the app with the inbuilt template.
        content-type: application/json
      response:
        docs: App created.
        type: root.AppDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.ConflictError
        - root.InternalServerError
      examples:
        - request:
            name: name
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              label: label
              description: description
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              teamId: teamId
              permissions:
                - permissions
              canAccessApi: true
              canAccessContent: true
              roleName: roleName
              roleProperties:
                key: value
    getTeamApps:
      path: /api/teams/{team}/apps
      method: GET
      auth: true
      docs: >-
        You can only retrieve the list of apps when you are authenticated as a
        user (OpenID implicit flow).

        You will retrieve all apps, where you are assigned as a contributor.
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The ID of the team.
      display-name: Get team apps.
      response:
        docs: Apps returned.
        type: list<root.AppDto>
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          response:
            body:
              - _links:
                  key:
                    href: href
                    method: method
                id: id
                name: name
                label: label
                description: description
                version: 1000000
                created: '2024-01-15T09:30:00Z'
                lastModified: '2024-01-15T09:30:00Z'
                teamId: teamId
                permissions:
                  - permissions
                canAccessApi: true
                canAccessContent: true
                roleName: roleName
                roleProperties:
                  key: value
    getApp:
      path: /api/apps/{app}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get an app by name.
      response:
        docs: Apps returned.
        type: root.AppDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              label: label
              description: description
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              teamId: teamId
              permissions:
                - permissions
              canAccessApi: true
              canAccessContent: true
              roleName: roleName
              roleProperties:
                key: value
    putApp:
      path: /api/apps/{app}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to update.
      display-name: Update the app.
      request:
        name: UpdateAppDto
        body:
          properties:
            label:
              type: optional<string>
              docs: The optional label of your app.
            description:
              type: optional<string>
              docs: The optional description of your app.
        content-type: application/json
      response:
        docs: App updated.
        type: root.AppDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              label: label
              description: description
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              teamId: teamId
              permissions:
                - permissions
              canAccessApi: true
              canAccessContent: true
              roleName: roleName
              roleProperties:
                key: value
    deleteApp:
      path: /api/apps/{app}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to delete.
      display-name: Delete the app.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
    putAppTeam:
      path: /api/apps/{app}/team
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to update.
      display-name: Transfer the app.
      request:
        name: TransferToTeamDto
        body:
          properties:
            teamId:
              type: optional<string>
              docs: The ID of the team.
        content-type: application/json
      response:
        docs: App transferred.
        type: root.AppDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              label: label
              description: description
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              teamId: teamId
              permissions:
                - permissions
              canAccessApi: true
              canAccessContent: true
              roleName: roleName
              roleProperties:
                key: value
    getSettings:
      path: /api/apps/{app}/settings
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to get the settings for.
      display-name: Get the app settings.
      response:
        docs: App settings returned.
        type: root.AppSettingsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              patterns:
                - name: name
                  regex: regex
                  message: message
              editors:
                - name: name
                  url: url
              hideScheduler: true
              hideDateTimeModeButton: true
              version: 1000000
    putSettings:
      path: /api/apps/{app}/settings
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app to update.
      display-name: Update the app settings.
      request:
        name: UpdateAppSettingsDto
        body:
          properties:
            patterns:
              docs: The configured app patterns.
              type: list<root.PatternDto>
            editors:
              docs: The configured UI editors.
              type: list<root.EditorDto>
            hideScheduler:
              type: optional<boolean>
              docs: Hide the scheduler for content items.
            hideDateTimeModeButton:
              type: optional<boolean>
              docs: Hide the datetime mode button.
        content-type: application/json
      response:
        docs: App updated.
        type: root.AppSettingsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            patterns:
              - name: name
                regex: regex
            editors:
              - name: name
                url: url
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              patterns:
                - name: name
                  regex: regex
                  message: message
              editors:
                - name: name
                  url: url
              hideScheduler: true
              hideDateTimeModeButton: true
              version: 1000000
    getWorkflows:
      path: /api/apps/{app}/workflows
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get app workflow.
      response:
        docs: Workflows returned.
        type: root.WorkflowsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  name: name
                  steps:
                    key: {}
                  schemaIds:
                    - schemaIds
                  initial: initial
              errors:
                - errors
    postWorkflow:
      path: /api/apps/{app}/workflows
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Create a workflow.
      request:
        name: AddWorkflowDto
        body:
          properties:
            name:
              type: string
              docs: The name of the workflow.
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: Workflow created.
        type: root.WorkflowsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            name: name
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  name: name
                  steps:
                    key: {}
                  schemaIds:
                    - schemaIds
                  initial: initial
              errors:
                - errors
    putWorkflow:
      path: /api/apps/{app}/workflows/{id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the workflow to update.
      display-name: Update a workflow.
      request:
        name: UpdateWorkflowDto
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the workflow.
            steps:
              type: map<string, root.WorkflowStepDto>
              docs: The workflow steps.
            schemaIds:
              type: optional<list<string>>
              docs: The schema ids.
            initial:
              type: string
              docs: The initial step.
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: Workflow updated.
        type: root.WorkflowsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request:
            steps:
              key: {}
            initial: initial
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  name: name
                  steps:
                    key: {}
                  schemaIds:
                    - schemaIds
                  initial: initial
              errors:
                - errors
    deleteWorkflow:
      path: /api/apps/{app}/workflows/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the workflow to update.
      display-name: Delete a workflow.
      response:
        docs: Workflow deleted.
        type: root.WorkflowsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  name: name
                  steps:
                    key: {}
                  schemaIds:
                    - schemaIds
                  initial: initial
              errors:
                - errors
  source:
    openapi: ../openapi.json
",
    },
    "assets.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "bulkUpdateAssets": {
              "auth": true,
              "display-name": "Bulk update assets.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {},
                  "response": {
                    "body": [
                      {
                        "contentId": "contentId",
                        "error": {
                          "details": [
                            "details",
                          ],
                          "errorCode": "errorCode",
                          "message": "message",
                          "statusCode": 1,
                          "traceId": "traceId",
                          "type": "type",
                        },
                        "id": "id",
                        "jobIndex": 1,
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/bulk",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "checkReferrers": {
                      "docs": "True to check referrers of deleted assets.",
                      "type": "optional<boolean>",
                    },
                    "doNotScript": {
                      "docs": "True to turn off scripting for faster inserts. Default: true.",
                      "type": "optional<boolean>",
                    },
                    "jobs": {
                      "docs": "The contents to update or insert.",
                      "type": "optional<list<root.BulkUpdateAssetsJobDto>>",
                    },
                    "optimizeValidation": {
                      "docs": "True to turn off costly validation: Folder checks. Default: true.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "BulkUpdateAssetsDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Assets created, update or delete.",
                "status-code": 200,
                "type": "list<root.BulkResultDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteAsset": {
              "auth": true,
              "display-name": "Delete an asset.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the asset to delete.",
                  "type": "string",
                },
              },
              "request": {
                "name": "AssetsDeleteAssetRequest",
                "query-parameters": {
                  "checkReferrers": {
                    "docs": "True to check referrers of this asset.",
                    "type": "optional<boolean>",
                  },
                  "permanent": {
                    "docs": "True to delete the asset permanently.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteAssetFolder": {
              "auth": true,
              "display-name": "Delete an asset folder.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/folders/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the asset folder to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getAsset": {
              "auth": true,
              "display-name": "Get an asset by id.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isDuplicate": "isDuplicate",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "editToken": "editToken",
                      "fileHash": "fileHash",
                      "fileName": "fileName",
                      "fileSize": 1000000,
                      "fileType": "fileType",
                      "fileVersion": 1000000,
                      "id": "id",
                      "isImage": true,
                      "isProtected": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "metadata": {
                        "key": "value",
                      },
                      "metadataText": "metadataText",
                      "mimeType": "mimeType",
                      "parentId": "parentId",
                      "pixelHeight": 1,
                      "pixelWidth": 1,
                      "slug": "slug",
                      "tags": [
                        "tags",
                      ],
                      "type": "Unknown",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the asset to retrieve.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Asset found.",
                "status-code": 200,
                "type": "root.AssetDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getAssetContent": {
              "auth": true,
              "availability": "deprecated",
              "display-name": "Get the asset content.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/assets/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the asset.",
                  "type": "string",
                },
              },
              "request": {
                "name": "AssetsGetAssetContentRequest",
                "query-parameters": {
                  "auto": {
                    "docs": "True to use auto format.",
                    "type": "optional<boolean>",
                  },
                  "bg": {
                    "docs": "Optional background color.",
                    "type": "optional<string>",
                  },
                  "cache": {
                    "docs": "The cache duration in seconds.",
                    "type": "optional<long>",
                  },
                  "download": {
                    "docs": "Set it to 0 to prevent download.",
                    "type": "optional<integer>",
                  },
                  "focusX": {
                    "docs": "Override the y focus point.",
                    "type": "optional<float>",
                  },
                  "focusY": {
                    "docs": "Override the x focus point.",
                    "type": "optional<float>",
                  },
                  "force": {
                    "docs": "True to force a new resize even if it already stored.",
                    "type": "optional<boolean>",
                  },
                  "format": {
                    "docs": "True to force a new resize even if it already stored.",
                    "type": "optional<root.ImageFormat>",
                  },
                  "height": {
                    "docs": "The target height of the asset, if it is an image.",
                    "type": "optional<integer>",
                  },
                  "mode": {
                    "docs": "The resize mode when the width and height is defined.",
                    "type": "optional<root.ResizeMode>",
                  },
                  "nofocus": {
                    "docs": "True to ignore the asset focus point if any.",
                    "type": "optional<boolean>",
                  },
                  "quality": {
                    "docs": "Optional image quality, it is is an jpeg image.",
                    "type": "optional<integer>",
                  },
                  "version": {
                    "docs": "The optional version of the asset.",
                    "type": "optional<long>",
                  },
                  "width": {
                    "docs": "The target width of the asset, if it is an image.",
                    "type": "optional<integer>",
                  },
                },
              },
              "response": {
                "docs": "Asset found and content or (resized) image returned.",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getAssetContentBySlug": {
              "auth": true,
              "display-name": "Get the asset content.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/assets/{app}/{idOrSlug}/{more}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "idOrSlug": {
                  "docs": "The id or slug of the asset.",
                  "type": "string",
                },
                "more": {
                  "docs": "Optional suffix that can be used to seo-optimize the link to the image Has not effect.",
                  "type": "optional<string>",
                },
              },
              "request": {
                "name": "AssetsGetAssetContentBySlugRequest",
                "query-parameters": {
                  "auto": {
                    "docs": "True to use auto format.",
                    "type": "optional<boolean>",
                  },
                  "bg": {
                    "docs": "Optional background color.",
                    "type": "optional<string>",
                  },
                  "cache": {
                    "docs": "The cache duration in seconds.",
                    "type": "optional<long>",
                  },
                  "download": {
                    "docs": "Set it to 0 to prevent download.",
                    "type": "optional<integer>",
                  },
                  "focusX": {
                    "docs": "Override the y focus point.",
                    "type": "optional<float>",
                  },
                  "focusY": {
                    "docs": "Override the x focus point.",
                    "type": "optional<float>",
                  },
                  "force": {
                    "docs": "True to force a new resize even if it already stored.",
                    "type": "optional<boolean>",
                  },
                  "format": {
                    "docs": "True to force a new resize even if it already stored.",
                    "type": "optional<root.ImageFormat>",
                  },
                  "height": {
                    "docs": "The target height of the asset, if it is an image.",
                    "type": "optional<integer>",
                  },
                  "mode": {
                    "docs": "The resize mode when the width and height is defined.",
                    "type": "optional<root.ResizeMode>",
                  },
                  "nofocus": {
                    "docs": "True to ignore the asset focus point if any.",
                    "type": "optional<boolean>",
                  },
                  "quality": {
                    "docs": "Optional image quality, it is is an jpeg image.",
                    "type": "optional<integer>",
                  },
                  "version": {
                    "docs": "The optional version of the asset.",
                    "type": "optional<long>",
                  },
                  "width": {
                    "docs": "The target width of the asset, if it is an image.",
                    "type": "optional<integer>",
                  },
                },
              },
              "response": {
                "docs": "Asset found and content or (resized) image returned.",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getAssetFolders": {
              "auth": true,
              "display-name": "Get asset folders.",
              "docs": "Get all asset folders for the app.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "folderName": "folderName",
                          "id": "id",
                          "parentId": "parentId",
                          "version": 1000000,
                        },
                      ],
                      "path": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "folderName": "folderName",
                          "id": "id",
                          "parentId": "parentId",
                          "version": 1000000,
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/folders",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "name": "AssetsGetAssetFoldersRequest",
                "query-parameters": {
                  "parentId": {
                    "docs": "The optional parent folder id.",
                    "type": "optional<string>",
                  },
                  "scope": {
                    "docs": "The scope of the query.",
                    "type": "optional<root.AssetFolderScope>",
                  },
                },
              },
              "response": {
                "docs": "Asset folders returned.",
                "status-code": 200,
                "type": "root.AssetFoldersDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getAssets": {
              "auth": true,
              "display-name": "Get assets.",
              "docs": "Get all assets for the app.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "_meta": {
                            "isDuplicate": "isDuplicate",
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "editToken": "editToken",
                          "fileHash": "fileHash",
                          "fileName": "fileName",
                          "fileSize": 1000000,
                          "fileType": "fileType",
                          "fileVersion": 1000000,
                          "id": "id",
                          "isImage": true,
                          "isProtected": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "metadata": {
                            "key": "value",
                          },
                          "metadataText": "metadataText",
                          "mimeType": "mimeType",
                          "parentId": "parentId",
                          "pixelHeight": 1,
                          "pixelWidth": 1,
                          "slug": "slug",
                          "tags": [
                            "tags",
                          ],
                          "type": "Unknown",
                          "version": 1000000,
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "name": "AssetsGetAssetsRequest",
                "query-parameters": {
                  "$filter": {
                    "docs": "Optional OData filter.",
                    "type": "optional<string>",
                  },
                  "$orderby": {
                    "docs": "Optional OData order definition.",
                    "type": "optional<string>",
                  },
                  "$skip": {
                    "docs": "Optional number of items to skip.",
                    "type": "optional<double>",
                  },
                  "$top": {
                    "docs": "Optional number of items to take.",
                    "type": "optional<double>",
                  },
                  "ids": {
                    "docs": "The optional asset ids.",
                    "type": "optional<string>",
                  },
                  "parentId": {
                    "docs": "The optional parent folder id.",
                    "type": "optional<string>",
                  },
                  "q": {
                    "docs": "The optional json query.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Assets returned.",
                "status-code": 200,
                "type": "root.AssetsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getAssetsPost": {
              "auth": true,
              "display-name": "Get assets.",
              "docs": "Get all assets for the app.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "_meta": {
                            "isDuplicate": "isDuplicate",
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "editToken": "editToken",
                          "fileHash": "fileHash",
                          "fileName": "fileName",
                          "fileSize": 1000000,
                          "fileType": "fileType",
                          "fileVersion": 1000000,
                          "id": "id",
                          "isImage": true,
                          "isProtected": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "metadata": {
                            "key": "value",
                          },
                          "metadataText": "metadataText",
                          "mimeType": "mimeType",
                          "parentId": "parentId",
                          "pixelHeight": 1,
                          "pixelWidth": 1,
                          "slug": "slug",
                          "tags": [
                            "tags",
                          ],
                          "type": "Unknown",
                          "version": 1000000,
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/query",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": "root.QueryDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Assets returned.",
                "status-code": 200,
                "type": "root.AssetsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getTags": {
              "auth": true,
              "display-name": "Get assets tags.",
              "docs": "Get all tags for assets.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "key": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/tags",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Assets tags returned.",
                "status-code": 200,
                "type": "map<string, integer>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postAsset": {
              "auth": true,
              "display-name": "Upload a new asset.",
              "docs": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.ContentTooLargeError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isDuplicate": "isDuplicate",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "editToken": "editToken",
                      "fileHash": "fileHash",
                      "fileName": "fileName",
                      "fileSize": 1000000,
                      "fileType": "fileType",
                      "fileVersion": 1000000,
                      "id": "id",
                      "isImage": true,
                      "isProtected": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "metadata": {
                        "key": "value",
                      },
                      "metadataText": "metadataText",
                      "mimeType": "mimeType",
                      "parentId": "parentId",
                      "pixelHeight": 1,
                      "pixelWidth": 1,
                      "slug": "slug",
                      "tags": [
                        "tags",
                      ],
                      "type": "Unknown",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "file": "optional<file>",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "AssetsPostAssetRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "duplicate": {
                    "docs": "True to duplicate the asset, event if the file has been uploaded.",
                    "type": "optional<boolean>",
                  },
                  "id": {
                    "docs": "The optional custom asset id.",
                    "type": "optional<string>",
                  },
                  "parentId": {
                    "docs": "The optional parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Asset created.",
                "status-code": 201,
                "type": "root.AssetDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postAssetFolder": {
              "auth": true,
              "display-name": "Create an asset folder.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "folderName": "folderName",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "folderName": "folderName",
                      "id": "id",
                      "parentId": "parentId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/folders",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "folderName": {
                      "docs": "The name of the folder.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "parentId": {
                      "docs": "The ID of the parent folder.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateAssetFolderDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Asset folder created.",
                "status-code": 201,
                "type": "root.AssetFolderDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postUpsertAsset": {
              "auth": true,
              "display-name": "Upsert an asset.",
              "docs": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.ContentTooLargeError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isDuplicate": "isDuplicate",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "editToken": "editToken",
                      "fileHash": "fileHash",
                      "fileName": "fileName",
                      "fileSize": 1000000,
                      "fileType": "fileType",
                      "fileVersion": 1000000,
                      "id": "id",
                      "isImage": true,
                      "isProtected": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "metadata": {
                        "key": "value",
                      },
                      "metadataText": "metadataText",
                      "mimeType": "mimeType",
                      "parentId": "parentId",
                      "pixelHeight": 1,
                      "pixelWidth": 1,
                      "slug": "slug",
                      "tags": [
                        "tags",
                      ],
                      "type": "Unknown",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The optional custom asset id.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "file": "optional<file>",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "AssetsPostUpsertAssetRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "duplicate": {
                    "docs": "True to duplicate the asset, event if the file has been uploaded.",
                    "type": "optional<boolean>",
                  },
                  "parentId": {
                    "docs": "The optional parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Asset created or updated.",
                "status-code": 200,
                "type": "root.AssetDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putAsset": {
              "auth": true,
              "display-name": "Update an asset.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isDuplicate": "isDuplicate",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "editToken": "editToken",
                      "fileHash": "fileHash",
                      "fileName": "fileName",
                      "fileSize": 1000000,
                      "fileType": "fileType",
                      "fileVersion": 1000000,
                      "id": "id",
                      "isImage": true,
                      "isProtected": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "metadata": {
                        "key": "value",
                      },
                      "metadataText": "metadataText",
                      "mimeType": "mimeType",
                      "parentId": "parentId",
                      "pixelHeight": 1,
                      "pixelWidth": 1,
                      "slug": "slug",
                      "tags": [
                        "tags",
                      ],
                      "type": "Unknown",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the asset.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "fileName": {
                      "docs": "The new name of the asset.",
                      "type": "optional<string>",
                    },
                    "isProtected": {
                      "docs": "True, when the asset is not public.",
                      "type": "optional<boolean>",
                    },
                    "metadata": {
                      "docs": "The asset metadata.",
                      "type": "optional<map<string, unknown>>",
                    },
                    "slug": {
                      "docs": "The new slug of the asset.",
                      "type": "optional<string>",
                    },
                    "tags": {
                      "docs": "The new asset tags.",
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AnnotateAssetDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Asset updated.",
                "status-code": 200,
                "type": "root.AssetDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putAssetContent": {
              "auth": true,
              "display-name": "Replace asset content.",
              "docs": "Use multipart request to upload an asset.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.ContentTooLargeError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isDuplicate": "isDuplicate",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "editToken": "editToken",
                      "fileHash": "fileHash",
                      "fileName": "fileName",
                      "fileSize": 1000000,
                      "fileType": "fileType",
                      "fileVersion": 1000000,
                      "id": "id",
                      "isImage": true,
                      "isProtected": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "metadata": {
                        "key": "value",
                      },
                      "metadataText": "metadataText",
                      "mimeType": "mimeType",
                      "parentId": "parentId",
                      "pixelHeight": 1,
                      "pixelWidth": 1,
                      "slug": "slug",
                      "tags": [
                        "tags",
                      ],
                      "type": "Unknown",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/{id}/content",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the asset.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "file": "optional<file>",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "AssetsPutAssetContentRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Asset updated.",
                "status-code": 200,
                "type": "root.AssetDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putAssetFolder": {
              "auth": true,
              "display-name": "Update an asset folder.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {
                    "folderName": "folderName",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "folderName": "folderName",
                      "id": "id",
                      "parentId": "parentId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/folders/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the asset folder.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "folderName": {
                      "docs": "The name of the folder.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RenameAssetFolderDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Asset folder updated.",
                "status-code": 200,
                "type": "root.AssetFolderDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putAssetFolderParent": {
              "auth": true,
              "display-name": "Move an asset folder.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "folderName": "folderName",
                      "id": "id",
                      "parentId": "parentId",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/folders/{id}/parent",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the asset folder.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "parentId": {
                      "docs": "The parent folder id.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "MoveAssetFolderDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Asset folder moved.",
                "status-code": 200,
                "type": "root.AssetFolderDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putAssetParent": {
              "auth": true,
              "display-name": "Moves the asset.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isDuplicate": "isDuplicate",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "editToken": "editToken",
                      "fileHash": "fileHash",
                      "fileName": "fileName",
                      "fileSize": 1000000,
                      "fileType": "fileType",
                      "fileVersion": 1000000,
                      "id": "id",
                      "isImage": true,
                      "isProtected": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "metadata": {
                        "key": "value",
                      },
                      "metadataText": "metadataText",
                      "mimeType": "mimeType",
                      "parentId": "parentId",
                      "pixelHeight": 1,
                      "pixelWidth": 1,
                      "slug": "slug",
                      "tags": [
                        "tags",
                      ],
                      "type": "Unknown",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/{id}/parent",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the asset.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "parentId": {
                      "docs": "The parent folder id.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "MoveAssetDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Asset moved.",
                "status-code": 200,
                "type": "root.AssetDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putTag": {
              "auth": true,
              "display-name": "Rename an asset tag.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "name": "name",
                  },
                  "request": {
                    "tagName": "tagName",
                  },
                  "response": {
                    "body": {
                      "key": 1,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/assets/tags/{name}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "name": {
                  "docs": "The tag to return.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "tagName": {
                      "docs": "The new name for the tag.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RenameTagDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Asset tag renamed and new tags returned.",
                "status-code": 200,
                "type": "map<string, integer>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getAssetContentBySlug:
      path: /api/assets/{app}/{idOrSlug}/{more}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        idOrSlug:
          type: string
          docs: The id or slug of the asset.
        more:
          type: optional<string>
          docs: >-
            Optional suffix that can be used to seo-optimize the link to the
            image Has not effect.
      display-name: Get the asset content.
      request:
        name: AssetsGetAssetContentBySlugRequest
        query-parameters:
          version:
            type: optional<long>
            docs: The optional version of the asset.
          cache:
            type: optional<long>
            docs: The cache duration in seconds.
          download:
            type: optional<integer>
            docs: Set it to 0 to prevent download.
          width:
            type: optional<integer>
            docs: The target width of the asset, if it is an image.
          height:
            type: optional<integer>
            docs: The target height of the asset, if it is an image.
          quality:
            type: optional<integer>
            docs: Optional image quality, it is is an jpeg image.
          mode:
            type: optional<root.ResizeMode>
            docs: The resize mode when the width and height is defined.
          bg:
            type: optional<string>
            docs: Optional background color.
          focusX:
            type: optional<float>
            docs: Override the y focus point.
          focusY:
            type: optional<float>
            docs: Override the x focus point.
          nofocus:
            type: optional<boolean>
            docs: True to ignore the asset focus point if any.
          auto:
            type: optional<boolean>
            docs: True to use auto format.
          force:
            type: optional<boolean>
            docs: True to force a new resize even if it already stored.
          format:
            type: optional<root.ImageFormat>
            docs: True to force a new resize even if it already stored.
      response:
        docs: Asset found and content or (resized) image returned.
        type: file
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
    getAssetContent:
      path: /api/assets/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the asset.
      display-name: Get the asset content.
      request:
        name: AssetsGetAssetContentRequest
        query-parameters:
          version:
            type: optional<long>
            docs: The optional version of the asset.
          cache:
            type: optional<long>
            docs: The cache duration in seconds.
          download:
            type: optional<integer>
            docs: Set it to 0 to prevent download.
          width:
            type: optional<integer>
            docs: The target width of the asset, if it is an image.
          height:
            type: optional<integer>
            docs: The target height of the asset, if it is an image.
          quality:
            type: optional<integer>
            docs: Optional image quality, it is is an jpeg image.
          mode:
            type: optional<root.ResizeMode>
            docs: The resize mode when the width and height is defined.
          bg:
            type: optional<string>
            docs: Optional background color.
          focusX:
            type: optional<float>
            docs: Override the y focus point.
          focusY:
            type: optional<float>
            docs: Override the x focus point.
          nofocus:
            type: optional<boolean>
            docs: True to ignore the asset focus point if any.
          auto:
            type: optional<boolean>
            docs: True to use auto format.
          force:
            type: optional<boolean>
            docs: True to force a new resize even if it already stored.
          format:
            type: optional<root.ImageFormat>
            docs: True to force a new resize even if it already stored.
      response:
        docs: Asset found and content or (resized) image returned.
        type: file
        status-code: 200
      availability: deprecated
      errors:
        - root.NotFoundError
        - root.InternalServerError
    getAssetFolders:
      path: /api/apps/{app}/assets/folders
      method: GET
      auth: true
      docs: Get all asset folders for the app.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get asset folders.
      request:
        name: AssetsGetAssetFoldersRequest
        query-parameters:
          parentId:
            type: optional<string>
            docs: The optional parent folder id.
          scope:
            type: optional<root.AssetFolderScope>
            docs: The scope of the query.
      response:
        docs: Asset folders returned.
        type: root.AssetFoldersDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  parentId: parentId
                  folderName: folderName
                  version: 1000000
              path:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  parentId: parentId
                  folderName: folderName
                  version: 1000000
    postAssetFolder:
      path: /api/apps/{app}/assets/folders
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Create an asset folder.
      request:
        name: CreateAssetFolderDto
        body:
          properties:
            folderName:
              type: string
              docs: The name of the folder.
              validation:
                minLength: 1
            parentId:
              type: optional<string>
              docs: The ID of the parent folder.
        content-type: application/json
      response:
        docs: Asset folder created.
        type: root.AssetFolderDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            folderName: folderName
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              folderName: folderName
              version: 1000000
    putAssetFolder:
      path: /api/apps/{app}/assets/folders/{id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the asset folder.
      display-name: Update an asset folder.
      request:
        name: RenameAssetFolderDto
        body:
          properties:
            folderName:
              type: string
              docs: The name of the folder.
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: Asset folder updated.
        type: root.AssetFolderDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request:
            folderName: folderName
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              folderName: folderName
              version: 1000000
    deleteAssetFolder:
      path: /api/apps/{app}/assets/folders/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the asset folder to delete.
      display-name: Delete an asset folder.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    putAssetFolderParent:
      path: /api/apps/{app}/assets/folders/{id}/parent
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the asset folder.
      display-name: Move an asset folder.
      request:
        name: MoveAssetFolderDto
        body:
          properties:
            parentId:
              type: optional<string>
              docs: The parent folder id.
        content-type: application/json
      response:
        docs: Asset folder moved.
        type: root.AssetFolderDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              folderName: folderName
              version: 1000000
    getTags:
      path: /api/apps/{app}/assets/tags
      method: GET
      auth: true
      docs: Get all tags for assets.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get assets tags.
      response:
        docs: Assets tags returned.
        type: map<string, integer>
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              key: 1
    putTag:
      path: /api/apps/{app}/assets/tags/{name}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        name:
          type: string
          docs: The tag to return.
      display-name: Rename an asset tag.
      request:
        name: RenameTagDto
        body:
          properties:
            tagName:
              type: string
              docs: The new name for the tag.
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: Asset tag renamed and new tags returned.
        type: map<string, integer>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            name: name
          request:
            tagName: tagName
          response:
            body:
              key: 1
    getAssets:
      path: /api/apps/{app}/assets
      method: GET
      auth: true
      docs: Get all assets for the app.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get assets.
      request:
        name: AssetsGetAssetsRequest
        query-parameters:
          parentId:
            type: optional<string>
            docs: The optional parent folder id.
          ids:
            type: optional<string>
            docs: The optional asset ids.
          q:
            type: optional<string>
            docs: The optional json query.
          $top:
            type: optional<double>
            docs: Optional number of items to take.
          $skip:
            type: optional<double>
            docs: Optional number of items to skip.
          $orderby:
            type: optional<string>
            docs: Optional OData order definition.
          $filter:
            type: optional<string>
            docs: Optional OData filter.
      response:
        docs: Assets returned.
        type: root.AssetsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  parentId: parentId
                  fileName: fileName
                  fileHash: fileHash
                  isProtected: true
                  slug: slug
                  mimeType: mimeType
                  fileType: fileType
                  metadataText: metadataText
                  editToken: editToken
                  metadata:
                    key: value
                  tags:
                    - tags
                  fileSize: 1000000
                  fileVersion: 1000000
                  type: Unknown
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  version: 1000000
                  _meta:
                    isDuplicate: isDuplicate
                  isImage: true
                  pixelWidth: 1
                  pixelHeight: 1
    postAsset:
      path: /api/apps/{app}/assets
      method: POST
      auth: true
      docs: >-
        You can only upload one file at a time. The mime type of the file is not
        calculated by Squidex and is required correctly.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Upload a new asset.
      request:
        name: AssetsPostAssetRequest
        query-parameters:
          parentId:
            type: optional<string>
            docs: The optional parent folder id.
          id:
            type: optional<string>
            docs: The optional custom asset id.
          duplicate:
            type: optional<boolean>
            docs: True to duplicate the asset, event if the file has been uploaded.
        body:
          properties:
            file: optional<file>
        content-type: multipart/form-data
      response:
        docs: Asset created.
        type: root.AssetDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.ContentTooLargeError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              fileName: fileName
              fileHash: fileHash
              isProtected: true
              slug: slug
              mimeType: mimeType
              fileType: fileType
              metadataText: metadataText
              editToken: editToken
              metadata:
                key: value
              tags:
                - tags
              fileSize: 1000000
              fileVersion: 1000000
              type: Unknown
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              _meta:
                isDuplicate: isDuplicate
              isImage: true
              pixelWidth: 1
              pixelHeight: 1
    getAssetsPost:
      path: /api/apps/{app}/assets/query
      method: POST
      auth: true
      docs: Get all assets for the app.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get assets.
      request:
        body: root.QueryDto
        content-type: application/json
      response:
        docs: Assets returned.
        type: root.AssetsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  parentId: parentId
                  fileName: fileName
                  fileHash: fileHash
                  isProtected: true
                  slug: slug
                  mimeType: mimeType
                  fileType: fileType
                  metadataText: metadataText
                  editToken: editToken
                  metadata:
                    key: value
                  tags:
                    - tags
                  fileSize: 1000000
                  fileVersion: 1000000
                  type: Unknown
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  version: 1000000
                  _meta:
                    isDuplicate: isDuplicate
                  isImage: true
                  pixelWidth: 1
                  pixelHeight: 1
    getAsset:
      path: /api/apps/{app}/assets/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the asset to retrieve.
      display-name: Get an asset by id.
      response:
        docs: Asset found.
        type: root.AssetDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              fileName: fileName
              fileHash: fileHash
              isProtected: true
              slug: slug
              mimeType: mimeType
              fileType: fileType
              metadataText: metadataText
              editToken: editToken
              metadata:
                key: value
              tags:
                - tags
              fileSize: 1000000
              fileVersion: 1000000
              type: Unknown
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              _meta:
                isDuplicate: isDuplicate
              isImage: true
              pixelWidth: 1
              pixelHeight: 1
    postUpsertAsset:
      path: /api/apps/{app}/assets/{id}
      method: POST
      auth: true
      docs: >-
        You can only upload one file at a time. The mime type of the file is not
        calculated by Squidex and is required correctly.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The optional custom asset id.
      display-name: Upsert an asset.
      request:
        name: AssetsPostUpsertAssetRequest
        query-parameters:
          parentId:
            type: optional<string>
            docs: The optional parent folder id.
          duplicate:
            type: optional<boolean>
            docs: True to duplicate the asset, event if the file has been uploaded.
        body:
          properties:
            file: optional<file>
        content-type: multipart/form-data
      response:
        docs: Asset created or updated.
        type: root.AssetDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.ContentTooLargeError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              fileName: fileName
              fileHash: fileHash
              isProtected: true
              slug: slug
              mimeType: mimeType
              fileType: fileType
              metadataText: metadataText
              editToken: editToken
              metadata:
                key: value
              tags:
                - tags
              fileSize: 1000000
              fileVersion: 1000000
              type: Unknown
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              _meta:
                isDuplicate: isDuplicate
              isImage: true
              pixelWidth: 1
              pixelHeight: 1
    putAsset:
      path: /api/apps/{app}/assets/{id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the asset.
      display-name: Update an asset.
      request:
        name: AnnotateAssetDto
        body:
          properties:
            fileName:
              type: optional<string>
              docs: The new name of the asset.
            slug:
              type: optional<string>
              docs: The new slug of the asset.
            isProtected:
              type: optional<boolean>
              docs: True, when the asset is not public.
            tags:
              type: optional<list<string>>
              docs: The new asset tags.
            metadata:
              type: optional<map<string, unknown>>
              docs: The asset metadata.
        content-type: application/json
      response:
        docs: Asset updated.
        type: root.AssetDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              fileName: fileName
              fileHash: fileHash
              isProtected: true
              slug: slug
              mimeType: mimeType
              fileType: fileType
              metadataText: metadataText
              editToken: editToken
              metadata:
                key: value
              tags:
                - tags
              fileSize: 1000000
              fileVersion: 1000000
              type: Unknown
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              _meta:
                isDuplicate: isDuplicate
              isImage: true
              pixelWidth: 1
              pixelHeight: 1
    deleteAsset:
      path: /api/apps/{app}/assets/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the asset to delete.
      display-name: Delete an asset.
      request:
        name: AssetsDeleteAssetRequest
        query-parameters:
          checkReferrers:
            type: optional<boolean>
            docs: True to check referrers of this asset.
          permanent:
            type: optional<boolean>
            docs: True to delete the asset permanently.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    bulkUpdateAssets:
      path: /api/apps/{app}/assets/bulk
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Bulk update assets.
      request:
        name: BulkUpdateAssetsDto
        body:
          properties:
            jobs:
              type: optional<list<root.BulkUpdateAssetsJobDto>>
              docs: The contents to update or insert.
            checkReferrers:
              type: optional<boolean>
              docs: True to check referrers of deleted assets.
            optimizeValidation:
              type: optional<boolean>
              docs: >-
                True to turn off costly validation: Folder checks. Default:
                true.
            doNotScript:
              type: optional<boolean>
              docs: 'True to turn off scripting for faster inserts. Default: true.'
        content-type: application/json
      response:
        docs: Assets created, update or delete.
        type: list<root.BulkResultDto>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request: {}
          response:
            body:
              - error:
                  message: message
                  errorCode: errorCode
                  traceId: traceId
                  type: type
                  details:
                    - details
                  statusCode: 1
                jobIndex: 1
                id: id
                contentId: contentId
    putAssetContent:
      path: /api/apps/{app}/assets/{id}/content
      method: PUT
      auth: true
      docs: Use multipart request to upload an asset.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the asset.
      display-name: Replace asset content.
      request:
        name: AssetsPutAssetContentRequest
        body:
          properties:
            file: optional<file>
        content-type: multipart/form-data
      response:
        docs: Asset updated.
        type: root.AssetDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.ContentTooLargeError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              fileName: fileName
              fileHash: fileHash
              isProtected: true
              slug: slug
              mimeType: mimeType
              fileType: fileType
              metadataText: metadataText
              editToken: editToken
              metadata:
                key: value
              tags:
                - tags
              fileSize: 1000000
              fileVersion: 1000000
              type: Unknown
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              _meta:
                isDuplicate: isDuplicate
              isImage: true
              pixelWidth: 1
              pixelHeight: 1
    putAssetParent:
      path: /api/apps/{app}/assets/{id}/parent
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the asset.
      display-name: Moves the asset.
      request:
        name: MoveAssetDto
        body:
          properties:
            parentId:
              type: optional<string>
              docs: The parent folder id.
        content-type: application/json
      response:
        docs: Asset moved.
        type: root.AssetDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              parentId: parentId
              fileName: fileName
              fileHash: fileHash
              isProtected: true
              slug: slug
              mimeType: mimeType
              fileType: fileType
              metadataText: metadataText
              editToken: editToken
              metadata:
                key: value
              tags:
                - tags
              fileSize: 1000000
              fileVersion: 1000000
              type: Unknown
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              _meta:
                isDuplicate: isDuplicate
              isImage: true
              pixelWidth: 1
              pixelHeight: 1
  source:
    openapi: ../openapi.json
",
    },
    "backups.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteBackup": {
              "auth": true,
              "display-name": "Delete a backup.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/backups/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the backup to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getBackupContent": {
              "auth": true,
              "display-name": "Get the backup content.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/backups/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the backup.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Backup found and content returned.",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getBackupContentV2": {
              "auth": true,
              "display-name": "Get the backup content.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/backups/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the backup.",
                  "type": "string",
                },
              },
              "request": {
                "name": "BackupsGetBackupContentV2Request",
                "query-parameters": {
                  "app": {
                    "default": "",
                    "docs": "The name of the app.",
                    "type": "optional<string>",
                  },
                  "appId": {
                    "docs": "The ID of the app.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Backup found and content returned.",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getBackups": {
              "auth": true,
              "display-name": "Get all backup jobs.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "handledAssets": 1,
                          "handledEvents": 1,
                          "id": "id",
                          "started": "2024-01-15T09:30:00Z",
                          "status": "Created",
                          "stopped": "2024-01-15T09:30:00Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/backups",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Backups returned.",
                "status-code": 200,
                "type": "root.BackupJobsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getRestoreJob": {
              "auth": true,
              "display-name": "Get current restore status.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "log": [
                        "log",
                      ],
                      "started": "2024-01-15T09:30:00Z",
                      "status": "Created",
                      "stopped": "2024-01-15T09:30:00Z",
                      "url": "url",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/restore",
              "response": {
                "docs": "Status returned.",
                "status-code": 200,
                "type": "root.RestoreJobDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postBackup": {
              "auth": true,
              "display-name": "Start a new backup.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/backups",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postRestoreJob": {
              "auth": true,
              "display-name": "Restore a backup.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "url": "url",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/restore",
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "The name of the app.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[a-z0-9]+(\-[a-z0-9]+)*$",
                      },
                    },
                    "url": {
                      "docs": "The url to the restore file.",
                      "type": "string",
                      "validation": {
                        "format": "uri",
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RestoreRequestDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getBackupContent:
      path: /api/apps/{app}/backups/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the backup.
      display-name: Get the backup content.
      response:
        docs: Backup found and content returned.
        type: file
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
    deleteBackup:
      path: /api/apps/{app}/backups/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the backup to delete.
      display-name: Delete a backup.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    getBackupContentV2:
      path: /api/apps/backups/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the backup.
      display-name: Get the backup content.
      request:
        name: BackupsGetBackupContentV2Request
        query-parameters:
          appId:
            type: optional<string>
            docs: The ID of the app.
          app:
            type: optional<string>
            default: ''
            docs: The name of the app.
      response:
        docs: Backup found and content returned.
        type: file
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
    getBackups:
      path: /api/apps/{app}/backups
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get all backup jobs.
      response:
        docs: Backups returned.
        type: root.BackupJobsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  started: '2024-01-15T09:30:00Z'
                  stopped: '2024-01-15T09:30:00Z'
                  handledEvents: 1
                  handledAssets: 1
                  status: Created
    postBackup:
      path: /api/apps/{app}/backups
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Start a new backup.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
    getRestoreJob:
      path: /api/apps/restore
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Get current restore status.
      response:
        docs: Status returned.
        type: root.RestoreJobDto
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              url: url
              log:
                - log
              started: '2024-01-15T09:30:00Z'
              stopped: '2024-01-15T09:30:00Z'
              status: Created
    postRestoreJob:
      path: /api/apps/restore
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Restore a backup.
      request:
        name: RestoreRequestDto
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the app.
              validation:
                pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
            url:
              type: string
              docs: The url to the restore file.
              validation:
                format: uri
                minLength: 1
        content-type: application/json
      errors:
        - root.BadRequestError
        - root.InternalServerError
      examples:
        - request:
            url: url
  source:
    openapi: ../openapi.json
",
    },
    "comments.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteComment": {
              "auth": true,
              "display-name": "Delete a comment.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "commentId": "commentId",
                    "commentsId": "commentsId",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "commentId": {
                  "docs": "The ID of the comment.",
                  "type": "string",
                },
                "commentsId": {
                  "docs": "The ID of the comments.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getComments": {
              "auth": true,
              "display-name": "Get all comments.",
              "docs": "When passing in a version you can retrieve all updates since then.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "commentsId": "commentsId",
                  },
                  "response": {
                    "body": {
                      "createdComments": [
                        {
                          "id": "id",
                          "text": "text",
                          "time": "2024-01-15T09:30:00Z",
                          "url": "url",
                          "user": "user",
                        },
                      ],
                      "deletedComments": [
                        "deletedComments",
                      ],
                      "updatedComments": [
                        {
                          "id": "id",
                          "text": "text",
                          "time": "2024-01-15T09:30:00Z",
                          "url": "url",
                          "user": "user",
                        },
                      ],
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/comments/{commentsId}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "commentsId": {
                  "docs": "The ID of the comments.",
                  "type": "string",
                },
              },
              "request": {
                "name": "CommentsGetCommentsRequest",
                "query-parameters": {
                  "version": {
                    "default": -2,
                    "docs": "The current version.",
                    "type": "optional<long>",
                  },
                },
              },
              "response": {
                "docs": "Comments returned.",
                "status-code": 200,
                "type": "root.CommentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getWatchingUsers": {
              "auth": true,
              "display-name": "Get all watching users..",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": [
                      "string",
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/watching/{resource}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "resource": {
                  "docs": "The path to the resource.",
                  "type": "optional<string>",
                },
              },
              "response": {
                "docs": "Watching users returned.",
                "status-code": 200,
                "type": "list<string>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postComment": {
              "auth": true,
              "display-name": "Create a new comment.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "commentsId": "commentsId",
                  },
                  "request": {
                    "text": "text",
                  },
                  "response": {
                    "body": {
                      "id": "id",
                      "text": "text",
                      "time": "2024-01-15T09:30:00Z",
                      "url": "url",
                      "user": "user",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/comments/{commentsId}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "commentsId": {
                  "docs": "The ID of the comments.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.UpsertCommentDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Comment created.",
                "status-code": 201,
                "type": "root.CommentDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putComment": {
              "auth": true,
              "display-name": "Update a comment.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "commentId": "commentId",
                    "commentsId": "commentsId",
                  },
                  "request": {
                    "text": "text",
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "commentId": {
                  "docs": "The ID of the comment.",
                  "type": "string",
                },
                "commentsId": {
                  "docs": "The ID of the comments.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.UpsertCommentDto",
                "content-type": "application/json",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getWatchingUsers:
      path: /api/apps/{app}/watching/{resource}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        resource:
          type: optional<string>
          docs: The path to the resource.
      display-name: Get all watching users..
      response:
        docs: Watching users returned.
        type: list<string>
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              - string
    getComments:
      path: /api/apps/{app}/comments/{commentsId}
      method: GET
      auth: true
      docs: When passing in a version you can retrieve all updates since then.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        commentsId:
          type: string
          docs: The ID of the comments.
      display-name: Get all comments.
      request:
        name: CommentsGetCommentsRequest
        query-parameters:
          version:
            type: optional<long>
            default: -2
            docs: The current version.
      response:
        docs: Comments returned.
        type: root.CommentsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            commentsId: commentsId
          response:
            body:
              createdComments:
                - id: id
                  time: '2024-01-15T09:30:00Z'
                  user: user
                  text: text
                  url: url
              updatedComments:
                - id: id
                  time: '2024-01-15T09:30:00Z'
                  user: user
                  text: text
                  url: url
              deletedComments:
                - deletedComments
              version: 1000000
    postComment:
      path: /api/apps/{app}/comments/{commentsId}
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        commentsId:
          type: string
          docs: The ID of the comments.
      display-name: Create a new comment.
      request:
        body: root.UpsertCommentDto
        content-type: application/json
      response:
        docs: Comment created.
        type: root.CommentDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            commentsId: commentsId
          request:
            text: text
          response:
            body:
              id: id
              time: '2024-01-15T09:30:00Z'
              user: user
              text: text
              url: url
    putComment:
      path: /api/apps/{app}/comments/{commentsId}/{commentId}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        commentsId:
          type: string
          docs: The ID of the comments.
        commentId:
          type: string
          docs: The ID of the comment.
      display-name: Update a comment.
      request:
        body: root.UpsertCommentDto
        content-type: application/json
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            commentsId: commentsId
            commentId: commentId
          request:
            text: text
    deleteComment:
      path: /api/apps/{app}/comments/{commentsId}/{commentId}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        commentsId:
          type: string
          docs: The ID of the comments.
        commentId:
          type: string
          docs: The ID of the comment.
      display-name: Delete a comment.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            commentsId: commentsId
            commentId: commentId
  source:
    openapi: ../openapi.json
",
    },
    "contents.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "bulkUpdateContents": {
              "auth": true,
              "display-name": "Bulk update content items.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {
                    "jobs": [
                      {},
                    ],
                  },
                  "response": {
                    "body": [
                      {
                        "contentId": "contentId",
                        "error": {
                          "details": [
                            "details",
                          ],
                          "errorCode": "errorCode",
                          "message": "message",
                          "statusCode": 1,
                          "traceId": "traceId",
                          "type": "type",
                        },
                        "id": "id",
                        "jobIndex": 1,
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/bulk",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "checkReferrers": {
                      "docs": "True to check referrers of deleted contents.",
                      "type": "optional<boolean>",
                    },
                    "doNotScript": {
                      "docs": "True to turn off scripting for faster inserts. Default: true.",
                      "type": "optional<boolean>",
                    },
                    "doNotValidate": {
                      "docs": "True to turn off validation for faster inserts. Default: false.",
                      "type": "optional<boolean>",
                    },
                    "doNotValidateWorkflow": {
                      "docs": "True to turn off validation of workflow rules. Default: false.",
                      "type": "optional<boolean>",
                    },
                    "jobs": {
                      "docs": "The contents to update or insert.",
                      "type": "list<root.BulkUpdateContentsJobDto>",
                    },
                    "optimizeValidation": {
                      "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                      "type": "optional<boolean>",
                    },
                    "publish": {
                      "availability": "deprecated",
                      "docs": "True to automatically publish the content.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "BulkUpdateContentsDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "",
                "status-code": 200,
                "type": "list<root.BulkResultDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "createDraft": {
              "auth": true,
              "display-name": "Create a new draft version.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}/draft",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content item to create the draft for.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Content draft created.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteContent": {
              "auth": true,
              "display-name": "Delete a content item.",
              "docs": "You can create an generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content item to delete.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "name": "ContentsDeleteContentRequest",
                "query-parameters": {
                  "checkReferrers": {
                    "docs": "True to check referrers of this content.",
                    "type": "optional<boolean>",
                  },
                  "permanent": {
                    "docs": "True to delete the content permanently.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteContentStatus": {
              "auth": true,
              "display-name": "Cancel status change of a content item.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}/status",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content item to cancel.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Content status change cancelled.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteVersion": {
              "auth": true,
              "display-name": "Delete the draft version.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}/draft",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content item to delete the draft from.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Content draft deleted.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getContent": {
              "auth": true,
              "display-name": "Get a content item.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "data": {
                        "key": "value",
                      },
                      "editToken": "editToken",
                      "id": "id",
                      "isDeleted": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "newStatus": "newStatus",
                      "newStatusColor": "newStatusColor",
                      "referenceData": {
                        "key": {
                          "key": "value",
                        },
                      },
                      "referenceFields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "scheduleJob": {
                        "color": "color",
                        "dueTime": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "scheduledBy": "scheduledBy",
                        "status": "status",
                      },
                      "schemaDisplayName": "schemaDisplayName",
                      "schemaId": "schemaId",
                      "schemaName": "schemaName",
                      "status": "status",
                      "statusColor": "statusColor",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content to fetch.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "name": "ContentsGetContentRequest",
                "query-parameters": {
                  "version": {
                    "default": -2,
                    "docs": "The optional version.",
                    "type": "optional<long>",
                  },
                },
              },
              "response": {
                "docs": "Content returned.",
                "status-code": 200,
                "type": "root.ContentDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getContentValidity": {
              "auth": true,
              "display-name": "Get a content item validity.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}/validity",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content to fetch.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getContentVersion": {
              "auth": true,
              "availability": "deprecated",
              "display-name": "Get a content by version.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}/{version}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content to fetch.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
                "version": {
                  "docs": "The version fo the content to fetch.",
                  "type": "integer",
                },
              },
              "response": {
                "docs": "Content version returned.",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getContents": {
              "auth": true,
              "display-name": "Queries contents.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "name": "ContentsGetContentsRequest",
                "query-parameters": {
                  "ids": {
                    "docs": "The optional ids of the content to fetch.",
                    "type": "optional<string>",
                  },
                  "q": {
                    "docs": "The optional json query.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Contents returned.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getContentsPost": {
              "auth": true,
              "display-name": "Queries contents.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/query",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.QueryDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Contents returned.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getReferences": {
              "auth": true,
              "display-name": "Get all references of a content.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}/references",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content to fetch.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "name": "ContentsGetReferencesRequest",
                "query-parameters": {
                  "q": {
                    "docs": "The optional json query.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Contents returned.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getReferencing": {
              "auth": true,
              "display-name": "Get a referencing contents of a content item.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}/referencing",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content to fetch.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "name": "ContentsGetReferencingRequest",
                "query-parameters": {
                  "q": {
                    "docs": "The optional json query.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Content returned.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "patchContent": {
              "auth": true,
              "display-name": "Patchs a content item.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "request": {
                    "key": {
                      "key": "value",
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content item to patch.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.ContentData",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Content patched.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postContent": {
              "auth": true,
              "display-name": "Create a content item.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {
                    "key": {
                      "key": "value",
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.ContentData",
                "content-type": "application/json",
                "name": "ContentsPostContentRequest",
                "query-parameters": {
                  "id": {
                    "docs": "The optional custom content id.",
                    "type": "optional<string>",
                  },
                  "publish": {
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                  "status": {
                    "docs": "The initial status.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Content created.",
                "status-code": 201,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postContents": {
              "auth": true,
              "availability": "deprecated",
              "display-name": "Import content items.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {
                    "datas": [
                      {
                        "key": {
                          "key": "value",
                        },
                      },
                    ],
                  },
                  "response": {
                    "body": [
                      {
                        "contentId": "contentId",
                        "error": {
                          "details": [
                            "details",
                          ],
                          "errorCode": "errorCode",
                          "message": "message",
                          "statusCode": 1,
                          "traceId": "traceId",
                          "type": "type",
                        },
                        "id": "id",
                        "jobIndex": 1,
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/import",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "datas": {
                      "docs": "The data to import.",
                      "type": "list<root.ContentData>",
                    },
                    "doNotScript": {
                      "docs": "True to turn off scripting for faster inserts. Default: true.",
                      "type": "optional<boolean>",
                    },
                    "optimizeValidation": {
                      "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                      "type": "optional<boolean>",
                    },
                    "publish": {
                      "availability": "deprecated",
                      "docs": "True to automatically publish the content.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ImportContentsDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Contents created.",
                "status-code": 200,
                "type": "list<root.BulkResultDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postUpsertContent": {
              "auth": true,
              "display-name": "Upsert a content item.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "request": {
                    "key": {
                      "key": "value",
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content item to update.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.ContentData",
                "content-type": "application/json",
                "name": "ContentsPostUpsertContentRequest",
                "query-parameters": {
                  "patch": {
                    "docs": "Makes the update as patch.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                  "status": {
                    "docs": "The initial status.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Content created or updated.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putContent": {
              "auth": true,
              "display-name": "Update a content item.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "request": {
                    "key": {
                      "key": "value",
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content item to update.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.ContentData",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Content updated.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putContentStatus": {
              "auth": true,
              "display-name": "Change status of a content item.",
              "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                    "schema": "schema",
                  },
                  "request": {
                    "status": "status",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "data": {
                            "key": "value",
                          },
                          "editToken": "editToken",
                          "id": "id",
                          "isDeleted": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "newStatus": "newStatus",
                          "newStatusColor": "newStatusColor",
                          "referenceData": {
                            "key": {
                              "key": "value",
                            },
                          },
                          "referenceFields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "scheduleJob": {
                            "color": "color",
                            "dueTime": "2024-01-15T09:30:00Z",
                            "id": "id",
                            "scheduledBy": "scheduledBy",
                            "status": "status",
                          },
                          "schemaDisplayName": "schemaDisplayName",
                          "schemaId": "schemaId",
                          "schemaName": "schemaName",
                          "status": "status",
                          "statusColor": "statusColor",
                          "version": 1000000,
                        },
                      ],
                      "statuses": [
                        {
                          "color": "color",
                          "status": "status",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/content/{app}/{schema}/{id}/status",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the content item to change.",
                  "type": "string",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "checkReferrers": {
                      "docs": "True to check referrers of this content.",
                      "type": "optional<boolean>",
                    },
                    "dueTime": {
                      "docs": "The due time.",
                      "type": "optional<datetime>",
                    },
                    "status": {
                      "docs": "The new status.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChangeStatusDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Content status changed.",
                "status-code": 200,
                "type": "root.ContentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getContents:
      path: /api/content/{app}/{schema}
      method: GET
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Queries contents.
      request:
        name: ContentsGetContentsRequest
        query-parameters:
          ids:
            type: optional<string>
            docs: The optional ids of the content to fetch.
          q:
            type: optional<string>
            docs: The optional json query.
      response:
        docs: Contents returned.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    postContent:
      path: /api/content/{app}/{schema}
      method: POST
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Create a content item.
      request:
        body: root.ContentData
        query-parameters:
          status:
            type: optional<string>
            docs: The initial status.
          id:
            type: optional<string>
            docs: The optional custom content id.
          publish:
            type: optional<boolean>
            docs: True to automatically publish the content.
        name: ContentsPostContentRequest
        content-type: application/json
      response:
        docs: Content created.
        type: root.ContentsDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request:
            key:
              key: value
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    getContentsPost:
      path: /api/content/{app}/{schema}/query
      method: POST
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Queries contents.
      request:
        body: root.QueryDto
        content-type: application/json
      response:
        docs: Contents returned.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    getContent:
      path: /api/content/{app}/{schema}/{id}
      method: GET
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content to fetch.
      display-name: Get a content item.
      request:
        name: ContentsGetContentRequest
        query-parameters:
          version:
            type: optional<long>
            default: -2
            docs: The optional version.
      response:
        docs: Content returned.
        type: root.ContentDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              data:
                key: value
              referenceData:
                key:
                  key: value
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              status: status
              newStatus: newStatus
              statusColor: statusColor
              newStatusColor: newStatusColor
              editToken: editToken
              scheduleJob:
                id: id
                status: status
                dueTime: '2024-01-15T09:30:00Z'
                color: color
                scheduledBy: scheduledBy
              schemaId: schemaId
              schemaName: schemaName
              schemaDisplayName: schemaDisplayName
              referenceFields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
              isDeleted: true
              version: 1000000
    postUpsertContent:
      path: /api/content/{app}/{schema}/{id}
      method: POST
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content item to update.
      display-name: Upsert a content item.
      request:
        body: root.ContentData
        query-parameters:
          status:
            type: optional<string>
            docs: The initial status.
          patch:
            type: optional<boolean>
            docs: Makes the update as patch.
          publish:
            type: optional<boolean>
            docs: True to automatically publish the content.
        name: ContentsPostUpsertContentRequest
        content-type: application/json
      response:
        docs: Content created or updated.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          request:
            key:
              key: value
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    putContent:
      path: /api/content/{app}/{schema}/{id}
      method: PUT
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content item to update.
      display-name: Update a content item.
      request:
        body: root.ContentData
        content-type: application/json
      response:
        docs: Content updated.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          request:
            key:
              key: value
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    deleteContent:
      path: /api/content/{app}/{schema}/{id}
      method: DELETE
      auth: true
      docs: >-
        You can create an generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content item to delete.
      display-name: Delete a content item.
      request:
        name: ContentsDeleteContentRequest
        query-parameters:
          checkReferrers:
            type: optional<boolean>
            docs: True to check referrers of this content.
          permanent:
            type: optional<boolean>
            docs: True to delete the content permanently.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
    patchContent:
      path: /api/content/{app}/{schema}/{id}
      method: PATCH
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content item to patch.
      display-name: Patchs a content item.
      request:
        body: root.ContentData
        content-type: application/json
      response:
        docs: Content patched.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          request:
            key:
              key: value
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    getContentValidity:
      path: /api/content/{app}/{schema}/{id}/validity
      method: GET
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content to fetch.
      display-name: Get a content item validity.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
    getReferences:
      path: /api/content/{app}/{schema}/{id}/references
      method: GET
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content to fetch.
      display-name: Get all references of a content.
      request:
        name: ContentsGetReferencesRequest
        query-parameters:
          q:
            type: optional<string>
            docs: The optional json query.
      response:
        docs: Contents returned.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    getReferencing:
      path: /api/content/{app}/{schema}/{id}/referencing
      method: GET
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content to fetch.
      display-name: Get a referencing contents of a content item.
      request:
        name: ContentsGetReferencingRequest
        query-parameters:
          q:
            type: optional<string>
            docs: The optional json query.
      response:
        docs: Content returned.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    getContentVersion:
      path: /api/content/{app}/{schema}/{id}/{version}
      method: GET
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content to fetch.
        version:
          type: integer
          docs: The version fo the content to fetch.
      display-name: Get a content by version.
      response:
        docs: Content version returned.
        type: file
        status-code: 200
      availability: deprecated
      errors:
        - root.NotFoundError
        - root.InternalServerError
    postContents:
      path: /api/content/{app}/{schema}/import
      method: POST
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Import content items.
      request:
        name: ImportContentsDto
        body:
          properties:
            datas:
              docs: The data to import.
              type: list<root.ContentData>
            publish:
              type: optional<boolean>
              docs: True to automatically publish the content.
              availability: deprecated
            doNotScript:
              type: optional<boolean>
              docs: 'True to turn off scripting for faster inserts. Default: true.'
            optimizeValidation:
              type: optional<boolean>
              docs: >-
                True to turn off costly validation: Unique checks, asset checks
                and reference checks. Default: true.
        content-type: application/json
      response:
        docs: Contents created.
        type: list<root.BulkResultDto>
        status-code: 200
      availability: deprecated
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request:
            datas:
              - key:
                  key: value
          response:
            body:
              - error:
                  message: message
                  errorCode: errorCode
                  traceId: traceId
                  type: type
                  details:
                    - details
                  statusCode: 1
                jobIndex: 1
                id: id
                contentId: contentId
    bulkUpdateContents:
      path: /api/content/{app}/{schema}/bulk
      method: POST
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Bulk update content items.
      request:
        name: BulkUpdateContentsDto
        body:
          properties:
            jobs:
              docs: The contents to update or insert.
              type: list<root.BulkUpdateContentsJobDto>
            publish:
              type: optional<boolean>
              docs: True to automatically publish the content.
              availability: deprecated
            doNotScript:
              type: optional<boolean>
              docs: 'True to turn off scripting for faster inserts. Default: true.'
            doNotValidate:
              type: optional<boolean>
              docs: 'True to turn off validation for faster inserts. Default: false.'
            doNotValidateWorkflow:
              type: optional<boolean>
              docs: 'True to turn off validation of workflow rules. Default: false.'
            checkReferrers:
              type: optional<boolean>
              docs: True to check referrers of deleted contents.
            optimizeValidation:
              type: optional<boolean>
              docs: >-
                True to turn off costly validation: Unique checks, asset checks
                and reference checks. Default: true.
        content-type: application/json
      response:
        docs: ''
        type: list<root.BulkResultDto>
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request:
            jobs:
              - {}
          response:
            body:
              - error:
                  message: message
                  errorCode: errorCode
                  traceId: traceId
                  type: type
                  details:
                    - details
                  statusCode: 1
                jobIndex: 1
                id: id
                contentId: contentId
    putContentStatus:
      path: /api/content/{app}/{schema}/{id}/status
      method: PUT
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content item to change.
      display-name: Change status of a content item.
      request:
        name: ChangeStatusDto
        body:
          properties:
            status:
              type: string
              docs: The new status.
              validation:
                minLength: 1
            dueTime:
              type: optional<datetime>
              docs: The due time.
            checkReferrers:
              type: optional<boolean>
              docs: True to check referrers of this content.
        content-type: application/json
      response:
        docs: Content status changed.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          request:
            status: status
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    deleteContentStatus:
      path: /api/content/{app}/{schema}/{id}/status
      method: DELETE
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content item to cancel.
      display-name: Cancel status change of a content item.
      response:
        docs: Content status change cancelled.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    createDraft:
      path: /api/content/{app}/{schema}/{id}/draft
      method: POST
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content item to create the draft for.
      display-name: Create a new draft version.
      response:
        docs: Content draft created.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
    deleteVersion:
      path: /api/content/{app}/{schema}/{id}/draft
      method: DELETE
      auth: true
      docs: >-
        You can read the generated documentation for your app at
        /api/content/{appName}/docs.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: string
          docs: The ID of the content item to delete the draft from.
      display-name: Delete the draft version.
      response:
        docs: Content draft deleted.
        type: root.ContentsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  data:
                    key: value
                  referenceData:
                    key:
                      key: value
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  status: status
                  newStatus: newStatus
                  statusColor: statusColor
                  newStatusColor: newStatusColor
                  editToken: editToken
                  scheduleJob:
                    id: id
                    status: status
                    dueTime: '2024-01-15T09:30:00Z'
                    color: color
                    scheduledBy: scheduledBy
                  schemaId: schemaId
                  schemaName: schemaName
                  schemaDisplayName: schemaDisplayName
                  referenceFields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
                  isDeleted: true
                  version: 1000000
              statuses:
                - status: status
                  color: color
  source:
    openapi: ../openapi.json
",
    },
    "diagnostics.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getDump": {
              "auth": true,
              "display-name": "Creates a dump and writes it into storage..",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
                "root.NotImplementedError",
              ],
              "examples": [
                {},
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/diagnostics/dump",
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getGCDump": {
              "auth": true,
              "display-name": "Creates a gc dump and writes it into storage.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
                "root.NotImplementedError",
              ],
              "examples": [
                {},
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/diagnostics/gcdump",
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getDump:
      path: /api/diagnostics/dump
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Creates a dump and writes it into storage..
      errors:
        - root.InternalServerError
        - root.NotImplementedError
      examples:
        - {}
    getGCDump:
      path: /api/diagnostics/gcdump
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Creates a gc dump and writes it into storage.
      errors:
        - root.InternalServerError
        - root.NotImplementedError
      examples:
        - {}
  source:
    openapi: ../openapi.json
",
    },
    "eventConsumers.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getEventConsumers": {
              "auth": true,
              "display-name": "Get event consumers.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "count": 1,
                          "error": "error",
                          "isResetting": true,
                          "isStopped": true,
                          "name": "name",
                          "position": "position",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/event-consumers",
              "response": {
                "docs": "Event consumers returned.",
                "status-code": 200,
                "type": "root.EventConsumersDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "resetEventConsumer": {
              "auth": true,
              "display-name": "Reset an event consumer.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "consumerName": "consumerName",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "count": 1,
                      "error": "error",
                      "isResetting": true,
                      "isStopped": true,
                      "name": "name",
                      "position": "position",
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/event-consumers/{consumerName}/reset",
              "path-parameters": {
                "consumerName": {
                  "docs": "The name of the event consumer.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Event consumer resetted asynchronously.",
                "status-code": 200,
                "type": "root.EventConsumerDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "startEventConsumer": {
              "auth": true,
              "display-name": "Start an event consumer.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "consumerName": "consumerName",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "count": 1,
                      "error": "error",
                      "isResetting": true,
                      "isStopped": true,
                      "name": "name",
                      "position": "position",
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/event-consumers/{consumerName}/start",
              "path-parameters": {
                "consumerName": {
                  "docs": "The name of the event consumer.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Event consumer started asynchronously.",
                "status-code": 200,
                "type": "root.EventConsumerDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "stopEventConsumer": {
              "auth": true,
              "display-name": "Stop an event consumer.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "consumerName": "consumerName",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "count": 1,
                      "error": "error",
                      "isResetting": true,
                      "isStopped": true,
                      "name": "name",
                      "position": "position",
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/event-consumers/{consumerName}/stop",
              "path-parameters": {
                "consumerName": {
                  "docs": "The name of the event consumer.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Event consumer stopped asynchronously.",
                "status-code": 200,
                "type": "root.EventConsumerDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getEventConsumers:
      path: /api/event-consumers
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Get event consumers.
      response:
        docs: Event consumers returned.
        type: root.EventConsumersDto
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  isStopped: true
                  isResetting: true
                  count: 1
                  name: name
                  error: error
                  position: position
    startEventConsumer:
      path: /api/event-consumers/{consumerName}/start
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        consumerName:
          type: string
          docs: The name of the event consumer.
      display-name: Start an event consumer.
      response:
        docs: Event consumer started asynchronously.
        type: root.EventConsumerDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            consumerName: consumerName
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              isStopped: true
              isResetting: true
              count: 1
              name: name
              error: error
              position: position
    stopEventConsumer:
      path: /api/event-consumers/{consumerName}/stop
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        consumerName:
          type: string
          docs: The name of the event consumer.
      display-name: Stop an event consumer.
      response:
        docs: Event consumer stopped asynchronously.
        type: root.EventConsumerDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            consumerName: consumerName
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              isStopped: true
              isResetting: true
              count: 1
              name: name
              error: error
              position: position
    resetEventConsumer:
      path: /api/event-consumers/{consumerName}/reset
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        consumerName:
          type: string
          docs: The name of the event consumer.
      display-name: Reset an event consumer.
      response:
        docs: Event consumer resetted asynchronously.
        type: root.EventConsumerDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            consumerName: consumerName
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              isStopped: true
              isResetting: true
              count: 1
              name: name
              error: error
              position: position
  source:
    openapi: ../openapi.json
",
    },
    "history.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getAppHistory": {
              "auth": true,
              "display-name": "Get historical events.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": [
                      {
                        "actor": "actor",
                        "created": "2024-01-15T09:30:00Z",
                        "eventId": "eventId",
                        "eventType": "eventType",
                        "message": "message",
                        "version": 1000000,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/history",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "name": "HistoryGetAppHistoryRequest",
                "query-parameters": {
                  "channel": {
                    "docs": "The name of the channel.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Events returned.",
                "status-code": 200,
                "type": "list<root.HistoryEventDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getTeamHistory": {
              "auth": true,
              "display-name": "Get historical events for a team.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "response": {
                    "body": [
                      {
                        "actor": "actor",
                        "created": "2024-01-15T09:30:00Z",
                        "eventId": "eventId",
                        "eventType": "eventType",
                        "message": "message",
                        "version": 1000000,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams/{team}/history",
              "path-parameters": {
                "team": {
                  "docs": "The ID of the team.",
                  "type": "string",
                },
              },
              "request": {
                "name": "HistoryGetTeamHistoryRequest",
                "query-parameters": {
                  "channel": {
                    "docs": "The name of the channel.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Events returned.",
                "status-code": 200,
                "type": "list<root.HistoryEventDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getAppHistory:
      path: /api/apps/{app}/history
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get historical events.
      request:
        name: HistoryGetAppHistoryRequest
        query-parameters:
          channel:
            type: optional<string>
            docs: The name of the channel.
      response:
        docs: Events returned.
        type: list<root.HistoryEventDto>
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              - message: message
                eventType: eventType
                actor: actor
                eventId: eventId
                created: '2024-01-15T09:30:00Z'
                version: 1000000
    getTeamHistory:
      path: /api/teams/{team}/history
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The ID of the team.
      display-name: Get historical events for a team.
      request:
        name: HistoryGetTeamHistoryRequest
        query-parameters:
          channel:
            type: optional<string>
            docs: The name of the channel.
      response:
        docs: Events returned.
        type: list<root.HistoryEventDto>
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          response:
            body:
              - message: message
                eventType: eventType
                actor: actor
                eventId: eventId
                created: '2024-01-15T09:30:00Z'
                version: 1000000
  source:
    openapi: ../openapi.json
",
    },
    "languages.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getLanguages": {
              "auth": true,
              "display-name": "Get supported languages.",
              "docs": "Provide a list of supported language codes, following the ISO2Code standard.",
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "englishName": "englishName",
                        "iso2Code": "iso2Code",
                        "nativeName": "nativeName",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/languages",
              "response": {
                "docs": "Supported language codes returned.",
                "status-code": 200,
                "type": "list<root.LanguageDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getLanguages:
      path: /api/languages
      method: GET
      auth: true
      docs: >-
        Provide a list of supported language codes, following the ISO2Code
        standard.
      source:
        openapi: ../openapi.json
      display-name: Get supported languages.
      response:
        docs: Supported language codes returned.
        type: list<root.LanguageDto>
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              - iso2Code: iso2Code
                englishName: englishName
                nativeName: nativeName
  source:
    openapi: ../openapi.json
",
    },
    "news.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getNews": {
              "auth": true,
              "display-name": "Get features since version.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "features": [
                        {
                          "name": "name",
                          "text": "text",
                        },
                      ],
                      "version": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/news/features",
              "request": {
                "name": "NewsGetNewsRequest",
                "query-parameters": {
                  "version": {
                    "default": 0,
                    "docs": "The latest received version.",
                    "type": "optional<integer>",
                  },
                },
              },
              "response": {
                "docs": "Latest features returned.",
                "status-code": 200,
                "type": "root.FeaturesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getNews:
      path: /api/news/features
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Get features since version.
      request:
        name: NewsGetNewsRequest
        query-parameters:
          version:
            type: optional<integer>
            default: 0
            docs: The latest received version.
      response:
        docs: Latest features returned.
        type: root.FeaturesDto
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              features:
                - name: name
                  text: text
              version: 1
  source:
    openapi: ../openapi.json
",
    },
    "notifications.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteComment": {
              "auth": true,
              "display-name": "Delete a notification.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "commentId": "commentId",
                    "userId": "userId",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/users/{userId}/notifications/{commentId}",
              "path-parameters": {
                "commentId": {
                  "docs": "The ID of the comment.",
                  "type": "string",
                },
                "userId": {
                  "docs": "The user id.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getNotifications": {
              "auth": true,
              "display-name": "Get all notifications.",
              "docs": "When passing in a version you can retrieve all updates since then.",
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "userId": "userId",
                  },
                  "response": {
                    "body": {
                      "createdComments": [
                        {
                          "id": "id",
                          "text": "text",
                          "time": "2024-01-15T09:30:00Z",
                          "url": "url",
                          "user": "user",
                        },
                      ],
                      "deletedComments": [
                        "deletedComments",
                      ],
                      "updatedComments": [
                        {
                          "id": "id",
                          "text": "text",
                          "time": "2024-01-15T09:30:00Z",
                          "url": "url",
                          "user": "user",
                        },
                      ],
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/users/{userId}/notifications",
              "path-parameters": {
                "userId": {
                  "docs": "The user id.",
                  "type": "string",
                },
              },
              "request": {
                "name": "NotificationsGetNotificationsRequest",
                "query-parameters": {
                  "version": {
                    "default": -2,
                    "docs": "The current version.",
                    "type": "optional<long>",
                  },
                },
              },
              "response": {
                "docs": "All comments returned.",
                "status-code": 200,
                "type": "root.CommentsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getNotifications:
      path: /api/users/{userId}/notifications
      method: GET
      auth: true
      docs: When passing in a version you can retrieve all updates since then.
      source:
        openapi: ../openapi.json
      path-parameters:
        userId:
          type: string
          docs: The user id.
      display-name: Get all notifications.
      request:
        name: NotificationsGetNotificationsRequest
        query-parameters:
          version:
            type: optional<long>
            default: -2
            docs: The current version.
      response:
        docs: All comments returned.
        type: root.CommentsDto
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - path-parameters:
            userId: userId
          response:
            body:
              createdComments:
                - id: id
                  time: '2024-01-15T09:30:00Z'
                  user: user
                  text: text
                  url: url
              updatedComments:
                - id: id
                  time: '2024-01-15T09:30:00Z'
                  user: user
                  text: text
                  url: url
              deletedComments:
                - deletedComments
              version: 1000000
    deleteComment:
      path: /api/users/{userId}/notifications/{commentId}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        userId:
          type: string
          docs: The user id.
        commentId:
          type: string
          docs: The ID of the comment.
      display-name: Delete a notification.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            userId: userId
            commentId: commentId
  source:
    openapi: ../openapi.json
",
    },
    "ping.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getAppPing": {
              "auth": true,
              "display-name": "Get ping status.",
              "docs": "Can be used to test, if the Squidex API is alive and responding.",
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/ping/{app}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getInfo": {
              "auth": true,
              "display-name": "Get API information.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/info",
              "response": {
                "docs": "Infos returned.",
                "status-code": 200,
                "type": "root.ExposedValues",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getPing": {
              "auth": true,
              "display-name": "Get ping status of the API.",
              "docs": "Can be used to test, if the Squidex API is alive and responding.",
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {},
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/ping",
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getInfo:
      path: /api/info
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Get API information.
      response:
        docs: Infos returned.
        type: root.ExposedValues
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              key: value
    getPing:
      path: /api/ping
      method: GET
      auth: true
      docs: Can be used to test, if the Squidex API is alive and responding.
      source:
        openapi: ../openapi.json
      display-name: Get ping status of the API.
      errors:
        - root.InternalServerError
      examples:
        - {}
    getAppPing:
      path: /api/ping/{app}
      method: GET
      auth: true
      docs: Can be used to test, if the Squidex API is alive and responding.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get ping status.
      errors:
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
  source:
    openapi: ../openapi.json
",
    },
    "plans.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getPlans": {
              "auth": true,
              "display-name": "Get app plan information.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "currentPlanId": "currentPlanId",
                      "locked": "None",
                      "planOwner": "planOwner",
                      "plans": [
                        {
                          "confirmText": "confirmText",
                          "costs": "costs",
                          "id": "id",
                          "maxApiBytes": 1000000,
                          "maxApiCalls": 1000000,
                          "maxAssetSize": 1000000,
                          "maxContributors": 1,
                          "name": "name",
                          "yearlyConfirmText": "yearlyConfirmText",
                          "yearlyCosts": "yearlyCosts",
                          "yearlyId": "yearlyId",
                        },
                      ],
                      "portalLink": "portalLink",
                      "referral": {
                        "code": "code",
                        "condition": "condition",
                        "earned": "earned",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/plans",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "App plan information returned.",
                "status-code": 200,
                "type": "root.PlansDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getTeamPlans": {
              "auth": true,
              "display-name": "Get team plan information.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "response": {
                    "body": {
                      "currentPlanId": "currentPlanId",
                      "locked": "None",
                      "planOwner": "planOwner",
                      "plans": [
                        {
                          "confirmText": "confirmText",
                          "costs": "costs",
                          "id": "id",
                          "maxApiBytes": 1000000,
                          "maxApiCalls": 1000000,
                          "maxAssetSize": 1000000,
                          "maxContributors": 1,
                          "name": "name",
                          "yearlyConfirmText": "yearlyConfirmText",
                          "yearlyCosts": "yearlyCosts",
                          "yearlyId": "yearlyId",
                        },
                      ],
                      "portalLink": "portalLink",
                      "referral": {
                        "code": "code",
                        "condition": "condition",
                        "earned": "earned",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams/{team}/plans",
              "path-parameters": {
                "team": {
                  "docs": "The name of the team.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Team plan information returned.",
                "status-code": 200,
                "type": "root.PlansDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putPlan": {
              "auth": true,
              "display-name": "Change the app plan.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "planId": "planId",
                  },
                  "response": {
                    "body": {
                      "redirectUri": "redirectUri",
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/plan",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": "root.ChangePlanDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Plan changed or redirect url returned.",
                "status-code": 200,
                "type": "root.PlanChangedDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putTeamPlan": {
              "auth": true,
              "display-name": "Change the team plan.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "request": {
                    "planId": "planId",
                  },
                  "response": {
                    "body": {
                      "redirectUri": "redirectUri",
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/teams/{team}/plan",
              "path-parameters": {
                "team": {
                  "docs": "The name of the team.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.ChangePlanDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Plan changed or redirect url returned.",
                "status-code": 200,
                "type": "root.PlanChangedDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getPlans:
      path: /api/apps/{app}/plans
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get app plan information.
      response:
        docs: App plan information returned.
        type: root.PlansDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              plans:
                - id: id
                  name: name
                  costs: costs
                  confirmText: confirmText
                  yearlyConfirmText: yearlyConfirmText
                  yearlyCosts: yearlyCosts
                  yearlyId: yearlyId
                  maxApiBytes: 1000000
                  maxApiCalls: 1000000
                  maxAssetSize: 1000000
                  maxContributors: 1
              currentPlanId: currentPlanId
              planOwner: planOwner
              portalLink: portalLink
              referral:
                code: code
                earned: earned
                condition: condition
              locked: None
    putPlan:
      path: /api/apps/{app}/plan
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Change the app plan.
      request:
        body: root.ChangePlanDto
        content-type: application/json
      response:
        docs: Plan changed or redirect url returned.
        type: root.PlanChangedDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            planId: planId
          response:
            body:
              redirectUri: redirectUri
    getTeamPlans:
      path: /api/teams/{team}/plans
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The name of the team.
      display-name: Get team plan information.
      response:
        docs: Team plan information returned.
        type: root.PlansDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          response:
            body:
              plans:
                - id: id
                  name: name
                  costs: costs
                  confirmText: confirmText
                  yearlyConfirmText: yearlyConfirmText
                  yearlyCosts: yearlyCosts
                  yearlyId: yearlyId
                  maxApiBytes: 1000000
                  maxApiCalls: 1000000
                  maxAssetSize: 1000000
                  maxContributors: 1
              currentPlanId: currentPlanId
              planOwner: planOwner
              portalLink: portalLink
              referral:
                code: code
                earned: earned
                condition: condition
              locked: None
    putTeamPlan:
      path: /api/teams/{team}/plan
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The name of the team.
      display-name: Change the team plan.
      request:
        body: root.ChangePlanDto
        content-type: application/json
      response:
        docs: Plan changed or redirect url returned.
        type: root.PlanChangedDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          request:
            planId: planId
          response:
            body:
              redirectUri: redirectUri
  source:
    openapi: ../openapi.json
",
    },
    "rules.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteEvent": {
              "auth": true,
              "display-name": "Cancels an event.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/events/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The event to enqueue.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteEvents": {
              "auth": true,
              "display-name": "Cancels all events.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/events",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteRule": {
              "auth": true,
              "display-name": "Delete a rule.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the rule to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteRuleEvents": {
              "auth": true,
              "display-name": "Cancels all rule events.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/{id}/events",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the rule to cancel.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteRuleRun": {
              "auth": true,
              "display-name": "Cancel the current run.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/run",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "disableRule": {
              "auth": true,
              "display-name": "Disable a rule.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "action": {
                        "actionType": "Webhook",
                        "headers": "action",
                        "method": "POST",
                        "payload": "action",
                        "payloadType": "action",
                        "sharedSecret": "action",
                        "url": "action",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "id": "id",
                      "isEnabled": true,
                      "lastExecuted": "2024-01-15T09:30:00Z",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "numFailed": 1000000,
                      "numSucceeded": 1000000,
                      "trigger": {
                        "limit": 1,
                        "numDays": 1,
                        "triggerType": "Usage",
                      },
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/{id}/disable",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the rule to disable.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Rule disabled.",
                "status-code": 200,
                "type": "root.RuleDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "enableRule": {
              "auth": true,
              "display-name": "Enable a rule.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "action": {
                        "actionType": "Webhook",
                        "headers": "action",
                        "method": "POST",
                        "payload": "action",
                        "payloadType": "action",
                        "sharedSecret": "action",
                        "url": "action",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "id": "id",
                      "isEnabled": true,
                      "lastExecuted": "2024-01-15T09:30:00Z",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "numFailed": 1000000,
                      "numSucceeded": 1000000,
                      "trigger": {
                        "limit": 1,
                        "numDays": 1,
                        "triggerType": "Usage",
                      },
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/{id}/enable",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the rule to enable.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Rule enabled.",
                "status-code": 200,
                "type": "root.RuleDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getActions": {
              "auth": true,
              "display-name": "Get supported rule actions.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": {
                        "description": "description",
                        "display": "display",
                        "iconColor": "iconColor",
                        "iconImage": "iconImage",
                        "properties": [
                          {
                            "display": "display",
                            "editor": "Checkbox",
                            "isFormattable": true,
                            "isRequired": true,
                            "name": "name",
                          },
                        ],
                        "readMore": "readMore",
                        "title": "title",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/rules/actions",
              "response": {
                "docs": "Rule actions returned.",
                "status-code": 200,
                "type": "map<string, root.RuleElementDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getEventSchema": {
              "auth": true,
              "display-name": "Provide the json schema for the event with the specified name.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "type": "type",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/rules/eventtypes/{type}",
              "path-parameters": {
                "type": {
                  "docs": "The type name of the event.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Rule event type found.",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getEventTypes": {
              "auth": true,
              "display-name": "Provide a list of all event types that are used in rules.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      "string",
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/rules/eventtypes",
              "response": {
                "docs": "Rule events returned.",
                "status-code": 200,
                "type": "list<string>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getEvents": {
              "auth": true,
              "display-name": "Get rule events.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "description": "description",
                          "eventName": "eventName",
                          "id": "id",
                          "jobResult": "Pending",
                          "lastDump": "lastDump",
                          "nextAttempt": "2024-01-15T09:30:00Z",
                          "numCalls": 1,
                          "result": "Pending",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/events",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "name": "RulesGetEventsRequest",
                "query-parameters": {
                  "ruleId": {
                    "docs": "The optional rule id to filter to events.",
                    "type": "optional<string>",
                  },
                  "skip": {
                    "default": 0,
                    "docs": "The number of events to skip.",
                    "type": "optional<integer>",
                  },
                  "take": {
                    "default": 20,
                    "docs": "The number of events to take.",
                    "type": "optional<integer>",
                  },
                },
              },
              "response": {
                "docs": "Rule events returned.",
                "status-code": 200,
                "type": "root.RuleEventsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getRules": {
              "auth": true,
              "display-name": "Get rules.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "action": {
                            "actionType": "Webhook",
                            "headers": "action",
                            "method": "POST",
                            "payload": "action",
                            "payloadType": "action",
                            "sharedSecret": "action",
                            "url": "action",
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "id": "id",
                          "isEnabled": true,
                          "lastExecuted": "2024-01-15T09:30:00Z",
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "name": "name",
                          "numFailed": 1000000,
                          "numSucceeded": 1000000,
                          "trigger": {
                            "limit": 1,
                            "triggerType": "Usage",
                          },
                          "version": 1000000,
                        },
                      ],
                      "runningRuleId": "runningRuleId",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Rules returned.",
                "status-code": 200,
                "type": "root.RulesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postRule": {
              "auth": true,
              "display-name": "Create a new rule.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "action": {
                      "actionType": "Webhook",
                      "headers": "action",
                      "method": "POST",
                      "payload": "action",
                      "payloadType": "action",
                      "sharedSecret": "action",
                      "url": "action",
                    },
                    "trigger": {
                      "limit": 1,
                      "triggerType": "Usage",
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "action": {
                        "actionType": "Webhook",
                        "headers": "action",
                        "method": "POST",
                        "payload": "action",
                        "payloadType": "action",
                        "sharedSecret": "action",
                        "url": "action",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "id": "id",
                      "isEnabled": true,
                      "lastExecuted": "2024-01-15T09:30:00Z",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "numFailed": 1000000,
                      "numSucceeded": 1000000,
                      "trigger": {
                        "limit": 1,
                        "numDays": 1,
                        "triggerType": "Usage",
                      },
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": "root.CreateRuleDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Rule created.",
                "status-code": 201,
                "type": "root.RuleDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putEvent": {
              "auth": true,
              "display-name": "Retry the event immediately.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/events/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The event to enqueue.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putRule": {
              "auth": true,
              "display-name": "Update a rule.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "action": {
                        "actionType": "Webhook",
                        "headers": "action",
                        "method": "POST",
                        "payload": "action",
                        "payloadType": "action",
                        "sharedSecret": "action",
                        "url": "action",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "id": "id",
                      "isEnabled": true,
                      "lastExecuted": "2024-01-15T09:30:00Z",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "numFailed": 1000000,
                      "numSucceeded": 1000000,
                      "trigger": {
                        "limit": 1,
                        "numDays": 1,
                        "triggerType": "Usage",
                      },
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the rule to update.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "action": {
                      "docs": "The action properties.",
                      "type": "optional<root.RuleActionDto>",
                    },
                    "isEnabled": {
                      "docs": "Enable or disable the rule.",
                      "type": "optional<boolean>",
                    },
                    "name": {
                      "docs": "Optional rule name.",
                      "type": "optional<string>",
                    },
                    "trigger": {
                      "docs": "The trigger properties.",
                      "type": "optional<root.RuleTriggerDto>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateRuleDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Rule updated.",
                "status-code": 200,
                "type": "root.RuleDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putRuleRun": {
              "auth": true,
              "display-name": "Run a rule.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/{id}/run",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the rule to run.",
                  "type": "string",
                },
              },
              "request": {
                "name": "RulesPutRuleRunRequest",
                "query-parameters": {
                  "fromSnapshots": {
                    "default": false,
                    "docs": "Runs the rule from snapeshots if possible.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "simulateGET": {
              "auth": true,
              "display-name": "Simulate a rule.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "actionData": "actionData",
                          "actionName": "actionName",
                          "enrichedEvent": {
                            "key": "value",
                          },
                          "error": "error",
                          "event": {
                            "key": "value",
                          },
                          "eventId": "eventId",
                          "eventName": "eventName",
                          "skipReasons": [
                            "None",
                          ],
                          "uniqueId": "uniqueId",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/{id}/simulate",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the rule to simulate.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Rule simulated.",
                "status-code": 200,
                "type": "root.SimulatedRuleEventsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "simulatePOST": {
              "auth": true,
              "display-name": "Simulate a rule.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "action": {
                      "actionType": "Webhook",
                      "headers": "action",
                      "method": "POST",
                      "payload": "action",
                      "payloadType": "action",
                      "sharedSecret": "action",
                      "url": "action",
                    },
                    "trigger": {
                      "limit": 1,
                      "triggerType": "Usage",
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "actionData": "actionData",
                          "actionName": "actionName",
                          "enrichedEvent": {
                            "key": "value",
                          },
                          "error": "error",
                          "event": {
                            "key": "value",
                          },
                          "eventId": "eventId",
                          "eventName": "eventName",
                          "skipReasons": [
                            "None",
                          ],
                          "uniqueId": "uniqueId",
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/simulate",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": "root.CreateRuleDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Rule simulated.",
                "status-code": 200,
                "type": "root.SimulatedRuleEventsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "triggerRule": {
              "auth": true,
              "display-name": "Trigger a rule.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": "id",
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/rules/{id}/trigger",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the rule to disable.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getActions:
      path: /api/rules/actions
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Get supported rule actions.
      response:
        docs: Rule actions returned.
        type: map<string, root.RuleElementDto>
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              key:
                description: description
                display: display
                title: title
                iconColor: iconColor
                iconImage: iconImage
                readMore: readMore
                properties:
                  - editor: Checkbox
                    name: name
                    display: display
                    isFormattable: true
                    isRequired: true
    getRules:
      path: /api/apps/{app}/rules
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get rules.
      response:
        docs: Rules returned.
        type: root.RulesDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  version: 1000000
                  isEnabled: true
                  name: name
                  trigger:
                    triggerType: Usage
                    limit: 1
                  action:
                    actionType: Webhook
                    url: action
                    method: POST
                    payload: action
                    payloadType: action
                    headers: action
                    sharedSecret: action
                  numSucceeded: 1000000
                  numFailed: 1000000
                  lastExecuted: '2024-01-15T09:30:00Z'
              runningRuleId: runningRuleId
    postRule:
      path: /api/apps/{app}/rules
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Create a new rule.
      request:
        body: root.CreateRuleDto
        content-type: application/json
      response:
        docs: Rule created.
        type: root.RuleDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            trigger:
              triggerType: Usage
              limit: 1
            action:
              actionType: Webhook
              url: action
              method: POST
              payload: action
              payloadType: action
              headers: action
              sharedSecret: action
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              isEnabled: true
              name: name
              trigger:
                triggerType: Usage
                limit: 1
                numDays: 1
              action:
                actionType: Webhook
                url: action
                method: POST
                payload: action
                payloadType: action
                headers: action
                sharedSecret: action
              numSucceeded: 1000000
              numFailed: 1000000
              lastExecuted: '2024-01-15T09:30:00Z'
    deleteRuleRun:
      path: /api/apps/{app}/rules/run
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Cancel the current run.
      errors:
        - root.BadRequestError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
    putRule:
      path: /api/apps/{app}/rules/{id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the rule to update.
      display-name: Update a rule.
      request:
        name: UpdateRuleDto
        body:
          properties:
            name:
              type: optional<string>
              docs: Optional rule name.
            trigger:
              type: optional<root.RuleTriggerDto>
              docs: The trigger properties.
            action:
              type: optional<root.RuleActionDto>
              docs: The action properties.
            isEnabled:
              type: optional<boolean>
              docs: Enable or disable the rule.
        content-type: application/json
      response:
        docs: Rule updated.
        type: root.RuleDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              isEnabled: true
              name: name
              trigger:
                triggerType: Usage
                limit: 1
                numDays: 1
              action:
                actionType: Webhook
                url: action
                method: POST
                payload: action
                payloadType: action
                headers: action
                sharedSecret: action
              numSucceeded: 1000000
              numFailed: 1000000
              lastExecuted: '2024-01-15T09:30:00Z'
    deleteRule:
      path: /api/apps/{app}/rules/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the rule to delete.
      display-name: Delete a rule.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    enableRule:
      path: /api/apps/{app}/rules/{id}/enable
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the rule to enable.
      display-name: Enable a rule.
      response:
        docs: Rule enabled.
        type: root.RuleDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              isEnabled: true
              name: name
              trigger:
                triggerType: Usage
                limit: 1
                numDays: 1
              action:
                actionType: Webhook
                url: action
                method: POST
                payload: action
                payloadType: action
                headers: action
                sharedSecret: action
              numSucceeded: 1000000
              numFailed: 1000000
              lastExecuted: '2024-01-15T09:30:00Z'
    disableRule:
      path: /api/apps/{app}/rules/{id}/disable
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the rule to disable.
      display-name: Disable a rule.
      response:
        docs: Rule disabled.
        type: root.RuleDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              isEnabled: true
              name: name
              trigger:
                triggerType: Usage
                limit: 1
                numDays: 1
              action:
                actionType: Webhook
                url: action
                method: POST
                payload: action
                payloadType: action
                headers: action
                sharedSecret: action
              numSucceeded: 1000000
              numFailed: 1000000
              lastExecuted: '2024-01-15T09:30:00Z'
    triggerRule:
      path: /api/apps/{app}/rules/{id}/trigger
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the rule to disable.
      display-name: Trigger a rule.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    putRuleRun:
      path: /api/apps/{app}/rules/{id}/run
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the rule to run.
      display-name: Run a rule.
      request:
        name: RulesPutRuleRunRequest
        query-parameters:
          fromSnapshots:
            type: optional<boolean>
            default: false
            docs: Runs the rule from snapeshots if possible.
      errors:
        - root.BadRequestError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    deleteRuleEvents:
      path: /api/apps/{app}/rules/{id}/events
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the rule to cancel.
      display-name: Cancels all rule events.
      errors:
        - root.BadRequestError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    simulatePOST:
      path: /api/apps/{app}/rules/simulate
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Simulate a rule.
      request:
        body: root.CreateRuleDto
        content-type: application/json
      response:
        docs: Rule simulated.
        type: root.SimulatedRuleEventsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            trigger:
              triggerType: Usage
              limit: 1
            action:
              actionType: Webhook
              url: action
              method: POST
              payload: action
              payloadType: action
              headers: action
              sharedSecret: action
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - eventId: eventId
                  uniqueId: uniqueId
                  eventName: eventName
                  event:
                    key: value
                  enrichedEvent:
                    key: value
                  actionName: actionName
                  actionData: actionData
                  error: error
                  skipReasons:
                    - None
    simulateGET:
      path: /api/apps/{app}/rules/{id}/simulate
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The ID of the rule to simulate.
      display-name: Simulate a rule.
      response:
        docs: Rule simulated.
        type: root.SimulatedRuleEventsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - eventId: eventId
                  uniqueId: uniqueId
                  eventName: eventName
                  event:
                    key: value
                  enrichedEvent:
                    key: value
                  actionName: actionName
                  actionData: actionData
                  error: error
                  skipReasons:
                    - None
    getEvents:
      path: /api/apps/{app}/rules/events
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get rule events.
      request:
        name: RulesGetEventsRequest
        query-parameters:
          ruleId:
            type: optional<string>
            docs: The optional rule id to filter to events.
          skip:
            type: optional<integer>
            default: 0
            docs: The number of events to skip.
          take:
            type: optional<integer>
            default: 20
            docs: The number of events to take.
      response:
        docs: Rule events returned.
        type: root.RuleEventsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  description: description
                  eventName: eventName
                  lastDump: lastDump
                  numCalls: 1
                  nextAttempt: '2024-01-15T09:30:00Z'
                  result: Pending
                  jobResult: Pending
    deleteEvents:
      path: /api/apps/{app}/rules/events
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Cancels all events.
      errors:
        - root.BadRequestError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
    putEvent:
      path: /api/apps/{app}/rules/events/{id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The event to enqueue.
      display-name: Retry the event immediately.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    deleteEvent:
      path: /api/apps/{app}/rules/events/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        id:
          type: string
          docs: The event to enqueue.
      display-name: Cancels an event.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            id: id
    getEventTypes:
      path: /api/rules/eventtypes
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Provide a list of all event types that are used in rules.
      response:
        docs: Rule events returned.
        type: list<string>
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              - string
    getEventSchema:
      path: /api/rules/eventtypes/{type}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        type:
          type: string
          docs: The type name of the event.
      display-name: Provide the json schema for the event with the specified name.
      response:
        docs: Rule event type found.
        type: unknown
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            type: type
          response:
            body:
              key: value
  source:
    openapi: ../openapi.json
",
    },
    "schemas.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteField": {
              "auth": true,
              "display-name": "Delete a schema field.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to disable.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field deleted.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteNestedField": {
              "auth": true,
              "display-name": "Delete a nested field.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to disable.",
                  "type": "long",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field deleted.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteSchema": {
              "auth": true,
              "display-name": "Delete a schema.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "disableField": {
              "auth": true,
              "display-name": "Disable a schema field.",
              "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/disable",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to disable.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field disabled.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "disableNestedField": {
              "auth": true,
              "display-name": "Disable a nested field.",
              "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/disable",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to disable.",
                  "type": "long",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field disabled.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "enableField": {
              "auth": true,
              "display-name": "Enable a schema field.",
              "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/enable",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to enable.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field enabled.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "enableNestedField": {
              "auth": true,
              "display-name": "Enable a nested field.",
              "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/enable",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to enable.",
                  "type": "long",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field enabled.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getSchema": {
              "auth": true,
              "display-name": "Get a schema by name.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema to retrieve.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema found.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getSchemas": {
              "auth": true,
              "display-name": "Get schemas.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "category": "category",
                          "created": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "fieldRules": [
                            {
                              "action": "Disable",
                              "field": "field",
                            },
                          ],
                          "fields": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "partitioning": "partitioning",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "fieldsInLists": [
                            "fieldsInLists",
                          ],
                          "fieldsInReferences": [
                            "fieldsInReferences",
                          ],
                          "id": "id",
                          "isPublished": true,
                          "isSingleton": true,
                          "lastModified": "2024-01-15T09:30:00Z",
                          "lastModifiedBy": "lastModifiedBy",
                          "name": "name",
                          "previewUrls": {
                            "key": "value",
                          },
                          "properties": {
                            "validateOnPublish": true,
                          },
                          "scripts": {},
                          "type": "Default",
                          "version": 1000000,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Schemas returned.",
                "status-code": 200,
                "type": "root.SchemasDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "hideField": {
              "auth": true,
              "display-name": "Hide a schema field.",
              "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/hide",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to hide.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field hidden.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "hideNestedField": {
              "auth": true,
              "display-name": "Hide a nested field.",
              "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/hide",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to hide.",
                  "type": "long",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field hidden.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "lockField": {
              "auth": true,
              "display-name": "Lock a schema field.",
              "docs": "A locked field cannot be updated or deleted.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/lock",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to lock.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field shown.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "lockNestedField": {
              "auth": true,
              "display-name": "Lock a nested field.",
              "docs": "A locked field cannot be edited or deleted.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/lock",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to lock.",
                  "type": "long",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field hidden.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postField": {
              "auth": true,
              "display-name": "Add a schema field.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.ConflictError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {
                    "name": "name",
                    "properties": {
                      "editor": "Separator",
                      "fieldType": "UI",
                      "isHalfWidth": true,
                      "isRequired": true,
                      "isRequiredOnPublish": true,
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.AddFieldDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Schema field created.",
                "status-code": 201,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postNestedField": {
              "auth": true,
              "display-name": "Add a nested field.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.ConflictError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "request": {
                    "name": "name",
                    "properties": {
                      "editor": "Separator",
                      "fieldType": "UI",
                      "isHalfWidth": true,
                      "isRequired": true,
                      "isRequiredOnPublish": true,
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.AddFieldDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Schema field created.",
                "status-code": 201,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postSchema": {
              "auth": true,
              "display-name": "Create a new schema.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.ConflictError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "isPublished": true,
                    "isSingleton": true,
                    "name": "name",
                    "type": "Default",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "extends": [
                    "root.UpsertSchemaDto",
                  ],
                  "properties": {
                    "isSingleton": {
                      "availability": "deprecated",
                      "docs": "Set to true to allow a single content item only.",
                      "type": "boolean",
                    },
                    "name": {
                      "docs": "The name of the schema.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": "^[a-z0-9]+(\-[a-z0-9]+)*$",
                      },
                    },
                    "type": {
                      "docs": "The type of the schema.",
                      "type": "root.SchemaType",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateSchemaDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Schema created.",
                "status-code": 201,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "publishSchema": {
              "auth": true,
              "display-name": "Publish a schema.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/publish",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema to publish.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema published.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putCategory": {
              "auth": true,
              "display-name": "Update a schema category.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/category",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "The name of the category.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChangeCategoryDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Schema updated.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putField": {
              "auth": true,
              "display-name": "Update a schema field.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "schema": "schema",
                  },
                  "request": {
                    "properties": {
                      "editor": "Separator",
                      "fieldType": "UI",
                      "isHalfWidth": true,
                      "isRequired": true,
                      "isRequiredOnPublish": true,
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to update.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.UpdateFieldDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Schema field updated.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putNestedField": {
              "auth": true,
              "display-name": "Update a nested field.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "request": {
                    "properties": {
                      "editor": "Separator",
                      "fieldType": "UI",
                      "isHalfWidth": true,
                      "isRequired": true,
                      "isRequiredOnPublish": true,
                    },
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to update.",
                  "type": "long",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.UpdateFieldDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Schema field updated.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putNestedFieldOrdering": {
              "auth": true,
              "display-name": "Reorder all nested fields.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "request": {
                    "fieldIds": [
                      1000000,
                    ],
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/ordering",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.ReorderFieldsDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Schema fields reordered.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putPreviewUrls": {
              "auth": true,
              "display-name": "Update the preview urls.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {
                    "key": "value",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/preview-urls",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.ConfigurePreviewUrlsDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Schema updated.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putRules": {
              "auth": true,
              "display-name": "Update the rules.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/rules",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "fieldRules": {
                      "docs": "The field rules to configure.",
                      "type": "optional<list<root.FieldRuleDto>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConfigureFieldRulesDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Schema updated.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putSchema": {
              "auth": true,
              "display-name": "Update a schema.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {
                    "validateOnPublish": true,
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "contentEditorUrl": {
                      "docs": "The url to the editor plugin.",
                      "type": "optional<string>",
                    },
                    "contentSidebarUrl": {
                      "docs": "The url to a the sidebar plugin for content items.",
                      "type": "optional<string>",
                    },
                    "contentsSidebarUrl": {
                      "docs": "The url to a the sidebar plugin for content lists.",
                      "type": "optional<string>",
                    },
                    "hints": {
                      "docs": "Hints to describe the schema.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 1000,
                        "minLength": 0,
                        "pattern": undefined,
                      },
                    },
                    "label": {
                      "docs": "Optional label for the editor.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 100,
                        "minLength": 0,
                        "pattern": undefined,
                      },
                    },
                    "tags": {
                      "docs": "Tags for automation processes.",
                      "type": "optional<list<string>>",
                    },
                    "validateOnPublish": {
                      "docs": "True to validate the content items on publish.",
                      "type": "boolean",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateSchemaDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Schema updated.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putSchemaFieldOrdering": {
              "auth": true,
              "display-name": "Reorder all fields.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {
                    "fieldIds": [
                      1000000,
                    ],
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/ordering",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.ReorderFieldsDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Schema fields reordered.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putSchemaSync": {
              "auth": true,
              "display-name": "Synchronize a schema.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {
                    "isPublished": true,
                    "noFieldDeletion": true,
                    "noFieldRecreation": true,
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/sync",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "extends": [
                    "root.UpsertSchemaDto",
                  ],
                  "properties": {
                    "noFieldDeletion": {
                      "docs": "True, when fields should not be deleted.",
                      "type": "boolean",
                    },
                    "noFieldRecreation": {
                      "docs": "True, when fields with different types should not be recreated.",
                      "type": "boolean",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SynchronizeSchemaDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Schema updated.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putSchemaUIFields": {
              "auth": true,
              "display-name": "Configure UI fields.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/ui",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "fieldsInLists": {
                      "docs": "The name of fields that are used in content lists.",
                      "type": "optional<list<string>>",
                    },
                    "fieldsInReferences": {
                      "docs": "The name of fields that are used in content references.",
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConfigureUiFieldsDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Schema UI fields defined.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putScripts": {
              "auth": true,
              "display-name": "Update the scripts.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/scripts",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.SchemaScriptsDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Schema updated.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "showField": {
              "auth": true,
              "display-name": "Show a schema field.",
              "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/show",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to show.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field shown.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "showNestedField": {
              "auth": true,
              "display-name": "Show a nested field.",
              "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "id": 1000000,
                    "parentId": 1000000,
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/show",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "id": {
                  "docs": "The ID of the field to show.",
                  "type": "long",
                },
                "parentId": {
                  "docs": "The parent field id.",
                  "type": "long",
                },
                "schema": {
                  "docs": "The name of the schema.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema field shown.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unpublishSchema": {
              "auth": true,
              "display-name": "Unpublish a schema.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "schema": "schema",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "category": "category",
                      "created": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "fieldRules": [
                        {
                          "action": "Disable",
                          "condition": "condition",
                          "field": "field",
                        },
                      ],
                      "fields": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "fieldId": 1000000,
                          "isDisabled": true,
                          "isHidden": true,
                          "isLocked": true,
                          "name": "name",
                          "nested": [
                            {
                              "_links": {
                                "key": {
                                  "href": "href",
                                  "method": "method",
                                },
                              },
                              "fieldId": 1000000,
                              "isDisabled": true,
                              "isHidden": true,
                              "isLocked": true,
                              "name": "name",
                              "properties": {
                                "editor": "Separator",
                                "fieldType": "UI",
                                "isHalfWidth": true,
                                "isRequired": true,
                                "isRequiredOnPublish": true,
                              },
                            },
                          ],
                          "partitioning": "partitioning",
                          "properties": {
                            "editor": "Separator",
                            "fieldType": "UI",
                            "isHalfWidth": true,
                            "isRequired": true,
                            "isRequiredOnPublish": true,
                          },
                        },
                      ],
                      "fieldsInLists": [
                        "fieldsInLists",
                      ],
                      "fieldsInReferences": [
                        "fieldsInReferences",
                      ],
                      "id": "id",
                      "isPublished": true,
                      "isSingleton": true,
                      "lastModified": "2024-01-15T09:30:00Z",
                      "lastModifiedBy": "lastModifiedBy",
                      "name": "name",
                      "previewUrls": {
                        "key": "value",
                      },
                      "properties": {
                        "contentEditorUrl": "contentEditorUrl",
                        "contentSidebarUrl": "contentSidebarUrl",
                        "contentsSidebarUrl": "contentsSidebarUrl",
                        "hints": "hints",
                        "label": "label",
                        "tags": [
                          "tags",
                        ],
                        "validateOnPublish": true,
                      },
                      "scripts": {
                        "change": "change",
                        "create": "create",
                        "delete": "delete",
                        "query": "query",
                        "queryPre": "queryPre",
                        "update": "update",
                      },
                      "type": "Default",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/apps/{app}/schemas/{schema}/unpublish",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "schema": {
                  "docs": "The name of the schema to unpublish.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Schema unpublished.",
                "status-code": 200,
                "type": "root.SchemaDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    postField:
      path: /api/apps/{app}/schemas/{schema}/fields
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Add a schema field.
      request:
        body: root.AddFieldDto
        content-type: application/json
      response:
        docs: Schema field created.
        type: root.SchemaDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.ConflictError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request:
            name: name
            properties:
              fieldType: UI
              editor: Separator
              isRequired: true
              isRequiredOnPublish: true
              isHalfWidth: true
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    postNestedField:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
      display-name: Add a nested field.
      request:
        body: root.AddFieldDto
        content-type: application/json
      response:
        docs: Schema field created.
        type: root.SchemaDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.ConflictError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
          request:
            name: name
            properties:
              fieldType: UI
              editor: Separator
              isRequired: true
              isRequiredOnPublish: true
              isHalfWidth: true
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putSchemaUIFields:
      path: /api/apps/{app}/schemas/{schema}/fields/ui
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Configure UI fields.
      request:
        name: ConfigureUiFieldsDto
        body:
          properties:
            fieldsInLists:
              type: optional<list<string>>
              docs: The name of fields that are used in content lists.
            fieldsInReferences:
              type: optional<list<string>>
              docs: The name of fields that are used in content references.
        content-type: application/json
      response:
        docs: Schema UI fields defined.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putSchemaFieldOrdering:
      path: /api/apps/{app}/schemas/{schema}/fields/ordering
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Reorder all fields.
      request:
        body: root.ReorderFieldsDto
        content-type: application/json
      response:
        docs: Schema fields reordered.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request:
            fieldIds:
              - 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putNestedFieldOrdering:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/ordering
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
      display-name: Reorder all nested fields.
      request:
        body: root.ReorderFieldsDto
        content-type: application/json
      response:
        docs: Schema fields reordered.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
          request:
            fieldIds:
              - 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putField:
      path: /api/apps/{app}/schemas/{schema}/fields/{id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: long
          docs: The ID of the field to update.
      display-name: Update a schema field.
      request:
        body: root.UpdateFieldDto
        content-type: application/json
      response:
        docs: Schema field updated.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: 1000000
          request:
            properties:
              fieldType: UI
              editor: Separator
              isRequired: true
              isRequiredOnPublish: true
              isHalfWidth: true
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    deleteField:
      path: /api/apps/{app}/schemas/{schema}/fields/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: long
          docs: The ID of the field to disable.
      display-name: Delete a schema field.
      response:
        docs: Schema field deleted.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putNestedField:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
        id:
          type: long
          docs: The ID of the field to update.
      display-name: Update a nested field.
      request:
        body: root.UpdateFieldDto
        content-type: application/json
      response:
        docs: Schema field updated.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
            id: 1000000
          request:
            properties:
              fieldType: UI
              editor: Separator
              isRequired: true
              isRequiredOnPublish: true
              isHalfWidth: true
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    deleteNestedField:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
        id:
          type: long
          docs: The ID of the field to disable.
      display-name: Delete a nested field.
      response:
        docs: Schema field deleted.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    lockField:
      path: /api/apps/{app}/schemas/{schema}/fields/{id}/lock
      method: PUT
      auth: true
      docs: A locked field cannot be updated or deleted.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: long
          docs: The ID of the field to lock.
      display-name: Lock a schema field.
      response:
        docs: Schema field shown.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    lockNestedField:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/lock
      method: PUT
      auth: true
      docs: A locked field cannot be edited or deleted.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
        id:
          type: long
          docs: The ID of the field to lock.
      display-name: Lock a nested field.
      response:
        docs: Schema field hidden.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    hideField:
      path: /api/apps/{app}/schemas/{schema}/fields/{id}/hide
      method: PUT
      auth: true
      docs: >-
        A hidden field is not part of the API response, but can still be edited
        in the portal.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: long
          docs: The ID of the field to hide.
      display-name: Hide a schema field.
      response:
        docs: Schema field hidden.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    hideNestedField:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/hide
      method: PUT
      auth: true
      docs: >-
        A hidden field is not part of the API response, but can still be edited
        in the portal.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
        id:
          type: long
          docs: The ID of the field to hide.
      display-name: Hide a nested field.
      response:
        docs: Schema field hidden.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    showField:
      path: /api/apps/{app}/schemas/{schema}/fields/{id}/show
      method: PUT
      auth: true
      docs: >-
        A hidden field is not part of the API response, but can still be edited
        in the portal.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: long
          docs: The ID of the field to show.
      display-name: Show a schema field.
      response:
        docs: Schema field shown.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    showNestedField:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/show
      method: PUT
      auth: true
      docs: >-
        A hidden field is not part of the API response, but can still be edited
        in the portal.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
        id:
          type: long
          docs: The ID of the field to show.
      display-name: Show a nested field.
      response:
        docs: Schema field shown.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    enableField:
      path: /api/apps/{app}/schemas/{schema}/fields/{id}/enable
      method: PUT
      auth: true
      docs: >-
        A disabled field cannot not be edited in the squidex portal anymore, but
        will be part of the API response.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: long
          docs: The ID of the field to enable.
      display-name: Enable a schema field.
      response:
        docs: Schema field enabled.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    enableNestedField:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/enable
      method: PUT
      auth: true
      docs: >-
        A disabled field cannot not be edited in the squidex portal anymore, but
        will be part of the API response.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
        id:
          type: long
          docs: The ID of the field to enable.
      display-name: Enable a nested field.
      response:
        docs: Schema field enabled.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    disableField:
      path: /api/apps/{app}/schemas/{schema}/fields/{id}/disable
      method: PUT
      auth: true
      docs: >-
        A disabled field cannot not be edited in the squidex portal anymore, but
        will be part of the API response.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        id:
          type: long
          docs: The ID of the field to disable.
      display-name: Disable a schema field.
      response:
        docs: Schema field disabled.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    disableNestedField:
      path: /api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/disable
      method: PUT
      auth: true
      docs: >-
        A disabled field cannot not be edited in the squidex portal anymore, but
        will be part of the API response.
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
        parentId:
          type: long
          docs: The parent field id.
        id:
          type: long
          docs: The ID of the field to disable.
      display-name: Disable a nested field.
      response:
        docs: Schema field disabled.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
            parentId: 1000000
            id: 1000000
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    getSchemas:
      path: /api/apps/{app}/schemas
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get schemas.
      response:
        docs: Schemas returned.
        type: root.SchemasDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  createdBy: createdBy
                  lastModifiedBy: lastModifiedBy
                  name: name
                  type: Default
                  category: category
                  properties:
                    validateOnPublish: true
                  isSingleton: true
                  isPublished: true
                  created: '2024-01-15T09:30:00Z'
                  lastModified: '2024-01-15T09:30:00Z'
                  version: 1000000
                  scripts: {}
                  previewUrls:
                    key: value
                  fieldsInLists:
                    - fieldsInLists
                  fieldsInReferences:
                    - fieldsInReferences
                  fieldRules:
                    - action: Disable
                      field: field
                  fields:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      partitioning: partitioning
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    postSchema:
      path: /api/apps/{app}/schemas
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Create a new schema.
      request:
        name: CreateSchemaDto
        body:
          properties:
            name:
              type: string
              docs: The name of the schema.
              validation:
                pattern: ^[a-z0-9]+(\-[a-z0-9]+)*$
                minLength: 1
            type:
              type: root.SchemaType
              docs: The type of the schema.
            isSingleton:
              type: boolean
              docs: Set to true to allow a single content item only.
              availability: deprecated
          extends:
            - root.UpsertSchemaDto
        content-type: application/json
      response:
        docs: Schema created.
        type: root.SchemaDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.ConflictError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            isPublished: true
            name: name
            type: Default
            isSingleton: true
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    getSchema:
      path: /api/apps/{app}/schemas/{schema}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema to retrieve.
      display-name: Get a schema by name.
      response:
        docs: Schema found.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putSchema:
      path: /api/apps/{app}/schemas/{schema}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Update a schema.
      request:
        name: UpdateSchemaDto
        body:
          properties:
            label:
              type: optional<string>
              docs: Optional label for the editor.
              validation:
                minLength: 0
                maxLength: 100
            hints:
              type: optional<string>
              docs: Hints to describe the schema.
              validation:
                minLength: 0
                maxLength: 1000
            contentsSidebarUrl:
              type: optional<string>
              docs: The url to a the sidebar plugin for content lists.
            contentSidebarUrl:
              type: optional<string>
              docs: The url to a the sidebar plugin for content items.
            contentEditorUrl:
              type: optional<string>
              docs: The url to the editor plugin.
            validateOnPublish:
              type: boolean
              docs: True to validate the content items on publish.
            tags:
              type: optional<list<string>>
              docs: Tags for automation processes.
        content-type: application/json
      response:
        docs: Schema updated.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request:
            validateOnPublish: true
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    deleteSchema:
      path: /api/apps/{app}/schemas/{schema}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema to delete.
      display-name: Delete a schema.
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
    putSchemaSync:
      path: /api/apps/{app}/schemas/{schema}/sync
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Synchronize a schema.
      request:
        name: SynchronizeSchemaDto
        body:
          properties:
            noFieldDeletion:
              type: boolean
              docs: True, when fields should not be deleted.
            noFieldRecreation:
              type: boolean
              docs: True, when fields with different types should not be recreated.
          extends:
            - root.UpsertSchemaDto
        content-type: application/json
      response:
        docs: Schema updated.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request:
            isPublished: true
            noFieldDeletion: true
            noFieldRecreation: true
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putCategory:
      path: /api/apps/{app}/schemas/{schema}/category
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Update a schema category.
      request:
        name: ChangeCategoryDto
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the category.
        content-type: application/json
      response:
        docs: Schema updated.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putPreviewUrls:
      path: /api/apps/{app}/schemas/{schema}/preview-urls
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Update the preview urls.
      request:
        body: root.ConfigurePreviewUrlsDto
        content-type: application/json
      response:
        docs: Schema updated.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request:
            key: value
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putScripts:
      path: /api/apps/{app}/schemas/{schema}/scripts
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Update the scripts.
      request:
        body: root.SchemaScriptsDto
        content-type: application/json
      response:
        docs: Schema updated.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    putRules:
      path: /api/apps/{app}/schemas/{schema}/rules
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema.
      display-name: Update the rules.
      request:
        name: ConfigureFieldRulesDto
        body:
          properties:
            fieldRules:
              type: optional<list<root.FieldRuleDto>>
              docs: The field rules to configure.
        content-type: application/json
      response:
        docs: Schema updated.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          request: {}
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    publishSchema:
      path: /api/apps/{app}/schemas/{schema}/publish
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema to publish.
      display-name: Publish a schema.
      response:
        docs: Schema published.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
    unpublishSchema:
      path: /api/apps/{app}/schemas/{schema}/unpublish
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        schema:
          type: string
          docs: The name of the schema to unpublish.
      display-name: Unpublish a schema.
      response:
        docs: Schema unpublished.
        type: root.SchemaDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            schema: schema
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              createdBy: createdBy
              lastModifiedBy: lastModifiedBy
              name: name
              type: Default
              category: category
              properties:
                label: label
                hints: hints
                contentsSidebarUrl: contentsSidebarUrl
                contentSidebarUrl: contentSidebarUrl
                contentEditorUrl: contentEditorUrl
                validateOnPublish: true
                tags:
                  - tags
              isSingleton: true
              isPublished: true
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              version: 1000000
              scripts:
                query: query
                queryPre: queryPre
                create: create
                update: update
                delete: delete
                change: change
              previewUrls:
                key: value
              fieldsInLists:
                - fieldsInLists
              fieldsInReferences:
                - fieldsInReferences
              fieldRules:
                - action: Disable
                  field: field
                  condition: condition
              fields:
                - _links:
                    key:
                      href: href
                      method: method
                  fieldId: 1000000
                  name: name
                  isHidden: true
                  isLocked: true
                  isDisabled: true
                  partitioning: partitioning
                  properties:
                    fieldType: UI
                    editor: Separator
                    isRequired: true
                    isRequiredOnPublish: true
                    isHalfWidth: true
                  nested:
                    - _links:
                        key:
                          href: href
                          method: method
                      fieldId: 1000000
                      name: name
                      isHidden: true
                      isLocked: true
                      isDisabled: true
                      properties:
                        fieldType: UI
                        editor: Separator
                        isRequired: true
                        isRequiredOnPublish: true
                        isHalfWidth: true
  source:
    openapi: ../openapi.json
",
    },
    "search.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getSearchResults": {
              "auth": true,
              "display-name": "Get search results.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "label": "label",
                        "name": "name",
                        "type": "Asset",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/search",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "name": "SearchGetSearchResultsRequest",
                "query-parameters": {
                  "query": {
                    "docs": "The search query.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Search results returned.",
                "status-code": 200,
                "type": "list<root.SearchResultDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getSearchResults:
      path: /api/apps/{app}/search
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get search results.
      request:
        name: SearchGetSearchResultsRequest
        query-parameters:
          query:
            type: optional<string>
            docs: The search query.
      response:
        docs: Search results returned.
        type: list<root.SearchResultDto>
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              - _links:
                  key:
                    href: href
                    method: method
                name: name
                type: Asset
                label: label
  source:
    openapi: ../openapi.json
",
    },
    "statistics.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getCurrentStorageSize": {
              "auth": true,
              "display-name": "Get total asset size.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "maxAllowed": 1000000,
                      "size": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/usages/storage/today",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Storage usage returned.",
                "status-code": 200,
                "type": "root.CurrentStorageDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getLog": {
              "auth": true,
              "display-name": "Get api calls as log file.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "response": {
                    "body": {
                      "downloadUrl": "downloadUrl",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/usages/log",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "response": {
                "docs": "Usage tracking results returned.",
                "status-code": 200,
                "type": "root.LogDownloadDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getStorageSizes": {
              "auth": true,
              "display-name": "Get asset usage by date.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "fromDate": "fromDate",
                    "toDate": "toDate",
                  },
                  "response": {
                    "body": [
                      {
                        "date": "date",
                        "totalCount": 1000000,
                        "totalSize": 1000000,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/usages/storage/{fromDate}/{toDate}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "fromDate": {
                  "docs": "The from date.",
                  "type": "string",
                },
                "toDate": {
                  "docs": "The to date.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Storage usage returned.",
                "status-code": 200,
                "type": "list<root.StorageUsagePerDateDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getStorageSizesForTeam": {
              "auth": true,
              "display-name": "Get asset usage by date for team.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "fromDate": "fromDate",
                    "team": "team",
                    "toDate": "toDate",
                  },
                  "response": {
                    "body": [
                      {
                        "date": "date",
                        "totalCount": 1000000,
                        "totalSize": 1000000,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams/{team}/usages/storage/{fromDate}/{toDate}",
              "path-parameters": {
                "fromDate": {
                  "docs": "The from date.",
                  "type": "string",
                },
                "team": {
                  "docs": "The ID of the team.",
                  "type": "string",
                },
                "toDate": {
                  "docs": "The to date.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Storage usage returned.",
                "status-code": 200,
                "type": "list<root.StorageUsagePerDateDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getTeamCurrentStorageSizeForTeam": {
              "auth": true,
              "display-name": "Get total asset size by team.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "response": {
                    "body": {
                      "maxAllowed": 1000000,
                      "size": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams/{team}/usages/storage/today",
              "path-parameters": {
                "team": {
                  "docs": "The ID of the team.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Storage usage returned.",
                "status-code": 200,
                "type": "root.CurrentStorageDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getUsages": {
              "auth": true,
              "display-name": "Get api calls in date range.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                    "fromDate": "fromDate",
                    "toDate": "toDate",
                  },
                  "response": {
                    "body": {
                      "allowedBytes": 1000000,
                      "allowedCalls": 1000000,
                      "averageElapsedMs": 1.1,
                      "blockingApiCalls": 1000000,
                      "details": {
                        "key": [
                          {
                            "averageElapsedMs": 1.1,
                            "date": "date",
                            "totalBytes": 1000000,
                            "totalCalls": 1000000,
                          },
                        ],
                      },
                      "monthBytes": 1000000,
                      "monthCalls": 1000000,
                      "totalBytes": 1000000,
                      "totalCalls": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/apps/{app}/usages/calls/{fromDate}/{toDate}",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
                "fromDate": {
                  "docs": "The from date.",
                  "type": "string",
                },
                "toDate": {
                  "docs": "The to date.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "API call returned.",
                "status-code": 200,
                "type": "root.CallsUsageDtoDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getUsagesForTeam": {
              "auth": true,
              "display-name": "Get api calls in date range for team.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "fromDate": "fromDate",
                    "team": "team",
                    "toDate": "toDate",
                  },
                  "response": {
                    "body": {
                      "allowedBytes": 1000000,
                      "allowedCalls": 1000000,
                      "averageElapsedMs": 1.1,
                      "blockingApiCalls": 1000000,
                      "details": {
                        "key": [
                          {
                            "averageElapsedMs": 1.1,
                            "date": "date",
                            "totalBytes": 1000000,
                            "totalCalls": 1000000,
                          },
                        ],
                      },
                      "monthBytes": 1000000,
                      "monthCalls": 1000000,
                      "totalBytes": 1000000,
                      "totalCalls": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams/{team}/usages/calls/{fromDate}/{toDate}",
              "path-parameters": {
                "fromDate": {
                  "docs": "The from date.",
                  "type": "string",
                },
                "team": {
                  "docs": "The name of the team.",
                  "type": "string",
                },
                "toDate": {
                  "docs": "The to date.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "API call returned.",
                "status-code": 200,
                "type": "root.CallsUsageDtoDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getLog:
      path: /api/apps/{app}/usages/log
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get api calls as log file.
      response:
        docs: Usage tracking results returned.
        type: root.LogDownloadDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              downloadUrl: downloadUrl
    getUsages:
      path: /api/apps/{app}/usages/calls/{fromDate}/{toDate}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        fromDate:
          type: string
          docs: The from date.
        toDate:
          type: string
          docs: The to date.
      display-name: Get api calls in date range.
      response:
        docs: API call returned.
        type: root.CallsUsageDtoDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            fromDate: fromDate
            toDate: toDate
          response:
            body:
              totalCalls: 1000000
              totalBytes: 1000000
              monthCalls: 1000000
              monthBytes: 1000000
              blockingApiCalls: 1000000
              allowedBytes: 1000000
              allowedCalls: 1000000
              averageElapsedMs: 1.1
              details:
                key:
                  - date: date
                    totalCalls: 1000000
                    totalBytes: 1000000
                    averageElapsedMs: 1.1
    getUsagesForTeam:
      path: /api/teams/{team}/usages/calls/{fromDate}/{toDate}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The name of the team.
        fromDate:
          type: string
          docs: The from date.
        toDate:
          type: string
          docs: The to date.
      display-name: Get api calls in date range for team.
      response:
        docs: API call returned.
        type: root.CallsUsageDtoDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
            fromDate: fromDate
            toDate: toDate
          response:
            body:
              totalCalls: 1000000
              totalBytes: 1000000
              monthCalls: 1000000
              monthBytes: 1000000
              blockingApiCalls: 1000000
              allowedBytes: 1000000
              allowedCalls: 1000000
              averageElapsedMs: 1.1
              details:
                key:
                  - date: date
                    totalCalls: 1000000
                    totalBytes: 1000000
                    averageElapsedMs: 1.1
    getCurrentStorageSize:
      path: /api/apps/{app}/usages/storage/today
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Get total asset size.
      response:
        docs: Storage usage returned.
        type: root.CurrentStorageDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          response:
            body:
              size: 1000000
              maxAllowed: 1000000
    getTeamCurrentStorageSizeForTeam:
      path: /api/teams/{team}/usages/storage/today
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The ID of the team.
      display-name: Get total asset size by team.
      response:
        docs: Storage usage returned.
        type: root.CurrentStorageDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          response:
            body:
              size: 1000000
              maxAllowed: 1000000
    getStorageSizes:
      path: /api/apps/{app}/usages/storage/{fromDate}/{toDate}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
        fromDate:
          type: string
          docs: The from date.
        toDate:
          type: string
          docs: The to date.
      display-name: Get asset usage by date.
      response:
        docs: Storage usage returned.
        type: list<root.StorageUsagePerDateDto>
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
            fromDate: fromDate
            toDate: toDate
          response:
            body:
              - date: date
                totalCount: 1000000
                totalSize: 1000000
    getStorageSizesForTeam:
      path: /api/teams/{team}/usages/storage/{fromDate}/{toDate}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The ID of the team.
        fromDate:
          type: string
          docs: The from date.
        toDate:
          type: string
          docs: The to date.
      display-name: Get asset usage by date for team.
      response:
        docs: Storage usage returned.
        type: list<root.StorageUsagePerDateDto>
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
            fromDate: fromDate
            toDate: toDate
          response:
            body:
              - date: date
                totalCount: 1000000
                totalSize: 1000000
  source:
    openapi: ../openapi.json
",
    },
    "teams.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteContributor": {
              "auth": true,
              "display-name": "Remove contributor.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                    "team": "team",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isInvited": "isInvited",
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "contributorEmail": "contributorEmail",
                          "contributorId": "contributorId",
                          "contributorName": "contributorName",
                          "role": "role",
                        },
                      ],
                      "maxContributors": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/teams/{team}/contributors/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the contributor.",
                  "type": "string",
                },
                "team": {
                  "docs": "The ID of the team.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Contributor removed.",
                "status-code": 200,
                "type": "root.ContributorsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "deleteMyself": {
              "auth": true,
              "display-name": "Remove yourself.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isInvited": "isInvited",
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "contributorEmail": "contributorEmail",
                          "contributorId": "contributorId",
                          "contributorName": "contributorName",
                          "role": "role",
                        },
                      ],
                      "maxContributors": 1000000,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/teams/{team}/contributors/me",
              "path-parameters": {
                "team": {
                  "docs": "The ID of the team.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Contributor removed.",
                "status-code": 200,
                "type": "root.ContributorsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getContributors": {
              "auth": true,
              "display-name": "Get team contributors.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isInvited": "isInvited",
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "contributorEmail": "contributorEmail",
                          "contributorId": "contributorId",
                          "contributorName": "contributorName",
                          "role": "role",
                        },
                      ],
                      "maxContributors": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams/{team}/contributors",
              "path-parameters": {
                "team": {
                  "docs": "The ID of the team.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Contributors returned.",
                "status-code": 200,
                "type": "root.ContributorsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getTeam": {
              "auth": true,
              "display-name": "Get an team by name.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "roleName": "roleName",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams/{team}",
              "path-parameters": {
                "team": {
                  "docs": "The name of the team.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Teams returned.",
                "status-code": 200,
                "type": "root.TeamDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getTeams": {
              "auth": true,
              "display-name": "Get your teams.",
              "docs": "You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow).
You will retrieve all teams, where you are assigned as a contributor.",
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "created": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "lastModified": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "roleName": "roleName",
                        "version": 1000000,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/teams",
              "response": {
                "docs": "Teams returned.",
                "status-code": 200,
                "type": "list<root.TeamDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postContributor": {
              "auth": true,
              "display-name": "Assign contributor to team.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "request": {
                    "contributorId": "contributorId",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "_meta": {
                        "isInvited": "isInvited",
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "contributorEmail": "contributorEmail",
                          "contributorId": "contributorId",
                          "contributorName": "contributorName",
                          "role": "role",
                        },
                      ],
                      "maxContributors": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/teams/{team}/contributors",
              "path-parameters": {
                "team": {
                  "docs": "The ID of the team.",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.AssignContributorDto",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Contributor assigned to team.",
                "status-code": 201,
                "type": "root.ContributorsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postTeam": {
              "auth": true,
              "display-name": "Create a new team.",
              "docs": "You can only create an team when you are authenticated as a user (OpenID implicit flow).
You will be assigned as owner of the new team automatically.",
              "errors": [
                "root.BadRequestError",
                "root.ConflictError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "roleName": "roleName",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/teams",
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "The name of the team.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateTeamDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Team created.",
                "status-code": 201,
                "type": "root.TeamDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putTeam": {
              "auth": true,
              "display-name": "Update the team.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "team": "team",
                  },
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "lastModified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "roleName": "roleName",
                      "version": 1000000,
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/teams/{team}",
              "path-parameters": {
                "team": {
                  "docs": "The name of the team to update.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "The name of the team.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateTeamDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Team updated.",
                "status-code": 200,
                "type": "root.TeamDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getContributors:
      path: /api/teams/{team}/contributors
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The ID of the team.
      display-name: Get team contributors.
      response:
        docs: Contributors returned.
        type: root.ContributorsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  contributorId: contributorId
                  contributorName: contributorName
                  contributorEmail: contributorEmail
                  role: role
              maxContributors: 1000000
              _meta:
                isInvited: isInvited
    postContributor:
      path: /api/teams/{team}/contributors
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The ID of the team.
      display-name: Assign contributor to team.
      request:
        body: root.AssignContributorDto
        content-type: application/json
      response:
        docs: Contributor assigned to team.
        type: root.ContributorsDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          request:
            contributorId: contributorId
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  contributorId: contributorId
                  contributorName: contributorName
                  contributorEmail: contributorEmail
                  role: role
              maxContributors: 1000000
              _meta:
                isInvited: isInvited
    deleteMyself:
      path: /api/teams/{team}/contributors/me
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The ID of the team.
      display-name: Remove yourself.
      response:
        docs: Contributor removed.
        type: root.ContributorsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  contributorId: contributorId
                  contributorName: contributorName
                  contributorEmail: contributorEmail
                  role: role
              maxContributors: 1000000
              _meta:
                isInvited: isInvited
    deleteContributor:
      path: /api/teams/{team}/contributors/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The ID of the team.
        id:
          type: string
          docs: The ID of the contributor.
      display-name: Remove contributor.
      response:
        docs: Contributor removed.
        type: root.ContributorsDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  contributorId: contributorId
                  contributorName: contributorName
                  contributorEmail: contributorEmail
                  role: role
              maxContributors: 1000000
              _meta:
                isInvited: isInvited
    getTeams:
      path: /api/teams
      method: GET
      auth: true
      docs: >-
        You can only retrieve the list of teams when you are authenticated as a
        user (OpenID implicit flow).

        You will retrieve all teams, where you are assigned as a contributor.
      source:
        openapi: ../openapi.json
      display-name: Get your teams.
      response:
        docs: Teams returned.
        type: list<root.TeamDto>
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              - _links:
                  key:
                    href: href
                    method: method
                id: id
                name: name
                version: 1000000
                created: '2024-01-15T09:30:00Z'
                lastModified: '2024-01-15T09:30:00Z'
                roleName: roleName
    postTeam:
      path: /api/teams
      method: POST
      auth: true
      docs: >-
        You can only create an team when you are authenticated as a user (OpenID
        implicit flow).

        You will be assigned as owner of the new team automatically.
      source:
        openapi: ../openapi.json
      display-name: Create a new team.
      request:
        name: CreateTeamDto
        body:
          properties:
            name:
              type: string
              docs: The name of the team.
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: Team created.
        type: root.TeamDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.ConflictError
        - root.InternalServerError
      examples:
        - request:
            name: name
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              roleName: roleName
    getTeam:
      path: /api/teams/{team}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The name of the team.
      display-name: Get an team by name.
      response:
        docs: Teams returned.
        type: root.TeamDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              roleName: roleName
    putTeam:
      path: /api/teams/{team}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        team:
          type: string
          docs: The name of the team to update.
      display-name: Update the team.
      request:
        name: UpdateTeamDto
        body:
          properties:
            name:
              type: string
              docs: The name of the team.
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: Team updated.
        type: root.TeamDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            team: team
          request:
            name: name
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              name: name
              version: 1000000
              created: '2024-01-15T09:30:00Z'
              lastModified: '2024-01-15T09:30:00Z'
              roleName: roleName
  source:
    openapi: ../openapi.json
",
    },
    "templates.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getTemplate": {
              "auth": true,
              "display-name": "Get template details.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "details": "details",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/templates/{name}",
              "path-parameters": {
                "name": {
                  "docs": "The name of the template.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Template returned.",
                "status-code": 200,
                "type": "root.TemplateDetailsDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getTemplates": {
              "auth": true,
              "display-name": "Get all templates.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "description": "description",
                          "isStarter": true,
                          "name": "name",
                          "title": "title",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/templates",
              "response": {
                "docs": "Templates returned.",
                "status-code": 200,
                "type": "root.TemplatesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getTemplates:
      path: /api/templates
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Get all templates.
      response:
        docs: Templates returned.
        type: root.TemplatesDto
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  name: name
                  title: title
                  description: description
                  isStarter: true
    getTemplate:
      path: /api/templates/{name}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        name:
          type: string
          docs: The name of the template.
      display-name: Get template details.
      response:
        docs: Template returned.
        type: root.TemplateDetailsDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            name: name
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              details: details
  source:
    openapi: ../openapi.json
",
    },
    "translations.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "postTranslation": {
              "auth": true,
              "display-name": "Translate a text.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "app": "app",
                  },
                  "request": {
                    "targetLanguage": "targetLanguage",
                    "text": "text",
                  },
                  "response": {
                    "body": {
                      "result": "Translated",
                      "text": "text",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/apps/{app}/translations",
              "path-parameters": {
                "app": {
                  "docs": "The name of the app.",
                  "variable": "$appName",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "sourceLanguage": {
                      "docs": "The optional source language.",
                      "type": "optional<string>",
                    },
                    "targetLanguage": {
                      "docs": "The target language.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "text": {
                      "docs": "The text to translate.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TranslateDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Text translated.",
                "status-code": 200,
                "type": "root.TranslationDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    postTranslation:
      path: /api/apps/{app}/translations
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        app:
          variable: $appName
          docs: The name of the app.
      display-name: Translate a text.
      request:
        name: TranslateDto
        body:
          properties:
            text:
              type: string
              docs: The text to translate.
              validation:
                minLength: 1
            targetLanguage:
              type: string
              docs: The target language.
              validation:
                minLength: 1
            sourceLanguage:
              type: optional<string>
              docs: The optional source language.
        content-type: application/json
      response:
        docs: Text translated.
        type: root.TranslationDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.InternalServerError
      examples:
        - path-parameters:
            app: app
          request:
            text: text
            targetLanguage: targetLanguage
          response:
            body:
              result: Translated
              text: text
  source:
    openapi: ../openapi.json
",
    },
    "userManagement.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteUser": {
              "auth": true,
              "display-name": "Delete a User.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/api/user-management/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the user to delete.",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getUser": {
              "auth": true,
              "display-name": "Get a user by ID.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "displayName": "displayName",
                      "email": "email",
                      "id": "id",
                      "isLocked": true,
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/user-management/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the user.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "User returned.",
                "status-code": 200,
                "type": "root.UserDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getUsers": {
              "auth": true,
              "display-name": "Get users by query.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "items": [
                        {
                          "_links": {
                            "key": {
                              "href": "href",
                              "method": "method",
                            },
                          },
                          "displayName": "displayName",
                          "email": "email",
                          "id": "id",
                          "isLocked": true,
                          "permissions": [
                            "permissions",
                          ],
                        },
                      ],
                      "total": 1000000,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/user-management",
              "request": {
                "name": "UserManagementGetUsersRequest",
                "query-parameters": {
                  "query": {
                    "docs": "Optional query to search by email address or username.",
                    "type": "optional<string>",
                  },
                  "skip": {
                    "default": 0,
                    "docs": "The number of users to skip.",
                    "type": "optional<integer>",
                  },
                  "take": {
                    "default": 10,
                    "docs": "The number of users to return.",
                    "type": "optional<integer>",
                  },
                },
              },
              "response": {
                "docs": "Users returned.",
                "status-code": 200,
                "type": "root.UsersDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "lockUser": {
              "auth": true,
              "display-name": "Lock a user.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "displayName": "displayName",
                      "email": "email",
                      "id": "id",
                      "isLocked": true,
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/user-management/{id}/lock",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the user to lock.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "User locked.",
                "status-code": 200,
                "type": "root.UserDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "postUser": {
              "auth": true,
              "display-name": "Create a new user.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "displayName": "displayName",
                    "email": "email",
                    "password": "password",
                    "permissions": [
                      "permissions",
                    ],
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "displayName": "displayName",
                      "email": "email",
                      "id": "id",
                      "isLocked": true,
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/api/user-management",
              "request": {
                "body": {
                  "properties": {
                    "displayName": {
                      "docs": "The display name (usually first name and last name) of the user.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "email": {
                      "docs": "The email of the user. Unique value.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "password": {
                      "docs": "The password of the user.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "permissions": {
                      "docs": "Additional permissions for the user.",
                      "type": "list<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateUserDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "User created.",
                "status-code": 201,
                "type": "root.UserDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "putUser": {
              "auth": true,
              "display-name": "Update a user.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {
                    "displayName": "displayName",
                    "email": "email",
                    "permissions": [
                      "permissions",
                    ],
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "displayName": "displayName",
                      "email": "email",
                      "id": "id",
                      "isLocked": true,
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/user-management/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the user.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "displayName": {
                      "docs": "The display name (usually first name and last name) of the user.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "email": {
                      "docs": "The email of the user. Unique value.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "password": {
                      "docs": "The password of the user.",
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "Additional permissions for the user.",
                      "type": "list<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UpdateUserDto",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "User created.",
                "status-code": 200,
                "type": "root.UserDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unlockUser": {
              "auth": true,
              "display-name": "Unlock a user.",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "displayName": "displayName",
                      "email": "email",
                      "id": "id",
                      "isLocked": true,
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/api/user-management/{id}/unlock",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the user to unlock.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "User unlocked.",
                "status-code": 200,
                "type": "root.UserDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getUsers:
      path: /api/user-management
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Get users by query.
      request:
        name: UserManagementGetUsersRequest
        query-parameters:
          query:
            type: optional<string>
            docs: Optional query to search by email address or username.
          skip:
            type: optional<integer>
            default: 0
            docs: The number of users to skip.
          take:
            type: optional<integer>
            default: 10
            docs: The number of users to return.
      response:
        docs: Users returned.
        type: root.UsersDto
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              total: 1000000
              items:
                - _links:
                    key:
                      href: href
                      method: method
                  id: id
                  email: email
                  displayName: displayName
                  isLocked: true
                  permissions:
                    - permissions
    postUser:
      path: /api/user-management
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Create a new user.
      request:
        name: CreateUserDto
        body:
          properties:
            email:
              type: string
              docs: The email of the user. Unique value.
              validation:
                minLength: 1
            displayName:
              type: string
              docs: The display name (usually first name and last name) of the user.
              validation:
                minLength: 1
            password:
              type: string
              docs: The password of the user.
              validation:
                minLength: 1
            permissions:
              docs: Additional permissions for the user.
              type: list<string>
        content-type: application/json
      response:
        docs: User created.
        type: root.UserDto
        status-code: 201
      errors:
        - root.BadRequestError
        - root.InternalServerError
      examples:
        - request:
            email: email
            displayName: displayName
            password: password
            permissions:
              - permissions
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              email: email
              displayName: displayName
              isLocked: true
              permissions:
                - permissions
    getUser:
      path: /api/user-management/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the user.
      display-name: Get a user by ID.
      response:
        docs: User returned.
        type: root.UserDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              email: email
              displayName: displayName
              isLocked: true
              permissions:
                - permissions
    putUser:
      path: /api/user-management/{id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the user.
      display-name: Update a user.
      request:
        name: UpdateUserDto
        body:
          properties:
            email:
              type: string
              docs: The email of the user. Unique value.
              validation:
                minLength: 1
            displayName:
              type: string
              docs: The display name (usually first name and last name) of the user.
              validation:
                minLength: 1
            password:
              type: optional<string>
              docs: The password of the user.
            permissions:
              docs: Additional permissions for the user.
              type: list<string>
        content-type: application/json
      response:
        docs: User created.
        type: root.UserDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            id: id
          request:
            email: email
            displayName: displayName
            permissions:
              - permissions
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              email: email
              displayName: displayName
              isLocked: true
              permissions:
                - permissions
    deleteUser:
      path: /api/user-management/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the user to delete.
      display-name: Delete a User.
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            id: id
    lockUser:
      path: /api/user-management/{id}/lock
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the user to lock.
      display-name: Lock a user.
      response:
        docs: User locked.
        type: root.UserDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              email: email
              displayName: displayName
              isLocked: true
              permissions:
                - permissions
    unlockUser:
      path: /api/user-management/{id}/unlock
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the user to unlock.
      display-name: Unlock a user.
      response:
        docs: User unlocked.
        type: root.UserDto
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              email: email
              displayName: displayName
              isLocked: true
              permissions:
                - permissions
  source:
    openapi: ../openapi.json
",
    },
    "users.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getUser": {
              "auth": true,
              "display-name": "Get user by id.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                      "displayName": "displayName",
                      "email": "email",
                      "id": "id",
                      "isLocked": true,
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/users/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the user (GUID).",
                  "type": "string",
                },
              },
              "response": {
                "docs": "User found.",
                "status-code": 200,
                "type": "root.UserDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getUserPicture": {
              "auth": true,
              "display-name": "Get user picture by id.",
              "docs": undefined,
              "errors": [
                "root.NotFoundError",
                "root.InternalServerError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/users/{id}/picture",
              "path-parameters": {
                "id": {
                  "docs": "The ID of the user (GUID).",
                  "type": "string",
                },
              },
              "response": {
                "docs": "User found and image or fallback returned.",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getUserResources": {
              "auth": true,
              "display-name": "Get the user resources.",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "_links": {
                        "key": {
                          "href": "href",
                          "metadata": "metadata",
                          "method": "method",
                        },
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api",
              "response": {
                "docs": "User resources returned.",
                "status-code": 200,
                "type": "root.ResourcesDto",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "getUsers": {
              "auth": true,
              "display-name": "Get users by query.",
              "docs": "Search the user by query that contains the email address or the part of the email address.",
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "_links": {
                          "key": {
                            "href": "href",
                            "method": "method",
                          },
                        },
                        "displayName": "displayName",
                        "email": "email",
                        "id": "id",
                        "isLocked": true,
                        "permissions": [
                          "permissions",
                        ],
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/api/users",
              "request": {
                "name": "UsersGetUsersRequest",
                "query-parameters": {
                  "query": {
                    "docs": "The query to search the user by email address. Case invariant.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Users returned.",
                "status-code": 200,
                "type": "list<root.UserDto>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getUserResources:
      path: /api
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      display-name: Get the user resources.
      response:
        docs: User resources returned.
        type: root.ResourcesDto
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
    getUsers:
      path: /api/users
      method: GET
      auth: true
      docs: >-
        Search the user by query that contains the email address or the part of
        the email address.
      source:
        openapi: ../openapi.json
      display-name: Get users by query.
      request:
        name: UsersGetUsersRequest
        query-parameters:
          query:
            type: optional<string>
            docs: The query to search the user by email address. Case invariant.
      response:
        docs: Users returned.
        type: list<root.UserDto>
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - response:
            body:
              - _links:
                  key:
                    href: href
                    method: method
                id: id
                email: email
                displayName: displayName
                isLocked: true
                permissions:
                  - permissions
    getUser:
      path: /api/users/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the user (GUID).
      display-name: Get user by id.
      response:
        docs: User found.
        type: root.UserDto
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              _links:
                key:
                  href: href
                  method: method
                  metadata: metadata
              id: id
              email: email
              displayName: displayName
              isLocked: true
              permissions:
                - permissions
    getUserPicture:
      path: /api/users/{id}/picture
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        id:
          type: string
          docs: The ID of the user (GUID).
      display-name: Get user picture by id.
      response:
        docs: User found and image or fallback returned.
        type: file
        status-code: 200
      errors:
        - root.NotFoundError
        - root.InternalServerError
  source:
    openapi: ../openapi.json
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BearerAuthScheme",
      "auth-schemes": {
        "BearerAuthScheme": {
          "scheme": "bearer",
        },
      },
      "default-environment": "Default",
      "display-name": "Squidex API",
      "environments": {
        "Default": "https://localhost:5001",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
      "variables": {
        "appName": {
          "docs": undefined,
          "type": "string",
        },
      },
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Squidex API
environments:
  Default: https://localhost:5001
default-environment: Default
auth-schemes:
  BearerAuthScheme:
    scheme: bearer
auth: BearerAuthScheme
variables:
  appName:
    type: string
",
  },
}