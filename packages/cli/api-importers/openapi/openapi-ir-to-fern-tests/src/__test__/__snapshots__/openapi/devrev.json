{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "BadRequestError": {
            "docs": "400 Bad Request.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 400,
            "type": "ErrorBadRequest",
          },
          "ForbiddenError": {
            "docs": "403 Forbidden.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 403,
            "type": "ErrorForbidden",
          },
          "InternalServerError": {
            "docs": "500 Internal Server Error.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 500,
            "type": "ErrorInternalServerError",
          },
          "NotFoundError": {
            "docs": "404 Not Found.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 404,
            "type": "ErrorNotFound",
          },
          "ServiceUnavailableError": {
            "docs": "503 Service Unavailable.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 503,
            "type": "ErrorServiceUnavailable",
          },
          "TooManyRequestsError": {
            "docs": "429 Too Many Requests.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 429,
            "type": "ErrorTooManyRequests",
          },
          "UnauthorizedError": {
            "docs": "401 Unauthorized.",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 401,
            "type": "ErrorUnauthorized",
          },
        },
        "types": {
          "ArtifactSummary": {
            "type": "AtomBaseSummary",
          },
          "ArtifactsLocateResponse": {
            "docs": "The response to getting an artifact's download URL.",
            "inline": undefined,
            "properties": {
              "expires_at": {
                "docs": "The expiration timestamp of the URL.",
                "type": "optional<datetime>",
              },
              "url": {
                "docs": "The artifact's download URL.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ArtifactsPrepareResponse": {
            "docs": "The response to preparing a URL to upload a file.",
            "inline": undefined,
            "properties": {
              "form_data": {
                "docs": "The POST policy form data.",
                "type": "list<ArtifactsPrepareResponseFormData>",
              },
              "id": {
                "docs": "The generated artifact's ID.",
                "type": "string",
              },
              "url": {
                "docs": "The URL that the file's data should be uploaded to.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ArtifactsPrepareResponseFormData": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "key": {
                "docs": "Key of the form field.",
                "type": "string",
              },
              "value": {
                "docs": "Value corresponding to the key.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AtomBase": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_by": {
                "type": "optional<UserSummary>",
              },
              "created_date": {
                "docs": "Timestamp when the object was created.",
                "type": "optional<datetime>",
              },
              "display_id": {
                "docs": "Human-readable object ID unique to the Dev organization.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Globally unique object ID.",
                "type": "string",
              },
              "modified_by": {
                "type": "optional<UserSummary>",
              },
              "modified_date": {
                "docs": "Timestamp when the object was last modified.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AtomBaseSummary": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "display_id": {
                "docs": "Human-readable object ID unique to the Dev organization.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Globally unique object ID.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthConnection": {
            "availability": undefined,
            "base-properties": {
              "display_name": {
                "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
                "type": "optional<string>",
              },
              "enabled": {
                "docs": "Whether the authentication connection is enabled or disabled. If
set to false, the authentication connection will not show up on the
login screen as a login option.
",
                "type": "optional<boolean>",
              },
              "id": {
                "docs": "ID of the authentication connection.",
                "type": "string",
              },
            },
            "discriminant": "type",
            "docs": "Connection object that specifies the configuration for an
authentication connection that is set up for a Dev organization.
",
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "google_apps": {
                "type": "AuthConnectionOptionsGoogleApps",
              },
              "oidc": {
                "type": "AuthConnectionOptionsOidc",
              },
              "samlp": {
                "type": "AuthConnectionOptionsSaml",
              },
              "social": {
                "type": "AuthConnectionOptionsSocial",
              },
              "waad": {
                "type": "AuthConnectionOptionsAzureAd",
              },
            },
          },
          "AuthConnectionOptionsAzureAd": {
            "docs": "Object encapsulating the configuration parameters for an Azure AD
authentication connection.
",
            "inline": undefined,
            "properties": {
              "client_id": {
                "docs": "Client ID for the Azure authentication connection.",
                "type": "optional<string>",
              },
              "client_secret": {
                "docs": "Client secret for the Azure authentication connection.",
                "type": "optional<string>",
              },
              "domain": {
                "docs": "Domain URL of the Azure authentication connection.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthConnectionOptionsGoogleApps": {
            "docs": "Object encapsulating the configuration parameters for a Google Apps
authentication connection.
",
            "inline": undefined,
            "properties": {
              "client_id": {
                "docs": "Client ID for the Google Apps authentication connection.",
                "type": "optional<string>",
              },
              "client_secret": {
                "docs": "Client secret for the Google Apps authentication connection.
",
                "type": "optional<string>",
              },
              "tenant_domain": {
                "docs": "Tenant domain URL of the Google Apps authentication connection.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthConnectionOptionsOidc": {
            "docs": "Object encapsulating the configuration parameters for an OIDC
authentication connection.
",
            "inline": undefined,
            "properties": {
              "client_id": {
                "docs": "Client ID for the OIDC authentication connection.",
                "type": "optional<string>",
              },
              "client_secret": {
                "docs": "Client secret for the OIDC authentication connection.",
                "type": "optional<string>",
              },
              "issuer": {
                "docs": "Issuer URL of the OIDC authentication connection.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthConnectionOptionsSaml": {
            "docs": "Object encapsulating the configuration parameters for a SAML
authentication connection.
",
            "inline": undefined,
            "properties": {
              "sign_in_endpoint": {
                "docs": "Sign In endpoint for the SAML authentication connection.",
                "type": "optional<string>",
              },
              "signing_cert": {
                "docs": "Signing certificate for the SAML authentication connection.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthConnectionOptionsSocial": {
            "type": "map<string, unknown>",
          },
          "AuthConnectionToggle": {
            "enum": [
              "disable",
              "enable",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthConnectionType": {
            "docs": "Defines the type for the authentication connection. The configuration
for each authentication connection will depend on the type value.
",
            "enum": [
              "google_apps",
              "oidc",
              "samlp",
              "social",
              "waad",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthToken": {
            "docs": undefined,
            "extends": [
              "AtomBase",
            ],
            "inline": undefined,
            "properties": {
              "client_id": {
                "docs": "An identifier that represents the application that requested the
token. Only applicable for application access tokens.
",
                "type": "optional<string>",
              },
              "expires_at": {
                "docs": "The time at which the token expires.",
                "type": "optional<datetime>",
              },
              "issued_at": {
                "docs": "The time at which the token was issued.",
                "type": "optional<datetime>",
              },
              "requested_token_type": "optional<AuthTokenRequestedTokenType>",
              "scopes": {
                "docs": "The scopes associated with the issued token.",
                "type": "optional<list<string>>",
              },
              "status": "optional<AuthTokenStatus>",
              "subject": {
                "docs": "The subject of the token.",
                "type": "optional<string>",
              },
              "token_hint": {
                "docs": "A hint that identifies the token.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokenGrantType": {
            "docs": "Specifies the process of obtaining a token.",
            "enum": [
              {
                "name": "UrnDevrevParamsOauthGrantTypeTokenIssue",
                "value": "urn:devrev:params:oauth:grant-type:token-issue",
              },
              {
                "name": "UrnIetfParamsOauthGrantTypeTokenExchange",
                "value": "urn:ietf:params:oauth:grant-type:token-exchange",
              },
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokenRequestedTokenType": {
            "docs": "The type of the requested token.",
            "enum": [
              {
                "name": "UrnDevrevParamsOauthTokenTypeAat",
                "value": "urn:devrev:params:oauth:token-type:aat",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeAatPublic",
                "value": "urn:devrev:params:oauth:token-type:aat:public",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeDev",
                "value": "urn:devrev:params:oauth:token-type:dev",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypePat",
                "value": "urn:devrev:params:oauth:token-type:pat",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeRev",
                "value": "urn:devrev:params:oauth:token-type:rev",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeSession",
                "value": "urn:devrev:params:oauth:token-type:session",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeSessionDev0",
                "value": "urn:devrev:params:oauth:token-type:session:dev0",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeSys",
                "value": "urn:devrev:params:oauth:token-type:sys",
              },
              {
                "name": "UrnIetfParamsOauthTokenTypeJwt",
                "value": "urn:ietf:params:oauth:token-type:jwt",
              },
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokenStatus": {
            "docs": "The status of the token.",
            "enum": [
              "active",
              "expired",
              "revoked",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokenSubjectTokenType": {
            "docs": "The type of the subject token.",
            "enum": [
              {
                "name": "UrnDevrevParamsOauthTokenTypeJwtAuth0",
                "value": "urn:devrev:params:oauth:token-type:jwt:auth0",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeJwtDev",
                "value": "urn:devrev:params:oauth:token-type:jwt:dev",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeRevinfo",
                "value": "urn:devrev:params:oauth:token-type:revinfo",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeSysu",
                "value": "urn:devrev:params:oauth:token-type:sysu",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeUserinfo",
                "value": "urn:devrev:params:oauth:token-type:userinfo",
              },
              {
                "name": "UrnDevrevParamsOauthTokenTypeUserinfoProfile",
                "value": "urn:devrev:params:oauth:token-type:userinfo:profile",
              },
              {
                "name": "UrnIetfParamsOauthTokenTypeJwt",
                "value": "urn:ietf:params:oauth:token-type:jwt",
              },
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokenTokenType": {
            "docs": "The type of the issued token. Bearer is the only supported token type.
",
            "type": "literal<"bearer">",
          },
          "AuthTokensCreateResponse": {
            "docs": "Response for the request to create a new token corresponding to the
requested token type.
",
            "inline": undefined,
            "properties": {
              "access_token": {
                "docs": "The issued JSON Web Token (JWT) corresponding to the requested
token type.
",
                "type": "string",
              },
              "client_id": {
                "docs": "An identifier that represents the application which is requesting
the token. Only present in a response corresponding to an
application access token (AAT).
",
                "type": "optional<string>",
              },
              "expires_in": {
                "docs": "The validity lifetime of the token specified in seconds since Unix
epoch.
",
                "type": "long",
              },
              "refresh_token": {
                "docs": "A token to refresh the issued token.",
                "type": "optional<string>",
              },
              "scope": {
                "docs": "The scopes associated with the issued token. A space-delimited list
of values in which the order of values does not matter.
",
                "type": "optional<string>",
              },
              "token_type": "AuthTokenTokenType",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokensGetResponse": {
            "docs": "The response to get the token metadata.",
            "inline": undefined,
            "properties": {
              "token": {
                "type": "AuthToken",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokensListResponse": {
            "docs": "The response to list the token metadata.",
            "inline": undefined,
            "properties": {
              "tokens": {
                "docs": "The list of token metadata.",
                "type": "list<AuthToken>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokensOrgTraits": {
            "docs": "Carries Rev org info.",
            "inline": undefined,
            "properties": {
              "display_name": {
                "docs": "The display name of the Rev org.",
                "type": "optional<string>",
              },
              "domain": {
                "docs": "The domain of the Rev org.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokensRevInfo": {
            "docs": "Carries info corresponding to the Rev user to be provisioned and/or
issue a Rev session token.
",
            "inline": undefined,
            "properties": {
              "org_ref": {
                "docs": "An identifier which uniquely identifies a Rev org.",
                "type": "optional<string>",
              },
              "org_traits": {
                "type": "optional<AuthTokensOrgTraits>",
              },
              "rev_user_id": {
                "docs": "The unique ID of the Rev user.",
                "type": "optional<string>",
              },
              "user_ref": {
                "docs": "An identifier which uniquely identifies a Rev user.",
                "type": "string",
              },
              "user_traits": {
                "type": "optional<AuthTokensUserTraits>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokensUpdateResponse": {
            "docs": "Response for the request to update the token metadata.",
            "inline": undefined,
            "properties": {
              "token": {
                "type": "AuthToken",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthTokensUserTraits": {
            "docs": "Carries Rev user info.",
            "inline": undefined,
            "properties": {
              "display_name": {
                "docs": "The display name of the Rev user.",
                "type": "optional<string>",
              },
              "email": {
                "docs": "The email address of the Rev user.",
                "type": "optional<string>",
              },
              "full_name": {
                "docs": "The full name of the Rev user.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Capability": {
            "type": "PartBase",
          },
          "CapabilitySummary": {
            "type": "PartBaseSummary",
          },
          "DevOrgAuthConnectionsCreateRequest": {
            "availability": undefined,
            "base-properties": {
              "display_name": {
                "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
                "type": "optional<string>",
              },
            },
            "discriminant": "type",
            "docs": "Request to create a new enterprise authentication connection.
",
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "google_apps": {
                "type": "AuthConnectionOptionsGoogleApps",
              },
              "oidc": {
                "type": "AuthConnectionOptionsOidc",
              },
              "samlp": {
                "type": "AuthConnectionOptionsSaml",
              },
              "waad": {
                "type": "AuthConnectionOptionsAzureAd",
              },
            },
          },
          "DevOrgAuthConnectionsCreateRequestType": {
            "docs": "Defines the type for the authentication connection. Different types of
authentication connections have different configuration parameters.
",
            "enum": [
              "google_apps",
              "oidc",
              "samlp",
              "waad",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DevOrgAuthConnectionsCreateResponse": {
            "docs": "Response for the request to create a new enterprise authentication
connection.
",
            "inline": undefined,
            "properties": {
              "auth_connection": {
                "type": "AuthConnection",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DevOrgAuthConnectionsGetResponse": {
            "docs": "Response object encapsulating the configuration details of an
authentication connection.
",
            "inline": undefined,
            "properties": {
              "auth_connection": {
                "type": "AuthConnection",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DevOrgAuthConnectionsListResponse": {
            "docs": "Response object for the request to list all the social and enterprise
authentication connections configured for a Dev organization.
",
            "inline": undefined,
            "properties": {
              "auth_connections": {
                "docs": "List of all the authentication connections currently configured for
a Dev organization.
",
                "type": "list<AuthConnection>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DevOrgAuthConnectionsUpdateRequest": {
            "availability": undefined,
            "base-properties": {
              "display_name": {
                "docs": "New display name of the authentication connection. This name will
be visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
                "type": "optional<string>",
              },
              "id": {
                "docs": "ID of the authentication connection which is to be updated.
",
                "type": "string",
              },
            },
            "discriminant": "type",
            "docs": "Request to update an enterprise authentication connection for a Dev
organization.
",
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "google_apps": {
                "type": "AuthConnectionOptionsGoogleApps",
              },
              "none": {
                "type": "empty",
              },
              "oidc": {
                "type": "AuthConnectionOptionsOidc",
              },
              "samlp": {
                "type": "AuthConnectionOptionsSaml",
              },
              "waad": {
                "type": "AuthConnectionOptionsAzureAd",
              },
            },
          },
          "DevOrgAuthConnectionsUpdateRequestType": {
            "docs": "Specifies the type for the authentication connection. Different types
of authentication connections have different configuration parameters
that can be updated.
",
            "enum": [
              "google_apps",
              "none",
              "oidc",
              "samlp",
              "waad",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DevOrgAuthConnectionsUpdateResponse": {
            "docs": "Response for the request to update an enterprise authentication
connection.
",
            "inline": undefined,
            "properties": {
              "auth_connection": {
                "type": "AuthConnection",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DevUser": {
            "docs": undefined,
            "extends": [
              "UserBase",
            ],
            "inline": undefined,
            "properties": {
              "external_identities": {
                "docs": "IDs of the Dev User outside the DevRev SOR.",
                "type": "optional<list<ExternalIdentity>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DevUserSummary": {
            "type": "UserBaseSummary",
          },
          "DevUsersListResponse": {
            "docs": "The response to listing the Dev users.",
            "inline": undefined,
            "properties": {
              "dev_users": {
                "docs": "The list of Dev users.",
                "type": "list<DevUser>",
              },
              "next_cursor": {
                "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
                "type": "optional<string>",
              },
              "prev_cursor": {
                "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DevUsersSelfResponse": {
            "docs": "The response to getting the information for the authenticated user.
",
            "inline": undefined,
            "properties": {
              "dev_user": {
                "type": "DevUser",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnhancementSummary": {
            "type": "PartBaseSummary",
          },
          "ErrorBadRequest": {
            "docs": undefined,
            "extends": [
              "ErrorBase",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorBadRequestBadRequest": {
            "type": "map<string, unknown>",
          },
          "ErrorBadRequestInvalidEnumValue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowed_values": {
                "docs": "The allowed values for the field.",
                "type": "list<string>",
              },
              "field_name": {
                "docs": "The field whose enum value is invalid.",
                "type": "string",
              },
              "value": {
                "docs": "The value that was received.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorBadRequestMissingRequiredField": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "field_name": {
                "docs": "The missing field's name.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorBadRequestParseError": {
            "type": "map<string, unknown>",
          },
          "ErrorBadRequestType": {
            "enum": [
              "bad_request",
              "invalid_enum_value",
              "missing_required_field",
              "parse_error",
              "value_not_permitted",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorBadRequestValueNotPermitted": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "field_name": {
                "docs": "The field whose value is not permitted.",
                "type": "string",
              },
              "reason": {
                "docs": "The reason the value isn't permitted.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorBase": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "message": {
                "docs": "The message associated with the error.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorForbidden": {
            "docs": undefined,
            "extends": [
              "ErrorBase",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorForbiddenForbidden": {
            "type": "map<string, unknown>",
          },
          "ErrorForbiddenType": "literal<"forbidden">",
          "ErrorInternalServerError": {
            "docs": undefined,
            "extends": [
              "ErrorBase",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorInternalServerErrorInternalError": {
            "type": "map<string, unknown>",
          },
          "ErrorInternalServerErrorType": "literal<"internal_error">",
          "ErrorNotFound": {
            "docs": undefined,
            "extends": [
              "ErrorBase",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorNotFoundNotFound": {
            "type": "map<string, unknown>",
          },
          "ErrorNotFoundType": "literal<"not_found">",
          "ErrorServiceUnavailable": {
            "docs": undefined,
            "extends": [
              "ErrorBase",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorServiceUnavailableServiceUnavailable": {
            "type": "map<string, unknown>",
          },
          "ErrorServiceUnavailableType": "literal<"service_unavailable">",
          "ErrorTooManyRequests": {
            "docs": undefined,
            "extends": [
              "ErrorBase",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorTooManyRequestsTooManyRequests": {
            "type": "map<string, unknown>",
          },
          "ErrorTooManyRequestsType": "literal<"too_many_requests">",
          "ErrorUnauthorized": {
            "docs": undefined,
            "extends": [
              "ErrorBase",
            ],
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorUnauthorizedType": "literal<"unauthenticated">",
          "ErrorUnauthorizedUnauthenticated": {
            "type": "map<string, unknown>",
          },
          "EventPartCreated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "part": {
                "type": "part",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventPartDeleted": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The ID of the part that was deleted.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventPartUpdated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "part": {
                "type": "part",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventRevOrgCreated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "rev_org": {
                "type": "RevOrg",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventRevOrgDeleted": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The ID of the Rev organization that was deleted.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventRevOrgUpdated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "rev_org": {
                "type": "RevOrg",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventTagCreated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "tag": {
                "type": "tag",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventTagDeleted": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The ID of the tag that was deleted.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventTagUpdated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "tag": {
                "type": "tag",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventTimelineEntryCreated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "entry": {
                "type": "TimelineEntry",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventTimelineEntryDeleted": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The ID of the timeline entry that was deleted.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventTimelineEntryUpdated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "entry": {
                "type": "TimelineEntry",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventWebhookCreated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "webhook": {
                "type": "webhook",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventWebhookDeleted": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The ID of the webhook that was deleted.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventWebhookUpdated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "webhook": {
                "type": "webhook",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventWorkCreated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "work": {
                "type": "work",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventWorkDeleted": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The ID of the work that was deleted.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EventWorkUpdated": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "work": {
                "type": "work",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ExternalIdentity": {
            "docs": "External identity of a user.",
            "type": "map<string, unknown>",
          },
          "Feature": {
            "type": "PartBase",
          },
          "FeatureSummary": {
            "type": "PartBaseSummary",
          },
          "GroupSummary": {
            "type": "AtomBaseSummary",
          },
          "IssuePriority": {
            "docs": "Priority of the work based upon impact and criticality.",
            "enum": [
              "p0",
              "p1",
              "p2",
              "p3",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListMode": {
            "docs": "The iteration mode to use. If "after", then entries after the provided
cursor will be returned, or if no cursor is provided, then from the
beginning. If "before", then entries before the provided cursor will be
returned, or if no cursor is provided, then from the end. Entries will
always be returned in the specified sort-by order.
",
            "enum": [
              "after",
              "before",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrgBase": {
            "docs": undefined,
            "extends": [
              "AtomBase",
            ],
            "inline": undefined,
            "properties": {
              "display_name": {
                "docs": "Name of the Organization.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrgBaseSummary": {
            "docs": undefined,
            "extends": [
              "AtomBaseSummary",
            ],
            "inline": undefined,
            "properties": {
              "display_name": {
                "docs": "Name of the Organization.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrgEnvironment": {
            "docs": "The environment of the Org. Defaults to 'production' if not specified.
",
            "enum": [
              "production",
              "staging",
              "test",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrgSummary": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "rev_org": "RevOrgSummary",
            },
          },
          "OrgType": "literal<"rev_org">",
          "PartBase": {
            "docs": undefined,
            "extends": [
              "AtomBase",
            ],
            "inline": undefined,
            "properties": {
              "artifacts": {
                "docs": "The attached artifacts.",
                "type": "optional<list<ArtifactSummary>>",
              },
              "description": {
                "docs": "Description of the part.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Name of the part.",
                "type": "string",
              },
              "owned_by": {
                "docs": "The users that own the part.",
                "type": "list<UserSummary>",
              },
              "tags": {
                "docs": "Tags associated with the object.",
                "type": "optional<list<TagWithValue>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartBaseSummary": {
            "docs": undefined,
            "extends": [
              "AtomBaseSummary",
            ],
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "Name of the part.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartSummary": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "capability": "CapabilitySummary",
              "enhancement": "EnhancementSummary",
              "feature": "FeatureSummary",
              "product": "ProductSummary",
            },
          },
          "PartType": {
            "enum": [
              "capability",
              "enhancement",
              "feature",
              "product",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsCreateRequest": {
            "availability": undefined,
            "base-properties": {
              "description": {
                "docs": "Description of the part.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Name of the part.",
                "type": "string",
              },
              "owned_by": {
                "docs": "The users that own the part.",
                "type": "list<string>",
              },
            },
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "capability": {
                "type": "PartsCreateRequestCapability",
              },
              "enhancement": {
                "type": "PartsCreateRequestEnhancement",
              },
              "feature": {
                "type": "PartsCreateRequestFeature",
              },
              "product": {
                "type": "PartsCreateRequestProduct",
              },
            },
          },
          "PartsCreateRequestCapability": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "parent_part": {
                "docs": "ID of the parent product for the capability.",
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsCreateRequestEnhancement": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "parent_part": {
                "docs": "ID of the parent part on which the enhancement is to be created.
",
                "type": "list<string>",
              },
              "target_close_date": {
                "docs": "Target close date by which enhancement is expected to be closed.
",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsCreateRequestFeature": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "parent_part": {
                "docs": "ID of the parent capability/feature for the feature.",
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsCreateRequestProduct": {
            "type": "map<string, unknown>",
          },
          "PartsCreateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "part": {
                "type": "part",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsDeleteResponse": {
            "type": "map<string, unknown>",
          },
          "PartsGetResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "part": {
                "type": "part",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsListResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "next_cursor": {
                "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
                "type": "optional<string>",
              },
              "parts": {
                "docs": "The list of parts.",
                "type": "list<part>",
              },
              "prev_cursor": {
                "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsUpdateRequest": {
            "availability": undefined,
            "base-properties": {
              "description": {
                "docs": "The updated description of the part.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "The ID of the part to update.",
                "type": "string",
              },
              "name": {
                "docs": "The updated name of the part.",
                "type": "optional<string>",
              },
              "owned_by": "optional<PartsUpdateRequestOwnedBy>",
            },
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "capability": {
                "type": "PartsUpdateRequestCapability",
              },
              "enhancement": {
                "type": "PartsUpdateRequestEnhancement",
              },
              "feature": {
                "type": "PartsUpdateRequestFeature",
              },
              "none": {
                "type": "empty",
              },
              "product": {
                "type": "PartsUpdateRequestProduct",
              },
            },
          },
          "PartsUpdateRequestCapability": {
            "type": "map<string, unknown>",
          },
          "PartsUpdateRequestEnhancement": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "target_close_date": {
                "docs": "Updates the target close date of the enhancement.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsUpdateRequestFeature": {
            "type": "map<string, unknown>",
          },
          "PartsUpdateRequestOwnedBy": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "set": {
                "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PartsUpdateRequestProduct": {
            "type": "map<string, unknown>",
          },
          "PartsUpdateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "part": {
                "type": "part",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Product": {
            "type": "PartBase",
          },
          "ProductSummary": {
            "type": "PartBaseSummary",
          },
          "RevOrg": {
            "docs": undefined,
            "extends": [
              "OrgBase",
            ],
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "Description of the Rev organization.",
                "type": "optional<string>",
              },
              "domain": {
                "docs": "Company's domain name. Example - 'devrev.ai'.",
                "type": "optional<string>",
              },
              "external_ref": {
                "docs": "External ref is a unique identifier for the Rev (customer)
organization from your primary customer system of records. If none
is specified, a system-generated identifier will be assigned to the
organization.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RevOrgSummary": {
            "type": "OrgBaseSummary",
          },
          "RevOrgsCreateResponse": {
            "docs": "Response object for request to create a new Rev organization.
",
            "inline": undefined,
            "properties": {
              "rev_org": {
                "type": "RevOrg",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RevOrgsDeleteResponse": {
            "docs": "The response to deleting a Rev organization.",
            "type": "map<string, unknown>",
          },
          "RevOrgsGetResponse": {
            "docs": "The response to getting a Rev organization's information.",
            "inline": undefined,
            "properties": {
              "rev_org": {
                "type": "RevOrg",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RevOrgsListResponse": {
            "docs": "The response to getting a list of Rev organizations' information.
",
            "inline": undefined,
            "properties": {
              "next_cursor": {
                "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
                "type": "optional<string>",
              },
              "prev_cursor": {
                "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
                "type": "optional<string>",
              },
              "rev_orgs": {
                "docs": "List with all of the Rev organizations' information.",
                "type": "list<RevOrg>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RevOrgsUpdateResponse": {
            "docs": "Response object to updating Rev organization's information.",
            "inline": undefined,
            "properties": {
              "rev_org": {
                "type": "RevOrg",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RevUserSummary": {
            "docs": undefined,
            "extends": [
              "UserBaseSummary",
            ],
            "inline": undefined,
            "properties": {
              "external_ref": {
                "docs": "External ref is a mutable unique identifier for a user within the
Rev organization from your primary customer record. If none is
available, a good alternative is the email address/phone number
which could uniquely identify the user. If none is specified, a
system-generated identifier will be assigned to the user.
",
                "type": "optional<string>",
              },
              "rev_org": "optional<OrgSummary>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SetTagWithValue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The ID of the tag.",
                "type": "string",
              },
              "value": {
                "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "StageInit": {
            "docs": "Sets an object's initial stage.",
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The name of the stage.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "StageUpdate": {
            "docs": "Updates an object's stage.",
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The updated name of the stage, otherwise unchanged if not set.
",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SysUserSummary": {
            "type": "UserBaseSummary",
          },
          "TagSummary": {
            "docs": undefined,
            "extends": [
              "AtomBaseSummary",
            ],
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TagWithValue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "tag": {
                "type": "TagSummary",
              },
              "value": {
                "docs": "The value for the object's association with the tag.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TagsCreateResponse": {
            "docs": "The response to creating a new tag.",
            "inline": undefined,
            "properties": {
              "tag": {
                "type": "tag",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TagsDeleteResponse": {
            "docs": "The response for deleting a tag.",
            "type": "map<string, unknown>",
          },
          "TagsGetResponse": {
            "docs": "The response to getting a tag's information.",
            "inline": undefined,
            "properties": {
              "tag": {
                "type": "tag",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TagsListResponse": {
            "docs": "The response to listing the tags.",
            "inline": undefined,
            "properties": {
              "next_cursor": {
                "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
                "type": "optional<string>",
              },
              "prev_cursor": {
                "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
                "type": "optional<string>",
              },
              "tags": {
                "docs": "The list of tags.",
                "type": "list<tag>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TagsUpdateAllowedValues": {
            "docs": "Specifies an update to a tag's allowed values.",
            "inline": undefined,
            "properties": {
              "set": {
                "docs": "Sets the allowed values for the tag.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TagsUpdateResponse": {
            "docs": "The response for updating a tag.",
            "inline": undefined,
            "properties": {
              "tag": {
                "type": "tag",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TicketSeverity": {
            "docs": "Severity of the ticket.",
            "enum": [
              "blocker",
              "high",
              "low",
              "medium",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineComment": {
            "docs": undefined,
            "extends": [
              "TimelineEntryBase",
            ],
            "inline": undefined,
            "properties": {
              "artifacts": {
                "docs": "The artifacts for the comment.",
                "type": "optional<list<ArtifactSummary>>",
              },
              "body": {
                "docs": "The comment's body. If the comment has been deleted, then no body
will appear in the response.
",
                "type": "optional<string>",
              },
              "body_type": "optional<TimelineCommentBodyType>",
              "snap_kit_body": {
                "docs": "The SnapKit Body of the comment.",
                "type": "optional<map<string, unknown>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineCommentBodyType": {
            "docs": "The type of the body to use for the comment.",
            "enum": [
              "snap_kit",
              "text",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineEntriesCreateRequest": {
            "availability": undefined,
            "base-properties": {
              "object": {
                "docs": "The ID of the object to create the timeline entry for.",
                "type": "string",
              },
              "visibility": "optional<TimelineEntryVisibility>",
            },
            "discriminant": "type",
            "docs": "The request to create a timeline entry for an object.",
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "timeline_comment": {
                "type": "TimelineEntriesCreateRequestTimelineComment",
              },
            },
          },
          "TimelineEntriesCreateRequestTimelineComment": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "artifacts": {
                "docs": "The IDs of the artifacts attached to the comment.",
                "type": "optional<list<string>>",
              },
              "body": {
                "docs": "The comment's body.",
                "type": "optional<string>",
              },
              "body_type": {
                "type": "optional<TimelineCommentBodyType>",
              },
              "snap_kit_body": {
                "docs": "The SnapKit body of the comment.",
                "type": "optional<map<string, unknown>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineEntriesCreateRequestType": "literal<"timeline_comment">",
          "TimelineEntriesCreateResponse": {
            "docs": "The response to creating a timeline entry for an object.",
            "inline": undefined,
            "properties": {
              "timeline_entry": {
                "type": "TimelineEntry",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineEntriesGetResponse": {
            "docs": "The request to getting a timeline entry.",
            "inline": undefined,
            "properties": {
              "timeline_entry": {
                "type": "TimelineEntry",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineEntriesListResponse": {
            "docs": "The response to listing timeline entries for an object.",
            "inline": undefined,
            "properties": {
              "next_cursor": {
                "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
                "type": "optional<string>",
              },
              "prev_cursor": {
                "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
                "type": "optional<string>",
              },
              "timeline_entries": {
                "docs": "The timeline entries for the object.",
                "type": "list<TimelineEntry>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineEntriesUpdateRequest": {
            "availability": undefined,
            "base-properties": {
              "id": {
                "docs": "The ID of the timeline entry to update.",
                "type": "string",
              },
            },
            "discriminant": "type",
            "docs": "The request to update a timeline entry.",
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "timeline_comment": {
                "type": "TimelineEntriesUpdateRequestTimelineComment",
              },
            },
          },
          "TimelineEntriesUpdateRequestTimelineComment": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "artifacts": {
                "type": "optional<TimelineEntriesUpdateRequestTimelineCommentArtifacts>",
              },
              "body": {
                "docs": "The updated comment's body.",
                "type": "optional<string>",
              },
              "body_type": {
                "type": "optional<TimelineCommentBodyType>",
              },
              "snap_kit_body": {
                "docs": "The SnapKit body of the comment.",
                "type": "optional<map<string, unknown>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineEntriesUpdateRequestTimelineCommentArtifacts": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "add": {
                "docs": "Adds the provided artifacts to the comment. An artifact cannot be
added more than once, i.e. nothing is done if the artifact is
already attached. Mutually exclusive with `set`.
",
                "type": "optional<list<string>>",
              },
              "remove": {
                "docs": "Removes the provided artifacts from the comment. If an artifact is
not present, then it's ignored. Mututally exclusive with `set`.
",
                "type": "optional<list<string>>",
              },
              "set": {
                "docs": "Sets the field to the provided artifacts.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineEntriesUpdateRequestType": "literal<"timeline_comment">",
          "TimelineEntriesUpdateResponse": {
            "docs": "The response to updating a timeline entry.",
            "inline": undefined,
            "properties": {
              "timeline_entry": {
                "type": "TimelineEntry",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TimelineEntry": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "timeline_comment": {
                "type": "TimelineComment",
              },
            },
          },
          "TimelineEntryBase": {
            "type": "AtomBase",
          },
          "TimelineEntryType": "literal<"timeline_comment">",
          "TimelineEntryVisibility": {
            "docs": "The visibility of the entry. If 'private', then the entry is only
visible to the creator, otherwise if not set, then the entry has
default visibility.
",
            "type": "literal<"private">",
          },
          "UserBase": {
            "docs": undefined,
            "extends": [
              "AtomBase",
            ],
            "inline": undefined,
            "properties": {
              "display_name": {
                "docs": "The user's display name. The name is non-unique and mutable.
",
                "type": "optional<string>",
              },
              "display_picture": "optional<ArtifactSummary>",
              "email": {
                "docs": "Email address of the user.",
                "type": "optional<string>",
              },
              "full_name": {
                "docs": "Full name of the user.",
                "type": "optional<string>",
              },
              "phone_numbers": {
                "docs": "Phone numbers of the user.",
                "type": "optional<list<string>>",
              },
              "state": "optional<UserState>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserBaseSummary": {
            "docs": undefined,
            "extends": [
              "AtomBaseSummary",
            ],
            "inline": undefined,
            "properties": {
              "display_name": {
                "docs": "The user's display name. The name is non-unique and mutable.
",
                "type": "optional<string>",
              },
              "display_picture": "optional<ArtifactSummary>",
              "email": {
                "docs": "Email address of the user.",
                "type": "optional<string>",
              },
              "full_name": {
                "docs": "Full name of the user.",
                "type": "optional<string>",
              },
              "state": "optional<UserState>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserState": {
            "docs": "State of the user.",
            "enum": [
              "active",
              "deactivated",
              "locked",
              "shadow",
              "unassigned",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UserSummary": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "dev_user": "DevUserSummary",
              "rev_user": {
                "type": "RevUserSummary",
              },
              "sys_user": "SysUserSummary",
            },
          },
          "UserType": {
            "enum": [
              "dev_user",
              "rev_user",
              "sys_user",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhookEventRequest": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The event's ID.",
                "type": "string",
              },
              "part_created": {
                "type": "optional<EventPartCreated>",
              },
              "part_deleted": {
                "type": "optional<EventPartDeleted>",
              },
              "part_updated": {
                "type": "optional<EventPartUpdated>",
              },
              "rev_org_created": {
                "type": "optional<EventRevOrgCreated>",
              },
              "rev_org_deleted": {
                "type": "optional<EventRevOrgDeleted>",
              },
              "rev_org_updated": {
                "type": "optional<EventRevOrgUpdated>",
              },
              "tag_created": {
                "type": "optional<EventTagCreated>",
              },
              "tag_deleted": {
                "type": "optional<EventTagDeleted>",
              },
              "tag_updated": {
                "type": "optional<EventTagUpdated>",
              },
              "timeline_entry_created": {
                "type": "optional<EventTimelineEntryCreated>",
              },
              "timeline_entry_deleted": {
                "type": "optional<EventTimelineEntryDeleted>",
              },
              "timeline_entry_updated": {
                "type": "optional<EventTimelineEntryUpdated>",
              },
              "timestamp": {
                "docs": "Timestamp of the webhook's invocation for the event. Note this
should be used to protect against replay attacks, where the event
should only be processed if the timestamp isn't stale by several
seconds.
",
                "type": "optional<datetime>",
              },
              "type": {
                "type": "optional<WebhookEventType>",
              },
              "verify": {
                "type": "optional<WebhookEventVerify>",
              },
              "webhook_created": {
                "type": "optional<EventWebhookCreated>",
              },
              "webhook_deleted": {
                "type": "optional<EventWebhookDeleted>",
              },
              "webhook_id": {
                "docs": "ID of the webhook for the event.",
                "type": "string",
              },
              "webhook_updated": {
                "type": "optional<EventWebhookUpdated>",
              },
              "work_created": {
                "type": "optional<EventWorkCreated>",
              },
              "work_deleted": {
                "type": "optional<EventWorkDeleted>",
              },
              "work_updated": {
                "type": "optional<EventWorkUpdated>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhookEventResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "challenge": {
                "docs": "The challenge from the "verify" request, otherwise this should not
be set for other request types.
",
                "type": "optional<string>",
                "validation": {
                  "format": "byte",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhookEventType": {
            "docs": "The event types that the webhook will receive.",
            "enum": [
              "part_created",
              "part_deleted",
              "part_updated",
              "rev_org_created",
              "rev_org_deleted",
              "rev_org_updated",
              "tag_created",
              "tag_deleted",
              "tag_updated",
              "timeline_entry_created",
              "timeline_entry_deleted",
              "timeline_entry_updated",
              "verify",
              "webhook_created",
              "webhook_deleted",
              "webhook_updated",
              "work_created",
              "work_deleted",
              "work_updated",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhookEventVerify": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "challenge": {
                "docs": "The challenge that must be echoed in the response.",
                "type": "string",
                "validation": {
                  "format": "byte",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhookStatus": {
            "docs": "The status of the webhook.",
            "enum": [
              "active",
              "inactive",
              "unverified",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhooksCreateResponse": {
            "docs": "The response to creating a new webhook.",
            "inline": undefined,
            "properties": {
              "webhook": {
                "type": "webhook",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhooksDeleteResponse": {
            "docs": "The response to deleting the webhook.",
            "type": "map<string, unknown>",
          },
          "WebhooksGetResponse": {
            "docs": "The response to getting the information for the webhook.",
            "inline": undefined,
            "properties": {
              "webhook": {
                "type": "webhook",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhooksListResponse": {
            "docs": "The response to listing the webhooks.",
            "inline": undefined,
            "properties": {
              "webhooks": {
                "docs": "The list of webhooks.",
                "type": "list<webhook>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhooksUpdateAction": {
            "docs": "The action to update the webhook's status.",
            "enum": [
              "activate",
              "deactivate",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhooksUpdateRequestEventTypes": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "add": {
                "docs": "The event types to add. If a provided event type is already set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
                "type": "optional<list<WebhookEventType>>",
              },
              "remove": {
                "docs": "The event types to remove. If a provided event type isn't set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
                "type": "optional<list<WebhookEventType>>",
              },
              "set": {
                "docs": "The updated event types, which will replace the webhook's current
event types. Note this is mutually exclusive with 'add' and
'remove'.
",
                "type": "optional<list<WebhookEventType>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhooksUpdateResponse": {
            "docs": "The response to updating the webhook.",
            "inline": undefined,
            "properties": {
              "webhook": {
                "type": "webhook",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorkBase": {
            "docs": undefined,
            "extends": [
              "AtomBase",
            ],
            "inline": undefined,
            "properties": {
              "applies_to_part": "optional<PartSummary>",
              "artifacts": {
                "docs": "The artifacts attached to the work item.",
                "type": "optional<list<ArtifactSummary>>",
              },
              "body": {
                "docs": "Body of the work object.",
                "type": "optional<string>",
              },
              "owned_by": {
                "docs": "The users that own the work.",
                "type": "list<UserSummary>",
              },
              "reported_by": {
                "docs": "Users that reported the work.",
                "type": "optional<list<UserSummary>>",
              },
              "stage": "optional<stage>",
              "tags": {
                "docs": "Tags associated with the object.",
                "type": "optional<list<TagWithValue>>",
              },
              "target_close_date": {
                "docs": "Timestamp when the work is expected to be complete.",
                "type": "optional<datetime>",
              },
              "title": {
                "docs": "Title of the work object.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorkType": {
            "enum": [
              "issue",
              "ticket",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksCreateRequest": {
            "availability": undefined,
            "base-properties": {
              "applies_to_part": {
                "docs": "The [part](https://devrev.ai/docs/product/parts) that the work
applies to. Specifying a part is required when creating tickets and
issues.
",
                "type": "string",
              },
              "artifacts": {
                "docs": "The IDs of the artifacts to associate with the work item.
",
                "type": "optional<list<string>>",
              },
              "body": {
                "docs": "Body of the work object.",
                "type": "optional<string>",
              },
              "owned_by": {
                "docs": "The users that own the work.",
                "type": "list<string>",
              },
              "reported_by": {
                "docs": "The users that reported the work.",
                "type": "optional<list<string>>",
              },
              "stage": "optional<StageInit>",
              "tags": {
                "docs": "Tags associated with the work item.",
                "type": "optional<list<SetTagWithValue>>",
              },
              "target_close_date": {
                "docs": "Timestamp for when the work is expected to be complete.",
                "type": "optional<datetime>",
              },
              "title": {
                "docs": "Title of the work object.",
                "type": "string",
              },
            },
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "issue": {
                "type": "WorksCreateRequestIssue",
              },
              "ticket": {
                "type": "WorksCreateRequestTicket",
              },
            },
          },
          "WorksCreateRequestIssue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "priority": {
                "type": "optional<IssuePriority>",
              },
              "sprint": {
                "docs": "The sprint that the issue belongs to.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksCreateRequestTicket": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "group": {
                "docs": "The group that the ticket is associated with.",
                "type": "optional<string>",
              },
              "rev_org": {
                "docs": "The Rev organization that the ticket is associated with.",
                "type": "optional<string>",
              },
              "severity": {
                "type": "optional<TicketSeverity>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksCreateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "work": {
                "type": "work",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksDeleteResponse": {
            "type": "map<string, unknown>",
          },
          "WorksExportResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "works": {
                "docs": "The resulting collection of work items.",
                "type": "list<work>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksGetResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "work": {
                "type": "work",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksListResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "next_cursor": {
                "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
                "type": "optional<string>",
              },
              "prev_cursor": {
                "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
                "type": "optional<string>",
              },
              "works": {
                "docs": "The list of works.",
                "type": "list<work>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksUpdateRequest": {
            "availability": undefined,
            "base-properties": {
              "applies_to_part": {
                "docs": "Updates the part that the work applies to.",
                "type": "optional<string>",
              },
              "artifacts": "optional<WorksUpdateRequestArtifactIds>",
              "body": {
                "docs": "Updated body of the work object, or unchanged if not provided.
",
                "type": "optional<string>",
              },
              "id": {
                "docs": "The work's ID.",
                "type": "string",
              },
              "owned_by": "optional<WorksUpdateRequestOwnedBy>",
              "reported_by": "optional<WorksUpdateRequestReportedBy>",
              "stage": "optional<StageUpdate>",
              "tags": "optional<WorksUpdateRequestTags>",
              "target_close_date": {
                "docs": "Updates the timestamp for when the work is expected to be complete.
",
                "type": "optional<datetime>",
              },
              "title": {
                "docs": "Updated title of the work object, or unchanged if not provided.
",
                "type": "optional<string>",
              },
            },
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "issue": {
                "type": "WorksUpdateRequestIssue",
              },
              "none": {
                "type": "empty",
              },
              "ticket": {
                "type": "WorksUpdateRequestTicket",
              },
            },
          },
          "WorksUpdateRequestArtifactIds": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "set": {
                "docs": "Sets the IDs to the provided artifact IDs.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksUpdateRequestIssue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "priority": {
                "type": "optional<IssuePriority>",
              },
              "sprint": {
                "docs": "Updates the sprint that the issue belongs to.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksUpdateRequestOwnedBy": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "set": {
                "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksUpdateRequestReportedBy": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "set": {
                "docs": "Sets the users that reported the work to the provided user IDs.
",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksUpdateRequestTags": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "set": {
                "docs": "Sets the provided tags on the work item.",
                "type": "optional<list<SetTagWithValue>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksUpdateRequestTicket": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "group": {
                "docs": "The group that the ticket is associated with.",
                "type": "optional<string>",
              },
              "rev_org": {
                "docs": "Updates the Rev organization that the ticket is associated with.
",
                "type": "optional<string>",
              },
              "severity": {
                "type": "optional<TicketSeverity>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WorksUpdateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "work": {
                "type": "work",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "empty": {
            "type": "map<string, unknown>",
          },
          "enhancement": {
            "docs": undefined,
            "extends": [
              "PartBase",
            ],
            "inline": undefined,
            "properties": {
              "target_close_date": {
                "docs": "Timestamp when the enhancement is expected to be closed.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "issue": {
            "docs": undefined,
            "extends": [
              "WorkBase",
            ],
            "inline": undefined,
            "properties": {
              "priority": "optional<IssuePriority>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "part": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "capability": "Capability",
              "enhancement": {
                "type": "enhancement",
              },
              "feature": "Feature",
              "product": "Product",
            },
          },
          "stage": {
            "docs": "Describes the current stage of a work item.",
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "Current stage name of the work item.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "tag": {
            "docs": undefined,
            "extends": [
              "AtomBase",
            ],
            "inline": undefined,
            "properties": {
              "allowed_values": {
                "docs": "The allowed values for the tag, where a value is provided when a
tag is associated with an object. If empty, then no value should be
provided when the association is made.
",
                "type": "optional<list<string>>",
              },
              "description": {
                "docs": "An informative description for the tag that should provide context
on the tag's purpose and usage.
",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ticket": {
            "docs": undefined,
            "extends": [
              "WorkBase",
            ],
            "inline": undefined,
            "properties": {
              "group": "optional<GroupSummary>",
              "rev_org": "optional<OrgSummary>",
              "severity": "optional<TicketSeverity>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "webhook": {
            "docs": undefined,
            "extends": [
              "AtomBase",
            ],
            "inline": undefined,
            "properties": {
              "event_types": {
                "docs": "The event types that the webhook will receive.",
                "type": "optional<list<WebhookEventType>>",
              },
              "secret": {
                "docs": "The secret to use for verifying webhook events.",
                "type": "string",
                "validation": {
                  "format": "byte",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "status": "WebhookStatus",
              "url": {
                "docs": "The URL of the webhook endpoint.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "work": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "type",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "issue": {
                "type": "issue",
              },
              "ticket": {
                "type": "ticket",
              },
            },
          },
        },
      },
      "rawContents": "errors:
  BadRequestError:
    status-code: 400
    type: ErrorBadRequest
    docs: 400 Bad Request.
    examples:
      - value: {}
  UnauthorizedError:
    status-code: 401
    type: ErrorUnauthorized
    docs: 401 Unauthorized.
    examples:
      - value: {}
  ForbiddenError:
    status-code: 403
    type: ErrorForbidden
    docs: 403 Forbidden.
    examples:
      - value: {}
  NotFoundError:
    status-code: 404
    type: ErrorNotFound
    docs: 404 Not Found.
    examples:
      - value: {}
  TooManyRequestsError:
    status-code: 429
    type: ErrorTooManyRequests
    docs: 429 Too Many Requests.
    examples:
      - value: {}
  InternalServerError:
    status-code: 500
    type: ErrorInternalServerError
    docs: 500 Internal Server Error.
    examples:
      - value: {}
  ServiceUnavailableError:
    status-code: 503
    type: ErrorServiceUnavailable
    docs: 503 Service Unavailable.
    examples:
      - value: {}
types:
  ArtifactSummary:
    type: AtomBaseSummary
  ArtifactsLocateResponse:
    docs: The response to getting an artifact's download URL.
    properties:
      expires_at:
        type: optional<datetime>
        docs: The expiration timestamp of the URL.
      url:
        type: string
        docs: The artifact's download URL.
    source:
      openapi: ../openapi.yml
  ArtifactsPrepareResponse:
    docs: The response to preparing a URL to upload a file.
    properties:
      form_data:
        docs: The POST policy form data.
        type: list<ArtifactsPrepareResponseFormData>
      id:
        type: string
        docs: The generated artifact's ID.
      url:
        type: string
        docs: The URL that the file's data should be uploaded to.
    source:
      openapi: ../openapi.yml
  ArtifactsPrepareResponseFormData:
    properties:
      key:
        type: string
        docs: Key of the form field.
      value:
        type: string
        docs: Value corresponding to the key.
    source:
      openapi: ../openapi.yml
  AtomBase:
    properties:
      created_by:
        type: optional<UserSummary>
      created_date:
        type: optional<datetime>
        docs: Timestamp when the object was created.
      display_id:
        type: optional<string>
        docs: Human-readable object ID unique to the Dev organization.
      id:
        type: string
        docs: Globally unique object ID.
      modified_by:
        type: optional<UserSummary>
      modified_date:
        type: optional<datetime>
        docs: Timestamp when the object was last modified.
    source:
      openapi: ../openapi.yml
  AtomBaseSummary:
    properties:
      display_id:
        type: optional<string>
        docs: Human-readable object ID unique to the Dev organization.
      id:
        type: string
        docs: Globally unique object ID.
    source:
      openapi: ../openapi.yml
  AuthConnection:
    discriminant: type
    base-properties:
      display_name:
        type: optional<string>
        docs: |
          Display name of the authentication connection. This name will be
          visible to all the users when they sign in to this Dev
          organization. For example, if the display_name is 'abclogin', then
          it would appear on the login button as 'Log in to abclogin'.
      enabled:
        type: optional<boolean>
        docs: |
          Whether the authentication connection is enabled or disabled. If
          set to false, the authentication connection will not show up on the
          login screen as a login option.
      id:
        type: string
        docs: ID of the authentication connection.
    docs: |
      Connection object that specifies the configuration for an
      authentication connection that is set up for a Dev organization.
    union:
      google_apps:
        type: AuthConnectionOptionsGoogleApps
      oidc:
        type: AuthConnectionOptionsOidc
      samlp:
        type: AuthConnectionOptionsSaml
      social:
        type: AuthConnectionOptionsSocial
      waad:
        type: AuthConnectionOptionsAzureAd
    source:
      openapi: ../openapi.yml
  AuthConnectionOptionsAzureAd:
    docs: |
      Object encapsulating the configuration parameters for an Azure AD
      authentication connection.
    properties:
      client_id:
        type: optional<string>
        docs: Client ID for the Azure authentication connection.
      client_secret:
        type: optional<string>
        docs: Client secret for the Azure authentication connection.
      domain:
        type: optional<string>
        docs: Domain URL of the Azure authentication connection.
    source:
      openapi: ../openapi.yml
  AuthConnectionOptionsGoogleApps:
    docs: |
      Object encapsulating the configuration parameters for a Google Apps
      authentication connection.
    properties:
      client_id:
        type: optional<string>
        docs: Client ID for the Google Apps authentication connection.
      client_secret:
        type: optional<string>
        docs: |
          Client secret for the Google Apps authentication connection.
      tenant_domain:
        type: optional<string>
        docs: |
          Tenant domain URL of the Google Apps authentication connection.
    source:
      openapi: ../openapi.yml
  AuthConnectionOptionsOidc:
    docs: |
      Object encapsulating the configuration parameters for an OIDC
      authentication connection.
    properties:
      client_id:
        type: optional<string>
        docs: Client ID for the OIDC authentication connection.
      client_secret:
        type: optional<string>
        docs: Client secret for the OIDC authentication connection.
      issuer:
        type: optional<string>
        docs: Issuer URL of the OIDC authentication connection.
    source:
      openapi: ../openapi.yml
  AuthConnectionOptionsSaml:
    docs: |
      Object encapsulating the configuration parameters for a SAML
      authentication connection.
    properties:
      sign_in_endpoint:
        type: optional<string>
        docs: Sign In endpoint for the SAML authentication connection.
      signing_cert:
        type: optional<string>
        docs: |
          Signing certificate for the SAML authentication connection.
    source:
      openapi: ../openapi.yml
  AuthConnectionOptionsSocial:
    type: map<string, unknown>
  AuthConnectionToggle:
    enum:
      - disable
      - enable
    source:
      openapi: ../openapi.yml
  AuthConnectionType:
    enum:
      - google_apps
      - oidc
      - samlp
      - social
      - waad
    docs: |
      Defines the type for the authentication connection. The configuration
      for each authentication connection will depend on the type value.
    source:
      openapi: ../openapi.yml
  AuthToken:
    properties:
      client_id:
        type: optional<string>
        docs: |
          An identifier that represents the application that requested the
          token. Only applicable for application access tokens.
      expires_at:
        type: optional<datetime>
        docs: The time at which the token expires.
      issued_at:
        type: optional<datetime>
        docs: The time at which the token was issued.
      requested_token_type: optional<AuthTokenRequestedTokenType>
      scopes:
        type: optional<list<string>>
        docs: The scopes associated with the issued token.
      status: optional<AuthTokenStatus>
      subject:
        type: optional<string>
        docs: The subject of the token.
      token_hint:
        type: optional<string>
        docs: A hint that identifies the token.
    extends:
      - AtomBase
    source:
      openapi: ../openapi.yml
  AuthTokenGrantType:
    enum:
      - value: urn:devrev:params:oauth:grant-type:token-issue
        name: UrnDevrevParamsOauthGrantTypeTokenIssue
      - value: urn:ietf:params:oauth:grant-type:token-exchange
        name: UrnIetfParamsOauthGrantTypeTokenExchange
    docs: Specifies the process of obtaining a token.
    source:
      openapi: ../openapi.yml
  AuthTokenRequestedTokenType:
    enum:
      - value: urn:devrev:params:oauth:token-type:aat
        name: UrnDevrevParamsOauthTokenTypeAat
      - value: urn:devrev:params:oauth:token-type:aat:public
        name: UrnDevrevParamsOauthTokenTypeAatPublic
      - value: urn:devrev:params:oauth:token-type:dev
        name: UrnDevrevParamsOauthTokenTypeDev
      - value: urn:devrev:params:oauth:token-type:pat
        name: UrnDevrevParamsOauthTokenTypePat
      - value: urn:devrev:params:oauth:token-type:rev
        name: UrnDevrevParamsOauthTokenTypeRev
      - value: urn:devrev:params:oauth:token-type:session
        name: UrnDevrevParamsOauthTokenTypeSession
      - value: urn:devrev:params:oauth:token-type:session:dev0
        name: UrnDevrevParamsOauthTokenTypeSessionDev0
      - value: urn:devrev:params:oauth:token-type:sys
        name: UrnDevrevParamsOauthTokenTypeSys
      - value: urn:ietf:params:oauth:token-type:jwt
        name: UrnIetfParamsOauthTokenTypeJwt
    docs: The type of the requested token.
    source:
      openapi: ../openapi.yml
  AuthTokenStatus:
    enum:
      - active
      - expired
      - revoked
    docs: The status of the token.
    source:
      openapi: ../openapi.yml
  AuthTokenSubjectTokenType:
    enum:
      - value: urn:devrev:params:oauth:token-type:jwt:auth0
        name: UrnDevrevParamsOauthTokenTypeJwtAuth0
      - value: urn:devrev:params:oauth:token-type:jwt:dev
        name: UrnDevrevParamsOauthTokenTypeJwtDev
      - value: urn:devrev:params:oauth:token-type:revinfo
        name: UrnDevrevParamsOauthTokenTypeRevinfo
      - value: urn:devrev:params:oauth:token-type:sysu
        name: UrnDevrevParamsOauthTokenTypeSysu
      - value: urn:devrev:params:oauth:token-type:userinfo
        name: UrnDevrevParamsOauthTokenTypeUserinfo
      - value: urn:devrev:params:oauth:token-type:userinfo:profile
        name: UrnDevrevParamsOauthTokenTypeUserinfoProfile
      - value: urn:ietf:params:oauth:token-type:jwt
        name: UrnIetfParamsOauthTokenTypeJwt
    docs: The type of the subject token.
    source:
      openapi: ../openapi.yml
  AuthTokenTokenType:
    type: literal<"bearer">
    docs: |
      The type of the issued token. Bearer is the only supported token type.
  AuthTokensCreateResponse:
    docs: |
      Response for the request to create a new token corresponding to the
      requested token type.
    properties:
      access_token:
        type: string
        docs: |
          The issued JSON Web Token (JWT) corresponding to the requested
          token type.
      client_id:
        type: optional<string>
        docs: |
          An identifier that represents the application which is requesting
          the token. Only present in a response corresponding to an
          application access token (AAT).
      expires_in:
        type: long
        docs: |
          The validity lifetime of the token specified in seconds since Unix
          epoch.
      refresh_token:
        type: optional<string>
        docs: A token to refresh the issued token.
      scope:
        type: optional<string>
        docs: |
          The scopes associated with the issued token. A space-delimited list
          of values in which the order of values does not matter.
      token_type: AuthTokenTokenType
    source:
      openapi: ../openapi.yml
  AuthTokensGetResponse:
    docs: The response to get the token metadata.
    properties:
      token:
        type: AuthToken
    source:
      openapi: ../openapi.yml
  AuthTokensListResponse:
    docs: The response to list the token metadata.
    properties:
      tokens:
        docs: The list of token metadata.
        type: list<AuthToken>
    source:
      openapi: ../openapi.yml
  AuthTokensOrgTraits:
    docs: Carries Rev org info.
    properties:
      display_name:
        type: optional<string>
        docs: The display name of the Rev org.
      domain:
        type: optional<string>
        docs: The domain of the Rev org.
    source:
      openapi: ../openapi.yml
  AuthTokensRevInfo:
    docs: |
      Carries info corresponding to the Rev user to be provisioned and/or
      issue a Rev session token.
    properties:
      org_ref:
        type: optional<string>
        docs: An identifier which uniquely identifies a Rev org.
      org_traits:
        type: optional<AuthTokensOrgTraits>
      rev_user_id:
        type: optional<string>
        docs: The unique ID of the Rev user.
      user_ref:
        type: string
        docs: An identifier which uniquely identifies a Rev user.
      user_traits:
        type: optional<AuthTokensUserTraits>
    source:
      openapi: ../openapi.yml
  AuthTokensUpdateResponse:
    docs: Response for the request to update the token metadata.
    properties:
      token:
        type: AuthToken
    source:
      openapi: ../openapi.yml
  AuthTokensUserTraits:
    docs: Carries Rev user info.
    properties:
      display_name:
        type: optional<string>
        docs: The display name of the Rev user.
      email:
        type: optional<string>
        docs: The email address of the Rev user.
      full_name:
        type: optional<string>
        docs: The full name of the Rev user.
    source:
      openapi: ../openapi.yml
  Capability:
    type: PartBase
  CapabilitySummary:
    type: PartBaseSummary
  DevOrgAuthConnectionsCreateRequest:
    discriminant: type
    base-properties:
      display_name:
        type: optional<string>
        docs: |
          Display name of the authentication connection. This name will be
          visible to all the users when they sign in to this Dev
          organization. For example, if the display_name is 'abclogin', then
          it would appear on the login button as 'Log in to abclogin'.
    docs: |
      Request to create a new enterprise authentication connection.
    union:
      google_apps:
        type: AuthConnectionOptionsGoogleApps
      oidc:
        type: AuthConnectionOptionsOidc
      samlp:
        type: AuthConnectionOptionsSaml
      waad:
        type: AuthConnectionOptionsAzureAd
    source:
      openapi: ../openapi.yml
  DevOrgAuthConnectionsCreateRequestType:
    enum:
      - google_apps
      - oidc
      - samlp
      - waad
    docs: |
      Defines the type for the authentication connection. Different types of
      authentication connections have different configuration parameters.
    source:
      openapi: ../openapi.yml
  DevOrgAuthConnectionsCreateResponse:
    docs: |
      Response for the request to create a new enterprise authentication
      connection.
    properties:
      auth_connection:
        type: AuthConnection
    source:
      openapi: ../openapi.yml
  DevOrgAuthConnectionsGetResponse:
    docs: |
      Response object encapsulating the configuration details of an
      authentication connection.
    properties:
      auth_connection:
        type: AuthConnection
    source:
      openapi: ../openapi.yml
  DevOrgAuthConnectionsListResponse:
    docs: |
      Response object for the request to list all the social and enterprise
      authentication connections configured for a Dev organization.
    properties:
      auth_connections:
        docs: |
          List of all the authentication connections currently configured for
          a Dev organization.
        type: list<AuthConnection>
    source:
      openapi: ../openapi.yml
  DevOrgAuthConnectionsUpdateRequest:
    discriminant: type
    base-properties:
      display_name:
        type: optional<string>
        docs: |
          New display name of the authentication connection. This name will
          be visible to all the users when they sign in to this Dev
          organization. For example, if the display_name is 'abclogin', then
          it would appear on the login button as 'Log in to abclogin'.
      id:
        type: string
        docs: |
          ID of the authentication connection which is to be updated.
    docs: |
      Request to update an enterprise authentication connection for a Dev
      organization.
    union:
      google_apps:
        type: AuthConnectionOptionsGoogleApps
      none:
        type: empty
      oidc:
        type: AuthConnectionOptionsOidc
      samlp:
        type: AuthConnectionOptionsSaml
      waad:
        type: AuthConnectionOptionsAzureAd
    source:
      openapi: ../openapi.yml
  DevOrgAuthConnectionsUpdateRequestType:
    enum:
      - google_apps
      - none
      - oidc
      - samlp
      - waad
    docs: |
      Specifies the type for the authentication connection. Different types
      of authentication connections have different configuration parameters
      that can be updated.
    source:
      openapi: ../openapi.yml
  DevOrgAuthConnectionsUpdateResponse:
    docs: |
      Response for the request to update an enterprise authentication
      connection.
    properties:
      auth_connection:
        type: AuthConnection
    source:
      openapi: ../openapi.yml
  DevUser:
    properties:
      external_identities:
        type: optional<list<ExternalIdentity>>
        docs: IDs of the Dev User outside the DevRev SOR.
    extends:
      - UserBase
    source:
      openapi: ../openapi.yml
  DevUserSummary:
    type: UserBaseSummary
  DevUsersListResponse:
    docs: The response to listing the Dev users.
    properties:
      dev_users:
        docs: The list of Dev users.
        type: list<DevUser>
      next_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
      prev_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
    source:
      openapi: ../openapi.yml
  DevUsersSelfResponse:
    docs: |
      The response to getting the information for the authenticated user.
    properties:
      dev_user:
        type: DevUser
    source:
      openapi: ../openapi.yml
  empty:
    type: map<string, unknown>
  enhancement:
    properties:
      target_close_date:
        type: optional<datetime>
        docs: Timestamp when the enhancement is expected to be closed.
    extends:
      - PartBase
    source:
      openapi: ../openapi.yml
  PartBase:
    properties:
      artifacts:
        type: optional<list<ArtifactSummary>>
        docs: The attached artifacts.
      description:
        type: optional<string>
        docs: Description of the part.
      name:
        type: string
        docs: Name of the part.
      owned_by:
        docs: The users that own the part.
        type: list<UserSummary>
      tags:
        type: optional<list<TagWithValue>>
        docs: Tags associated with the object.
    extends:
      - AtomBase
    source:
      openapi: ../openapi.yml
  EnhancementSummary:
    type: PartBaseSummary
  ErrorBadRequest:
    properties: {}
    extends:
      - ErrorBase
    source:
      openapi: ../openapi.yml
  ErrorBadRequestBadRequest:
    type: map<string, unknown>
  ErrorBadRequestInvalidEnumValue:
    properties:
      allowed_values:
        docs: The allowed values for the field.
        type: list<string>
      field_name:
        type: string
        docs: The field whose enum value is invalid.
      value:
        type: string
        docs: The value that was received.
    source:
      openapi: ../openapi.yml
  ErrorBadRequestMissingRequiredField:
    properties:
      field_name:
        type: string
        docs: The missing field's name.
    source:
      openapi: ../openapi.yml
  ErrorBadRequestParseError:
    type: map<string, unknown>
  ErrorBadRequestType:
    enum:
      - bad_request
      - invalid_enum_value
      - missing_required_field
      - parse_error
      - value_not_permitted
    source:
      openapi: ../openapi.yml
  ErrorBadRequestValueNotPermitted:
    properties:
      field_name:
        type: string
        docs: The field whose value is not permitted.
      reason:
        type: optional<string>
        docs: The reason the value isn't permitted.
    source:
      openapi: ../openapi.yml
  ErrorBase:
    properties:
      message:
        type: optional<string>
        docs: The message associated with the error.
    source:
      openapi: ../openapi.yml
  ErrorForbidden:
    properties: {}
    extends:
      - ErrorBase
    source:
      openapi: ../openapi.yml
  ErrorForbiddenForbidden:
    type: map<string, unknown>
  ErrorForbiddenType: literal<"forbidden">
  ErrorInternalServerError:
    properties: {}
    extends:
      - ErrorBase
    source:
      openapi: ../openapi.yml
  ErrorInternalServerErrorInternalError:
    type: map<string, unknown>
  ErrorInternalServerErrorType: literal<"internal_error">
  ErrorNotFound:
    properties: {}
    extends:
      - ErrorBase
    source:
      openapi: ../openapi.yml
  ErrorNotFoundNotFound:
    type: map<string, unknown>
  ErrorNotFoundType: literal<"not_found">
  ErrorServiceUnavailable:
    properties: {}
    extends:
      - ErrorBase
    source:
      openapi: ../openapi.yml
  ErrorServiceUnavailableServiceUnavailable:
    type: map<string, unknown>
  ErrorServiceUnavailableType: literal<"service_unavailable">
  ErrorTooManyRequests:
    properties: {}
    extends:
      - ErrorBase
    source:
      openapi: ../openapi.yml
  ErrorTooManyRequestsTooManyRequests:
    type: map<string, unknown>
  ErrorTooManyRequestsType: literal<"too_many_requests">
  ErrorUnauthorized:
    properties: {}
    extends:
      - ErrorBase
    source:
      openapi: ../openapi.yml
  ErrorUnauthorizedType: literal<"unauthenticated">
  ErrorUnauthorizedUnauthenticated:
    type: map<string, unknown>
  EventPartCreated:
    properties:
      part:
        type: part
    source:
      openapi: ../openapi.yml
  EventPartDeleted:
    properties:
      id:
        type: string
        docs: The ID of the part that was deleted.
    source:
      openapi: ../openapi.yml
  EventPartUpdated:
    properties:
      part:
        type: part
    source:
      openapi: ../openapi.yml
  EventRevOrgCreated:
    properties:
      rev_org:
        type: RevOrg
    source:
      openapi: ../openapi.yml
  EventRevOrgDeleted:
    properties:
      id:
        type: string
        docs: The ID of the Rev organization that was deleted.
    source:
      openapi: ../openapi.yml
  EventRevOrgUpdated:
    properties:
      rev_org:
        type: RevOrg
    source:
      openapi: ../openapi.yml
  EventTagCreated:
    properties:
      tag:
        type: tag
    source:
      openapi: ../openapi.yml
  EventTagDeleted:
    properties:
      id:
        type: string
        docs: The ID of the tag that was deleted.
    source:
      openapi: ../openapi.yml
  EventTagUpdated:
    properties:
      tag:
        type: tag
    source:
      openapi: ../openapi.yml
  EventTimelineEntryCreated:
    properties:
      entry:
        type: TimelineEntry
    source:
      openapi: ../openapi.yml
  EventTimelineEntryDeleted:
    properties:
      id:
        type: string
        docs: The ID of the timeline entry that was deleted.
    source:
      openapi: ../openapi.yml
  EventTimelineEntryUpdated:
    properties:
      entry:
        type: TimelineEntry
    source:
      openapi: ../openapi.yml
  EventWebhookCreated:
    properties:
      webhook:
        type: webhook
    source:
      openapi: ../openapi.yml
  EventWebhookDeleted:
    properties:
      id:
        type: string
        docs: The ID of the webhook that was deleted.
    source:
      openapi: ../openapi.yml
  EventWebhookUpdated:
    properties:
      webhook:
        type: webhook
    source:
      openapi: ../openapi.yml
  EventWorkCreated:
    properties:
      work:
        type: work
    source:
      openapi: ../openapi.yml
  EventWorkDeleted:
    properties:
      id:
        type: string
        docs: The ID of the work that was deleted.
    source:
      openapi: ../openapi.yml
  EventWorkUpdated:
    properties:
      work:
        type: work
    source:
      openapi: ../openapi.yml
  ExternalIdentity:
    type: map<string, unknown>
    docs: External identity of a user.
  Feature:
    type: PartBase
  FeatureSummary:
    type: PartBaseSummary
  GroupSummary:
    type: AtomBaseSummary
  issue:
    properties:
      priority: optional<IssuePriority>
    extends:
      - WorkBase
    source:
      openapi: ../openapi.yml
  WorkBase:
    properties:
      applies_to_part: optional<PartSummary>
      artifacts:
        type: optional<list<ArtifactSummary>>
        docs: The artifacts attached to the work item.
      body:
        type: optional<string>
        docs: Body of the work object.
      owned_by:
        docs: The users that own the work.
        type: list<UserSummary>
      reported_by:
        type: optional<list<UserSummary>>
        docs: Users that reported the work.
      stage: optional<stage>
      tags:
        type: optional<list<TagWithValue>>
        docs: Tags associated with the object.
      target_close_date:
        type: optional<datetime>
        docs: Timestamp when the work is expected to be complete.
      title:
        type: string
        docs: Title of the work object.
    extends:
      - AtomBase
    source:
      openapi: ../openapi.yml
  IssuePriority:
    enum:
      - p0
      - p1
      - p2
      - p3
    docs: Priority of the work based upon impact and criticality.
    source:
      openapi: ../openapi.yml
  ListMode:
    enum:
      - after
      - before
    docs: |
      The iteration mode to use. If "after", then entries after the provided
      cursor will be returned, or if no cursor is provided, then from the
      beginning. If "before", then entries before the provided cursor will be
      returned, or if no cursor is provided, then from the end. Entries will
      always be returned in the specified sort-by order.
    source:
      openapi: ../openapi.yml
  OrgBase:
    properties:
      display_name:
        type: optional<string>
        docs: Name of the Organization.
    extends:
      - AtomBase
    source:
      openapi: ../openapi.yml
  OrgBaseSummary:
    properties:
      display_name:
        type: optional<string>
        docs: Name of the Organization.
    extends:
      - AtomBaseSummary
    source:
      openapi: ../openapi.yml
  OrgEnvironment:
    enum:
      - production
      - staging
      - test
    docs: |
      The environment of the Org. Defaults to 'production' if not specified.
    source:
      openapi: ../openapi.yml
  OrgSummary:
    discriminant: type
    base-properties: {}
    union:
      rev_org: RevOrgSummary
    source:
      openapi: ../openapi.yml
  OrgType: literal<"rev_org">
  part:
    discriminant: type
    base-properties: {}
    union:
      capability: Capability
      enhancement:
        type: enhancement
      feature: Feature
      product: Product
    source:
      openapi: ../openapi.yml
  PartBaseSummary:
    properties:
      name:
        type: string
        docs: Name of the part.
    extends:
      - AtomBaseSummary
    source:
      openapi: ../openapi.yml
  PartSummary:
    discriminant: type
    base-properties: {}
    union:
      capability: CapabilitySummary
      enhancement: EnhancementSummary
      feature: FeatureSummary
      product: ProductSummary
    source:
      openapi: ../openapi.yml
  PartType:
    enum:
      - capability
      - enhancement
      - feature
      - product
    source:
      openapi: ../openapi.yml
  PartsCreateRequest:
    discriminant: type
    base-properties:
      description:
        type: optional<string>
        docs: Description of the part.
      name:
        type: string
        docs: Name of the part.
      owned_by:
        docs: The users that own the part.
        type: list<string>
    union:
      capability:
        type: PartsCreateRequestCapability
      enhancement:
        type: PartsCreateRequestEnhancement
      feature:
        type: PartsCreateRequestFeature
      product:
        type: PartsCreateRequestProduct
    source:
      openapi: ../openapi.yml
  PartsCreateRequestCapability:
    properties:
      parent_part:
        docs: ID of the parent product for the capability.
        type: list<string>
    source:
      openapi: ../openapi.yml
  PartsCreateRequestEnhancement:
    properties:
      parent_part:
        docs: |
          ID of the parent part on which the enhancement is to be created.
        type: list<string>
      target_close_date:
        type: optional<datetime>
        docs: |
          Target close date by which enhancement is expected to be closed.
    source:
      openapi: ../openapi.yml
  PartsCreateRequestFeature:
    properties:
      parent_part:
        docs: ID of the parent capability/feature for the feature.
        type: list<string>
    source:
      openapi: ../openapi.yml
  PartsCreateRequestProduct:
    type: map<string, unknown>
  PartsCreateResponse:
    properties:
      part:
        type: part
    source:
      openapi: ../openapi.yml
  PartsDeleteResponse:
    type: map<string, unknown>
  PartsGetResponse:
    properties:
      part:
        type: part
    source:
      openapi: ../openapi.yml
  PartsListResponse:
    properties:
      next_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
      parts:
        docs: The list of parts.
        type: list<part>
      prev_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
    source:
      openapi: ../openapi.yml
  PartsUpdateRequest:
    discriminant: type
    base-properties:
      description:
        type: optional<string>
        docs: The updated description of the part.
      id:
        type: string
        docs: The ID of the part to update.
      name:
        type: optional<string>
        docs: The updated name of the part.
      owned_by: optional<PartsUpdateRequestOwnedBy>
    union:
      capability:
        type: PartsUpdateRequestCapability
      enhancement:
        type: PartsUpdateRequestEnhancement
      feature:
        type: PartsUpdateRequestFeature
      none:
        type: empty
      product:
        type: PartsUpdateRequestProduct
    source:
      openapi: ../openapi.yml
  PartsUpdateRequestCapability:
    type: map<string, unknown>
  PartsUpdateRequestEnhancement:
    properties:
      target_close_date:
        type: optional<datetime>
        docs: Updates the target close date of the enhancement.
    source:
      openapi: ../openapi.yml
  PartsUpdateRequestFeature:
    type: map<string, unknown>
  PartsUpdateRequestOwnedBy:
    properties:
      set:
        type: optional<list<string>>
        docs: |
          Sets the owner IDs to the provided user IDs. This must not be
          empty.
    source:
      openapi: ../openapi.yml
  PartsUpdateRequestProduct:
    type: map<string, unknown>
  PartsUpdateResponse:
    properties:
      part:
        type: part
    source:
      openapi: ../openapi.yml
  Product:
    type: PartBase
  ProductSummary:
    type: PartBaseSummary
  RevOrg:
    properties:
      description:
        type: optional<string>
        docs: Description of the Rev organization.
      domain:
        type: optional<string>
        docs: Company's domain name. Example - 'devrev.ai'.
      external_ref:
        type: optional<string>
        docs: |
          External ref is a unique identifier for the Rev (customer)
          organization from your primary customer system of records. If none
          is specified, a system-generated identifier will be assigned to the
          organization.
    extends:
      - OrgBase
    source:
      openapi: ../openapi.yml
  RevOrgSummary:
    type: OrgBaseSummary
  RevOrgsCreateResponse:
    docs: |
      Response object for request to create a new Rev organization.
    properties:
      rev_org:
        type: RevOrg
    source:
      openapi: ../openapi.yml
  RevOrgsDeleteResponse:
    type: map<string, unknown>
    docs: The response to deleting a Rev organization.
  RevOrgsGetResponse:
    docs: The response to getting a Rev organization's information.
    properties:
      rev_org:
        type: RevOrg
    source:
      openapi: ../openapi.yml
  RevOrgsListResponse:
    docs: |
      The response to getting a list of Rev organizations' information.
    properties:
      next_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
      prev_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
      rev_orgs:
        docs: List with all of the Rev organizations' information.
        type: list<RevOrg>
    source:
      openapi: ../openapi.yml
  RevOrgsUpdateResponse:
    docs: Response object to updating Rev organization's information.
    properties:
      rev_org:
        type: RevOrg
    source:
      openapi: ../openapi.yml
  RevUserSummary:
    properties:
      external_ref:
        type: optional<string>
        docs: |
          External ref is a mutable unique identifier for a user within the
          Rev organization from your primary customer record. If none is
          available, a good alternative is the email address/phone number
          which could uniquely identify the user. If none is specified, a
          system-generated identifier will be assigned to the user.
      rev_org: optional<OrgSummary>
    extends:
      - UserBaseSummary
    source:
      openapi: ../openapi.yml
  UserBaseSummary:
    properties:
      display_name:
        type: optional<string>
        docs: |
          The user's display name. The name is non-unique and mutable.
      display_picture: optional<ArtifactSummary>
      email:
        type: optional<string>
        docs: Email address of the user.
      full_name:
        type: optional<string>
        docs: Full name of the user.
      state: optional<UserState>
    extends:
      - AtomBaseSummary
    source:
      openapi: ../openapi.yml
  SetTagWithValue:
    properties:
      id:
        type: string
        docs: The ID of the tag.
      value:
        type: optional<string>
        docs: |
          The value for the object's association with the tag. If specified,
          the value must be one that's specified in the tag's allowed values.
    source:
      openapi: ../openapi.yml
  stage:
    docs: Describes the current stage of a work item.
    properties:
      name:
        type: string
        docs: Current stage name of the work item.
    source:
      openapi: ../openapi.yml
  StageInit:
    docs: Sets an object's initial stage.
    properties:
      name:
        type: optional<string>
        docs: The name of the stage.
    source:
      openapi: ../openapi.yml
  StageUpdate:
    docs: Updates an object's stage.
    properties:
      name:
        type: optional<string>
        docs: |
          The updated name of the stage, otherwise unchanged if not set.
    source:
      openapi: ../openapi.yml
  SysUserSummary:
    type: UserBaseSummary
  tag:
    properties:
      allowed_values:
        type: optional<list<string>>
        docs: |
          The allowed values for the tag, where a value is provided when a
          tag is associated with an object. If empty, then no value should be
          provided when the association is made.
      description:
        type: optional<string>
        docs: |
          An informative description for the tag that should provide context
          on the tag's purpose and usage.
      name:
        type: string
        docs: |
          The name of the tag, which denotes the logical concept by which all
          tagged objects will be associated. The name is guaranteed to be
          unique.
    extends:
      - AtomBase
    source:
      openapi: ../openapi.yml
  TagSummary:
    properties:
      name:
        type: string
        docs: |
          The name of the tag, which denotes the logical concept by which all
          tagged objects will be associated. The name is guaranteed to be
          unique.
    extends:
      - AtomBaseSummary
    source:
      openapi: ../openapi.yml
  TagWithValue:
    properties:
      tag:
        type: TagSummary
      value:
        type: optional<string>
        docs: The value for the object's association with the tag.
    source:
      openapi: ../openapi.yml
  TagsCreateResponse:
    docs: The response to creating a new tag.
    properties:
      tag:
        type: tag
    source:
      openapi: ../openapi.yml
  TagsDeleteResponse:
    type: map<string, unknown>
    docs: The response for deleting a tag.
  TagsGetResponse:
    docs: The response to getting a tag's information.
    properties:
      tag:
        type: tag
    source:
      openapi: ../openapi.yml
  TagsListResponse:
    docs: The response to listing the tags.
    properties:
      next_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
      prev_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
      tags:
        docs: The list of tags.
        type: list<tag>
    source:
      openapi: ../openapi.yml
  TagsUpdateAllowedValues:
    docs: Specifies an update to a tag's allowed values.
    properties:
      set:
        type: optional<list<string>>
        docs: Sets the allowed values for the tag.
    source:
      openapi: ../openapi.yml
  TagsUpdateResponse:
    docs: The response for updating a tag.
    properties:
      tag:
        type: tag
    source:
      openapi: ../openapi.yml
  ticket:
    properties:
      group: optional<GroupSummary>
      rev_org: optional<OrgSummary>
      severity: optional<TicketSeverity>
    extends:
      - WorkBase
    source:
      openapi: ../openapi.yml
  TicketSeverity:
    enum:
      - blocker
      - high
      - low
      - medium
    docs: Severity of the ticket.
    source:
      openapi: ../openapi.yml
  TimelineComment:
    properties:
      artifacts:
        type: optional<list<ArtifactSummary>>
        docs: The artifacts for the comment.
      body:
        type: optional<string>
        docs: |
          The comment's body. If the comment has been deleted, then no body
          will appear in the response.
      body_type: optional<TimelineCommentBodyType>
      snap_kit_body:
        type: optional<map<string, unknown>>
        docs: The SnapKit Body of the comment.
    extends:
      - TimelineEntryBase
    source:
      openapi: ../openapi.yml
  TimelineCommentBodyType:
    enum:
      - snap_kit
      - text
    docs: The type of the body to use for the comment.
    source:
      openapi: ../openapi.yml
  TimelineEntriesCreateRequest:
    discriminant: type
    base-properties:
      object:
        type: string
        docs: The ID of the object to create the timeline entry for.
      visibility: optional<TimelineEntryVisibility>
    docs: The request to create a timeline entry for an object.
    union:
      timeline_comment:
        type: TimelineEntriesCreateRequestTimelineComment
    source:
      openapi: ../openapi.yml
  TimelineEntriesCreateRequestTimelineComment:
    properties:
      artifacts:
        type: optional<list<string>>
        docs: The IDs of the artifacts attached to the comment.
      body:
        type: optional<string>
        docs: The comment's body.
      body_type:
        type: optional<TimelineCommentBodyType>
      snap_kit_body:
        type: optional<map<string, unknown>>
        docs: The SnapKit body of the comment.
    source:
      openapi: ../openapi.yml
  TimelineEntriesCreateRequestType: literal<"timeline_comment">
  TimelineEntriesCreateResponse:
    docs: The response to creating a timeline entry for an object.
    properties:
      timeline_entry:
        type: TimelineEntry
    source:
      openapi: ../openapi.yml
  TimelineEntriesGetResponse:
    docs: The request to getting a timeline entry.
    properties:
      timeline_entry:
        type: TimelineEntry
    source:
      openapi: ../openapi.yml
  TimelineEntriesListResponse:
    docs: The response to listing timeline entries for an object.
    properties:
      next_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
      prev_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
      timeline_entries:
        docs: The timeline entries for the object.
        type: list<TimelineEntry>
    source:
      openapi: ../openapi.yml
  TimelineEntriesUpdateRequest:
    discriminant: type
    base-properties:
      id:
        type: string
        docs: The ID of the timeline entry to update.
    docs: The request to update a timeline entry.
    union:
      timeline_comment:
        type: TimelineEntriesUpdateRequestTimelineComment
    source:
      openapi: ../openapi.yml
  TimelineEntriesUpdateRequestTimelineComment:
    properties:
      artifacts:
        type: optional<TimelineEntriesUpdateRequestTimelineCommentArtifacts>
      body:
        type: optional<string>
        docs: The updated comment's body.
      body_type:
        type: optional<TimelineCommentBodyType>
      snap_kit_body:
        type: optional<map<string, unknown>>
        docs: The SnapKit body of the comment.
    source:
      openapi: ../openapi.yml
  TimelineEntriesUpdateRequestTimelineCommentArtifacts:
    properties:
      add:
        type: optional<list<string>>
        docs: |
          Adds the provided artifacts to the comment. An artifact cannot be
          added more than once, i.e. nothing is done if the artifact is
          already attached. Mutually exclusive with `set`.
      remove:
        type: optional<list<string>>
        docs: |
          Removes the provided artifacts from the comment. If an artifact is
          not present, then it's ignored. Mututally exclusive with `set`.
      set:
        type: optional<list<string>>
        docs: Sets the field to the provided artifacts.
    source:
      openapi: ../openapi.yml
  TimelineEntriesUpdateRequestType: literal<"timeline_comment">
  TimelineEntriesUpdateResponse:
    docs: The response to updating a timeline entry.
    properties:
      timeline_entry:
        type: TimelineEntry
    source:
      openapi: ../openapi.yml
  TimelineEntry:
    discriminant: type
    base-properties: {}
    union:
      timeline_comment:
        type: TimelineComment
    source:
      openapi: ../openapi.yml
  TimelineEntryBase:
    type: AtomBase
  TimelineEntryType: literal<"timeline_comment">
  TimelineEntryVisibility:
    type: literal<"private">
    docs: |
      The visibility of the entry. If 'private', then the entry is only
      visible to the creator, otherwise if not set, then the entry has
      default visibility.
  UserBase:
    properties:
      display_name:
        type: optional<string>
        docs: |
          The user's display name. The name is non-unique and mutable.
      display_picture: optional<ArtifactSummary>
      email:
        type: optional<string>
        docs: Email address of the user.
      full_name:
        type: optional<string>
        docs: Full name of the user.
      phone_numbers:
        type: optional<list<string>>
        docs: Phone numbers of the user.
      state: optional<UserState>
    extends:
      - AtomBase
    source:
      openapi: ../openapi.yml
  UserState:
    enum:
      - active
      - deactivated
      - locked
      - shadow
      - unassigned
    docs: State of the user.
    source:
      openapi: ../openapi.yml
  UserSummary:
    discriminant: type
    base-properties: {}
    union:
      dev_user: DevUserSummary
      rev_user:
        type: RevUserSummary
      sys_user: SysUserSummary
    source:
      openapi: ../openapi.yml
  UserType:
    enum:
      - dev_user
      - rev_user
      - sys_user
    source:
      openapi: ../openapi.yml
  webhook:
    properties:
      event_types:
        type: optional<list<WebhookEventType>>
        docs: The event types that the webhook will receive.
      secret:
        type: string
        docs: The secret to use for verifying webhook events.
        validation:
          format: byte
      status: WebhookStatus
      url:
        type: string
        docs: The URL of the webhook endpoint.
    extends:
      - AtomBase
    source:
      openapi: ../openapi.yml
  WebhookEventRequest:
    properties:
      id:
        type: string
        docs: The event's ID.
      part_created:
        type: optional<EventPartCreated>
      part_deleted:
        type: optional<EventPartDeleted>
      part_updated:
        type: optional<EventPartUpdated>
      rev_org_created:
        type: optional<EventRevOrgCreated>
      rev_org_deleted:
        type: optional<EventRevOrgDeleted>
      rev_org_updated:
        type: optional<EventRevOrgUpdated>
      tag_created:
        type: optional<EventTagCreated>
      tag_deleted:
        type: optional<EventTagDeleted>
      tag_updated:
        type: optional<EventTagUpdated>
      timeline_entry_created:
        type: optional<EventTimelineEntryCreated>
      timeline_entry_deleted:
        type: optional<EventTimelineEntryDeleted>
      timeline_entry_updated:
        type: optional<EventTimelineEntryUpdated>
      timestamp:
        type: optional<datetime>
        docs: |
          Timestamp of the webhook's invocation for the event. Note this
          should be used to protect against replay attacks, where the event
          should only be processed if the timestamp isn't stale by several
          seconds.
      type:
        type: optional<WebhookEventType>
      verify:
        type: optional<WebhookEventVerify>
      webhook_created:
        type: optional<EventWebhookCreated>
      webhook_deleted:
        type: optional<EventWebhookDeleted>
      webhook_id:
        type: string
        docs: ID of the webhook for the event.
      webhook_updated:
        type: optional<EventWebhookUpdated>
      work_created:
        type: optional<EventWorkCreated>
      work_deleted:
        type: optional<EventWorkDeleted>
      work_updated:
        type: optional<EventWorkUpdated>
    source:
      openapi: ../openapi.yml
  WebhookEventResponse:
    properties:
      challenge:
        type: optional<string>
        docs: |
          The challenge from the "verify" request, otherwise this should not
          be set for other request types.
        validation:
          format: byte
    source:
      openapi: ../openapi.yml
  WebhookEventType:
    enum:
      - part_created
      - part_deleted
      - part_updated
      - rev_org_created
      - rev_org_deleted
      - rev_org_updated
      - tag_created
      - tag_deleted
      - tag_updated
      - timeline_entry_created
      - timeline_entry_deleted
      - timeline_entry_updated
      - verify
      - webhook_created
      - webhook_deleted
      - webhook_updated
      - work_created
      - work_deleted
      - work_updated
    docs: The event types that the webhook will receive.
    source:
      openapi: ../openapi.yml
  WebhookEventVerify:
    properties:
      challenge:
        type: string
        docs: The challenge that must be echoed in the response.
        validation:
          format: byte
    source:
      openapi: ../openapi.yml
  WebhookStatus:
    enum:
      - active
      - inactive
      - unverified
    docs: The status of the webhook.
    source:
      openapi: ../openapi.yml
  WebhooksCreateResponse:
    docs: The response to creating a new webhook.
    properties:
      webhook:
        type: webhook
    source:
      openapi: ../openapi.yml
  WebhooksDeleteResponse:
    type: map<string, unknown>
    docs: The response to deleting the webhook.
  WebhooksGetResponse:
    docs: The response to getting the information for the webhook.
    properties:
      webhook:
        type: webhook
    source:
      openapi: ../openapi.yml
  WebhooksListResponse:
    docs: The response to listing the webhooks.
    properties:
      webhooks:
        docs: The list of webhooks.
        type: list<webhook>
    source:
      openapi: ../openapi.yml
  WebhooksUpdateAction:
    enum:
      - activate
      - deactivate
    docs: The action to update the webhook's status.
    source:
      openapi: ../openapi.yml
  WebhooksUpdateRequestEventTypes:
    properties:
      add:
        type: optional<list<WebhookEventType>>
        docs: |
          The event types to add. If a provided event type is already set for
          the webhook, then nothing is done. Note this is mutually exclusive
          with 'set'.
      remove:
        type: optional<list<WebhookEventType>>
        docs: |
          The event types to remove. If a provided event type isn't set for
          the webhook, then nothing is done. Note this is mutually exclusive
          with 'set'.
      set:
        type: optional<list<WebhookEventType>>
        docs: |
          The updated event types, which will replace the webhook's current
          event types. Note this is mutually exclusive with 'add' and
          'remove'.
    source:
      openapi: ../openapi.yml
  WebhooksUpdateResponse:
    docs: The response to updating the webhook.
    properties:
      webhook:
        type: webhook
    source:
      openapi: ../openapi.yml
  work:
    discriminant: type
    base-properties: {}
    union:
      issue:
        type: issue
      ticket:
        type: ticket
    source:
      openapi: ../openapi.yml
  WorkType:
    enum:
      - issue
      - ticket
    source:
      openapi: ../openapi.yml
  WorksCreateRequest:
    discriminant: type
    base-properties:
      applies_to_part:
        type: string
        docs: |
          The [part](https://devrev.ai/docs/product/parts) that the work
          applies to. Specifying a part is required when creating tickets and
          issues.
      artifacts:
        type: optional<list<string>>
        docs: |
          The IDs of the artifacts to associate with the work item.
      body:
        type: optional<string>
        docs: Body of the work object.
      owned_by:
        docs: The users that own the work.
        type: list<string>
      reported_by:
        type: optional<list<string>>
        docs: The users that reported the work.
      stage: optional<StageInit>
      tags:
        type: optional<list<SetTagWithValue>>
        docs: Tags associated with the work item.
      target_close_date:
        type: optional<datetime>
        docs: Timestamp for when the work is expected to be complete.
      title:
        type: string
        docs: Title of the work object.
    union:
      issue:
        type: WorksCreateRequestIssue
      ticket:
        type: WorksCreateRequestTicket
    source:
      openapi: ../openapi.yml
  WorksCreateRequestIssue:
    properties:
      priority:
        type: optional<IssuePriority>
      sprint:
        type: optional<string>
        docs: The sprint that the issue belongs to.
    source:
      openapi: ../openapi.yml
  WorksCreateRequestTicket:
    properties:
      group:
        type: optional<string>
        docs: The group that the ticket is associated with.
      rev_org:
        type: optional<string>
        docs: The Rev organization that the ticket is associated with.
      severity:
        type: optional<TicketSeverity>
    source:
      openapi: ../openapi.yml
  WorksCreateResponse:
    properties:
      work:
        type: work
    source:
      openapi: ../openapi.yml
  WorksDeleteResponse:
    type: map<string, unknown>
  WorksExportResponse:
    properties:
      works:
        docs: The resulting collection of work items.
        type: list<work>
    source:
      openapi: ../openapi.yml
  WorksGetResponse:
    properties:
      work:
        type: work
    source:
      openapi: ../openapi.yml
  WorksListResponse:
    properties:
      next_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
      prev_cursor:
        type: optional<string>
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
      works:
        docs: The list of works.
        type: list<work>
    source:
      openapi: ../openapi.yml
  WorksUpdateRequest:
    discriminant: type
    base-properties:
      applies_to_part:
        type: optional<string>
        docs: Updates the part that the work applies to.
      artifacts: optional<WorksUpdateRequestArtifactIds>
      body:
        type: optional<string>
        docs: |
          Updated body of the work object, or unchanged if not provided.
      id:
        type: string
        docs: The work's ID.
      owned_by: optional<WorksUpdateRequestOwnedBy>
      reported_by: optional<WorksUpdateRequestReportedBy>
      stage: optional<StageUpdate>
      tags: optional<WorksUpdateRequestTags>
      target_close_date:
        type: optional<datetime>
        docs: |
          Updates the timestamp for when the work is expected to be complete.
      title:
        type: optional<string>
        docs: |
          Updated title of the work object, or unchanged if not provided.
    union:
      issue:
        type: WorksUpdateRequestIssue
      none:
        type: empty
      ticket:
        type: WorksUpdateRequestTicket
    source:
      openapi: ../openapi.yml
  WorksUpdateRequestArtifactIds:
    properties:
      set:
        type: optional<list<string>>
        docs: Sets the IDs to the provided artifact IDs.
    source:
      openapi: ../openapi.yml
  WorksUpdateRequestIssue:
    properties:
      priority:
        type: optional<IssuePriority>
      sprint:
        type: optional<string>
        docs: Updates the sprint that the issue belongs to.
    source:
      openapi: ../openapi.yml
  WorksUpdateRequestOwnedBy:
    properties:
      set:
        type: optional<list<string>>
        docs: |
          Sets the owner IDs to the provided user IDs. This must not be
          empty.
    source:
      openapi: ../openapi.yml
  WorksUpdateRequestReportedBy:
    properties:
      set:
        type: optional<list<string>>
        docs: |
          Sets the users that reported the work to the provided user IDs.
    source:
      openapi: ../openapi.yml
  WorksUpdateRequestTags:
    properties:
      set:
        type: optional<list<SetTagWithValue>>
        docs: Sets the provided tags on the work item.
    source:
      openapi: ../openapi.yml
  WorksUpdateRequestTicket:
    properties:
      group:
        type: optional<string>
        docs: The group that the ticket is associated with.
      rev_org:
        type: optional<string>
        docs: |
          Updates the Rev organization that the ticket is associated with.
      severity:
        type: optional<TicketSeverity>
    source:
      openapi: ../openapi.yml
  WorksUpdateResponse:
    properties:
      work:
        type: work
    source:
      openapi: ../openapi.yml
",
    },
    "artifacts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Artifact (file) management APIs.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "artifacts",
          "endpoints": {
            "locate": {
              "auth": true,
              "docs": "Gets the download URL for the artifact.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                  },
                  "response": {
                    "body": {
                      "expires_at": "2024-01-15T09:30:00Z",
                      "url": "url",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/artifacts.locate",
              "request": {
                "name": "ArtifactsLocateRequest",
                "query-parameters": {
                  "id": {
                    "docs": "The ID of the artifact to get the URL for.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.ArtifactsLocateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "prepare": {
              "auth": true,
              "docs": "Creates an artifact and generates an upload URL for its data.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "file_name": "file_name",
                  },
                  "response": {
                    "body": {
                      "form_data": [
                        {
                          "key": "key",
                          "value": "value",
                        },
                      ],
                      "id": "don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>",
                      "url": "url",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/artifacts.prepare",
              "request": {
                "body": {
                  "properties": {
                    "file_name": {
                      "docs": "The name of the file that's being uploaded.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ArtifactsPrepareRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.ArtifactsPrepareResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    locate:
      path: /artifacts.locate
      method: GET
      auth: true
      docs: Gets the download URL for the artifact.
      source:
        openapi: ../openapi.yml
      request:
        name: ArtifactsLocateRequest
        query-parameters:
          id:
            type: string
            docs: The ID of the artifact to get the URL for.
      response:
        docs: Success.
        type: root.ArtifactsLocateResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          response:
            body:
              expires_at: '2024-01-15T09:30:00Z'
              url: url
    prepare:
      path: /artifacts.prepare
      method: POST
      auth: true
      docs: |
        Creates an artifact and generates an upload URL for its data.
      source:
        openapi: ../openapi.yml
      request:
        name: ArtifactsPrepareRequest
        body:
          properties:
            file_name:
              type: string
              docs: The name of the file that's being uploaded.
        content-type: application/json
      response:
        docs: Success.
        type: root.ArtifactsPrepareResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            file_name: file_name
          response:
            body:
              form_data:
                - key: key
                  value: value
              id: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
              url: url
  source:
    openapi: ../openapi.yml
  display-name: artifacts
docs: Artifact (file) management APIs.
",
    },
    "authConnection.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Auth Connections of DevOrg.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "auth-connection",
          "endpoints": {
            "dev-org-auth-connections-create": {
              "auth": true,
              "docs": "Creates a new enterprise authentication connection for a Dev
organization. This authentication connection will not be enabled by
default for the organization and the user will need to explicitly
enable this. Keep in mind that at a time, only one authentication
connection can be enabled for a Dev organization. At present, only 5
enterprise connections can be created by an organization.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "type": "waad",
                  },
                  "response": {
                    "body": {
                      "auth_connection": {
                        "client_id": "auth_connection",
                        "client_secret": "auth_connection",
                        "display_name": "auth_connection",
                        "domain": "auth_connection",
                        "enabled": true,
                        "id": "auth_connection",
                        "type": "waad",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/dev-orgs.auth-connections.create",
              "request": {
                "body": {
                  "type": "root.DevOrgAuthConnectionsCreateRequest",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.DevOrgAuthConnectionsCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "dev-org-auth-connections-delete": {
              "auth": true,
              "docs": "Deletes an authentication connection. Only enterprise connections which
are explicitly set up for a Dev organization can be deleted. Default
connections can not be deleted using this method.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "id",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/dev-orgs.auth-connections.delete",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "ID of the authentication connection to be deleted.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DevOrgAuthConnectionsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "dev-org-auth-connections-get": {
              "auth": true,
              "docs": "Retrieves the details for an authentication connection.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "auth_connection": {
                        "client_id": "auth_connection",
                        "client_secret": "auth_connection",
                        "display_name": "auth_connection",
                        "domain": "auth_connection",
                        "enabled": true,
                        "id": "auth_connection",
                        "type": "waad",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/dev-orgs.auth-connections.get",
              "request": {
                "name": "DevOrgAuthConnectionsGetRequest",
                "query-parameters": {
                  "id": {
                    "docs": "ID of the authentication connection.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.DevOrgAuthConnectionsGetResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "dev-org-auth-connections-list": {
              "auth": true,
              "docs": "Lists all the authentication connections available for a Dev
organization. This list will include both social and enterprise
connections which are either available by default or are explicitly
created by the user.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "auth_connections": [
                        {
                          "client_id": "auth_connections",
                          "client_secret": "auth_connections",
                          "display_name": "auth_connections",
                          "domain": "auth_connections",
                          "enabled": true,
                          "id": "auth_connections",
                          "type": "waad",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/dev-orgs.auth-connections.list",
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.DevOrgAuthConnectionsListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "dev-org-auth-connections-toggle": {
              "auth": true,
              "docs": "Enable or disable an authentication connection for a Dev organization.
Currently, only 1 authentication connection can be enabled at a time.
When a new authentication connection is enabled, the connection which
is currently enabled for the Dev organization is automatically
disabled.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "id",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/dev-orgs.auth-connections.toggle",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "ID of the authentication connection to be toggled.",
                      "type": "string",
                    },
                    "toggle": {
                      "type": "optional<root.AuthConnectionToggle>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DevOrgAuthConnectionsToggleRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "dev-org-auth-connections-update": {
              "auth": true,
              "docs": "Updates an authentication connection.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "string",
                    "type": "waad",
                  },
                  "response": {
                    "body": {
                      "auth_connection": {
                        "client_id": "auth_connection",
                        "client_secret": "auth_connection",
                        "display_name": "auth_connection",
                        "domain": "auth_connection",
                        "enabled": true,
                        "id": "auth_connection",
                        "type": "waad",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/dev-orgs.auth-connections.update",
              "request": {
                "body": {
                  "type": "root.DevOrgAuthConnectionsUpdateRequest",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.DevOrgAuthConnectionsUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    dev-org-auth-connections-create:
      path: /dev-orgs.auth-connections.create
      method: POST
      auth: true
      docs: |
        Creates a new enterprise authentication connection for a Dev
        organization. This authentication connection will not be enabled by
        default for the organization and the user will need to explicitly
        enable this. Keep in mind that at a time, only one authentication
        connection can be enabled for a Dev organization. At present, only 5
        enterprise connections can be created by an organization.
      source:
        openapi: ../openapi.yml
      request:
        body:
          type: root.DevOrgAuthConnectionsCreateRequest
        content-type: application/json
      response:
        docs: Success.
        type: root.DevOrgAuthConnectionsCreateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            type: waad
          response:
            body:
              auth_connection:
                type: waad
                client_id: auth_connection
                client_secret: auth_connection
                domain: auth_connection
                display_name: auth_connection
                enabled: true
                id: auth_connection
    dev-org-auth-connections-delete:
      path: /dev-orgs.auth-connections.delete
      method: POST
      auth: true
      docs: |
        Deletes an authentication connection. Only enterprise connections which
        are explicitly set up for a Dev organization can be deleted. Default
        connections can not be deleted using this method.
      source:
        openapi: ../openapi.yml
      request:
        name: DevOrgAuthConnectionsDeleteRequest
        body:
          properties:
            id:
              type: string
              docs: ID of the authentication connection to be deleted.
        content-type: application/json
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
    dev-org-auth-connections-get:
      path: /dev-orgs.auth-connections.get
      method: GET
      auth: true
      docs: Retrieves the details for an authentication connection.
      source:
        openapi: ../openapi.yml
      request:
        name: DevOrgAuthConnectionsGetRequest
        query-parameters:
          id:
            type: string
            docs: ID of the authentication connection.
      response:
        docs: Success.
        type: root.DevOrgAuthConnectionsGetResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: id
          response:
            body:
              auth_connection:
                type: waad
                client_id: auth_connection
                client_secret: auth_connection
                domain: auth_connection
                display_name: auth_connection
                enabled: true
                id: auth_connection
    dev-org-auth-connections-list:
      path: /dev-orgs.auth-connections.list
      method: GET
      auth: true
      docs: |
        Lists all the authentication connections available for a Dev
        organization. This list will include both social and enterprise
        connections which are either available by default or are explicitly
        created by the user.
      source:
        openapi: ../openapi.yml
      response:
        docs: Success.
        type: root.DevOrgAuthConnectionsListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              auth_connections:
                - type: waad
                  client_id: auth_connections
                  client_secret: auth_connections
                  domain: auth_connections
                  display_name: auth_connections
                  enabled: true
                  id: auth_connections
    dev-org-auth-connections-toggle:
      path: /dev-orgs.auth-connections.toggle
      method: POST
      auth: true
      docs: |
        Enable or disable an authentication connection for a Dev organization.
        Currently, only 1 authentication connection can be enabled at a time.
        When a new authentication connection is enabled, the connection which
        is currently enabled for the Dev organization is automatically
        disabled.
      source:
        openapi: ../openapi.yml
      request:
        name: DevOrgAuthConnectionsToggleRequest
        body:
          properties:
            id:
              type: string
              docs: ID of the authentication connection to be toggled.
            toggle:
              type: optional<root.AuthConnectionToggle>
        content-type: application/json
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
    dev-org-auth-connections-update:
      path: /dev-orgs.auth-connections.update
      method: POST
      auth: true
      docs: Updates an authentication connection.
      source:
        openapi: ../openapi.yml
      request:
        body:
          type: root.DevOrgAuthConnectionsUpdateRequest
        content-type: application/json
      response:
        docs: Success.
        type: root.DevOrgAuthConnectionsUpdateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            type: waad
            id: string
          response:
            body:
              auth_connection:
                type: waad
                client_id: auth_connection
                client_secret: auth_connection
                domain: auth_connection
                display_name: auth_connection
                enabled: true
                id: auth_connection
  source:
    openapi: ../openapi.yml
  display-name: auth-connection
docs: Auth Connections of DevOrg.
",
    },
    "authTokens.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Security token interactions.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "auth-tokens",
          "endpoints": {
            "create": {
              "auth": true,
              "docs": "Creates a JWT corresponding to the requested token type for the
authenticated user.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "access_token": "access_token",
                      "client_id": "client_id",
                      "expires_in": 1000000,
                      "refresh_token": "refresh_token",
                      "scope": "scope",
                      "token_type": "bearer",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/auth-tokens.create",
              "request": {
                "body": {
                  "properties": {
                    "aud": {
                      "docs": "The expected audience values with respect to the token.",
                      "type": "optional<list<string>>",
                    },
                    "client_id": {
                      "docs": "An identifier that represents the application which is requesting
the token. If no client_id is present in the request to generate an
application access token (AAT), DevRev will generate a client_id.
This client_id is only associated with an AAT.
",
                      "type": "optional<string>",
                    },
                    "expires_in": {
                      "docs": "The expected validity lifetime of the token in number of days.
",
                      "type": "optional<long>",
                    },
                    "grant_type": {
                      "type": "optional<root.AuthTokenGrantType>",
                    },
                    "requested_token_type": {
                      "type": "optional<root.AuthTokenRequestedTokenType>",
                    },
                    "rev_info": {
                      "type": "optional<root.AuthTokensRevInfo>",
                    },
                    "scope": {
                      "docs": "The requested set of scopes associated with the issued token. A
space-delimited list of values in which the order of values does
not matter.
",
                      "type": "optional<string>",
                    },
                    "subject_token": {
                      "docs": "Represents the entity that requests the token. Not required when
requesting an application access token (AAT).
",
                      "type": "optional<string>",
                    },
                    "subject_token_type": {
                      "type": "optional<root.AuthTokenSubjectTokenType>",
                    },
                    "token_hint": {
                      "docs": "A hint that identifies the token.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AuthTokensCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.AuthTokensCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "docs": "Revokes the token that matches the given token ID issued under the
given Dev organization.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {},
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/auth-tokens.delete",
              "request": {
                "body": {
                  "properties": {
                    "token_id": {
                      "docs": "The unique identifier for the token under a given Dev organization.
If no token ID is provided, then the token ID will be set from the
JTI claim of the token in the authorization header.
",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AuthTokensDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "auth": true,
              "docs": "Gets the token metadata corresponding to the given token ID under the
given Dev organization.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "token_id": "token_id",
                  },
                  "response": {
                    "body": {
                      "token": {
                        "client_id": "client_id",
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "expires_at": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "issued_at": "2024-01-15T09:30:00Z",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "scopes",
                        ],
                        "status": "active",
                        "subject": "subject",
                        "token_hint": "token_hint",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/auth-tokens.get",
              "request": {
                "name": "AuthTokensGetRequest",
                "query-parameters": {
                  "token_id": {
                    "docs": "The unique identifier of the token under a given Dev organization.
",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.AuthTokensGetResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "list": {
              "auth": true,
              "docs": "Gets the token metadata for all the tokens corresponding to the given
token type issued for a given subject.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "tokens": [
                        {
                          "client_id": "client_id",
                          "created_by": {
                            "id": "created_by",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "display_id",
                          "expires_at": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "issued_at": "2024-01-15T09:30:00Z",
                          "modified_by": {
                            "id": "modified_by",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                          "scopes": [
                            "scopes",
                          ],
                          "status": "active",
                          "subject": "subject",
                          "token_hint": "token_hint",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/auth-tokens.list",
              "request": {
                "name": "AuthTokensListRequest",
                "query-parameters": {
                  "client_id": {
                    "docs": "An identifier that represents the application, which requested the
token. Only relevant for application access tokens.
",
                    "type": "optional<string>",
                  },
                  "requested_token_type": {
                    "docs": "The type of the requested token. If no value is specified, the
response will include tokens of all the types.
",
                    "type": "optional<root.AuthTokenRequestedTokenType>",
                  },
                  "subject": {
                    "docs": "The subject associated with the token. In the absence of this
parameter, the ID of the authenticated entity is treated as the
subject.
",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.AuthTokensListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "selfDelete": {
              "auth": true,
              "docs": "Revokes all the tokens that matches the given token type created by the
authenticated user.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {},
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/auth-tokens.self.delete",
              "request": {
                "body": {
                  "properties": {
                    "requested_token_type": {
                      "type": "optional<root.AuthTokenRequestedTokenType>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AuthTokensSelfDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "update": {
              "auth": true,
              "docs": "Updates token metadata of a token issued under a given Dev
organization.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "token_hint": "token_hint",
                    "token_id": "token_id",
                  },
                  "response": {
                    "body": {
                      "token": {
                        "client_id": "client_id",
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "expires_at": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "issued_at": "2024-01-15T09:30:00Z",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "scopes",
                        ],
                        "status": "active",
                        "subject": "subject",
                        "token_hint": "token_hint",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/auth-tokens.update",
              "request": {
                "body": {
                  "properties": {
                    "token_hint": {
                      "docs": "A hint that identifies the token.",
                      "type": "string",
                    },
                    "token_id": {
                      "docs": "The unique identifier of the token under a given Dev organization.
",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AuthTokensUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.AuthTokensUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /auth-tokens.create
      method: POST
      auth: true
      docs: |
        Creates a JWT corresponding to the requested token type for the
        authenticated user.
      source:
        openapi: ../openapi.yml
      request:
        name: AuthTokensCreateRequest
        body:
          properties:
            aud:
              type: optional<list<string>>
              docs: The expected audience values with respect to the token.
            client_id:
              type: optional<string>
              docs: >
                An identifier that represents the application which is
                requesting

                the token. If no client_id is present in the request to generate
                an

                application access token (AAT), DevRev will generate a
                client_id.

                This client_id is only associated with an AAT.
            expires_in:
              type: optional<long>
              docs: |
                The expected validity lifetime of the token in number of days.
            grant_type:
              type: optional<root.AuthTokenGrantType>
            requested_token_type:
              type: optional<root.AuthTokenRequestedTokenType>
            rev_info:
              type: optional<root.AuthTokensRevInfo>
            scope:
              type: optional<string>
              docs: |
                The requested set of scopes associated with the issued token. A
                space-delimited list of values in which the order of values does
                not matter.
            subject_token:
              type: optional<string>
              docs: |
                Represents the entity that requests the token. Not required when
                requesting an application access token (AAT).
            subject_token_type:
              type: optional<root.AuthTokenSubjectTokenType>
            token_hint:
              type: optional<string>
              docs: A hint that identifies the token.
        content-type: application/json
      response:
        docs: Success.
        type: root.AuthTokensCreateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              access_token: access_token
              client_id: client_id
              expires_in: 1000000
              refresh_token: refresh_token
              scope: scope
              token_type: bearer
    delete:
      path: /auth-tokens.delete
      method: POST
      auth: true
      docs: |
        Revokes the token that matches the given token ID issued under the
        given Dev organization.
      source:
        openapi: ../openapi.yml
      request:
        name: AuthTokensDeleteRequest
        body:
          properties:
            token_id:
              type: optional<string>
              docs: >
                The unique identifier for the token under a given Dev
                organization.

                If no token ID is provided, then the token ID will be set from
                the

                JTI claim of the token in the authorization header.
        content-type: application/json
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
    get:
      path: /auth-tokens.get
      method: GET
      auth: true
      docs: |
        Gets the token metadata corresponding to the given token ID under the
        given Dev organization.
      source:
        openapi: ../openapi.yml
      request:
        name: AuthTokensGetRequest
        query-parameters:
          token_id:
            type: string
            docs: |
              The unique identifier of the token under a given Dev organization.
      response:
        docs: Success.
        type: root.AuthTokensGetResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            token_id: token_id
          response:
            body:
              token:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                client_id: client_id
                expires_at: '2024-01-15T09:30:00Z'
                issued_at: '2024-01-15T09:30:00Z'
                requested_token_type: urn:devrev:params:oauth:token-type:aat
                scopes:
                  - scopes
                status: active
                subject: subject
                token_hint: token_hint
    list:
      path: /auth-tokens.list
      method: GET
      auth: true
      docs: |
        Gets the token metadata for all the tokens corresponding to the given
        token type issued for a given subject.
      source:
        openapi: ../openapi.yml
      request:
        name: AuthTokensListRequest
        query-parameters:
          client_id:
            type: optional<string>
            docs: |
              An identifier that represents the application, which requested the
              token. Only relevant for application access tokens.
          requested_token_type:
            type: optional<root.AuthTokenRequestedTokenType>
            docs: |
              The type of the requested token. If no value is specified, the
              response will include tokens of all the types.
          subject:
            type: optional<string>
            docs: |
              The subject associated with the token. In the absence of this
              parameter, the ID of the authenticated entity is treated as the
              subject.
      response:
        docs: Success.
        type: root.AuthTokensListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              tokens:
                - created_by:
                    type: sys_user
                    id: created_by
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: display_id
                  id: id
                  modified_by:
                    type: sys_user
                    id: modified_by
                  modified_date: '2024-01-15T09:30:00Z'
                  client_id: client_id
                  expires_at: '2024-01-15T09:30:00Z'
                  issued_at: '2024-01-15T09:30:00Z'
                  requested_token_type: urn:devrev:params:oauth:token-type:aat
                  scopes:
                    - scopes
                  status: active
                  subject: subject
                  token_hint: token_hint
    selfDelete:
      path: /auth-tokens.self.delete
      method: POST
      auth: true
      docs: |
        Revokes all the tokens that matches the given token type created by the
        authenticated user.
      source:
        openapi: ../openapi.yml
      request:
        name: AuthTokensSelfDeleteRequest
        body:
          properties:
            requested_token_type:
              type: optional<root.AuthTokenRequestedTokenType>
        content-type: application/json
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
    update:
      path: /auth-tokens.update
      method: POST
      auth: true
      docs: |
        Updates token metadata of a token issued under a given Dev
        organization.
      source:
        openapi: ../openapi.yml
      request:
        name: AuthTokensUpdateRequest
        body:
          properties:
            token_hint:
              type: string
              docs: A hint that identifies the token.
            token_id:
              type: string
              docs: >
                The unique identifier of the token under a given Dev
                organization.
        content-type: application/json
      response:
        docs: Success.
        type: root.AuthTokensUpdateResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            token_hint: token_hint
            token_id: token_id
          response:
            body:
              token:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                client_id: client_id
                expires_at: '2024-01-15T09:30:00Z'
                issued_at: '2024-01-15T09:30:00Z'
                requested_token_type: urn:devrev:params:oauth:token-type:aat
                scopes:
                  - scopes
                status: active
                subject: subject
                token_hint: token_hint
  source:
    openapi: ../openapi.yml
  display-name: auth-tokens
docs: Security token interactions.
",
    },
    "devUsers.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Dev user interactions.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "dev-users",
          "endpoints": {
            "list": {
              "auth": true,
              "docs": "Lists users within your organization.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "dev_users": [
                        {
                          "created_by": {
                            "id": "created_by",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "display_id",
                          "display_name": "display_name",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "email",
                          "external_identities": [
                            {
                              "key": "value",
                            },
                          ],
                          "full_name": "full_name",
                          "id": "id",
                          "modified_by": {
                            "id": "modified_by",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "phone_numbers": [
                            "phone_numbers",
                          ],
                          "state": "active",
                        },
                      ],
                      "next_cursor": "next_cursor",
                      "prev_cursor": "prev_cursor",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/dev-users.list",
              "request": {
                "name": "DevUsersListRequest",
                "query-parameters": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "email": {
                    "allow-multiple": true,
                    "docs": "Filters Dev users based on email addresses.",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of Dev users to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": {
                    "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                    "type": "optional<root.ListMode>",
                  },
                  "sort_by": {
                    "allow-multiple": true,
                    "docs": "Fields to sort the Dev users by and the direction to sort them.
",
                    "type": "optional<string>",
                  },
                  "state": {
                    "allow-multiple": true,
                    "docs": "Filters Dev users based on state.",
                    "type": "optional<root.UserState>",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.DevUsersListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "self": {
              "auth": true,
              "docs": "Gets the authenticated user's information.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "dev_user": {
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "display_id": "display_id",
                          "id": "id",
                        },
                        "email": "email",
                        "external_identities": [
                          {
                            "key": "value",
                          },
                        ],
                        "full_name": "full_name",
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/dev-users.self",
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.DevUsersSelfResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /dev-users.list
      method: GET
      auth: true
      docs: Lists users within your organization.
      source:
        openapi: ../openapi.yml
      request:
        name: DevUsersListRequest
        query-parameters:
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          email:
            type: optional<string>
            allow-multiple: true
            docs: Filters Dev users based on email addresses.
          limit:
            type: optional<integer>
            docs: |
              The maximum number of Dev users to return. The default is '50'.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
          sort_by:
            type: optional<string>
            allow-multiple: true
            docs: |
              Fields to sort the Dev users by and the direction to sort them.
          state:
            type: optional<root.UserState>
            allow-multiple: true
            docs: Filters Dev users based on state.
      response:
        docs: Success.
        type: root.DevUsersListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              dev_users:
                - created_by:
                    type: sys_user
                    id: created_by
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: display_id
                  id: id
                  modified_by:
                    type: sys_user
                    id: modified_by
                  modified_date: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  display_picture:
                    id: id
                  email: email
                  full_name: full_name
                  phone_numbers:
                    - phone_numbers
                  state: active
                  external_identities:
                    - key: value
              next_cursor: next_cursor
              prev_cursor: prev_cursor
    self:
      path: /dev-users.self
      method: GET
      auth: true
      docs: Gets the authenticated user's information.
      source:
        openapi: ../openapi.yml
      response:
        docs: Success.
        type: root.DevUsersSelfResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              dev_user:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                display_name: display_name
                display_picture:
                  display_id: display_id
                  id: id
                email: email
                full_name: full_name
                phone_numbers:
                  - phone_numbers
                state: active
                external_identities:
                  - key: value
  source:
    openapi: ../openapi.yml
  display-name: dev-users
docs: Dev user interactions.
",
    },
    "parts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "DevRev part interactions.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "parts",
          "endpoints": {
            "create": {
              "auth": true,
              "docs": "Creates new [part](https://devrev.ai/docs/product/parts).",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "name": "string",
                    "owned_by": [
                      "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>",
                    ],
                    "parent_part": [
                      "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                    ],
                    "type": "feature",
                  },
                  "response": {
                    "body": {
                      "part": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_by": {
                          "display_id": "part",
                          "display_name": "part",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "part",
                          "full_name": "part",
                          "id": "part",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "part",
                        "display_id": "part",
                        "id": "part",
                        "modified_by": {
                          "display_id": "part",
                          "display_name": "part",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "part",
                          "full_name": "part",
                          "id": "part",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "name": "part",
                        "owned_by": [
                          {
                            "id": "part",
                            "type": "sys_user",
                          },
                        ],
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "type": "product",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/parts.create",
              "request": {
                "body": {
                  "type": "root.PartsCreateRequest",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.PartsCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "docs": "Deletes a [part](https://devrev.ai/docs/product/parts).",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/parts.delete",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "The ID of the part to delete.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "PartsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.PartsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "auth": true,
              "docs": "Gets a [part's](https://devrev.ai/docs/product/parts) information.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                  },
                  "response": {
                    "body": {
                      "part": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_by": {
                          "display_id": "part",
                          "display_name": "part",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "part",
                          "full_name": "part",
                          "id": "part",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "part",
                        "display_id": "part",
                        "id": "part",
                        "modified_by": {
                          "display_id": "part",
                          "display_name": "part",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "part",
                          "full_name": "part",
                          "id": "part",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "name": "part",
                        "owned_by": [
                          {
                            "id": "part",
                            "type": "sys_user",
                          },
                        ],
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "type": "product",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/parts.get",
              "request": {
                "name": "PartsGetRequest",
                "query-parameters": {
                  "id": {
                    "docs": "The ID of the part to retrieve.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.PartsGetResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "list": {
              "auth": true,
              "docs": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "next_cursor": "next_cursor",
                      "parts": [
                        {
                          "artifacts": [
                            {
                              "id": "id",
                            },
                          ],
                          "created_by": {
                            "id": "parts",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "description": "parts",
                          "display_id": "parts",
                          "id": "parts",
                          "modified_by": {
                            "id": "parts",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "name": "parts",
                          "owned_by": [
                            {
                              "id": "parts",
                              "type": "sys_user",
                            },
                          ],
                          "tags": [
                            {
                              "tag": {
                                "id": "id",
                                "name": "name",
                              },
                            },
                          ],
                          "type": "product",
                        },
                      ],
                      "prev_cursor": "prev_cursor",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/parts.list",
              "request": {
                "name": "PartsListRequest",
                "query-parameters": {
                  "created_by": {
                    "allow-multiple": true,
                    "docs": "Filters for parts created by any of these users.",
                    "type": "optional<string>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of parts to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": {
                    "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                    "type": "optional<root.ListMode>",
                  },
                  "name": {
                    "allow-multiple": true,
                    "docs": "Filters for parts of the provided name(s).",
                    "type": "optional<string>",
                  },
                  "owned_by": {
                    "allow-multiple": true,
                    "docs": "Filters for parts owned by any of these users.",
                    "type": "optional<string>",
                  },
                  "type": {
                    "allow-multiple": true,
                    "docs": "Filters for parts of the provided type(s).",
                    "type": "optional<root.PartType>",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.PartsListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "update": {
              "auth": true,
              "docs": "Updates a [part's](https://devrev.ai/docs/product/parts) information.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                    "type": "enhancement",
                  },
                  "response": {
                    "body": {
                      "part": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_by": {
                          "display_id": "part",
                          "display_name": "part",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "part",
                          "full_name": "part",
                          "id": "part",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "part",
                        "display_id": "part",
                        "id": "part",
                        "modified_by": {
                          "display_id": "part",
                          "display_name": "part",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "part",
                          "full_name": "part",
                          "id": "part",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "name": "part",
                        "owned_by": [
                          {
                            "id": "part",
                            "type": "sys_user",
                          },
                        ],
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "type": "product",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/parts.update",
              "request": {
                "body": {
                  "type": "root.PartsUpdateRequest",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.PartsUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /parts.create
      method: POST
      auth: true
      docs: Creates new [part](https://devrev.ai/docs/product/parts).
      source:
        openapi: ../openapi.yml
      request:
        body:
          type: root.PartsCreateRequest
        content-type: application/json
      response:
        docs: Success.
        type: root.PartsCreateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            type: feature
            parent_part:
              - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
            name: string
            owned_by:
              - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          response:
            body:
              part:
                type: product
                created_by:
                  type: sys_user
                  display_id: part
                  id: part
                  display_name: part
                  display_picture:
                    id: id
                  email: part
                  full_name: part
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: part
                id: part
                modified_by:
                  type: sys_user
                  display_id: part
                  id: part
                  display_name: part
                  display_picture:
                    id: id
                  email: part
                  full_name: part
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                artifacts:
                  - id: id
                description: part
                name: part
                owned_by:
                  - type: sys_user
                    id: part
                tags:
                  - tag:
                      id: id
                      name: name
    delete:
      path: /parts.delete
      method: POST
      auth: true
      docs: Deletes a [part](https://devrev.ai/docs/product/parts).
      source:
        openapi: ../openapi.yml
      request:
        name: PartsDeleteRequest
        body:
          properties:
            id:
              type: string
              docs: The ID of the part to delete.
        content-type: application/json
      response:
        docs: Success.
        type: root.PartsDeleteResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          response:
            body:
              key: value
    get:
      path: /parts.get
      method: GET
      auth: true
      docs: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      source:
        openapi: ../openapi.yml
      request:
        name: PartsGetRequest
        query-parameters:
          id:
            type: string
            docs: The ID of the part to retrieve.
      response:
        docs: Success.
        type: root.PartsGetResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          response:
            body:
              part:
                type: product
                created_by:
                  type: sys_user
                  display_id: part
                  id: part
                  display_name: part
                  display_picture:
                    id: id
                  email: part
                  full_name: part
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: part
                id: part
                modified_by:
                  type: sys_user
                  display_id: part
                  id: part
                  display_name: part
                  display_picture:
                    id: id
                  email: part
                  full_name: part
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                artifacts:
                  - id: id
                description: part
                name: part
                owned_by:
                  - type: sys_user
                    id: part
                tags:
                  - tag:
                      id: id
                      name: name
    list:
      path: /parts.list
      method: GET
      auth: true
      docs: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      source:
        openapi: ../openapi.yml
      request:
        name: PartsListRequest
        query-parameters:
          created_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for parts created by any of these users.
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          limit:
            type: optional<integer>
            docs: |
              The maximum number of parts to return. The default is '50'.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
          name:
            type: optional<string>
            allow-multiple: true
            docs: Filters for parts of the provided name(s).
          owned_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for parts owned by any of these users.
          type:
            type: optional<root.PartType>
            allow-multiple: true
            docs: Filters for parts of the provided type(s).
      response:
        docs: Success.
        type: root.PartsListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              next_cursor: next_cursor
              parts:
                - type: product
                  created_by:
                    type: sys_user
                    id: parts
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: parts
                  id: parts
                  modified_by:
                    type: sys_user
                    id: parts
                  modified_date: '2024-01-15T09:30:00Z'
                  artifacts:
                    - id: id
                  description: parts
                  name: parts
                  owned_by:
                    - type: sys_user
                      id: parts
                  tags:
                    - tag:
                        id: id
                        name: name
              prev_cursor: prev_cursor
    update:
      path: /parts.update
      method: POST
      auth: true
      docs: |
        Updates a [part's](https://devrev.ai/docs/product/parts) information.
      source:
        openapi: ../openapi.yml
      request:
        body:
          type: root.PartsUpdateRequest
        content-type: application/json
      response:
        docs: Success.
        type: root.PartsUpdateResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            type: enhancement
            id: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          response:
            body:
              part:
                type: product
                created_by:
                  type: sys_user
                  display_id: part
                  id: part
                  display_name: part
                  display_picture:
                    id: id
                  email: part
                  full_name: part
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: part
                id: part
                modified_by:
                  type: sys_user
                  display_id: part
                  id: part
                  display_name: part
                  display_picture:
                    id: id
                  email: part
                  full_name: part
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                artifacts:
                  - id: id
                description: part
                name: part
                owned_by:
                  - type: sys_user
                    id: part
                tags:
                  - tag:
                      id: id
                      name: name
  source:
    openapi: ../openapi.yml
  display-name: parts
docs: DevRev part interactions.
",
    },
    "revOrgs.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Rev organization interactions.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "rev-orgs",
          "endpoints": {
            "create": {
              "auth": true,
              "docs": "Creates a Rev organization in the authenticated user's Dev
organization.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "display_name": "display_name",
                  },
                  "response": {
                    "body": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domain": "domain",
                        "external_ref": "external_ref",
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/rev-orgs.create",
              "request": {
                "body": {
                  "properties": {
                    "description": {
                      "docs": "Description of the Rev organization.",
                      "type": "optional<string>",
                    },
                    "display_name": {
                      "docs": "Name of the Rev organization.",
                      "type": "string",
                    },
                    "domain": {
                      "docs": "Company's domain name. Example - 'devrev.ai'.",
                      "type": "optional<string>",
                    },
                    "environment": {
                      "type": "optional<root.OrgEnvironment>",
                    },
                    "external_ref": {
                      "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                      "type": "optional<string>",
                    },
                    "tier": {
                      "docs": "The tier of the RevOrg.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RevOrgsCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.RevOrgsCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "docs": "Deletes the Rev organization.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/rev-orgs.delete",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "The ID of Rev organization to delete.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RevOrgsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.RevOrgsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "auth": true,
              "docs": "Retrieves the Rev organization's information.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                  },
                  "response": {
                    "body": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domain": "domain",
                        "external_ref": "external_ref",
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/rev-orgs.get",
              "request": {
                "name": "RevOrgsGetRequest",
                "query-parameters": {
                  "id": {
                    "docs": "The ID of the required Rev organization.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.RevOrgsGetResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "list": {
              "auth": true,
              "docs": "Gets the list of Rev organizations' information belonging to the
authenticated user's Dev Organization which the user is also authorized
to access.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "next_cursor": "next_cursor",
                      "prev_cursor": "prev_cursor",
                      "rev_orgs": [
                        {
                          "created_by": {
                            "id": "created_by",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "description": "description",
                          "display_id": "display_id",
                          "display_name": "display_name",
                          "domain": "domain",
                          "external_ref": "external_ref",
                          "id": "id",
                          "modified_by": {
                            "id": "modified_by",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/rev-orgs.list",
              "request": {
                "name": "RevOrgsListRequest",
                "query-parameters": {
                  "created_by": {
                    "allow-multiple": true,
                    "docs": "Filters by creator.",
                    "type": "optional<string>",
                  },
                  "created_date.after": {
                    "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                    "type": "optional<datetime>",
                  },
                  "created_date.before": {
                    "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                    "type": "optional<datetime>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "external_ref": {
                    "allow-multiple": true,
                    "docs": "List of external refs to filter Rev organizations for.",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of Rev organizations to be retrieved per page.
",
                    "type": "optional<integer>",
                  },
                  "mode": {
                    "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                    "type": "optional<root.ListMode>",
                  },
                  "modified_date.after": {
                    "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                    "type": "optional<datetime>",
                  },
                  "modified_date.before": {
                    "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                    "type": "optional<datetime>",
                  },
                  "sort_by": {
                    "allow-multiple": true,
                    "docs": "Fields to sort the Rev organizations by and the direction to sort
them.
",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.RevOrgsListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "update": {
              "auth": true,
              "docs": "Updates the Rev organization's information.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                  },
                  "response": {
                    "body": {
                      "rev_org": {
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domain": "domain",
                        "external_ref": "external_ref",
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/rev-orgs.update",
              "request": {
                "body": {
                  "properties": {
                    "description": {
                      "docs": "Description of the Rev organization.",
                      "type": "optional<string>",
                    },
                    "display_name": {
                      "docs": "Customer chosen name for the Rev organization.",
                      "type": "optional<string>",
                    },
                    "domain": {
                      "docs": "Company's domain name. Example - 'devrev.ai'.",
                      "type": "optional<string>",
                    },
                    "environment": {
                      "type": "optional<root.OrgEnvironment>",
                    },
                    "external_ref": {
                      "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                      "type": "optional<string>",
                    },
                    "id": {
                      "docs": "The ID of Rev organization to update.",
                      "type": "string",
                    },
                    "tier": {
                      "docs": "The tier of the RevOrg.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RevOrgsUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.RevOrgsUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /rev-orgs.create
      method: POST
      auth: true
      docs: |
        Creates a Rev organization in the authenticated user's Dev
        organization.
      source:
        openapi: ../openapi.yml
      request:
        name: RevOrgsCreateRequest
        body:
          properties:
            description:
              type: optional<string>
              docs: Description of the Rev organization.
            display_name:
              type: string
              docs: Name of the Rev organization.
            domain:
              type: optional<string>
              docs: Company's domain name. Example - 'devrev.ai'.
            environment:
              type: optional<root.OrgEnvironment>
            external_ref:
              type: optional<string>
              docs: >
                External ref is a custom unique identifier which is a reference
                to

                an unique id for this organization's data in some system of

                records.
            tier:
              type: optional<string>
              docs: The tier of the RevOrg.
        content-type: application/json
      response:
        docs: Success.
        type: root.RevOrgsCreateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            display_name: display_name
          response:
            body:
              rev_org:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                display_name: display_name
                description: description
                domain: domain
                external_ref: external_ref
    delete:
      path: /rev-orgs.delete
      method: POST
      auth: true
      docs: Deletes the Rev organization.
      source:
        openapi: ../openapi.yml
      request:
        name: RevOrgsDeleteRequest
        body:
          properties:
            id:
              type: string
              docs: The ID of Rev organization to delete.
        content-type: application/json
      response:
        docs: Success.
        type: root.RevOrgsDeleteResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          response:
            body:
              key: value
    get:
      path: /rev-orgs.get
      method: GET
      auth: true
      docs: Retrieves the Rev organization's information.
      source:
        openapi: ../openapi.yml
      request:
        name: RevOrgsGetRequest
        query-parameters:
          id:
            type: string
            docs: The ID of the required Rev organization.
      response:
        docs: Success.
        type: root.RevOrgsGetResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          response:
            body:
              rev_org:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                display_name: display_name
                description: description
                domain: domain
                external_ref: external_ref
    list:
      path: /rev-orgs.list
      method: GET
      auth: true
      docs: |
        Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      source:
        openapi: ../openapi.yml
      request:
        name: RevOrgsListRequest
        query-parameters:
          created_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters by creator.
          created_date.after:
            type: optional<datetime>
            docs: >
              Filters for objects created after the provided timestamp
              (inclusive).
          created_date.before:
            type: optional<datetime>
            docs: |
              Filters for objects created before the provided timestamp
              (inclusive).
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          external_ref:
            type: optional<string>
            allow-multiple: true
            docs: List of external refs to filter Rev organizations for.
          limit:
            type: optional<integer>
            docs: |
              The maximum number of Rev organizations to be retrieved per page.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
          modified_date.after:
            type: optional<datetime>
            docs: >
              Filters for objects created after the provided timestamp
              (inclusive).
          modified_date.before:
            type: optional<datetime>
            docs: |
              Filters for objects created before the provided timestamp
              (inclusive).
          sort_by:
            type: optional<string>
            allow-multiple: true
            docs: |
              Fields to sort the Rev organizations by and the direction to sort
              them.
      response:
        docs: Success.
        type: root.RevOrgsListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              next_cursor: next_cursor
              prev_cursor: prev_cursor
              rev_orgs:
                - created_by:
                    type: sys_user
                    id: created_by
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: display_id
                  id: id
                  modified_by:
                    type: sys_user
                    id: modified_by
                  modified_date: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  description: description
                  domain: domain
                  external_ref: external_ref
    update:
      path: /rev-orgs.update
      method: POST
      auth: true
      docs: Updates the Rev organization's information.
      source:
        openapi: ../openapi.yml
      request:
        name: RevOrgsUpdateRequest
        body:
          properties:
            description:
              type: optional<string>
              docs: Description of the Rev organization.
            display_name:
              type: optional<string>
              docs: Customer chosen name for the Rev organization.
            domain:
              type: optional<string>
              docs: Company's domain name. Example - 'devrev.ai'.
            environment:
              type: optional<root.OrgEnvironment>
            external_ref:
              type: optional<string>
              docs: >
                External ref is a custom unique identifier which is a reference
                to

                an unique id for this organization's data in some system of

                records.
            id:
              type: string
              docs: The ID of Rev organization to update.
            tier:
              type: optional<string>
              docs: The tier of the RevOrg.
        content-type: application/json
      response:
        docs: Success.
        type: root.RevOrgsUpdateResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          response:
            body:
              rev_org:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                display_name: display_name
                description: description
                domain: domain
                external_ref: external_ref
  source:
    openapi: ../openapi.yml
  display-name: rev-orgs
docs: Rev organization interactions.
",
    },
    "tags.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "DevRev tag interactions.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "tags",
          "endpoints": {
            "create": {
              "auth": true,
              "docs": "Creates a new tag, which is used to create associations between objects
and a logical concept denoted by the tag's name.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "tag": {
                        "allowed_values": [
                          "allowed_values",
                        ],
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "name": "name",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/tags.create",
              "request": {
                "body": {
                  "properties": {
                    "allowed_values": {
                      "docs": "The allowed values for the tag, or empty if no values are
permitted.
",
                      "type": "optional<list<string>>",
                    },
                    "description": {
                      "docs": "The description for the tag.",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "The name for the tag, which must be unique across all tags.
",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TagsCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.TagsCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "docs": "Deletes a tag.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/tags.delete",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "The ID of the tag to delete.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TagsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.TagsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "auth": true,
              "docs": "Gets a tag's information.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                  },
                  "response": {
                    "body": {
                      "tag": {
                        "allowed_values": [
                          "allowed_values",
                        ],
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "name": "name",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/tags.get",
              "request": {
                "name": "TagsGetRequest",
                "query-parameters": {
                  "id": {
                    "docs": "The requested tag's ID.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.TagsGetResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "list": {
              "auth": true,
              "docs": "Lists the available tags.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "next_cursor": "next_cursor",
                      "prev_cursor": "prev_cursor",
                      "tags": [
                        {
                          "allowed_values": [
                            "allowed_values",
                          ],
                          "created_by": {
                            "id": "created_by",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "description": "description",
                          "display_id": "display_id",
                          "id": "id",
                          "modified_by": {
                            "id": "modified_by",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "name": "name",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/tags.list",
              "request": {
                "name": "TagsListRequest",
                "query-parameters": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of tags to return. The default is '50'.",
                    "type": "optional<integer>",
                  },
                  "mode": {
                    "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                    "type": "optional<root.ListMode>",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.TagsListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "update": {
              "auth": true,
              "docs": "Updates a tag's information.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                  },
                  "response": {
                    "body": {
                      "tag": {
                        "allowed_values": [
                          "allowed_values",
                        ],
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "name": "name",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/tags.update",
              "request": {
                "body": {
                  "properties": {
                    "allowed_values": {
                      "type": "optional<root.TagsUpdateAllowedValues>",
                    },
                    "description": {
                      "docs": "The updated description of the tag.",
                      "type": "optional<string>",
                    },
                    "id": {
                      "docs": "The ID of the tag to update.",
                      "type": "string",
                    },
                    "name": {
                      "docs": "The updated name of the tag. The name must be unique across all
tags.
",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TagsUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.TagsUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /tags.create
      method: POST
      auth: true
      docs: |
        Creates a new tag, which is used to create associations between objects
        and a logical concept denoted by the tag's name.
      source:
        openapi: ../openapi.yml
      request:
        name: TagsCreateRequest
        body:
          properties:
            allowed_values:
              type: optional<list<string>>
              docs: |
                The allowed values for the tag, or empty if no values are
                permitted.
            description:
              type: optional<string>
              docs: The description for the tag.
            name:
              type: string
              docs: |
                The name for the tag, which must be unique across all tags.
        content-type: application/json
      response:
        docs: Success.
        type: root.TagsCreateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            name: name
          response:
            body:
              tag:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                allowed_values:
                  - allowed_values
                description: description
                name: name
    delete:
      path: /tags.delete
      method: POST
      auth: true
      docs: Deletes a tag.
      source:
        openapi: ../openapi.yml
      request:
        name: TagsDeleteRequest
        body:
          properties:
            id:
              type: string
              docs: The ID of the tag to delete.
        content-type: application/json
      response:
        docs: Success.
        type: root.TagsDeleteResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          response:
            body:
              key: value
    get:
      path: /tags.get
      method: GET
      auth: true
      docs: Gets a tag's information.
      source:
        openapi: ../openapi.yml
      request:
        name: TagsGetRequest
        query-parameters:
          id:
            type: string
            docs: The requested tag's ID.
      response:
        docs: Success.
        type: root.TagsGetResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          response:
            body:
              tag:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                allowed_values:
                  - allowed_values
                description: description
                name: name
    list:
      path: /tags.list
      method: GET
      auth: true
      docs: Lists the available tags.
      source:
        openapi: ../openapi.yml
      request:
        name: TagsListRequest
        query-parameters:
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          limit:
            type: optional<integer>
            docs: The maximum number of tags to return. The default is '50'.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
      response:
        docs: Success.
        type: root.TagsListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              next_cursor: next_cursor
              prev_cursor: prev_cursor
              tags:
                - created_by:
                    type: sys_user
                    id: created_by
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: display_id
                  id: id
                  modified_by:
                    type: sys_user
                    id: modified_by
                  modified_date: '2024-01-15T09:30:00Z'
                  allowed_values:
                    - allowed_values
                  description: description
                  name: name
    update:
      path: /tags.update
      method: POST
      auth: true
      docs: Updates a tag's information.
      source:
        openapi: ../openapi.yml
      request:
        name: TagsUpdateRequest
        body:
          properties:
            allowed_values:
              type: optional<root.TagsUpdateAllowedValues>
            description:
              type: optional<string>
              docs: The updated description of the tag.
            id:
              type: string
              docs: The ID of the tag to update.
            name:
              type: optional<string>
              docs: |
                The updated name of the tag. The name must be unique across all
                tags.
        content-type: application/json
      response:
        docs: Success.
        type: root.TagsUpdateResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          response:
            body:
              tag:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                allowed_values:
                  - allowed_values
                description: description
                name: name
  source:
    openapi: ../openapi.yml
  display-name: tags
docs: DevRev tag interactions.
",
    },
    "timelineEntries.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "APIs to manage timeline entries for objects.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "timeline-entries",
          "endpoints": {
            "create": {
              "auth": true,
              "docs": "Creates a new entry on an object's timeline.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "object": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                    "type": "timeline_comment",
                  },
                  "response": {
                    "body": {
                      "timeline_entry": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "body": "timeline_entry",
                        "body_type": "snap_kit",
                        "created_by": {
                          "display_id": "timeline_entry",
                          "display_name": "timeline_entry",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "timeline_entry",
                          "full_name": "timeline_entry",
                          "id": "timeline_entry",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "timeline_entry",
                        "id": "timeline_entry",
                        "modified_by": {
                          "display_id": "timeline_entry",
                          "display_name": "timeline_entry",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "timeline_entry",
                          "full_name": "timeline_entry",
                          "id": "timeline_entry",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "snap_kit_body": {
                          "key": "value",
                        },
                        "type": "timeline_comment",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/timeline-entries.create",
              "request": {
                "body": {
                  "type": "root.TimelineEntriesCreateRequest",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.TimelineEntriesCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "auth": true,
              "docs": "Gets an entry on an object's timeline.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "timeline_entry": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "body": "timeline_entry",
                        "body_type": "snap_kit",
                        "created_by": {
                          "display_id": "timeline_entry",
                          "display_name": "timeline_entry",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "timeline_entry",
                          "full_name": "timeline_entry",
                          "id": "timeline_entry",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "timeline_entry",
                        "id": "timeline_entry",
                        "modified_by": {
                          "display_id": "timeline_entry",
                          "display_name": "timeline_entry",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "timeline_entry",
                          "full_name": "timeline_entry",
                          "id": "timeline_entry",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "snap_kit_body": {
                          "key": "value",
                        },
                        "type": "timeline_comment",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/timeline-entries.get",
              "request": {
                "name": "TimelineEntriesGetRequest",
                "query-parameters": {
                  "id": {
                    "docs": "The ID of the timeline entry to get.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.TimelineEntriesGetResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "list": {
              "auth": true,
              "docs": "Lists the timeline entries for an object.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "object": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                  },
                  "response": {
                    "body": {
                      "next_cursor": "next_cursor",
                      "prev_cursor": "prev_cursor",
                      "timeline_entries": [
                        {
                          "artifacts": [
                            {
                              "id": "id",
                            },
                          ],
                          "body": "timeline_entries",
                          "body_type": "snap_kit",
                          "created_by": {
                            "id": "timeline_entries",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "timeline_entries",
                          "id": "timeline_entries",
                          "modified_by": {
                            "id": "timeline_entries",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "snap_kit_body": {
                            "key": "value",
                          },
                          "type": "timeline_comment",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/timeline-entries.list",
              "request": {
                "name": "TimelineEntriesListRequest",
                "query-parameters": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of entries to return. If not set, then this
defaults to `50`.
",
                    "type": "optional<integer>",
                  },
                  "mode": {
                    "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                    "type": "optional<root.ListMode>",
                  },
                  "object": {
                    "docs": "The ID of the object to list timeline entries for.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.TimelineEntriesListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "update": {
              "auth": true,
              "docs": "Updates an entry on an object's timeline.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "string",
                    "type": "timeline_comment",
                  },
                  "response": {
                    "body": {
                      "timeline_entry": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "body": "timeline_entry",
                        "body_type": "snap_kit",
                        "created_by": {
                          "display_id": "timeline_entry",
                          "display_name": "timeline_entry",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "timeline_entry",
                          "full_name": "timeline_entry",
                          "id": "timeline_entry",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "timeline_entry",
                        "id": "timeline_entry",
                        "modified_by": {
                          "display_id": "timeline_entry",
                          "display_name": "timeline_entry",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "timeline_entry",
                          "full_name": "timeline_entry",
                          "id": "timeline_entry",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "snap_kit_body": {
                          "key": "value",
                        },
                        "type": "timeline_comment",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/timeline-entries.update",
              "request": {
                "body": {
                  "type": "root.TimelineEntriesUpdateRequest",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.TimelineEntriesUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /timeline-entries.create
      method: POST
      auth: true
      docs: Creates a new entry on an object's timeline.
      source:
        openapi: ../openapi.yml
      request:
        body:
          type: root.TimelineEntriesCreateRequest
        content-type: application/json
      response:
        docs: Success.
        type: root.TimelineEntriesCreateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            type: timeline_comment
            object: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          response:
            body:
              timeline_entry:
                type: timeline_comment
                created_by:
                  type: sys_user
                  display_id: timeline_entry
                  id: timeline_entry
                  display_name: timeline_entry
                  display_picture:
                    id: id
                  email: timeline_entry
                  full_name: timeline_entry
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: timeline_entry
                id: timeline_entry
                modified_by:
                  type: sys_user
                  display_id: timeline_entry
                  id: timeline_entry
                  display_name: timeline_entry
                  display_picture:
                    id: id
                  email: timeline_entry
                  full_name: timeline_entry
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                artifacts:
                  - id: id
                body: timeline_entry
                body_type: snap_kit
                snap_kit_body:
                  key: value
    get:
      path: /timeline-entries.get
      method: GET
      auth: true
      docs: Gets an entry on an object's timeline.
      source:
        openapi: ../openapi.yml
      request:
        name: TimelineEntriesGetRequest
        query-parameters:
          id:
            type: string
            docs: The ID of the timeline entry to get.
      response:
        docs: Success.
        type: root.TimelineEntriesGetResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: id
          response:
            body:
              timeline_entry:
                type: timeline_comment
                created_by:
                  type: sys_user
                  display_id: timeline_entry
                  id: timeline_entry
                  display_name: timeline_entry
                  display_picture:
                    id: id
                  email: timeline_entry
                  full_name: timeline_entry
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: timeline_entry
                id: timeline_entry
                modified_by:
                  type: sys_user
                  display_id: timeline_entry
                  id: timeline_entry
                  display_name: timeline_entry
                  display_picture:
                    id: id
                  email: timeline_entry
                  full_name: timeline_entry
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                artifacts:
                  - id: id
                body: timeline_entry
                body_type: snap_kit
                snap_kit_body:
                  key: value
    list:
      path: /timeline-entries.list
      method: GET
      auth: true
      docs: Lists the timeline entries for an object.
      source:
        openapi: ../openapi.yml
      request:
        name: TimelineEntriesListRequest
        query-parameters:
          object:
            type: string
            docs: The ID of the object to list timeline entries for.
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          limit:
            type: optional<integer>
            docs: |
              The maximum number of entries to return. If not set, then this
              defaults to `50`.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
      response:
        docs: Success.
        type: root.TimelineEntriesListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            object: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          response:
            body:
              next_cursor: next_cursor
              prev_cursor: prev_cursor
              timeline_entries:
                - type: timeline_comment
                  created_by:
                    type: sys_user
                    id: timeline_entries
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: timeline_entries
                  id: timeline_entries
                  modified_by:
                    type: sys_user
                    id: timeline_entries
                  modified_date: '2024-01-15T09:30:00Z'
                  artifacts:
                    - id: id
                  body: timeline_entries
                  body_type: snap_kit
                  snap_kit_body:
                    key: value
    update:
      path: /timeline-entries.update
      method: POST
      auth: true
      docs: Updates an entry on an object's timeline.
      source:
        openapi: ../openapi.yml
      request:
        body:
          type: root.TimelineEntriesUpdateRequest
        content-type: application/json
      response:
        docs: Success.
        type: root.TimelineEntriesUpdateResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            type: timeline_comment
            id: string
          response:
            body:
              timeline_entry:
                type: timeline_comment
                created_by:
                  type: sys_user
                  display_id: timeline_entry
                  id: timeline_entry
                  display_name: timeline_entry
                  display_picture:
                    id: id
                  email: timeline_entry
                  full_name: timeline_entry
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: timeline_entry
                id: timeline_entry
                modified_by:
                  type: sys_user
                  display_id: timeline_entry
                  id: timeline_entry
                  display_name: timeline_entry
                  display_picture:
                    id: id
                  email: timeline_entry
                  full_name: timeline_entry
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                artifacts:
                  - id: id
                body: timeline_entry
                body_type: snap_kit
                snap_kit_body:
                  key: value
  source:
    openapi: ../openapi.yml
  display-name: timeline-entries
docs: APIs to manage timeline entries for objects.
",
    },
    "webhooks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "Webhook event APIs.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "webhooks",
          "endpoints": {
            "create": {
              "auth": true,
              "docs": "Creates a new webhook target.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "url": "url",
                  },
                  "response": {
                    "body": {
                      "webhook": {
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "event_types": [
                          "part_created",
                        ],
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "secret": "secret",
                        "status": "active",
                        "url": "url",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks.create",
              "request": {
                "body": {
                  "properties": {
                    "event_types": {
                      "docs": "The event types that the webhook endpoint will receive.",
                      "type": "optional<list<root.WebhookEventType>>",
                    },
                    "secret": {
                      "docs": "The secret to use when verifying webhook events. If provided, the
secret must be between 8 and 32 bytes (inclusive). If not set, a
secret will be automatically generated and provided in the
response.
",
                      "type": "optional<string>",
                      "validation": {
                        "format": "byte",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "url": {
                      "docs": "The URL of the webhook endpoint.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhooksCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.WebhooksCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "docs": "Deletes the requested webhook.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks.delete",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "ID for the webhook.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhooksDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WebhooksDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "auth": true,
              "docs": "Gets the requested webhook's information.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                  },
                  "response": {
                    "body": {
                      "webhook": {
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "event_types": [
                          "part_created",
                        ],
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "secret": "secret",
                        "status": "active",
                        "url": "url",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/webhooks.get",
              "request": {
                "name": "WebhooksGetRequest",
                "query-parameters": {
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WebhooksGetResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "list": {
              "auth": true,
              "docs": "Lists the webhooks.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "webhooks": [
                        {
                          "created_by": {
                            "id": "created_by",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "display_id",
                          "event_types": [
                            "part_created",
                          ],
                          "id": "id",
                          "modified_by": {
                            "id": "modified_by",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "secret": "secret",
                          "status": "active",
                          "url": "url",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/webhooks.list",
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WebhooksListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "update": {
              "auth": true,
              "docs": "Updates the requested webhook.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>",
                  },
                  "response": {
                    "body": {
                      "webhook": {
                        "created_by": {
                          "display_id": "created_by",
                          "display_name": "created_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "created_by",
                          "full_name": "created_by",
                          "id": "created_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "display_id",
                        "event_types": [
                          "part_created",
                        ],
                        "id": "id",
                        "modified_by": {
                          "display_id": "modified_by",
                          "display_name": "modified_by",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "modified_by",
                          "full_name": "modified_by",
                          "id": "modified_by",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "secret": "secret",
                        "status": "active",
                        "url": "url",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks.update",
              "request": {
                "body": {
                  "properties": {
                    "action": {
                      "type": "optional<root.WebhooksUpdateAction>",
                    },
                    "event_types": {
                      "type": "optional<root.WebhooksUpdateRequestEventTypes>",
                    },
                    "id": {
                      "docs": "ID for the webhook.",
                      "type": "string",
                    },
                    "secret": {
                      "docs": "If provided, updates the secret that's used when verifying webhook
events, which must be between 8 and 32 bytes (inclusive). Otherwise
if empty, then a new secret is generated. If the webhook is active,
then its status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                      "type": "optional<string>",
                      "validation": {
                        "format": "byte",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "url": {
                      "docs": "The webhook's updated URL. If the webhook is active, then the
webhook's status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhooksUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WebhooksUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /webhooks.create
      method: POST
      auth: true
      docs: Creates a new webhook target.
      source:
        openapi: ../openapi.yml
      request:
        name: WebhooksCreateRequest
        body:
          properties:
            event_types:
              type: optional<list<root.WebhookEventType>>
              docs: The event types that the webhook endpoint will receive.
            secret:
              type: optional<string>
              docs: >
                The secret to use when verifying webhook events. If provided,
                the

                secret must be between 8 and 32 bytes (inclusive). If not set, a

                secret will be automatically generated and provided in the

                response.
              validation:
                format: byte
            url:
              type: string
              docs: The URL of the webhook endpoint.
        content-type: application/json
      response:
        docs: Success.
        type: root.WebhooksCreateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            url: url
          response:
            body:
              webhook:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                event_types:
                  - part_created
                secret: secret
                status: active
                url: url
    delete:
      path: /webhooks.delete
      method: POST
      auth: true
      docs: Deletes the requested webhook.
      source:
        openapi: ../openapi.yml
      request:
        name: WebhooksDeleteRequest
        body:
          properties:
            id:
              type: string
              docs: ID for the webhook.
        content-type: application/json
      response:
        docs: Success.
        type: root.WebhooksDeleteResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          response:
            body:
              key: value
    get:
      path: /webhooks.get
      method: GET
      auth: true
      docs: Gets the requested webhook's information.
      source:
        openapi: ../openapi.yml
      request:
        name: WebhooksGetRequest
        query-parameters:
          id:
            type: string
            docs: ID for the webhook.
      response:
        docs: Success.
        type: root.WebhooksGetResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          response:
            body:
              webhook:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                event_types:
                  - part_created
                secret: secret
                status: active
                url: url
    list:
      path: /webhooks.list
      method: GET
      auth: true
      docs: Lists the webhooks.
      source:
        openapi: ../openapi.yml
      response:
        docs: Success.
        type: root.WebhooksListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              webhooks:
                - created_by:
                    type: sys_user
                    id: created_by
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: display_id
                  id: id
                  modified_by:
                    type: sys_user
                    id: modified_by
                  modified_date: '2024-01-15T09:30:00Z'
                  event_types:
                    - part_created
                  secret: secret
                  status: active
                  url: url
    update:
      path: /webhooks.update
      method: POST
      auth: true
      docs: Updates the requested webhook.
      source:
        openapi: ../openapi.yml
      request:
        name: WebhooksUpdateRequest
        body:
          properties:
            action:
              type: optional<root.WebhooksUpdateAction>
            event_types:
              type: optional<root.WebhooksUpdateRequestEventTypes>
            id:
              type: string
              docs: ID for the webhook.
            secret:
              type: optional<string>
              docs: >
                If provided, updates the secret that's used when verifying
                webhook

                events, which must be between 8 and 32 bytes (inclusive).
                Otherwise

                if empty, then a new secret is generated. If the webhook is
                active,

                then its status will transition to the 'unverified' state and it

                won't receive any object events until successfully verified.
              validation:
                format: byte
            url:
              type: optional<string>
              docs: >
                The webhook's updated URL. If the webhook is active, then the

                webhook's status will transition to the 'unverified' state and
                it

                won't receive any object events until successfully verified.
        content-type: application/json
      response:
        docs: Success.
        type: root.WebhooksUpdateResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          response:
            body:
              webhook:
                created_by:
                  type: sys_user
                  display_id: created_by
                  id: created_by
                  display_name: created_by
                  display_picture:
                    id: id
                  email: created_by
                  full_name: created_by
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: display_id
                id: id
                modified_by:
                  type: sys_user
                  display_id: modified_by
                  id: modified_by
                  display_name: modified_by
                  display_picture:
                    id: id
                  email: modified_by
                  full_name: modified_by
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                event_types:
                  - part_created
                secret: secret
                status: active
                url: url
  source:
    openapi: ../openapi.yml
  display-name: webhooks
docs: Webhook event APIs.
",
    },
    "works.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "DevRev work interactions.",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "works",
          "endpoints": {
            "create": {
              "auth": true,
              "docs": "Creates new work ([issue](https://devrev.ai/docs/product/build),
[ticket](https://devrev.ai/docs/product/support)) item.
",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "applies_to_part": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                    "owned_by": [
                      "don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>",
                    ],
                    "rev_org": "don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>",
                    "tags": [
                      {
                        "id": "don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>",
                      },
                    ],
                    "title": "string",
                    "type": "ticket",
                  },
                  "response": {
                    "body": {
                      "work": {
                        "applies_to_part": {
                          "display_id": "work",
                          "id": "work",
                          "name": "work",
                          "type": "product",
                        },
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "body": "work",
                        "created_by": {
                          "display_id": "work",
                          "display_name": "work",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "work",
                          "full_name": "work",
                          "id": "work",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "work",
                        "group": {
                          "display_id": "display_id",
                          "id": "id",
                        },
                        "id": "work",
                        "modified_by": {
                          "display_id": "work",
                          "display_name": "work",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "work",
                          "full_name": "work",
                          "id": "work",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "owned_by": [
                          {
                            "id": "work",
                            "type": "sys_user",
                          },
                        ],
                        "reported_by": [
                          {
                            "id": "work",
                            "type": "sys_user",
                          },
                        ],
                        "rev_org": {
                          "display_id": "work",
                          "display_name": "work",
                          "id": "work",
                          "type": "rev_org",
                        },
                        "severity": "blocker",
                        "stage": {
                          "name": "name",
                        },
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "work",
                        "type": "ticket",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/works.create",
              "request": {
                "body": {
                  "type": "root.WorksCreateRequest",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Success.",
                "status-code": 201,
                "type": "root.WorksCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "docs": "Deletes a work item.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/works.delete",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "The work's ID.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WorksDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WorksDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "export": {
              "auth": true,
              "docs": "Exports a collection of work items.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "works": [
                        {
                          "applies_to_part": {
                            "id": "works",
                            "name": "works",
                            "type": "product",
                          },
                          "artifacts": [
                            {
                              "id": "id",
                            },
                          ],
                          "body": "works",
                          "created_by": {
                            "id": "works",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "works",
                          "group": {
                            "id": "id",
                          },
                          "id": "works",
                          "modified_by": {
                            "id": "works",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "owned_by": [
                            {
                              "id": "works",
                              "type": "sys_user",
                            },
                          ],
                          "reported_by": [
                            {
                              "id": "works",
                              "type": "sys_user",
                            },
                          ],
                          "rev_org": {
                            "id": "works",
                            "type": "rev_org",
                          },
                          "severity": "blocker",
                          "stage": {
                            "name": "name",
                          },
                          "tags": [
                            {
                              "tag": {
                                "id": "id",
                                "name": "name",
                              },
                            },
                          ],
                          "target_close_date": "2024-01-15T09:30:00Z",
                          "title": "works",
                          "type": "ticket",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/works.export",
              "request": {
                "name": "WorksExportRequest",
                "query-parameters": {
                  "applies_to_part": {
                    "allow-multiple": true,
                    "docs": "Filters for work belonging to any of the provided parts.",
                    "type": "optional<string>",
                  },
                  "created_by": {
                    "allow-multiple": true,
                    "docs": "Filters for work created by any of these users.",
                    "type": "optional<string>",
                  },
                  "first": {
                    "docs": "The number of work items to return. The default is '50', the maximum
is '5000'.
",
                    "type": "optional<integer>",
                  },
                  "issue.priority": {
                    "allow-multiple": true,
                    "docs": "Filters for issues with any of the provided priorities.",
                    "type": "optional<root.IssuePriority>",
                  },
                  "issue.rev_orgs": {
                    "allow-multiple": true,
                    "docs": "Filters for issues with any of the provided Rev organizations.
",
                    "type": "optional<string>",
                  },
                  "owned_by": {
                    "allow-multiple": true,
                    "docs": "Filters for work owned by any of these users.",
                    "type": "optional<string>",
                  },
                  "stage.name": {
                    "allow-multiple": true,
                    "docs": "Filters for records in the provided stage(s).",
                    "type": "optional<string>",
                  },
                  "ticket.rev_org": {
                    "allow-multiple": true,
                    "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                    "type": "optional<string>",
                  },
                  "ticket.severity": {
                    "allow-multiple": true,
                    "docs": "Filters for tickets with any of the provided severities.",
                    "type": "optional<root.TicketSeverity>",
                  },
                  "type": {
                    "allow-multiple": true,
                    "docs": "Filters for work of the provided types.",
                    "type": "optional<root.WorkType>",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WorksExportResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "auth": true,
              "docs": "Gets a work item's information.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>",
                  },
                  "response": {
                    "body": {
                      "work": {
                        "applies_to_part": {
                          "display_id": "work",
                          "id": "work",
                          "name": "work",
                          "type": "product",
                        },
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "body": "work",
                        "created_by": {
                          "display_id": "work",
                          "display_name": "work",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "work",
                          "full_name": "work",
                          "id": "work",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "work",
                        "group": {
                          "display_id": "display_id",
                          "id": "id",
                        },
                        "id": "work",
                        "modified_by": {
                          "display_id": "work",
                          "display_name": "work",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "work",
                          "full_name": "work",
                          "id": "work",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "owned_by": [
                          {
                            "id": "work",
                            "type": "sys_user",
                          },
                        ],
                        "reported_by": [
                          {
                            "id": "work",
                            "type": "sys_user",
                          },
                        ],
                        "rev_org": {
                          "display_id": "work",
                          "display_name": "work",
                          "id": "work",
                          "type": "rev_org",
                        },
                        "severity": "blocker",
                        "stage": {
                          "name": "name",
                        },
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "work",
                        "type": "ticket",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/works.get",
              "request": {
                "name": "WorksGetRequest",
                "query-parameters": {
                  "id": {
                    "docs": "The work's ID.",
                    "type": "string",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WorksGetResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "list": {
              "auth": true,
              "docs": "Lists a collection of work items.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "next_cursor": "next_cursor",
                      "prev_cursor": "prev_cursor",
                      "works": [
                        {
                          "applies_to_part": {
                            "id": "works",
                            "name": "works",
                            "type": "product",
                          },
                          "artifacts": [
                            {
                              "id": "id",
                            },
                          ],
                          "body": "works",
                          "created_by": {
                            "id": "works",
                            "type": "sys_user",
                          },
                          "created_date": "2024-01-15T09:30:00Z",
                          "display_id": "works",
                          "group": {
                            "id": "id",
                          },
                          "id": "works",
                          "modified_by": {
                            "id": "works",
                            "type": "sys_user",
                          },
                          "modified_date": "2024-01-15T09:30:00Z",
                          "owned_by": [
                            {
                              "id": "works",
                              "type": "sys_user",
                            },
                          ],
                          "reported_by": [
                            {
                              "id": "works",
                              "type": "sys_user",
                            },
                          ],
                          "rev_org": {
                            "id": "works",
                            "type": "rev_org",
                          },
                          "severity": "blocker",
                          "stage": {
                            "name": "name",
                          },
                          "tags": [
                            {
                              "tag": {
                                "id": "id",
                                "name": "name",
                              },
                            },
                          ],
                          "target_close_date": "2024-01-15T09:30:00Z",
                          "title": "works",
                          "type": "ticket",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/works.list",
              "request": {
                "name": "WorksListRequest",
                "query-parameters": {
                  "applies_to_part": {
                    "allow-multiple": true,
                    "docs": "Filters for work belonging to any of the provided parts.",
                    "type": "optional<string>",
                  },
                  "created_by": {
                    "allow-multiple": true,
                    "docs": "Filters for work created by any of these users.",
                    "type": "optional<string>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "issue.priority": {
                    "allow-multiple": true,
                    "docs": "Filters for issues with any of the provided priorities.",
                    "type": "optional<root.IssuePriority>",
                  },
                  "issue.rev_orgs": {
                    "allow-multiple": true,
                    "docs": "Filters for issues with any of the provided Rev organizations.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of works to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": {
                    "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                    "type": "optional<root.ListMode>",
                  },
                  "owned_by": {
                    "allow-multiple": true,
                    "docs": "Filters for work owned by any of these users.",
                    "type": "optional<string>",
                  },
                  "stage.name": {
                    "allow-multiple": true,
                    "docs": "Filters for records in the provided stage(s).",
                    "type": "optional<string>",
                  },
                  "ticket.rev_org": {
                    "allow-multiple": true,
                    "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                    "type": "optional<string>",
                  },
                  "ticket.severity": {
                    "allow-multiple": true,
                    "docs": "Filters for tickets with any of the provided severities.",
                    "type": "optional<root.TicketSeverity>",
                  },
                  "type": {
                    "allow-multiple": true,
                    "docs": "Filters for work of the provided types.",
                    "type": "optional<root.WorkType>",
                  },
                },
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WorksListResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "update": {
              "auth": true,
              "docs": "Updates a work item's information.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.TooManyRequestsError",
                "root.InternalServerError",
                "root.ServiceUnavailableError",
              ],
              "examples": [
                {
                  "request": {
                    "applies_to_part": "don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>",
                    "id": "don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>",
                    "type": "ticket",
                  },
                  "response": {
                    "body": {
                      "work": {
                        "applies_to_part": {
                          "display_id": "work",
                          "id": "work",
                          "name": "work",
                          "type": "product",
                        },
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "body": "work",
                        "created_by": {
                          "display_id": "work",
                          "display_name": "work",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "work",
                          "full_name": "work",
                          "id": "work",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "created_date": "2024-01-15T09:30:00Z",
                        "display_id": "work",
                        "group": {
                          "display_id": "display_id",
                          "id": "id",
                        },
                        "id": "work",
                        "modified_by": {
                          "display_id": "work",
                          "display_name": "work",
                          "display_picture": {
                            "id": "id",
                          },
                          "email": "work",
                          "full_name": "work",
                          "id": "work",
                          "state": "active",
                          "type": "sys_user",
                        },
                        "modified_date": "2024-01-15T09:30:00Z",
                        "owned_by": [
                          {
                            "id": "work",
                            "type": "sys_user",
                          },
                        ],
                        "reported_by": [
                          {
                            "id": "work",
                            "type": "sys_user",
                          },
                        ],
                        "rev_org": {
                          "display_id": "work",
                          "display_name": "work",
                          "id": "work",
                          "type": "rev_org",
                        },
                        "severity": "blocker",
                        "stage": {
                          "name": "name",
                        },
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "target_close_date": "2024-01-15T09:30:00Z",
                        "title": "work",
                        "type": "ticket",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/works.update",
              "request": {
                "body": {
                  "type": "root.WorksUpdateRequest",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Success.",
                "status-code": 200,
                "type": "root.WorksUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /works.create
      method: POST
      auth: true
      docs: |
        Creates new work ([issue](https://devrev.ai/docs/product/build),
        [ticket](https://devrev.ai/docs/product/support)) item.
      source:
        openapi: ../openapi.yml
      request:
        body:
          type: root.WorksCreateRequest
        content-type: application/json
      response:
        docs: Success.
        type: root.WorksCreateResponse
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            type: ticket
            rev_org: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
            applies_to_part: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
            owned_by:
              - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
            tags:
              - id: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
            title: string
          response:
            body:
              work:
                type: ticket
                created_by:
                  type: sys_user
                  display_id: work
                  id: work
                  display_name: work
                  display_picture:
                    id: id
                  email: work
                  full_name: work
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: work
                id: work
                modified_by:
                  type: sys_user
                  display_id: work
                  id: work
                  display_name: work
                  display_picture:
                    id: id
                  email: work
                  full_name: work
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                applies_to_part:
                  type: product
                  display_id: work
                  id: work
                  name: work
                artifacts:
                  - id: id
                body: work
                owned_by:
                  - type: sys_user
                    id: work
                reported_by:
                  - type: sys_user
                    id: work
                stage:
                  name: name
                tags:
                  - tag:
                      id: id
                      name: name
                target_close_date: '2024-01-15T09:30:00Z'
                title: work
                group:
                  display_id: display_id
                  id: id
                rev_org:
                  type: rev_org
                  display_id: work
                  id: work
                  display_name: work
                severity: blocker
    delete:
      path: /works.delete
      method: POST
      auth: true
      docs: Deletes a work item.
      source:
        openapi: ../openapi.yml
      request:
        name: WorksDeleteRequest
        body:
          properties:
            id:
              type: string
              docs: The work's ID.
        content-type: application/json
      response:
        docs: Success.
        type: root.WorksDeleteResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          response:
            body:
              key: value
    export:
      path: /works.export
      method: GET
      auth: true
      docs: Exports a collection of work items.
      source:
        openapi: ../openapi.yml
      request:
        name: WorksExportRequest
        query-parameters:
          applies_to_part:
            type: optional<string>
            allow-multiple: true
            docs: Filters for work belonging to any of the provided parts.
          created_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for work created by any of these users.
          first:
            type: optional<integer>
            docs: >
              The number of work items to return. The default is '50', the
              maximum

              is '5000'.
          issue.priority:
            type: optional<root.IssuePriority>
            allow-multiple: true
            docs: Filters for issues with any of the provided priorities.
          issue.rev_orgs:
            type: optional<string>
            allow-multiple: true
            docs: |
              Filters for issues with any of the provided Rev organizations.
          owned_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for work owned by any of these users.
          stage.name:
            type: optional<string>
            allow-multiple: true
            docs: Filters for records in the provided stage(s).
          ticket.rev_org:
            type: optional<string>
            allow-multiple: true
            docs: >
              Filters for tickets that are associated with any of the provided
              Rev

              organizations.
          ticket.severity:
            type: optional<root.TicketSeverity>
            allow-multiple: true
            docs: Filters for tickets with any of the provided severities.
          type:
            type: optional<root.WorkType>
            allow-multiple: true
            docs: Filters for work of the provided types.
      response:
        docs: Success.
        type: root.WorksExportResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              works:
                - type: ticket
                  created_by:
                    type: sys_user
                    id: works
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: works
                  id: works
                  modified_by:
                    type: sys_user
                    id: works
                  modified_date: '2024-01-15T09:30:00Z'
                  applies_to_part:
                    type: product
                    id: works
                    name: works
                  artifacts:
                    - id: id
                  body: works
                  owned_by:
                    - type: sys_user
                      id: works
                  reported_by:
                    - type: sys_user
                      id: works
                  stage:
                    name: name
                  tags:
                    - tag:
                        id: id
                        name: name
                  target_close_date: '2024-01-15T09:30:00Z'
                  title: works
                  group:
                    id: id
                  rev_org:
                    type: rev_org
                    id: works
                  severity: blocker
    get:
      path: /works.get
      method: GET
      auth: true
      docs: Gets a work item's information.
      source:
        openapi: ../openapi.yml
      request:
        name: WorksGetRequest
        query-parameters:
          id:
            type: string
            docs: The work's ID.
      response:
        docs: Success.
        type: root.WorksGetResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          response:
            body:
              work:
                type: ticket
                created_by:
                  type: sys_user
                  display_id: work
                  id: work
                  display_name: work
                  display_picture:
                    id: id
                  email: work
                  full_name: work
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: work
                id: work
                modified_by:
                  type: sys_user
                  display_id: work
                  id: work
                  display_name: work
                  display_picture:
                    id: id
                  email: work
                  full_name: work
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                applies_to_part:
                  type: product
                  display_id: work
                  id: work
                  name: work
                artifacts:
                  - id: id
                body: work
                owned_by:
                  - type: sys_user
                    id: work
                reported_by:
                  - type: sys_user
                    id: work
                stage:
                  name: name
                tags:
                  - tag:
                      id: id
                      name: name
                target_close_date: '2024-01-15T09:30:00Z'
                title: work
                group:
                  display_id: display_id
                  id: id
                rev_org:
                  type: rev_org
                  display_id: work
                  id: work
                  display_name: work
                severity: blocker
    list:
      path: /works.list
      method: GET
      auth: true
      docs: Lists a collection of work items.
      source:
        openapi: ../openapi.yml
      request:
        name: WorksListRequest
        query-parameters:
          applies_to_part:
            type: optional<string>
            allow-multiple: true
            docs: Filters for work belonging to any of the provided parts.
          created_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for work created by any of these users.
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          issue.priority:
            type: optional<root.IssuePriority>
            allow-multiple: true
            docs: Filters for issues with any of the provided priorities.
          issue.rev_orgs:
            type: optional<string>
            allow-multiple: true
            docs: |
              Filters for issues with any of the provided Rev organizations.
          limit:
            type: optional<integer>
            docs: |
              The maximum number of works to return. The default is '50'.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
          owned_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for work owned by any of these users.
          stage.name:
            type: optional<string>
            allow-multiple: true
            docs: Filters for records in the provided stage(s).
          ticket.rev_org:
            type: optional<string>
            allow-multiple: true
            docs: >
              Filters for tickets that are associated with any of the provided
              Rev

              organizations.
          ticket.severity:
            type: optional<root.TicketSeverity>
            allow-multiple: true
            docs: Filters for tickets with any of the provided severities.
          type:
            type: optional<root.WorkType>
            allow-multiple: true
            docs: Filters for work of the provided types.
      response:
        docs: Success.
        type: root.WorksListResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              next_cursor: next_cursor
              prev_cursor: prev_cursor
              works:
                - type: ticket
                  created_by:
                    type: sys_user
                    id: works
                  created_date: '2024-01-15T09:30:00Z'
                  display_id: works
                  id: works
                  modified_by:
                    type: sys_user
                    id: works
                  modified_date: '2024-01-15T09:30:00Z'
                  applies_to_part:
                    type: product
                    id: works
                    name: works
                  artifacts:
                    - id: id
                  body: works
                  owned_by:
                    - type: sys_user
                      id: works
                  reported_by:
                    - type: sys_user
                      id: works
                  stage:
                    name: name
                  tags:
                    - tag:
                        id: id
                        name: name
                  target_close_date: '2024-01-15T09:30:00Z'
                  title: works
                  group:
                    id: id
                  rev_org:
                    type: rev_org
                    id: works
                  severity: blocker
    update:
      path: /works.update
      method: POST
      auth: true
      docs: Updates a work item's information.
      source:
        openapi: ../openapi.yml
      request:
        body:
          type: root.WorksUpdateRequest
        content-type: application/json
      response:
        docs: Success.
        type: root.WorksUpdateResponse
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            type: ticket
            applies_to_part: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
            id: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          response:
            body:
              work:
                type: ticket
                created_by:
                  type: sys_user
                  display_id: work
                  id: work
                  display_name: work
                  display_picture:
                    id: id
                  email: work
                  full_name: work
                  state: active
                created_date: '2024-01-15T09:30:00Z'
                display_id: work
                id: work
                modified_by:
                  type: sys_user
                  display_id: work
                  id: work
                  display_name: work
                  display_picture:
                    id: id
                  email: work
                  full_name: work
                  state: active
                modified_date: '2024-01-15T09:30:00Z'
                applies_to_part:
                  type: product
                  display_id: work
                  id: work
                  name: work
                artifacts:
                  - id: id
                body: work
                owned_by:
                  - type: sys_user
                    id: work
                reported_by:
                  - type: sys_user
                    id: work
                stage:
                  name: name
                tags:
                  - tag:
                      id: id
                      name: name
                target_close_date: '2024-01-15T09:30:00Z'
                title: work
                group:
                  display_id: display_id
                  id: id
                rev_org:
                  type: rev_org
                  display_id: work
                  id: work
                  display_name: work
                severity: blocker
  source:
    openapi: ../openapi.yml
  display-name: works
docs: DevRev work interactions.
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "auth-token",
      "auth-schemes": {
        "auth-token": {
          "header": "Authorization",
          "name": "apiKey",
          "type": "string",
        },
      },
      "default-environment": "Default",
      "display-name": "DevRev REST API",
      "environments": {
        "Default": "https://api.devrev.ai",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: DevRev REST API
environments:
  Default: https://api.devrev.ai
default-environment: Default
auth-schemes:
  auth-token:
    header: Authorization
    name: apiKey
    type: string
auth: auth-token
",
  },
}