{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "AssignPermissionsToResourceRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AssignPermissionsToRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AssignRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AssignRoleToUserRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AssignSetPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "BulkAssignRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "BulkCreateTenantsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "BulkCreateUsersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "BulkDeleteTenantsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "BulkDeleteUsersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "BulkReplaceUsersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "BulkUnassignRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CopyEnvironmentRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateConditionSetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateEnvironmentRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateOrganizationRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateProjectRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateResourceActionGroupRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateResourceActionRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateResourceAttributeRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateResourceInstanceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateResourceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateResourceRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateTenantRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateUserAttributeRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateUserRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteConditionSetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteEnvironmentRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteOrganizationRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteProjectRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteResourceActionGroupRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteResourceActionRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteResourceAttributeRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteResourceInstanceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteResourceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteResourceRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteTenantRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteTenantUserRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteUserAttributeRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteUserRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetActiveOrganizationRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConditionSetAncestorsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConditionSetDescendantsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConditionSetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetEnvironmentRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetOrganizationRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetProjectRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetResourceActionGroupRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetResourceActionRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetResourceAttributeRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetResourceInstanceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetResourceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetResourceRoleAncestorsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetResourceRoleDescendantsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetResourceRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetRoleAncestorsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetRoleDescendantsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetTenantRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetUserAttributeRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetUserRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListConditionSetsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListEnvironmentsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListOrganizationsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListProjectsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListResourceActionGroupsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListResourceActionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListResourceAttributesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListResourceInstancesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListResourceRolesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListResourcesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRoleAssignmentsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRolesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListSetPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListTenantUsersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListTenantsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListUserAttributesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListUsersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "RemovePermissionsFromResourceRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "RemovePermissionsFromRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ReplaceResourceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ReplaceUserRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "StatsEnvironmentsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UnassignRoleFromUserRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UnassignRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UnassignSetPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateConditionSetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateEnvironmentRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateOrganizationRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateProjectRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateResourceActionGroupRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateResourceActionRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateResourceAttributeRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateResourceInstanceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateResourceRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateResourceRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateRoleRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateTenantRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateUserAttributeRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateUserRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
        },
        "types": {
          "ActionBlockEditable": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "type": "optional<map<string, unknown>>",
              },
              "description": {
                "docs": "optional description string explaining what this action represents in your system",
                "type": "optional<string>",
              },
              "name": {
                "docs": "a more descriptive name for the action",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionBlockRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "type": "optional<map<string, unknown>>",
              },
              "description": {
                "docs": "optional description string explaining what this action represents in your system",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Unique id of the action",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "action key",
                "type": "optional<string>",
              },
              "name": {
                "docs": "a more descriptive name for the action",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AddRolePermissions": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "permissions": {
                "docs": "List of permissions to assign to the role. If a permission is already granted to the role it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".",
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AttributeBlockEditable": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "optional description string explaining what data this attribute will store",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
                "type": "AttributeType",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AttributeBlockRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "optional description string explaining what data this attribute will store",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Unique id of the attribute",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "action key",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
                "type": "AttributeType",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AttributeType": {
            "docs": "supported attribute primitives",
            "enum": [
              "bool",
              "number",
              "string",
              "time",
              "array",
              "json",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BulkRoleAssignmentReport": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "assignments_created": {
                "default": 0,
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BulkRoleUnAssignmentReport": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "assignments_removed": {
                "default": 0,
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConditionSetRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "autogenerated": {
                "default": false,
                "docs": "whether the set was autogenerated by the system.",
                "type": "optional<boolean>",
              },
              "conditions": {
                "docs": "a boolean expression that consists of multiple conditions, with and/or logic.",
                "type": "optional<map<string, unknown>>",
              },
              "created_at": {
                "docs": "Date and time when the condition set was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "an optional longer description of the set",
                "type": "optional<string>",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the condition set belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the condition set",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.",
                "type": "string",
              },
              "name": {
                "docs": "A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the condition set belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "parent_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the condition set belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "resource": {
                "type": "optional<ResourceRead>",
              },
              "resource_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "type": {
                "docs": "the type of the set: UserSet or ResourceSet",
                "type": "optional<ConditionSetType>",
              },
              "updated_at": {
                "docs": "Date and time when the condition set was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConditionSetRuleRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "Date and time when the condition set rule was created (ISO_8601 format).",
                "type": "datetime",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the condition set rule belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the condition set rule",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A unique id by which Permit will identify this condition set rule.",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the condition set rule belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "permission": {
                "docs": "a permission that is currently granted to the userset *on* the resourceset.",
                "type": "string",
              },
              "project_id": {
                "docs": "Unique id of the project that the condition set rule belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "resource_set": {
                "docs": "the resourceset that represents the resources that are currently granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*",
                "type": "string",
              },
              "updated_at": {
                "docs": "Date and time when the condition set rule was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
              "user_set": {
                "docs": "the userset that is currently granted permissions, i.e: all the users matching this rule are granted the permission on the resourceset",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConditionSetType": {
            "docs": "An enumeration.",
            "enum": [
              "userset",
              "resourceset",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnvironmentCopyScope": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "resource_sets": {
                "docs": "Resource sets to copy",
                "type": "optional<EnvironmentCopyScopeFilters>",
              },
              "resources": {
                "docs": "Resources to copy",
                "type": "optional<EnvironmentCopyScopeFilters>",
              },
              "roles": {
                "docs": "Roles to copy",
                "type": "optional<EnvironmentCopyScopeFilters>",
              },
              "user_sets": {
                "docs": "User sets to copy",
                "type": "optional<EnvironmentCopyScopeFilters>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnvironmentCopyScopeFilters": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "exclude": {
                "docs": "Object to exclude (use * as wildcard)",
                "type": "optional<list<string>>",
              },
              "include": {
                "docs": "Objects to include (use * as wildcard)",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnvironmentCopyTarget": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "existing": {
                "docs": "Identifier of an existing environment to copy into",
                "type": "optional<string>",
              },
              "new": {
                "docs": "Description of the environment to create. This environment must not already exist.",
                "type": "optional<EnvironmentCreate>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnvironmentCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "custom_branch_name": {
                "docs": "when using gitops feature, an optional branch name for the environment",
                "type": "optional<string>",
              },
              "description": {
                "docs": "an optional longer description of the environment",
                "type": "optional<string>",
              },
              "jwks": {
                "docs": "jwks for element frontend only login",
                "type": "optional<JwksObj>",
              },
              "key": {
                "docs": "A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^[A-Za-z0-9\-_]+$",
                },
              },
              "name": {
                "docs": "The name of the environment",
                "type": "string",
              },
              "settings": {
                "docs": "the settings for this environment",
                "type": "optional<map<string, unknown>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnvironmentRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "Date and time when the environment was created (ISO_8601 format).",
                "type": "datetime",
              },
              "custom_branch_name": {
                "docs": "when using gitops feature, an optional branch name for the environment",
                "type": "optional<string>",
              },
              "description": {
                "docs": "an optional longer description of the environment",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Unique id of the environment",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "jwks": {
                "docs": "jwks for element frontend only login",
                "type": "optional<JwksObj>",
              },
              "key": {
                "docs": "A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the environment",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the environment belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the environment belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "settings": {
                "docs": "the settings for this environment",
                "type": "optional<map<string, unknown>>",
              },
              "updated_at": {
                "docs": "Date and time when the environment was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnvironmentStats": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "Date and time when the environment was created (ISO_8601 format).",
                "type": "datetime",
              },
              "custom_branch_name": {
                "docs": "when using gitops feature, an optional branch name for the environment",
                "type": "optional<string>",
              },
              "description": {
                "docs": "an optional longer description of the environment",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Unique id of the environment",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "jwks": {
                "docs": "jwks for element frontend only login",
                "type": "optional<JwksObj>",
              },
              "key": {
                "docs": "A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the environment",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the environment belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "pdp_configs": {
                "type": "list<PDPConfigRead>",
              },
              "project_id": {
                "docs": "Unique id of the project that the environment belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "settings": {
                "docs": "the settings for this environment",
                "type": "optional<map<string, unknown>>",
              },
              "stats": {
                "type": "Statistics",
              },
              "updated_at": {
                "docs": "Date and time when the environment was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "HTTPValidationError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "detail": {
                "type": "optional<list<ValidationError>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "IdentityRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "auth0_info": {
                "docs": "Raw user info json coming from our identity provider and matching a specific account identity",
                "type": "map<string, unknown>",
              },
              "email": {
                "docs": "Email connected to this account identity",
                "type": "string",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "email_verified": {
                "docs": "Whether this email address connected to this account identity is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.",
                "type": "boolean",
              },
              "provider": {
                "docs": "The identity provider type this identity came from",
                "type": "string",
              },
              "sub": {
                "docs": "Unique User Id of this identity in the identity provider (NOT including the provider type)",
                "type": "string",
              },
              "user_id": {
                "docs": "Unique User Id of this identity in the identity provider (including the provider type)",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "InviteRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "Date and time when the invite was created (ISO_8601 format).",
                "type": "datetime",
              },
              "email": {
                "docs": "The invited member's email address",
                "type": "string",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "failed_reason": {
                "docs": "if failed, the reason the invitation failed",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Unique id of the invite",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "invite_code": {
                "docs": "The invite code that is sent to the member's email",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "member_id": {
                "docs": "Unique id of the invite",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "organization_id": {
                "docs": "Unique id of the organization that the invite belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "role": {
                "docs": "The role the member will be assigned with",
                "type": "optional<MemberAccessLevel>",
              },
              "status": {
                "docs": "The status of the invite (pending, failed, etc)",
                "type": "InviteStatus",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "InviteStatus": {
            "docs": "An enumeration.",
            "enum": [
              "pending",
              "accepted",
              "failed",
              "canceled",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "JwksObj": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "keys": {
                "docs": "The keys to match against the request headers",
                "type": "list<map<string, unknown>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "MemberAccessLevel": {
            "docs": "An enumeration.",
            "enum": [
              "admin",
              "write",
              "read",
              "no_access",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "MemberAccessObj": {
            "docs": "An enumeration.",
            "enum": [
              "org",
              "project",
              "env",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "OnboardingStep": {
            "docs": "An enumeration.",
            "enum": [
              "create_organization",
              "create_project",
              "create_resource",
              "create_actions",
              "assign_permissions",
              "assign_user_roles",
              "connect_sdk",
              "done",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "OrgMemberReadWithGrants": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "Date and time when the account member was created (ISO_8601 format).",
                "type": "datetime",
              },
              "email": {
                "docs": "Email of the user controlling this account",
                "type": "string",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "email_verified": {
                "docs": "Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.",
                "type": "boolean",
              },
              "family_name": {
                "docs": "Last name of the user",
                "type": "optional<string>",
              },
              "given_name": {
                "docs": "First name of the user",
                "type": "optional<string>",
              },
              "grants": {
                "type": "list<Permission>",
              },
              "id": {
                "docs": "Unique id of the account member",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "identities": {
                "type": "list<IdentityRead>",
              },
              "invite": {
                "type": "optional<InviteRead>",
              },
              "is_onboarding": {
                "docs": "Whether or not this user is currently onboarding, needs to be replaced by a user journey object",
                "type": "boolean",
              },
              "is_superuser": {
                "docs": "Whether or not this user has special access to permit.io organizations",
                "type": "boolean",
              },
              "last_ip": {
                "default": "0.0.0.0",
                "docs": "Last IP address from which this user logged in.",
                "type": "optional<string>",
              },
              "last_login": {
                "docs": "Last date and time this user logged in (ISO_8601 format).",
                "type": "optional<datetime>",
              },
              "logins_count": {
                "default": 0,
                "docs": "Total number of logins this user has performed.",
                "type": "optional<integer>",
              },
              "name": {
                "docs": "Name of this user",
                "type": "optional<string>",
              },
              "onboarding_step": {
                "docs": "the step the user is currently going through in onboarding",
                "type": "OnboardingStep",
              },
              "picture": {
                "docs": "URL to picture, photo, or avatar of the user that controls this account.",
                "type": "optional<string>",
              },
              "settings": {
                "docs": "Custom permit.io dashboard settings, such as preferred theme, etc.",
                "type": "map<string, unknown>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "OrganizationRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "Date and time when the organization was created (ISO_8601 format).",
                "type": "datetime",
              },
              "id": {
                "docs": "Unique id of the organization",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "is_enterprise": {
                "docs": "Is this an enterprise account?",
                "type": "boolean",
              },
              "key": {
                "docs": "A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the organization, usually it's your company's name.",
                "type": "string",
              },
              "settings": {
                "docs": "the settings for this project",
                "type": "optional<map<string, unknown>>",
              },
              "updated_at": {
                "docs": "Date and time when the organization was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "OrganizationReadWithAPIKey": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "api_key_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "api_key_secret": {
                "type": "optional<string>",
              },
              "created_at": {
                "docs": "Date and time when the organization was created (ISO_8601 format).",
                "type": "datetime",
              },
              "id": {
                "docs": "Unique id of the organization",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "is_enterprise": {
                "docs": "Is this an enterprise account?",
                "type": "boolean",
              },
              "key": {
                "docs": "A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the organization, usually it's your company's name.",
                "type": "string",
              },
              "settings": {
                "docs": "the settings for this project",
                "type": "optional<map<string, unknown>>",
              },
              "updated_at": {
                "docs": "Date and time when the organization was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PDPConfigRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_secret": "string",
              "environment_id": {
                "docs": "Unique id of the environment that the pdp_config belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": {
                "type": "optional<string>",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the pdp_config belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the pdp_config belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PaginatedResultConditionSetRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "List of Condition Sets",
                "type": "list<ConditionSetRead>",
              },
              "page_count": {
                "default": 0,
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "total_count": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PaginatedResultResourceRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "List of Resources",
                "type": "list<ResourceRead>",
              },
              "page_count": {
                "default": 0,
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "total_count": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PaginatedResultResourceRoleRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "List of Resource Roles",
                "type": "list<ResourceRoleRead>",
              },
              "page_count": {
                "default": 0,
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "total_count": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PaginatedResultRoleRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "List of Roles",
                "type": "list<RoleRead>",
              },
              "page_count": {
                "default": 0,
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "total_count": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PaginatedResultTenantRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "List of Tenants",
                "type": "list<TenantRead>",
              },
              "page_count": {
                "default": 0,
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "total_count": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PaginatedResultUserRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "List of Users",
                "type": "list<UserRead>",
              },
              "page_count": {
                "default": 0,
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "total_count": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Permission": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_level": {
                "type": "MemberAccessLevel",
              },
              "environment_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "environment_key": {
                "type": "optional<string>",
              },
              "environment_name": {
                "type": "optional<string>",
              },
              "object_type": {
                "type": "MemberAccessObj",
              },
              "organization_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "organization_key": {
                "type": "optional<string>",
              },
              "organization_name": {
                "type": "optional<string>",
              },
              "project_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_key": {
                "type": "optional<string>",
              },
              "project_name": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ProjectRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "active_policy_repo_id": {
                "docs": "the id of the policy repo to use for this project",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": {
                "docs": "Date and time when the project was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "a longer description outlining the project objectives",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Unique id of the project",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the project",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the project belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "settings": {
                "docs": "the settings for this project",
                "type": "optional<map<string, unknown>>",
              },
              "updated_at": {
                "docs": "Date and time when the project was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
              "urn_namespace": {
                "docs": "Optional namespace for URNs. If empty, URNs will be generated from project key.",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "[a-z0-9-]{2,}",
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RelationsBlock": {
            "docs": "A actions definition block, typically contained within a resource type definition block.
The actions represents the ways you can interact with a protected resource.",
            "type": "map<string, unknown>",
          },
          "RemoveRolePermissions": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "permissions": {
                "docs": "List of permissions to remove from the role. If a permission is not found it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`,i.e: the "permission name".",
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceActionGroupRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "actions": {
                "type": "optional<list<string>>",
              },
              "attributes": {
                "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
                "type": "optional<map<string, unknown>>",
              },
              "created_at": {
                "docs": "Date and time when the action group was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "An optional longer description of what this action group represents in your system",
                "type": "optional<string>",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the action group belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the action group",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A URL-friendly name of the action group (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action group.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^[A-Za-z0-9\-_]+$",
                },
              },
              "name": {
                "docs": "The name of the action group",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the action group belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the action group belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "resource_id": {
                "docs": "Unique id of the resource that the action group belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "updated_at": {
                "docs": "Date and time when the action group was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceActionRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
                "type": "optional<map<string, unknown>>",
              },
              "created_at": {
                "docs": "Date and time when the action was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "An optional longer description of what this action respresents in your system",
                "type": "optional<string>",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the action belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the action",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the action",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the action belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "permission_name": {
                "docs": "The name of the action, prefixed by the resource the action is acting upon.",
                "type": "string",
              },
              "project_id": {
                "docs": "Unique id of the project that the action belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "resource_id": {
                "docs": "Unique id of the resource that the action belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "updated_at": {
                "docs": "Date and time when the action was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceAttributeCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "An optional longer description of what this attribute respresents in your system",
                "type": "optional<string>",
              },
              "key": {
                "docs": "A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^[A-Za-z0-9\-_]+$",
                },
              },
              "type": {
                "docs": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
                "type": "AttributeType",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceAttributeRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "built_in": {
                "docs": "Whether the attribute is built-in, and managed by the Permit system.",
                "type": "boolean",
              },
              "created_at": {
                "docs": "Date and time when the attribute was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "An optional longer description of what this attribute respresents in your system",
                "type": "optional<string>",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the attribute belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the attribute",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the attribute belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the attribute belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "resource_id": {
                "docs": "Unique id of the resource that the attribute belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "resource_key": {
                "docs": "A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.",
                "type": "string",
              },
              "type": {
                "docs": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
                "type": "AttributeType",
              },
              "updated_at": {
                "docs": "Date and time when the attribute was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceAttributeUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "An optional longer description of what this attribute respresents in your system",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
                "type": "optional<AttributeType>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceInstanceRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "docs": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
                "type": "optional<map<string, unknown>>",
              },
              "created_at": {
                "docs": "Date and time when the resource instance was created (ISO_8601 format).",
                "type": "datetime",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the resource instance belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the resource instance",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the resource instance belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the resource instance belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "resource": {
                "docs": "the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.",
                "type": "string",
              },
              "resource_id": {
                "docs": "the id of the resource (type) of this resource instance.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "tenant": {
                "docs": "the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.",
                "type": "optional<string>",
              },
              "tenant_id": {
                "docs": "the id of the tenant of this resource instance.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "updated_at": {
                "docs": "Date and time when the resource instance was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action_groups": {
                "type": "optional<map<string, list<string>>>",
              },
              "actions": {
                "docs": "
        A actions definition block, typically contained within a resource type definition block.
        The actions represents the ways you can interact with a protected resource.
        ",
                "type": "optional<map<string, ActionBlockRead>>",
              },
              "attributes": {
                "docs": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
                "type": "optional<map<string, AttributeBlockRead>>",
              },
              "created_at": {
                "docs": "Date and time when the resource was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "An optional longer description of what this resource respresents in your system",
                "type": "optional<string>",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the resource belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the resource",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the resource",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the resource belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the resource belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "updated_at": {
                "docs": "Date and time when the resource was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
              "urn": {
                "docs": "The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceRoleList": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "roles": {
                "display-name": "Roles",
                "type": "Roles",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ResourceRoleRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                "type": "optional<map<string, unknown>>",
              },
              "created_at": {
                "docs": "Date and time when the role was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "optional description string explaining what this role represents, or what permissions are granted to it.",
                "type": "optional<string>",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the role belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "extends": {
                "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                "type": "optional<list<string>>",
              },
              "id": {
                "docs": "Unique id of the role",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the role",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the role belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "permissions": {
                "docs": "list of action keys that define what actions this resource role is permitted to do",
                "type": "optional<list<string>>",
              },
              "project_id": {
                "docs": "Unique id of the project that the role belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "resource_id": {
                "docs": "Unique id of the resource that the role belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "updated_at": {
                "docs": "Date and time when the role was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoleAssignmentCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "role": {
                "docs": "the role that will be assigned (accepts either the role id or the role key)",
                "type": "string",
              },
              "tenant": {
                "docs": "the tenant the role is associated with (accepts either the tenant id or the tenant key)",
                "type": "string",
              },
              "user": {
                "docs": "the user the role will be assigned to (accepts either the user id or the user key)",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoleAssignmentRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "Date and time when the role assignment was created (ISO_8601 format).",
                "type": "datetime",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the role assignment belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the role assignment",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "organization_id": {
                "docs": "Unique id of the organization that the role assignment belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the role assignment belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "role": {
                "docs": "the role that is assigned",
                "type": "string",
              },
              "role_id": {
                "docs": "Unique id of the role",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "tenant": {
                "docs": "the tenant the role is associated with",
                "type": "string",
              },
              "tenant_id": {
                "docs": "Unique id of the tenant",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user": {
                "docs": "the user the role is assigned to",
                "type": "string",
              },
              "user_id": {
                "docs": "Unique id of the user",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoleAssignmentRemove": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "role": {
                "docs": "the role that will be unassigned (accepts either the role id or the role key)",
                "type": "string",
              },
              "tenant": {
                "docs": "the tenant the role is associated with (accepts either the tenant id or the tenant key)",
                "type": "string",
              },
              "user": {
                "docs": "the user the role will be unassigned from (accepts either the user id or the user key)",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoleBlock": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "optional description string explaining what this role represents, or what permissions are granted to it.",
                "type": "optional<string>",
              },
              "permissions": {
                "docs": "list of action keys that define what actions this resource role is permitted to do",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoleList": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "roles": {
                "display-name": "Roles",
                "type": "Roles",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoleRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                "type": "optional<map<string, unknown>>",
              },
              "created_at": {
                "docs": "Date and time when the role was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "optional description string explaining what this role represents, or what permissions are granted to it.",
                "type": "optional<string>",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the role belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "extends": {
                "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                "type": "optional<list<string>>",
              },
              "id": {
                "docs": "Unique id of the role",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the role",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the role belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "permissions": {
                "docs": "list of action keys that define what actions this resource role is permitted to do",
                "type": "optional<list<string>>",
              },
              "project_id": {
                "docs": "Unique id of the project that the role belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "updated_at": {
                "docs": "Date and time when the role was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Roles": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "list<RoleRead>",
              {
                "type": "PaginatedResultRoleRead",
              },
            ],
          },
          "RolesBlock": {
            "docs": "Resource roles definition block, defines all the roles on the resource.",
            "type": "map<string, unknown>",
          },
          "Statistics": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "has_decision_logs": "boolean",
              "members": {
                "type": "list<OrgMemberReadWithGrants>",
              },
              "policies": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "resources": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "roles": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "tenants": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "users": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TenantCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "docs": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
                "type": "optional<map<string, unknown>>",
              },
              "description": {
                "docs": "an optional longer description of the tenant",
                "type": "optional<string>",
              },
              "key": {
                "docs": "A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^[A-Za-z0-9\-_]+$",
                },
              },
              "name": {
                "docs": "A descriptive name for the tenant",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TenantCreateBulkOperationResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TenantDeleteBulkOperationResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TenantRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "docs": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
                "type": "optional<map<string, unknown>>",
              },
              "created_at": {
                "docs": "Date and time when the tenant was created (ISO_8601 format).",
                "type": "datetime",
              },
              "description": {
                "docs": "an optional longer description of the tenant",
                "type": "optional<string>",
              },
              "environment_id": {
                "docs": "Unique id of the environment that the tenant belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "Unique id of the tenant",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).",
                "type": "string",
              },
              "last_action_at": {
                "docs": "Date and time when the tenant was last active (ISO_8601 format). In other words, this is the last time a permission check was done on a resource belonging to this tenant.",
                "type": "datetime",
              },
              "name": {
                "docs": "A descriptive name for the tenant",
                "type": "string",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the tenant belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the tenant belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "updated_at": {
                "docs": "Date and time when the tenant was last updated/modified (ISO_8601 format).",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": {
                "docs": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
                "type": "optional<map<string, unknown>>",
              },
              "email": {
                "docs": "The email of the user. If synced, will be unique inside the environment.",
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "first_name": {
                "docs": "First name of the user.",
                "type": "optional<string>",
              },
              "key": {
                "docs": "A unique id by which Permit will identify the user for permission checks.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": "^[A-Za-z0-9|@+\-\._]+$",
                },
              },
              "last_name": {
                "docs": "Last name of the user.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserCreateBulkOperationResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserDeleteBulkOperationResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserInTenant": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "roles": {
                "docs": "List of roles assigned to the user in that tenant",
                "type": "list<string>",
              },
              "status": {
                "docs": "Whether the user has signed in or not",
                "type": "UserStatus",
              },
              "tenant": {
                "docs": "The tenant key which the user is associated with",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "associated_tenants": {
                "type": "optional<list<UserInTenant>>",
              },
              "attributes": {
                "docs": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
                "type": "optional<map<string, unknown>>",
              },
              "email": {
                "docs": "The email of the user. If synced, will be unique inside the environment.",
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "environment_id": {
                "docs": "Unique id of the environment that the user belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "first_name": {
                "docs": "First name of the user.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "Unique id of the user",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "key": {
                "docs": "A unique id by which Permit will identify the user for permission checks.",
                "type": "string",
              },
              "last_name": {
                "docs": "Last name of the user.",
                "type": "optional<string>",
              },
              "organization_id": {
                "docs": "Unique id of the organization that the user belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "docs": "Unique id of the project that the user belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "roles": {
                "availability": "deprecated",
                "type": "optional<list<UserRole>>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserReplaceBulkOperationResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserRole": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "role": {
                "docs": "the role that is assigned",
                "type": "string",
              },
              "tenant": {
                "docs": "the tenant the role is associated with",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserStatus": {
            "docs": "An enumeration.",
            "enum": [
              "active",
              "pending",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ValidationError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "loc": {
                "type": "list<ValidationErrorLocItem>",
              },
              "msg": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ValidationErrorLocItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "integer",
            ],
          },
        },
      },
      "rawContents": "errors:
  ListOrganizationsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateOrganizationRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetOrganizationRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteOrganizationRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateOrganizationRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetActiveOrganizationRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListProjectsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateProjectRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetProjectRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteProjectRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateProjectRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  StatsEnvironmentsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListEnvironmentsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateEnvironmentRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetEnvironmentRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteEnvironmentRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateEnvironmentRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CopyEnvironmentRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListResourcesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateResourceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetResourceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ReplaceResourceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteResourceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateResourceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListResourceActionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateResourceActionRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetResourceActionRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteResourceActionRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateResourceActionRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListResourceActionGroupsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateResourceActionGroupRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetResourceActionGroupRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteResourceActionGroupRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateResourceActionGroupRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListResourceRolesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateResourceRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetResourceRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteResourceRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateResourceRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AssignPermissionsToResourceRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  RemovePermissionsFromResourceRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetResourceRoleAncestorsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetResourceRoleDescendantsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListResourceAttributesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateResourceAttributeRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetResourceAttributeRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteResourceAttributeRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateResourceAttributeRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListUserAttributesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateUserAttributeRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetUserAttributeRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteUserAttributeRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateUserAttributeRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRolesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AssignPermissionsToRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  RemovePermissionsFromRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetRoleAncestorsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetRoleDescendantsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListConditionSetsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateConditionSetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConditionSetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteConditionSetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateConditionSetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConditionSetAncestorsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConditionSetDescendantsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListUsersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateUserRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetUserRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ReplaceUserRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteUserRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateUserRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AssignRoleToUserRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UnassignRoleFromUserRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListTenantUsersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListTenantsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateTenantRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetTenantRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteTenantRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateTenantRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteTenantUserRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRoleAssignmentsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AssignRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UnassignRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  BulkAssignRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  BulkUnassignRoleRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListSetPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AssignSetPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UnassignSetPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListResourceInstancesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateResourceInstanceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetResourceInstanceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteResourceInstanceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateResourceInstanceRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  BulkCreateUsersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  BulkReplaceUsersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  BulkDeleteUsersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  BulkCreateTenantsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  BulkDeleteTenantsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
types:
  ActionBlockEditable:
    properties:
      name:
        type: optional<string>
        docs: a more descriptive name for the action
      description:
        type: optional<string>
        docs: >-
          optional description string explaining what this action represents in
          your system
      attributes:
        type: optional<map<string, unknown>>
    source:
      openapi: ../openapi.json
  ActionBlockRead:
    properties:
      name:
        type: optional<string>
        docs: a more descriptive name for the action
      description:
        type: optional<string>
        docs: >-
          optional description string explaining what this action represents in
          your system
      attributes:
        type: optional<map<string, unknown>>
      id:
        type: string
        docs: Unique id of the action
        validation:
          format: uuid
      key:
        type: optional<string>
        docs: action key
    source:
      openapi: ../openapi.json
  AddRolePermissions:
    properties:
      permissions:
        docs: >-
          List of permissions to assign to the role. If a permission is already
          granted to the role it is skipped. Each permission can be either a
          resource action id, or `{resource_key}:{action_key}`, i.e: the
          "permission name".
        type: list<string>
    source:
      openapi: ../openapi.json
  AttributeBlockEditable:
    properties:
      type:
        type: AttributeType
        docs: >-
          The type of the attribute, we currently support: `bool`, `number`
          (ints, floats), `time` (a timestamp), `string`, and `json`.
      description:
        type: optional<string>
        docs: >-
          optional description string explaining what data this attribute will
          store
    source:
      openapi: ../openapi.json
  AttributeBlockRead:
    properties:
      type:
        type: AttributeType
        docs: >-
          The type of the attribute, we currently support: `bool`, `number`
          (ints, floats), `time` (a timestamp), `string`, and `json`.
      description:
        type: optional<string>
        docs: >-
          optional description string explaining what data this attribute will
          store
      id:
        type: string
        docs: Unique id of the attribute
        validation:
          format: uuid
      key:
        type: optional<string>
        docs: action key
    source:
      openapi: ../openapi.json
  AttributeType:
    enum:
      - bool
      - number
      - string
      - time
      - array
      - json
    docs: supported attribute primitives
    source:
      openapi: ../openapi.json
  BulkRoleAssignmentReport:
    properties:
      assignments_created:
        type: optional<integer>
        default: 0
    source:
      openapi: ../openapi.json
  BulkRoleUnAssignmentReport:
    properties:
      assignments_removed:
        type: optional<integer>
        default: 0
    source:
      openapi: ../openapi.json
  ConditionSetRead:
    properties:
      key:
        type: string
        docs: >-
          A unique id by which Permit will identify the condition set. The key
          will be used as the generated rego rule name.
      type:
        type: optional<ConditionSetType>
        docs: 'the type of the set: UserSet or ResourceSet'
      autogenerated:
        type: optional<boolean>
        docs: whether the set was autogenerated by the system.
        default: false
      resource_id:
        type: optional<string>
        validation:
          format: uuid
      id:
        type: string
        docs: Unique id of the condition set
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the condition set belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the condition set belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the condition set belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the condition set was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the condition set was last updated/modified
          (ISO_8601 format).
      resource:
        type: optional<ResourceRead>
      name:
        type: string
        docs: >-
          A descriptive name for the set, i.e: 'US based employees' or 'Users
          behind VPN'
      description:
        type: optional<string>
        docs: an optional longer description of the set
      conditions:
        type: optional<map<string, unknown>>
        docs: >-
          a boolean expression that consists of multiple conditions, with and/or
          logic.
      parent_id:
        type: optional<string>
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  ConditionSetRuleRead:
    properties:
      id:
        type: string
        docs: Unique id of the condition set rule
        validation:
          format: uuid
      key:
        type: string
        docs: A unique id by which Permit will identify this condition set rule.
      user_set:
        type: string
        docs: >-
          the userset that is currently granted permissions, i.e: all the users
          matching this rule are granted the permission on the resourceset
      permission:
        type: string
        docs: >-
          a permission that is currently granted to the userset *on* the
          resourceset.
      resource_set:
        type: string
        docs: >-
          the resourceset that represents the resources that are currently
          granted for access, i.e: all the resources matching this rule can be
          accessed by the userset to perform the granted *permission*
      organization_id:
        type: string
        docs: Unique id of the organization that the condition set rule belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the condition set rule belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the condition set rule belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          Date and time when the condition set rule was created (ISO_8601
          format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the condition set rule was last updated/modified
          (ISO_8601 format).
    source:
      openapi: ../openapi.json
  ConditionSetType:
    enum:
      - userset
      - resourceset
    docs: An enumeration.
    source:
      openapi: ../openapi.json
  EnvironmentCopyScope:
    properties:
      resources:
        type: optional<EnvironmentCopyScopeFilters>
        docs: Resources to copy
      roles:
        type: optional<EnvironmentCopyScopeFilters>
        docs: Roles to copy
      user_sets:
        type: optional<EnvironmentCopyScopeFilters>
        docs: User sets to copy
      resource_sets:
        type: optional<EnvironmentCopyScopeFilters>
        docs: Resource sets to copy
    source:
      openapi: ../openapi.json
  EnvironmentCopyScopeFilters:
    properties:
      include:
        type: optional<list<string>>
        docs: Objects to include (use * as wildcard)
      exclude:
        type: optional<list<string>>
        docs: Object to exclude (use * as wildcard)
    source:
      openapi: ../openapi.json
  EnvironmentCopyTarget:
    properties:
      existing:
        type: optional<string>
        docs: Identifier of an existing environment to copy into
      new:
        type: optional<EnvironmentCreate>
        docs: >-
          Description of the environment to create. This environment must not
          already exist.
    source:
      openapi: ../openapi.json
  EnvironmentCreate:
    properties:
      key:
        type: string
        docs: >-
          A URL-friendly name of the environment (i.e: slug). You will be able
          to query later using this key instead of the id (UUID) of the
          environment.
        validation:
          pattern: ^[A-Za-z0-9\-_]+$
      name:
        type: string
        docs: The name of the environment
      description:
        type: optional<string>
        docs: an optional longer description of the environment
      custom_branch_name:
        type: optional<string>
        docs: when using gitops feature, an optional branch name for the environment
      jwks:
        type: optional<JwksObj>
        docs: jwks for element frontend only login
      settings:
        type: optional<map<string, unknown>>
        docs: the settings for this environment
    source:
      openapi: ../openapi.json
  EnvironmentRead:
    properties:
      key:
        type: string
        docs: >-
          A URL-friendly name of the environment (i.e: slug). You will be able
          to query later using this key instead of the id (UUID) of the
          environment.
      id:
        type: string
        docs: Unique id of the environment
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the environment belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the environment belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the environment was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the environment was last updated/modified (ISO_8601
          format).
      name:
        type: string
        docs: The name of the environment
      description:
        type: optional<string>
        docs: an optional longer description of the environment
      custom_branch_name:
        type: optional<string>
        docs: when using gitops feature, an optional branch name for the environment
      jwks:
        type: optional<JwksObj>
        docs: jwks for element frontend only login
      settings:
        type: optional<map<string, unknown>>
        docs: the settings for this environment
    source:
      openapi: ../openapi.json
  EnvironmentStats:
    properties:
      key:
        type: string
        docs: >-
          A URL-friendly name of the environment (i.e: slug). You will be able
          to query later using this key instead of the id (UUID) of the
          environment.
      id:
        type: string
        docs: Unique id of the environment
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the environment belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the environment belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the environment was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the environment was last updated/modified (ISO_8601
          format).
      name:
        type: string
        docs: The name of the environment
      description:
        type: optional<string>
        docs: an optional longer description of the environment
      custom_branch_name:
        type: optional<string>
        docs: when using gitops feature, an optional branch name for the environment
      jwks:
        type: optional<JwksObj>
        docs: jwks for element frontend only login
      settings:
        type: optional<map<string, unknown>>
        docs: the settings for this environment
      pdp_configs:
        type: list<PDPConfigRead>
      stats:
        type: Statistics
    source:
      openapi: ../openapi.json
  HTTPValidationError:
    properties:
      detail:
        type: optional<list<ValidationError>>
    source:
      openapi: ../openapi.json
  IdentityRead:
    properties:
      user_id:
        type: string
        docs: >-
          Unique User Id of this identity in the identity provider (including
          the provider type)
      provider:
        type: string
        docs: The identity provider type this identity came from
      sub:
        type: string
        docs: >-
          Unique User Id of this identity in the identity provider (NOT
          including the provider type)
      email:
        type: string
        docs: Email connected to this account identity
        validation:
          format: email
      email_verified:
        type: boolean
        docs: >-
          Whether this email address connected to this account identity is
          verified or not. For social providers like 'Login with Google' this is
          done automatically, otherwise we will send the user a verification
          link in email.
      auth0_info:
        type: map<string, unknown>
        docs: >-
          Raw user info json coming from our identity provider and matching a
          specific account identity
    source:
      openapi: ../openapi.json
  InviteRead:
    properties:
      member_id:
        type: optional<string>
        docs: Unique id of the invite
        validation:
          format: uuid
      email:
        type: string
        docs: The invited member's email address
        validation:
          format: email
      role:
        type: optional<MemberAccessLevel>
        docs: The role the member will be assigned with
      id:
        type: string
        docs: Unique id of the invite
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the invite belongs to.
        validation:
          format: uuid
      invite_code:
        type: string
        docs: The invite code that is sent to the member's email
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the invite was created (ISO_8601 format).
      status:
        type: InviteStatus
        docs: The status of the invite (pending, failed, etc)
      failed_reason:
        type: optional<string>
        docs: if failed, the reason the invitation failed
    source:
      openapi: ../openapi.json
  InviteStatus:
    enum:
      - pending
      - accepted
      - failed
      - canceled
    docs: An enumeration.
    source:
      openapi: ../openapi.json
  JwksObj:
    properties:
      keys:
        docs: The keys to match against the request headers
        type: list<map<string, unknown>>
    source:
      openapi: ../openapi.json
  MemberAccessLevel:
    enum:
      - admin
      - write
      - read
      - no_access
    docs: An enumeration.
    source:
      openapi: ../openapi.json
  MemberAccessObj:
    enum:
      - org
      - project
      - env
    docs: An enumeration.
    source:
      openapi: ../openapi.json
  OnboardingStep:
    enum:
      - create_organization
      - create_project
      - create_resource
      - create_actions
      - assign_permissions
      - assign_user_roles
      - connect_sdk
      - done
    docs: An enumeration.
    source:
      openapi: ../openapi.json
  OrgMemberReadWithGrants:
    properties:
      id:
        type: string
        docs: Unique id of the account member
        validation:
          format: uuid
      email:
        type: string
        docs: Email of the user controlling this account
        validation:
          format: email
      email_verified:
        type: boolean
        docs: >-
          Whether this email address is verified or not. For social providers
          like 'Login with Google' this is done automatically, otherwise we will
          send the user a verification link in email.
      name:
        type: optional<string>
        docs: Name of this user
      given_name:
        type: optional<string>
        docs: First name of the user
      family_name:
        type: optional<string>
        docs: Last name of the user
      picture:
        type: optional<string>
        docs: >-
          URL to picture, photo, or avatar of the user that controls this
          account.
      is_superuser:
        type: boolean
        docs: Whether or not this user has special access to permit.io organizations
      is_onboarding:
        type: boolean
        docs: >-
          Whether or not this user is currently onboarding, needs to be replaced
          by a user journey object
      onboarding_step:
        type: OnboardingStep
        docs: the step the user is currently going through in onboarding
      created_at:
        type: datetime
        docs: Date and time when the account member was created (ISO_8601 format).
      last_login:
        type: optional<datetime>
        docs: Last date and time this user logged in (ISO_8601 format).
      last_ip:
        type: optional<string>
        docs: Last IP address from which this user logged in.
        default: 0.0.0.0
      logins_count:
        type: optional<integer>
        docs: Total number of logins this user has performed.
        default: 0
      identities:
        type: list<IdentityRead>
      invite:
        type: optional<InviteRead>
      settings:
        type: map<string, unknown>
        docs: Custom permit.io dashboard settings, such as preferred theme, etc.
      grants:
        type: list<Permission>
    source:
      openapi: ../openapi.json
  OrganizationRead:
    properties:
      key:
        type: string
        docs: >-
          A URL-friendly name of the organization (i.e: slug). You will be able
          to query later using this key instead of the id (UUID) of the
          organization.
      id:
        type: string
        docs: Unique id of the organization
        validation:
          format: uuid
      is_enterprise:
        type: boolean
        docs: Is this an enterprise account?
      created_at:
        type: datetime
        docs: Date and time when the organization was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the organization was last updated/modified
          (ISO_8601 format).
      name:
        type: string
        docs: The name of the organization, usually it's your company's name.
      settings:
        type: optional<map<string, unknown>>
        docs: the settings for this project
    source:
      openapi: ../openapi.json
  OrganizationReadWithAPIKey:
    properties:
      key:
        type: string
        docs: >-
          A URL-friendly name of the organization (i.e: slug). You will be able
          to query later using this key instead of the id (UUID) of the
          organization.
      id:
        type: string
        docs: Unique id of the organization
        validation:
          format: uuid
      is_enterprise:
        type: boolean
        docs: Is this an enterprise account?
      created_at:
        type: datetime
        docs: Date and time when the organization was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the organization was last updated/modified
          (ISO_8601 format).
      name:
        type: string
        docs: The name of the organization, usually it's your company's name.
      settings:
        type: optional<map<string, unknown>>
        docs: the settings for this project
      api_key_id:
        type: optional<string>
        validation:
          format: uuid
      api_key_secret:
        type: optional<string>
    source:
      openapi: ../openapi.json
  PDPConfigRead:
    properties:
      id:
        type: string
        validation:
          format: uuid
      name:
        type: optional<string>
      organization_id:
        type: string
        docs: Unique id of the organization that the pdp_config belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the pdp_config belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the pdp_config belongs to.
        validation:
          format: uuid
      client_secret: string
    source:
      openapi: ../openapi.json
  PaginatedResultConditionSetRead:
    properties:
      data:
        docs: List of Condition Sets
        type: list<ConditionSetRead>
      total_count:
        type: integer
        validation:
          min: 0
      page_count:
        type: optional<integer>
        default: 0
        validation:
          min: 0
    source:
      openapi: ../openapi.json
  PaginatedResultResourceRead:
    properties:
      data:
        docs: List of Resources
        type: list<ResourceRead>
      total_count:
        type: integer
        validation:
          min: 0
      page_count:
        type: optional<integer>
        default: 0
        validation:
          min: 0
    source:
      openapi: ../openapi.json
  PaginatedResultResourceRoleRead:
    properties:
      data:
        docs: List of Resource Roles
        type: list<ResourceRoleRead>
      total_count:
        type: integer
        validation:
          min: 0
      page_count:
        type: optional<integer>
        default: 0
        validation:
          min: 0
    source:
      openapi: ../openapi.json
  PaginatedResultRoleRead:
    properties:
      data:
        docs: List of Roles
        type: list<RoleRead>
      total_count:
        type: integer
        validation:
          min: 0
      page_count:
        type: optional<integer>
        default: 0
        validation:
          min: 0
    source:
      openapi: ../openapi.json
  PaginatedResultTenantRead:
    properties:
      data:
        docs: List of Tenants
        type: list<TenantRead>
      total_count:
        type: integer
        validation:
          min: 0
      page_count:
        type: optional<integer>
        default: 0
        validation:
          min: 0
    source:
      openapi: ../openapi.json
  PaginatedResultUserRead:
    properties:
      data:
        docs: List of Users
        type: list<UserRead>
      total_count:
        type: integer
        validation:
          min: 0
      page_count:
        type: optional<integer>
        default: 0
        validation:
          min: 0
    source:
      openapi: ../openapi.json
  Permission:
    properties:
      organization_id:
        type: string
        validation:
          format: uuid
      project_id:
        type: optional<string>
        validation:
          format: uuid
      environment_id:
        type: optional<string>
        validation:
          format: uuid
      object_type:
        type: MemberAccessObj
      access_level:
        type: MemberAccessLevel
      organization_key:
        type: optional<string>
      project_key:
        type: optional<string>
      environment_key:
        type: optional<string>
      organization_name:
        type: optional<string>
      project_name:
        type: optional<string>
      environment_name:
        type: optional<string>
    source:
      openapi: ../openapi.json
  ProjectRead:
    properties:
      key:
        type: string
        docs: >-
          A URL-friendly name of the project (i.e: slug). You will be able to
          query later using this key instead of the id (UUID) of the project.
      urn_namespace:
        type: optional<string>
        docs: >-
          Optional namespace for URNs. If empty, URNs will be generated from
          project key.
        validation:
          pattern: '[a-z0-9-]{2,}'
      id:
        type: string
        docs: Unique id of the project
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the project belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the project was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the project was last updated/modified (ISO_8601
          format).
      name:
        type: string
        docs: The name of the project
      description:
        type: optional<string>
        docs: a longer description outlining the project objectives
      settings:
        type: optional<map<string, unknown>>
        docs: the settings for this project
      active_policy_repo_id:
        type: optional<string>
        docs: the id of the policy repo to use for this project
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  RelationsBlock:
    type: map<string, unknown>
    docs: >-
      A actions definition block, typically contained within a resource type
      definition block.

      The actions represents the ways you can interact with a protected
      resource.
  RemoveRolePermissions:
    properties:
      permissions:
        docs: >-
          List of permissions to remove from the role. If a permission is not
          found it is skipped. Each permission can be either a resource action
          id, or `{resource_key}:{action_key}`,i.e: the "permission name".
        type: list<string>
    source:
      openapi: ../openapi.json
  ResourceActionGroupRead:
    properties:
      name:
        type: string
        docs: The name of the action group
      description:
        type: optional<string>
        docs: >-
          An optional longer description of what this action group represents in
          your system
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          optional dictionary of key-value pairs that can be used to store
          arbitrary metadata about this action group. This metadata can be used
          to filter action groups using query parameters with attr_ prefix
      actions:
        type: optional<list<string>>
      key:
        type: string
        docs: >-
          A URL-friendly name of the action group (i.e: slug). You will be able
          to query later using this key instead of the id (UUID) of the action
          group.
        validation:
          pattern: ^[A-Za-z0-9\-_]+$
      id:
        type: string
        docs: Unique id of the action group
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the action group belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the action group belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the action group belongs to.
        validation:
          format: uuid
      resource_id:
        type: string
        docs: Unique id of the resource that the action group belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the action group was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the action group was last updated/modified
          (ISO_8601 format).
    source:
      openapi: ../openapi.json
  ResourceActionRead:
    properties:
      name:
        type: string
        docs: The name of the action
      description:
        type: optional<string>
        docs: >-
          An optional longer description of what this action respresents in your
          system
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          optional dictionary of key-value pairs that can be used to store
          arbitrary metadata about this action. This metadata can be used to
          filter actions using query parameters with attr_ prefix
      key:
        type: string
        docs: >-
          A URL-friendly name of the action (i.e: slug). You will be able to
          query later using this key instead of the id (UUID) of the action.
      id:
        type: string
        docs: Unique id of the action
        validation:
          format: uuid
      permission_name:
        type: string
        docs: >-
          The name of the action, prefixed by the resource the action is acting
          upon.
      organization_id:
        type: string
        docs: Unique id of the organization that the action belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the action belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the action belongs to.
        validation:
          format: uuid
      resource_id:
        type: string
        docs: Unique id of the resource that the action belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the action was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the action was last updated/modified (ISO_8601
          format).
    source:
      openapi: ../openapi.json
  ResourceAttributeCreate:
    properties:
      key:
        type: string
        docs: >-
          A URL-friendly name of the attribute (i.e: slug). You will be able to
          query later using this key instead of the id (UUID) of the attribute.
        validation:
          pattern: ^[A-Za-z0-9\-_]+$
      type:
        type: AttributeType
        docs: >-
          The type of the attribute, we currently support: `bool`, `number`
          (ints, floats), `time` (a timestamp), `string`, and `json`.
      description:
        type: optional<string>
        docs: >-
          An optional longer description of what this attribute respresents in
          your system
    source:
      openapi: ../openapi.json
  ResourceAttributeRead:
    properties:
      type:
        type: AttributeType
        docs: >-
          The type of the attribute, we currently support: `bool`, `number`
          (ints, floats), `time` (a timestamp), `string`, and `json`.
      description:
        type: optional<string>
        docs: >-
          An optional longer description of what this attribute respresents in
          your system
      key:
        type: string
        docs: >-
          A URL-friendly name of the attribute (i.e: slug). You will be able to
          query later using this key instead of the id (UUID) of the attribute.
      id:
        type: string
        docs: Unique id of the attribute
        validation:
          format: uuid
      resource_id:
        type: string
        docs: Unique id of the resource that the attribute belongs to.
        validation:
          format: uuid
      resource_key:
        type: string
        docs: >-
          A URL-friendly name of the resource (i.e: slug). You will be able to
          query later using this key instead of the id (UUID) of the resource.
      organization_id:
        type: string
        docs: Unique id of the organization that the attribute belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the attribute belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the attribute belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the attribute was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the attribute was last updated/modified (ISO_8601
          format).
      built_in:
        type: boolean
        docs: Whether the attribute is built-in, and managed by the Permit system.
    source:
      openapi: ../openapi.json
  ResourceAttributeUpdate:
    properties:
      type:
        type: optional<AttributeType>
        docs: >-
          The type of the attribute, we currently support: `bool`, `number`
          (ints, floats), `time` (a timestamp), `string`, and `json`.
      description:
        type: optional<string>
        docs: >-
          An optional longer description of what this attribute respresents in
          your system
    source:
      openapi: ../openapi.json
  ResourceInstanceRead:
    properties:
      key:
        type: string
        docs: >-
          A unique identifier by which Permit will identify the resource
          instance for permission checks. You will later pass this identifier to
          the `permit.check()` API. A key can be anything: for example the
          resource db id, a url slug, a UUID or anything else as long as it's
          unique on your end. The resource instance key must be url-friendly.
      tenant:
        type: optional<string>
        docs: >-
          the *key* of the tenant that this resource belongs to, used to enforce
          tenant boundaries in multi-tenant apps.
      resource:
        type: string
        docs: >-
          the *key* of the resource (type) of this resource instance. For
          example: if this resource instance is the annual budget document, the
          key of the resource might be `document`.
      id:
        type: string
        docs: Unique id of the resource instance
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the resource instance belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the resource instance belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the resource instance belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: >-
          Date and time when the resource instance was created (ISO_8601
          format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the resource instance was last updated/modified
          (ISO_8601 format).
      resource_id:
        type: string
        docs: the id of the resource (type) of this resource instance.
        validation:
          format: uuid
      tenant_id:
        type: optional<string>
        docs: the id of the tenant of this resource instance.
        validation:
          format: uuid
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          Arbitraty resource attributes that will be used to enforce
          attribute-based access control policies.
    source:
      openapi: ../openapi.json
  ResourceRead:
    properties:
      key:
        type: string
        docs: >-
          A URL-friendly name of the resource (i.e: slug). You will be able to
          query later using this key instead of the id (UUID) of the resource.
      id:
        type: string
        docs: Unique id of the resource
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the resource belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the resource belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the resource belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the resource was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the resource was last updated/modified (ISO_8601
          format).
      name:
        type: string
        docs: The name of the resource
      urn:
        type: optional<string>
        docs: >-
          The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name)
          (Uniform Resource Name) of the resource
      description:
        type: optional<string>
        docs: >-
          An optional longer description of what this resource respresents in
          your system
      actions:
        type: optional<map<string, ActionBlockRead>>
        docs: |2-

                  A actions definition block, typically contained within a resource type definition block.
                  The actions represents the ways you can interact with a protected resource.
                  
      attributes:
        type: optional<map<string, AttributeBlockRead>>
        docs: >-
          Attributes that each resource of this type defines, and can be used in
          your ABAC policies.
      action_groups:
        type: optional<map<string, list<string>>>
    source:
      openapi: ../openapi.json
  Roles:
    discriminated: false
    union:
      - list<RoleRead>
      - type: PaginatedResultRoleRead
    source:
      openapi: ../openapi.json
    inline: true
  ResourceRoleList:
    properties:
      roles:
        display-name: Roles
        type: Roles
    source:
      openapi: ../openapi.json
  ResourceRoleRead:
    properties:
      name:
        type: string
        docs: The name of the role
      description:
        type: optional<string>
        docs: >-
          optional description string explaining what this role represents, or
          what permissions are granted to it.
      permissions:
        type: optional<list<string>>
        docs: >-
          list of action keys that define what actions this resource role is
          permitted to do
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          optional dictionary of key-value pairs that can be used to store
          arbitrary metadata about this role. This metadata can be used to
          filter role using query parameters with attr_ prefix, currently
          supports only 'equals' operator
      extends:
        type: optional<list<string>>
        docs: >-
          list of role keys that define what roles this role extends. In other
          words: this role will automatically inherit all the permissions of the
          given roles in this list.
      key:
        type: string
        docs: >-
          A URL-friendly name of the role (i.e: slug). You will be able to query
          later using this key instead of the id (UUID) of the role.
      id:
        type: string
        docs: Unique id of the role
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the role belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the role belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the role belongs to.
        validation:
          format: uuid
      resource_id:
        type: string
        docs: Unique id of the resource that the role belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the role was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the role was last updated/modified (ISO_8601
          format).
    source:
      openapi: ../openapi.json
  RoleAssignmentCreate:
    properties:
      role:
        type: string
        docs: >-
          the role that will be assigned (accepts either the role id or the role
          key)
      tenant:
        type: string
        docs: >-
          the tenant the role is associated with (accepts either the tenant id
          or the tenant key)
      user:
        type: string
        docs: >-
          the user the role will be assigned to (accepts either the user id or
          the user key)
    source:
      openapi: ../openapi.json
  RoleAssignmentRead:
    properties:
      id:
        type: string
        docs: Unique id of the role assignment
        validation:
          format: uuid
      user:
        type: string
        docs: the user the role is assigned to
      role:
        type: string
        docs: the role that is assigned
      tenant:
        type: string
        docs: the tenant the role is associated with
      user_id:
        type: string
        docs: Unique id of the user
        validation:
          format: uuid
      role_id:
        type: string
        docs: Unique id of the role
        validation:
          format: uuid
      tenant_id:
        type: string
        docs: Unique id of the tenant
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the role assignment belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the role assignment belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the role assignment belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the role assignment was created (ISO_8601 format).
    source:
      openapi: ../openapi.json
  RoleAssignmentRemove:
    properties:
      role:
        type: string
        docs: >-
          the role that will be unassigned (accepts either the role id or the
          role key)
      tenant:
        type: string
        docs: >-
          the tenant the role is associated with (accepts either the tenant id
          or the tenant key)
      user:
        type: string
        docs: >-
          the user the role will be unassigned from (accepts either the user id
          or the user key)
    source:
      openapi: ../openapi.json
  RoleBlock:
    properties:
      description:
        type: optional<string>
        docs: >-
          optional description string explaining what this role represents, or
          what permissions are granted to it.
      permissions:
        type: optional<list<string>>
        docs: >-
          list of action keys that define what actions this resource role is
          permitted to do
    source:
      openapi: ../openapi.json
  RoleList:
    properties:
      roles:
        display-name: Roles
        type: Roles
    source:
      openapi: ../openapi.json
  RoleRead:
    properties:
      name:
        type: string
        docs: The name of the role
      description:
        type: optional<string>
        docs: >-
          optional description string explaining what this role represents, or
          what permissions are granted to it.
      permissions:
        type: optional<list<string>>
        docs: >-
          list of action keys that define what actions this resource role is
          permitted to do
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          optional dictionary of key-value pairs that can be used to store
          arbitrary metadata about this role. This metadata can be used to
          filter role using query parameters with attr_ prefix, currently
          supports only 'equals' operator
      extends:
        type: optional<list<string>>
        docs: >-
          list of role keys that define what roles this role extends. In other
          words: this role will automatically inherit all the permissions of the
          given roles in this list.
      key:
        type: string
        docs: >-
          A URL-friendly name of the role (i.e: slug). You will be able to query
          later using this key instead of the id (UUID) of the role.
      id:
        type: string
        docs: Unique id of the role
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the role belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the role belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the role belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the role was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the role was last updated/modified (ISO_8601
          format).
    source:
      openapi: ../openapi.json
  RolesBlock:
    type: map<string, unknown>
    docs: Resource roles definition block, defines all the roles on the resource.
  Statistics:
    properties:
      roles:
        type: integer
        validation:
          min: 0
      users:
        type: integer
        validation:
          min: 0
      policies:
        type: integer
        validation:
          min: 0
      resources:
        type: integer
        validation:
          min: 0
      tenants:
        type: integer
        validation:
          min: 0
      has_decision_logs: boolean
      members:
        type: list<OrgMemberReadWithGrants>
    source:
      openapi: ../openapi.json
  TenantCreate:
    properties:
      key:
        type: string
        docs: >-
          A unique id by which Permit will identify the tenant. The tenant key
          must be url-friendly (slugified).
        validation:
          pattern: ^[A-Za-z0-9\-_]+$
      name:
        type: string
        docs: A descriptive name for the tenant
      description:
        type: optional<string>
        docs: an optional longer description of the tenant
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          Arbitraty tenant attributes that will be used to enforce
          attribute-based access control policies.
    source:
      openapi: ../openapi.json
  TenantCreateBulkOperationResult:
    properties: {}
    source:
      openapi: ../openapi.json
  TenantDeleteBulkOperationResult:
    properties: {}
    source:
      openapi: ../openapi.json
  TenantRead:
    properties:
      key:
        type: string
        docs: >-
          A unique id by which Permit will identify the tenant. The tenant key
          must be url-friendly (slugified).
      id:
        type: string
        docs: Unique id of the tenant
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the tenant belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the tenant belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the tenant belongs to.
        validation:
          format: uuid
      created_at:
        type: datetime
        docs: Date and time when the tenant was created (ISO_8601 format).
      updated_at:
        type: datetime
        docs: >-
          Date and time when the tenant was last updated/modified (ISO_8601
          format).
      last_action_at:
        type: datetime
        docs: >-
          Date and time when the tenant was last active (ISO_8601 format). In
          other words, this is the last time a permission check was done on a
          resource belonging to this tenant.
      name:
        type: string
        docs: A descriptive name for the tenant
      description:
        type: optional<string>
        docs: an optional longer description of the tenant
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          Arbitraty tenant attributes that will be used to enforce
          attribute-based access control policies.
    source:
      openapi: ../openapi.json
  UserCreate:
    properties:
      key:
        type: string
        docs: >-
          A unique id by which Permit will identify the user for permission
          checks.
        validation:
          pattern: ^[A-Za-z0-9|@+\-\._]+$
      email:
        type: optional<string>
        docs: >-
          The email of the user. If synced, will be unique inside the
          environment.
        validation:
          format: email
      first_name:
        type: optional<string>
        docs: First name of the user.
      last_name:
        type: optional<string>
        docs: Last name of the user.
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          Arbitrary user attributes that will be used to enforce attribute-based
          access control policies.
    source:
      openapi: ../openapi.json
  UserCreateBulkOperationResult:
    properties: {}
    source:
      openapi: ../openapi.json
  UserDeleteBulkOperationResult:
    properties: {}
    source:
      openapi: ../openapi.json
  UserInTenant:
    properties:
      tenant:
        type: string
        docs: The tenant key which the user is associated with
      roles:
        docs: List of roles assigned to the user in that tenant
        type: list<string>
      status:
        type: UserStatus
        docs: Whether the user has signed in or not
    source:
      openapi: ../openapi.json
  UserRead:
    properties:
      key:
        type: string
        docs: >-
          A unique id by which Permit will identify the user for permission
          checks.
      id:
        type: string
        docs: Unique id of the user
        validation:
          format: uuid
      organization_id:
        type: string
        docs: Unique id of the organization that the user belongs to.
        validation:
          format: uuid
      project_id:
        type: string
        docs: Unique id of the project that the user belongs to.
        validation:
          format: uuid
      environment_id:
        type: string
        docs: Unique id of the environment that the user belongs to.
        validation:
          format: uuid
      associated_tenants:
        type: optional<list<UserInTenant>>
      roles:
        type: optional<list<UserRole>>
        availability: deprecated
      email:
        type: optional<string>
        docs: >-
          The email of the user. If synced, will be unique inside the
          environment.
        validation:
          format: email
      first_name:
        type: optional<string>
        docs: First name of the user.
      last_name:
        type: optional<string>
        docs: Last name of the user.
      attributes:
        type: optional<map<string, unknown>>
        docs: >-
          Arbitrary user attributes that will be used to enforce attribute-based
          access control policies.
    source:
      openapi: ../openapi.json
  UserReplaceBulkOperationResult:
    properties: {}
    source:
      openapi: ../openapi.json
  UserRole:
    properties:
      role:
        type: string
        docs: the role that is assigned
      tenant:
        type: string
        docs: the tenant the role is associated with
    source:
      openapi: ../openapi.json
  UserStatus:
    enum:
      - active
      - pending
    docs: An enumeration.
    source:
      openapi: ../openapi.json
  ValidationErrorLocItem:
    discriminated: false
    union:
      - string
      - integer
    source:
      openapi: ../openapi.json
    inline: true
  ValidationError:
    properties:
      loc:
        type: list<ValidationErrorLocItem>
      msg: string
      type: string
    source:
      openapi: ../openapi.json
",
    },
    "bulkOperations.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "None",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Bulk Operations",
          "endpoints": {
            "bulk_create_tenants": {
              "auth": true,
              "display-name": "Bulk Create Tenants",
              "docs": undefined,
              "errors": [
                "root.BulkCreateTenantsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "operations": [
                      {
                        "attributes": {
                          "allowed_locations": [
                            "US",
                            "CA",
                          ],
                        },
                        "key": "stripeinc",
                        "name": "Stripe Inc",
                      },
                    ],
                  },
                  "response": {
                    "body": {},
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/bulk/tenants",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "operations": {
                      "type": "list<root.TenantCreate>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TenantCreateBulkOperation",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TenantCreateBulkOperationResult",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "bulk_create_users": {
              "auth": true,
              "display-name": "Bulk Create Users",
              "docs": undefined,
              "errors": [
                "root.BulkCreateUsersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "operations": [
                      {
                        "attributes": {
                          "age": 30,
                          "department": "marketing",
                          "subscription": {
                            "expired": false,
                            "tier": "pro",
                          },
                        },
                        "email": "jane@coolcompany.com",
                        "first_name": "Jane",
                        "key": "user|892179821739812389327",
                        "last_name": "Doe",
                      },
                    ],
                  },
                  "response": {
                    "body": {},
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/bulk/users",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "operations": {
                      "type": "list<root.UserCreate>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserCreateBulkOperation",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.UserCreateBulkOperationResult",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "bulk_delete_tenants": {
              "auth": true,
              "display-name": "Bulk Delete Tenants",
              "docs": undefined,
              "errors": [
                "root.BulkDeleteTenantsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "idents": [
                      "idents",
                    ],
                  },
                  "response": {
                    "body": {},
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/bulk/tenants",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "idents": {
                      "type": "list<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TenantDeleteBulkOperation",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TenantDeleteBulkOperationResult",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "bulk_delete_users": {
              "auth": true,
              "display-name": "Bulk Delete Users",
              "docs": undefined,
              "errors": [
                "root.BulkDeleteUsersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "idents": [
                      "idents",
                    ],
                  },
                  "response": {
                    "body": {},
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/bulk/users",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "idents": {
                      "type": "list<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserDeleteBulkOperation",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.UserDeleteBulkOperationResult",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "bulk_replace_users": {
              "auth": true,
              "display-name": "Bulk Replace Users",
              "docs": undefined,
              "errors": [
                "root.BulkReplaceUsersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "operations": [
                      {
                        "attributes": {
                          "age": 30,
                          "department": "marketing",
                          "subscription": {
                            "expired": false,
                            "tier": "pro",
                          },
                        },
                        "email": "jane@coolcompany.com",
                        "first_name": "Jane",
                        "key": "user|892179821739812389327",
                        "last_name": "Doe",
                      },
                    ],
                  },
                  "response": {
                    "body": {},
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/bulk/users",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "operations": {
                      "type": "list<root.UserCreate>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserReplaceBulkOperation",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.UserReplaceBulkOperationResult",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    bulk_create_users:
      path: /v2/facts/{proj_id}/{env_id}/bulk/users
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Bulk Create Users
      request:
        name: UserCreateBulkOperation
        body:
          properties:
            operations:
              type: list<root.UserCreate>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.UserCreateBulkOperationResult
        status-code: 200
      errors:
        - root.BulkCreateUsersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            operations:
              - key: user|892179821739812389327
                email: jane@coolcompany.com
                first_name: Jane
                last_name: Doe
                attributes:
                  department: marketing
                  age: 30
                  subscription:
                    tier: pro
                    expired: false
          response:
            body: {}
    bulk_replace_users:
      path: /v2/facts/{proj_id}/{env_id}/bulk/users
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Bulk Replace Users
      request:
        name: UserReplaceBulkOperation
        body:
          properties:
            operations:
              type: list<root.UserCreate>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.UserReplaceBulkOperationResult
        status-code: 200
      errors:
        - root.BulkReplaceUsersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            operations:
              - key: user|892179821739812389327
                email: jane@coolcompany.com
                first_name: Jane
                last_name: Doe
                attributes:
                  department: marketing
                  age: 30
                  subscription:
                    tier: pro
                    expired: false
          response:
            body: {}
    bulk_delete_users:
      path: /v2/facts/{proj_id}/{env_id}/bulk/users
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Bulk Delete Users
      request:
        name: UserDeleteBulkOperation
        body:
          properties:
            idents:
              type: list<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.UserDeleteBulkOperationResult
        status-code: 200
      errors:
        - root.BulkDeleteUsersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            idents:
              - idents
          response:
            body: {}
    bulk_create_tenants:
      path: /v2/facts/{proj_id}/{env_id}/bulk/tenants
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Bulk Create Tenants
      request:
        name: TenantCreateBulkOperation
        body:
          properties:
            operations:
              type: list<root.TenantCreate>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.TenantCreateBulkOperationResult
        status-code: 200
      errors:
        - root.BulkCreateTenantsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            operations:
              - key: stripeinc
                name: Stripe Inc
                attributes:
                  allowed_locations:
                    - US
                    - CA
          response:
            body: {}
    bulk_delete_tenants:
      path: /v2/facts/{proj_id}/{env_id}/bulk/tenants
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Bulk Delete Tenants
      request:
        name: TenantDeleteBulkOperation
        body:
          properties:
            idents:
              type: list<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.TenantDeleteBulkOperationResult
        status-code: 200
      errors:
        - root.BulkDeleteTenantsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            idents:
              - idents
          response:
            body: {}
  source:
    openapi: ../openapi.json
  display-name: Bulk Operations
docs: None
",
    },
    "conditionSetRules.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Represents a "mini" ABAC rule comprised of (UserSet, Action, ResourceSet).

If such tuple exists, it means all users matching the UserSet
can perform the Action on the resources matching ResourceSet.

Example:
(`us_based_employees`, `repository:clone`, `private_repos`) where:
- `us_based_employees` is a user set
- `repository:clone` is an action
- `private_repos` is a resource set
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Condition Set Rules",
          "endpoints": {
            "assign_set_permissions": {
              "auth": true,
              "display-name": "Assign Set Permissions",
              "docs": "Grant permissions to a user set *on* a resource set.

If the permission is already granted, it is skipped.",
              "errors": [
                "root.AssignSetPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "permission": "repository:clone",
                    "resource_set": "private_repos",
                    "user_set": "us_based_employees",
                  },
                  "response": {
                    "body": [
                      {
                        "created_at": "2019-08-24T14:15:22Z",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "us_based_employees_can_repository_clone_private_repos",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "permission": "repository:clone",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource_set": "private_repos",
                        "updated_at": "2019-08-24T14:16:22Z",
                        "user_set": "us_based_employees",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/set_rules",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "is_resource": {
                      "default": false,
                      "docs": "if True, will set the condition set rule to the resource's autogen resource-set.",
                      "type": "optional<boolean>",
                    },
                    "is_role": {
                      "default": false,
                      "docs": "if True, will set the condition set rule to the role's autogen user-set.",
                      "type": "optional<boolean>",
                    },
                    "permission": {
                      "docs": "The permission that will be granted to the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".",
                      "type": "string",
                    },
                    "resource_set": {
                      "docs": "The resourceset that represents the resources that are granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*",
                      "type": "string",
                    },
                    "user_set": {
                      "docs": "The userset that will be given permission, i.e: all the users matching this rule will be given the specified permission",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConditionSetRuleCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ConditionSetRuleRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_set_permissions": {
              "auth": true,
              "display-name": "List Set Permissions",
              "docs": "Lists the condition set rules matching the filter.
- If the `user_set` filter is present, will only return the permissions set of that user set.
- If the `permission` filter is present, will only return the permissions sets that equals to the queried permission.
- If the `resource_set` filter is present, will only return the permissions set of that resource set.",
              "errors": [
                "root.ListSetPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": [
                      {
                        "created_at": "2019-08-24T14:15:22Z",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "us_based_employees_can_repository_clone_private_repos",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "permission": "repository:clone",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource_set": "private_repos",
                        "updated_at": "2019-08-24T14:16:22Z",
                        "user_set": "us_based_employees",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/set_rules",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListSetPermissionsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "permission": {
                    "docs": "optional permission filter, will only return condition set rules granting this permission",
                    "type": "optional<string>",
                  },
                  "resource_set": {
                    "docs": "optional resource set filter, will only return rules where the permission is granted on this resource set",
                    "type": "optional<string>",
                  },
                  "user_set": {
                    "docs": "optional user set filter, will only return rules where the permission is granted to this user set",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ConditionSetRuleRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unassign_set_permissions": {
              "auth": true,
              "display-name": "Unassign Set Permissions",
              "docs": "Revokes permissions to a user set *on* a resource set.

If the permission is not granted, it is skipped.",
              "errors": [
                "root.UnassignSetPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "permission": "repository:clone",
                    "resource_set": "private_repos",
                    "user_set": "us_based_employees",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/set_rules",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "is_resource": {
                      "default": false,
                      "docs": "if True, will set the condition set rule to the resource's autogen resource-set.",
                      "type": "optional<boolean>",
                    },
                    "is_role": {
                      "default": false,
                      "docs": "if True, will set the condition set rule to the role's autogen user-set.",
                      "type": "optional<boolean>",
                    },
                    "permission": {
                      "docs": "The permission that will be removed from the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the "permission name".",
                      "type": "string",
                    },
                    "resource_set": {
                      "docs": "The resourceset that represents the resources that are no longer granted for access, i.e: all the resources matching this rule can no longer be accessed by the userset, and will be revoked the specified *permission*",
                      "type": "string",
                    },
                    "user_set": {
                      "docs": "The userset that will be unassigned these permission, i.e: all the users matching this rule will lose the specified permission",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConditionSetRuleRemove",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_set_permissions:
      path: /v2/facts/{proj_id}/{env_id}/set_rules
      method: GET
      auth: true
      docs: >-
        Lists the condition set rules matching the filter.

        - If the `user_set` filter is present, will only return the permissions
        set of that user set.

        - If the `permission` filter is present, will only return the
        permissions sets that equals to the queried permission.

        - If the `resource_set` filter is present, will only return the
        permissions set of that resource set.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Set Permissions
      request:
        name: ListSetPermissionsRequest
        query-parameters:
          user_set:
            type: optional<string>
            docs: >-
              optional user set filter, will only return rules where the
              permission is granted to this user set
          permission:
            type: optional<string>
            docs: >-
              optional permission filter, will only return condition set rules
              granting this permission
          resource_set:
            type: optional<string>
            docs: >-
              optional resource set filter, will only return rules where the
              permission is granted on this resource set
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ConditionSetRuleRead>
        status-code: 200
      errors:
        - root.ListSetPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                key: us_based_employees_can_repository_clone_private_repos
                user_set: us_based_employees
                permission: repository:clone
                resource_set: private_repos
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:16:22Z'
    assign_set_permissions:
      path: /v2/facts/{proj_id}/{env_id}/set_rules
      method: POST
      auth: true
      docs: |-
        Grant permissions to a user set *on* a resource set.

        If the permission is already granted, it is skipped.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Assign Set Permissions
      request:
        name: ConditionSetRuleCreate
        body:
          properties:
            user_set:
              type: string
              docs: >-
                The userset that will be given permission, i.e: all the users
                matching this rule will be given the specified permission
            permission:
              type: string
              docs: >-
                The permission that will be granted to the userset *on* the
                resourceset. The permission can be either a resource action id,
                or `{resource_key}:{action_key}`, i.e: the "permission name".
            resource_set:
              type: string
              docs: >-
                The resourceset that represents the resources that are granted
                for access, i.e: all the resources matching this rule can be
                accessed by the userset to perform the granted *permission*
            is_role:
              type: optional<boolean>
              docs: >-
                if True, will set the condition set rule to the role's autogen
                user-set.
              default: false
            is_resource:
              type: optional<boolean>
              docs: >-
                if True, will set the condition set rule to the resource's
                autogen resource-set.
              default: false
        content-type: application/json
      response:
        docs: Successful Response
        type: list<root.ConditionSetRuleRead>
        status-code: 200
      errors:
        - root.AssignSetPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            user_set: us_based_employees
            permission: repository:clone
            resource_set: private_repos
          response:
            body:
              - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                key: us_based_employees_can_repository_clone_private_repos
                user_set: us_based_employees
                permission: repository:clone
                resource_set: private_repos
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:16:22Z'
    unassign_set_permissions:
      path: /v2/facts/{proj_id}/{env_id}/set_rules
      method: DELETE
      auth: true
      docs: |-
        Revokes permissions to a user set *on* a resource set.

        If the permission is not granted, it is skipped.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Unassign Set Permissions
      request:
        name: ConditionSetRuleRemove
        body:
          properties:
            user_set:
              type: string
              docs: >-
                The userset that will be unassigned these permission, i.e: all
                the users matching this rule will lose the specified permission
            permission:
              type: string
              docs: >-
                The permission that will be removed from the userset *on* the
                resourceset. The permission can be either a resource action id,
                or `{resource_key}:{action_key}`, i.e: the "permission name".
            resource_set:
              type: string
              docs: >-
                The resourceset that represents the resources that are no longer
                granted for access, i.e: all the resources matching this rule
                can no longer be accessed by the userset, and will be revoked
                the specified *permission*
            is_role:
              type: optional<boolean>
              docs: >-
                if True, will set the condition set rule to the role's autogen
                user-set.
              default: false
            is_resource:
              type: optional<boolean>
              docs: >-
                if True, will set the condition set rule to the resource's
                autogen resource-set.
              default: false
        content-type: application/json
      errors:
        - root.UnassignSetPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            user_set: us_based_employees
            permission: repository:clone
            resource_set: private_repos
  source:
    openapi: ../openapi.json
  display-name: Condition Set Rules
docs: |

  Represents a "mini" ABAC rule comprised of (UserSet, Action, ResourceSet).

  If such tuple exists, it means all users matching the UserSet
  can perform the Action on the resources matching ResourceSet.

  Example:
  (`us_based_employees`, `repository:clone`, `private_repos`) where:
  - `us_based_employees` is a user set
  - `repository:clone` is an action
  - `private_repos` is a resource set
",
    },
    "conditionSets.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Condition sets are sets of objects that are dynamically defined based on conditions on the objects' attributes.
Conditions sets allows you the flexibility of ABAC with the simplicity of RBAC.

There are currently two types of condition sets at the moment:
1) user set = the set of users that match all the specified conditions.
2) resource set = the set of resources that match all the specified conditions.

Examples:

- `us_based_employees` = {U1, ..., Un} = {all **users** who are *located in the US* and are *assigned the employee role*}
- `private_repos` = {R1, ..., Rn} = {all **resources** *of type repository* that *are private*}

We can then picture a **matrix** of assignment between *user sets* and *resource sets*.

Example:
If we check the checkbox where `us_based_employees` and `private_repos->clone` action intersect, we are setting a rule:
*all US based employees can clone private repos*.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Condition Sets",
          "endpoints": {
            "create_condition_set": {
              "auth": true,
              "display-name": "Create Condition Set",
              "docs": "Creates a new condition set (can be either a user set or a resource set).",
              "errors": [
                "root.CreateConditionSetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "conditions": {
                      "allOf": [
                        {
                          "user.role": {
                            "equals": "employee",
                          },
                        },
                        {
                          "user.location": {
                            "in": [
                              "US",
                              "Canada",
                            ],
                          },
                        },
                      ],
                    },
                    "key": "na_based_employees",
                    "name": "US or Canada based employees",
                    "type": "userset",
                  },
                  "response": {
                    "body": {
                      "autogenerated": false,
                      "conditions": {
                        "allOf": [
                          {
                            "user.role": {
                              "equals": "employee",
                            },
                          },
                          {
                            "user.location": {
                              "in": [
                                "US",
                                "Canada",
                              ],
                            },
                          },
                        ],
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "All employees based in the US or Canada",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "na_based_employees",
                      "name": "US or Canada based employees",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "parent_id": "parent_id",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource": {
                        "action_groups": {
                          "key": [
                            "value",
                          ],
                        },
                        "actions": {
                          "clone": {
                            "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                          },
                          "push": {
                            "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                          },
                          "read": {
                            "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                          },
                        },
                        "attributes": {
                          "created": {
                            "description": "the time (timestamp) the repository was created",
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                            "type": "time",
                          },
                          "private": {
                            "description": "whether the repo is private (if false, the repo is public)",
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                            "type": "bool",
                          },
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "a git repository stored on github",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "repository",
                        "name": "Repository",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "updated_at": "2019-08-24T14:15:22Z",
                        "urn": "prn:github:scm:repository",
                      },
                      "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                      "type": "userset",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/condition_sets",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "autogenerated": {
                      "default": false,
                      "docs": "whether the set was autogenerated by the system.",
                      "type": "optional<boolean>",
                    },
                    "conditions": {
                      "docs": "a boolean expression that consists of multiple conditions, with and/or logic.",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "an optional longer description of the set",
                      "type": "optional<string>",
                    },
                    "key": {
                      "docs": "A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "name": {
                      "docs": "A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'",
                      "type": "string",
                    },
                    "parent_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "resource_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "type": {
                      "docs": "the type of the set: UserSet or ResourceSet",
                      "type": "optional<root.ConditionSetType>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConditionSetCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ConditionSetRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_condition_set": {
              "auth": true,
              "display-name": "Delete Condition Set",
              "docs": "Deletes a condition set and all its related data.
This includes any permissions granted to said condition set (i.e: any matching condition set rules).",
              "errors": [
                "root.DeleteConditionSetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "condition_set_id": "condition_set_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}",
              "path-parameters": {
                "condition_set_id": {
                  "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_condition_set": {
              "auth": true,
              "display-name": "Get Condition Set",
              "docs": "Gets a single condition set, if such condition set exists.",
              "errors": [
                "root.GetConditionSetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "condition_set_id": "condition_set_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "autogenerated": false,
                      "conditions": {
                        "allOf": [
                          {
                            "user.role": {
                              "equals": "employee",
                            },
                          },
                          {
                            "user.location": {
                              "in": [
                                "US",
                                "Canada",
                              ],
                            },
                          },
                        ],
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "All employees based in the US or Canada",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "na_based_employees",
                      "name": "US or Canada based employees",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "parent_id": "parent_id",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource": {
                        "action_groups": {
                          "key": [
                            "value",
                          ],
                        },
                        "actions": {
                          "clone": {
                            "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                          },
                          "push": {
                            "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                          },
                          "read": {
                            "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                          },
                        },
                        "attributes": {
                          "created": {
                            "description": "the time (timestamp) the repository was created",
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                            "type": "time",
                          },
                          "private": {
                            "description": "whether the repo is private (if false, the repo is public)",
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                            "type": "bool",
                          },
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "a git repository stored on github",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "repository",
                        "name": "Repository",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "updated_at": "2019-08-24T14:15:22Z",
                        "urn": "prn:github:scm:repository",
                      },
                      "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                      "type": "userset",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}",
              "path-parameters": {
                "condition_set_id": {
                  "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ConditionSetRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_condition_set_ancestors": {
              "auth": true,
              "display-name": "Get Condition Set Ancestors",
              "docs": "Gets all ancestors (parent, parent of parent, and so on)",
              "errors": [
                "root.GetConditionSetAncestorsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "condition_set_id": "condition_set_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": [
                      {
                        "autogenerated": false,
                        "conditions": {
                          "allOf": [
                            {
                              "user.role": {
                                "equals": "employee",
                              },
                            },
                            {
                              "user.location": {
                                "in": [
                                  "US",
                                  "Canada",
                                ],
                              },
                            },
                          ],
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "All employees based in the US or Canada",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "na_based_employees",
                        "name": "US or Canada based employees",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "parent_id": "parent_id",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource": {
                          "action_groups": {
                            "key": [
                              "value",
                            ],
                          },
                          "actions": {
                            "clone": {
                              "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                            },
                            "push": {
                              "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                            },
                            "read": {
                              "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                            },
                          },
                          "attributes": {
                            "created": {
                              "description": "the time (timestamp) the repository was created",
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                              "type": "time",
                            },
                            "private": {
                              "description": "whether the repo is private (if false, the repo is public)",
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                              "type": "bool",
                            },
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "a git repository stored on github",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "repository",
                          "name": "Repository",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "updated_at": "2019-08-24T14:15:22Z",
                          "urn": "prn:github:scm:repository",
                        },
                        "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                        "type": "userset",
                        "updated_at": "2019-08-24T14:15:22Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/ancestors",
              "path-parameters": {
                "condition_set_id": {
                  "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetConditionSetAncestorsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ConditionSetRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_condition_set_descendants": {
              "auth": true,
              "display-name": "Get Condition Set Descendants",
              "docs": "Gets all descendants (children, children of children, and so on)",
              "errors": [
                "root.GetConditionSetDescendantsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "condition_set_id": "condition_set_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": [
                      {
                        "autogenerated": false,
                        "conditions": {
                          "allOf": [
                            {
                              "user.role": {
                                "equals": "employee",
                              },
                            },
                            {
                              "user.location": {
                                "in": [
                                  "US",
                                  "Canada",
                                ],
                              },
                            },
                          ],
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "All employees based in the US or Canada",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "na_based_employees",
                        "name": "US or Canada based employees",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "parent_id": "parent_id",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource": {
                          "action_groups": {
                            "key": [
                              "value",
                            ],
                          },
                          "actions": {
                            "clone": {
                              "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                            },
                            "push": {
                              "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                            },
                            "read": {
                              "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                            },
                          },
                          "attributes": {
                            "created": {
                              "description": "the time (timestamp) the repository was created",
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                              "type": "time",
                            },
                            "private": {
                              "description": "whether the repo is private (if false, the repo is public)",
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                              "type": "bool",
                            },
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "a git repository stored on github",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "repository",
                          "name": "Repository",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "updated_at": "2019-08-24T14:15:22Z",
                          "urn": "prn:github:scm:repository",
                        },
                        "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                        "type": "userset",
                        "updated_at": "2019-08-24T14:15:22Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/descendants",
              "path-parameters": {
                "condition_set_id": {
                  "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetConditionSetDescendantsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ConditionSetRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_condition_sets": {
              "auth": true,
              "display-name": "List Condition Sets",
              "docs": "Lists all condition sets matching a filter.",
              "errors": [
                "root.ListConditionSetsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "autogenerated": false,
                          "conditions": {
                            "allOf": [
                              {
                                "user.role": {
                                  "equals": "employee",
                                },
                              },
                              {
                                "user.location": {
                                  "in": [
                                    "US",
                                    "Canada",
                                  ],
                                },
                              },
                            ],
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "All employees based in the US or Canada",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "na_based_employees",
                          "name": "US or Canada based employees",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "parent_id": "parent_id",
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "resource": {
                            "actions": {
                              "clone": {
                                "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                              },
                              "push": {
                                "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                              },
                              "read": {
                                "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                              },
                            },
                            "attributes": {
                              "created": {
                                "description": "the time (timestamp) the repository was created",
                                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                                "type": "time",
                              },
                              "private": {
                                "description": "whether the repo is private (if false, the repo is public)",
                                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                                "type": "bool",
                              },
                            },
                            "created_at": "2019-08-24T14:15:22Z",
                            "description": "a git repository stored on github",
                            "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "key": "repository",
                            "name": "Repository",
                            "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                            "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                            "updated_at": "2019-08-24T14:15:22Z",
                            "urn": "prn:github:scm:repository",
                          },
                          "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                          "type": "userset",
                          "updated_at": "2019-08-24T14:15:22Z",
                        },
                      ],
                      "page_count": 1,
                      "total_count": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/condition_sets",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListConditionSetsRequest",
                "query-parameters": {
                  "include_total_count": {
                    "default": false,
                    "docs": "Include total count in response",
                    "type": "optional<boolean>",
                  },
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "search": {
                    "docs": "Text search for the condition sets name or key",
                    "type": "optional<string>",
                  },
                  "type": {
                    "docs": "if provided, will return only the condition sets of the specified type. e.g: only user sets.",
                    "type": "optional<root.ConditionSetType>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "ListConditionSetsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_condition_set": {
              "auth": true,
              "display-name": "Update Condition Set",
              "docs": "Partially updates a condition set.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateConditionSetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "condition_set_id": "condition_set_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "conditions": {
                      "allOf": [
                        {
                          "user.role": {
                            "equals": "manager",
                          },
                        },
                        {
                          "user.location": {
                            "in": [
                              "US",
                            ],
                          },
                        },
                      ],
                    },
                    "name": "US based managers",
                  },
                  "response": {
                    "body": {
                      "autogenerated": false,
                      "conditions": {
                        "allOf": [
                          {
                            "user.role": {
                              "equals": "employee",
                            },
                          },
                          {
                            "user.location": {
                              "in": [
                                "US",
                                "Canada",
                              ],
                            },
                          },
                        ],
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "All employees based in the US or Canada",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "na_based_employees",
                      "name": "US or Canada based employees",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "parent_id": "parent_id",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource": {
                        "action_groups": {
                          "key": [
                            "value",
                          ],
                        },
                        "actions": {
                          "clone": {
                            "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                          },
                          "push": {
                            "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                          },
                          "read": {
                            "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                          },
                        },
                        "attributes": {
                          "created": {
                            "description": "the time (timestamp) the repository was created",
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                            "type": "time",
                          },
                          "private": {
                            "description": "whether the repo is private (if false, the repo is public)",
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                            "type": "bool",
                          },
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "a git repository stored on github",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "repository",
                        "name": "Repository",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "updated_at": "2019-08-24T14:15:22Z",
                        "urn": "prn:github:scm:repository",
                      },
                      "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                      "type": "userset",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}",
              "path-parameters": {
                "condition_set_id": {
                  "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "conditions": {
                      "docs": "a boolean expression that consists of multiple conditions, with and/or logic.",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "an optional longer description of the set",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'",
                      "type": "optional<string>",
                    },
                    "parent_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConditionSetUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ConditionSetRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ListConditionSetsResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "root.PaginatedResultConditionSetRead",
              },
              "list<root.ConditionSetRead>",
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  ListConditionSetsResponse:
    discriminated: false
    union:
      - type: root.PaginatedResultConditionSetRead
      - list<root.ConditionSetRead>
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    list_condition_sets:
      path: /v2/schema/{proj_id}/{env_id}/condition_sets
      method: GET
      auth: true
      docs: Lists all condition sets matching a filter.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Condition Sets
      request:
        name: ListConditionSetsRequest
        query-parameters:
          search:
            type: optional<string>
            docs: Text search for the condition sets name or key
          type:
            type: optional<root.ConditionSetType>
            docs: >-
              if provided, will return only the condition sets of the specified
              type. e.g: only user sets.
          include_total_count:
            type: optional<boolean>
            default: false
            docs: Include total count in response
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: ListConditionSetsResponse
        status-code: 200
      errors:
        - root.ListConditionSetsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              data:
                - key: na_based_employees
                  type: userset
                  autogenerated: false
                  resource_id: e05f8571-f31e-20b2-2c45-15ae74cfb0f1
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
                  resource:
                    key: repository
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                    project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                    environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
                    name: Repository
                    urn: prn:github:scm:repository
                    description: a git repository stored on github
                    actions:
                      clone:
                        id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                      read:
                        id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                      push:
                        id: e06da336-6e03-41d6-a495-40b0d7537b2a
                    attributes:
                      created:
                        type: time
                        description: the time (timestamp) the repository was created
                        id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                      private:
                        type: bool
                        description: >-
                          whether the repo is private (if false, the repo is
                          public)
                        id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                  name: US or Canada based employees
                  description: All employees based in the US or Canada
                  conditions:
                    allOf:
                      - user.role:
                          equals: employee
                      - user.location:
                          in:
                            - US
                            - Canada
                  parent_id: parent_id
              total_count: 1
              page_count: 1
    create_condition_set:
      path: /v2/schema/{proj_id}/{env_id}/condition_sets
      method: POST
      auth: true
      docs: >-
        Creates a new condition set (can be either a user set or a resource
        set).
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Create Condition Set
      request:
        name: ConditionSetCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A unique id by which Permit will identify the condition set. The
                key will be used as the generated rego rule name.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
                minLength: 1
            type:
              type: optional<root.ConditionSetType>
              docs: 'the type of the set: UserSet or ResourceSet'
            autogenerated:
              type: optional<boolean>
              docs: whether the set was autogenerated by the system.
              default: false
            resource_id:
              type: optional<string>
              validation:
                format: uuid
            name:
              type: string
              docs: >-
                A descriptive name for the set, i.e: 'US based employees' or
                'Users behind VPN'
            description:
              type: optional<string>
              docs: an optional longer description of the set
            conditions:
              type: optional<map<string, unknown>>
              docs: >-
                a boolean expression that consists of multiple conditions, with
                and/or logic.
            parent_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ConditionSetRead
        status-code: 200
      errors:
        - root.CreateConditionSetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            key: na_based_employees
            type: userset
            name: US or Canada based employees
            conditions:
              allOf:
                - user.role:
                    equals: employee
                - user.location:
                    in:
                      - US
                      - Canada
          response:
            body:
              key: na_based_employees
              type: userset
              autogenerated: false
              resource_id: e05f8571-f31e-20b2-2c45-15ae74cfb0f1
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              resource:
                key: repository
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
                name: Repository
                urn: prn:github:scm:repository
                description: a git repository stored on github
                actions:
                  clone:
                    id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                  read:
                    id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                  push:
                    id: e06da336-6e03-41d6-a495-40b0d7537b2a
                attributes:
                  created:
                    type: time
                    description: the time (timestamp) the repository was created
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                  private:
                    type: bool
                    description: whether the repo is private (if false, the repo is public)
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                action_groups:
                  key:
                    - value
              name: US or Canada based employees
              description: All employees based in the US or Canada
              conditions:
                allOf:
                  - user.role:
                      equals: employee
                  - user.location:
                      in:
                        - US
                        - Canada
              parent_id: parent_id
    get_condition_set:
      path: /v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}
      method: GET
      auth: true
      docs: Gets a single condition set, if such condition set exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        condition_set_id:
          type: string
          docs: >-
            Either the unique id of the condition set, or the URL-friendly key
            of the condition set (i.e: the "slug").
      display-name: Get Condition Set
      response:
        docs: Successful Response
        type: root.ConditionSetRead
        status-code: 200
      errors:
        - root.GetConditionSetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            condition_set_id: condition_set_id
          response:
            body:
              key: na_based_employees
              type: userset
              autogenerated: false
              resource_id: e05f8571-f31e-20b2-2c45-15ae74cfb0f1
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              resource:
                key: repository
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
                name: Repository
                urn: prn:github:scm:repository
                description: a git repository stored on github
                actions:
                  clone:
                    id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                  read:
                    id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                  push:
                    id: e06da336-6e03-41d6-a495-40b0d7537b2a
                attributes:
                  created:
                    type: time
                    description: the time (timestamp) the repository was created
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                  private:
                    type: bool
                    description: whether the repo is private (if false, the repo is public)
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                action_groups:
                  key:
                    - value
              name: US or Canada based employees
              description: All employees based in the US or Canada
              conditions:
                allOf:
                  - user.role:
                      equals: employee
                  - user.location:
                      in:
                        - US
                        - Canada
              parent_id: parent_id
    delete_condition_set:
      path: /v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}
      method: DELETE
      auth: true
      docs: >-
        Deletes a condition set and all its related data.

        This includes any permissions granted to said condition set (i.e: any
        matching condition set rules).
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        condition_set_id:
          type: string
          docs: >-
            Either the unique id of the condition set, or the URL-friendly key
            of the condition set (i.e: the "slug").
      display-name: Delete Condition Set
      errors:
        - root.DeleteConditionSetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            condition_set_id: condition_set_id
    update_condition_set:
      path: /v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates a condition set.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        condition_set_id:
          type: string
          docs: >-
            Either the unique id of the condition set, or the URL-friendly key
            of the condition set (i.e: the "slug").
      display-name: Update Condition Set
      request:
        name: ConditionSetUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: >-
                A descriptive name for the set, i.e: 'US based employees' or
                'Users behind VPN'
            description:
              type: optional<string>
              docs: an optional longer description of the set
            conditions:
              type: optional<map<string, unknown>>
              docs: >-
                a boolean expression that consists of multiple conditions, with
                and/or logic.
            parent_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ConditionSetRead
        status-code: 200
      errors:
        - root.UpdateConditionSetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            condition_set_id: condition_set_id
          request:
            name: US based managers
            conditions:
              allOf:
                - user.role:
                    equals: manager
                - user.location:
                    in:
                      - US
          response:
            body:
              key: na_based_employees
              type: userset
              autogenerated: false
              resource_id: e05f8571-f31e-20b2-2c45-15ae74cfb0f1
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              resource:
                key: repository
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
                name: Repository
                urn: prn:github:scm:repository
                description: a git repository stored on github
                actions:
                  clone:
                    id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                  read:
                    id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                  push:
                    id: e06da336-6e03-41d6-a495-40b0d7537b2a
                attributes:
                  created:
                    type: time
                    description: the time (timestamp) the repository was created
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                  private:
                    type: bool
                    description: whether the repo is private (if false, the repo is public)
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                action_groups:
                  key:
                    - value
              name: US or Canada based employees
              description: All employees based in the US or Canada
              conditions:
                allOf:
                  - user.role:
                      equals: employee
                  - user.location:
                      in:
                        - US
                        - Canada
              parent_id: parent_id
    get_condition_set_ancestors:
      path: >-
        /v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/ancestors
      method: GET
      auth: true
      docs: Gets all ancestors (parent, parent of parent, and so on)
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        condition_set_id:
          type: string
          docs: >-
            Either the unique id of the condition set, or the URL-friendly key
            of the condition set (i.e: the "slug").
      display-name: Get Condition Set Ancestors
      request:
        name: GetConditionSetAncestorsRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ConditionSetRead>
        status-code: 200
      errors:
        - root.GetConditionSetAncestorsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            condition_set_id: condition_set_id
          response:
            body:
              - key: na_based_employees
                type: userset
                autogenerated: false
                resource_id: e05f8571-f31e-20b2-2c45-15ae74cfb0f1
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
                resource:
                  key: repository
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
                  name: Repository
                  urn: prn:github:scm:repository
                  description: a git repository stored on github
                  actions:
                    clone:
                      id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                    read:
                      id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                    push:
                      id: e06da336-6e03-41d6-a495-40b0d7537b2a
                  attributes:
                    created:
                      type: time
                      description: the time (timestamp) the repository was created
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                    private:
                      type: bool
                      description: >-
                        whether the repo is private (if false, the repo is
                        public)
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                  action_groups:
                    key:
                      - value
                name: US or Canada based employees
                description: All employees based in the US or Canada
                conditions:
                  allOf:
                    - user.role:
                        equals: employee
                    - user.location:
                        in:
                          - US
                          - Canada
                parent_id: parent_id
    get_condition_set_descendants:
      path: >-
        /v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/descendants
      method: GET
      auth: true
      docs: Gets all descendants (children, children of children, and so on)
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        condition_set_id:
          type: string
          docs: >-
            Either the unique id of the condition set, or the URL-friendly key
            of the condition set (i.e: the "slug").
      display-name: Get Condition Set Descendants
      request:
        name: GetConditionSetDescendantsRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ConditionSetRead>
        status-code: 200
      errors:
        - root.GetConditionSetDescendantsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            condition_set_id: condition_set_id
          response:
            body:
              - key: na_based_employees
                type: userset
                autogenerated: false
                resource_id: e05f8571-f31e-20b2-2c45-15ae74cfb0f1
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
                resource:
                  key: repository
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
                  name: Repository
                  urn: prn:github:scm:repository
                  description: a git repository stored on github
                  actions:
                    clone:
                      id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                    read:
                      id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                    push:
                      id: e06da336-6e03-41d6-a495-40b0d7537b2a
                  attributes:
                    created:
                      type: time
                      description: the time (timestamp) the repository was created
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                    private:
                      type: bool
                      description: >-
                        whether the repo is private (if false, the repo is
                        public)
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                  action_groups:
                    key:
                      - value
                name: US or Canada based employees
                description: All employees based in the US or Canada
                conditions:
                  allOf:
                    - user.role:
                        equals: employee
                    - user.location:
                        in:
                          - US
                          - Canada
                parent_id: parent_id
  source:
    openapi: ../openapi.json
  display-name: Condition Sets
docs: >

  Condition sets are sets of objects that are dynamically defined based on
  conditions on the objects' attributes.

  Conditions sets allows you the flexibility of ABAC with the simplicity of
  RBAC.


  There are currently two types of condition sets at the moment:

  1) user set = the set of users that match all the specified conditions.

  2) resource set = the set of resources that match all the specified
  conditions.


  Examples:


  - `us_based_employees` = {U1, ..., Un} = {all **users** who are *located in
  the US* and are *assigned the employee role*}

  - `private_repos` = {R1, ..., Rn} = {all **resources** *of type repository*
  that *are private*}


  We can then picture a **matrix** of assignment between *user sets* and
  *resource sets*.


  Example:

  If we check the checkbox where `us_based_employees` and `private_repos->clone`
  action intersect, we are setting a rule:

  *all US based employees can clone private repos*.
",
    },
    "environments.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Environments are silos contained within projects that enables you to safely iterate on changes.

Environments allow you to manage your policy throughout your entire development lifecycle,
from dev to production. Typical environments within a project could be `production`, `staging`,
or individual environments.

Each project must contain at least one environment.
You may clone an environment from a base environment, similar to git branches.
You can later safely merge the changes, after you tested them.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Environments",
          "endpoints": {
            "copy_environment": {
              "auth": true,
              "display-name": "Copy Environment",
              "docs": "Copy environment

This endpoint either duplicates an existing environment to a new environment
in the same project, or copies from an existing environment to another
existing environment.

The `scope` object controls which objects will be copied to the target
environment.

To clone to a new environment, the user must have write permissions
to the containing project. To clone into an existing environment,
the user must have write permissions to the target environment.

Copying environments across projects or organizations is not
allowed.",
              "errors": [
                "root.CopyEnvironmentRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "target_env": {},
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-01-15T09:30:00Z",
                      "custom_branch_name": "custom_branch_name",
                      "description": "description",
                      "id": "id",
                      "jwks": {
                        "keys": [
                          {
                            "key": "value",
                          },
                        ],
                      },
                      "key": "key",
                      "name": "name",
                      "organization_id": "organization_id",
                      "project_id": "project_id",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}/envs/{env_id}/copy",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "conflict_strategy": {
                      "default": "fail",
                      "docs": "Action to take when detecting a conflict when copying. Only applies to copying into an existing environment",
                      "type": "optional<EnvironmentCopyConflictStrategy>",
                    },
                    "scope": {
                      "docs": "Filters to include and exclude copied objects",
                      "type": "optional<root.EnvironmentCopyScope>",
                    },
                    "target_env": {
                      "docs": "If copying a new environment, the environment configuration. If copying to an existing environment, the environment identifier",
                      "type": "root.EnvironmentCopyTarget",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EnvironmentCopy",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 201,
                "type": "root.EnvironmentRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create_environment": {
              "auth": true,
              "display-name": "Create Environment",
              "docs": "Creates a new environment under a given project.",
              "errors": [
                "root.CreateEnvironmentRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "key": "key",
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-01-15T09:30:00Z",
                      "custom_branch_name": "custom_branch_name",
                      "description": "description",
                      "id": "id",
                      "jwks": {
                        "keys": [
                          {
                            "key": "value",
                          },
                        ],
                      },
                      "key": "key",
                      "name": "name",
                      "organization_id": "organization_id",
                      "project_id": "project_id",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}/envs",
              "path-parameters": {
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.EnvironmentCreate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.EnvironmentRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_environment": {
              "auth": true,
              "display-name": "Delete Environment",
              "docs": "Deletes an environment and all its related data.",
              "errors": [
                "root.DeleteEnvironmentRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}/envs/{env_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_environment": {
              "auth": true,
              "display-name": "Get Environment",
              "docs": "Gets a single environment matching the given env_id, if such environment exists.",
              "errors": [
                "root.GetEnvironmentRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-01-15T09:30:00Z",
                      "custom_branch_name": "custom_branch_name",
                      "description": "description",
                      "id": "id",
                      "jwks": {
                        "keys": [
                          {
                            "key": "value",
                          },
                        ],
                      },
                      "key": "key",
                      "name": "name",
                      "organization_id": "organization_id",
                      "project_id": "project_id",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}/envs/{env_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.EnvironmentRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_environments": {
              "auth": true,
              "display-name": "List Environments",
              "docs": "Lists all the environments under a given project.",
              "errors": [
                "root.ListEnvironmentsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": [
                      {
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_branch_name": "custom_branch_name",
                        "description": "description",
                        "id": "id",
                        "jwks": {
                          "keys": [
                            {
                              "key": "value",
                            },
                          ],
                        },
                        "key": "key",
                        "name": "name",
                        "organization_id": "organization_id",
                        "project_id": "project_id",
                        "settings": {
                          "key": "value",
                        },
                        "updated_at": "2024-01-15T09:30:00Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}/envs",
              "path-parameters": {
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListEnvironmentsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.EnvironmentRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "stats_environments": {
              "auth": true,
              "display-name": "Stats Environments",
              "docs": undefined,
              "errors": [
                "root.StatsEnvironmentsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-01-15T09:30:00Z",
                      "custom_branch_name": "custom_branch_name",
                      "description": "description",
                      "id": "id",
                      "jwks": {
                        "keys": [
                          {
                            "key": "value",
                          },
                        ],
                      },
                      "key": "key",
                      "name": "name",
                      "organization_id": "organization_id",
                      "pdp_configs": [
                        {
                          "client_secret": "client_secret",
                          "environment_id": "environment_id",
                          "id": "id",
                          "name": "name",
                          "organization_id": "organization_id",
                          "project_id": "project_id",
                        },
                      ],
                      "project_id": "project_id",
                      "settings": {
                        "key": "value",
                      },
                      "stats": {
                        "has_decision_logs": true,
                        "members": [
                          {
                            "created_at": "2019-08-20T14:15:22Z",
                            "email": "janedoe@permituser.com",
                            "email_verified": true,
                            "family_name": "Doe",
                            "given_name": "Jane",
                            "grants": [
                              {
                                "access_level": "admin",
                                "object_type": "org",
                                "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                              },
                            ],
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "identities": [
                              {
                                "auth0_info": {
                                  "key": "value",
                                },
                                "email": "Jane@permituser.com",
                                "email_verified": true,
                                "provider": "google-oauth2",
                                "sub": "000000000000000000001",
                                "user_id": "google-oauth2|000000000000000000001",
                              },
                            ],
                            "invite": {
                              "created_at": "2019-08-24T14:15:22Z",
                              "email": "Jane@permituser.com",
                              "failed_reason": "",
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                              "invite_code": "40ef0e48-a11f-4963-a229-e396c9eeefff",
                              "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                              "role": "admin",
                              "status": "pending",
                            },
                            "is_onboarding": true,
                            "is_superuser": false,
                            "last_ip": "1.2.3.4",
                            "last_login": "2019-08-24T14:15:22Z",
                            "logins_count": 2,
                            "name": "Jane Josephine Doe",
                            "onboarding_step": "done",
                            "picture": "http://permituser.com/janedoe/me.jpg",
                            "settings": {
                              "another-option": "another-value",
                              "option": "value",
                            },
                          },
                        ],
                        "policies": 1,
                        "resources": 1,
                        "roles": 1,
                        "tenants": 1,
                        "users": 1,
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}/envs/{env_id}/stats",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.EnvironmentStats",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_environment": {
              "auth": true,
              "display-name": "Update Environment",
              "docs": "Updates the environment.",
              "errors": [
                "root.UpdateEnvironmentRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "created_at": "2024-01-15T09:30:00Z",
                      "custom_branch_name": "custom_branch_name",
                      "description": "description",
                      "id": "id",
                      "jwks": {
                        "keys": [
                          {
                            "key": "value",
                          },
                        ],
                      },
                      "key": "key",
                      "name": "name",
                      "organization_id": "organization_id",
                      "project_id": "project_id",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}/envs/{env_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "custom_branch_name": {
                      "docs": "when using gitops feature, an optional branch name for the environment",
                      "type": "optional<string>",
                    },
                    "description": {
                      "docs": "an optional longer description of the environment",
                      "type": "optional<string>",
                    },
                    "jwks": {
                      "docs": "jwks for element frontend only login",
                      "type": "optional<root.JwksObj>",
                    },
                    "name": {
                      "docs": "The name of the environment",
                      "type": "optional<string>",
                    },
                    "settings": {
                      "docs": "the settings for this environment",
                      "type": "optional<map<string, unknown>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EnvironmentUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.EnvironmentRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "EnvironmentCopyConflictStrategy": {
            "default": "fail",
            "docs": "Action to take when detecting a conflict when copying. Only applies to copying into an existing environment",
            "enum": [
              "fail",
              "overwrite",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    stats_environments:
      path: /v2/projects/{proj_id}/envs/{env_id}/stats
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Stats Environments
      response:
        docs: Successful Response
        type: root.EnvironmentStats
        status-code: 200
      errors:
        - root.StatsEnvironmentsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              key: key
              id: id
              organization_id: organization_id
              project_id: project_id
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              description: description
              custom_branch_name: custom_branch_name
              jwks:
                keys:
                  - key: value
              settings:
                key: value
              pdp_configs:
                - id: id
                  name: name
                  organization_id: organization_id
                  project_id: project_id
                  environment_id: environment_id
                  client_secret: client_secret
              stats:
                roles: 1
                users: 1
                policies: 1
                resources: 1
                tenants: 1
                has_decision_logs: true
                members:
                  - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    email: janedoe@permituser.com
                    email_verified: true
                    name: Jane Josephine Doe
                    given_name: Jane
                    family_name: Doe
                    picture: http://permituser.com/janedoe/me.jpg
                    is_superuser: false
                    is_onboarding: true
                    onboarding_step: done
                    created_at: '2019-08-20T14:15:22Z'
                    last_login: '2019-08-24T14:15:22Z'
                    last_ip: 1.2.3.4
                    logins_count: 2
                    identities:
                      - user_id: google-oauth2|000000000000000000001
                        provider: google-oauth2
                        sub: '000000000000000000001'
                        email: Jane@permituser.com
                        email_verified: true
                        auth0_info:
                          key: value
                    invite:
                      email: Jane@permituser.com
                      role: admin
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                      invite_code: 40ef0e48-a11f-4963-a229-e396c9eeefff
                      created_at: '2019-08-24T14:15:22Z'
                      status: pending
                      failed_reason: ''
                    settings:
                      option: value
                      another-option: another-value
                    grants:
                      - organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                        object_type: org
                        access_level: admin
    list_environments:
      path: /v2/projects/{proj_id}/envs
      method: GET
      auth: true
      docs: Lists all the environments under a given project.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
      display-name: List Environments
      request:
        name: ListEnvironmentsRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.EnvironmentRead>
        status-code: 200
      errors:
        - root.ListEnvironmentsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
          response:
            body:
              - key: key
                id: id
                organization_id: organization_id
                project_id: project_id
                created_at: '2024-01-15T09:30:00Z'
                updated_at: '2024-01-15T09:30:00Z'
                name: name
                description: description
                custom_branch_name: custom_branch_name
                jwks:
                  keys:
                    - key: value
                settings:
                  key: value
    create_environment:
      path: /v2/projects/{proj_id}/envs
      method: POST
      auth: true
      docs: Creates a new environment under a given project.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
      display-name: Create Environment
      request:
        body:
          type: root.EnvironmentCreate
        content-type: application/json
      response:
        docs: Successful Response
        type: root.EnvironmentRead
        status-code: 200
      errors:
        - root.CreateEnvironmentRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
          request:
            key: key
            name: name
          response:
            body:
              key: key
              id: id
              organization_id: organization_id
              project_id: project_id
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              description: description
              custom_branch_name: custom_branch_name
              jwks:
                keys:
                  - key: value
              settings:
                key: value
    get_environment:
      path: /v2/projects/{proj_id}/envs/{env_id}
      method: GET
      auth: true
      docs: >-
        Gets a single environment matching the given env_id, if such environment
        exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Get Environment
      response:
        docs: Successful Response
        type: root.EnvironmentRead
        status-code: 200
      errors:
        - root.GetEnvironmentRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              key: key
              id: id
              organization_id: organization_id
              project_id: project_id
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              description: description
              custom_branch_name: custom_branch_name
              jwks:
                keys:
                  - key: value
              settings:
                key: value
    delete_environment:
      path: /v2/projects/{proj_id}/envs/{env_id}
      method: DELETE
      auth: true
      docs: Deletes an environment and all its related data.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Delete Environment
      errors:
        - root.DeleteEnvironmentRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
    update_environment:
      path: /v2/projects/{proj_id}/envs/{env_id}
      method: PATCH
      auth: true
      docs: Updates the environment.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Update Environment
      request:
        name: EnvironmentUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the environment
            description:
              type: optional<string>
              docs: an optional longer description of the environment
            custom_branch_name:
              type: optional<string>
              docs: >-
                when using gitops feature, an optional branch name for the
                environment
            jwks:
              type: optional<root.JwksObj>
              docs: jwks for element frontend only login
            settings:
              type: optional<map<string, unknown>>
              docs: the settings for this environment
        content-type: application/json
      response:
        docs: Successful Response
        type: root.EnvironmentRead
        status-code: 200
      errors:
        - root.UpdateEnvironmentRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request: {}
          response:
            body:
              key: key
              id: id
              organization_id: organization_id
              project_id: project_id
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              description: description
              custom_branch_name: custom_branch_name
              jwks:
                keys:
                  - key: value
              settings:
                key: value
    copy_environment:
      path: /v2/projects/{proj_id}/envs/{env_id}/copy
      method: POST
      auth: true
      docs: >-
        Copy environment


        This endpoint either duplicates an existing environment to a new
        environment

        in the same project, or copies from an existing environment to another

        existing environment.


        The `scope` object controls which objects will be copied to the target

        environment.


        To clone to a new environment, the user must have write permissions

        to the containing project. To clone into an existing environment,

        the user must have write permissions to the target environment.


        Copying environments across projects or organizations is not

        allowed.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Copy Environment
      request:
        name: EnvironmentCopy
        body:
          properties:
            target_env:
              type: root.EnvironmentCopyTarget
              docs: >-
                If copying a new environment, the environment configuration. If
                copying to an existing environment, the environment identifier
            conflict_strategy:
              type: optional<EnvironmentCopyConflictStrategy>
              docs: >-
                Action to take when detecting a conflict when copying. Only
                applies to copying into an existing environment
              default: fail
            scope:
              type: optional<root.EnvironmentCopyScope>
              docs: Filters to include and exclude copied objects
        content-type: application/json
      response:
        docs: Successful Response
        type: root.EnvironmentRead
        status-code: 201
      errors:
        - root.CopyEnvironmentRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            target_env: {}
          response:
            body:
              key: key
              id: id
              organization_id: organization_id
              project_id: project_id
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              description: description
              custom_branch_name: custom_branch_name
              jwks:
                keys:
                  - key: value
              settings:
                key: value
  source:
    openapi: ../openapi.json
  display-name: Environments
docs: >

  Environments are silos contained within projects that enables you to safely
  iterate on changes.


  Environments allow you to manage your policy throughout your entire
  development lifecycle,

  from dev to production. Typical environments within a project could be
  `production`, `staging`,

  or individual environments.


  Each project must contain at least one environment.

  You may clone an environment from a base environment, similar to git branches.

  You can later safely merge the changes, after you tested them.
types:
  EnvironmentCopyConflictStrategy:
    enum:
      - fail
      - overwrite
    docs: >-
      Action to take when detecting a conflict when copying. Only applies to
      copying into an existing environment
    default: fail
    inline: true
    source:
      openapi: ../openapi.json
",
    },
    "organizations.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
The Organizations API gives you access to control and manage your Permit organizations.

An organization represents a **single billable account** (i.e: a company using Permit).
You may invite your team members to your Permit account, and thus multiple team members
may control an organization simultaniously (each member has access according to his role).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Organizations",
          "endpoints": {
            "create_organization": {
              "auth": true,
              "display-name": "Create Organization",
              "docs": "Creates a new organization that will be owned by the
authenticated actor (i.e: human team member or api key).",
              "errors": [
                "root.CreateOrganizationRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {
                    "key": "key",
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "api_key_id": "api_key_id",
                      "api_key_secret": "api_key_secret",
                      "created_at": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "is_enterprise": true,
                      "key": "key",
                      "name": "name",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/orgs",
              "request": {
                "body": {
                  "properties": {
                    "key": {
                      "docs": "A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "name": {
                      "docs": "The name of the organization, usually it's your company's name.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\.\-\_\ ]+$",
                      },
                    },
                    "settings": {
                      "docs": "the settings for this project",
                      "type": "optional<map<string, unknown>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OrganizationCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.OrganizationReadWithAPIKey",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_organization": {
              "auth": true,
              "display-name": "Delete Organization",
              "docs": "Deletes an organization (Permit.io account) and all its related data.",
              "errors": [
                "root.DeleteOrganizationRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/orgs/{org_id}",
              "path-parameters": {
                "org_id": {
                  "docs": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_active_organization": {
              "auth": true,
              "display-name": "Get Active Organization",
              "docs": "Gets a single organization (Permit.io account) matching the given org_id,
if such org exists and can be accessed by the authenticated actor.",
              "errors": [
                "root.GetActiveOrganizationRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "created_at": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "is_enterprise": true,
                      "key": "key",
                      "name": "name",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/orgs/active/org",
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.OrganizationRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_organization": {
              "auth": true,
              "display-name": "Get Organization",
              "docs": "Gets a single organization (Permit.io account) matching the given org_id,
if such org exists and can be accessed by the authenticated actor.",
              "errors": [
                "root.GetOrganizationRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "is_enterprise": true,
                      "key": "key",
                      "name": "name",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/orgs/{org_id}",
              "path-parameters": {
                "org_id": {
                  "docs": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.OrganizationRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_organizations": {
              "auth": true,
              "display-name": "List Organizations",
              "docs": "Lists all the organizations that can be accessed by the
authenticated actor (i.e: human team member or api key).",
              "errors": [
                "root.ListOrganizationsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "created_at": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "is_enterprise": true,
                        "key": "key",
                        "name": "name",
                        "settings": {
                          "key": "value",
                        },
                        "updated_at": "2024-01-15T09:30:00Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/orgs",
              "request": {
                "name": "ListOrganizationsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.OrganizationRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_organization": {
              "auth": true,
              "display-name": "Update Organization",
              "docs": "Updates the organization's profile.",
              "errors": [
                "root.UpdateOrganizationRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "created_at": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "is_enterprise": true,
                      "key": "key",
                      "name": "name",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/orgs/{org_id}",
              "path-parameters": {
                "org_id": {
                  "docs": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "The name of the organization, usually it's your company's name.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\.\-\_\ ]+$",
                      },
                    },
                    "settings": {
                      "docs": "the settings for this project",
                      "type": "optional<map<string, unknown>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OrganizationUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.OrganizationRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_organizations:
      path: /v2/orgs
      method: GET
      auth: true
      docs: |-
        Lists all the organizations that can be accessed by the
        authenticated actor (i.e: human team member or api key).
      source:
        openapi: ../openapi.json
      display-name: List Organizations
      request:
        name: ListOrganizationsRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.OrganizationRead>
        status-code: 200
      errors:
        - root.ListOrganizationsRequestUnprocessableEntityError
      examples:
        - response:
            body:
              - key: key
                id: id
                is_enterprise: true
                created_at: '2024-01-15T09:30:00Z'
                updated_at: '2024-01-15T09:30:00Z'
                name: name
                settings:
                  key: value
    create_organization:
      path: /v2/orgs
      method: POST
      auth: true
      docs: |-
        Creates a new organization that will be owned by the
        authenticated actor (i.e: human team member or api key).
      source:
        openapi: ../openapi.json
      display-name: Create Organization
      request:
        name: OrganizationCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A URL-friendly name of the organization (i.e: slug). You will be
                able to query later using this key instead of the id (UUID) of
                the organization.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
            name:
              type: string
              docs: The name of the organization, usually it's your company's name.
              validation:
                pattern: ^[A-Za-z0-9\.\-\_\ ]+$
            settings:
              type: optional<map<string, unknown>>
              docs: the settings for this project
        content-type: application/json
      response:
        docs: Successful Response
        type: root.OrganizationReadWithAPIKey
        status-code: 200
      errors:
        - root.CreateOrganizationRequestUnprocessableEntityError
      examples:
        - request:
            key: key
            name: name
          response:
            body:
              key: key
              id: id
              is_enterprise: true
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              settings:
                key: value
              api_key_id: api_key_id
              api_key_secret: api_key_secret
    get_organization:
      path: /v2/orgs/{org_id}
      method: GET
      auth: true
      docs: >-
        Gets a single organization (Permit.io account) matching the given
        org_id,

        if such org exists and can be accessed by the authenticated actor.
      source:
        openapi: ../openapi.json
      path-parameters:
        org_id:
          type: string
          docs: >-
            Either the unique id of the organization, or the URL-friendly key of
            the organization (i.e: the "slug").
      display-name: Get Organization
      response:
        docs: Successful Response
        type: root.OrganizationRead
        status-code: 200
      errors:
        - root.GetOrganizationRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          response:
            body:
              key: key
              id: id
              is_enterprise: true
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              settings:
                key: value
    delete_organization:
      path: /v2/orgs/{org_id}
      method: DELETE
      auth: true
      docs: Deletes an organization (Permit.io account) and all its related data.
      source:
        openapi: ../openapi.json
      path-parameters:
        org_id:
          type: string
          docs: >-
            Either the unique id of the organization, or the URL-friendly key of
            the organization (i.e: the "slug").
      display-name: Delete Organization
      errors:
        - root.DeleteOrganizationRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
    update_organization:
      path: /v2/orgs/{org_id}
      method: PATCH
      auth: true
      docs: Updates the organization's profile.
      source:
        openapi: ../openapi.json
      path-parameters:
        org_id:
          type: string
          docs: >-
            Either the unique id of the organization, or the URL-friendly key of
            the organization (i.e: the "slug").
      display-name: Update Organization
      request:
        name: OrganizationUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the organization, usually it's your company's name.
              validation:
                pattern: ^[A-Za-z0-9\.\-\_\ ]+$
            settings:
              type: optional<map<string, unknown>>
              docs: the settings for this project
        content-type: application/json
      response:
        docs: Successful Response
        type: root.OrganizationRead
        status-code: 200
      errors:
        - root.UpdateOrganizationRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          request: {}
          response:
            body:
              key: key
              id: id
              is_enterprise: true
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              settings:
                key: value
    get_active_organization:
      path: /v2/orgs/active/org
      method: GET
      auth: true
      docs: >-
        Gets a single organization (Permit.io account) matching the given
        org_id,

        if such org exists and can be accessed by the authenticated actor.
      source:
        openapi: ../openapi.json
      display-name: Get Active Organization
      response:
        docs: Successful Response
        type: root.OrganizationRead
        status-code: 200
      errors:
        - root.GetActiveOrganizationRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: key
              id: id
              is_enterprise: true
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              settings:
                key: value
  source:
    openapi: ../openapi.json
  display-name: Organizations
docs: >

  The Organizations API gives you access to control and manage your Permit
  organizations.


  An organization represents a **single billable account** (i.e: a company using
  Permit).

  You may invite your team members to your Permit account, and thus multiple
  team members

  may control an organization simultaniously (each member has access according
  to his role).
",
    },
    "projects.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Projects let you manage permissions for different business objectives from a single Permit account.

For example, you can create one project called "Billing App" and another project called "Web App".
Every project is a separate silo, and has its own unique set of environments and policies.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Projects",
          "endpoints": {
            "create_project": {
              "auth": true,
              "display-name": "Create Project",
              "docs": "Creates a new project under the active organization.",
              "errors": [
                "root.CreateProjectRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {
                    "key": "key",
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "active_policy_repo_id": "active_policy_repo_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "key": "key",
                      "name": "name",
                      "organization_id": "organization_id",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                      "urn_namespace": "urn_namespace",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/projects",
              "request": {
                "body": {
                  "properties": {
                    "active_policy_repo_id": {
                      "docs": "the id of the policy repo to use for this project",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "description": {
                      "docs": "a longer description outlining the project objectives",
                      "type": "optional<string>",
                    },
                    "key": {
                      "docs": "A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "name": {
                      "docs": "The name of the project",
                      "type": "string",
                    },
                    "settings": {
                      "docs": "the settings for this project",
                      "type": "optional<map<string, unknown>>",
                    },
                    "urn_namespace": {
                      "docs": "Optional namespace for URNs. If empty, URNs will be generated from project key.",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "[a-z0-9-]{2,}",
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ProjectCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ProjectRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_project": {
              "auth": true,
              "display-name": "Delete Project",
              "docs": "Deletes the project and all its related data.",
              "errors": [
                "root.DeleteProjectRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "proj_id": "proj_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}",
              "path-parameters": {
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_project": {
              "auth": true,
              "display-name": "Get Project",
              "docs": "Gets a single project matching the given proj_id, if such project exists.",
              "errors": [
                "root.GetProjectRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "active_policy_repo_id": "active_policy_repo_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "key": "key",
                      "name": "name",
                      "organization_id": "organization_id",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                      "urn_namespace": "urn_namespace",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}",
              "path-parameters": {
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ProjectRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_projects": {
              "auth": true,
              "display-name": "List Projects",
              "docs": "Lists all the projects under the active organization.",
              "errors": [
                "root.ListProjectsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "active_policy_repo_id": "active_policy_repo_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "id": "id",
                        "key": "key",
                        "name": "name",
                        "organization_id": "organization_id",
                        "settings": {
                          "key": "value",
                        },
                        "updated_at": "2024-01-15T09:30:00Z",
                        "urn_namespace": "urn_namespace",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/projects",
              "request": {
                "name": "ListProjectsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ProjectRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_project": {
              "auth": true,
              "display-name": "Update Project",
              "docs": "Updates the project.",
              "errors": [
                "root.UpdateProjectRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "proj_id": "proj_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "active_policy_repo_id": "active_policy_repo_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "id": "id",
                      "key": "key",
                      "name": "name",
                      "organization_id": "organization_id",
                      "settings": {
                        "key": "value",
                      },
                      "updated_at": "2024-01-15T09:30:00Z",
                      "urn_namespace": "urn_namespace",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/projects/{proj_id}",
              "path-parameters": {
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "active_policy_repo_id": {
                      "docs": "the id of the policy repo to use for this project",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "description": {
                      "docs": "a longer description outlining the project objectives",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "The name of the project",
                      "type": "optional<string>",
                    },
                    "settings": {
                      "docs": "the settings for this project",
                      "type": "optional<map<string, unknown>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ProjectUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ProjectRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_projects:
      path: /v2/projects
      method: GET
      auth: true
      docs: Lists all the projects under the active organization.
      source:
        openapi: ../openapi.json
      display-name: List Projects
      request:
        name: ListProjectsRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ProjectRead>
        status-code: 200
      errors:
        - root.ListProjectsRequestUnprocessableEntityError
      examples:
        - response:
            body:
              - key: key
                urn_namespace: urn_namespace
                id: id
                organization_id: organization_id
                created_at: '2024-01-15T09:30:00Z'
                updated_at: '2024-01-15T09:30:00Z'
                name: name
                description: description
                settings:
                  key: value
                active_policy_repo_id: active_policy_repo_id
    create_project:
      path: /v2/projects
      method: POST
      auth: true
      docs: Creates a new project under the active organization.
      source:
        openapi: ../openapi.json
      display-name: Create Project
      request:
        name: ProjectCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A URL-friendly name of the project (i.e: slug). You will be able
                to query later using this key instead of the id (UUID) of the
                project.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
            urn_namespace:
              type: optional<string>
              docs: >-
                Optional namespace for URNs. If empty, URNs will be generated
                from project key.
              validation:
                pattern: '[a-z0-9-]{2,}'
            name:
              type: string
              docs: The name of the project
            description:
              type: optional<string>
              docs: a longer description outlining the project objectives
            settings:
              type: optional<map<string, unknown>>
              docs: the settings for this project
            active_policy_repo_id:
              type: optional<string>
              docs: the id of the policy repo to use for this project
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ProjectRead
        status-code: 200
      errors:
        - root.CreateProjectRequestUnprocessableEntityError
      examples:
        - request:
            key: key
            name: name
          response:
            body:
              key: key
              urn_namespace: urn_namespace
              id: id
              organization_id: organization_id
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              description: description
              settings:
                key: value
              active_policy_repo_id: active_policy_repo_id
    get_project:
      path: /v2/projects/{proj_id}
      method: GET
      auth: true
      docs: >-
        Gets a single project matching the given proj_id, if such project
        exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
      display-name: Get Project
      response:
        docs: Successful Response
        type: root.ProjectRead
        status-code: 200
      errors:
        - root.GetProjectRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
          response:
            body:
              key: key
              urn_namespace: urn_namespace
              id: id
              organization_id: organization_id
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              description: description
              settings:
                key: value
              active_policy_repo_id: active_policy_repo_id
    delete_project:
      path: /v2/projects/{proj_id}
      method: DELETE
      auth: true
      docs: Deletes the project and all its related data.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
      display-name: Delete Project
      errors:
        - root.DeleteProjectRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
    update_project:
      path: /v2/projects/{proj_id}
      method: PATCH
      auth: true
      docs: Updates the project.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
      display-name: Update Project
      request:
        name: ProjectUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the project
            description:
              type: optional<string>
              docs: a longer description outlining the project objectives
            settings:
              type: optional<map<string, unknown>>
              docs: the settings for this project
            active_policy_repo_id:
              type: optional<string>
              docs: the id of the policy repo to use for this project
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ProjectRead
        status-code: 200
      errors:
        - root.UpdateProjectRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
          request: {}
          response:
            body:
              key: key
              urn_namespace: urn_namespace
              id: id
              organization_id: organization_id
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              name: name
              description: description
              settings:
                key: value
              active_policy_repo_id: active_policy_repo_id
  source:
    openapi: ../openapi.json
  display-name: Projects
docs: >

  Projects let you manage permissions for different business objectives from a
  single Permit account.


  For example, you can create one project called "Billing App" and another
  project called "Web App".

  Every project is a separate silo, and has its own unique set of environments
  and policies.
",
    },
    "resourceActionGroups.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Resource Action Groups are groups of actions that are assigned
to a role as one action.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Resource Action Groups",
          "endpoints": {
            "create_resource_action_group": {
              "auth": true,
              "display-name": "Create Resource Action Group",
              "docs": "Creates a new action group that can affect the resource.",
              "errors": [
                "root.CreateResourceActionGroupRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {
                    "actions": [
                      "read",
                      "update",
                    ],
                    "description": "Writer Action Group",
                    "key": "writer",
                    "name": "Writer",
                  },
                  "response": {
                    "body": {
                      "actions": [
                        "read",
                        "update",
                      ],
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "Writer Action Group",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "writer",
                      "name": "Writer",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "actions": {
                      "type": "optional<list<string>>",
                    },
                    "attributes": {
                      "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "An optional longer description of what this action group represents in your system",
                      "type": "optional<string>",
                    },
                    "key": {
                      "docs": "A URL-friendly name of the action group (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action group.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "name": {
                      "docs": "The name of the action group",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceActionGroupCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceActionGroupRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_resource_action_group": {
              "auth": true,
              "display-name": "Delete Resource Action Group",
              "docs": "Deletes the action and all its related data.
This includes any permissions granted to perform the action.",
              "errors": [
                "root.DeleteResourceActionGroupRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "action_group_id": "action_group_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}",
              "path-parameters": {
                "action_group_id": {
                  "docs": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_resource_action_group": {
              "auth": true,
              "display-name": "Get Resource Action Group",
              "docs": "Gets a single action group defined on the resource, if such action exists.",
              "errors": [
                "root.GetResourceActionGroupRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "action_group_id": "action_group_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "response": {
                    "body": {
                      "actions": [
                        "read",
                        "update",
                      ],
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "Writer Action Group",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "writer",
                      "name": "Writer",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}",
              "path-parameters": {
                "action_group_id": {
                  "docs": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceActionGroupRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_resource_action_groups": {
              "auth": true,
              "display-name": "List Resource Action Groups",
              "docs": "Lists all the action groups defined on the resource.",
              "errors": [
                "root.ListResourceActionGroupsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "response": {
                    "body": [
                      {
                        "actions": [
                          "read",
                          "update",
                        ],
                        "attributes": {
                          "key": "value",
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "Writer Action Group",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "writer",
                        "name": "Writer",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                        "updated_at": "2019-08-24T14:15:22Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListResourceActionGroupsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ResourceActionGroupRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_resource_action_group": {
              "auth": true,
              "display-name": "Update Resource Action Group",
              "docs": "Partially updates the action defined on a resource.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateResourceActionGroupRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "action_group_id": "action_group_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "actions": [
                        "read",
                        "update",
                      ],
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "Writer Action Group",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "writer",
                      "name": "Writer",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}",
              "path-parameters": {
                "action_group_id": {
                  "docs": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "actions": {
                      "type": "optional<list<string>>",
                    },
                    "attributes": {
                      "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "An optional longer description of what this action group represents in your system",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "The name of the action group",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceActionGroupUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceActionGroupRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_resource_action_groups:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups
      method: GET
      auth: true
      docs: Lists all the action groups defined on the resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: List Resource Action Groups
      request:
        name: ListResourceActionGroupsRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ResourceActionGroupRead>
        status-code: 200
      errors:
        - root.ListResourceActionGroupsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          response:
            body:
              - name: Writer
                description: Writer Action Group
                attributes:
                  key: value
                actions:
                  - read
                  - update
                key: writer
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
    create_resource_action_group:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups
      method: POST
      auth: true
      docs: Creates a new action group that can affect the resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: Create Resource Action Group
      request:
        name: ResourceActionGroupCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A URL-friendly name of the action group (i.e: slug). You will be
                able to query later using this key instead of the id (UUID) of
                the action group.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
            name:
              type: string
              docs: The name of the action group
            description:
              type: optional<string>
              docs: >-
                An optional longer description of what this action group
                represents in your system
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                optional dictionary of key-value pairs that can be used to store
                arbitrary metadata about this action group. This metadata can be
                used to filter action groups using query parameters with attr_
                prefix
            actions:
              type: optional<list<string>>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceActionGroupRead
        status-code: 200
      errors:
        - root.CreateResourceActionGroupRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          request:
            key: writer
            name: Writer
            description: Writer Action Group
            actions:
              - read
              - update
          response:
            body:
              name: Writer
              description: Writer Action Group
              attributes:
                key: value
              actions:
                - read
                - update
              key: writer
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    get_resource_action_group:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}
      method: GET
      auth: true
      docs: >-
        Gets a single action group defined on the resource, if such action
        exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        action_group_id:
          type: string
          docs: >-
            Either the unique id of the action group, or the URL-friendly key of
            the action group (i.e: the "slug").
      display-name: Get Resource Action Group
      response:
        docs: Successful Response
        type: root.ResourceActionGroupRead
        status-code: 200
      errors:
        - root.GetResourceActionGroupRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            action_group_id: action_group_id
          response:
            body:
              name: Writer
              description: Writer Action Group
              attributes:
                key: value
              actions:
                - read
                - update
              key: writer
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    delete_resource_action_group:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}
      method: DELETE
      auth: true
      docs: |-
        Deletes the action and all its related data.
        This includes any permissions granted to perform the action.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        action_group_id:
          type: string
          docs: >-
            Either the unique id of the action group, or the URL-friendly key of
            the action group (i.e: the "slug").
      display-name: Delete Resource Action Group
      errors:
        - root.DeleteResourceActionGroupRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            action_group_id: action_group_id
    update_resource_action_group:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the action defined on a resource.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        action_group_id:
          type: string
          docs: >-
            Either the unique id of the action group, or the URL-friendly key of
            the action group (i.e: the "slug").
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Update Resource Action Group
      request:
        name: ResourceActionGroupUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the action group
            description:
              type: optional<string>
              docs: >-
                An optional longer description of what this action group
                represents in your system
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                optional dictionary of key-value pairs that can be used to store
                arbitrary metadata about this action group. This metadata can be
                used to filter action groups using query parameters with attr_
                prefix
            actions:
              type: optional<list<string>>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceActionGroupRead
        status-code: 200
      errors:
        - root.UpdateResourceActionGroupRequestUnprocessableEntityError
      examples:
        - path-parameters:
            resource_id: resource_id
            action_group_id: action_group_id
            proj_id: proj_id
            env_id: env_id
          request: {}
          response:
            body:
              name: Writer
              description: Writer Action Group
              attributes:
                key: value
              actions:
                - read
                - update
              key: writer
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
  source:
    openapi: ../openapi.json
  display-name: Resource Action Groups
docs: |

  Resource Action Groups are groups of actions that are assigned
  to a role as one action.
",
    },
    "resourceActions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Actions are the various ways you can interact with a resource or affect the resource.
Each (resource, action) pair defines a unique permission level.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Resource Actions",
          "endpoints": {
            "create_resource_action": {
              "auth": true,
              "display-name": "Create Resource Action",
              "docs": "Creates a new action that can affect the resource.",
              "errors": [
                "root.CreateResourceActionRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {
                    "description": "read a document",
                    "key": "read",
                    "name": "read",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "read a document",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "read",
                      "name": "read",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permission_name": "document:read",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "An optional longer description of what this action respresents in your system",
                      "type": "optional<string>",
                    },
                    "key": {
                      "docs": "A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "name": {
                      "docs": "The name of the action",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceActionCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceActionRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_resource_action": {
              "auth": true,
              "display-name": "Delete Resource Action",
              "docs": "Deletes the action and all its related data.
This includes any permissions granted to perform the action.",
              "errors": [
                "root.DeleteResourceActionRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "action_id": "action_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}",
              "path-parameters": {
                "action_id": {
                  "docs": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_resource_action": {
              "auth": true,
              "display-name": "Get Resource Action",
              "docs": "Gets a single action defined on the resource, if such action exists.",
              "errors": [
                "root.GetResourceActionRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "action_id": "action_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "read a document",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "read",
                      "name": "read",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permission_name": "document:read",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}",
              "path-parameters": {
                "action_id": {
                  "docs": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceActionRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_resource_actions": {
              "auth": true,
              "display-name": "List Resource Actions",
              "docs": "Lists all the actions defined on the resource.",
              "errors": [
                "root.ListResourceActionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "response": {
                    "body": [
                      {
                        "attributes": {
                          "key": "value",
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "read a document",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "read",
                        "name": "read",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "permission_name": "document:read",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                        "updated_at": "2019-08-24T14:15:22Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListResourceActionsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ResourceActionRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_resource_action": {
              "auth": true,
              "display-name": "Update Resource Action",
              "docs": "Partially updates the action defined on a resource.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateResourceActionRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "action_id": "action_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {
                    "description": "read a document",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "read a document",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "read",
                      "name": "read",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permission_name": "document:read",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}",
              "path-parameters": {
                "action_id": {
                  "docs": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "An optional longer description of what this action respresents in your system",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "The name of the action",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceActionUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceActionRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_resource_actions:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions
      method: GET
      auth: true
      docs: Lists all the actions defined on the resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: List Resource Actions
      request:
        name: ListResourceActionsRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ResourceActionRead>
        status-code: 200
      errors:
        - root.ListResourceActionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          response:
            body:
              - name: read
                description: read a document
                attributes:
                  key: value
                key: read
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                permission_name: document:read
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
    create_resource_action:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions
      method: POST
      auth: true
      docs: Creates a new action that can affect the resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: Create Resource Action
      request:
        name: ResourceActionCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A URL-friendly name of the action (i.e: slug). You will be able
                to query later using this key instead of the id (UUID) of the
                action.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
            name:
              type: string
              docs: The name of the action
            description:
              type: optional<string>
              docs: >-
                An optional longer description of what this action respresents
                in your system
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                optional dictionary of key-value pairs that can be used to store
                arbitrary metadata about this action. This metadata can be used
                to filter actions using query parameters with attr_ prefix
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceActionRead
        status-code: 200
      errors:
        - root.CreateResourceActionRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          request:
            key: read
            name: read
            description: read a document
          response:
            body:
              name: read
              description: read a document
              attributes:
                key: value
              key: read
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              permission_name: document:read
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    get_resource_action:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}
      method: GET
      auth: true
      docs: Gets a single action defined on the resource, if such action exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        action_id:
          type: string
          docs: >-
            Either the unique id of the action, or the URL-friendly key of the
            action (i.e: the "slug").
      display-name: Get Resource Action
      response:
        docs: Successful Response
        type: root.ResourceActionRead
        status-code: 200
      errors:
        - root.GetResourceActionRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            action_id: action_id
          response:
            body:
              name: read
              description: read a document
              attributes:
                key: value
              key: read
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              permission_name: document:read
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    delete_resource_action:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}
      method: DELETE
      auth: true
      docs: |-
        Deletes the action and all its related data.
        This includes any permissions granted to perform the action.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        action_id:
          type: string
          docs: >-
            Either the unique id of the action, or the URL-friendly key of the
            action (i.e: the "slug").
      display-name: Delete Resource Action
      errors:
        - root.DeleteResourceActionRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            action_id: action_id
    update_resource_action:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the action defined on a resource.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        action_id:
          type: string
          docs: >-
            Either the unique id of the action, or the URL-friendly key of the
            action (i.e: the "slug").
      display-name: Update Resource Action
      request:
        name: ResourceActionUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the action
            description:
              type: optional<string>
              docs: >-
                An optional longer description of what this action respresents
                in your system
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                optional dictionary of key-value pairs that can be used to store
                arbitrary metadata about this action. This metadata can be used
                to filter actions using query parameters with attr_ prefix
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceActionRead
        status-code: 200
      errors:
        - root.UpdateResourceActionRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            action_id: action_id
          request:
            description: read a document
          response:
            body:
              name: read
              description: read a document
              attributes:
                key: value
              key: read
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              permission_name: document:read
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
  source:
    openapi: ../openapi.json
  display-name: Resource Actions
docs: >

  Actions are the various ways you can interact with a resource or affect the
  resource.

  Each (resource, action) pair defines a unique permission level.
",
    },
    "resourceAttributes.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Resource attributes allow you to specify an arbitrary schema attributes that are part
of the definition of resource and must be included in any of its instances.

Attributes are used to enforce attribute-based access control policies.

For example, if we are building the github's permissions system, we might want to know
on the `Repository` resource whether the repo is private or now. In such case we will
define a boolean `private` attributes that we can now use in our policies.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Resource Attributes",
          "endpoints": {
            "create_resource_attribute": {
              "auth": true,
              "display-name": "Create Resource Attribute",
              "docs": "Creates a new attribute as part of the resource definition.",
              "errors": [
                "root.CreateResourceAttributeRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {
                    "description": "whether or not the github repository is private",
                    "key": "private",
                    "type": "bool",
                  },
                  "response": {
                    "body": {
                      "built_in": false,
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "whether or not the github repository is private",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "private",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "resource_key": "repository",
                      "type": "bool",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.ResourceAttributeCreate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceAttributeRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_resource_attribute": {
              "auth": true,
              "display-name": "Delete Resource Attribute",
              "docs": "Deletes the attribute and all its related data.

Note: If the attribute is used by policies, removing it will cause the
attribute to evaluate as `undefined`.",
              "errors": [
                "root.DeleteResourceAttributeRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "attribute_id": "attribute_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}",
              "path-parameters": {
                "attribute_id": {
                  "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "DeleteResourceAttributeRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_resource_attribute": {
              "auth": true,
              "display-name": "Get Resource Attribute",
              "docs": "Gets a single attribute defined on the resource, if such attribute exists.",
              "errors": [
                "root.GetResourceAttributeRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "attribute_id": "attribute_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "response": {
                    "body": {
                      "built_in": false,
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "whether or not the github repository is private",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "private",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "resource_key": "repository",
                      "type": "bool",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}",
              "path-parameters": {
                "attribute_id": {
                  "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceAttributeRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_resource_attributes": {
              "auth": true,
              "display-name": "List Resource Attributes",
              "docs": "Lists all the attributes defined on the resource.",
              "errors": [
                "root.ListResourceAttributesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "response": {
                    "body": [
                      {
                        "built_in": false,
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "whether or not the github repository is private",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "private",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                        "resource_key": "repository",
                        "type": "bool",
                        "updated_at": "2019-08-24T14:15:22Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListResourceAttributesRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ResourceAttributeRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_resource_attribute": {
              "auth": true,
              "display-name": "Update Resource Attribute",
              "docs": "Partially updates the attribute defined on a resource.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateResourceAttributeRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "attribute_id": "attribute_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {
                    "description": "whether or not the github repository is private",
                  },
                  "response": {
                    "body": {
                      "built_in": false,
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "whether or not the github repository is private",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "private",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "resource_key": "repository",
                      "type": "bool",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}",
              "path-parameters": {
                "attribute_id": {
                  "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.ResourceAttributeUpdate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceAttributeRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_resource_attributes:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes
      method: GET
      auth: true
      docs: Lists all the attributes defined on the resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: List Resource Attributes
      request:
        name: ListResourceAttributesRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ResourceAttributeRead>
        status-code: 200
      errors:
        - root.ListResourceAttributesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          response:
            body:
              - type: bool
                description: whether or not the github repository is private
                key: private
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
                resource_key: repository
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
                built_in: false
    create_resource_attribute:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes
      method: POST
      auth: true
      docs: Creates a new attribute as part of the resource definition.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: Create Resource Attribute
      request:
        body:
          type: root.ResourceAttributeCreate
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceAttributeRead
        status-code: 200
      errors:
        - root.CreateResourceAttributeRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          request:
            key: private
            type: bool
            description: whether or not the github repository is private
          response:
            body:
              type: bool
              description: whether or not the github repository is private
              key: private
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              resource_key: repository
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              built_in: false
    get_resource_attribute:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}
      method: GET
      auth: true
      docs: >-
        Gets a single attribute defined on the resource, if such attribute
        exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        attribute_id:
          type: string
          docs: >-
            Either the unique id of the attribute, or the URL-friendly key of
            the attribute (i.e: the "slug").
      display-name: Get Resource Attribute
      response:
        docs: Successful Response
        type: root.ResourceAttributeRead
        status-code: 200
      errors:
        - root.GetResourceAttributeRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            attribute_id: attribute_id
          response:
            body:
              type: bool
              description: whether or not the github repository is private
              key: private
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              resource_key: repository
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              built_in: false
    delete_resource_attribute:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}
      method: DELETE
      auth: true
      docs: |-
        Deletes the attribute and all its related data.

        Note: If the attribute is used by policies, removing it will cause the
        attribute to evaluate as `undefined`.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        attribute_id:
          type: string
          docs: >-
            Either the unique id of the attribute, or the URL-friendly key of
            the attribute (i.e: the "slug").
      display-name: Delete Resource Attribute
      request:
        name: DeleteResourceAttributeRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      errors:
        - root.DeleteResourceAttributeRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            attribute_id: attribute_id
    update_resource_attribute:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the attribute defined on a resource.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        attribute_id:
          type: string
          docs: >-
            Either the unique id of the attribute, or the URL-friendly key of
            the attribute (i.e: the "slug").
      display-name: Update Resource Attribute
      request:
        body:
          type: root.ResourceAttributeUpdate
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceAttributeRead
        status-code: 200
      errors:
        - root.UpdateResourceAttributeRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            attribute_id: attribute_id
          request:
            description: whether or not the github repository is private
          response:
            body:
              type: bool
              description: whether or not the github repository is private
              key: private
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              resource_key: repository
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              built_in: false
  source:
    openapi: ../openapi.json
  display-name: Resource Attributes
docs: >

  Resource attributes allow you to specify an arbitrary schema attributes that
  are part

  of the definition of resource and must be included in any of its instances.


  Attributes are used to enforce attribute-based access control policies.


  For example, if we are building the github's permissions system, we might want
  to know

  on the `Repository` resource whether the repo is private or now. In such case
  we will

  define a boolean `private` attributes that we can now use in our policies.
",
    },
    "resourceInstances.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Resource instances are instances of resource types.

An instance represents **a single object** in your system on which you'd want to enforce authorization.
You can use this API to store tenancy data (tenant) and arbitraty data (attributes).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Resource Instances",
          "endpoints": {
            "create_resource_instance": {
              "auth": true,
              "display-name": "Create Resource Instance",
              "docs": "Creates a new instance inside the Permit.io system.

If the instance is already created: will return 200 instead of 201,
and will return the existing instance object in the response body.",
              "errors": [
                "root.CreateResourceInstanceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "attributes": {
                      "owner": "facebook",
                      "private": "false",
                    },
                    "key": "react",
                    "resource": "repository",
                    "tenant": "default",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "owner": "facebook",
                        "private": "false",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "react",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource": "repository",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                      "tenant": "default",
                      "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/resource_instances",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
                      "type": "optional<map<string, unknown>>",
                    },
                    "key": {
                      "docs": "A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "resource": {
                      "docs": "the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.",
                      "type": "string",
                    },
                    "tenant": {
                      "docs": "the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceInstanceCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceInstanceRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_resource_instance": {
              "auth": true,
              "display-name": "Delete Resource Instance",
              "docs": "Deletes the instance and all its related data.",
              "errors": [
                "root.DeleteResourceInstanceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "instance_id": "instance_id",
                    "proj_id": "proj_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "instance_id": {
                  "docs": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_resource_instance": {
              "auth": true,
              "display-name": "Get Resource Instance",
              "docs": "Gets a instance, if such instance exists. Otherwise returns 404.",
              "errors": [
                "root.GetResourceInstanceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "instance_id": "instance_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "owner": "facebook",
                        "private": "false",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "react",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource": "repository",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                      "tenant": "default",
                      "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "instance_id": {
                  "docs": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceInstanceRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_resource_instances": {
              "auth": true,
              "display-name": "List Resource Instances",
              "docs": "Lists all the resource instances defined within an environment.",
              "errors": [
                "root.ListResourceInstancesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": [
                      {
                        "attributes": {
                          "owner": "facebook",
                          "private": "false",
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "react",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource": "repository",
                        "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                        "tenant": "default",
                        "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                        "updated_at": "2019-08-24T14:15:22Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/resource_instances",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListResourceInstancesRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ResourceInstanceRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_resource_instance": {
              "auth": true,
              "display-name": "Update Resource Instance",
              "docs": "Partially updates the instance definition.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateResourceInstanceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "instance_id": "instance_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "attributes": {
                      "owner": "facebook",
                      "private": "false",
                    },
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "owner": "facebook",
                        "private": "false",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "react",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource": "repository",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                      "tenant": "default",
                      "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "instance_id": {
                  "docs": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
                      "type": "optional<map<string, unknown>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceInstanceUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceInstanceRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_resource_instances:
      path: /v2/facts/{proj_id}/{env_id}/resource_instances
      method: GET
      auth: true
      docs: Lists all the resource instances defined within an environment.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Resource Instances
      request:
        name: ListResourceInstancesRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ResourceInstanceRead>
        status-code: 200
      errors:
        - root.ListResourceInstancesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              - key: react
                tenant: default
                resource: repository
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
                resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c5
                tenant_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c3
                attributes:
                  private: 'false'
                  owner: facebook
    create_resource_instance:
      path: /v2/facts/{proj_id}/{env_id}/resource_instances
      method: POST
      auth: true
      docs: |-
        Creates a new instance inside the Permit.io system.

        If the instance is already created: will return 200 instead of 201,
        and will return the existing instance object in the response body.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Create Resource Instance
      request:
        name: ResourceInstanceCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A unique identifier by which Permit will identify the resource
                instance for permission checks. You will later pass this
                identifier to the `permit.check()` API. A key can be anything:
                for example the resource db id, a url slug, a UUID or anything
                else as long as it's unique on your end. The resource instance
                key must be url-friendly.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
            tenant:
              type: optional<string>
              docs: >-
                the *key* of the tenant that this resource belongs to, used to
                enforce tenant boundaries in multi-tenant apps.
            resource:
              type: string
              docs: >-
                the *key* of the resource (type) of this resource instance. For
                example: if this resource instance is the annual budget
                document, the key of the resource might be `document`.
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                Arbitraty resource attributes that will be used to enforce
                attribute-based access control policies.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceInstanceRead
        status-code: 200
      errors:
        - root.CreateResourceInstanceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            key: react
            tenant: default
            resource: repository
            attributes:
              private: 'false'
              owner: facebook
          response:
            body:
              key: react
              tenant: default
              resource: repository
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c5
              tenant_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c3
              attributes:
                private: 'false'
                owner: facebook
    get_resource_instance:
      path: /v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}
      method: GET
      auth: true
      docs: Gets a instance, if such instance exists. Otherwise returns 404.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        instance_id:
          type: string
          docs: >-
            Either the unique id of the resource instance, or the URL-friendly
            key of the resource instance (i.e: the "slug").
      display-name: Get Resource Instance
      response:
        docs: Successful Response
        type: root.ResourceInstanceRead
        status-code: 200
      errors:
        - root.GetResourceInstanceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            instance_id: instance_id
          response:
            body:
              key: react
              tenant: default
              resource: repository
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c5
              tenant_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c3
              attributes:
                private: 'false'
                owner: facebook
    delete_resource_instance:
      path: /v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}
      method: DELETE
      auth: true
      docs: Deletes the instance and all its related data.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        instance_id:
          type: string
          docs: >-
            Either the unique id of the resource instance, or the URL-friendly
            key of the resource instance (i.e: the "slug").
      display-name: Delete Resource Instance
      errors:
        - root.DeleteResourceInstanceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            instance_id: instance_id
    update_resource_instance:
      path: /v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the instance definition.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        instance_id:
          type: string
          docs: >-
            Either the unique id of the resource instance, or the URL-friendly
            key of the resource instance (i.e: the "slug").
      display-name: Update Resource Instance
      request:
        name: ResourceInstanceUpdate
        body:
          properties:
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                Arbitraty resource attributes that will be used to enforce
                attribute-based access control policies.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceInstanceRead
        status-code: 200
      errors:
        - root.UpdateResourceInstanceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            instance_id: instance_id
          request:
            attributes:
              private: 'false'
              owner: facebook
          response:
            body:
              key: react
              tenant: default
              resource: repository
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c5
              tenant_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c3
              attributes:
                private: 'false'
                owner: facebook
  source:
    openapi: ../openapi.json
  display-name: Resource Instances
docs: >

  Resource instances are instances of resource types.


  An instance represents **a single object** in your system on which you'd want
  to enforce authorization.

  You can use this API to store tenancy data (tenant) and arbitraty data
  (attributes).
",
    },
    "resourceRoles.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Roles allow you to associate permissions indirectly via a job function.

Resource roles allow you to grant roles that are scoped to a resource, thus
expressing ownership or arbitrary relationships between an actor (i.e: user) and
a specific object.

This API allows you to manipulate roles: assign or unassign permissions to a role,
define hierarchy (inheritance) between two roles or define relationships between two roles.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Resource Roles",
          "endpoints": {
            "assign_permissions_to_resource_role": {
              "auth": true,
              "display-name": "Assign Permissions to Role",
              "docs": "Assign permissions to role.

If some of the permissions specified are already assigned, will skip them.",
              "errors": [
                "root.AssignPermissionsToResourceRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                    "role_id": "role_id",
                  },
                  "request": {
                    "permissions": [
                      "document:write",
                    ],
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the maintainer role can read from the repo and push changes",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "contributor",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "maintainer",
                      "name": "Maintainer",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "push",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.AddRolePermissions",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create_resource_role": {
              "auth": true,
              "display-name": "Create Resource Role",
              "docs": "Creates a new role associated with the resource.",
              "errors": [
                "root.CreateResourceRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {
                    "description": "the maintainer role can read from the repo and push changes",
                    "extends": [
                      "contributor",
                    ],
                    "key": "maintainer",
                    "name": "Maintainer",
                    "permissions": [
                      "push",
                    ],
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the maintainer role can read from the repo and push changes",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "contributor",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "maintainer",
                      "name": "Maintainer",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "push",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "optional description string explaining what this role represents, or what permissions are granted to it.",
                      "type": "optional<string>",
                    },
                    "extends": {
                      "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                      "type": "optional<list<string>>",
                    },
                    "key": {
                      "docs": "A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "name": {
                      "docs": "The name of the role",
                      "type": "string",
                    },
                    "permissions": {
                      "docs": "list of action keys that define what actions this resource role is permitted to do",
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceRoleCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_resource_role": {
              "auth": true,
              "display-name": "Delete Resource Role",
              "docs": "Deletes the role and all its related data.
This includes any permissions granted to said role.",
              "errors": [
                "root.DeleteResourceRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                    "role_id": "role_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_resource_role": {
              "auth": true,
              "display-name": "Get Resource Role",
              "docs": "Gets a single role defined on the resource, if such role exists.",
              "errors": [
                "root.GetResourceRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                    "role_id": "role_id",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the maintainer role can read from the repo and push changes",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "contributor",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "maintainer",
                      "name": "Maintainer",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "push",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_resource_role_ancestors": {
              "auth": true,
              "display-name": "Get Resource Role Ancestors",
              "docs": undefined,
              "errors": [
                "root.GetResourceRoleAncestorsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                    "role_id": "role_id",
                  },
                  "response": {
                    "body": {
                      "roles": [
                        {
                          "attributes": {
                            "key": "value",
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "the maintainer role can read from the repo and push changes",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "extends": [
                            "contributor",
                          ],
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "maintainer",
                          "name": "Maintainer",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "permissions": [
                            "push",
                          ],
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                          "updated_at": "2019-08-24T14:15:22Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/ancestors",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRoleList",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_resource_role_descendants": {
              "auth": true,
              "display-name": "Get Resource Role Descendants",
              "docs": undefined,
              "errors": [
                "root.GetResourceRoleDescendantsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                    "role_id": "role_id",
                  },
                  "response": {
                    "body": {
                      "roles": [
                        {
                          "attributes": {
                            "key": "value",
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "the maintainer role can read from the repo and push changes",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "extends": [
                            "contributor",
                          ],
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "maintainer",
                          "name": "Maintainer",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "permissions": [
                            "push",
                          ],
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                          "updated_at": "2019-08-24T14:15:22Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/descendants",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRoleList",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_resource_roles": {
              "auth": true,
              "display-name": "List Resource Roles",
              "docs": "Lists all the roles defined on the resource.",
              "errors": [
                "root.ListResourceRolesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "response": {
                    "body": [
                      {
                        "attributes": {
                          "key": "value",
                        },
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "the maintainer role can read from the repo and push changes",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "extends": [
                          "contributor",
                        ],
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "maintainer",
                        "name": "Maintainer",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "permissions": [
                          "push",
                        ],
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                        "updated_at": "2019-08-24T14:15:22Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListResourceRolesRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ResourceRoleRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove_permissions_from_resource_role": {
              "auth": true,
              "display-name": "Remove Permissions from Role",
              "docs": "Remove permissions from role.

If some of the permissions specified are already unassigned, will skip them.",
              "errors": [
                "root.RemovePermissionsFromResourceRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                    "role_id": "role_id",
                  },
                  "request": {
                    "permissions": [
                      "document:share",
                    ],
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the maintainer role can read from the repo and push changes",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "contributor",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "maintainer",
                      "name": "Maintainer",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "push",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.RemoveRolePermissions",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_resource_role": {
              "auth": true,
              "display-name": "Update Resource Role",
              "docs": "Partially updates the role defined on a resource.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateResourceRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                    "role_id": "role_id",
                  },
                  "request": {
                    "description": "the maintainer role can read from the repo and push changes",
                    "permissions": [
                      "push",
                    ],
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the maintainer role can read from the repo and push changes",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "contributor",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "maintainer",
                      "name": "Maintainer",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "push",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "optional description string explaining what this role represents, or what permissions are granted to it.",
                      "type": "optional<string>",
                    },
                    "extends": {
                      "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                      "type": "optional<list<string>>",
                    },
                    "name": {
                      "docs": "The name of the role",
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "list of action keys that define what actions this resource role is permitted to do",
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceRoleUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_resource_roles:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles
      method: GET
      auth: true
      docs: Lists all the roles defined on the resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: List Resource Roles
      request:
        name: ListResourceRolesRequest
        query-parameters:
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ResourceRoleRead>
        status-code: 200
      errors:
        - root.ListResourceRolesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          response:
            body:
              - name: Maintainer
                description: the maintainer role can read from the repo and push changes
                permissions:
                  - push
                attributes:
                  key: value
                extends:
                  - contributor
                key: maintainer
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
    create_resource_role:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles
      method: POST
      auth: true
      docs: Creates a new role associated with the resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: Create Resource Role
      request:
        name: ResourceRoleCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A URL-friendly name of the role (i.e: slug). You will be able to
                query later using this key instead of the id (UUID) of the role.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
            name:
              type: string
              docs: The name of the role
            description:
              type: optional<string>
              docs: >-
                optional description string explaining what this role
                represents, or what permissions are granted to it.
            permissions:
              type: optional<list<string>>
              docs: >-
                list of action keys that define what actions this resource role
                is permitted to do
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                optional dictionary of key-value pairs that can be used to store
                arbitrary metadata about this role. This metadata can be used to
                filter role using query parameters with attr_ prefix, currently
                supports only 'equals' operator
            extends:
              type: optional<list<string>>
              docs: >-
                list of role keys that define what roles this role extends. In
                other words: this role will automatically inherit all the
                permissions of the given roles in this list.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceRoleRead
        status-code: 200
      errors:
        - root.CreateResourceRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          request:
            key: maintainer
            name: Maintainer
            description: the maintainer role can read from the repo and push changes
            permissions:
              - push
            extends:
              - contributor
          response:
            body:
              name: Maintainer
              description: the maintainer role can read from the repo and push changes
              permissions:
                - push
              attributes:
                key: value
              extends:
                - contributor
              key: maintainer
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    get_resource_role:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}
      method: GET
      auth: true
      docs: Gets a single role defined on the resource, if such role exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Get Resource Role
      response:
        docs: Successful Response
        type: root.ResourceRoleRead
        status-code: 200
      errors:
        - root.GetResourceRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            role_id: role_id
          response:
            body:
              name: Maintainer
              description: the maintainer role can read from the repo and push changes
              permissions:
                - push
              attributes:
                key: value
              extends:
                - contributor
              key: maintainer
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    delete_resource_role:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}
      method: DELETE
      auth: true
      docs: |-
        Deletes the role and all its related data.
        This includes any permissions granted to said role.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Delete Resource Role
      errors:
        - root.DeleteResourceRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            role_id: role_id
    update_resource_role:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the role defined on a resource.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Update Resource Role
      request:
        name: ResourceRoleUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the role
            description:
              type: optional<string>
              docs: >-
                optional description string explaining what this role
                represents, or what permissions are granted to it.
            permissions:
              type: optional<list<string>>
              docs: >-
                list of action keys that define what actions this resource role
                is permitted to do
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                optional dictionary of key-value pairs that can be used to store
                arbitrary metadata about this role. This metadata can be used to
                filter role using query parameters with attr_ prefix, currently
                supports only 'equals' operator
            extends:
              type: optional<list<string>>
              docs: >-
                list of role keys that define what roles this role extends. In
                other words: this role will automatically inherit all the
                permissions of the given roles in this list.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceRoleRead
        status-code: 200
      errors:
        - root.UpdateResourceRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            role_id: role_id
          request:
            description: the maintainer role can read from the repo and push changes
            permissions:
              - push
          response:
            body:
              name: Maintainer
              description: the maintainer role can read from the repo and push changes
              permissions:
                - push
              attributes:
                key: value
              extends:
                - contributor
              key: maintainer
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    assign_permissions_to_resource_role:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions
      method: POST
      auth: true
      docs: >-
        Assign permissions to role.


        If some of the permissions specified are already assigned, will skip
        them.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Assign Permissions to Role
      request:
        body:
          type: root.AddRolePermissions
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceRoleRead
        status-code: 200
      errors:
        - root.AssignPermissionsToResourceRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            role_id: role_id
          request:
            permissions:
              - document:write
          response:
            body:
              name: Maintainer
              description: the maintainer role can read from the repo and push changes
              permissions:
                - push
              attributes:
                key: value
              extends:
                - contributor
              key: maintainer
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    remove_permissions_from_resource_role:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions
      method: DELETE
      auth: true
      docs: >-
        Remove permissions from role.


        If some of the permissions specified are already unassigned, will skip
        them.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Remove Permissions from Role
      request:
        body:
          type: root.RemoveRolePermissions
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceRoleRead
        status-code: 200
      errors:
        - root.RemovePermissionsFromResourceRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            role_id: role_id
          request:
            permissions:
              - document:share
          response:
            body:
              name: Maintainer
              description: the maintainer role can read from the repo and push changes
              permissions:
                - push
              attributes:
                key: value
              extends:
                - contributor
              key: maintainer
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    get_resource_role_ancestors:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/ancestors
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Get Resource Role Ancestors
      response:
        docs: Successful Response
        type: root.ResourceRoleList
        status-code: 200
      errors:
        - root.GetResourceRoleAncestorsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            role_id: role_id
          response:
            body:
              roles:
                - name: Maintainer
                  description: the maintainer role can read from the repo and push changes
                  permissions:
                    - push
                  attributes:
                    key: value
                  extends:
                    - contributor
                  key: maintainer
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
    get_resource_role_descendants:
      path: >-
        /v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/descendants
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Get Resource Role Descendants
      response:
        docs: Successful Response
        type: root.ResourceRoleList
        status-code: 200
      errors:
        - root.GetResourceRoleDescendantsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
            role_id: role_id
          response:
            body:
              roles:
                - name: Maintainer
                  description: the maintainer role can read from the repo and push changes
                  permissions:
                    - push
                  attributes:
                    key: value
                  extends:
                    - contributor
                  key: maintainer
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
  source:
    openapi: ../openapi.json
  display-name: Resource Roles
docs: >

  Roles allow you to associate permissions indirectly via a job function.


  Resource roles allow you to grant roles that are scoped to a resource, thus

  expressing ownership or arbitrary relationships between an actor (i.e: user)
  and

  a specific object.


  This API allows you to manipulate roles: assign or unassign permissions to a
  role,

  define hierarchy (inheritance) between two roles or define relationships
  between two roles.
",
    },
    "resources.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Resources are *types* of objects or feature names that you wish to protect (or gate) with permissions.

For example, if you build a document-sharing app like google docs, you might want to define a "document" resource.

A resource definition block typically contains **actions**.
Actions are the various ways you can interact with the object / feature. Each (resource, action) pair defines a unique permission level.

A resource may also contain:
- roles (if you wish to define resource-bound roles or if your permissions model is relational)
- relations to other resources (if your permissions model is relational, i.e: you work with a ReBAC model)
- attributes (attributes that are typically defined on the resource, typically used in ABAC models)
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Resources",
          "endpoints": {
            "create_resource": {
              "auth": true,
              "display-name": "Create Resource",
              "docs": "Creates a new resource (a type of object you may protect with permissions).",
              "errors": [
                "root.CreateResourceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "actions": {
                      "clone": {},
                      "push": {},
                      "read": {},
                    },
                    "attributes": {
                      "created": {
                        "description": "the time (timestamp) the repository was created",
                        "type": "time",
                      },
                      "private": {
                        "description": "whether the repo is private (if false, the repo is public)",
                        "type": "bool",
                      },
                    },
                    "key": "repository",
                    "name": "Repository",
                  },
                  "response": {
                    "body": {
                      "action_groups": {
                        "key": [
                          "value",
                        ],
                      },
                      "actions": {
                        "clone": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                          "key": "key",
                          "name": "name",
                        },
                        "push": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                          "key": "key",
                          "name": "name",
                        },
                        "read": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                          "key": "key",
                          "name": "name",
                        },
                      },
                      "attributes": {
                        "created": {
                          "description": "the time (timestamp) the repository was created",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                          "key": "key",
                          "type": "time",
                        },
                        "private": {
                          "description": "whether the repo is private (if false, the repo is public)",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                          "key": "key",
                          "type": "bool",
                        },
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "a git repository stored on github",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "repository",
                      "name": "Repository",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                      "urn": "prn:github:scm:repository",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "actions": {
                      "docs": "
        A actions definition block, typically contained within a resource type definition block.
        The actions represents the ways you can interact with a protected resource.
        ",
                      "type": "map<string, root.ActionBlockEditable>",
                    },
                    "attributes": {
                      "docs": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
                      "type": "optional<map<string, root.AttributeBlockEditable>>",
                    },
                    "description": {
                      "docs": "An optional longer description of what this resource respresents in your system",
                      "type": "optional<string>",
                    },
                    "key": {
                      "docs": "A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "name": {
                      "docs": "The name of the resource",
                      "type": "string",
                    },
                    "urn": {
                      "docs": "The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_resource": {
              "auth": true,
              "display-name": "Delete Resource",
              "docs": "Deletes the resource and all its related data.",
              "errors": [
                "root.DeleteResourceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_resource": {
              "auth": true,
              "display-name": "Get Resource",
              "docs": "Gets a single resource, if such resource exists.",
              "errors": [
                "root.GetResourceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "response": {
                    "body": {
                      "action_groups": {
                        "key": [
                          "value",
                        ],
                      },
                      "actions": {
                        "clone": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                          "key": "key",
                          "name": "name",
                        },
                        "push": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                          "key": "key",
                          "name": "name",
                        },
                        "read": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                          "key": "key",
                          "name": "name",
                        },
                      },
                      "attributes": {
                        "created": {
                          "description": "the time (timestamp) the repository was created",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                          "key": "key",
                          "type": "time",
                        },
                        "private": {
                          "description": "whether the repo is private (if false, the repo is public)",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                          "key": "key",
                          "type": "bool",
                        },
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "a git repository stored on github",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "repository",
                      "name": "Repository",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                      "urn": "prn:github:scm:repository",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_resources": {
              "auth": true,
              "display-name": "List Resources",
              "docs": "Lists all the resources defined in your schema.",
              "errors": [
                "root.ListResourcesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "action_groups": {
                            "key": [
                              "value",
                            ],
                          },
                          "actions": {
                            "clone": {
                              "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                            },
                            "push": {
                              "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                            },
                            "read": {
                              "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                            },
                          },
                          "attributes": {
                            "created": {
                              "description": "the time (timestamp) the repository was created",
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                              "type": "time",
                            },
                            "private": {
                              "description": "whether the repo is private (if false, the repo is public)",
                              "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                              "type": "bool",
                            },
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "a git repository stored on github",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "repository",
                          "name": "Repository",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "updated_at": "2019-08-24T14:15:22Z",
                          "urn": "prn:github:scm:repository",
                        },
                      ],
                      "page_count": 1,
                      "total_count": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListResourcesRequest",
                "query-parameters": {
                  "include_built_in": {
                    "default": false,
                    "docs": "Whether to include or exclude built-in resources, default is False",
                    "type": "optional<boolean>",
                  },
                  "include_total_count": {
                    "default": false,
                    "docs": "Include total count in response",
                    "type": "optional<boolean>",
                  },
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "search": {
                    "docs": "Text search for the resources name or key",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "ListResourcesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "replace_resource": {
              "auth": true,
              "display-name": "Replace Resource",
              "docs": "Completely replaces the resource definition.

- If the resource key is changed, all role and permissions assignments for the the resource will be revoked.
- If the resource key is unchanged, but some actions are removed or renamed from the resource definition,
role and permissions assignments for these actions will be revoked.

TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.",
              "errors": [
                "root.ReplaceResourceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {
                    "actions": {
                      "key": {},
                    },
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "action_groups": {
                        "key": [
                          "value",
                        ],
                      },
                      "actions": {
                        "clone": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                          "key": "key",
                          "name": "name",
                        },
                        "push": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                          "key": "key",
                          "name": "name",
                        },
                        "read": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                          "key": "key",
                          "name": "name",
                        },
                      },
                      "attributes": {
                        "created": {
                          "description": "the time (timestamp) the repository was created",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                          "key": "key",
                          "type": "time",
                        },
                        "private": {
                          "description": "whether the repo is private (if false, the repo is public)",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                          "key": "key",
                          "type": "bool",
                        },
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "a git repository stored on github",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "repository",
                      "name": "Repository",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                      "urn": "prn:github:scm:repository",
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "actions": {
                      "docs": "
        A actions definition block, typically contained within a resource type definition block.
        The actions represents the ways you can interact with a protected resource.
        ",
                      "type": "map<string, root.ActionBlockEditable>",
                    },
                    "attributes": {
                      "docs": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
                      "type": "optional<map<string, root.AttributeBlockEditable>>",
                    },
                    "description": {
                      "docs": "An optional longer description of what this resource respresents in your system",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "The name of the resource",
                      "type": "string",
                    },
                    "urn": {
                      "docs": "The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceReplace",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_resource": {
              "auth": true,
              "display-name": "Update Resource",
              "docs": "Partially updates the resource definition.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateResourceRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "resource_id": "resource_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "action_groups": {
                        "key": [
                          "value",
                        ],
                      },
                      "actions": {
                        "clone": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1",
                          "key": "key",
                          "name": "name",
                        },
                        "push": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "e06da336-6e03-41d6-a495-40b0d7537b2a",
                          "key": "key",
                          "name": "name",
                        },
                        "read": {
                          "attributes": {
                            "key": "value",
                          },
                          "description": "description",
                          "id": "2bc27751-6115-43c0-b68c-928cb46e34bc",
                          "key": "key",
                          "name": "name",
                        },
                      },
                      "attributes": {
                        "created": {
                          "description": "the time (timestamp) the repository was created",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                          "key": "key",
                          "type": "time",
                        },
                        "private": {
                          "description": "whether the repo is private (if false, the repo is public)",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                          "key": "key",
                          "type": "bool",
                        },
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "a git repository stored on github",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "repository",
                      "name": "Repository",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                      "urn": "prn:github:scm:repository",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "resource_id": {
                  "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "actions": {
                      "docs": "
        A actions definition block, typically contained within a resource type definition block.
        The actions represents the ways you can interact with a protected resource.
        ",
                      "type": "optional<map<string, root.ActionBlockEditable>>",
                    },
                    "attributes": {
                      "docs": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
                      "type": "optional<map<string, root.AttributeBlockEditable>>",
                    },
                    "description": {
                      "docs": "An optional longer description of what this resource respresents in your system",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "The name of the resource",
                      "type": "optional<string>",
                    },
                    "urn": {
                      "docs": "The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ResourceUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ListResourcesResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "root.PaginatedResultResourceRead",
              },
              "list<root.ResourceRead>",
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  ListResourcesResponse:
    discriminated: false
    union:
      - type: root.PaginatedResultResourceRead
      - list<root.ResourceRead>
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    list_resources:
      path: /v2/schema/{proj_id}/{env_id}/resources
      method: GET
      auth: true
      docs: Lists all the resources defined in your schema.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Resources
      request:
        name: ListResourcesRequest
        query-parameters:
          search:
            type: optional<string>
            docs: Text search for the resources name or key
          include_built_in:
            type: optional<boolean>
            default: false
            docs: Whether to include or exclude built-in resources, default is False
          include_total_count:
            type: optional<boolean>
            default: false
            docs: Include total count in response
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: ListResourcesResponse
        status-code: 200
      errors:
        - root.ListResourcesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              data:
                - key: repository
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
                  name: Repository
                  urn: prn:github:scm:repository
                  description: a git repository stored on github
                  actions:
                    clone:
                      id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                    read:
                      id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                    push:
                      id: e06da336-6e03-41d6-a495-40b0d7537b2a
                  attributes:
                    created:
                      type: time
                      description: the time (timestamp) the repository was created
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                    private:
                      type: bool
                      description: >-
                        whether the repo is private (if false, the repo is
                        public)
                      id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                  action_groups:
                    key:
                      - value
              total_count: 1
              page_count: 1
    create_resource:
      path: /v2/schema/{proj_id}/{env_id}/resources
      method: POST
      auth: true
      docs: >-
        Creates a new resource (a type of object you may protect with
        permissions).
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Create Resource
      request:
        name: ResourceCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A URL-friendly name of the resource (i.e: slug). You will be
                able to query later using this key instead of the id (UUID) of
                the resource.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
            name:
              type: string
              docs: The name of the resource
            urn:
              type: optional<string>
              docs: >-
                The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name)
                (Uniform Resource Name) of the resource
            description:
              type: optional<string>
              docs: >-
                An optional longer description of what this resource respresents
                in your system
            actions:
              type: map<string, root.ActionBlockEditable>
              docs: |2-

                        A actions definition block, typically contained within a resource type definition block.
                        The actions represents the ways you can interact with a protected resource.
                        
            attributes:
              type: optional<map<string, root.AttributeBlockEditable>>
              docs: >-
                Attributes that each resource of this type defines, and can be
                used in your ABAC policies.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceRead
        status-code: 200
      errors:
        - root.CreateResourceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            key: repository
            name: Repository
            actions:
              clone: {}
              read: {}
              push: {}
            attributes:
              created:
                type: time
                description: the time (timestamp) the repository was created
              private:
                type: bool
                description: whether the repo is private (if false, the repo is public)
          response:
            body:
              key: repository
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              name: Repository
              urn: prn:github:scm:repository
              description: a git repository stored on github
              actions:
                clone:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                  key: key
                read:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                  key: key
                push:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: e06da336-6e03-41d6-a495-40b0d7537b2a
                  key: key
              attributes:
                created:
                  type: time
                  description: the time (timestamp) the repository was created
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                  key: key
                private:
                  type: bool
                  description: whether the repo is private (if false, the repo is public)
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                  key: key
              action_groups:
                key:
                  - value
    get_resource:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}
      method: GET
      auth: true
      docs: Gets a single resource, if such resource exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: Get Resource
      response:
        docs: Successful Response
        type: root.ResourceRead
        status-code: 200
      errors:
        - root.GetResourceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          response:
            body:
              key: repository
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              name: Repository
              urn: prn:github:scm:repository
              description: a git repository stored on github
              actions:
                clone:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                  key: key
                read:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                  key: key
                push:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: e06da336-6e03-41d6-a495-40b0d7537b2a
                  key: key
              attributes:
                created:
                  type: time
                  description: the time (timestamp) the repository was created
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                  key: key
                private:
                  type: bool
                  description: whether the repo is private (if false, the repo is public)
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                  key: key
              action_groups:
                key:
                  - value
    replace_resource:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}
      method: PUT
      auth: true
      docs: >-
        Completely replaces the resource definition.


        - If the resource key is changed, all role and permissions assignments
        for the the resource will be revoked.

        - If the resource key is unchanged, but some actions are removed or
        renamed from the resource definition,

        role and permissions assignments for these actions will be revoked.


        TODO: we need to decide if we are auto-revoking, or if we are rejecting
        the PUT completely while there are permissions that can be affected.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: Replace Resource
      request:
        name: ResourceReplace
        body:
          properties:
            name:
              type: string
              docs: The name of the resource
            urn:
              type: optional<string>
              docs: >-
                The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name)
                (Uniform Resource Name) of the resource
            description:
              type: optional<string>
              docs: >-
                An optional longer description of what this resource respresents
                in your system
            actions:
              type: map<string, root.ActionBlockEditable>
              docs: |2-

                        A actions definition block, typically contained within a resource type definition block.
                        The actions represents the ways you can interact with a protected resource.
                        
            attributes:
              type: optional<map<string, root.AttributeBlockEditable>>
              docs: >-
                Attributes that each resource of this type defines, and can be
                used in your ABAC policies.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceRead
        status-code: 200
      errors:
        - root.ReplaceResourceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          request:
            name: name
            actions:
              key: {}
          response:
            body:
              key: repository
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              name: Repository
              urn: prn:github:scm:repository
              description: a git repository stored on github
              actions:
                clone:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                  key: key
                read:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                  key: key
                push:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: e06da336-6e03-41d6-a495-40b0d7537b2a
                  key: key
              attributes:
                created:
                  type: time
                  description: the time (timestamp) the repository was created
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                  key: key
                private:
                  type: bool
                  description: whether the repo is private (if false, the repo is public)
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                  key: key
              action_groups:
                key:
                  - value
    delete_resource:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}
      method: DELETE
      auth: true
      docs: Deletes the resource and all its related data.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: Delete Resource
      errors:
        - root.DeleteResourceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
    update_resource:
      path: /v2/schema/{proj_id}/{env_id}/resources/{resource_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the resource definition.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        resource_id:
          type: string
          docs: >-
            Either the unique id of the resource, or the URL-friendly key of the
            resource (i.e: the "slug").
      display-name: Update Resource
      request:
        name: ResourceUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the resource
            urn:
              type: optional<string>
              docs: >-
                The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name)
                (Uniform Resource Name) of the resource
            description:
              type: optional<string>
              docs: >-
                An optional longer description of what this resource respresents
                in your system
            actions:
              type: optional<map<string, root.ActionBlockEditable>>
              docs: |2-

                        A actions definition block, typically contained within a resource type definition block.
                        The actions represents the ways you can interact with a protected resource.
                        
            attributes:
              type: optional<map<string, root.AttributeBlockEditable>>
              docs: >-
                Attributes that each resource of this type defines, and can be
                used in your ABAC policies.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceRead
        status-code: 200
      errors:
        - root.UpdateResourceRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            resource_id: resource_id
          request: {}
          response:
            body:
              key: repository
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              name: Repository
              urn: prn:github:scm:repository
              description: a git repository stored on github
              actions:
                clone:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: 90e21d70-2b1b-42f0-b492-8fd69c1d79d1
                  key: key
                read:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: 2bc27751-6115-43c0-b68c-928cb46e34bc
                  key: key
                push:
                  name: name
                  description: description
                  attributes:
                    key: value
                  id: e06da336-6e03-41d6-a495-40b0d7537b2a
                  key: key
              attributes:
                created:
                  type: time
                  description: the time (timestamp) the repository was created
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f11
                  key: key
                private:
                  type: bool
                  description: whether the repo is private (if false, the repo is public)
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f22
                  key: key
              action_groups:
                key:
                  - value
  source:
    openapi: ../openapi.json
  display-name: Resources
docs: >

  Resources are *types* of objects or feature names that you wish to protect (or
  gate) with permissions.


  For example, if you build a document-sharing app like google docs, you might
  want to define a "document" resource.


  A resource definition block typically contains **actions**.

  Actions are the various ways you can interact with the object / feature. Each
  (resource, action) pair defines a unique permission level.


  A resource may also contain:

  - roles (if you wish to define resource-bound roles or if your permissions
  model is relational)

  - relations to other resources (if your permissions model is relational, i.e:
  you work with a ReBAC model)

  - attributes (attributes that are typically defined on the resource, typically
  used in ABAC models)
",
    },
    "roleAssignments.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Role Assignments are RBAC-constructs that state that a actor (i.e: user) is assigned a role within a tenant.

With role assignments you can assign or unassign roles to a user.
Role assignment define the relationship between users and tenants.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Role Assignments",
          "endpoints": {
            "assign_role": {
              "auth": true,
              "display-name": "Assign Role",
              "docs": "Assigns a role to a user within a tenant.

The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.",
              "errors": [
                "root.AssignRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "role": "admin",
                    "tenant": "stripe-inc",
                    "user": "jane@coolcompany.com",
                  },
                  "response": {
                    "body": {
                      "created_at": "2019-08-24T14:15:22Z",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "role": "admin",
                      "role_id": "405d8375-3514-403b-8c43-83ae74cfe022",
                      "tenant": "stripe-inc",
                      "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e733",
                      "user": "jane@coolcompany.com",
                      "user_id": "7c60d51f-b44e-4682-87d6-449835ea4d11",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/role_assignments",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.RoleAssignmentCreate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleAssignmentRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "bulk_assign_role": {
              "auth": true,
              "display-name": "Bulk Assign Role",
              "docs": undefined,
              "errors": [
                "root.BulkAssignRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc",
                      "user": "jane@coolcompany.com",
                    },
                  ],
                  "response": {
                    "body": {
                      "assignments_created": 1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/role_assignments/bulk",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "list<root.RoleAssignmentCreate>",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.BulkRoleAssignmentReport",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "bulk_unassign_role": {
              "auth": true,
              "display-name": "Bulk Unassign Role",
              "docs": undefined,
              "errors": [
                "root.BulkUnassignRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": [
                    {
                      "role": "editor",
                      "tenant": "google-inc",
                      "user": "jane@coolcompany.com",
                    },
                  ],
                  "response": {
                    "body": {
                      "assignments_removed": 1,
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/role_assignments/bulk",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "list<root.RoleAssignmentRemove>",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.BulkRoleUnAssignmentReport",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_role_assignments": {
              "auth": true,
              "display-name": "List Role Assignments",
              "docs": "Lists the role assignments defined within an environment.

- If the `user` filter is present, will only return the role assignments of that user.
- If the `tenant` filter is present, will only return the role assignments in that tenant.
- If the `role` filter is present, will only return role assignments that are granting that role.",
              "errors": [
                "root.ListRoleAssignmentsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": [
                      {
                        "created_at": "2019-08-24T14:15:22Z",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "role": "admin",
                        "role_id": "405d8375-3514-403b-8c43-83ae74cfe022",
                        "tenant": "stripe-inc",
                        "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e733",
                        "user": "jane@coolcompany.com",
                        "user_id": "7c60d51f-b44e-4682-87d6-449835ea4d11",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/role_assignments",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListRoleAssignmentsRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "role": {
                    "docs": "optional role filter, will only return role assignments granting this role.",
                    "type": "optional<string>",
                  },
                  "tenant": {
                    "docs": "optional tenant filter, will only return role assignments granted in that tenant.",
                    "type": "optional<string>",
                  },
                  "user": {
                    "docs": "optional user filter, will only return role assignments granted to this user.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.RoleAssignmentRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unassign_role": {
              "auth": true,
              "display-name": "Unassign Role",
              "docs": "Unassigns a user role within a tenant.

The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.

If the role is not actually assigned, will return 404.",
              "errors": [
                "root.UnassignRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "role": "editor",
                    "tenant": "google-inc",
                    "user": "jane@coolcompany.com",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/role_assignments",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.RoleAssignmentRemove",
                },
                "content-type": "application/json",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_role_assignments:
      path: /v2/facts/{proj_id}/{env_id}/role_assignments
      method: GET
      auth: true
      docs: >-
        Lists the role assignments defined within an environment.


        - If the `user` filter is present, will only return the role assignments
        of that user.

        - If the `tenant` filter is present, will only return the role
        assignments in that tenant.

        - If the `role` filter is present, will only return role assignments
        that are granting that role.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Role Assignments
      request:
        name: ListRoleAssignmentsRequest
        query-parameters:
          user:
            type: optional<string>
            docs: >-
              optional user filter, will only return role assignments granted to
              this user.
          role:
            type: optional<string>
            docs: >-
              optional role filter, will only return role assignments granting
              this role.
          tenant:
            type: optional<string>
            docs: >-
              optional tenant filter, will only return role assignments granted
              in that tenant.
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.RoleAssignmentRead>
        status-code: 200
      errors:
        - root.ListRoleAssignmentsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                user: jane@coolcompany.com
                role: admin
                tenant: stripe-inc
                user_id: 7c60d51f-b44e-4682-87d6-449835ea4d11
                role_id: 405d8375-3514-403b-8c43-83ae74cfe022
                tenant_id: 40ef0e48-a11f-4963-a229-e396c9f7e733
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
    assign_role:
      path: /v2/facts/{proj_id}/{env_id}/role_assignments
      method: POST
      auth: true
      docs: >-
        Assigns a role to a user within a tenant.


        The tenant defines the scope of the assignment. In other words, the role
        is effective only within the tenant.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Assign Role
      request:
        body:
          type: root.RoleAssignmentCreate
        content-type: application/json
      response:
        docs: Successful Response
        type: root.RoleAssignmentRead
        status-code: 200
      errors:
        - root.AssignRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            role: admin
            tenant: stripe-inc
            user: jane@coolcompany.com
          response:
            body:
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              user: jane@coolcompany.com
              role: admin
              tenant: stripe-inc
              user_id: 7c60d51f-b44e-4682-87d6-449835ea4d11
              role_id: 405d8375-3514-403b-8c43-83ae74cfe022
              tenant_id: 40ef0e48-a11f-4963-a229-e396c9f7e733
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
    unassign_role:
      path: /v2/facts/{proj_id}/{env_id}/role_assignments
      method: DELETE
      auth: true
      docs: >-
        Unassigns a user role within a tenant.


        The tenant defines the scope of the assignment. In other words, the role
        is effective only within the tenant.


        If the role is not actually assigned, will return 404.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Unassign Role
      request:
        body:
          type: root.RoleAssignmentRemove
        content-type: application/json
      errors:
        - root.UnassignRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            role: editor
            tenant: google-inc
            user: jane@coolcompany.com
    bulk_assign_role:
      path: /v2/facts/{proj_id}/{env_id}/role_assignments/bulk
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Bulk Assign Role
      request:
        body:
          type: list<root.RoleAssignmentCreate>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.BulkRoleAssignmentReport
        status-code: 200
      errors:
        - root.BulkAssignRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            - role: admin
              tenant: stripe-inc
              user: jane@coolcompany.com
          response:
            body:
              assignments_created: 1
    bulk_unassign_role:
      path: /v2/facts/{proj_id}/{env_id}/role_assignments/bulk
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Bulk Unassign Role
      request:
        body:
          type: list<root.RoleAssignmentRemove>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.BulkRoleUnAssignmentReport
        status-code: 200
      errors:
        - root.BulkUnassignRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            - role: editor
              tenant: google-inc
              user: jane@coolcompany.com
          response:
            body:
              assignments_removed: 1
  source:
    openapi: ../openapi.json
  display-name: Role Assignments
docs: >

  Role Assignments are RBAC-constructs that state that a actor (i.e: user) is
  assigned a role within a tenant.


  With role assignments you can assign or unassign roles to a user.

  Role assignment define the relationship between users and tenants.
",
    },
    "roles.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Roles allow you to associate permissions indirectly via a job function.

The Roles API allows you to manipulate roles: assign or unassign permissions to a role,
define hierarchy between roles or define relationships between resource roles.

Roles manipulated by this API are **tenant roles**, meaning when they are assigned, they are
assigned on a tenant.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Roles",
          "endpoints": {
            "assign_permissions_to_role": {
              "auth": true,
              "display-name": "Assign Permissions To Role",
              "docs": "Assign permissions to role.

If some of the permissions specified are already assigned, will skip them.",
              "errors": [
                "root.AssignPermissionsToRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "role_id": "role_id",
                  },
                  "request": {
                    "permissions": [
                      "document:write",
                    ],
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the editor role can read and write to documents",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "viewer",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "editor",
                      "name": "Editor",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "document:write",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.AddRolePermissions",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create_role": {
              "auth": true,
              "display-name": "Create Role",
              "docs": "Creates a new tenant role.",
              "errors": [
                "root.CreateRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "description": "the editor role can read and write to documents",
                    "extends": [
                      "viewer",
                    ],
                    "key": "editor",
                    "name": "Editor",
                    "permissions": [
                      "document:write",
                    ],
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the editor role can read and write to documents",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "viewer",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "editor",
                      "name": "Editor",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "document:write",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "optional description string explaining what this role represents, or what permissions are granted to it.",
                      "type": "optional<string>",
                    },
                    "extends": {
                      "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                      "type": "optional<list<string>>",
                    },
                    "key": {
                      "docs": "A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^[A-Za-z0-9\-_]+$",
                      },
                    },
                    "name": {
                      "docs": "The name of the role",
                      "type": "string",
                    },
                    "permissions": {
                      "docs": "list of action keys that define what actions this resource role is permitted to do",
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RoleCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_role": {
              "auth": true,
              "display-name": "Delete Role",
              "docs": "Deletes a tenant role and all its related data.
This includes any permissions granted to said role.",
              "errors": [
                "root.DeleteRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "role_id": "role_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_role": {
              "auth": true,
              "display-name": "Get Role",
              "docs": "Gets a single tenant role, if such role exists.",
              "errors": [
                "root.GetRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "role_id": "role_id",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the editor role can read and write to documents",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "viewer",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "editor",
                      "name": "Editor",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "document:write",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_role_ancestors": {
              "auth": true,
              "display-name": "Get Role Ancestors",
              "docs": undefined,
              "errors": [
                "root.GetRoleAncestorsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "role_id": "role_id",
                  },
                  "response": {
                    "body": {
                      "roles": [
                        {
                          "attributes": {
                            "key": "value",
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "the editor role can read and write to documents",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "extends": [
                            "viewer",
                          ],
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "editor",
                          "name": "Editor",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "permissions": [
                            "document:write",
                          ],
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "updated_at": "2019-08-24T14:15:22Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/ancestors",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleList",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_role_descendants": {
              "auth": true,
              "display-name": "Get Role Descendants",
              "docs": undefined,
              "errors": [
                "root.GetRoleDescendantsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "role_id": "role_id",
                  },
                  "response": {
                    "body": {
                      "roles": [
                        {
                          "attributes": {
                            "key": "value",
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "the editor role can read and write to documents",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "extends": [
                            "viewer",
                          ],
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "editor",
                          "name": "Editor",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "permissions": [
                            "document:write",
                          ],
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "updated_at": "2019-08-24T14:15:22Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/descendants",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleList",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_roles": {
              "auth": true,
              "display-name": "List Roles",
              "docs": "Lists all tenant roles.",
              "errors": [
                "root.ListRolesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "attributes": {
                            "key": "value",
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "the editor role can read and write to documents",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "extends": [
                            "viewer",
                          ],
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "editor",
                          "name": "Editor",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "permissions": [
                            "document:write",
                          ],
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "updated_at": "2019-08-24T14:15:22Z",
                        },
                      ],
                      "page_count": 1,
                      "total_count": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListRolesRequest",
                "query-parameters": {
                  "include_total_count": {
                    "default": false,
                    "docs": "Include total count in response",
                    "type": "optional<boolean>",
                  },
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "search": {
                    "docs": "Text search for the roles name or key",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "ListRolesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove_permissions_from_role": {
              "auth": true,
              "display-name": "Remove Permissions From Role",
              "docs": "Remove permissions from role.

If some of the permissions specified are already unassigned, will skip them.",
              "errors": [
                "root.RemovePermissionsFromRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "role_id": "role_id",
                  },
                  "request": {
                    "permissions": [
                      "document:share",
                    ],
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the editor role can read and write to documents",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "viewer",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "editor",
                      "name": "Editor",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "document:write",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.RemoveRolePermissions",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_role": {
              "auth": true,
              "display-name": "Update Role",
              "docs": "Partially updates a tenant role.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateRoleRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "role_id": "role_id",
                  },
                  "request": {
                    "description": "the editor role can read and write to documents",
                    "permissions": [
                      "document:write",
                    ],
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "key": "value",
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "the editor role can read and write to documents",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "extends": [
                        "viewer",
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "editor",
                      "name": "Editor",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "permissions": [
                        "document:write",
                      ],
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "role_id": {
                  "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "optional description string explaining what this role represents, or what permissions are granted to it.",
                      "type": "optional<string>",
                    },
                    "extends": {
                      "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                      "type": "optional<list<string>>",
                    },
                    "name": {
                      "docs": "The name of the role",
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "list of action keys that define what actions this resource role is permitted to do",
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RoleUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ListRolesResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "root.PaginatedResultRoleRead",
              },
              "list<root.RoleRead>",
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  ListRolesResponse:
    discriminated: false
    union:
      - type: root.PaginatedResultRoleRead
      - list<root.RoleRead>
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    list_roles:
      path: /v2/schema/{proj_id}/{env_id}/roles
      method: GET
      auth: true
      docs: Lists all tenant roles.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Roles
      request:
        name: ListRolesRequest
        query-parameters:
          search:
            type: optional<string>
            docs: Text search for the roles name or key
          include_total_count:
            type: optional<boolean>
            default: false
            docs: Include total count in response
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: ListRolesResponse
        status-code: 200
      errors:
        - root.ListRolesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              data:
                - name: Editor
                  description: the editor role can read and write to documents
                  permissions:
                    - document:write
                  attributes:
                    key: value
                  extends:
                    - viewer
                  key: editor
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
              total_count: 1
              page_count: 1
    create_role:
      path: /v2/schema/{proj_id}/{env_id}/roles
      method: POST
      auth: true
      docs: Creates a new tenant role.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Create Role
      request:
        name: RoleCreate
        body:
          properties:
            key:
              type: string
              docs: >-
                A URL-friendly name of the role (i.e: slug). You will be able to
                query later using this key instead of the id (UUID) of the role.
              validation:
                pattern: ^[A-Za-z0-9\-_]+$
            name:
              type: string
              docs: The name of the role
            description:
              type: optional<string>
              docs: >-
                optional description string explaining what this role
                represents, or what permissions are granted to it.
            permissions:
              type: optional<list<string>>
              docs: >-
                list of action keys that define what actions this resource role
                is permitted to do
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                optional dictionary of key-value pairs that can be used to store
                arbitrary metadata about this role. This metadata can be used to
                filter role using query parameters with attr_ prefix, currently
                supports only 'equals' operator
            extends:
              type: optional<list<string>>
              docs: >-
                list of role keys that define what roles this role extends. In
                other words: this role will automatically inherit all the
                permissions of the given roles in this list.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.RoleRead
        status-code: 200
      errors:
        - root.CreateRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            key: editor
            name: Editor
            description: the editor role can read and write to documents
            permissions:
              - document:write
            extends:
              - viewer
          response:
            body:
              name: Editor
              description: the editor role can read and write to documents
              permissions:
                - document:write
              attributes:
                key: value
              extends:
                - viewer
              key: editor
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    get_role:
      path: /v2/schema/{proj_id}/{env_id}/roles/{role_id}
      method: GET
      auth: true
      docs: Gets a single tenant role, if such role exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Get Role
      response:
        docs: Successful Response
        type: root.RoleRead
        status-code: 200
      errors:
        - root.GetRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            role_id: role_id
          response:
            body:
              name: Editor
              description: the editor role can read and write to documents
              permissions:
                - document:write
              attributes:
                key: value
              extends:
                - viewer
              key: editor
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    delete_role:
      path: /v2/schema/{proj_id}/{env_id}/roles/{role_id}
      method: DELETE
      auth: true
      docs: |-
        Deletes a tenant role and all its related data.
        This includes any permissions granted to said role.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Delete Role
      errors:
        - root.DeleteRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            role_id: role_id
    update_role:
      path: /v2/schema/{proj_id}/{env_id}/roles/{role_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates a tenant role.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Update Role
      request:
        name: RoleUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: The name of the role
            description:
              type: optional<string>
              docs: >-
                optional description string explaining what this role
                represents, or what permissions are granted to it.
            permissions:
              type: optional<list<string>>
              docs: >-
                list of action keys that define what actions this resource role
                is permitted to do
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                optional dictionary of key-value pairs that can be used to store
                arbitrary metadata about this role. This metadata can be used to
                filter role using query parameters with attr_ prefix, currently
                supports only 'equals' operator
            extends:
              type: optional<list<string>>
              docs: >-
                list of role keys that define what roles this role extends. In
                other words: this role will automatically inherit all the
                permissions of the given roles in this list.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.RoleRead
        status-code: 200
      errors:
        - root.UpdateRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            role_id: role_id
          request:
            description: the editor role can read and write to documents
            permissions:
              - document:write
          response:
            body:
              name: Editor
              description: the editor role can read and write to documents
              permissions:
                - document:write
              attributes:
                key: value
              extends:
                - viewer
              key: editor
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    assign_permissions_to_role:
      path: /v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions
      method: POST
      auth: true
      docs: >-
        Assign permissions to role.


        If some of the permissions specified are already assigned, will skip
        them.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Assign Permissions To Role
      request:
        body:
          type: root.AddRolePermissions
        content-type: application/json
      response:
        docs: Successful Response
        type: root.RoleRead
        status-code: 200
      errors:
        - root.AssignPermissionsToRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            role_id: role_id
          request:
            permissions:
              - document:write
          response:
            body:
              name: Editor
              description: the editor role can read and write to documents
              permissions:
                - document:write
              attributes:
                key: value
              extends:
                - viewer
              key: editor
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    remove_permissions_from_role:
      path: /v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions
      method: DELETE
      auth: true
      docs: >-
        Remove permissions from role.


        If some of the permissions specified are already unassigned, will skip
        them.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Remove Permissions From Role
      request:
        body:
          type: root.RemoveRolePermissions
        content-type: application/json
      response:
        docs: Successful Response
        type: root.RoleRead
        status-code: 200
      errors:
        - root.RemovePermissionsFromRoleRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            role_id: role_id
          request:
            permissions:
              - document:share
          response:
            body:
              name: Editor
              description: the editor role can read and write to documents
              permissions:
                - document:write
              attributes:
                key: value
              extends:
                - viewer
              key: editor
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
    get_role_ancestors:
      path: /v2/schema/{proj_id}/{env_id}/roles/{role_id}/ancestors
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Get Role Ancestors
      response:
        docs: Successful Response
        type: root.RoleList
        status-code: 200
      errors:
        - root.GetRoleAncestorsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            role_id: role_id
          response:
            body:
              roles:
                - name: Editor
                  description: the editor role can read and write to documents
                  permissions:
                    - document:write
                  attributes:
                    key: value
                  extends:
                    - viewer
                  key: editor
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
    get_role_descendants:
      path: /v2/schema/{proj_id}/{env_id}/roles/{role_id}/descendants
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        role_id:
          type: string
          docs: >-
            Either the unique id of the role, or the URL-friendly key of the
            role (i.e: the "slug").
      display-name: Get Role Descendants
      response:
        docs: Successful Response
        type: root.RoleList
        status-code: 200
      errors:
        - root.GetRoleDescendantsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            role_id: role_id
          response:
            body:
              roles:
                - name: Editor
                  description: the editor role can read and write to documents
                  permissions:
                    - document:write
                  attributes:
                    key: value
                  extends:
                    - viewer
                  key: editor
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
  source:
    openapi: ../openapi.json
  display-name: Roles
docs: >

  Roles allow you to associate permissions indirectly via a job function.


  The Roles API allows you to manipulate roles: assign or unassign permissions
  to a role,

  define hierarchy between roles or define relationships between resource roles.


  Roles manipulated by this API are **tenant roles**, meaning when they are
  assigned, they are

  assigned on a tenant.
",
    },
    "tenants.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
A tenant is a group of users that share a common organizational identity.

Each tenant is a silo that can enforce strict boundaries between your customers.
You can associate your protected objects with a specific tenant, and only users
belonging to that tenant may access these resources (pending on adequate permissions).

Usually, each tenant will represent one of the end-customer companies in your product
(i.e. the company that you sell to). Through the tenant feature we enable you to have
multi-tenancy straight out of the box.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Tenants",
          "endpoints": {
            "create_tenant": {
              "auth": true,
              "display-name": "Create Tenant",
              "docs": "Creates a new tenant inside the Permit.io system.

If the tenant is already created: will return 200 instead of 201,
and will return the existing tenant object in the response body.",
              "errors": [
                "root.CreateTenantRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "attributes": {
                      "allowed_locations": [
                        "US",
                        "CA",
                      ],
                    },
                    "key": "stripeinc",
                    "name": "Stripe Inc",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "allowed_locations": [
                          "US",
                          "CA",
                        ],
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "description",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "stripeinc",
                      "last_action_at": "2019-08-24T14:15:22Z",
                      "name": "Stripe Inc",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/tenants",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.TenantCreate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TenantRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_tenant": {
              "auth": true,
              "display-name": "Delete Tenant",
              "docs": "Deletes the tenant and all its related data.",
              "errors": [
                "root.DeleteTenantRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "tenant_id": "tenant_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "tenant_id": {
                  "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_tenant_user": {
              "auth": true,
              "display-name": "Delete Tenant User",
              "docs": "Deletes a user under a tenant.",
              "errors": [
                "root.DeleteTenantUserRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "tenant_id": "tenant_id",
                    "user_id": "user_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users/{user_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "tenant_id": {
                  "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                  "type": "string",
                },
                "user_id": {
                  "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_tenant": {
              "auth": true,
              "display-name": "Get Tenant",
              "docs": "Gets a tenant, if such tenant exists. Otherwise returns 404.",
              "errors": [
                "root.GetTenantRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "tenant_id": "tenant_id",
                  },
                  "response": {
                    "body": {
                      "attributes": {
                        "allowed_locations": [
                          "US",
                          "CA",
                        ],
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "description",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "stripeinc",
                      "last_action_at": "2019-08-24T14:15:22Z",
                      "name": "Stripe Inc",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "tenant_id": {
                  "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TenantRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_tenant_users": {
              "auth": true,
              "display-name": "List Tenant Users",
              "docs": undefined,
              "errors": [
                "root.ListTenantUsersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "tenant_id": "tenant_id",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "associated_tenants": [
                            {
                              "roles": [
                                "admin",
                              ],
                              "status": "active",
                              "tenant": "stripe-inc",
                            },
                            {
                              "roles": [
                                "viewer",
                              ],
                              "status": "pending",
                              "tenant": "othercompany.com",
                            },
                          ],
                          "attributes": {
                            "age": 30,
                            "department": "marketing",
                            "subscription": {
                              "expired": false,
                              "tier": "pro",
                            },
                          },
                          "email": "jane@coolcompany.com",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "first_name": "Jane",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "user|892179821739812389327",
                          "last_name": "Doe",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "roles": [
                            {
                              "role": "admin",
                              "tenant": "stripe-inc",
                            },
                            {
                              "role": "viewer",
                              "tenant": "othercompany.com",
                            },
                          ],
                        },
                      ],
                      "page_count": 1,
                      "total_count": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "tenant_id": {
                  "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListTenantUsersRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "role": {
                    "docs": "Match users with a specific role",
                    "type": "optional<string>",
                  },
                  "search": {
                    "docs": "Text search for the email field",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultUserRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_tenants": {
              "auth": true,
              "display-name": "List Tenants",
              "docs": "Lists all the tenants defined within an environment.",
              "errors": [
                "root.ListTenantsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "attributes": {
                            "allowed_locations": [
                              "US",
                              "CA",
                            ],
                          },
                          "created_at": "2019-08-24T14:15:22Z",
                          "description": "description",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "stripeinc",
                          "last_action_at": "2019-08-24T14:15:22Z",
                          "name": "Stripe Inc",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "updated_at": "2019-08-24T14:15:22Z",
                        },
                      ],
                      "page_count": 1,
                      "total_count": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/tenants",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListTenantsRequest",
                "query-parameters": {
                  "include_total_count": {
                    "default": false,
                    "docs": "Include total count in response",
                    "type": "optional<boolean>",
                  },
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "search": {
                    "docs": "Text search for the tenant name or key",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "ListTenantsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_tenant": {
              "auth": true,
              "display-name": "Update Tenant",
              "docs": "Partially updates the tenant definition.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateTenantRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "tenant_id": "tenant_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "attributes": {
                        "allowed_locations": [
                          "US",
                          "CA",
                        ],
                      },
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "description",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "stripeinc",
                      "last_action_at": "2019-08-24T14:15:22Z",
                      "name": "Stripe Inc",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "tenant_id": {
                  "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
                      "type": "optional<map<string, unknown>>",
                    },
                    "description": {
                      "docs": "an optional longer description of the tenant",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "A descriptive name for the tenant",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TenantUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TenantRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ListTenantsResponse": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "root.PaginatedResultTenantRead",
              },
              "list<root.TenantRead>",
            ],
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_tenant_users:
      path: /v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        tenant_id:
          type: string
          docs: >-
            Either the unique id of the tenant, or the URL-friendly key of the
            tenant (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Tenant Users
      request:
        name: ListTenantUsersRequest
        query-parameters:
          search:
            type: optional<string>
            docs: Text search for the email field
          role:
            type: optional<string>
            docs: Match users with a specific role
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: root.PaginatedResultUserRead
        status-code: 200
      errors:
        - root.ListTenantUsersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            tenant_id: tenant_id
            env_id: env_id
          response:
            body:
              data:
                - key: user|892179821739812389327
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  associated_tenants:
                    - tenant: stripe-inc
                      roles:
                        - admin
                      status: active
                    - tenant: othercompany.com
                      roles:
                        - viewer
                      status: pending
                  roles:
                    - role: admin
                      tenant: stripe-inc
                    - role: viewer
                      tenant: othercompany.com
                  email: jane@coolcompany.com
                  first_name: Jane
                  last_name: Doe
                  attributes:
                    department: marketing
                    age: 30
                    subscription:
                      tier: pro
                      expired: false
              total_count: 1
              page_count: 1
    list_tenants:
      path: /v2/facts/{proj_id}/{env_id}/tenants
      method: GET
      auth: true
      docs: Lists all the tenants defined within an environment.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Tenants
      request:
        name: ListTenantsRequest
        query-parameters:
          search:
            type: optional<string>
            docs: Text search for the tenant name or key
          include_total_count:
            type: optional<boolean>
            default: false
            docs: Include total count in response
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: ListTenantsResponse
        status-code: 200
      errors:
        - root.ListTenantsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              data:
                - key: stripeinc
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  created_at: '2019-08-24T14:15:22Z'
                  updated_at: '2019-08-24T14:15:22Z'
                  last_action_at: '2019-08-24T14:15:22Z'
                  name: Stripe Inc
                  description: description
                  attributes:
                    allowed_locations:
                      - US
                      - CA
              total_count: 1
              page_count: 1
    create_tenant:
      path: /v2/facts/{proj_id}/{env_id}/tenants
      method: POST
      auth: true
      docs: |-
        Creates a new tenant inside the Permit.io system.

        If the tenant is already created: will return 200 instead of 201,
        and will return the existing tenant object in the response body.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Create Tenant
      request:
        body:
          type: root.TenantCreate
        content-type: application/json
      response:
        docs: Successful Response
        type: root.TenantRead
        status-code: 200
      errors:
        - root.CreateTenantRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            key: stripeinc
            name: Stripe Inc
            attributes:
              allowed_locations:
                - US
                - CA
          response:
            body:
              key: stripeinc
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              last_action_at: '2019-08-24T14:15:22Z'
              name: Stripe Inc
              description: description
              attributes:
                allowed_locations:
                  - US
                  - CA
    get_tenant:
      path: /v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}
      method: GET
      auth: true
      docs: Gets a tenant, if such tenant exists. Otherwise returns 404.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        tenant_id:
          type: string
          docs: >-
            Either the unique id of the tenant, or the URL-friendly key of the
            tenant (i.e: the "slug").
      display-name: Get Tenant
      response:
        docs: Successful Response
        type: root.TenantRead
        status-code: 200
      errors:
        - root.GetTenantRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            tenant_id: tenant_id
          response:
            body:
              key: stripeinc
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              last_action_at: '2019-08-24T14:15:22Z'
              name: Stripe Inc
              description: description
              attributes:
                allowed_locations:
                  - US
                  - CA
    delete_tenant:
      path: /v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}
      method: DELETE
      auth: true
      docs: Deletes the tenant and all its related data.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        tenant_id:
          type: string
          docs: >-
            Either the unique id of the tenant, or the URL-friendly key of the
            tenant (i.e: the "slug").
      display-name: Delete Tenant
      errors:
        - root.DeleteTenantRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            tenant_id: tenant_id
    update_tenant:
      path: /v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the tenant definition.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        tenant_id:
          type: string
          docs: >-
            Either the unique id of the tenant, or the URL-friendly key of the
            tenant (i.e: the "slug").
      display-name: Update Tenant
      request:
        name: TenantUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: A descriptive name for the tenant
            description:
              type: optional<string>
              docs: an optional longer description of the tenant
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                Arbitraty tenant attributes that will be used to enforce
                attribute-based access control policies.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.TenantRead
        status-code: 200
      errors:
        - root.UpdateTenantRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            tenant_id: tenant_id
          request: {}
          response:
            body:
              key: stripeinc
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              last_action_at: '2019-08-24T14:15:22Z'
              name: Stripe Inc
              description: description
              attributes:
                allowed_locations:
                  - US
                  - CA
    delete_tenant_user:
      path: /v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users/{user_id}
      method: DELETE
      auth: true
      docs: Deletes a user under a tenant.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        tenant_id:
          type: string
          docs: >-
            Either the unique id of the tenant, or the URL-friendly key of the
            tenant (i.e: the "slug").
        user_id:
          type: string
          docs: >-
            Either the unique id of the user, or the URL-friendly key of the
            user (i.e: the "slug").
      display-name: Delete Tenant User
      errors:
        - root.DeleteTenantUserRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            tenant_id: tenant_id
            user_id: user_id
  source:
    openapi: ../openapi.json
  display-name: Tenants
docs: >

  A tenant is a group of users that share a common organizational identity.


  Each tenant is a silo that can enforce strict boundaries between your
  customers.

  You can associate your protected objects with a specific tenant, and only
  users

  belonging to that tenant may access these resources (pending on adequate
  permissions).


  Usually, each tenant will represent one of the end-customer companies in your
  product

  (i.e. the company that you sell to). Through the tenant feature we enable you
  to have

  multi-tenancy straight out of the box.
types:
  ListTenantsResponse:
    discriminated: false
    union:
      - type: root.PaginatedResultTenantRead
      - list<root.TenantRead>
    source:
      openapi: ../openapi.json
",
    },
    "userAttributes.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
User attributes allow you to specify an arbitrary schema attributes that are part
of the definition of the User resource.

Attributes are used to enforce attribute-based access control policies.

*NOTE: A User is a Resource by itself, so basically a user's attribute is an attribute that assigned to the resource called "user".*

For example, if we are building the github's permissions system, we might want to know
whether the user is an owner of the organization or not. In such case we will
define a string `owner` attribute that we can now use in our policies.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "User Attributes",
          "endpoints": {
            "create_user_attribute": {
              "auth": true,
              "display-name": "Create User Attribute",
              "docs": "Creates a new attribute for the User resource.",
              "errors": [
                "root.CreateUserAttributeRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "description": "whether or not the github repository is private",
                    "key": "private",
                    "type": "bool",
                  },
                  "response": {
                    "body": {
                      "built_in": false,
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "whether or not the github repository is private",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "private",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "resource_key": "repository",
                      "type": "bool",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/users/attributes",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.ResourceAttributeCreate",
                },
                "content-type": "application/json",
                "name": "CreateUserAttributeRequest",
                "query-parameters": {
                  "resource_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceAttributeRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_user_attribute": {
              "auth": true,
              "display-name": "Delete User Attribute",
              "docs": "Deletes the attribute and all its related data.

Note: If the attribute is used by policies, removing it will cause the
attribute to evaluate as `undefined`.",
              "errors": [
                "root.DeleteUserAttributeRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "attribute_id": "attribute_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}",
              "path-parameters": {
                "attribute_id": {
                  "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "DeleteUserAttributeRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "resource_id": "optional<string>",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_user_attribute": {
              "auth": true,
              "display-name": "Get User Attribute",
              "docs": "Gets a single attribute defined on the User resource, if such attribute exists.",
              "errors": [
                "root.GetUserAttributeRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "attribute_id": "attribute_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "built_in": false,
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "whether or not the github repository is private",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "private",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "resource_key": "repository",
                      "type": "bool",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}",
              "path-parameters": {
                "attribute_id": {
                  "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetUserAttributeRequest",
                "query-parameters": {
                  "resource_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceAttributeRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_user_attributes": {
              "auth": true,
              "display-name": "List User Attributes",
              "docs": "Lists all the attributes defined on the User resource.",
              "errors": [
                "root.ListUserAttributesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": [
                      {
                        "built_in": false,
                        "created_at": "2019-08-24T14:15:22Z",
                        "description": "whether or not the github repository is private",
                        "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "key": "private",
                        "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                        "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                        "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                        "resource_key": "repository",
                        "type": "bool",
                        "updated_at": "2019-08-24T14:15:22Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/users/attributes",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListUserAttributesRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "resource_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ResourceAttributeRead>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_user_attribute": {
              "auth": true,
              "display-name": "Update User Attribute",
              "docs": "Partially updates the attribute defined on the User resource.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateUserAttributeRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "attribute_id": "attribute_id",
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "description": "whether or not the github repository is private",
                  },
                  "response": {
                    "body": {
                      "built_in": false,
                      "created_at": "2019-08-24T14:15:22Z",
                      "description": "whether or not the github repository is private",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "private",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                      "resource_key": "repository",
                      "type": "bool",
                      "updated_at": "2019-08-24T14:15:22Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}",
              "path-parameters": {
                "attribute_id": {
                  "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                  "type": "string",
                },
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.ResourceAttributeUpdate",
                },
                "content-type": "application/json",
                "name": "UpdateUserAttributeRequest",
                "query-parameters": {
                  "resource_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ResourceAttributeRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_user_attributes:
      path: /v2/schema/{proj_id}/{env_id}/users/attributes
      method: GET
      auth: true
      docs: Lists all the attributes defined on the User resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List User Attributes
      request:
        name: ListUserAttributesRequest
        query-parameters:
          resource_id: optional<string>
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: list<root.ResourceAttributeRead>
        status-code: 200
      errors:
        - root.ListUserAttributesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              - type: bool
                description: whether or not the github repository is private
                key: private
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
                resource_key: repository
                organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                created_at: '2019-08-24T14:15:22Z'
                updated_at: '2019-08-24T14:15:22Z'
                built_in: false
    create_user_attribute:
      path: /v2/schema/{proj_id}/{env_id}/users/attributes
      method: POST
      auth: true
      docs: Creates a new attribute for the User resource.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Create User Attribute
      request:
        body:
          type: root.ResourceAttributeCreate
        query-parameters:
          resource_id: optional<string>
        name: CreateUserAttributeRequest
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceAttributeRead
        status-code: 200
      errors:
        - root.CreateUserAttributeRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            key: private
            type: bool
            description: whether or not the github repository is private
          response:
            body:
              type: bool
              description: whether or not the github repository is private
              key: private
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              resource_key: repository
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              built_in: false
    get_user_attribute:
      path: /v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}
      method: GET
      auth: true
      docs: >-
        Gets a single attribute defined on the User resource, if such attribute
        exists.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        attribute_id:
          type: string
          docs: >-
            Either the unique id of the attribute, or the URL-friendly key of
            the attribute (i.e: the "slug").
      display-name: Get User Attribute
      request:
        name: GetUserAttributeRequest
        query-parameters:
          resource_id: optional<string>
      response:
        docs: Successful Response
        type: root.ResourceAttributeRead
        status-code: 200
      errors:
        - root.GetUserAttributeRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            attribute_id: attribute_id
          response:
            body:
              type: bool
              description: whether or not the github repository is private
              key: private
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              resource_key: repository
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              built_in: false
    delete_user_attribute:
      path: /v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}
      method: DELETE
      auth: true
      docs: |-
        Deletes the attribute and all its related data.

        Note: If the attribute is used by policies, removing it will cause the
        attribute to evaluate as `undefined`.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        attribute_id:
          type: string
          docs: >-
            Either the unique id of the attribute, or the URL-friendly key of
            the attribute (i.e: the "slug").
      display-name: Delete User Attribute
      request:
        name: DeleteUserAttributeRequest
        query-parameters:
          resource_id: optional<string>
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      errors:
        - root.DeleteUserAttributeRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            attribute_id: attribute_id
    update_user_attribute:
      path: /v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the attribute defined on the User resource.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        attribute_id:
          type: string
          docs: >-
            Either the unique id of the attribute, or the URL-friendly key of
            the attribute (i.e: the "slug").
      display-name: Update User Attribute
      request:
        body:
          type: root.ResourceAttributeUpdate
        query-parameters:
          resource_id: optional<string>
        name: UpdateUserAttributeRequest
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ResourceAttributeRead
        status-code: 200
      errors:
        - root.UpdateUserAttributeRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            attribute_id: attribute_id
          request:
            description: whether or not the github repository is private
          response:
            body:
              type: bool
              description: whether or not the github repository is private
              key: private
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              resource_id: 40ef0e48-a11f-4963-a229-e396c9f7e7dd
              resource_key: repository
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              built_in: false
  source:
    openapi: ../openapi.json
  display-name: User Attributes
docs: >

  User attributes allow you to specify an arbitrary schema attributes that are
  part

  of the definition of the User resource.


  Attributes are used to enforce attribute-based access control policies.


  *NOTE: A User is a Resource by itself, so basically a user's attribute is an
  attribute that assigned to the resource called "user".*


  For example, if we are building the github's permissions system, we might want
  to know

  whether the user is an owner of the organization or not. In such case we will

  define a string `owner` attribute that we can now use in our policies.
",
    },
    "users.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
Users represent human end-users of your applications that you'd like to enforce permissions on.

You must create a user object in Permit.io prior to trying to enforce permissions for that user.
A user is identified by its key, and you can only create one user with the same key inside a Permit environment.
You can place users within tenants via role assignments in order to enforce multi-tenancy in your app.

You may create users via the API (shown below), with one of the SDKs, or via the Permit cloud console.
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Users",
          "endpoints": {
            "assign_role_to_user": {
              "auth": true,
              "display-name": "Assign Role To User",
              "docs": "Assigns a role to the user within the tenant.

The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.",
              "errors": [
                "root.AssignRoleToUserRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "user_id": "user_id",
                  },
                  "request": {
                    "role": "admin",
                    "tenant": "stripe-inc",
                  },
                  "response": {
                    "body": {
                      "created_at": "2019-08-24T14:15:22Z",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "role": "admin",
                      "role_id": "405d8375-3514-403b-8c43-83ae74cfe022",
                      "tenant": "stripe-inc",
                      "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e733",
                      "user": "jane@coolcompany.com",
                      "user_id": "7c60d51f-b44e-4682-87d6-449835ea4d11",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "user_id": {
                  "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "role": {
                      "docs": "the role that will be assigned (accepts either the role id or the role key)",
                      "type": "string",
                    },
                    "tenant": {
                      "docs": "the tenant the role is associated with (accepts either the tenant id or the tenant key)",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserRoleCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.RoleAssignmentRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create_user": {
              "auth": true,
              "display-name": "Create User",
              "docs": "Creates a new user inside the Permit.io system, from that point forward
you may run permission checks on that user.

If the user is already created: will return 200 instead of 201,
and will return the existing user object in the response body.",
              "errors": [
                "root.CreateUserRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "request": {
                    "attributes": {
                      "age": 30,
                      "department": "marketing",
                      "subscription": {
                        "expired": false,
                        "tier": "pro",
                      },
                    },
                    "email": "jane@coolcompany.com",
                    "first_name": "Jane",
                    "key": "user|892179821739812389327",
                    "last_name": "Doe",
                  },
                  "response": {
                    "body": {
                      "associated_tenants": [
                        {
                          "roles": [
                            "admin",
                          ],
                          "status": "active",
                          "tenant": "stripe-inc",
                        },
                        {
                          "roles": [
                            "viewer",
                          ],
                          "status": "pending",
                          "tenant": "othercompany.com",
                        },
                      ],
                      "attributes": {
                        "age": 30,
                        "department": "marketing",
                        "subscription": {
                          "expired": false,
                          "tier": "pro",
                        },
                      },
                      "email": "jane@coolcompany.com",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "first_name": "Jane",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "user|892179821739812389327",
                      "last_name": "Doe",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "roles": [
                        {
                          "role": "admin",
                          "tenant": "stripe-inc",
                        },
                        {
                          "role": "viewer",
                          "tenant": "othercompany.com",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/users",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.UserCreate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.UserRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete_user": {
              "auth": true,
              "display-name": "Delete User",
              "docs": "Deletes the user and all its related data.",
              "errors": [
                "root.DeleteUserRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "user_id": "user_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "user_id": {
                  "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_user": {
              "auth": true,
              "display-name": "Get User",
              "docs": "Gets a user, if such user exists. Otherwise returns 404.",
              "errors": [
                "root.GetUserRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "user_id": "user_id",
                  },
                  "response": {
                    "body": {
                      "associated_tenants": [
                        {
                          "roles": [
                            "admin",
                          ],
                          "status": "active",
                          "tenant": "stripe-inc",
                        },
                        {
                          "roles": [
                            "viewer",
                          ],
                          "status": "pending",
                          "tenant": "othercompany.com",
                        },
                      ],
                      "attributes": {
                        "age": 30,
                        "department": "marketing",
                        "subscription": {
                          "expired": false,
                          "tier": "pro",
                        },
                      },
                      "email": "jane@coolcompany.com",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "first_name": "Jane",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "user|892179821739812389327",
                      "last_name": "Doe",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "roles": [
                        {
                          "role": "admin",
                          "tenant": "stripe-inc",
                        },
                        {
                          "role": "viewer",
                          "tenant": "othercompany.com",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "user_id": {
                  "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.UserRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_users": {
              "auth": true,
              "display-name": "List Users",
              "docs": "Lists all the users defined within an environment.",
              "errors": [
                "root.ListUsersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "associated_tenants": [
                            {
                              "roles": [
                                "admin",
                              ],
                              "status": "active",
                              "tenant": "stripe-inc",
                            },
                            {
                              "roles": [
                                "viewer",
                              ],
                              "status": "pending",
                              "tenant": "othercompany.com",
                            },
                          ],
                          "attributes": {
                            "age": 30,
                            "department": "marketing",
                            "subscription": {
                              "expired": false,
                              "tier": "pro",
                            },
                          },
                          "email": "jane@coolcompany.com",
                          "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                          "first_name": "Jane",
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "key": "user|892179821739812389327",
                          "last_name": "Doe",
                          "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                          "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                          "roles": [
                            {
                              "role": "admin",
                              "tenant": "stripe-inc",
                            },
                            {
                              "role": "viewer",
                              "tenant": "othercompany.com",
                            },
                          ],
                        },
                      ],
                      "page_count": 1,
                      "total_count": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/users",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListUsersRequest",
                "query-parameters": {
                  "page": {
                    "default": 1,
                    "docs": "Page number of the results to fetch, starting at 1.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": undefined,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "per_page": {
                    "default": 30,
                    "docs": "The number of results per page (max 100).",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "role": {
                    "docs": "Match users with a specific role",
                    "type": "optional<string>",
                  },
                  "search": {
                    "docs": "Text search for the email field",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultUserRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "replace_user": {
              "auth": true,
              "display-name": "Replace User",
              "docs": undefined,
              "errors": [
                "root.ReplaceUserRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "user_id": "user_id",
                  },
                  "request": {
                    "attributes": {
                      "age": 30,
                      "department": "marketing",
                      "subscription": {
                        "expired": false,
                        "tier": "pro",
                      },
                    },
                    "email": "jane@coolcompany.com",
                    "first_name": "Jane",
                    "key": "user|892179821739812389327",
                    "last_name": "Doe",
                  },
                  "response": {
                    "body": {
                      "associated_tenants": [
                        {
                          "roles": [
                            "admin",
                          ],
                          "status": "active",
                          "tenant": "stripe-inc",
                        },
                        {
                          "roles": [
                            "viewer",
                          ],
                          "status": "pending",
                          "tenant": "othercompany.com",
                        },
                      ],
                      "attributes": {
                        "age": 30,
                        "department": "marketing",
                        "subscription": {
                          "expired": false,
                          "tier": "pro",
                        },
                      },
                      "email": "jane@coolcompany.com",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "first_name": "Jane",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "user|892179821739812389327",
                      "last_name": "Doe",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "roles": [
                        {
                          "role": "admin",
                          "tenant": "stripe-inc",
                        },
                        {
                          "role": "viewer",
                          "tenant": "othercompany.com",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "user_id": {
                  "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "type": "root.UserCreate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "An existing user was replaced",
                "status-code": 200,
                "type": "root.UserRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unassign_role_from_user": {
              "auth": true,
              "display-name": "Unassign Role From User",
              "docs": "Unassigns the role from the user within the tenant.

The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.

If the role is not actually assigned, will return 404.",
              "errors": [
                "root.UnassignRoleFromUserRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "user_id": "user_id",
                  },
                  "request": {
                    "role": "editor",
                    "tenant": "google-inc",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "user_id": {
                  "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "role": {
                      "docs": "the role that will be unassigned (accepts either the role id or the role key)",
                      "type": "string",
                    },
                    "tenant": {
                      "docs": "the tenant the role is associated with (accepts either the tenant id or the tenant key)",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserRoleRemove",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update_user": {
              "auth": true,
              "display-name": "Update User",
              "docs": "Partially updates the user definition.
Fields that will be provided will be completely overwritten.",
              "errors": [
                "root.UpdateUserRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "env_id": "env_id",
                    "proj_id": "proj_id",
                    "user_id": "user_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "associated_tenants": [
                        {
                          "roles": [
                            "admin",
                          ],
                          "status": "active",
                          "tenant": "stripe-inc",
                        },
                        {
                          "roles": [
                            "viewer",
                          ],
                          "status": "pending",
                          "tenant": "othercompany.com",
                        },
                      ],
                      "attributes": {
                        "age": 30,
                        "department": "marketing",
                        "subscription": {
                          "expired": false,
                          "tier": "pro",
                        },
                      },
                      "email": "jane@coolcompany.com",
                      "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                      "first_name": "Jane",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "key": "user|892179821739812389327",
                      "last_name": "Doe",
                      "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                      "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                      "roles": [
                        {
                          "role": "admin",
                          "tenant": "stripe-inc",
                        },
                        {
                          "role": "viewer",
                          "tenant": "othercompany.com",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}",
              "path-parameters": {
                "env_id": {
                  "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                  "type": "string",
                },
                "proj_id": {
                  "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                  "type": "string",
                },
                "user_id": {
                  "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "attributes": {
                      "docs": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
                      "type": "optional<map<string, unknown>>",
                    },
                    "email": {
                      "docs": "The email of the user. If synced, will be unique inside the environment.",
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "first_name": {
                      "docs": "First name of the user.",
                      "type": "optional<string>",
                    },
                    "last_name": {
                      "docs": "Last name of the user.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.UserRead",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list_users:
      path: /v2/facts/{proj_id}/{env_id}/users
      method: GET
      auth: true
      docs: Lists all the users defined within an environment.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: List Users
      request:
        name: ListUsersRequest
        query-parameters:
          search:
            type: optional<string>
            docs: Text search for the email field
          role:
            type: optional<string>
            docs: Match users with a specific role
          page:
            type: optional<integer>
            default: 1
            docs: Page number of the results to fetch, starting at 1.
            validation:
              min: 1
          per_page:
            type: optional<integer>
            default: 30
            docs: The number of results per page (max 100).
            validation:
              min: 1
              max: 100
      response:
        docs: Successful Response
        type: root.PaginatedResultUserRead
        status-code: 200
      errors:
        - root.ListUsersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          response:
            body:
              data:
                - key: user|892179821739812389327
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
                  project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
                  environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
                  associated_tenants:
                    - tenant: stripe-inc
                      roles:
                        - admin
                      status: active
                    - tenant: othercompany.com
                      roles:
                        - viewer
                      status: pending
                  roles:
                    - role: admin
                      tenant: stripe-inc
                    - role: viewer
                      tenant: othercompany.com
                  email: jane@coolcompany.com
                  first_name: Jane
                  last_name: Doe
                  attributes:
                    department: marketing
                    age: 30
                    subscription:
                      tier: pro
                      expired: false
              total_count: 1
              page_count: 1
    create_user:
      path: /v2/facts/{proj_id}/{env_id}/users
      method: POST
      auth: true
      docs: |-
        Creates a new user inside the Permit.io system, from that point forward
        you may run permission checks on that user.

        If the user is already created: will return 200 instead of 201,
        and will return the existing user object in the response body.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
      display-name: Create User
      request:
        body:
          type: root.UserCreate
        content-type: application/json
      response:
        docs: Successful Response
        type: root.UserRead
        status-code: 200
      errors:
        - root.CreateUserRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
          request:
            key: user|892179821739812389327
            email: jane@coolcompany.com
            first_name: Jane
            last_name: Doe
            attributes:
              department: marketing
              age: 30
              subscription:
                tier: pro
                expired: false
          response:
            body:
              key: user|892179821739812389327
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              associated_tenants:
                - tenant: stripe-inc
                  roles:
                    - admin
                  status: active
                - tenant: othercompany.com
                  roles:
                    - viewer
                  status: pending
              roles:
                - role: admin
                  tenant: stripe-inc
                - role: viewer
                  tenant: othercompany.com
              email: jane@coolcompany.com
              first_name: Jane
              last_name: Doe
              attributes:
                department: marketing
                age: 30
                subscription:
                  tier: pro
                  expired: false
    get_user:
      path: /v2/facts/{proj_id}/{env_id}/users/{user_id}
      method: GET
      auth: true
      docs: Gets a user, if such user exists. Otherwise returns 404.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        user_id:
          type: string
          docs: >-
            Either the unique id of the user, or the URL-friendly key of the
            user (i.e: the "slug").
      display-name: Get User
      response:
        docs: Successful Response
        type: root.UserRead
        status-code: 200
      errors:
        - root.GetUserRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            user_id: user_id
          response:
            body:
              key: user|892179821739812389327
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              associated_tenants:
                - tenant: stripe-inc
                  roles:
                    - admin
                  status: active
                - tenant: othercompany.com
                  roles:
                    - viewer
                  status: pending
              roles:
                - role: admin
                  tenant: stripe-inc
                - role: viewer
                  tenant: othercompany.com
              email: jane@coolcompany.com
              first_name: Jane
              last_name: Doe
              attributes:
                department: marketing
                age: 30
                subscription:
                  tier: pro
                  expired: false
    replace_user:
      path: /v2/facts/{proj_id}/{env_id}/users/{user_id}
      method: PUT
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        user_id:
          type: string
          docs: >-
            Either the unique id of the user, or the URL-friendly key of the
            user (i.e: the "slug").
      display-name: Replace User
      request:
        body:
          type: root.UserCreate
        content-type: application/json
      response:
        docs: An existing user was replaced
        type: root.UserRead
        status-code: 200
      errors:
        - root.ReplaceUserRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            user_id: user_id
          request:
            key: user|892179821739812389327
            email: jane@coolcompany.com
            first_name: Jane
            last_name: Doe
            attributes:
              department: marketing
              age: 30
              subscription:
                tier: pro
                expired: false
          response:
            body:
              key: user|892179821739812389327
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              associated_tenants:
                - tenant: stripe-inc
                  roles:
                    - admin
                  status: active
                - tenant: othercompany.com
                  roles:
                    - viewer
                  status: pending
              roles:
                - role: admin
                  tenant: stripe-inc
                - role: viewer
                  tenant: othercompany.com
              email: jane@coolcompany.com
              first_name: Jane
              last_name: Doe
              attributes:
                department: marketing
                age: 30
                subscription:
                  tier: pro
                  expired: false
    delete_user:
      path: /v2/facts/{proj_id}/{env_id}/users/{user_id}
      method: DELETE
      auth: true
      docs: Deletes the user and all its related data.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        user_id:
          type: string
          docs: >-
            Either the unique id of the user, or the URL-friendly key of the
            user (i.e: the "slug").
      display-name: Delete User
      errors:
        - root.DeleteUserRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            user_id: user_id
    update_user:
      path: /v2/facts/{proj_id}/{env_id}/users/{user_id}
      method: PATCH
      auth: true
      docs: |-
        Partially updates the user definition.
        Fields that will be provided will be completely overwritten.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        user_id:
          type: string
          docs: >-
            Either the unique id of the user, or the URL-friendly key of the
            user (i.e: the "slug").
      display-name: Update User
      request:
        name: UserUpdate
        body:
          properties:
            email:
              type: optional<string>
              docs: >-
                The email of the user. If synced, will be unique inside the
                environment.
              validation:
                format: email
            first_name:
              type: optional<string>
              docs: First name of the user.
            last_name:
              type: optional<string>
              docs: Last name of the user.
            attributes:
              type: optional<map<string, unknown>>
              docs: >-
                Arbitrary user attributes that will be used to enforce
                attribute-based access control policies.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.UserRead
        status-code: 200
      errors:
        - root.UpdateUserRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            user_id: user_id
          request: {}
          response:
            body:
              key: user|892179821739812389327
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              associated_tenants:
                - tenant: stripe-inc
                  roles:
                    - admin
                  status: active
                - tenant: othercompany.com
                  roles:
                    - viewer
                  status: pending
              roles:
                - role: admin
                  tenant: stripe-inc
                - role: viewer
                  tenant: othercompany.com
              email: jane@coolcompany.com
              first_name: Jane
              last_name: Doe
              attributes:
                department: marketing
                age: 30
                subscription:
                  tier: pro
                  expired: false
    assign_role_to_user:
      path: /v2/facts/{proj_id}/{env_id}/users/{user_id}/roles
      method: POST
      auth: true
      docs: >-
        Assigns a role to the user within the tenant.


        The tenant defines the scope of the assignment. In other words, the role
        is effective only within the tenant.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        user_id:
          type: string
          docs: >-
            Either the unique id of the user, or the URL-friendly key of the
            user (i.e: the "slug").
      display-name: Assign Role To User
      request:
        name: UserRoleCreate
        body:
          properties:
            role:
              type: string
              docs: >-
                the role that will be assigned (accepts either the role id or
                the role key)
            tenant:
              type: string
              docs: >-
                the tenant the role is associated with (accepts either the
                tenant id or the tenant key)
        content-type: application/json
      response:
        docs: Successful Response
        type: root.RoleAssignmentRead
        status-code: 200
      errors:
        - root.AssignRoleToUserRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            user_id: user_id
          request:
            role: admin
            tenant: stripe-inc
          response:
            body:
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              user: jane@coolcompany.com
              role: admin
              tenant: stripe-inc
              user_id: 7c60d51f-b44e-4682-87d6-449835ea4d11
              role_id: 405d8375-3514-403b-8c43-83ae74cfe022
              tenant_id: 40ef0e48-a11f-4963-a229-e396c9f7e733
              organization_id: 7c60d51f-b44e-4682-87d6-449835ea4de6
              project_id: 405d8375-3514-403b-8c43-83ae74cfe0e9
              environment_id: 40ef0e48-a11f-4963-a229-e396c9f7e7c4
              created_at: '2019-08-24T14:15:22Z'
    unassign_role_from_user:
      path: /v2/facts/{proj_id}/{env_id}/users/{user_id}/roles
      method: DELETE
      auth: true
      docs: >-
        Unassigns the role from the user within the tenant.


        The tenant defines the scope of the assignment. In other words, the role
        is effective only within the tenant.


        If the role is not actually assigned, will return 404.
      source:
        openapi: ../openapi.json
      path-parameters:
        proj_id:
          type: string
          docs: >-
            Either the unique id of the project, or the URL-friendly key of the
            project (i.e: the "slug").
        env_id:
          type: string
          docs: >-
            Either the unique id of the environment, or the URL-friendly key of
            the environment (i.e: the "slug").
        user_id:
          type: string
          docs: >-
            Either the unique id of the user, or the URL-friendly key of the
            user (i.e: the "slug").
      display-name: Unassign Role From User
      request:
        name: UserRoleRemove
        body:
          properties:
            role:
              type: string
              docs: >-
                the role that will be unassigned (accepts either the role id or
                the role key)
            tenant:
              type: string
              docs: >-
                the tenant the role is associated with (accepts either the
                tenant id or the tenant key)
        content-type: application/json
      errors:
        - root.UnassignRoleFromUserRequestUnprocessableEntityError
      examples:
        - path-parameters:
            proj_id: proj_id
            env_id: env_id
            user_id: user_id
          request:
            role: editor
            tenant: google-inc
  source:
    openapi: ../openapi.json
  display-name: Users
docs: >

  Users represent human end-users of your applications that you'd like to
  enforce permissions on.


  You must create a user object in Permit.io prior to trying to enforce
  permissions for that user.

  A user is identified by its key, and you can only create one user with the
  same key inside a Permit environment.

  You can place users within tenants via role assignments in order to enforce
  multi-tenancy in your app.


  You may create users via the API (shown below), with one of the SDKs, or via
  the Permit cloud console.
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BearerAuthScheme",
      "auth-schemes": {
        "BearerAuthScheme": {
          "scheme": "bearer",
        },
      },
      "default-environment": "Default",
      "display-name": "Permit.io API",
      "environments": {
        "Default": "https://api.permit.io",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Permit.io API
environments:
  Default: https://api.permit.io
default-environment: Default
auth-schemes:
  BearerAuthScheme:
    scheme: bearer
auth: BearerAuthScheme
",
  },
}