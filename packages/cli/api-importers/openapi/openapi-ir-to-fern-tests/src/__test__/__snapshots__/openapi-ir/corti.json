{
  "title": "Corti API",
  "servers": [
    {
      "url": "https://api.beta-eu.corti.app/v2/"
    }
  ],
  "websocketServers": [
    {
      "name": "beta-eu",
      "url": "wss://api.beta-eu.corti.app"
    },
    {
      "name": "eu",
      "url": "wss://api.eu.corti.app"
    },
    {
      "name": "us",
      "url": "wss://api.us.corti.app"
    }
  ],
  "tags": {
    "tagsById": {
      "interactions": {
        "id": "interactions"
      },
      "facts": {
        "id": "facts"
      },
      "documents": {
        "id": "documents"
      },
      "codes": {
        "id": "codes"
      },
      "recordings": {
        "id": "recordings"
      },
      "transcripts": {
        "id": "transcripts"
      }
    },
    "orderedTagIds": [
      "interactions",
      "facts",
      "documents",
      "codes",
      "recordings",
      "transcripts"
    ]
  },
  "hasEndpointsMarkedInternal": false,
  "endpoints": [
    {
      "summary": "List All Interactions",
      "audiences": [],
      "tags": [
        "interactions"
      ],
      "pathParameters": [],
      "queryParameters": [
        {
          "description": "Field used to sort interactions. Allowed values: [startedAt, endedAt, updatedAt, lastUpdated]. Default is startedAt.",
          "name": "sort",
          "schema": {
            "generatedName": "GetInteractionsRequestSort",
            "description": "Field used to sort interactions. Allowed values: [startedAt, endedAt, updatedAt, lastUpdated]. Default is startedAt.",
            "value": {
              "description": "Field used to sort interactions. Allowed values: [startedAt, endedAt, updatedAt, lastUpdated]. Default is startedAt.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetInteractionsRequestSort",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "Sorting order. Allowed values: [asc, desc]. Default is desc.",
          "name": "direction",
          "schema": {
            "generatedName": "GetInteractionsRequestDirection",
            "description": "Sorting order. Allowed values: [asc, desc]. Default is desc.",
            "value": {
              "description": "Sorting order. Allowed values: [asc, desc]. Default is desc.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetInteractionsRequestDirection",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "Number of interactions to return per page. Must be greater than 0. Default is 10.",
          "name": "pageSize",
          "schema": {
            "generatedName": "GetInteractionsRequestPageSize",
            "description": "Number of interactions to return per page. Must be greater than 0. Default is 10.",
            "value": {
              "description": "Number of interactions to return per page. Must be greater than 0. Default is 10.",
              "schema": {
                "type": "int64"
              },
              "generatedName": "GetInteractionsRequestPageSize",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "Page number to retrieve. Starts at 1. For example, index=2 with pageSize=10 will return interactions 11–20. Must be greater than 0. Default is 1.",
          "name": "index",
          "schema": {
            "generatedName": "GetInteractionsRequestIndex",
            "description": "Page number to retrieve. Starts at 1. For example, index=2 with pageSize=10 will return interactions 11–20. Must be greater than 0. Default is 1.",
            "value": {
              "description": "Page number to retrieve. Starts at 1. For example, index=2 with pageSize=10 will return interactions 11–20. Must be greater than 0. Default is 1.",
              "schema": {
                "type": "int64"
              },
              "generatedName": "GetInteractionsRequestIndex",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The status of the encounter. To filter on multiple statuses, pass the same parameter again.",
          "name": "encounterStatus",
          "schema": {
            "generatedName": "GetInteractionsRequestEncounterStatus",
            "description": "The status of the encounter. To filter on multiple statuses, pass the same parameter again.",
            "value": {
              "description": "The status of the encounter. To filter on multiple statuses, pass the same parameter again.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetInteractionsRequestEncounterStatus",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "A unique identifier for the patient. Must be a valid UUID.",
          "name": "patient",
          "schema": {
            "generatedName": "GetInteractionsRequestPatient",
            "description": "A unique identifier for the patient. Must be a valid UUID.",
            "value": {
              "description": "A unique identifier for the patient. Must be a valid UUID.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetInteractionsRequestPatient",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsRequest",
      "response": {
        "description": " ",
        "schema": {
          "generatedName": "GetInteractionsResponse",
          "schema": "ResponseInteractions",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Lists all existing interactions. Results can be filtered by encounter status and patient identifier.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "sort",
              "value": {
                "value": {
                  "value": "sort",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "direction",
              "value": {
                "value": {
                  "value": "direction",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "pageSize",
              "value": {
                "value": {
                  "value": 1000000,
                  "type": "int64"
                },
                "type": "primitive"
              }
            },
            {
              "name": "index",
              "value": {
                "value": {
                  "value": 1000000,
                  "type": "int64"
                },
                "type": "primitive"
              }
            },
            {
              "name": "encounterStatus",
              "value": {
                "value": {
                  "value": "encounterStatus",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "patient",
              "value": {
                "value": {
                  "value": "patient",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "interactions": {
                  "value": [
                    {
                      "properties": {
                        "id": {
                          "value": {
                            "value": "id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "assignedUserId": {
                          "value": {
                            "value": "assignedUserId",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "encounter": {
                          "properties": {
                            "identifier": {
                              "value": {
                                "value": "identifier",
                                "type": "string"
                              },
                              "type": "primitive"
                            },
                            "status": {
                              "value": "planned",
                              "type": "enum"
                            },
                            "type": {
                              "value": "first_consultation",
                              "type": "enum"
                            },
                            "period": {
                              "properties": {
                                "startedAt": {
                                  "value": {
                                    "value": "2024-01-15T09:30:00Z",
                                    "type": "datetime"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "patient": {
                          "properties": {
                            "identifier": {
                              "value": {
                                "value": "identifier",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        },
                        "endedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "createdAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "updatedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "websocketUrl": {
                          "value": {
                            "value": "websocketUrl",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "lastUpdated": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Create Interaction",
      "audiences": [],
      "tags": [
        "interactions"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PostInteractionsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PostInteractionsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PostInteractionsRequest",
      "request": {
        "schema": {
          "generatedName": "PostInteractionsRequestBody",
          "schema": "RequestInteractionCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "Returns the newly created interaction with its assigned ID and WebSocket URL for real-time data streaming.",
        "schema": {
          "generatedName": "PostInteractionsResponse",
          "schema": "ResponseInteractionCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 201,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Creates a new interaction.",
      "authed": false,
      "security": [],
      "method": "POST",
      "path": "/interactions/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {
              "encounter": {
                "properties": {
                  "identifier": {
                    "value": {
                      "value": "identifier",
                      "type": "string"
                    },
                    "type": "primitive"
                  },
                  "status": {
                    "value": "planned",
                    "type": "enum"
                  },
                  "type": {
                    "value": "first_consultation",
                    "type": "enum"
                  },
                  "period": {
                    "properties": {
                      "startedAt": {
                        "value": {
                          "value": "2024-01-15T09:30:00Z",
                          "type": "datetime"
                        },
                        "type": "primitive"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "interactionId": {
                  "value": {
                    "value": "interactionId",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "websocketUrl": {
                  "value": {
                    "value": "websocketUrl",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Get Existing Interaction",
      "audiences": [],
      "tags": [
        "interactions"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction to retrieve. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction to retrieve. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdRequest",
      "response": {
        "description": "Returns the requested interaction with all associated details.",
        "schema": {
          "generatedName": "GetInteractionsIdResponse",
          "schema": "ResponseInteraction",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieves a previously recorded interaction by its unique identifier (interaction ID).",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "assignedUserId": {
                  "value": {
                    "value": "assignedUserId",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "encounter": {
                  "properties": {
                    "identifier": {
                      "value": {
                        "value": "identifier",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "status": {
                      "value": "planned",
                      "type": "enum"
                    },
                    "type": {
                      "value": "first_consultation",
                      "type": "enum"
                    },
                    "period": {
                      "properties": {
                        "startedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "endedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "title": {
                      "value": {
                        "value": "title",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  },
                  "type": "object"
                },
                "patient": {
                  "properties": {
                    "identifier": {
                      "value": {
                        "value": "identifier",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "name": {
                      "value": {
                        "value": "name",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "gender": {
                      "value": "male",
                      "type": "enum"
                    },
                    "birthDate": {
                      "value": {
                        "value": "2024-01-15T09:30:00Z",
                        "type": "datetime"
                      },
                      "type": "primitive"
                    },
                    "pronouns": {
                      "value": {
                        "value": "pronouns",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  },
                  "type": "object"
                },
                "endedAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "createdAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "updatedAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "websocketUrl": {
                  "value": {
                    "value": "websocketUrl",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "lastUpdated": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Delete Interaction",
      "audiences": [],
      "tags": [
        "interactions"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction to delete. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction to delete. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "DeleteInteractionsIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "DeleteInteractionsIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "DeleteInteractionsIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "DeleteInteractionsIdRequest",
      "response": {
        "description": "The interaction was successfully deleted. No response body is returned.",
        "schema": {
          "generatedName": "DeleteInteractionsIdResponse",
          "schema": "NoContent",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 204,
        "type": "json"
      },
      "errors": {
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Deletes an existing interaction.",
      "authed": false,
      "security": [],
      "method": "DELETE",
      "path": "/interactions/{id}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "value": [
                {
                  "key": {
                    "value": "key",
                    "type": "string"
                  },
                  "value": {
                    "value": {
                      "value": {
                        "value": "value",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "type": "unknown"
                  }
                }
              ],
              "type": "map"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Update Interaction",
      "audiences": [],
      "tags": [
        "interactions"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction to update. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction to update. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PatchInteractionsIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PatchInteractionsIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PatchInteractionsIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PatchInteractionsIdRequest",
      "request": {
        "schema": {
          "generatedName": "PatchInteractionsIdRequestBody",
          "schema": "RequestInteractionUpdate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "A request body containing the fields to update within the interaction.",
        "schema": {
          "generatedName": "PatchInteractionsIdResponse",
          "schema": "ResponseInteraction",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Modifies an existing interaction by updating specific fields without overwriting the entire record.",
      "authed": false,
      "security": [],
      "method": "PATCH",
      "path": "/interactions/{id}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {},
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "assignedUserId": {
                  "value": {
                    "value": "assignedUserId",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "encounter": {
                  "properties": {
                    "identifier": {
                      "value": {
                        "value": "identifier",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "status": {
                      "value": "planned",
                      "type": "enum"
                    },
                    "type": {
                      "value": "first_consultation",
                      "type": "enum"
                    },
                    "period": {
                      "properties": {
                        "startedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "endedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "title": {
                      "value": {
                        "value": "title",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  },
                  "type": "object"
                },
                "patient": {
                  "properties": {
                    "identifier": {
                      "value": {
                        "value": "identifier",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "name": {
                      "value": {
                        "value": "name",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "gender": {
                      "value": "male",
                      "type": "enum"
                    },
                    "birthDate": {
                      "value": {
                        "value": "2024-01-15T09:30:00Z",
                        "type": "datetime"
                      },
                      "type": "primitive"
                    },
                    "pronouns": {
                      "value": {
                        "value": "pronouns",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  },
                  "type": "object"
                },
                "endedAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "createdAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "updatedAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "websocketUrl": {
                  "value": {
                    "value": "websocketUrl",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "lastUpdated": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "List Recordings",
      "audiences": [],
      "tags": [
        "recordings"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction for which recordings should be retrieved. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction for which recordings should be retrieved. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdRecordingsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdRecordingsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdRecordingsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdRecordingsRequest",
      "response": {
        "description": "Returns a list of recording IDs for the interaction.",
        "schema": {
          "generatedName": "GetInteractionsIdRecordingsResponse",
          "schema": "ResponseRecordingList",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieve a list of recordings for a given interaction.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}/recordings/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "recordings": {
                  "value": [
                    {
                      "value": {
                        "value": "recordings",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Upload Recording",
      "audiences": [],
      "tags": [
        "recordings"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction for which recording should be attributed. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction for which recording should be attributed. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PostInteractionsIdRecordingsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PostInteractionsIdRecordingsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PostInteractionsIdRecordingsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PostInteractionsIdRecordingsRequest",
      "request": {
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "contentType": "application/octet-stream",
        "type": "octetStream"
      },
      "response": {
        "description": "Returns the recording ID in the response.",
        "schema": {
          "generatedName": "PostInteractionsIdRecordingsResponse",
          "schema": "ResponseRecordingCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 201,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Upload a recording for a given interaction. There is a maximum limit of 60 minutes in length and 150MB in size for recordings.",
      "authed": false,
      "security": [],
      "method": "POST",
      "path": "/interactions/{id}/recordings/",
      "examples": [],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Get Recording",
      "audiences": [],
      "tags": [
        "recordings"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction for which the recording should be retrieved. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction for which the recording should be retrieved. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdRecordingsRecordingIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The unique identifier of the recording to be retrieved. Must be a valid UUID.",
          "name": "recordingId",
          "schema": {
            "description": "The unique identifier of the recording to be retrieved. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdRecordingsRecordingIdRequestRecordingId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdRecordingsRecordingIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdRecordingsRecordingIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdRecordingsRecordingIdRequest",
      "response": {
        "description": "Binary content of the recording file.",
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "text"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieve a specific recording for a given interaction.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}/recordings/{recordingId}",
      "examples": [],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Delete Recording",
      "audiences": [],
      "tags": [
        "recordings"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction for which the recording should be deleted from. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction for which the recording should be deleted from. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "DeleteInteractionsIdRecordingsRecordingIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The unique identifier of the recording to be deleted. Must be a valid UUID.",
          "name": "recordingId",
          "schema": {
            "description": "The unique identifier of the recording to be deleted. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "DeleteInteractionsIdRecordingsRecordingIdRequestRecordingId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "DeleteInteractionsIdRecordingsRecordingIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "DeleteInteractionsIdRecordingsRecordingIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "DeleteInteractionsIdRecordingsRecordingIdRequest",
      "response": {
        "description": "",
        "schema": {
          "generatedName": "DeleteInteractionsIdRecordingsRecordingIdResponse",
          "schema": "NoContent",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 204,
        "type": "json"
      },
      "errors": {
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Delete a specific recording for a given interaction.",
      "authed": false,
      "security": [],
      "method": "DELETE",
      "path": "/interactions/{id}/recordings/{recordingId}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "recordingId",
              "value": {
                "value": {
                  "value": "recordingId",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "value": [
                {
                  "key": {
                    "value": "key",
                    "type": "string"
                  },
                  "value": {
                    "value": {
                      "value": {
                        "value": "value",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "type": "unknown"
                  }
                }
              ],
              "type": "map"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "List Transcripts",
      "audiences": [],
      "tags": [
        "transcripts"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction for which transcripts should be retrieved. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction for which transcripts should be retrieved. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdTranscriptsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [
        {
          "description": "Describes transcript attribute for sorting",
          "name": "sort",
          "schema": {
            "generatedName": "GetInteractionsIdTranscriptsRequestSort",
            "description": "Describes transcript attribute for sorting",
            "value": {
              "description": "Describes transcript attribute for sorting",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetInteractionsIdTranscriptsRequestSort",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "Describes sorting direction",
          "name": "direction",
          "schema": {
            "generatedName": "GetInteractionsIdTranscriptsRequestDirection",
            "description": "Describes sorting direction",
            "value": {
              "description": "Describes sorting direction",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetInteractionsIdTranscriptsRequestDirection",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The number of transcripts to return. For example, a pageSize of 10 will return a maximum of 10 interactions.",
          "name": "pageSize",
          "schema": {
            "generatedName": "GetInteractionsIdTranscriptsRequestPageSize",
            "description": "The number of transcripts to return. For example, a pageSize of 10 will return a maximum of 10 interactions.",
            "value": {
              "description": "The number of transcripts to return. For example, a pageSize of 10 will return a maximum of 10 interactions.",
              "schema": {
                "type": "int64"
              },
              "generatedName": "GetInteractionsIdTranscriptsRequestPageSize",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The number of transcripts to skip. For example, index=2 with pageSize=10 will skip the first 10 interactions and return 11-20.",
          "name": "index",
          "schema": {
            "generatedName": "GetInteractionsIdTranscriptsRequestIndex",
            "description": "The number of transcripts to skip. For example, index=2 with pageSize=10 will skip the first 10 interactions and return 11-20.",
            "value": {
              "description": "The number of transcripts to skip. For example, index=2 with pageSize=10 will skip the first 10 interactions and return 11-20.",
              "schema": {
                "type": "int64"
              },
              "generatedName": "GetInteractionsIdTranscriptsRequestIndex",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "Display full transcripts in listing",
          "name": "full",
          "schema": {
            "generatedName": "GetInteractionsIdTranscriptsRequestFull",
            "description": "Display full transcripts in listing",
            "value": {
              "description": "Display full transcripts in listing",
              "schema": {
                "type": "boolean"
              },
              "generatedName": "GetInteractionsIdTranscriptsRequestFull",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdTranscriptsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdTranscriptsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdTranscriptsRequest",
      "response": {
        "description": "Returns a list of transcripts associated with the interaction.",
        "schema": {
          "generatedName": "GetInteractionsIdTranscriptsResponse",
          "schema": "ResponseTranscriptListAll",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieves a list of transcripts for a given interaction.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}/transcripts/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [
            {
              "name": "sort",
              "value": {
                "value": {
                  "value": "sort",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "direction",
              "value": {
                "value": {
                  "value": "direction",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "pageSize",
              "value": {
                "value": {
                  "value": 1000000,
                  "type": "int64"
                },
                "type": "primitive"
              }
            },
            {
              "name": "index",
              "value": {
                "value": {
                  "value": 1000000,
                  "type": "int64"
                },
                "type": "primitive"
              }
            },
            {
              "name": "full",
              "value": {
                "value": {
                  "value": true,
                  "type": "boolean"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "transcripts": {
                  "value": [
                    {
                      "properties": {
                        "id": {
                          "value": {
                            "value": "id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "transcriptSample": {
                          "value": {
                            "value": "transcriptSample",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Create Transcript",
      "audiences": [],
      "tags": [
        "transcripts"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction for which the transcript is created. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction for which the transcript is created. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PostInteractionsIdTranscriptsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PostInteractionsIdTranscriptsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PostInteractionsIdTranscriptsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PostInteractionsIdTranscriptsRequest",
      "request": {
        "schema": {
          "generatedName": "PostInteractionsIdTranscriptsRequestBody",
          "schema": "RequestTranscriptCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "Returns the generated transcript, including participant roles and timestamps for each utterance.",
        "schema": {
          "generatedName": "PostInteractionsIdTranscriptsResponse",
          "schema": "ResponseTranscriptCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 201,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Creates a new transcript for an interaction.",
      "authed": false,
      "security": [],
      "method": "POST",
      "path": "/interactions/{id}/transcripts/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {
              "recordingId": {
                "value": {
                  "value": "recordingId",
                  "type": "string"
                },
                "type": "primitive"
              },
              "primaryLanguage": {
                "value": {
                  "value": "primaryLanguage",
                  "type": "string"
                },
                "type": "primitive"
              },
              "modelName": {
                "value": {
                  "value": "modelName",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "metadata": {
                  "properties": {
                    "participantsRoles": {
                      "value": [
                        {
                          "properties": {},
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "transcripts": {
                  "value": [
                    {
                      "properties": {
                        "channel": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "participant": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "speakerId": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Get Transcript",
      "audiences": [],
      "tags": [
        "transcripts"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction containing the transcript. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction containing the transcript. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdTranscriptsTranscriptIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The unique identifier of the transcript to retrieve. Must be a valid UUID.",
          "name": "transcriptId",
          "schema": {
            "description": "The unique identifier of the transcript to retrieve. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdTranscriptsTranscriptIdRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdTranscriptsTranscriptIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdTranscriptsTranscriptIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdTranscriptsTranscriptIdRequest",
      "response": {
        "description": "",
        "schema": {
          "generatedName": "GetInteractionsIdTranscriptsTranscriptIdResponse",
          "schema": "ResponseTranscriptCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieves the transcript for a specific interaction.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}/transcripts/{transcriptId}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "transcriptId",
              "value": {
                "value": {
                  "value": "transcriptId",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "metadata": {
                  "properties": {
                    "participantsRoles": {
                      "value": [
                        {
                          "properties": {},
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "transcripts": {
                  "value": [
                    {
                      "properties": {
                        "channel": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "participant": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "speakerId": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Delete Transcript",
      "audiences": [],
      "tags": [
        "transcripts"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction to which the transcript belongs. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction to which the transcript belongs. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "DeleteInteractionsIdTranscriptsTranscriptIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The unique identifier of the transcript to delete. Must be a valid UUID.",
          "name": "transcriptId",
          "schema": {
            "description": "The unique identifier of the transcript to delete. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "DeleteInteractionsIdTranscriptsTranscriptIdRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "DeleteInteractionsIdTranscriptsTranscriptIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "DeleteInteractionsIdTranscriptsTranscriptIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "DeleteInteractionsIdTranscriptsTranscriptIdRequest",
      "response": {
        "description": "",
        "schema": {
          "generatedName": "DeleteInteractionsIdTranscriptsTranscriptIdResponse",
          "schema": "NoContent",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 204,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Deletes a specific transcript associated with an interaction.",
      "authed": false,
      "security": [],
      "method": "DELETE",
      "path": "/interactions/{id}/transcripts/{transcriptId}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "transcriptId",
              "value": {
                "value": {
                  "value": "transcriptId",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "value": [
                {
                  "key": {
                    "value": "key",
                    "type": "string"
                  },
                  "value": {
                    "value": {
                      "value": {
                        "value": "value",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "type": "unknown"
                  }
                }
              ],
              "type": "map"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "List Fact Groups",
      "audiences": [],
      "tags": [
        "facts"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetFactgroupsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetFactgroupsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetFactgroupsRequest",
      "response": {
        "description": " ",
        "schema": {
          "generatedName": "GetFactgroupsResponse",
          "schema": "ResponseDirectusFactGroupsFiltered",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/factgroups/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "data": {
                  "value": [
                    {
                      "properties": {
                        "id": {
                          "value": {
                            "value": "id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "key": {
                          "value": {
                            "value": "key",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "translations": {
                          "value": [
                            {
                              "properties": {},
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "List Facts",
      "audiences": [],
      "tags": [
        "facts"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction for which facts should be retrieved. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction for which facts should be retrieved. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdFactsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdFactsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdFactsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdFactsRequest",
      "response": {
        "description": "Returns a list of facts associated with the specified interaction.",
        "schema": {
          "generatedName": "GetInteractionsIdFactsResponse",
          "schema": "ResponseFactsList",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieves a list of facts for a given interaction.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}/facts/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "facts": {
                  "value": [
                    {
                      "properties": {
                        "id": {
                          "value": {
                            "value": "id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "group": {
                          "value": {
                            "value": "other",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "groupId": {
                          "value": {
                            "value": "groupId",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "isDiscarded": {
                          "value": {
                            "value": true,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "source": {
                          "value": "core",
                          "type": "enum"
                        },
                        "createdAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "updatedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "evidence": {
                          "value": [
                            {
                              "properties": {},
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Add Facts",
      "audiences": [],
      "tags": [
        "facts"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction to which the facts belong. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction to which the facts belong. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PostInteractionsIdFactsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PostInteractionsIdFactsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PostInteractionsIdFactsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PostInteractionsIdFactsRequest",
      "request": {
        "schema": {
          "generatedName": "PostInteractionsIdFactsRequestBody",
          "schema": "RequestFactsCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "Returns the created facts, including their unique identifiers and associated metadata.",
        "schema": {
          "generatedName": "PostInteractionsIdFactsResponse",
          "schema": "ResponseFactsCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Adds new facts to an interaction.",
      "authed": false,
      "security": [],
      "method": "POST",
      "path": "/interactions/{id}/facts/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {
              "facts": {
                "value": [
                  {
                    "properties": {
                      "text": {
                        "value": {
                          "value": "text",
                          "type": "string"
                        },
                        "type": "primitive"
                      },
                      "group": {
                        "value": {
                          "value": "other",
                          "type": "string"
                        },
                        "type": "primitive"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": "array"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "facts": {
                  "value": [
                    {
                      "properties": {
                        "id": {
                          "value": {
                            "value": "id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "group": {
                          "value": {
                            "value": "other",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "groupId": {
                          "value": {
                            "value": "groupId",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "source": {
                          "value": "core",
                          "type": "enum"
                        },
                        "isDiscarded": {
                          "value": {
                            "value": true,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "updatedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Update Facts",
      "audiences": [],
      "tags": [
        "facts"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction for which facts are being updated. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction for which facts are being updated. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PatchInteractionsIdFactsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PatchInteractionsIdFactsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PatchInteractionsIdFactsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PatchInteractionsIdFactsRequest",
      "request": {
        "schema": {
          "generatedName": "PatchInteractionsIdFactsRequestBody",
          "schema": "RequestFactsUpdate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "Returns the list of successfully updated facts.",
        "schema": {
          "generatedName": "PatchInteractionsIdFactsResponse",
          "schema": "ResponseFactsUpdate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Updates multiple facts associated with an interaction. If the interaction `status = \"in progress\"`, the updated facts will be sent to the client over WebSocket.",
      "authed": false,
      "security": [],
      "method": "PATCH",
      "path": "/interactions/{id}/facts/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {
              "facts": {
                "value": [
                  {
                    "properties": {
                      "factId": {
                        "value": {
                          "value": "factId",
                          "type": "string"
                        },
                        "type": "primitive"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": "array"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "facts": {
                  "value": [
                    {
                      "properties": {
                        "id": {
                          "value": {
                            "value": "id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "group": {
                          "value": {
                            "value": "other",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "groupId": {
                          "value": {
                            "value": "groupId",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "source": {
                          "value": "core",
                          "type": "enum"
                        },
                        "isDiscarded": {
                          "value": {
                            "value": true,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "createdAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "updatedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Update Fact",
      "audiences": [],
      "tags": [
        "facts"
      ],
      "pathParameters": [
        {
          "description": "The unique identifier of the interaction to which the fact belongs. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The unique identifier of the interaction to which the fact belongs. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PatchInteractionsIdFactsFactIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The unique identifier of the fact to update. Must be a valid UUID.",
          "name": "factId",
          "schema": {
            "description": "The unique identifier of the fact to update. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PatchInteractionsIdFactsFactIdRequestFactId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PatchInteractionsIdFactsFactIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PatchInteractionsIdFactsFactIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PatchInteractionsIdFactsFactIdRequest",
      "request": {
        "schema": {
          "generatedName": "PatchInteractionsIdFactsFactIdRequestBody",
          "schema": "RequestFactUpdate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "Returns the updated fact, including updated fields.",
        "schema": {
          "generatedName": "PatchInteractionsIdFactsFactIdResponse",
          "schema": "ResponseFactUpdate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Updates an existing fact within a specific interaction. If the interaction `status = \"in progress\"`, the updated fact will be sent to the client via WebSocket. To discard a fact, simply set `discarded = true`.",
      "authed": false,
      "security": [],
      "method": "PATCH",
      "path": "/interactions/{id}/facts/{factId}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "factId",
              "value": {
                "value": {
                  "value": "factId",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {
              "text": {
                "value": {
                  "value": "text",
                  "type": "string"
                },
                "type": "primitive"
              },
              "source": {
                "value": "core",
                "type": "enum"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "text": {
                  "value": {
                    "value": "text",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "group": {
                  "value": {
                    "value": "other",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "groupId": {
                  "value": {
                    "value": "groupId",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "source": {
                  "value": "core",
                  "type": "enum"
                },
                "isDiscarded": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "createdAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "updatedAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "List Documents",
      "audiences": [],
      "tags": [
        "documents"
      ],
      "pathParameters": [
        {
          "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdDocumentsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdDocumentsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdDocumentsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdDocumentsRequest",
      "response": {
        "description": " ",
        "schema": {
          "generatedName": "GetInteractionsIdDocumentsResponse",
          "schema": "ResponseDocumentList",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " List Documents",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}/documents/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "data": {
                  "value": [
                    {
                      "properties": {
                        "id": {
                          "value": {
                            "value": "id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "name": {
                          "value": {
                            "value": "name",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "templateRef": {
                          "value": {
                            "value": "templateRef",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "isStream": {
                          "value": {
                            "value": true,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "sections": {
                          "value": [
                            {
                              "properties": {},
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        },
                        "createdAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "updatedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "outputLanguage": {
                          "value": {
                            "value": "outputLanguage",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Generate Document",
      "audiences": [],
      "tags": [
        "documents"
      ],
      "pathParameters": [
        {
          "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PostInteractionsIdDocumentsRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PostInteractionsIdDocumentsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PostInteractionsIdDocumentsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PostInteractionsIdDocumentsRequest",
      "request": {
        "schema": {
          "generatedName": "PostInteractionsIdDocumentsRequestBody",
          "schema": "RequestDocumentCreate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": " ",
        "schema": {
          "generatedName": "PostInteractionsIdDocumentsResponse",
          "schema": "ResponseDocumentRead",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 201,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Generate Document.",
      "authed": false,
      "security": [],
      "method": "POST",
      "path": "/interactions/{id}/documents/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {
              "context": {
                "value": [
                  {
                    "properties": {
                      "type": {
                        "value": "facts",
                        "type": "enum"
                      },
                      "data": {
                        "value": [
                          {
                            "properties": {
                              "text": {
                                "value": {
                                  "value": "text",
                                  "type": "string"
                                },
                                "type": "primitive"
                              },
                              "source": {
                                "value": "core",
                                "type": "enum"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": "array"
              },
              "templateKey": {
                "value": {
                  "value": "templateKey",
                  "type": "string"
                },
                "type": "primitive"
              },
              "outputLanguage": {
                "value": {
                  "value": "outputLanguage",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "name": {
                  "value": {
                    "value": "name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "templateRef": {
                  "value": {
                    "value": "templateRef",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "isStream": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sections": {
                  "value": [
                    {
                      "properties": {
                        "key": {
                          "value": {
                            "value": "key",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "name": {
                          "value": {
                            "value": "name",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sort": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "createdAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "updatedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "createdAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "updatedAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "outputLanguage": {
                  "value": {
                    "value": "outputLanguage",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "from Facts",
              "language": "text",
              "code": "curl --request POST \\\n  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"context\": [\n    {\n      \"type\": \"facts\",\n      \"data\": [\n        {\n          \"text\": \"<string>\",\n          \"group\": \"other\",\n          \"source\": \"core\"\n        }\n      ]\n    }\n  ],\n  \"templateKey\": \"<string>\",\n  \"name\": \"<string>\",\n  \"outputLanguage\": \"<string>\"\n}'",
              "type": "language"
            },
            {
              "name": "from Transcript",
              "language": "text",
              "code": "curl --request POST \\\n  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"context\": [\n    {\n      \"type\": \"transcript\",\n      \"data\": {\n        \"channel\": 1,\n        \"end\": 129,\n        \"participant\": 123,\n        \"start\": 20,\n        \"text\": \"<string>\"\n      }\n    }\n  ],\n  \"templateKey\": \"<string>\",\n  \"name\": \"<string>\",\n  \"outputLanguage\": \"<string>\"\n}'",
              "type": "language"
            },
            {
              "name": "assemble Template",
              "language": "text",
              "code": "curl --request POST \\\n  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"context\": [\n    {\n      \"type\": \"string\",\n      \"data\": \"<string>\"\n      }\n  ],\n  \"templateKey\": \"<string>\",\n  \"template\": {\n   \"sectionKeys\": [\n      \"<string>\"\n    ],\n  \"name\": \"<string>\",\n  \"outputLanguage\": \"<string>\"\n}'",
              "type": "language"
            },
            {
              "name": "from string",
              "language": "text",
              "code": "curl --request POST \\\n  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"context\": [\n    {\n      \"type\": \"string\",\n      \"data\": \"<string>\"\n    }\n  ],\n  \"templateKey\": \"<string>\",\n  \"name\": \"<string>\",\n  \"outputLanguage\": \"<string>\"\n}'",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Get Document",
      "audiences": [],
      "tags": [
        "documents"
      ],
      "pathParameters": [
        {
          "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdDocumentsDocumentIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The document ID representing the context for the request. Must be a valid UUID.",
          "name": "documentId",
          "schema": {
            "description": "The document ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdDocumentsDocumentIdRequestDocumentId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [
        {
          "description": "If true the response contains the context used to generated the document, such as fact, transcript or string.",
          "name": "context",
          "schema": {
            "generatedName": "GetInteractionsIdDocumentsDocumentIdRequestContext",
            "description": "If true the response contains the context used to generated the document, such as fact, transcript or string.",
            "value": {
              "description": "If true the response contains the context used to generated the document, such as fact, transcript or string.",
              "schema": {
                "type": "boolean"
              },
              "generatedName": "GetInteractionsIdDocumentsDocumentIdRequestContext",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdDocumentsDocumentIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdDocumentsDocumentIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdDocumentsDocumentIdRequest",
      "response": {
        "description": " ",
        "schema": {
          "generatedName": "GetInteractionsIdDocumentsDocumentIdResponse",
          "schema": "ResponseDocumentRead",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Get Document.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}/documents/{documentId}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "documentId",
              "value": {
                "value": {
                  "value": "documentId",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [
            {
              "name": "context",
              "value": {
                "value": {
                  "value": true,
                  "type": "boolean"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "name": {
                  "value": {
                    "value": "name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "templateRef": {
                  "value": {
                    "value": "templateRef",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "isStream": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sections": {
                  "value": [
                    {
                      "properties": {
                        "key": {
                          "value": {
                            "value": "key",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "name": {
                          "value": {
                            "value": "name",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sort": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "createdAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "updatedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "createdAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "updatedAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "outputLanguage": {
                  "value": {
                    "value": "outputLanguage",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Delete Document",
      "audiences": [],
      "tags": [
        "documents"
      ],
      "pathParameters": [
        {
          "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "DeleteInteractionsIdDocumentsDocumentIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The document ID representing the context for the request. Must be a valid UUID.",
          "name": "documentId",
          "schema": {
            "description": "The document ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "DeleteInteractionsIdDocumentsDocumentIdRequestDocumentId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "DeleteInteractionsIdDocumentsDocumentIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "DeleteInteractionsIdDocumentsDocumentIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "DeleteInteractionsIdDocumentsDocumentIdRequest",
      "response": {
        "description": "",
        "schema": {
          "generatedName": "DeleteInteractionsIdDocumentsDocumentIdResponse",
          "schema": "NoContent",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 204,
        "type": "json"
      },
      "errors": {
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "authed": false,
      "security": [],
      "method": "DELETE",
      "path": "/interactions/{id}/documents/{documentId}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "documentId",
              "value": {
                "value": {
                  "value": "documentId",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "value": [
                {
                  "key": {
                    "value": "key",
                    "type": "string"
                  },
                  "value": {
                    "value": {
                      "value": {
                        "value": "value",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "type": "unknown"
                  }
                }
              ],
              "type": "map"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Update Document",
      "audiences": [],
      "tags": [
        "documents"
      ],
      "pathParameters": [
        {
          "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PatchInteractionsIdDocumentsDocumentIdRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "The document ID representing the context for the request. Must be a valid UUID.",
          "name": "documentId",
          "schema": {
            "description": "The document ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PatchInteractionsIdDocumentsDocumentIdRequestDocumentId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PatchInteractionsIdDocumentsDocumentIdRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PatchInteractionsIdDocumentsDocumentIdRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PatchInteractionsIdDocumentsDocumentIdRequest",
      "request": {
        "schema": {
          "generatedName": "PatchInteractionsIdDocumentsDocumentIdRequestBody",
          "schema": "RequestDocumentUpdate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": " ",
        "schema": {
          "generatedName": "PatchInteractionsIdDocumentsDocumentIdResponse",
          "schema": "ResponseDocumentRead",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "authed": false,
      "security": [],
      "method": "PATCH",
      "path": "/interactions/{id}/documents/{documentId}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "documentId",
              "value": {
                "value": {
                  "value": "documentId",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {},
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "name": {
                  "value": {
                    "value": "name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "templateRef": {
                  "value": {
                    "value": "templateRef",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "isStream": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sections": {
                  "value": [
                    {
                      "properties": {
                        "key": {
                          "value": {
                            "value": "key",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "name": {
                          "value": {
                            "value": "name",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sort": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "createdAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "updatedAt": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "createdAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "updatedAt": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "outputLanguage": {
                  "value": {
                    "value": "outputLanguage",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "List Template Sections",
      "audiences": [],
      "tags": [
        "templates"
      ],
      "pathParameters": [],
      "queryParameters": [
        {
          "description": "Filter template sections by organization.",
          "name": "org",
          "schema": {
            "generatedName": "GetTemplateSectionsRequestOrg",
            "description": "Filter template sections by organization.",
            "value": {
              "description": "Filter template sections by organization.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetTemplateSectionsRequestOrg",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "Filter template sections by language.",
          "name": "lang",
          "schema": {
            "generatedName": "GetTemplateSectionsRequestLang",
            "description": "Filter template sections by language.",
            "value": {
              "description": "Filter template sections by language.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetTemplateSectionsRequestLang",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetTemplateSectionsRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetTemplateSectionsRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetTemplateSectionsRequest",
      "response": {
        "description": "List of Template Sections",
        "schema": {
          "generatedName": "GetTemplateSectionsResponse",
          "schema": "ResponseAllTemplateSections",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieves a list of template sections with optional filters for organization and language.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/templateSections/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "org",
              "value": {
                "value": {
                  "value": "org",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "lang",
              "value": {
                "value": {
                  "value": "lang",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "data": {
                  "value": [
                    {
                      "properties": {
                        "date_updated": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "name": {
                          "value": {
                            "value": "name",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "alternate_names": {
                          "value": [
                            {
                              "value": {
                                "value": "alternate_names",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        },
                        "key": {
                          "value": {
                            "value": "key",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "description": {
                          "value": {
                            "value": "description",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "section_type": {
                          "value": {
                            "value": "section_type",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "translations": {
                          "value": [
                            {
                              "properties": {},
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "List Templates",
      "audiences": [],
      "tags": [
        "templates"
      ],
      "pathParameters": [],
      "queryParameters": [
        {
          "description": "Filter templates by organization.",
          "name": "org",
          "schema": {
            "generatedName": "GetTemplatesRequestOrg",
            "description": "Filter templates by organization.",
            "value": {
              "description": "Filter templates by organization.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetTemplatesRequestOrg",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "Filter templates by language.",
          "name": "lang",
          "schema": {
            "generatedName": "GetTemplatesRequestLang",
            "description": "Filter templates by language.",
            "value": {
              "description": "Filter templates by language.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetTemplatesRequestLang",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        },
        {
          "description": "Filter templates by their status.",
          "name": "templateStatus",
          "schema": {
            "generatedName": "GetTemplatesRequestTemplateStatus",
            "description": "Filter templates by their status.",
            "value": {
              "description": "Filter templates by their status.",
              "schema": {
                "type": "string"
              },
              "generatedName": "GetTemplatesRequestTemplateStatus",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetTemplatesRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetTemplatesRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetTemplatesRequest",
      "response": {
        "description": "List of Templates",
        "schema": {
          "generatedName": "GetTemplatesResponse",
          "schema": "ResponseAllTemplates",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieves a list of templates with optional filters for organization, language, and status.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/templates/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "org",
              "value": {
                "value": {
                  "value": "org",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "lang",
              "value": {
                "value": {
                  "value": "lang",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "templateStatus",
              "value": {
                "value": {
                  "value": "templateStatus",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "data": {
                  "value": [
                    {
                      "properties": {
                        "date_updated": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "name": {
                          "value": {
                            "value": "name",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "description": {
                          "value": {
                            "value": "description",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "key": {
                          "value": {
                            "value": "key",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "status": {
                          "value": {
                            "value": "status",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "template_sections": {
                          "value": [
                            {
                              "properties": {},
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        },
                        "translations": {
                          "value": [
                            {
                              "properties": {},
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Get Template",
      "audiences": [],
      "tags": [
        "templates"
      ],
      "pathParameters": [
        {
          "description": "The key of the template",
          "name": "key",
          "schema": {
            "description": "The key of the template",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetTemplatesKeyRequestKey",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetTemplatesKeyRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetTemplatesKeyRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetTemplatesKeyRequest",
      "response": {
        "description": "Template by key",
        "schema": {
          "generatedName": "GetTemplatesKeyResponse",
          "schema": "TemplateFiltered",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Retrieves template by key.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/templates/{key}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "key",
              "value": {
                "value": {
                  "value": "key",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "date_updated": {
                  "value": {
                    "value": "2024-01-15T09:30:00Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "name": {
                  "value": {
                    "value": "name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "description": {
                  "value": {
                    "value": "description",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "key": {
                  "value": {
                    "value": "key",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "status": {
                  "value": {
                    "value": "status",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "template_sections": {
                  "value": [
                    {
                      "properties": {
                        "sort": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "translations": {
                  "value": [
                    {
                      "properties": {
                        "languages_id": {
                          "value": {
                            "value": "languages_id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "name": {
                          "value": {
                            "value": "name",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "description": {
                          "value": {
                            "value": "description",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "List Codes",
      "audiences": [],
      "tags": [
        "codes"
      ],
      "pathParameters": [
        {
          "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "GetInteractionsIdCodesRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "GetInteractionsIdCodesRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "GetInteractionsIdCodesRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "GetInteractionsIdCodesRequest",
      "response": {
        "description": "List of associated codes.",
        "schema": {
          "generatedName": "GetInteractionsIdCodesResponse",
          "schema": "ResponseCodesList",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Get all codes associated with an interaction.",
      "authed": false,
      "security": [],
      "method": "GET",
      "path": "/interactions/{id}/codes/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "response": {
            "value": {
              "properties": {
                "codes": {
                  "value": [
                    {
                      "properties": {
                        "system": {
                          "value": {
                            "value": "ICD-10",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "code": {
                          "value": {
                            "value": "T933",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "description": {
                          "value": {
                            "value": "description",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "additionalCodes": {
                          "value": [
                            {
                              "properties": {
                                "subsetName": {
                                  "value": {
                                    "value": "orsakskoder",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "code": {
                                  "value": {
                                    "value": "W0231",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Generate Codes",
      "audiences": [],
      "tags": [
        "codes"
      ],
      "pathParameters": [
        {
          "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PostInteractionsIdCodesRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PostInteractionsIdCodesRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PostInteractionsIdCodesRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PostInteractionsIdCodesRequest",
      "request": {
        "schema": {
          "generatedName": "PostInteractionsIdCodesRequestBody",
          "schema": "RequestCodesPredict",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "List of predicted codes.",
        "schema": {
          "generatedName": "PostInteractionsIdCodesResponse",
          "schema": "ResponseCodesList",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "502": {
          "generatedName": "BadGatewayError",
          "schema": {
            "generatedName": "BadGatewayErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Generate Codes.",
      "authed": false,
      "security": [],
      "method": "POST",
      "path": "/interactions/{id}/codes/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {
              "modelName": {
                "value": {
                  "value": "\"geography_modelName (Latest)\" | \"geography_modelName_version\"",
                  "type": "string"
                },
                "type": "primitive"
              },
              "context": {
                "properties": {
                  "type": {
                    "value": "string",
                    "type": "enum"
                  },
                  "data": {
                    "value": {
                      "value": "data",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "codes": {
                  "value": [
                    {
                      "properties": {
                        "system": {
                          "value": {
                            "value": "ICD-10",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "code": {
                          "value": {
                            "value": "T933",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "description": {
                          "value": {
                            "value": "description",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "additionalCodes": {
                          "value": [
                            {
                              "properties": {
                                "subsetName": {
                                  "value": {
                                    "value": "orsakskoder",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "code": {
                                  "value": {
                                    "value": "W0231",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Select Codes",
      "audiences": [],
      "tags": [
        "codes"
      ],
      "pathParameters": [
        {
          "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
          "name": "id",
          "schema": {
            "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
            "schema": {
              "type": "string"
            },
            "generatedName": "PutInteractionsIdCodesRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [
        {
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "Tenant-Name",
          "schema": {
            "generatedName": "PutInteractionsIdCodesRequestTenantName",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "value": {
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "schema": {
                "example": "copiloteu",
                "type": "string"
              },
              "generatedName": "PutInteractionsIdCodesRequestTenantName",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          }
        }
      ],
      "generatedRequestName": "PutInteractionsIdCodesRequest",
      "request": {
        "schema": {
          "generatedName": "PutInteractionsIdCodesRequestBody",
          "schema": "RequestCodesUpdate",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "Updated list of selected codes.",
        "schema": {
          "generatedName": "PutInteractionsIdCodesResponse",
          "schema": "ResponseCodesList",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "generatedName": "ForbiddenErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "schema": "ErrorResponse",
            "source": {
              "file": "../swagger.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "RFC9457",
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {},
                "type": "object"
              }
            }
          ]
        }
      },
      "servers": [],
      "description": " Mark provided codes as selected.",
      "authed": false,
      "security": [],
      "method": "PUT",
      "path": "/interactions/{id}/codes/",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "id",
              "value": {
                "value": {
                  "value": "id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [
            {
              "name": "Tenant-Name",
              "value": {
                "value": {
                  "value": "copiloteu",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "request": {
            "properties": {},
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "codes": {
                  "value": [
                    {
                      "properties": {
                        "system": {
                          "value": {
                            "value": "ICD-10",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "code": {
                          "value": {
                            "value": "T933",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "description": {
                          "value": {
                            "value": "description",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "additionalCodes": {
                          "value": [
                            {
                              "properties": {
                                "subsetName": {
                                  "value": {
                                    "value": "orsakskoder",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "code": {
                                  "value": {
                                    "value": "W0231",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../swagger.json",
        "type": "openapi"
      }
    }
  ],
  "webhooks": [],
  "channels": {
    "stream": {
      "audiences": [],
      "handshake": {
        "headers": [],
        "queryParameters": [
          {
            "name": "token",
            "description": "Short-term token as per RFC 7519 (https://jwt.io).",
            "schema": {
              "description": "Short-term token as per RFC 7519 (https://jwt.io).",
              "schema": {
                "type": "string"
              },
              "generatedName": "Token",
              "nameOverride": "StreamToken",
              "title": "StreamToken",
              "namespace": "stream",
              "groupName": [
                {
                  "type": "namespace",
                  "name": "stream"
                }
              ],
              "type": "primitive"
            },
            "source": {
              "file": "../asyncapi-original.json",
              "type": "openapi"
            }
          },
          {
            "name": "tenantName",
            "description": "Unique identifier for the interaction session.",
            "schema": {
              "description": "Unique identifier for the interaction session.",
              "schema": {
                "type": "string"
              },
              "generatedName": "TenantName",
              "nameOverride": "StreamTenantName",
              "title": "StreamTenantName",
              "namespace": "stream",
              "groupName": [
                {
                  "type": "namespace",
                  "name": "stream"
                }
              ],
              "type": "primitive"
            },
            "source": {
              "file": "../asyncapi-original.json",
              "type": "openapi"
            }
          }
        ],
        "pathParameters": [
          {
            "name": "id",
            "description": "Unique identifier for the interaction session.",
            "schema": {
              "description": "Unique identifier for the interaction session.",
              "schema": {
                "type": "string"
              },
              "generatedName": "Id",
              "nameOverride": "StreamId",
              "title": "StreamId",
              "namespace": "stream",
              "groupName": [
                {
                  "type": "namespace",
                  "name": "stream"
                }
              ],
              "type": "primitive"
            },
            "source": {
              "file": "../asyncapi-original.json",
              "type": "openapi"
            }
          }
        ]
      },
      "groupName": [
        {
          "type": "namespace",
          "name": "stream"
        },
        "stream"
      ],
      "messages": [
        {
          "origin": "server",
          "name": "configuration",
          "body": {
            "generatedName": "Configuration",
            "schema": "configuration",
            "source": {
              "file": "../asyncapi-original.json",
              "type": "openapi"
            },
            "type": "reference"
          }
        },
        {
          "origin": "server",
          "name": "audioPacket",
          "body": {
            "generatedName": "AudioPacket",
            "schema": "audioPacket",
            "source": {
              "file": "../asyncapi-original.json",
              "type": "openapi"
            },
            "type": "reference"
          }
        },
        {
          "origin": "client",
          "name": "status",
          "body": {
            "generatedName": "Status",
            "schema": "status",
            "source": {
              "file": "../asyncapi-original.json",
              "type": "openapi"
            },
            "type": "reference"
          }
        },
        {
          "origin": "client",
          "name": "transcripts",
          "body": {
            "generatedName": "Transcripts",
            "schema": "transcripts",
            "source": {
              "file": "../asyncapi-original.json",
              "type": "openapi"
            },
            "type": "reference"
          }
        },
        {
          "origin": "client",
          "name": "facts",
          "body": {
            "generatedName": "Facts",
            "schema": "facts",
            "source": {
              "file": "../asyncapi-original.json",
              "type": "openapi"
            },
            "type": "reference"
          }
        }
      ],
      "servers": [
        {
          "name": "beta-eu",
          "url": "wss://api.beta-eu.corti.app"
        },
        {
          "name": "eu",
          "url": "wss://api.eu.corti.app"
        },
        {
          "name": "us",
          "url": "wss://api.us.corti.app"
        }
      ],
      "path": "/audio-bridge/v2/interactions/{id}/streams",
      "description": "Channel for streaming real-time audio, transcripts, and fact updates during medical interactions.",
      "examples": [
        {
          "queryParameters": [],
          "headers": [],
          "messages": []
        }
      ],
      "source": {
        "file": "../asyncapi-original.json",
        "type": "openapi"
      }
    }
  },
  "groupedSchemas": {
    "rootSchemas": {
      "AdditionalCode": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "additionalCodeSubsetName",
            "key": "subsetName",
            "schema": {
              "generatedName": "AdditionalCodeSubsetName",
              "description": "Category or subset of the additional code",
              "value": {
                "description": "Category or subset of the additional code",
                "schema": {
                  "example": "orsakskoder",
                  "type": "string"
                },
                "generatedName": "AdditionalCodeSubsetName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "additionalCodeCode",
            "key": "code",
            "schema": {
              "generatedName": "AdditionalCodeCode",
              "description": "The additional code",
              "value": {
                "description": "The additional code",
                "schema": {
                  "example": "W0231",
                  "type": "string"
                },
                "generatedName": "AdditionalCodeCode",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "additionalCodeDescription",
            "key": "description",
            "schema": {
              "generatedName": "AdditionalCodeDescription",
              "description": "Description of the additional code",
              "value": {
                "description": "Description of the additional code",
                "schema": {
                  "type": "string"
                },
                "generatedName": "AdditionalCodeDescription",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "additionalCodeState",
            "key": "state",
            "schema": {
              "generatedName": "AdditionalCodeState",
              "value": {
                "description": "State of the additional code",
                "generatedName": "AdditionalCodeState",
                "schema": "CodesState",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "AdditionalCode",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "AlignedSegment": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "alignedSegmentTargetSegment",
            "key": "targetSegment",
            "schema": {
              "generatedName": "AlignedSegmentTargetSegment",
              "value": {
                "generatedName": "AlignedSegmentTargetSegment",
                "schema": "TargetSegment",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "alignedSegmentSourceReference",
            "key": "sourceReference",
            "schema": {
              "generatedName": "AlignedSegmentSourceReference",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "alignedSegmentSourceReferenceItemText",
                      "key": "text",
                      "schema": {
                        "generatedName": "AlignedSegmentSourceReferenceItemText",
                        "description": "The content of the matching segment in the source document.",
                        "value": {
                          "description": "The content of the matching segment in the source document.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "AlignedSegmentSourceReferenceItemText",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "alignedSegmentSourceReferenceItemRange",
                      "key": "range",
                      "schema": {
                        "generatedName": "AlignedSegmentSourceReferenceItemRange",
                        "description": "Start and end indices of the segment in the source document.",
                        "value": {
                          "description": "Start and end indices of the segment in the source document.",
                          "value": {
                            "schema": {
                              "type": "int"
                            },
                            "generatedName": "AlignedSegmentSourceReferenceItemRangeItem",
                            "groupName": [],
                            "type": "primitive"
                          },
                          "generatedName": "AlignedSegmentSourceReferenceItemRange",
                          "groupName": [],
                          "type": "array"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "AlignedSegmentSourceReferenceItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "AlignedSegmentSourceReference",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "alignedSegmentAlignmentPercentage",
            "key": "alignmentPercentage",
            "schema": {
              "generatedName": "AlignedSegmentAlignmentPercentage",
              "description": "Alignment percentage between the target and source segment.",
              "value": {
                "description": "Alignment percentage between the target and source segment.",
                "schema": {
                  "type": "double"
                },
                "generatedName": "AlignedSegmentAlignmentPercentage",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "AlignedSegment",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ClassificationResult": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "classificationResultPrediction",
            "key": "prediction",
            "schema": {
              "generatedName": "ClassificationResultPrediction",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ClassificationResultPrediction",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ClassificationResult",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "CodesContext": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "codesContextType",
            "key": "type",
            "schema": {
              "generatedName": "CodesContextType",
              "schema": "CodesContextTypeEnum",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "codesContextData",
            "key": "data",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "CodesContextData",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "codesContextMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "CodesContextMetadata",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CodesContextMetadata",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "CodesContext",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "CodesContextType": {
        "schema": {
          "type": "string"
        },
        "generatedName": "CodesContextType",
        "groupName": [],
        "type": "primitive"
      },
      "CodesContextTypeEnum": {
        "generatedName": "CodesContextTypeEnum",
        "values": [
          {
            "generatedName": "string",
            "value": "string",
            "casing": {}
          },
          {
            "generatedName": "documentId",
            "value": "documentId",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "CodesState": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "codesStateIsSelected",
            "key": "isSelected",
            "schema": {
              "generatedName": "CodesStateIsSelected",
              "description": "Indicates whether the code is selected",
              "value": {
                "description": "Indicates whether the code is selected",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CodesStateIsSelected",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "codesStateSource",
            "key": "source",
            "schema": {
              "generatedName": "CodesStateSource",
              "value": {
                "description": "Source of the predicted code",
                "generatedName": "CodesStateSource",
                "schema": "V2SourceEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "CodesState",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "CommonHeaders": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "commonHeadersTenantName",
            "key": "Tenant-Name",
            "schema": {
              "generatedName": "CommonHeadersTenantName",
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "value": {
                "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
                "schema": {
                  "example": "copiloteu",
                  "type": "string"
                },
                "generatedName": "CommonHeadersTenantName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "CommonHeaders",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "DirectusFactGroupFiltered": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "directusFactGroupFilteredId",
            "key": "id",
            "schema": {
              "generatedName": "DirectusFactGroupFilteredId",
              "value": {
                "generatedName": "DirectusFactGroupFilteredId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "directusFactGroupFilteredKey",
            "key": "key",
            "schema": {
              "generatedName": "DirectusFactGroupFilteredKey",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "DirectusFactGroupFilteredKey",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "directusFactGroupFilteredTranslations",
            "key": "translations",
            "schema": {
              "generatedName": "DirectusFactGroupFilteredTranslations",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "directusFactGroupFilteredTranslationsItemId",
                      "key": "id",
                      "schema": {
                        "generatedName": "DirectusFactGroupFilteredTranslationsItemId",
                        "value": {
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "DirectusFactGroupFilteredTranslationsItemId",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "directusFactGroupFilteredTranslationsItemLanguagesId",
                      "key": "languages_id",
                      "schema": {
                        "generatedName": "DirectusFactGroupFilteredTranslationsItemLanguagesId",
                        "value": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "DirectusFactGroupFilteredTranslationsItemLanguagesId",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "directusFactGroupFilteredTranslationsItemName",
                      "key": "name",
                      "schema": {
                        "generatedName": "DirectusFactGroupFilteredTranslationsItemName",
                        "value": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "DirectusFactGroupFilteredTranslationsItemName",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "DirectusFactGroupFilteredTranslationsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "DirectusFactGroupFilteredTranslations",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "DirectusFactGroupFiltered",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "DirectusFactGroupTranslationFiltered": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "directusFactGroupTranslationFilteredId",
            "key": "id",
            "schema": {
              "generatedName": "DirectusFactGroupTranslationFilteredId",
              "value": {
                "schema": {
                  "type": "int"
                },
                "generatedName": "DirectusFactGroupTranslationFilteredId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "directusFactGroupTranslationFilteredLanguagesId",
            "key": "languages_id",
            "schema": {
              "generatedName": "DirectusFactGroupTranslationFilteredLanguagesId",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "DirectusFactGroupTranslationFilteredLanguagesId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "directusFactGroupTranslationFilteredName",
            "key": "name",
            "schema": {
              "generatedName": "DirectusFactGroupTranslationFilteredName",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "DirectusFactGroupTranslationFilteredName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "DirectusFactGroupTranslationFiltered",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "DocumentContext": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "documentContextType",
            "key": "type",
            "schema": {
              "description": "The type of context data.",
              "generatedName": "DocumentContextType",
              "schema": "V2DocumentContextTypeEnum",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "documentContextData",
            "key": "data",
            "schema": {
              "description": "The actual data, which can be an array of facts, a transcript, or a string.",
              "generatedName": "DocumentContextData",
              "schema": "DocumentContextData",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "DocumentContext",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "DocumentContextData": {
        "value": {
          "generatedName": "DocumentContextData",
          "schemas": [
            {
              "description": "Facts",
              "value": {
                "generatedName": "DocumentContextDataItem",
                "schema": "FactContext",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "DocumentContextData",
              "nameOverride": "Facts",
              "title": "Facts",
              "groupName": [],
              "type": "array"
            },
            {
              "description": "Transcript",
              "generatedName": "DocumentContextDataOne",
              "schema": "Transcript",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            {
              "description": "Text",
              "schema": {
                "type": "string"
              },
              "generatedName": "DocumentContextData",
              "nameOverride": "Text",
              "title": "Text",
              "groupName": [],
              "type": "primitive"
            }
          ],
          "groupName": [],
          "source": {
            "file": "../swagger.json",
            "type": "openapi"
          },
          "type": "undiscriminated"
        },
        "type": "oneOf"
      },
      "DocumentSection": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "documentSectionKey",
            "key": "key",
            "schema": {
              "generatedName": "DocumentSectionKey",
              "description": "Document section key",
              "value": {
                "description": "Document section key",
                "schema": {
                  "type": "string"
                },
                "generatedName": "DocumentSectionKey",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentSectionName",
            "key": "name",
            "schema": {
              "generatedName": "DocumentSectionName",
              "description": "Name or heading of the document section within the generated document",
              "value": {
                "description": "Name or heading of the document section within the generated document",
                "schema": {
                  "type": "string"
                },
                "generatedName": "DocumentSectionName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentSectionText",
            "key": "text",
            "schema": {
              "generatedName": "DocumentSectionText",
              "description": "Contents of the document section within the generated document",
              "value": {
                "description": "Contents of the document section within the generated document",
                "schema": {
                  "type": "string"
                },
                "generatedName": "DocumentSectionText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentSectionSort",
            "key": "sort",
            "schema": {
              "generatedName": "DocumentSectionSort",
              "description": "Order of the document section within the generated document",
              "value": {
                "description": "Order of the document section within the generated document",
                "schema": {
                  "type": "int"
                },
                "generatedName": "DocumentSectionSort",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentSectionCreatedAt",
            "key": "createdAt",
            "schema": {
              "generatedName": "DocumentSectionCreatedAt",
              "description": "The original timestamp when the document section was created.",
              "value": {
                "description": "The original timestamp when the document section was created.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "DocumentSectionCreatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentSectionUpdatedAt",
            "key": "updatedAt",
            "schema": {
              "generatedName": "DocumentSectionUpdatedAt",
              "description": "The timestamp when the document section was last updated.",
              "value": {
                "description": "The timestamp when the document section was last updated.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "DocumentSectionUpdatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "DocumentSection",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "DocumentTemplate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "documentTemplateSectionIds",
            "key": "sectionIds",
            "schema": {
              "generatedName": "DocumentTemplateSectionIds",
              "description": "An array of section IDs.",
              "value": {
                "description": "An array of section IDs.",
                "value": {
                  "generatedName": "DocumentTemplateSectionIdsItem",
                  "schema": "UUID",
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "DocumentTemplateSectionIds",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentTemplateSectionKeys",
            "key": "sectionKeys",
            "schema": {
              "generatedName": "DocumentTemplateSectionKeys",
              "description": "An array of section keys.",
              "value": {
                "description": "An array of section keys.",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "DocumentTemplateSectionKeysItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "DocumentTemplateSectionKeys",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentTemplateDocumentName",
            "key": "documentName",
            "schema": {
              "generatedName": "DocumentTemplateDocumentName",
              "description": "The name of the document.",
              "value": {
                "description": "The name of the document.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "DocumentTemplateDocumentName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentTemplateAdditionalInstructions",
            "key": "additionalInstructions",
            "schema": {
              "generatedName": "DocumentTemplateAdditionalInstructions",
              "description": "Any additional instructions to be considered during document generation.",
              "value": {
                "description": "Any additional instructions to be considered during document generation.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "DocumentTemplateAdditionalInstructions",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "DocumentTemplate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "Encounter": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "encounterIdentifier",
            "key": "identifier",
            "schema": {
              "description": "A unique identifier for the encounter, essential for tracking and referencing specific patient interactions.",
              "schema": {
                "type": "string"
              },
              "generatedName": "EncounterIdentifier",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "encounterStatus",
            "key": "status",
            "schema": {
              "description": "Indicates the current state of the encounter, crucial for understanding the progression and current state of care.",
              "generatedName": "EncounterStatus",
              "schema": "V2EncounterStatusEnum",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "encounterType",
            "key": "type",
            "schema": {
              "description": "The specific type of encounter, providing context about the nature and setting of the patient interaction.",
              "generatedName": "EncounterType",
              "schema": "V2EncounterTypeEnum",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "encounterPeriod",
            "key": "period",
            "schema": {
              "description": "The time period during which the encounter takes place.",
              "generatedName": "EncounterPeriod",
              "schema": "EncounterPeriod",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "encounterTitle",
            "key": "title",
            "schema": {
              "generatedName": "EncounterTitle",
              "description": "A readable name for the interaction",
              "value": {
                "description": "A readable name for the interaction",
                "schema": {
                  "type": "string"
                },
                "generatedName": "EncounterTitle",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Encounter",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "EncounterPeriod": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "encounterPeriodStartedAt",
            "key": "startedAt",
            "schema": {
              "description": "The start date/time of the encounter. (UTC)",
              "schema": {
                "type": "datetime"
              },
              "generatedName": "EncounterPeriodStartedAt",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "encounterPeriodEndedAt",
            "key": "endedAt",
            "schema": {
              "generatedName": "EncounterPeriodEndedAt",
              "description": "The end date/time of the encounter. (UTC)",
              "value": {
                "description": "The end date/time of the encounter. (UTC)",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "EncounterPeriodEndedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "EncounterPeriod",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ErrorResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "errorResponseRequestid",
            "key": "requestid",
            "schema": {
              "generatedName": "ErrorResponseRequestid",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ErrorResponseRequestid",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "errorResponseType",
            "key": "type",
            "schema": {
              "generatedName": "ErrorResponseType",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ErrorResponseType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "errorResponseStatus",
            "key": "status",
            "schema": {
              "generatedName": "ErrorResponseStatus",
              "value": {
                "schema": {
                  "type": "int"
                },
                "generatedName": "ErrorResponseStatus",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "errorResponseTitle",
            "key": "title",
            "schema": {
              "generatedName": "ErrorResponseTitle",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ErrorResponseTitle",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "errorResponseDetails",
            "key": "details",
            "schema": {
              "generatedName": "ErrorResponseDetails",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ErrorResponseDetails",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "errorResponseInstance",
            "key": "instance",
            "schema": {
              "generatedName": "ErrorResponseInstance",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ErrorResponseInstance",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ErrorResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "FactContext": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "factContextText",
            "key": "text",
            "schema": {
              "description": "The text of the fact.",
              "schema": {
                "type": "string"
              },
              "generatedName": "FactContextText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "factContextGroup",
            "key": "group",
            "schema": {
              "generatedName": "FactContextGroup",
              "description": "The group to which the fact belongs.",
              "value": {
                "description": "The group to which the fact belongs.",
                "schema": {
                  "example": "Others",
                  "type": "string"
                },
                "generatedName": "FactContextGroup",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "factContextSource",
            "key": "source",
            "schema": {
              "description": "The source of the fact. 'USER' refers to facts provided by the user, while 'SYSTEM' refers to system-generated facts (e.g., EHR).",
              "generatedName": "FactContextSource",
              "schema": "V2SourceEnum",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FactContext",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "MentionData": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "mentionDataRange",
            "key": "range",
            "schema": {
              "generatedName": "MentionDataRange",
              "description": "Character range for document type.",
              "value": {
                "description": "Character range for document type.",
                "value": {
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "MentionDataRangeItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "MentionDataRange",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "mentionDataTime",
            "key": "time",
            "schema": {
              "generatedName": "MentionDataTime",
              "description": "Time range in seconds for transcript type.",
              "value": {
                "description": "Time range in seconds for transcript type.",
                "value": {
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "MentionDataTimeItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "MentionDataTime",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "mentionDataSnippet",
            "key": "snippet",
            "schema": {
              "generatedName": "MentionDataSnippet",
              "description": "Text snippet for the mention.",
              "value": {
                "description": "Text snippet for the mention.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "MentionDataSnippet",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "mentionDataDocumentId",
            "key": "documentId",
            "schema": {
              "generatedName": "MentionDataDocumentId",
              "value": {
                "description": "The document ID if applicable.",
                "generatedName": "MentionDataDocumentId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "mentionDataUtteranceId",
            "key": "utteranceId",
            "schema": {
              "generatedName": "MentionDataUtteranceId",
              "value": {
                "description": "The utterance ID if applicable.",
                "generatedName": "MentionDataUtteranceId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "mentionDataTimestamp",
            "key": "timestamp",
            "schema": {
              "generatedName": "MentionDataTimestamp",
              "description": "The timestamp for transcript mentions.",
              "value": {
                "description": "The timestamp for transcript mentions.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "MentionDataTimestamp",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "MentionData",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "NoContent": {
        "key": {
          "schema": {
            "type": "string"
          },
          "generatedName": "NoContentKey",
          "groupName": [],
          "type": "primitive"
        },
        "value": {
          "generatedName": "NoContentValue",
          "type": "unknown"
        },
        "generatedName": "NoContent",
        "groupName": [],
        "type": "map"
      },
      "Patient": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "patientIdentifier",
            "key": "identifier",
            "schema": {
              "description": "FHIR reference to patient identifier.",
              "schema": {
                "type": "string"
              },
              "generatedName": "PatientIdentifier",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "patientName",
            "key": "name",
            "schema": {
              "generatedName": "PatientName",
              "description": "FHIR reference to Text representation of the full name.",
              "value": {
                "description": "FHIR reference to Text representation of the full name.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "PatientName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "patientGender",
            "key": "gender",
            "schema": {
              "generatedName": "PatientGender",
              "value": {
                "description": "FHIR reference to patient gender.",
                "generatedName": "PatientGender",
                "schema": "V2GenderEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "patientBirthDate",
            "key": "birthDate",
            "schema": {
              "generatedName": "PatientBirthDate",
              "description": "FHIR reference to patient birth date.",
              "value": {
                "description": "FHIR reference to patient birth date.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "PatientBirthDate",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "patientPronouns",
            "key": "pronouns",
            "schema": {
              "generatedName": "PatientPronouns",
              "description": "FHIR reference to patient extension Individual Pronouns.",
              "value": {
                "description": "FHIR reference to patient extension Individual Pronouns.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "PatientPronouns",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Patient",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "QueryData": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "queryDataSummary",
            "key": "summary",
            "schema": {
              "generatedName": "QueryDataSummary",
              "description": "For guidelines, a summary of the response.",
              "value": {
                "description": "For guidelines, a summary of the response.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QueryDataSummary",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "queryDataSources",
            "key": "sources",
            "schema": {
              "generatedName": "QueryDataSources",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "queryDataSourcesItemFavicon",
                      "key": "favicon",
                      "schema": {
                        "generatedName": "QueryDataSourcesItemFavicon",
                        "description": "The favicon URL of the source.",
                        "value": {
                          "description": "The favicon URL of the source.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "QueryDataSourcesItemFavicon",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "queryDataSourcesItemTitle",
                      "key": "title",
                      "schema": {
                        "generatedName": "QueryDataSourcesItemTitle",
                        "description": "The title of the source.",
                        "value": {
                          "description": "The title of the source.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "QueryDataSourcesItemTitle",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "queryDataSourcesItemUrl",
                      "key": "url",
                      "schema": {
                        "generatedName": "QueryDataSourcesItemUrl",
                        "description": "The URL of the source.",
                        "value": {
                          "description": "The URL of the source.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "QueryDataSourcesItemUrl",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "queryDataSourcesItemType",
                      "key": "type",
                      "schema": {
                        "generatedName": "QueryDataSourcesItemType",
                        "description": "The type of the source (e.g., PDF, Web).",
                        "value": {
                          "description": "The type of the source (e.g., PDF, Web).",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "QueryDataSourcesItemType",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "queryDataSourcesItemDescription",
                      "key": "description",
                      "schema": {
                        "generatedName": "QueryDataSourcesItemDescription",
                        "description": "A brief description of the source.",
                        "value": {
                          "description": "A brief description of the source.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "QueryDataSourcesItemDescription",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "QueryDataSourcesItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "QueryDataSources",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "queryDataMentions",
            "key": "mentions",
            "schema": {
              "generatedName": "QueryDataMentions",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "queryDataMentionsItemType",
                      "key": "type",
                      "schema": {
                        "generatedName": "QueryDataMentionsItemType",
                        "description": "The type of mention (e.g., transcript, document).",
                        "value": {
                          "description": "The type of mention (e.g., transcript, document).",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "QueryDataMentionsItemType",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "queryDataMentionsItemData",
                      "key": "data",
                      "schema": {
                        "generatedName": "QueryDataMentionsItemData",
                        "value": {
                          "generatedName": "QueryDataMentionsItemData",
                          "schema": "MentionData",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "QueryDataMentionsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "QueryDataMentions",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "queryDataResponse",
            "key": "response",
            "schema": {
              "generatedName": "QueryDataResponse",
              "description": "General chat response in markdown format.",
              "value": {
                "description": "General chat response in markdown format.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QueryDataResponse",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "queryDataRewrittenText",
            "key": "rewrittenText",
            "schema": {
              "generatedName": "QueryDataRewrittenText",
              "description": "For document rewrites, the rewritten text in markdown format.",
              "value": {
                "description": "For document rewrites, the rewritten text in markdown format.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QueryDataRewrittenText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "queryDataQueries",
            "key": "queries",
            "schema": {
              "generatedName": "QueryDataQueries",
              "description": "Related or follow-up queries.",
              "value": {
                "description": "Related or follow-up queries.",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "QueryDataQueriesItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "QueryDataQueries",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "QueryData",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "QueryMention": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "queryMentionType",
            "key": "type",
            "schema": {
              "generatedName": "QueryMentionType",
              "description": "The type of mention (e.g., transcript, document).",
              "value": {
                "description": "The type of mention (e.g., transcript, document).",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QueryMentionType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "queryMentionData",
            "key": "data",
            "schema": {
              "generatedName": "QueryMentionData",
              "value": {
                "generatedName": "QueryMentionData",
                "schema": "MentionData",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "QueryMention",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "QuerySource": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "querySourceFavicon",
            "key": "favicon",
            "schema": {
              "generatedName": "QuerySourceFavicon",
              "description": "The favicon URL of the source.",
              "value": {
                "description": "The favicon URL of the source.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QuerySourceFavicon",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "querySourceTitle",
            "key": "title",
            "schema": {
              "generatedName": "QuerySourceTitle",
              "description": "The title of the source.",
              "value": {
                "description": "The title of the source.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QuerySourceTitle",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "querySourceUrl",
            "key": "url",
            "schema": {
              "generatedName": "QuerySourceUrl",
              "description": "The URL of the source.",
              "value": {
                "description": "The URL of the source.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QuerySourceUrl",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "querySourceType",
            "key": "type",
            "schema": {
              "generatedName": "QuerySourceType",
              "description": "The type of the source (e.g., PDF, Web).",
              "value": {
                "description": "The type of the source (e.g., PDF, Web).",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QuerySourceType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "querySourceDescription",
            "key": "description",
            "schema": {
              "generatedName": "QuerySourceDescription",
              "description": "A brief description of the source.",
              "value": {
                "description": "A brief description of the source.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "QuerySourceDescription",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "QuerySource",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestAlign": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestAlignSourceDocument",
            "key": "sourceDocument",
            "schema": {
              "description": "The content of the source document.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestAlignSourceDocument",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestAlignTargetDocument",
            "key": "targetDocument",
            "schema": {
              "description": "The content of the target document.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestAlignTargetDocument",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestAlignCompareSegments",
            "key": "compareSegments",
            "schema": {
              "generatedName": "RequestAlignCompareSegments",
              "description": "Indicates if segments from the source should be compared with the target.",
              "value": {
                "description": "Indicates if segments from the source should be compared with the target.",
                "schema": {
                  "example": false,
                  "type": "boolean"
                },
                "generatedName": "RequestAlignCompareSegments",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestAlign",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestClassificationCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestClassificationCreateInputs",
            "key": "inputs",
            "schema": {
              "generatedName": "RequestClassificationCreateInputs",
              "value": {
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "RequestClassificationCreateInputsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "RequestClassificationCreateInputs",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestClassificationCreateTaskId",
            "key": "taskId",
            "schema": {
              "generatedName": "RequestClassificationCreateTaskId",
              "value": {
                "generatedName": "RequestClassificationCreateTaskId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestClassificationCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestCodeUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestCodeUpdateCode",
            "key": "code",
            "schema": {
              "generatedName": "RequestCodeUpdateCode",
              "description": "The medical code to update",
              "value": {
                "description": "The medical code to update",
                "schema": {
                  "example": "W0231",
                  "type": "string"
                },
                "generatedName": "RequestCodeUpdateCode",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestCodeUpdateAdditionalCodes",
            "key": "additionalCodes",
            "schema": {
              "generatedName": "RequestCodeUpdateAdditionalCodes",
              "description": "List of additional codes",
              "value": {
                "description": "List of additional codes",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "RequestCodeUpdateAdditionalCodesItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "RequestCodeUpdateAdditionalCodes",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestCodeUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestCodesPredict": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestCodesPredictModelName",
            "key": "modelName",
            "schema": {
              "description": "The model name used for code predictions",
              "schema": {
                "example": "\"geography_modelName (Latest)\" | \"geography_modelName_version\"",
                "type": "string"
              },
              "generatedName": "RequestCodesPredictModelName",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestCodesPredictContext",
            "key": "context",
            "schema": {
              "description": "Context object containing type and data",
              "generatedName": "RequestCodesPredictContext",
              "schema": "CodesContext",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestCodesPredictExistingCodes",
            "key": "existingCodes",
            "schema": {
              "generatedName": "RequestCodesPredictExistingCodes",
              "description": "List of pre-selected codes before interaction",
              "value": {
                "description": "List of pre-selected codes before interaction",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "RequestCodesPredictExistingCodesItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "RequestCodesPredictExistingCodes",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestCodesPredict",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestCodesUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestCodesUpdateFinalCodes",
            "key": "finalCodes",
            "schema": {
              "generatedName": "RequestCodesUpdateFinalCodes",
              "description": "List of final codes",
              "value": {
                "description": "List of final codes",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "requestCodesUpdateFinalCodesItemCode",
                      "key": "code",
                      "schema": {
                        "generatedName": "RequestCodesUpdateFinalCodesItemCode",
                        "description": "The medical code to update",
                        "value": {
                          "description": "The medical code to update",
                          "schema": {
                            "example": "W0231",
                            "type": "string"
                          },
                          "generatedName": "RequestCodesUpdateFinalCodesItemCode",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "requestCodesUpdateFinalCodesItemAdditionalCodes",
                      "key": "additionalCodes",
                      "schema": {
                        "generatedName": "RequestCodesUpdateFinalCodesItemAdditionalCodes",
                        "description": "List of additional codes",
                        "value": {
                          "description": "List of additional codes",
                          "value": {
                            "schema": {
                              "type": "string"
                            },
                            "generatedName": "RequestCodesUpdateFinalCodesItemAdditionalCodesItem",
                            "groupName": [],
                            "type": "primitive"
                          },
                          "generatedName": "RequestCodesUpdateFinalCodesItemAdditionalCodes",
                          "groupName": [],
                          "type": "array"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "RequestCodesUpdateFinalCodesItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "RequestCodesUpdateFinalCodes",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestCodesUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestDocumentCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestDocumentCreateContext",
            "key": "context",
            "schema": {
              "description": "An array of context objects.",
              "value": {
                "allOf": [],
                "properties": [
                  {
                    "conflict": {},
                    "generatedName": "requestDocumentCreateContextItemType",
                    "key": "type",
                    "schema": {
                      "description": "The type of context data.",
                      "generatedName": "RequestDocumentCreateContextItemType",
                      "schema": "V2DocumentContextTypeEnum",
                      "source": {
                        "file": "../swagger.json",
                        "type": "openapi"
                      },
                      "type": "reference"
                    },
                    "audiences": [],
                    "readonly": false,
                    "writeonly": false
                  },
                  {
                    "conflict": {},
                    "generatedName": "requestDocumentCreateContextItemData",
                    "key": "data",
                    "schema": {
                      "description": "The actual data, which can be an array of facts, a transcript, or a string.",
                      "generatedName": "RequestDocumentCreateContextItemData",
                      "schema": "DocumentContextData",
                      "source": {
                        "file": "../swagger.json",
                        "type": "openapi"
                      },
                      "type": "reference"
                    },
                    "audiences": [],
                    "readonly": false,
                    "writeonly": false
                  }
                ],
                "allOfPropertyConflicts": [],
                "generatedName": "RequestDocumentCreateContextItem",
                "groupName": [],
                "additionalProperties": false,
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "object"
              },
              "generatedName": "RequestDocumentCreateContext",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentCreateTemplateKey",
            "key": "templateKey",
            "schema": {
              "description": "The key of the template that informs on what kind of document is to be generated.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestDocumentCreateTemplateKey",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentCreateTemplate",
            "key": "template",
            "schema": {
              "generatedName": "RequestDocumentCreateTemplate",
              "value": {
                "description": "Template details if the template should be generated during the request.",
                "generatedName": "RequestDocumentCreateTemplate",
                "schema": "DocumentTemplate",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentCreateName",
            "key": "name",
            "schema": {
              "generatedName": "RequestDocumentCreateName",
              "description": "An optional name for the document.",
              "value": {
                "description": "An optional name for the document.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestDocumentCreateName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentCreateModelName",
            "key": "modelName",
            "schema": {
              "generatedName": "RequestDocumentCreateModelName",
              "value": {
                "schema": {
                  "example": "\"model_name (Latest)\" | \"model_name_version\"",
                  "type": "string"
                },
                "generatedName": "RequestDocumentCreateModelName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentCreateOutputLanguage",
            "key": "outputLanguage",
            "schema": {
              "description": "The language in which the document will be generated. Check https://docs.corti.ai/about/languages for more.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestDocumentCreateOutputLanguage",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestDocumentCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestDocumentSectionUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestDocumentSectionUpdateKey",
            "key": "key",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestDocumentSectionUpdateKey",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentSectionUpdateName",
            "key": "name",
            "schema": {
              "generatedName": "RequestDocumentSectionUpdateName",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestDocumentSectionUpdateName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentSectionUpdateText",
            "key": "text",
            "schema": {
              "generatedName": "RequestDocumentSectionUpdateText",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestDocumentSectionUpdateText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentSectionUpdateSort",
            "key": "sort",
            "schema": {
              "generatedName": "RequestDocumentSectionUpdateSort",
              "value": {
                "schema": {
                  "type": "int"
                },
                "generatedName": "RequestDocumentSectionUpdateSort",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestDocumentSectionUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestDocumentUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestDocumentUpdateName",
            "key": "name",
            "schema": {
              "generatedName": "RequestDocumentUpdateName",
              "description": "An optional name for the document.",
              "value": {
                "description": "An optional name for the document.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestDocumentUpdateName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestDocumentUpdateSections",
            "key": "sections",
            "schema": {
              "generatedName": "RequestDocumentUpdateSections",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "requestDocumentUpdateSectionsItemKey",
                      "key": "key",
                      "schema": {
                        "schema": {
                          "type": "string"
                        },
                        "generatedName": "RequestDocumentUpdateSectionsItemKey",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "requestDocumentUpdateSectionsItemName",
                      "key": "name",
                      "schema": {
                        "generatedName": "RequestDocumentUpdateSectionsItemName",
                        "value": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "RequestDocumentUpdateSectionsItemName",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "requestDocumentUpdateSectionsItemText",
                      "key": "text",
                      "schema": {
                        "generatedName": "RequestDocumentUpdateSectionsItemText",
                        "value": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "RequestDocumentUpdateSectionsItemText",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "requestDocumentUpdateSectionsItemSort",
                      "key": "sort",
                      "schema": {
                        "generatedName": "RequestDocumentUpdateSectionsItemSort",
                        "value": {
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "RequestDocumentUpdateSectionsItemSort",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "RequestDocumentUpdateSectionsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "RequestDocumentUpdateSections",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestDocumentUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestEncounterPeriodUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestEncounterPeriodUpdateStartedAt",
            "key": "startedAt",
            "schema": {
              "description": "The UTC timestamp indicating when the encounter started.",
              "schema": {
                "type": "datetime"
              },
              "generatedName": "RequestEncounterPeriodUpdateStartedAt",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestEncounterPeriodUpdateEndedAt",
            "key": "endedAt",
            "schema": {
              "generatedName": "RequestEncounterPeriodUpdateEndedAt",
              "description": "The UTC timestamp indicating when the encounter ended.",
              "value": {
                "description": "The UTC timestamp indicating when the encounter ended.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "RequestEncounterPeriodUpdateEndedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestEncounterPeriodUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestEncounterUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestEncounterUpdateIdentifier",
            "key": "identifier",
            "schema": {
              "generatedName": "RequestEncounterUpdateIdentifier",
              "description": "A unique identifier for the encounter.",
              "value": {
                "description": "A unique identifier for the encounter.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestEncounterUpdateIdentifier",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestEncounterUpdateStatus",
            "key": "status",
            "schema": {
              "generatedName": "RequestEncounterUpdateStatus",
              "value": {
                "description": "The current status of the encounter.",
                "generatedName": "RequestEncounterUpdateStatus",
                "schema": "V2EncounterStatusEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestEncounterUpdateType",
            "key": "type",
            "schema": {
              "generatedName": "RequestEncounterUpdateType",
              "value": {
                "description": "The type of encounter.",
                "generatedName": "RequestEncounterUpdateType",
                "schema": "V2EncounterTypeEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestEncounterUpdatePeriod",
            "key": "period",
            "schema": {
              "generatedName": "RequestEncounterUpdatePeriod",
              "value": {
                "description": "Details of when the encounter took place, including start and optional end timestamps with timezone offsets.",
                "generatedName": "RequestEncounterUpdatePeriod",
                "schema": "RequestEncounterPeriodUpdate",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestEncounterUpdateTitle",
            "key": "title",
            "schema": {
              "generatedName": "RequestEncounterUpdateTitle",
              "description": "A title providing context about the encounter.",
              "value": {
                "description": "A title providing context about the encounter.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestEncounterUpdateTitle",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestEncounterUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestFactCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestFactCreateText",
            "key": "text",
            "schema": {
              "description": "The text content of the fact.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestFactCreateText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestFactCreateGroup",
            "key": "group",
            "schema": {
              "description": "The key identifying the group to which the fact belongs.",
              "schema": {
                "example": "other",
                "type": "string"
              },
              "generatedName": "RequestFactCreateGroup",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestFactCreateSource",
            "key": "source",
            "schema": {
              "generatedName": "RequestFactCreateSource",
              "value": {
                "description": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                "generatedName": "RequestFactCreateSource",
                "schema": "V2SourceEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestFactCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestFactUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestFactUpdateText",
            "key": "text",
            "schema": {
              "description": "The updated text of the fact.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestFactUpdateText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestFactUpdateGroup",
            "key": "group",
            "schema": {
              "generatedName": "RequestFactUpdateGroup",
              "description": "The updated group key for the fact.",
              "value": {
                "description": "The updated group key for the fact.",
                "schema": {
                  "example": "other",
                  "type": "string"
                },
                "generatedName": "RequestFactUpdateGroup",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestFactUpdateSource",
            "key": "source",
            "schema": {
              "description": "The updated origin of the fact.",
              "generatedName": "RequestFactUpdateSource",
              "schema": "V2SourceEnum",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestFactUpdateIsDiscarded",
            "key": "isDiscarded",
            "schema": {
              "generatedName": "RequestFactUpdateIsDiscarded",
              "description": "Indicates whether the fact should be marked as discarded.",
              "value": {
                "description": "Indicates whether the fact should be marked as discarded.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "RequestFactUpdateIsDiscarded",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestFactUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestFactsCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestFactsCreateFacts",
            "key": "facts",
            "schema": {
              "description": "A list of facts to be created.",
              "value": {
                "allOf": [],
                "properties": [
                  {
                    "conflict": {},
                    "generatedName": "requestFactsCreateFactsItemText",
                    "key": "text",
                    "schema": {
                      "description": "The text content of the fact.",
                      "schema": {
                        "type": "string"
                      },
                      "generatedName": "RequestFactsCreateFactsItemText",
                      "groupName": [],
                      "type": "primitive"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "requestFactsCreateFactsItemGroup",
                    "key": "group",
                    "schema": {
                      "description": "The key identifying the group to which the fact belongs.",
                      "schema": {
                        "example": "other",
                        "type": "string"
                      },
                      "generatedName": "RequestFactsCreateFactsItemGroup",
                      "groupName": [],
                      "type": "primitive"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "requestFactsCreateFactsItemSource",
                    "key": "source",
                    "schema": {
                      "generatedName": "RequestFactsCreateFactsItemSource",
                      "value": {
                        "description": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                        "generatedName": "RequestFactsCreateFactsItemSource",
                        "schema": "V2SourceEnum",
                        "source": {
                          "file": "../swagger.json",
                          "type": "openapi"
                        },
                        "type": "reference"
                      },
                      "type": "optional"
                    },
                    "audiences": [],
                    "readonly": false,
                    "writeonly": false
                  }
                ],
                "allOfPropertyConflicts": [],
                "generatedName": "RequestFactsCreateFactsItem",
                "groupName": [],
                "additionalProperties": false,
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "object"
              },
              "generatedName": "RequestFactsCreateFacts",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestFactsCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestFactsUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestFactsUpdateFacts",
            "key": "facts",
            "schema": {
              "description": "A list of facts to be updated.",
              "value": {
                "allOf": [],
                "properties": [
                  {
                    "conflict": {},
                    "generatedName": "requestFactsUpdateFactsItemFactId",
                    "key": "factId",
                    "schema": {
                      "description": "The unique identifier of the fact to be updated.",
                      "generatedName": "RequestFactsUpdateFactsItemFactId",
                      "schema": "UUID",
                      "source": {
                        "file": "../swagger.json",
                        "type": "openapi"
                      },
                      "type": "reference"
                    },
                    "audiences": [],
                    "readonly": false,
                    "writeonly": false
                  },
                  {
                    "conflict": {},
                    "generatedName": "requestFactsUpdateFactsItemIsDiscarded",
                    "key": "isDiscarded",
                    "schema": {
                      "generatedName": "RequestFactsUpdateFactsItemIsDiscarded",
                      "description": "Indicates whether the fact should be discarded.",
                      "value": {
                        "description": "Indicates whether the fact should be discarded.",
                        "schema": {
                          "type": "boolean"
                        },
                        "generatedName": "RequestFactsUpdateFactsItemIsDiscarded",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "optional"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "requestFactsUpdateFactsItemText",
                    "key": "text",
                    "schema": {
                      "generatedName": "RequestFactsUpdateFactsItemText",
                      "description": "The updated text content of the fact.",
                      "value": {
                        "description": "The updated text content of the fact.",
                        "schema": {
                          "type": "string"
                        },
                        "generatedName": "RequestFactsUpdateFactsItemText",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "optional"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "requestFactsUpdateFactsItemGroup",
                    "key": "group",
                    "schema": {
                      "generatedName": "RequestFactsUpdateFactsItemGroup",
                      "description": "The updated group key for the fact.",
                      "value": {
                        "description": "The updated group key for the fact.",
                        "schema": {
                          "example": "other",
                          "type": "string"
                        },
                        "generatedName": "RequestFactsUpdateFactsItemGroup",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "optional"
                    },
                    "audiences": []
                  }
                ],
                "allOfPropertyConflicts": [],
                "generatedName": "RequestFactsUpdateFactsItem",
                "groupName": [],
                "additionalProperties": false,
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "object"
              },
              "generatedName": "RequestFactsUpdateFacts",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestFactsUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestFactsUpdateSingle": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestFactsUpdateSingleFactId",
            "key": "factId",
            "schema": {
              "description": "The unique identifier of the fact to be updated.",
              "generatedName": "RequestFactsUpdateSingleFactId",
              "schema": "UUID",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestFactsUpdateSingleIsDiscarded",
            "key": "isDiscarded",
            "schema": {
              "generatedName": "RequestFactsUpdateSingleIsDiscarded",
              "description": "Indicates whether the fact should be discarded.",
              "value": {
                "description": "Indicates whether the fact should be discarded.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "RequestFactsUpdateSingleIsDiscarded",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestFactsUpdateSingleText",
            "key": "text",
            "schema": {
              "generatedName": "RequestFactsUpdateSingleText",
              "description": "The updated text content of the fact.",
              "value": {
                "description": "The updated text content of the fact.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestFactsUpdateSingleText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestFactsUpdateSingleGroup",
            "key": "group",
            "schema": {
              "generatedName": "RequestFactsUpdateSingleGroup",
              "description": "The updated group key for the fact.",
              "value": {
                "description": "The updated group key for the fact.",
                "schema": {
                  "example": "other",
                  "type": "string"
                },
                "generatedName": "RequestFactsUpdateSingleGroup",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestFactsUpdateSingle",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestGuidelines": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestGuidelinesQuery",
            "key": "query",
            "schema": {
              "description": "The text-based query from the user.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestGuidelinesQuery",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestGuidelinesContext",
            "key": "context",
            "schema": {
              "description": "An array of contexts, such as documents or relevant segments.",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestGuidelinesContextItem",
                "groupName": [],
                "type": "primitive"
              },
              "generatedName": "RequestGuidelinesContext",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestGuidelinesSourceIds",
            "key": "sourceIds",
            "schema": {
              "description": "An array of source IDs to narrow down the search.",
              "value": {
                "generatedName": "RequestGuidelinesSourceIdsItem",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "RequestGuidelinesSourceIds",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestGuidelines",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestInteractionCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestInteractionCreateAssignedUserId",
            "key": "assignedUserId",
            "schema": {
              "generatedName": "RequestInteractionCreateAssignedUserId",
              "value": {
                "description": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
                "generatedName": "RequestInteractionCreateAssignedUserId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestInteractionCreateEncounter",
            "key": "encounter",
            "schema": {
              "description": "Details about the encounter.",
              "generatedName": "RequestInteractionCreateEncounter",
              "schema": "Encounter",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestInteractionCreatePatient",
            "key": "patient",
            "schema": {
              "generatedName": "RequestInteractionCreatePatient",
              "value": {
                "description": "Optional patient details.",
                "generatedName": "RequestInteractionCreatePatient",
                "schema": "Patient",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestInteractionCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestInteractionUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestInteractionUpdateAssignedUserId",
            "key": "assignedUserId",
            "schema": {
              "generatedName": "RequestInteractionUpdateAssignedUserId",
              "value": {
                "description": "The unique identifier of the medical professional responsible for this interaction.  If nulled, automatically set to a uuid.",
                "generatedName": "RequestInteractionUpdateAssignedUserId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestInteractionUpdateEncounter",
            "key": "encounter",
            "schema": {
              "generatedName": "RequestInteractionUpdateEncounter",
              "value": {
                "description": "Details of the encounter being updated.",
                "generatedName": "RequestInteractionUpdateEncounter",
                "schema": "RequestEncounterUpdate",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestInteractionUpdatePatient",
            "key": "patient",
            "schema": {
              "generatedName": "RequestInteractionUpdatePatient",
              "value": {
                "description": "Patient-related updates.",
                "generatedName": "RequestInteractionUpdatePatient",
                "schema": "RequestPatientUpdate",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestInteractionUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestMention": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestMentionQuery",
            "key": "query",
            "schema": {
              "description": "The text-based query from the user.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestMentionQuery",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestMentionReferenceTexts",
            "key": "referenceTexts",
            "schema": {
              "description": "An array of reference texts where the mentions will be searched.",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestMentionReferenceTextsItem",
                "groupName": [],
                "type": "primitive"
              },
              "generatedName": "RequestMentionReferenceTexts",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestMention",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestParticipantCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestParticipantCreateChannel",
            "key": "channel",
            "schema": {
              "description": "The audio channel to associate with a participant role.",
              "schema": {
                "type": "int"
              },
              "generatedName": "RequestParticipantCreateChannel",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestParticipantCreateRole",
            "key": "role",
            "schema": {
              "generatedName": "RequestParticipantCreateRole",
              "schema": "V2TranscriptParticipantRoleEnum",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestParticipantCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestPatientUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestPatientUpdateIdentifier",
            "key": "identifier",
            "schema": {
              "generatedName": "RequestPatientUpdateIdentifier",
              "description": "FHIR reference to patient identifier.",
              "value": {
                "description": "FHIR reference to patient identifier.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestPatientUpdateIdentifier",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestPatientUpdateName",
            "key": "name",
            "schema": {
              "generatedName": "RequestPatientUpdateName",
              "description": "FHIR reference to Text representation of the full name.",
              "value": {
                "description": "FHIR reference to Text representation of the full name.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestPatientUpdateName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestPatientUpdateGender",
            "key": "gender",
            "schema": {
              "generatedName": "RequestPatientUpdateGender",
              "value": {
                "description": "FHIR reference to patient gender.",
                "generatedName": "RequestPatientUpdateGender",
                "schema": "V2GenderEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestPatientUpdateBirthDate",
            "key": "birthDate",
            "schema": {
              "generatedName": "RequestPatientUpdateBirthDate",
              "description": "FHIR reference to patient birth date.",
              "value": {
                "description": "FHIR reference to patient birth date.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "RequestPatientUpdateBirthDate",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestPatientUpdatePronouns",
            "key": "pronouns",
            "schema": {
              "generatedName": "RequestPatientUpdatePronouns",
              "description": "FHIR reference to patient extension Individual Pronouns.",
              "value": {
                "description": "FHIR reference to patient extension Individual Pronouns.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestPatientUpdatePronouns",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestPatientUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestQuery": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestQueryQuery",
            "key": "query",
            "schema": {
              "description": "The text-based query from the user.",
              "schema": {
                "example": "What are the key points from the latest guidelines?",
                "type": "string"
              },
              "generatedName": "RequestQueryQuery",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestQueryQueryContext",
            "key": "queryContext",
            "schema": {
              "generatedName": "RequestQueryQueryContext",
              "description": "A specific document or focus context for the query.",
              "value": {
                "description": "A specific document or focus context for the query.",
                "schema": {
                  "example": "doc123",
                  "type": "string"
                },
                "generatedName": "RequestQueryQueryContext",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestQueryFocusContexts",
            "key": "focusContexts",
            "schema": {
              "generatedName": "RequestQueryFocusContexts",
              "description": "A list of additional focus contexts or documents.",
              "value": {
                "description": "A list of additional focus contexts or documents.",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "RequestQueryFocusContextsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "RequestQueryFocusContexts",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestQuery",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestQuestionPrompts": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestQuestionPromptsContext",
            "key": "context",
            "schema": {
              "description": "The context in which the query is being made.",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestQuestionPromptsContextItem",
                "groupName": [],
                "type": "primitive"
              },
              "generatedName": "RequestQuestionPromptsContext",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestQuestionPromptsQuery",
            "key": "query",
            "schema": {
              "generatedName": "RequestQuestionPromptsQuery",
              "description": "The query for which the questions are being generated (optional).",
              "value": {
                "description": "The query for which the questions are being generated (optional).",
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestQuestionPromptsQuery",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestQuestionPrompts",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestTranscriptAnonymize": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestTranscriptAnonymizeInputLanguage",
            "key": "inputLanguage",
            "schema": {
              "generatedName": "RequestTranscriptAnonymizeInputLanguage",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "RequestTranscriptAnonymizeInputLanguage",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestTranscriptAnonymizeTranscript",
            "key": "transcript",
            "schema": {
              "generatedName": "RequestTranscriptAnonymizeTranscript",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "requestTranscriptAnonymizeTranscriptItemValue",
                      "key": "value",
                      "schema": {
                        "generatedName": "RequestTranscriptAnonymizeTranscriptItemValue",
                        "value": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "RequestTranscriptAnonymizeTranscriptItemValue",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "requestTranscriptAnonymizeTranscriptItemRole",
                      "key": "role",
                      "schema": {
                        "generatedName": "RequestTranscriptAnonymizeTranscriptItemRole",
                        "value": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "RequestTranscriptAnonymizeTranscriptItemRole",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "RequestTranscriptAnonymizeTranscriptItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "RequestTranscriptAnonymizeTranscript",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestTranscriptAnonymize",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "RequestTranscriptCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "requestTranscriptCreateRecordingId",
            "key": "recordingId",
            "schema": {
              "description": "The unique identifier for the recording.",
              "generatedName": "RequestTranscriptCreateRecordingId",
              "schema": "UUID",
              "source": {
                "file": "../swagger.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "requestTranscriptCreatePrimaryLanguage",
            "key": "primaryLanguage",
            "schema": {
              "description": "The primary spoken language of the recording. Check https://docs.corti.ai/about/languages for more.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestTranscriptCreatePrimaryLanguage",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestTranscriptCreateIsDictation",
            "key": "isDictation",
            "schema": {
              "generatedName": "RequestTranscriptCreateIsDictation",
              "description": "Indicates whether spoken dictation commands should be converted to punctuation (e.g., 'comma' → ',').",
              "value": {
                "description": "Indicates whether spoken dictation commands should be converted to punctuation (e.g., 'comma' → ',').",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "RequestTranscriptCreateIsDictation",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestTranscriptCreateIsMultichannel",
            "key": "isMultichannel",
            "schema": {
              "generatedName": "RequestTranscriptCreateIsMultichannel",
              "description": "If true, each audio channel is transcribed separately.",
              "value": {
                "description": "If true, each audio channel is transcribed separately.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "RequestTranscriptCreateIsMultichannel",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestTranscriptCreateDiarize",
            "key": "diarize",
            "schema": {
              "generatedName": "RequestTranscriptCreateDiarize",
              "description": "If true, separates speakers within an audio channel returning incrementing ids for transcript segments.",
              "value": {
                "description": "If true, separates speakers within an audio channel returning incrementing ids for transcript segments.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "RequestTranscriptCreateDiarize",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestTranscriptCreateParticipants",
            "key": "participants",
            "schema": {
              "generatedName": "RequestTranscriptCreateParticipants",
              "description": "An array of participants, each specifying a role and an assigned audio channel in the recording. Leave empty when shouldDiarize: true",
              "value": {
                "description": "An array of participants, each specifying a role and an assigned audio channel in the recording. Leave empty when shouldDiarize: true",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "requestTranscriptCreateParticipantsItemChannel",
                      "key": "channel",
                      "schema": {
                        "description": "The audio channel to associate with a participant role.",
                        "schema": {
                          "type": "int"
                        },
                        "generatedName": "RequestTranscriptCreateParticipantsItemChannel",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "requestTranscriptCreateParticipantsItemRole",
                      "key": "role",
                      "schema": {
                        "generatedName": "RequestTranscriptCreateParticipantsItemRole",
                        "schema": "V2TranscriptParticipantRoleEnum",
                        "source": {
                          "file": "../swagger.json",
                          "type": "openapi"
                        },
                        "type": "reference"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "RequestTranscriptCreateParticipantsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "RequestTranscriptCreateParticipants",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "requestTranscriptCreateModelName",
            "key": "modelName",
            "schema": {
              "description": "Can be \"base\", \"enhanced\", \"premier\". By default, only the highest tier is accessible. Check https://docs.corti.ai/about/languages for more.",
              "schema": {
                "type": "string"
              },
              "generatedName": "RequestTranscriptCreateModelName",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RequestTranscriptCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseAlign": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseAlignAlignmentPercentage",
            "key": "alignmentPercentage",
            "schema": {
              "generatedName": "ResponseAlignAlignmentPercentage",
              "description": "Alignment percentage between the source and target documents.",
              "value": {
                "description": "Alignment percentage between the source and target documents.",
                "schema": {
                  "type": "double"
                },
                "generatedName": "ResponseAlignAlignmentPercentage",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseAlignAlignedSegments",
            "key": "alignedSegments",
            "schema": {
              "generatedName": "ResponseAlignAlignedSegments",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseAlignAlignedSegmentsItemTargetSegment",
                      "key": "targetSegment",
                      "schema": {
                        "generatedName": "ResponseAlignAlignedSegmentsItemTargetSegment",
                        "value": {
                          "generatedName": "ResponseAlignAlignedSegmentsItemTargetSegment",
                          "schema": "TargetSegment",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseAlignAlignedSegmentsItemSourceReference",
                      "key": "sourceReference",
                      "schema": {
                        "generatedName": "ResponseAlignAlignedSegmentsItemSourceReference",
                        "value": {
                          "value": {
                            "allOf": [],
                            "properties": [
                              {
                                "conflict": {},
                                "generatedName": "responseAlignAlignedSegmentsItemSourceReferenceItemText",
                                "key": "text",
                                "schema": {
                                  "generatedName": "ResponseAlignAlignedSegmentsItemSourceReferenceItemText",
                                  "description": "The content of the matching segment in the source document.",
                                  "value": {
                                    "description": "The content of the matching segment in the source document.",
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseAlignAlignedSegmentsItemSourceReferenceItemText",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseAlignAlignedSegmentsItemSourceReferenceItemRange",
                                "key": "range",
                                "schema": {
                                  "generatedName": "ResponseAlignAlignedSegmentsItemSourceReferenceItemRange",
                                  "description": "Start and end indices of the segment in the source document.",
                                  "value": {
                                    "description": "Start and end indices of the segment in the source document.",
                                    "value": {
                                      "schema": {
                                        "type": "int"
                                      },
                                      "generatedName": "ResponseAlignAlignedSegmentsItemSourceReferenceItemRangeItem",
                                      "groupName": [],
                                      "type": "primitive"
                                    },
                                    "generatedName": "ResponseAlignAlignedSegmentsItemSourceReferenceItemRange",
                                    "groupName": [],
                                    "type": "array"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              }
                            ],
                            "allOfPropertyConflicts": [],
                            "generatedName": "ResponseAlignAlignedSegmentsItemSourceReferenceItem",
                            "groupName": [],
                            "additionalProperties": false,
                            "source": {
                              "file": "../swagger.json",
                              "type": "openapi"
                            },
                            "type": "object"
                          },
                          "generatedName": "ResponseAlignAlignedSegmentsItemSourceReference",
                          "groupName": [],
                          "type": "array"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseAlignAlignedSegmentsItemAlignmentPercentage",
                      "key": "alignmentPercentage",
                      "schema": {
                        "generatedName": "ResponseAlignAlignedSegmentsItemAlignmentPercentage",
                        "description": "Alignment percentage between the target and source segment.",
                        "value": {
                          "description": "Alignment percentage between the target and source segment.",
                          "schema": {
                            "type": "double"
                          },
                          "generatedName": "ResponseAlignAlignedSegmentsItemAlignmentPercentage",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseAlignAlignedSegmentsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseAlignAlignedSegments",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseAlign",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseAllTemplateSections": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseAllTemplateSectionsData",
            "key": "data",
            "schema": {
              "generatedName": "ResponseAllTemplateSectionsData",
              "description": "List of filtered template sections",
              "value": {
                "description": "List of filtered template sections",
                "value": {
                  "generatedName": "ResponseAllTemplateSectionsDataItem",
                  "schema": "Section",
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "ResponseAllTemplateSectionsData",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseAllTemplateSections",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseAllTemplates": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseAllTemplatesData",
            "key": "data",
            "schema": {
              "generatedName": "ResponseAllTemplatesData",
              "description": "List of filtered templates",
              "value": {
                "description": "List of filtered templates",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseAllTemplatesDataItemDateUpdated",
                      "key": "date_updated",
                      "schema": {
                        "generatedName": "ResponseAllTemplatesDataItemDateUpdated",
                        "description": "The timestamp when the template was updated.",
                        "value": {
                          "description": "The timestamp when the template was updated.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseAllTemplatesDataItemDateUpdated",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseAllTemplatesDataItemName",
                      "key": "name",
                      "schema": {
                        "generatedName": "ResponseAllTemplatesDataItemName",
                        "description": "Name of the template",
                        "value": {
                          "description": "Name of the template",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseAllTemplatesDataItemName",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseAllTemplatesDataItemDescription",
                      "key": "description",
                      "schema": {
                        "generatedName": "ResponseAllTemplatesDataItemDescription",
                        "description": "Description of the template",
                        "value": {
                          "description": "Description of the template",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseAllTemplatesDataItemDescription",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseAllTemplatesDataItemKey",
                      "key": "key",
                      "schema": {
                        "generatedName": "ResponseAllTemplatesDataItemKey",
                        "description": "Unique key for the template",
                        "value": {
                          "description": "Unique key for the template",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseAllTemplatesDataItemKey",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseAllTemplatesDataItemStatus",
                      "key": "status",
                      "schema": {
                        "generatedName": "ResponseAllTemplatesDataItemStatus",
                        "description": "Status of the template.",
                        "value": {
                          "description": "Status of the template.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseAllTemplatesDataItemStatus",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseAllTemplatesDataItemTemplateSections",
                      "key": "template_sections",
                      "schema": {
                        "generatedName": "ResponseAllTemplatesDataItemTemplateSections",
                        "description": "List of sections included in the template",
                        "value": {
                          "description": "List of sections included in the template",
                          "value": {
                            "allOf": [],
                            "properties": [
                              {
                                "conflict": {},
                                "generatedName": "responseAllTemplatesDataItemTemplateSectionsItemSort",
                                "key": "sort",
                                "schema": {
                                  "generatedName": "ResponseAllTemplatesDataItemTemplateSectionsItemSort",
                                  "description": "Sort order of the section within the template",
                                  "value": {
                                    "description": "Sort order of the section within the template",
                                    "schema": {
                                      "type": "int"
                                    },
                                    "generatedName": "ResponseAllTemplatesDataItemTemplateSectionsItemSort",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseAllTemplatesDataItemTemplateSectionsItemSectionsId",
                                "key": "sections_id",
                                "schema": {
                                  "generatedName": "ResponseAllTemplatesDataItemTemplateSectionsItemSectionsId",
                                  "value": {
                                    "description": "The section details",
                                    "generatedName": "ResponseAllTemplatesDataItemTemplateSectionsItemSectionsId",
                                    "schema": "Section",
                                    "source": {
                                      "file": "../swagger.json",
                                      "type": "openapi"
                                    },
                                    "type": "reference"
                                  },
                                  "type": "optional"
                                },
                                "audiences": [],
                                "readonly": false,
                                "writeonly": false
                              }
                            ],
                            "allOfPropertyConflicts": [],
                            "generatedName": "ResponseAllTemplatesDataItemTemplateSectionsItem",
                            "groupName": [],
                            "additionalProperties": false,
                            "source": {
                              "file": "../swagger.json",
                              "type": "openapi"
                            },
                            "type": "object"
                          },
                          "generatedName": "ResponseAllTemplatesDataItemTemplateSections",
                          "groupName": [],
                          "type": "array"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseAllTemplatesDataItemTranslations",
                      "key": "translations",
                      "schema": {
                        "generatedName": "ResponseAllTemplatesDataItemTranslations",
                        "description": "Available translations for the template",
                        "value": {
                          "description": "Available translations for the template",
                          "value": {
                            "allOf": [],
                            "properties": [
                              {
                                "conflict": {},
                                "generatedName": "responseAllTemplatesDataItemTranslationsItemLanguagesId",
                                "key": "languages_id",
                                "schema": {
                                  "generatedName": "ResponseAllTemplatesDataItemTranslationsItemLanguagesId",
                                  "description": "Language identifier",
                                  "value": {
                                    "description": "Language identifier",
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseAllTemplatesDataItemTranslationsItemLanguagesId",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseAllTemplatesDataItemTranslationsItemName",
                                "key": "name",
                                "schema": {
                                  "generatedName": "ResponseAllTemplatesDataItemTranslationsItemName",
                                  "description": "Localized name of the template",
                                  "value": {
                                    "description": "Localized name of the template",
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseAllTemplatesDataItemTranslationsItemName",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseAllTemplatesDataItemTranslationsItemDescription",
                                "key": "description",
                                "schema": {
                                  "generatedName": "ResponseAllTemplatesDataItemTranslationsItemDescription",
                                  "description": "Localized description of the template",
                                  "value": {
                                    "description": "Localized description of the template",
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseAllTemplatesDataItemTranslationsItemDescription",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              }
                            ],
                            "allOfPropertyConflicts": [],
                            "generatedName": "ResponseAllTemplatesDataItemTranslationsItem",
                            "groupName": [],
                            "additionalProperties": false,
                            "source": {
                              "file": "../swagger.json",
                              "type": "openapi"
                            },
                            "type": "object"
                          },
                          "generatedName": "ResponseAllTemplatesDataItemTranslations",
                          "groupName": [],
                          "type": "array"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseAllTemplatesDataItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseAllTemplatesData",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseAllTemplates",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseClassificationCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseClassificationCreateResult",
            "key": "result",
            "schema": {
              "generatedName": "ResponseClassificationCreateResult",
              "value": {
                "generatedName": "ResponseClassificationCreateResult",
                "schema": "ClassificationResult",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseClassificationCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseCodesList": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseCodesListCodes",
            "key": "codes",
            "schema": {
              "generatedName": "ResponseCodesListCodes",
              "description": "List of medical codes",
              "value": {
                "description": "List of medical codes",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseCodesListCodesItemSystem",
                      "key": "system",
                      "schema": {
                        "generatedName": "ResponseCodesListCodesItemSystem",
                        "description": "The coding system used",
                        "value": {
                          "description": "The coding system used",
                          "schema": {
                            "example": "ICD-10",
                            "type": "string"
                          },
                          "generatedName": "ResponseCodesListCodesItemSystem",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseCodesListCodesItemCode",
                      "key": "code",
                      "schema": {
                        "generatedName": "ResponseCodesListCodesItemCode",
                        "description": "The medical code",
                        "value": {
                          "description": "The medical code",
                          "schema": {
                            "example": "T933",
                            "type": "string"
                          },
                          "generatedName": "ResponseCodesListCodesItemCode",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseCodesListCodesItemDescription",
                      "key": "description",
                      "schema": {
                        "generatedName": "ResponseCodesListCodesItemDescription",
                        "description": "Description of the medical code",
                        "value": {
                          "description": "Description of the medical code",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseCodesListCodesItemDescription",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseCodesListCodesItemState",
                      "key": "state",
                      "schema": {
                        "generatedName": "ResponseCodesListCodesItemState",
                        "value": {
                          "description": "State of the code",
                          "generatedName": "ResponseCodesListCodesItemState",
                          "schema": "CodesState",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseCodesListCodesItemAdditionalCodes",
                      "key": "additionalCodes",
                      "schema": {
                        "generatedName": "ResponseCodesListCodesItemAdditionalCodes",
                        "description": "List of additional codes",
                        "value": {
                          "description": "List of additional codes",
                          "value": {
                            "allOf": [],
                            "properties": [
                              {
                                "conflict": {},
                                "generatedName": "responseCodesListCodesItemAdditionalCodesItemSubsetName",
                                "key": "subsetName",
                                "schema": {
                                  "generatedName": "ResponseCodesListCodesItemAdditionalCodesItemSubsetName",
                                  "description": "Category or subset of the additional code",
                                  "value": {
                                    "description": "Category or subset of the additional code",
                                    "schema": {
                                      "example": "orsakskoder",
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseCodesListCodesItemAdditionalCodesItemSubsetName",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseCodesListCodesItemAdditionalCodesItemCode",
                                "key": "code",
                                "schema": {
                                  "generatedName": "ResponseCodesListCodesItemAdditionalCodesItemCode",
                                  "description": "The additional code",
                                  "value": {
                                    "description": "The additional code",
                                    "schema": {
                                      "example": "W0231",
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseCodesListCodesItemAdditionalCodesItemCode",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseCodesListCodesItemAdditionalCodesItemDescription",
                                "key": "description",
                                "schema": {
                                  "generatedName": "ResponseCodesListCodesItemAdditionalCodesItemDescription",
                                  "description": "Description of the additional code",
                                  "value": {
                                    "description": "Description of the additional code",
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseCodesListCodesItemAdditionalCodesItemDescription",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseCodesListCodesItemAdditionalCodesItemState",
                                "key": "state",
                                "schema": {
                                  "generatedName": "ResponseCodesListCodesItemAdditionalCodesItemState",
                                  "value": {
                                    "description": "State of the additional code",
                                    "generatedName": "ResponseCodesListCodesItemAdditionalCodesItemState",
                                    "schema": "CodesState",
                                    "source": {
                                      "file": "../swagger.json",
                                      "type": "openapi"
                                    },
                                    "type": "reference"
                                  },
                                  "type": "optional"
                                },
                                "audiences": [],
                                "readonly": false,
                                "writeonly": false
                              }
                            ],
                            "allOfPropertyConflicts": [],
                            "generatedName": "ResponseCodesListCodesItemAdditionalCodesItem",
                            "groupName": [],
                            "additionalProperties": false,
                            "source": {
                              "file": "../swagger.json",
                              "type": "openapi"
                            },
                            "type": "object"
                          },
                          "generatedName": "ResponseCodesListCodesItemAdditionalCodes",
                          "groupName": [],
                          "type": "array"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseCodesListCodesItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseCodesListCodes",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseCodesList",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseCodesRead": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseCodesReadSystem",
            "key": "system",
            "schema": {
              "generatedName": "ResponseCodesReadSystem",
              "description": "The coding system used",
              "value": {
                "description": "The coding system used",
                "schema": {
                  "example": "ICD-10",
                  "type": "string"
                },
                "generatedName": "ResponseCodesReadSystem",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseCodesReadCode",
            "key": "code",
            "schema": {
              "generatedName": "ResponseCodesReadCode",
              "description": "The medical code",
              "value": {
                "description": "The medical code",
                "schema": {
                  "example": "T933",
                  "type": "string"
                },
                "generatedName": "ResponseCodesReadCode",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseCodesReadDescription",
            "key": "description",
            "schema": {
              "generatedName": "ResponseCodesReadDescription",
              "description": "Description of the medical code",
              "value": {
                "description": "Description of the medical code",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseCodesReadDescription",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseCodesReadState",
            "key": "state",
            "schema": {
              "generatedName": "ResponseCodesReadState",
              "value": {
                "description": "State of the code",
                "generatedName": "ResponseCodesReadState",
                "schema": "CodesState",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseCodesReadAdditionalCodes",
            "key": "additionalCodes",
            "schema": {
              "generatedName": "ResponseCodesReadAdditionalCodes",
              "description": "List of additional codes",
              "value": {
                "description": "List of additional codes",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseCodesReadAdditionalCodesItemSubsetName",
                      "key": "subsetName",
                      "schema": {
                        "generatedName": "ResponseCodesReadAdditionalCodesItemSubsetName",
                        "description": "Category or subset of the additional code",
                        "value": {
                          "description": "Category or subset of the additional code",
                          "schema": {
                            "example": "orsakskoder",
                            "type": "string"
                          },
                          "generatedName": "ResponseCodesReadAdditionalCodesItemSubsetName",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseCodesReadAdditionalCodesItemCode",
                      "key": "code",
                      "schema": {
                        "generatedName": "ResponseCodesReadAdditionalCodesItemCode",
                        "description": "The additional code",
                        "value": {
                          "description": "The additional code",
                          "schema": {
                            "example": "W0231",
                            "type": "string"
                          },
                          "generatedName": "ResponseCodesReadAdditionalCodesItemCode",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseCodesReadAdditionalCodesItemDescription",
                      "key": "description",
                      "schema": {
                        "generatedName": "ResponseCodesReadAdditionalCodesItemDescription",
                        "description": "Description of the additional code",
                        "value": {
                          "description": "Description of the additional code",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseCodesReadAdditionalCodesItemDescription",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseCodesReadAdditionalCodesItemState",
                      "key": "state",
                      "schema": {
                        "generatedName": "ResponseCodesReadAdditionalCodesItemState",
                        "value": {
                          "description": "State of the additional code",
                          "generatedName": "ResponseCodesReadAdditionalCodesItemState",
                          "schema": "CodesState",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseCodesReadAdditionalCodesItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseCodesReadAdditionalCodes",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseCodesRead",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseDirectusFactGroupsFiltered": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseDirectusFactGroupsFilteredData",
            "key": "data",
            "schema": {
              "generatedName": "ResponseDirectusFactGroupsFilteredData",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseDirectusFactGroupsFilteredDataItemId",
                      "key": "id",
                      "schema": {
                        "generatedName": "ResponseDirectusFactGroupsFilteredDataItemId",
                        "value": {
                          "generatedName": "ResponseDirectusFactGroupsFilteredDataItemId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseDirectusFactGroupsFilteredDataItemKey",
                      "key": "key",
                      "schema": {
                        "generatedName": "ResponseDirectusFactGroupsFilteredDataItemKey",
                        "value": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseDirectusFactGroupsFilteredDataItemKey",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseDirectusFactGroupsFilteredDataItemTranslations",
                      "key": "translations",
                      "schema": {
                        "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslations",
                        "value": {
                          "value": {
                            "allOf": [],
                            "properties": [
                              {
                                "conflict": {},
                                "generatedName": "responseDirectusFactGroupsFilteredDataItemTranslationsItemId",
                                "key": "id",
                                "schema": {
                                  "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslationsItemId",
                                  "value": {
                                    "schema": {
                                      "type": "int"
                                    },
                                    "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslationsItemId",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseDirectusFactGroupsFilteredDataItemTranslationsItemLanguagesId",
                                "key": "languages_id",
                                "schema": {
                                  "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslationsItemLanguagesId",
                                  "value": {
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslationsItemLanguagesId",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseDirectusFactGroupsFilteredDataItemTranslationsItemName",
                                "key": "name",
                                "schema": {
                                  "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslationsItemName",
                                  "value": {
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslationsItemName",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              }
                            ],
                            "allOfPropertyConflicts": [],
                            "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslationsItem",
                            "groupName": [],
                            "additionalProperties": false,
                            "source": {
                              "file": "../swagger.json",
                              "type": "openapi"
                            },
                            "type": "object"
                          },
                          "generatedName": "ResponseDirectusFactGroupsFilteredDataItemTranslations",
                          "groupName": [],
                          "type": "array"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseDirectusFactGroupsFilteredDataItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseDirectusFactGroupsFilteredData",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseDirectusFactGroupsFiltered",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseDocumentList": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseDocumentListData",
            "key": "data",
            "schema": {
              "generatedName": "ResponseDocumentListData",
              "value": {
                "value": {
                  "generatedName": "ResponseDocumentListDataItem",
                  "schema": "ResponseDocumentRead",
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "ResponseDocumentListData",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseDocumentList",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseDocumentRead": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseDocumentReadId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseDocumentReadId",
              "value": {
                "description": "Unique ID of the generated document",
                "generatedName": "ResponseDocumentReadId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentReadName",
            "key": "name",
            "schema": {
              "generatedName": "ResponseDocumentReadName",
              "description": "Name of the generated document",
              "value": {
                "description": "Name of the generated document",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseDocumentReadName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentReadTemplateRef",
            "key": "templateRef",
            "schema": {
              "generatedName": "ResponseDocumentReadTemplateRef",
              "description": "Reference for the used template",
              "value": {
                "description": "Reference for the used template",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseDocumentReadTemplateRef",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentReadIsStream",
            "key": "isStream",
            "schema": {
              "generatedName": "ResponseDocumentReadIsStream",
              "value": {
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "ResponseDocumentReadIsStream",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentReadSections",
            "key": "sections",
            "schema": {
              "generatedName": "ResponseDocumentReadSections",
              "description": "Individual document sections",
              "value": {
                "description": "Individual document sections",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseDocumentReadSectionsItemKey",
                      "key": "key",
                      "schema": {
                        "generatedName": "ResponseDocumentReadSectionsItemKey",
                        "description": "Document section key",
                        "value": {
                          "description": "Document section key",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseDocumentReadSectionsItemKey",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseDocumentReadSectionsItemName",
                      "key": "name",
                      "schema": {
                        "generatedName": "ResponseDocumentReadSectionsItemName",
                        "description": "Name or heading of the document section within the generated document",
                        "value": {
                          "description": "Name or heading of the document section within the generated document",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseDocumentReadSectionsItemName",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseDocumentReadSectionsItemText",
                      "key": "text",
                      "schema": {
                        "generatedName": "ResponseDocumentReadSectionsItemText",
                        "description": "Contents of the document section within the generated document",
                        "value": {
                          "description": "Contents of the document section within the generated document",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseDocumentReadSectionsItemText",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseDocumentReadSectionsItemSort",
                      "key": "sort",
                      "schema": {
                        "generatedName": "ResponseDocumentReadSectionsItemSort",
                        "description": "Order of the document section within the generated document",
                        "value": {
                          "description": "Order of the document section within the generated document",
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "ResponseDocumentReadSectionsItemSort",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseDocumentReadSectionsItemCreatedAt",
                      "key": "createdAt",
                      "schema": {
                        "generatedName": "ResponseDocumentReadSectionsItemCreatedAt",
                        "description": "The original timestamp when the document section was created.",
                        "value": {
                          "description": "The original timestamp when the document section was created.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseDocumentReadSectionsItemCreatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseDocumentReadSectionsItemUpdatedAt",
                      "key": "updatedAt",
                      "schema": {
                        "generatedName": "ResponseDocumentReadSectionsItemUpdatedAt",
                        "description": "The timestamp when the document section was last updated.",
                        "value": {
                          "description": "The timestamp when the document section was last updated.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseDocumentReadSectionsItemUpdatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseDocumentReadSectionsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseDocumentReadSections",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentReadCreatedAt",
            "key": "createdAt",
            "schema": {
              "generatedName": "ResponseDocumentReadCreatedAt",
              "description": "The original timestamp when the document was created.",
              "value": {
                "description": "The original timestamp when the document was created.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseDocumentReadCreatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentReadUpdatedAt",
            "key": "updatedAt",
            "schema": {
              "generatedName": "ResponseDocumentReadUpdatedAt",
              "description": "The timestamp when the document was last updated.",
              "value": {
                "description": "The timestamp when the document was last updated.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseDocumentReadUpdatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentReadOutputLanguage",
            "key": "outputLanguage",
            "schema": {
              "generatedName": "ResponseDocumentReadOutputLanguage",
              "description": "The language in which the document will be generated. Check https://docs.corti.ai/about/languages for more.",
              "value": {
                "description": "The language in which the document will be generated. Check https://docs.corti.ai/about/languages for more.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseDocumentReadOutputLanguage",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseDocumentRead",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseFact": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseFactId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseFactId",
              "value": {
                "description": "The unique identifier of the fact.",
                "generatedName": "ResponseFactId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactText",
            "key": "text",
            "schema": {
              "generatedName": "ResponseFactText",
              "description": "The text content of the fact.",
              "value": {
                "description": "The text content of the fact.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseFactText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactGroup",
            "key": "group",
            "schema": {
              "generatedName": "ResponseFactGroup",
              "description": "The key identifying the group to which the fact belongs.",
              "value": {
                "description": "The key identifying the group to which the fact belongs.",
                "schema": {
                  "example": "other",
                  "type": "string"
                },
                "generatedName": "ResponseFactGroup",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactGroupId",
            "key": "groupId",
            "schema": {
              "generatedName": "ResponseFactGroupId",
              "value": {
                "description": "The unique identifier of the group to which the fact belongs.",
                "generatedName": "ResponseFactGroupId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactIsDiscarded",
            "key": "isDiscarded",
            "schema": {
              "generatedName": "ResponseFactIsDiscarded",
              "description": "Indicates whether the fact has been marked as discarded.",
              "value": {
                "description": "Indicates whether the fact has been marked as discarded.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "ResponseFactIsDiscarded",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactSource",
            "key": "source",
            "schema": {
              "generatedName": "ResponseFactSource",
              "value": {
                "description": "The origin of the fact.",
                "generatedName": "ResponseFactSource",
                "schema": "V2SourceEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactCreatedAt",
            "key": "createdAt",
            "schema": {
              "generatedName": "ResponseFactCreatedAt",
              "description": "The timestamp when the fact was created.",
              "value": {
                "description": "The timestamp when the fact was created.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseFactCreatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactUpdatedAt",
            "key": "updatedAt",
            "schema": {
              "generatedName": "ResponseFactUpdatedAt",
              "description": "The timestamp when the fact was last updated.",
              "value": {
                "description": "The timestamp when the fact was last updated.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseFactUpdatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactEvidence",
            "key": "evidence",
            "schema": {
              "generatedName": "ResponseFactEvidence",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseFactEvidenceItemType",
                      "key": "type",
                      "schema": {
                        "generatedName": "ResponseFactEvidenceItemType",
                        "description": "The category of evidence.",
                        "value": {
                          "description": "The category of evidence.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseFactEvidenceItemType",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactEvidenceItemReference",
                      "key": "reference",
                      "schema": {
                        "generatedName": "ResponseFactEvidenceItemReference",
                        "description": "A reference that supports the fact.",
                        "value": {
                          "description": "A reference that supports the fact.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseFactEvidenceItemReference",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactEvidenceItemQuote",
                      "key": "quote",
                      "schema": {
                        "generatedName": "ResponseFactEvidenceItemQuote",
                        "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
                        "value": {
                          "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseFactEvidenceItemQuote",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseFactEvidenceItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseFactEvidence",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseFact",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseFactCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseFactCreateId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseFactCreateId",
              "value": {
                "description": "The unique identifier of the newly created fact.",
                "generatedName": "ResponseFactCreateId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactCreateText",
            "key": "text",
            "schema": {
              "generatedName": "ResponseFactCreateText",
              "description": "The textual content of the created fact.",
              "value": {
                "description": "The textual content of the created fact.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseFactCreateText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactCreateGroup",
            "key": "group",
            "schema": {
              "generatedName": "ResponseFactCreateGroup",
              "description": "The group key categorizing the fact.",
              "value": {
                "description": "The group key categorizing the fact.",
                "schema": {
                  "example": "other",
                  "type": "string"
                },
                "generatedName": "ResponseFactCreateGroup",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactCreateGroupId",
            "key": "groupId",
            "schema": {
              "generatedName": "ResponseFactCreateGroupId",
              "value": {
                "description": "The unique identifier of the group to which the fact belongs.",
                "generatedName": "ResponseFactCreateGroupId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactCreateSource",
            "key": "source",
            "schema": {
              "generatedName": "ResponseFactCreateSource",
              "value": {
                "description": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                "generatedName": "ResponseFactCreateSource",
                "schema": "V2SourceEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactCreateIsDiscarded",
            "key": "isDiscarded",
            "schema": {
              "generatedName": "ResponseFactCreateIsDiscarded",
              "description": "Indicates whether the fact has been marked as discarded.",
              "value": {
                "description": "Indicates whether the fact has been marked as discarded.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "ResponseFactCreateIsDiscarded",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactCreateUpdatedAt",
            "key": "updatedAt",
            "schema": {
              "generatedName": "ResponseFactCreateUpdatedAt",
              "description": "The timestamp when the fact was last updated.",
              "value": {
                "description": "The timestamp when the fact was last updated.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseFactCreateUpdatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseFactCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseFactEvidence": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseFactEvidenceType",
            "key": "type",
            "schema": {
              "generatedName": "ResponseFactEvidenceType",
              "description": "The category of evidence.",
              "value": {
                "description": "The category of evidence.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseFactEvidenceType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactEvidenceReference",
            "key": "reference",
            "schema": {
              "generatedName": "ResponseFactEvidenceReference",
              "description": "A reference that supports the fact.",
              "value": {
                "description": "A reference that supports the fact.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseFactEvidenceReference",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactEvidenceQuote",
            "key": "quote",
            "schema": {
              "generatedName": "ResponseFactEvidenceQuote",
              "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
              "value": {
                "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseFactEvidenceQuote",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseFactEvidence",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseFactUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseFactUpdateId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseFactUpdateId",
              "value": {
                "description": "The unique identifier of the fact.",
                "generatedName": "ResponseFactUpdateId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactUpdateText",
            "key": "text",
            "schema": {
              "generatedName": "ResponseFactUpdateText",
              "description": "The updated text content of the fact.",
              "value": {
                "description": "The updated text content of the fact.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseFactUpdateText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactUpdateGroup",
            "key": "group",
            "schema": {
              "generatedName": "ResponseFactUpdateGroup",
              "description": "The updated group key to which the fact belongs.",
              "value": {
                "description": "The updated group key to which the fact belongs.",
                "schema": {
                  "example": "other",
                  "type": "string"
                },
                "generatedName": "ResponseFactUpdateGroup",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactUpdateGroupId",
            "key": "groupId",
            "schema": {
              "generatedName": "ResponseFactUpdateGroupId",
              "value": {
                "description": "The unique identifier of the associated group.",
                "generatedName": "ResponseFactUpdateGroupId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactUpdateSource",
            "key": "source",
            "schema": {
              "generatedName": "ResponseFactUpdateSource",
              "value": {
                "description": "The updated origin of the fact.",
                "generatedName": "ResponseFactUpdateSource",
                "schema": "V2SourceEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactUpdateIsDiscarded",
            "key": "isDiscarded",
            "schema": {
              "generatedName": "ResponseFactUpdateIsDiscarded",
              "description": "Indicates whether the fact is marked as discarded.",
              "value": {
                "description": "Indicates whether the fact is marked as discarded.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "ResponseFactUpdateIsDiscarded",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactUpdateCreatedAt",
            "key": "createdAt",
            "schema": {
              "generatedName": "ResponseFactUpdateCreatedAt",
              "description": "The original timestamp when the fact was created.",
              "value": {
                "description": "The original timestamp when the fact was created.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseFactUpdateCreatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactUpdateUpdatedAt",
            "key": "updatedAt",
            "schema": {
              "generatedName": "ResponseFactUpdateUpdatedAt",
              "description": "The timestamp when the fact was last updated.",
              "value": {
                "description": "The timestamp when the fact was last updated.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseFactUpdateUpdatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseFactUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseFactsCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseFactsCreateFacts",
            "key": "facts",
            "schema": {
              "generatedName": "ResponseFactsCreateFacts",
              "description": "A list of successfully created facts.",
              "value": {
                "description": "A list of successfully created facts.",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseFactsCreateFactsItemId",
                      "key": "id",
                      "schema": {
                        "generatedName": "ResponseFactsCreateFactsItemId",
                        "value": {
                          "description": "The unique identifier of the newly created fact.",
                          "generatedName": "ResponseFactsCreateFactsItemId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsCreateFactsItemText",
                      "key": "text",
                      "schema": {
                        "generatedName": "ResponseFactsCreateFactsItemText",
                        "description": "The textual content of the created fact.",
                        "value": {
                          "description": "The textual content of the created fact.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseFactsCreateFactsItemText",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsCreateFactsItemGroup",
                      "key": "group",
                      "schema": {
                        "generatedName": "ResponseFactsCreateFactsItemGroup",
                        "description": "The group key categorizing the fact.",
                        "value": {
                          "description": "The group key categorizing the fact.",
                          "schema": {
                            "example": "other",
                            "type": "string"
                          },
                          "generatedName": "ResponseFactsCreateFactsItemGroup",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsCreateFactsItemGroupId",
                      "key": "groupId",
                      "schema": {
                        "generatedName": "ResponseFactsCreateFactsItemGroupId",
                        "value": {
                          "description": "The unique identifier of the group to which the fact belongs.",
                          "generatedName": "ResponseFactsCreateFactsItemGroupId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsCreateFactsItemSource",
                      "key": "source",
                      "schema": {
                        "generatedName": "ResponseFactsCreateFactsItemSource",
                        "value": {
                          "description": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                          "generatedName": "ResponseFactsCreateFactsItemSource",
                          "schema": "V2SourceEnum",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsCreateFactsItemIsDiscarded",
                      "key": "isDiscarded",
                      "schema": {
                        "generatedName": "ResponseFactsCreateFactsItemIsDiscarded",
                        "description": "Indicates whether the fact has been marked as discarded.",
                        "value": {
                          "description": "Indicates whether the fact has been marked as discarded.",
                          "schema": {
                            "type": "boolean"
                          },
                          "generatedName": "ResponseFactsCreateFactsItemIsDiscarded",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsCreateFactsItemUpdatedAt",
                      "key": "updatedAt",
                      "schema": {
                        "generatedName": "ResponseFactsCreateFactsItemUpdatedAt",
                        "description": "The timestamp when the fact was last updated.",
                        "value": {
                          "description": "The timestamp when the fact was last updated.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseFactsCreateFactsItemUpdatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseFactsCreateFactsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseFactsCreateFacts",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseFactsCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseFactsList": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseFactsListFacts",
            "key": "facts",
            "schema": {
              "generatedName": "ResponseFactsListFacts",
              "description": "A list of facts associated with the interaction.",
              "value": {
                "description": "A list of facts associated with the interaction.",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemId",
                      "key": "id",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemId",
                        "value": {
                          "description": "The unique identifier of the fact.",
                          "generatedName": "ResponseFactsListFactsItemId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemText",
                      "key": "text",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemText",
                        "description": "The text content of the fact.",
                        "value": {
                          "description": "The text content of the fact.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseFactsListFactsItemText",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemGroup",
                      "key": "group",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemGroup",
                        "description": "The key identifying the group to which the fact belongs.",
                        "value": {
                          "description": "The key identifying the group to which the fact belongs.",
                          "schema": {
                            "example": "other",
                            "type": "string"
                          },
                          "generatedName": "ResponseFactsListFactsItemGroup",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemGroupId",
                      "key": "groupId",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemGroupId",
                        "value": {
                          "description": "The unique identifier of the group to which the fact belongs.",
                          "generatedName": "ResponseFactsListFactsItemGroupId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemIsDiscarded",
                      "key": "isDiscarded",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemIsDiscarded",
                        "description": "Indicates whether the fact has been marked as discarded.",
                        "value": {
                          "description": "Indicates whether the fact has been marked as discarded.",
                          "schema": {
                            "type": "boolean"
                          },
                          "generatedName": "ResponseFactsListFactsItemIsDiscarded",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemSource",
                      "key": "source",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemSource",
                        "value": {
                          "description": "The origin of the fact.",
                          "generatedName": "ResponseFactsListFactsItemSource",
                          "schema": "V2SourceEnum",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemCreatedAt",
                      "key": "createdAt",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemCreatedAt",
                        "description": "The timestamp when the fact was created.",
                        "value": {
                          "description": "The timestamp when the fact was created.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseFactsListFactsItemCreatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemUpdatedAt",
                      "key": "updatedAt",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemUpdatedAt",
                        "description": "The timestamp when the fact was last updated.",
                        "value": {
                          "description": "The timestamp when the fact was last updated.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseFactsListFactsItemUpdatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsListFactsItemEvidence",
                      "key": "evidence",
                      "schema": {
                        "generatedName": "ResponseFactsListFactsItemEvidence",
                        "value": {
                          "value": {
                            "allOf": [],
                            "properties": [
                              {
                                "conflict": {},
                                "generatedName": "responseFactsListFactsItemEvidenceItemType",
                                "key": "type",
                                "schema": {
                                  "generatedName": "ResponseFactsListFactsItemEvidenceItemType",
                                  "description": "The category of evidence.",
                                  "value": {
                                    "description": "The category of evidence.",
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseFactsListFactsItemEvidenceItemType",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseFactsListFactsItemEvidenceItemReference",
                                "key": "reference",
                                "schema": {
                                  "generatedName": "ResponseFactsListFactsItemEvidenceItemReference",
                                  "description": "A reference that supports the fact.",
                                  "value": {
                                    "description": "A reference that supports the fact.",
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseFactsListFactsItemEvidenceItemReference",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              },
                              {
                                "conflict": {},
                                "generatedName": "responseFactsListFactsItemEvidenceItemQuote",
                                "key": "quote",
                                "schema": {
                                  "generatedName": "ResponseFactsListFactsItemEvidenceItemQuote",
                                  "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
                                  "value": {
                                    "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
                                    "schema": {
                                      "type": "string"
                                    },
                                    "generatedName": "ResponseFactsListFactsItemEvidenceItemQuote",
                                    "groupName": [],
                                    "type": "primitive"
                                  },
                                  "groupName": [],
                                  "type": "optional"
                                },
                                "audiences": []
                              }
                            ],
                            "allOfPropertyConflicts": [],
                            "generatedName": "ResponseFactsListFactsItemEvidenceItem",
                            "groupName": [],
                            "additionalProperties": false,
                            "source": {
                              "file": "../swagger.json",
                              "type": "openapi"
                            },
                            "type": "object"
                          },
                          "generatedName": "ResponseFactsListFactsItemEvidence",
                          "groupName": [],
                          "type": "array"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseFactsListFactsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseFactsListFacts",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseFactsList",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseFactsUpdate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateFacts",
            "key": "facts",
            "schema": {
              "generatedName": "ResponseFactsUpdateFacts",
              "description": "A list of updated facts.",
              "value": {
                "description": "A list of updated facts.",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseFactsUpdateFactsItemId",
                      "key": "id",
                      "schema": {
                        "generatedName": "ResponseFactsUpdateFactsItemId",
                        "value": {
                          "description": "The unique identifier of the updated fact.",
                          "generatedName": "ResponseFactsUpdateFactsItemId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsUpdateFactsItemText",
                      "key": "text",
                      "schema": {
                        "generatedName": "ResponseFactsUpdateFactsItemText",
                        "description": "The updated text content of the fact.",
                        "value": {
                          "description": "The updated text content of the fact.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseFactsUpdateFactsItemText",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsUpdateFactsItemGroup",
                      "key": "group",
                      "schema": {
                        "generatedName": "ResponseFactsUpdateFactsItemGroup",
                        "description": "The updated group key to which the fact belongs.",
                        "value": {
                          "description": "The updated group key to which the fact belongs.",
                          "schema": {
                            "example": "other",
                            "type": "string"
                          },
                          "generatedName": "ResponseFactsUpdateFactsItemGroup",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsUpdateFactsItemGroupId",
                      "key": "groupId",
                      "schema": {
                        "generatedName": "ResponseFactsUpdateFactsItemGroupId",
                        "value": {
                          "description": "The unique identifier of the associated group.",
                          "generatedName": "ResponseFactsUpdateFactsItemGroupId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsUpdateFactsItemSource",
                      "key": "source",
                      "schema": {
                        "generatedName": "ResponseFactsUpdateFactsItemSource",
                        "value": {
                          "description": "The updated origin of the fact.",
                          "generatedName": "ResponseFactsUpdateFactsItemSource",
                          "schema": "V2SourceEnum",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsUpdateFactsItemIsDiscarded",
                      "key": "isDiscarded",
                      "schema": {
                        "generatedName": "ResponseFactsUpdateFactsItemIsDiscarded",
                        "description": "Indicates whether the fact is marked as discarded.",
                        "value": {
                          "description": "Indicates whether the fact is marked as discarded.",
                          "schema": {
                            "type": "boolean"
                          },
                          "generatedName": "ResponseFactsUpdateFactsItemIsDiscarded",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsUpdateFactsItemCreatedAt",
                      "key": "createdAt",
                      "schema": {
                        "generatedName": "ResponseFactsUpdateFactsItemCreatedAt",
                        "description": "The original timestamp when the fact was created.",
                        "value": {
                          "description": "The original timestamp when the fact was created.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseFactsUpdateFactsItemCreatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseFactsUpdateFactsItemUpdatedAt",
                      "key": "updatedAt",
                      "schema": {
                        "generatedName": "ResponseFactsUpdateFactsItemUpdatedAt",
                        "description": "The timestamp when the fact was last updated.",
                        "value": {
                          "description": "The timestamp when the fact was last updated.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseFactsUpdateFactsItemUpdatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseFactsUpdateFactsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseFactsUpdateFacts",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseFactsUpdate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseFactsUpdateSingle": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateSingleId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseFactsUpdateSingleId",
              "value": {
                "description": "The unique identifier of the updated fact.",
                "generatedName": "ResponseFactsUpdateSingleId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateSingleText",
            "key": "text",
            "schema": {
              "generatedName": "ResponseFactsUpdateSingleText",
              "description": "The updated text content of the fact.",
              "value": {
                "description": "The updated text content of the fact.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseFactsUpdateSingleText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateSingleGroup",
            "key": "group",
            "schema": {
              "generatedName": "ResponseFactsUpdateSingleGroup",
              "description": "The updated group key to which the fact belongs.",
              "value": {
                "description": "The updated group key to which the fact belongs.",
                "schema": {
                  "example": "other",
                  "type": "string"
                },
                "generatedName": "ResponseFactsUpdateSingleGroup",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateSingleGroupId",
            "key": "groupId",
            "schema": {
              "generatedName": "ResponseFactsUpdateSingleGroupId",
              "value": {
                "description": "The unique identifier of the associated group.",
                "generatedName": "ResponseFactsUpdateSingleGroupId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateSingleSource",
            "key": "source",
            "schema": {
              "generatedName": "ResponseFactsUpdateSingleSource",
              "value": {
                "description": "The updated origin of the fact.",
                "generatedName": "ResponseFactsUpdateSingleSource",
                "schema": "V2SourceEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateSingleIsDiscarded",
            "key": "isDiscarded",
            "schema": {
              "generatedName": "ResponseFactsUpdateSingleIsDiscarded",
              "description": "Indicates whether the fact is marked as discarded.",
              "value": {
                "description": "Indicates whether the fact is marked as discarded.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "ResponseFactsUpdateSingleIsDiscarded",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateSingleCreatedAt",
            "key": "createdAt",
            "schema": {
              "generatedName": "ResponseFactsUpdateSingleCreatedAt",
              "description": "The original timestamp when the fact was created.",
              "value": {
                "description": "The original timestamp when the fact was created.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseFactsUpdateSingleCreatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseFactsUpdateSingleUpdatedAt",
            "key": "updatedAt",
            "schema": {
              "generatedName": "ResponseFactsUpdateSingleUpdatedAt",
              "description": "The timestamp when the fact was last updated.",
              "value": {
                "description": "The timestamp when the fact was last updated.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseFactsUpdateSingleUpdatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseFactsUpdateSingle",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseGuidelines": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseGuidelinesSummary",
            "key": "summary",
            "schema": {
              "generatedName": "ResponseGuidelinesSummary",
              "description": "A summary of the response.",
              "value": {
                "description": "A summary of the response.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseGuidelinesSummary",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseGuidelinesSources",
            "key": "sources",
            "schema": {
              "generatedName": "ResponseGuidelinesSources",
              "value": {
                "value": {
                  "generatedName": "ResponseGuidelinesSourcesItem",
                  "schema": "QuerySource",
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "ResponseGuidelinesSources",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseGuidelines",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseInteraction": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseInteractionId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseInteractionId",
              "value": {
                "description": "Unique identifier for the interaction.",
                "generatedName": "ResponseInteractionId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionAssignedUserId",
            "key": "assignedUserId",
            "schema": {
              "generatedName": "ResponseInteractionAssignedUserId",
              "value": {
                "description": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
                "generatedName": "ResponseInteractionAssignedUserId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionEncounter",
            "key": "encounter",
            "schema": {
              "generatedName": "ResponseInteractionEncounter",
              "value": {
                "description": "Information about the encounter, including type, status, and timing.",
                "generatedName": "ResponseInteractionEncounter",
                "schema": "Encounter",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionPatient",
            "key": "patient",
            "schema": {
              "generatedName": "ResponseInteractionPatient",
              "value": {
                "description": "Details about the patient involved in the interaction, if applicable.",
                "generatedName": "ResponseInteractionPatient",
                "schema": "Patient",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionEndedAt",
            "key": "endedAt",
            "schema": {
              "generatedName": "ResponseInteractionEndedAt",
              "description": "The timestamp when the interaction concluded (UTC).",
              "value": {
                "description": "The timestamp when the interaction concluded (UTC).",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseInteractionEndedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionCreatedAt",
            "key": "createdAt",
            "schema": {
              "generatedName": "ResponseInteractionCreatedAt",
              "description": "The timestamp when the interaction was started (UTC).",
              "value": {
                "description": "The timestamp when the interaction was started (UTC).",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseInteractionCreatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionUpdatedAt",
            "key": "updatedAt",
            "schema": {
              "generatedName": "ResponseInteractionUpdatedAt",
              "description": "The timestamp when the interaction was last modified (UTC).",
              "value": {
                "description": "The timestamp when the interaction was last modified (UTC).",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseInteractionUpdatedAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionWebsocketUrl",
            "key": "websocketUrl",
            "schema": {
              "generatedName": "ResponseInteractionWebsocketUrl",
              "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
              "value": {
                "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseInteractionWebsocketUrl",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionLastUpdated",
            "key": "lastUpdated",
            "schema": {
              "generatedName": "ResponseInteractionLastUpdated",
              "description": "The timestamp indicating the last recorded update for this interaction.",
              "value": {
                "description": "The timestamp indicating the last recorded update for this interaction.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseInteractionLastUpdated",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseInteraction",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseInteractionCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseInteractionCreateInteractionId",
            "key": "interactionId",
            "schema": {
              "generatedName": "ResponseInteractionCreateInteractionId",
              "value": {
                "description": "Unique identifier for the interaction.",
                "generatedName": "ResponseInteractionCreateInteractionId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseInteractionCreateWebsocketUrl",
            "key": "websocketUrl",
            "schema": {
              "generatedName": "ResponseInteractionCreateWebsocketUrl",
              "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
              "value": {
                "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseInteractionCreateWebsocketUrl",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseInteractionCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseInteractions": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseInteractionsInteractions",
            "key": "interactions",
            "schema": {
              "generatedName": "ResponseInteractionsInteractions",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemId",
                      "key": "id",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemId",
                        "value": {
                          "description": "Unique identifier for the interaction.",
                          "generatedName": "ResponseInteractionsInteractionsItemId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemAssignedUserId",
                      "key": "assignedUserId",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemAssignedUserId",
                        "value": {
                          "description": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
                          "generatedName": "ResponseInteractionsInteractionsItemAssignedUserId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemEncounter",
                      "key": "encounter",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemEncounter",
                        "value": {
                          "description": "Information about the encounter, including type, status, and timing.",
                          "generatedName": "ResponseInteractionsInteractionsItemEncounter",
                          "schema": "Encounter",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemPatient",
                      "key": "patient",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemPatient",
                        "value": {
                          "description": "Details about the patient involved in the interaction, if applicable.",
                          "generatedName": "ResponseInteractionsInteractionsItemPatient",
                          "schema": "Patient",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemEndedAt",
                      "key": "endedAt",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemEndedAt",
                        "description": "The timestamp when the interaction concluded (UTC).",
                        "value": {
                          "description": "The timestamp when the interaction concluded (UTC).",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseInteractionsInteractionsItemEndedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemCreatedAt",
                      "key": "createdAt",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemCreatedAt",
                        "description": "The timestamp when the interaction was started (UTC).",
                        "value": {
                          "description": "The timestamp when the interaction was started (UTC).",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseInteractionsInteractionsItemCreatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemUpdatedAt",
                      "key": "updatedAt",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemUpdatedAt",
                        "description": "The timestamp when the interaction was last modified (UTC).",
                        "value": {
                          "description": "The timestamp when the interaction was last modified (UTC).",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseInteractionsInteractionsItemUpdatedAt",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemWebsocketUrl",
                      "key": "websocketUrl",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemWebsocketUrl",
                        "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
                        "value": {
                          "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseInteractionsInteractionsItemWebsocketUrl",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseInteractionsInteractionsItemLastUpdated",
                      "key": "lastUpdated",
                      "schema": {
                        "generatedName": "ResponseInteractionsInteractionsItemLastUpdated",
                        "description": "The timestamp indicating the last recorded update for this interaction.",
                        "value": {
                          "description": "The timestamp indicating the last recorded update for this interaction.",
                          "schema": {
                            "type": "datetime"
                          },
                          "generatedName": "ResponseInteractionsInteractionsItemLastUpdated",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseInteractionsInteractionsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseInteractionsInteractions",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseInteractions",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseMention": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseMentionProperties",
            "key": "properties",
            "schema": {
              "generatedName": "ResponseMentionProperties",
              "description": "The type of mention (e.g., transcript, document).",
              "value": {
                "description": "The type of mention (e.g., transcript, document).",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseMentionProperties",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseMentionRange",
            "key": "range",
            "schema": {
              "generatedName": "ResponseMentionRange",
              "description": "Character range for document type.",
              "value": {
                "description": "Character range for document type.",
                "value": {
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "ResponseMentionRangeItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "ResponseMentionRange",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseMentionTime",
            "key": "time",
            "schema": {
              "generatedName": "ResponseMentionTime",
              "description": "Time range in seconds for transcript type.",
              "value": {
                "description": "Time range in seconds for transcript type.",
                "value": {
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "ResponseMentionTimeItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "ResponseMentionTime",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseMentionSnippet",
            "key": "snippet",
            "schema": {
              "generatedName": "ResponseMentionSnippet",
              "description": "Text snippet for the mention.",
              "value": {
                "description": "Text snippet for the mention.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseMentionSnippet",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseMentionDocumentId",
            "key": "documentId",
            "schema": {
              "generatedName": "ResponseMentionDocumentId",
              "value": {
                "description": "The document ID if applicable.",
                "generatedName": "ResponseMentionDocumentId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseMentionUtteranceId",
            "key": "utteranceId",
            "schema": {
              "generatedName": "ResponseMentionUtteranceId",
              "value": {
                "description": "The utterance ID if applicable.",
                "generatedName": "ResponseMentionUtteranceId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseMentionTimestamp",
            "key": "timestamp",
            "schema": {
              "generatedName": "ResponseMentionTimestamp",
              "description": "The timestamp for transcript mentions.",
              "value": {
                "description": "The timestamp for transcript mentions.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "ResponseMentionTimestamp",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseMention",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseMetadataCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseMetadataCreateParticipantsRoles",
            "key": "participantsRoles",
            "schema": {
              "generatedName": "ResponseMetadataCreateParticipantsRoles",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseMetadataCreateParticipantsRolesItemChannel",
                      "key": "channel",
                      "schema": {
                        "generatedName": "ResponseMetadataCreateParticipantsRolesItemChannel",
                        "description": "The audio channel associated with the participant.",
                        "value": {
                          "description": "The audio channel associated with the participant.",
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "ResponseMetadataCreateParticipantsRolesItemChannel",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseMetadataCreateParticipantsRolesItemRole",
                      "key": "role",
                      "schema": {
                        "generatedName": "ResponseMetadataCreateParticipantsRolesItemRole",
                        "value": {
                          "description": "The role of the participant.",
                          "generatedName": "ResponseMetadataCreateParticipantsRolesItemRole",
                          "schema": "V2TranscriptParticipantRoleEnum",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseMetadataCreateParticipantsRolesItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseMetadataCreateParticipantsRoles",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseMetadataCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseParticipantCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseParticipantCreateChannel",
            "key": "channel",
            "schema": {
              "generatedName": "ResponseParticipantCreateChannel",
              "description": "The audio channel associated with the participant.",
              "value": {
                "description": "The audio channel associated with the participant.",
                "schema": {
                  "type": "int"
                },
                "generatedName": "ResponseParticipantCreateChannel",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseParticipantCreateRole",
            "key": "role",
            "schema": {
              "generatedName": "ResponseParticipantCreateRole",
              "value": {
                "description": "The role of the participant.",
                "generatedName": "ResponseParticipantCreateRole",
                "schema": "V2TranscriptParticipantRoleEnum",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseParticipantCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseQuery": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseQueryTool",
            "key": "tool",
            "schema": {
              "generatedName": "ResponseQueryTool",
              "description": "The tool providing the response (e.g., guidelines, mentions, general_chat, etc.)",
              "value": {
                "description": "The tool providing the response (e.g., guidelines, mentions, general_chat, etc.)",
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseQueryTool",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseQueryData",
            "key": "data",
            "schema": {
              "generatedName": "ResponseQueryData",
              "value": {
                "description": "The response data specific to the tool.",
                "generatedName": "ResponseQueryData",
                "schema": "QueryData",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseQuery",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseQuestionPrompts": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseQuestionPromptsPrompts",
            "key": "prompts",
            "schema": {
              "generatedName": "ResponseQuestionPromptsPrompts",
              "description": "An array of suggested questions.",
              "value": {
                "description": "An array of suggested questions.",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "ResponseQuestionPromptsPromptsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "ResponseQuestionPromptsPrompts",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseQuestionPrompts",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseRecordingCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseRecordingCreateRecordingId",
            "key": "recordingId",
            "schema": {
              "generatedName": "ResponseRecordingCreateRecordingId",
              "value": {
                "description": "The unique identifier for the created recording.",
                "generatedName": "ResponseRecordingCreateRecordingId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseRecordingCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseRecordingList": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseRecordingListRecordings",
            "key": "recordings",
            "schema": {
              "generatedName": "ResponseRecordingListRecordings",
              "description": "A list of recordings for the interaction.",
              "value": {
                "description": "A list of recordings for the interaction.",
                "value": {
                  "generatedName": "ResponseRecordingListRecordingsItem",
                  "schema": "UUID",
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "ResponseRecordingListRecordings",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseRecordingList",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseTranscriptAnonymize": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseTranscriptAnonymizeAnonymized",
            "key": "anonymized",
            "schema": {
              "generatedName": "ResponseTranscriptAnonymizeAnonymized",
              "value": {
                "value": {
                  "generatedName": "ResponseTranscriptAnonymizeAnonymizedItem",
                  "schema": "Utterance",
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "ResponseTranscriptAnonymizeAnonymized",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseTranscriptAnonymize",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseTranscriptCreate": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseTranscriptCreateId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseTranscriptCreateId",
              "value": {
                "description": "The unique identifier of the transcript.",
                "generatedName": "ResponseTranscriptCreateId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptCreateMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "ResponseTranscriptCreateMetadata",
              "value": {
                "description": "Additional information about the participants involved in the transcript.",
                "generatedName": "ResponseTranscriptCreateMetadata",
                "schema": "ResponseMetadataCreate",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptCreateTranscripts",
            "key": "transcripts",
            "schema": {
              "generatedName": "ResponseTranscriptCreateTranscripts",
              "description": "An array of transcripts.",
              "value": {
                "description": "An array of transcripts.",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseTranscriptCreateTranscriptsItemChannel",
                      "key": "channel",
                      "schema": {
                        "generatedName": "ResponseTranscriptCreateTranscriptsItemChannel",
                        "description": "The channel associated with this phrase/utterance.",
                        "value": {
                          "description": "The channel associated with this phrase/utterance.",
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "ResponseTranscriptCreateTranscriptsItemChannel",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseTranscriptCreateTranscriptsItemParticipant",
                      "key": "participant",
                      "schema": {
                        "generatedName": "ResponseTranscriptCreateTranscriptsItemParticipant",
                        "description": "The identifier of the participant.",
                        "value": {
                          "description": "The identifier of the participant.",
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "ResponseTranscriptCreateTranscriptsItemParticipant",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseTranscriptCreateTranscriptsItemSpeakerId",
                      "key": "speakerId",
                      "schema": {
                        "generatedName": "ResponseTranscriptCreateTranscriptsItemSpeakerId",
                        "description": "Id to tag an identified speaker. Auto-increments.",
                        "value": {
                          "description": "Id to tag an identified speaker. Auto-increments.",
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "ResponseTranscriptCreateTranscriptsItemSpeakerId",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseTranscriptCreateTranscriptsItemText",
                      "key": "text",
                      "schema": {
                        "generatedName": "ResponseTranscriptCreateTranscriptsItemText",
                        "description": "The spoken phrase or utterance extracted from the audio.",
                        "value": {
                          "description": "The spoken phrase or utterance extracted from the audio.",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseTranscriptCreateTranscriptsItemText",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseTranscriptCreateTranscriptsItemStart",
                      "key": "start",
                      "schema": {
                        "generatedName": "ResponseTranscriptCreateTranscriptsItemStart",
                        "description": "Start time in milliseconds for phrase/utterance.",
                        "value": {
                          "description": "Start time in milliseconds for phrase/utterance.",
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "ResponseTranscriptCreateTranscriptsItemStart",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseTranscriptCreateTranscriptsItemEnd",
                      "key": "end",
                      "schema": {
                        "generatedName": "ResponseTranscriptCreateTranscriptsItemEnd",
                        "description": "End time in milliseconds for phrase/utterance.",
                        "value": {
                          "description": "End time in milliseconds for phrase/utterance.",
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "ResponseTranscriptCreateTranscriptsItemEnd",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseTranscriptCreateTranscriptsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseTranscriptCreateTranscripts",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseTranscriptCreate",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseTranscriptListAll": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseTranscriptListAllTranscripts",
            "key": "transcripts",
            "schema": {
              "generatedName": "ResponseTranscriptListAllTranscripts",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "responseTranscriptListAllTranscriptsItemId",
                      "key": "id",
                      "schema": {
                        "generatedName": "ResponseTranscriptListAllTranscriptsItemId",
                        "value": {
                          "description": "The unique identifier of the transcript.",
                          "generatedName": "ResponseTranscriptListAllTranscriptsItemId",
                          "schema": "UUID",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "responseTranscriptListAllTranscriptsItemTranscriptSample",
                      "key": "transcriptSample",
                      "schema": {
                        "generatedName": "ResponseTranscriptListAllTranscriptsItemTranscriptSample",
                        "value": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "ResponseTranscriptListAllTranscriptsItemTranscriptSample",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "ResponseTranscriptListAllTranscriptsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "ResponseTranscriptListAllTranscripts",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseTranscriptListAll",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseTranscriptListAllSingle": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseTranscriptListAllSingleId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseTranscriptListAllSingleId",
              "value": {
                "description": "The unique identifier of the transcript.",
                "generatedName": "ResponseTranscriptListAllSingleId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptListAllSingleTranscriptSample",
            "key": "transcriptSample",
            "schema": {
              "generatedName": "ResponseTranscriptListAllSingleTranscriptSample",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseTranscriptListAllSingleTranscriptSample",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseTranscriptListAllSingle",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "Section": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "sectionDateUpdated",
            "key": "date_updated",
            "schema": {
              "generatedName": "SectionDateUpdated",
              "description": "The timestamp when the section was updated.",
              "value": {
                "description": "The timestamp when the section was updated.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "SectionDateUpdated",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sectionName",
            "key": "name",
            "schema": {
              "generatedName": "SectionName",
              "description": "Name of the section",
              "value": {
                "description": "Name of the section",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SectionName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sectionAlternateNames",
            "key": "alternate_names",
            "schema": {
              "generatedName": "SectionAlternateNames",
              "description": "Alternate names for the section",
              "value": {
                "description": "Alternate names for the section",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "SectionAlternateNamesItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "SectionAlternateNames",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sectionKey",
            "key": "key",
            "schema": {
              "generatedName": "SectionKey",
              "description": "Unique key for the section",
              "value": {
                "description": "Unique key for the section",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SectionKey",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sectionDescription",
            "key": "description",
            "schema": {
              "generatedName": "SectionDescription",
              "description": "Description of the section",
              "value": {
                "description": "Description of the section",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SectionDescription",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sectionDefaultWritingStyle",
            "key": "default_writing_style",
            "schema": {
              "generatedName": "SectionDefaultWritingStyle",
              "value": {
                "description": "Default writing style for the section",
                "generatedName": "SectionDefaultWritingStyle",
                "schema": "WritingStyle",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "sectionSectionType",
            "key": "section_type",
            "schema": {
              "generatedName": "SectionSectionType",
              "description": "Type of section",
              "value": {
                "description": "Type of section",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SectionSectionType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sectionTranslations",
            "key": "translations",
            "schema": {
              "generatedName": "SectionTranslations",
              "description": "Available translations for the section",
              "value": {
                "description": "Available translations for the section",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "sectionTranslationsItemLanguagesId",
                      "key": "languages_id",
                      "schema": {
                        "generatedName": "SectionTranslationsItemLanguagesId",
                        "description": "Language identifier",
                        "value": {
                          "description": "Language identifier",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "SectionTranslationsItemLanguagesId",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "sectionTranslationsItemName",
                      "key": "name",
                      "schema": {
                        "generatedName": "SectionTranslationsItemName",
                        "description": "Localized name of the section",
                        "value": {
                          "description": "Localized name of the section",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "SectionTranslationsItemName",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "sectionTranslationsItemDescription",
                      "key": "description",
                      "schema": {
                        "generatedName": "SectionTranslationsItemDescription",
                        "description": "Localized description of the section",
                        "value": {
                          "description": "Localized description of the section",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "SectionTranslationsItemDescription",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "SectionTranslationsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "SectionTranslations",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Section",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "SectionTranslation": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "sectionTranslationLanguagesId",
            "key": "languages_id",
            "schema": {
              "generatedName": "SectionTranslationLanguagesId",
              "description": "Language identifier",
              "value": {
                "description": "Language identifier",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SectionTranslationLanguagesId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sectionTranslationName",
            "key": "name",
            "schema": {
              "generatedName": "SectionTranslationName",
              "description": "Localized name of the section",
              "value": {
                "description": "Localized name of the section",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SectionTranslationName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sectionTranslationDescription",
            "key": "description",
            "schema": {
              "generatedName": "SectionTranslationDescription",
              "description": "Localized description of the section",
              "value": {
                "description": "Localized description of the section",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SectionTranslationDescription",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "SectionTranslation",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "SourceReference": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "sourceReferenceText",
            "key": "text",
            "schema": {
              "generatedName": "SourceReferenceText",
              "description": "The content of the matching segment in the source document.",
              "value": {
                "description": "The content of the matching segment in the source document.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "SourceReferenceText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sourceReferenceRange",
            "key": "range",
            "schema": {
              "generatedName": "SourceReferenceRange",
              "description": "Start and end indices of the segment in the source document.",
              "value": {
                "description": "Start and end indices of the segment in the source document.",
                "value": {
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "SourceReferenceRangeItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "SourceReferenceRange",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "SourceReference",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "TargetSegment": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "targetSegmentText",
            "key": "text",
            "schema": {
              "generatedName": "TargetSegmentText",
              "description": "The content of the target document segment.",
              "value": {
                "description": "The content of the target document segment.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TargetSegmentText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "targetSegmentRange",
            "key": "range",
            "schema": {
              "generatedName": "TargetSegmentRange",
              "description": "Start and end indices of the segment in the target document.",
              "value": {
                "description": "Start and end indices of the segment in the target document.",
                "value": {
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "TargetSegmentRangeItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "TargetSegmentRange",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TargetSegment",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "TemplateFiltered": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "templateFilteredDateUpdated",
            "key": "date_updated",
            "schema": {
              "generatedName": "TemplateFilteredDateUpdated",
              "description": "The timestamp when the template was updated.",
              "value": {
                "description": "The timestamp when the template was updated.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "TemplateFilteredDateUpdated",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateFilteredName",
            "key": "name",
            "schema": {
              "generatedName": "TemplateFilteredName",
              "description": "Name of the template",
              "value": {
                "description": "Name of the template",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TemplateFilteredName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateFilteredDescription",
            "key": "description",
            "schema": {
              "generatedName": "TemplateFilteredDescription",
              "description": "Description of the template",
              "value": {
                "description": "Description of the template",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TemplateFilteredDescription",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateFilteredKey",
            "key": "key",
            "schema": {
              "generatedName": "TemplateFilteredKey",
              "description": "Unique key for the template",
              "value": {
                "description": "Unique key for the template",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TemplateFilteredKey",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateFilteredStatus",
            "key": "status",
            "schema": {
              "generatedName": "TemplateFilteredStatus",
              "description": "Status of the template.",
              "value": {
                "description": "Status of the template.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TemplateFilteredStatus",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateFilteredTemplateSections",
            "key": "template_sections",
            "schema": {
              "generatedName": "TemplateFilteredTemplateSections",
              "description": "List of sections included in the template",
              "value": {
                "description": "List of sections included in the template",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "templateFilteredTemplateSectionsItemSort",
                      "key": "sort",
                      "schema": {
                        "generatedName": "TemplateFilteredTemplateSectionsItemSort",
                        "description": "Sort order of the section within the template",
                        "value": {
                          "description": "Sort order of the section within the template",
                          "schema": {
                            "type": "int"
                          },
                          "generatedName": "TemplateFilteredTemplateSectionsItemSort",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "templateFilteredTemplateSectionsItemSectionsId",
                      "key": "sections_id",
                      "schema": {
                        "generatedName": "TemplateFilteredTemplateSectionsItemSectionsId",
                        "value": {
                          "description": "The section details",
                          "generatedName": "TemplateFilteredTemplateSectionsItemSectionsId",
                          "schema": "Section",
                          "source": {
                            "file": "../swagger.json",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "type": "optional"
                      },
                      "audiences": [],
                      "readonly": false,
                      "writeonly": false
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "TemplateFilteredTemplateSectionsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "TemplateFilteredTemplateSections",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateFilteredTranslations",
            "key": "translations",
            "schema": {
              "generatedName": "TemplateFilteredTranslations",
              "description": "Available translations for the template",
              "value": {
                "description": "Available translations for the template",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "templateFilteredTranslationsItemLanguagesId",
                      "key": "languages_id",
                      "schema": {
                        "generatedName": "TemplateFilteredTranslationsItemLanguagesId",
                        "description": "Language identifier",
                        "value": {
                          "description": "Language identifier",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "TemplateFilteredTranslationsItemLanguagesId",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "templateFilteredTranslationsItemName",
                      "key": "name",
                      "schema": {
                        "generatedName": "TemplateFilteredTranslationsItemName",
                        "description": "Localized name of the template",
                        "value": {
                          "description": "Localized name of the template",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "TemplateFilteredTranslationsItemName",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "templateFilteredTranslationsItemDescription",
                      "key": "description",
                      "schema": {
                        "generatedName": "TemplateFilteredTranslationsItemDescription",
                        "description": "Localized description of the template",
                        "value": {
                          "description": "Localized description of the template",
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "TemplateFilteredTranslationsItemDescription",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "TemplateFilteredTranslationsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../swagger.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "TemplateFilteredTranslations",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TemplateFiltered",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "TemplateSection": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "templateSectionSort",
            "key": "sort",
            "schema": {
              "generatedName": "TemplateSectionSort",
              "description": "Sort order of the section within the template",
              "value": {
                "description": "Sort order of the section within the template",
                "schema": {
                  "type": "int"
                },
                "generatedName": "TemplateSectionSort",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateSectionSectionsId",
            "key": "sections_id",
            "schema": {
              "generatedName": "TemplateSectionSectionsId",
              "value": {
                "description": "The section details",
                "generatedName": "TemplateSectionSectionsId",
                "schema": "Section",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TemplateSection",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "TemplateTranslation": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "templateTranslationLanguagesId",
            "key": "languages_id",
            "schema": {
              "generatedName": "TemplateTranslationLanguagesId",
              "description": "Language identifier",
              "value": {
                "description": "Language identifier",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TemplateTranslationLanguagesId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateTranslationName",
            "key": "name",
            "schema": {
              "generatedName": "TemplateTranslationName",
              "description": "Localized name of the template",
              "value": {
                "description": "Localized name of the template",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TemplateTranslationName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "templateTranslationDescription",
            "key": "description",
            "schema": {
              "generatedName": "TemplateTranslationDescription",
              "description": "Localized description of the template",
              "value": {
                "description": "Localized description of the template",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TemplateTranslationDescription",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TemplateTranslation",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "Transcript": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptChannel",
            "key": "channel",
            "schema": {
              "generatedName": "TranscriptChannel",
              "description": "The channel associated with this phrase/utterance.",
              "value": {
                "description": "The channel associated with this phrase/utterance.",
                "schema": {
                  "type": "int"
                },
                "generatedName": "TranscriptChannel",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptParticipant",
            "key": "participant",
            "schema": {
              "generatedName": "TranscriptParticipant",
              "description": "The identifier of the participant.",
              "value": {
                "description": "The identifier of the participant.",
                "schema": {
                  "type": "int"
                },
                "generatedName": "TranscriptParticipant",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSpeakerId",
            "key": "speakerId",
            "schema": {
              "generatedName": "TranscriptSpeakerId",
              "description": "Id to tag an identified speaker. Auto-increments.",
              "value": {
                "description": "Id to tag an identified speaker. Auto-increments.",
                "schema": {
                  "type": "int"
                },
                "generatedName": "TranscriptSpeakerId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptText",
            "key": "text",
            "schema": {
              "generatedName": "TranscriptText",
              "description": "The spoken phrase or utterance extracted from the audio.",
              "value": {
                "description": "The spoken phrase or utterance extracted from the audio.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TranscriptText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptStart",
            "key": "start",
            "schema": {
              "generatedName": "TranscriptStart",
              "description": "Start time in milliseconds for phrase/utterance.",
              "value": {
                "description": "Start time in milliseconds for phrase/utterance.",
                "schema": {
                  "type": "int"
                },
                "generatedName": "TranscriptStart",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptEnd",
            "key": "end",
            "schema": {
              "generatedName": "TranscriptEnd",
              "description": "End time in milliseconds for phrase/utterance.",
              "value": {
                "description": "End time in milliseconds for phrase/utterance.",
                "schema": {
                  "type": "int"
                },
                "generatedName": "TranscriptEnd",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Transcript",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "UUID": {
        "schema": {
          "format": "uuid",
          "type": "string"
        },
        "generatedName": "Uuid",
        "groupName": [],
        "type": "primitive"
      },
      "Utterance": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "utteranceValue",
            "key": "value",
            "schema": {
              "generatedName": "UtteranceValue",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "UtteranceValue",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "utteranceRole",
            "key": "role",
            "schema": {
              "generatedName": "UtteranceRole",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "UtteranceRole",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Utterance",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "V2DocumentContextType": {
        "schema": {
          "type": "string"
        },
        "generatedName": "V2DocumentContextType",
        "groupName": [],
        "type": "primitive"
      },
      "V2DocumentContextTypeEnum": {
        "generatedName": "V2DocumentContextTypeEnum",
        "values": [
          {
            "generatedName": "facts",
            "value": "facts",
            "casing": {}
          },
          {
            "generatedName": "transcript",
            "value": "transcript",
            "casing": {}
          },
          {
            "generatedName": "string",
            "value": "string",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "V2EncounterStatus": {
        "schema": {
          "type": "string"
        },
        "generatedName": "V2EncounterStatus",
        "groupName": [],
        "type": "primitive"
      },
      "V2EncounterStatusEnum": {
        "generatedName": "V2EncounterStatusEnum",
        "values": [
          {
            "generatedName": "planned",
            "value": "planned",
            "casing": {}
          },
          {
            "generatedName": "InProgress",
            "value": "in-progress",
            "casing": {}
          },
          {
            "generatedName": "OnHold",
            "value": "on-hold",
            "casing": {}
          },
          {
            "generatedName": "completed",
            "value": "completed",
            "casing": {}
          },
          {
            "generatedName": "cancelled",
            "value": "cancelled",
            "casing": {}
          },
          {
            "generatedName": "deleted",
            "value": "deleted",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "V2EncounterType": {
        "schema": {
          "type": "string"
        },
        "generatedName": "V2EncounterType",
        "groupName": [],
        "type": "primitive"
      },
      "V2EncounterTypeEnum": {
        "generatedName": "V2EncounterTypeEnum",
        "values": [
          {
            "generatedName": "first_consultation",
            "value": "first_consultation",
            "casing": {}
          },
          {
            "generatedName": "consultation",
            "value": "consultation",
            "casing": {}
          },
          {
            "generatedName": "emergency",
            "value": "emergency",
            "casing": {}
          },
          {
            "generatedName": "inpatient",
            "value": "inpatient",
            "casing": {}
          },
          {
            "generatedName": "outpatient",
            "value": "outpatient",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "V2Gender": {
        "schema": {
          "type": "string"
        },
        "generatedName": "V2Gender",
        "groupName": [],
        "type": "primitive"
      },
      "V2GenderEnum": {
        "generatedName": "V2GenderEnum",
        "values": [
          {
            "generatedName": "male",
            "value": "male",
            "casing": {}
          },
          {
            "generatedName": "female",
            "value": "female",
            "casing": {}
          },
          {
            "generatedName": "unknown",
            "value": "unknown",
            "casing": {}
          },
          {
            "generatedName": "other",
            "value": "other",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "V2ParticipantRoleEnum": {
        "generatedName": "V2ParticipantRoleEnum",
        "values": [
          {
            "generatedName": "doctor",
            "value": "doctor",
            "casing": {}
          },
          {
            "generatedName": "patient",
            "value": "patient",
            "casing": {}
          },
          {
            "generatedName": "multiple",
            "value": "multiple",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "V2Source": {
        "schema": {
          "type": "string"
        },
        "generatedName": "V2Source",
        "groupName": [],
        "type": "primitive"
      },
      "V2SourceEnum": {
        "generatedName": "V2SourceEnum",
        "values": [
          {
            "generatedName": "core",
            "value": "core",
            "casing": {}
          },
          {
            "generatedName": "system",
            "value": "system",
            "casing": {}
          },
          {
            "generatedName": "user",
            "value": "user",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "V2TranscriptParticipantRole": {
        "schema": {
          "type": "string"
        },
        "generatedName": "V2TranscriptParticipantRole",
        "groupName": [],
        "type": "primitive"
      },
      "V2TranscriptParticipantRoleEnum": {
        "generatedName": "V2TranscriptParticipantRoleEnum",
        "values": [
          {
            "generatedName": "doctor",
            "value": "doctor",
            "casing": {}
          },
          {
            "generatedName": "patient",
            "value": "patient",
            "casing": {}
          },
          {
            "generatedName": "multiple",
            "value": "multiple",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "WritingStyle": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "writingStyleName",
            "key": "name",
            "schema": {
              "generatedName": "WritingStyleName",
              "description": "Name of the writing style",
              "value": {
                "description": "Name of the writing style",
                "schema": {
                  "type": "string"
                },
                "generatedName": "WritingStyleName",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "WritingStyle",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "common.ErrorResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "commonErrorResponseRequestid",
            "key": "requestid",
            "schema": {
              "generatedName": "CommonErrorResponseRequestid",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CommonErrorResponseRequestid",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "commonErrorResponseType",
            "key": "type",
            "schema": {
              "generatedName": "CommonErrorResponseType",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CommonErrorResponseType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "commonErrorResponseStatus",
            "key": "status",
            "schema": {
              "generatedName": "CommonErrorResponseStatus",
              "value": {
                "schema": {
                  "type": "int"
                },
                "generatedName": "CommonErrorResponseStatus",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "commonErrorResponseTitle",
            "key": "title",
            "schema": {
              "generatedName": "CommonErrorResponseTitle",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CommonErrorResponseTitle",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "commonErrorResponseDetails",
            "key": "details",
            "schema": {
              "generatedName": "CommonErrorResponseDetails",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CommonErrorResponseDetails",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "commonErrorResponseInstance",
            "key": "instance",
            "schema": {
              "generatedName": "CommonErrorResponseInstance",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CommonErrorResponseInstance",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "CommonErrorResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "copilotCommon.ErrorResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "copilotCommonErrorResponseRequestid",
            "key": "requestid",
            "schema": {
              "generatedName": "CopilotCommonErrorResponseRequestid",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CopilotCommonErrorResponseRequestid",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "copilotCommonErrorResponseType",
            "key": "type",
            "schema": {
              "generatedName": "CopilotCommonErrorResponseType",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CopilotCommonErrorResponseType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "copilotCommonErrorResponseStatus",
            "key": "status",
            "schema": {
              "generatedName": "CopilotCommonErrorResponseStatus",
              "value": {
                "schema": {
                  "type": "int"
                },
                "generatedName": "CopilotCommonErrorResponseStatus",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "copilotCommonErrorResponseTitle",
            "key": "title",
            "schema": {
              "generatedName": "CopilotCommonErrorResponseTitle",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CopilotCommonErrorResponseTitle",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "copilotCommonErrorResponseDetails",
            "key": "details",
            "schema": {
              "generatedName": "CopilotCommonErrorResponseDetails",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CopilotCommonErrorResponseDetails",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "copilotCommonErrorResponseInstance",
            "key": "instance",
            "schema": {
              "generatedName": "CopilotCommonErrorResponseInstance",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CopilotCommonErrorResponseInstance",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "CopilotCommonErrorResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "copilotModels.V2EncounterStatus": {
        "schema": {
          "type": "string"
        },
        "generatedName": "CopilotModelsV2EncounterStatus",
        "groupName": [],
        "type": "primitive"
      },
      "copilotModels.V2EncounterType": {
        "schema": {
          "type": "string"
        },
        "generatedName": "CopilotModelsV2EncounterType",
        "groupName": [],
        "type": "primitive"
      },
      "copilotModels.V2Gender": {
        "schema": {
          "type": "string"
        },
        "generatedName": "CopilotModelsV2Gender",
        "groupName": [],
        "type": "primitive"
      },
      "copilotModels.V2Source": {
        "schema": {
          "type": "string"
        },
        "generatedName": "CopilotModelsV2Source",
        "groupName": [],
        "type": "primitive"
      },
      "copilotModels.V2TranscriptParticipantRole": {
        "schema": {
          "type": "string"
        },
        "generatedName": "CopilotModelsV2TranscriptParticipantRole",
        "groupName": [],
        "type": "primitive"
      },
      "cortiCommon.ErrorResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "cortiCommonErrorResponseRequestid",
            "key": "requestid",
            "schema": {
              "generatedName": "CortiCommonErrorResponseRequestid",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CortiCommonErrorResponseRequestid",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "cortiCommonErrorResponseType",
            "key": "type",
            "schema": {
              "generatedName": "CortiCommonErrorResponseType",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CortiCommonErrorResponseType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "cortiCommonErrorResponseStatus",
            "key": "status",
            "schema": {
              "generatedName": "CortiCommonErrorResponseStatus",
              "value": {
                "schema": {
                  "type": "int"
                },
                "generatedName": "CortiCommonErrorResponseStatus",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "cortiCommonErrorResponseTitle",
            "key": "title",
            "schema": {
              "generatedName": "CortiCommonErrorResponseTitle",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CortiCommonErrorResponseTitle",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "cortiCommonErrorResponseDetails",
            "key": "details",
            "schema": {
              "generatedName": "CortiCommonErrorResponseDetails",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CortiCommonErrorResponseDetails",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "cortiCommonErrorResponseInstance",
            "key": "instance",
            "schema": {
              "generatedName": "CortiCommonErrorResponseInstance",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "CortiCommonErrorResponseInstance",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "CortiCommonErrorResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "type.NoContent": {
        "key": {
          "schema": {
            "type": "string"
          },
          "generatedName": "TypeNoContentKey",
          "groupName": [],
          "type": "primitive"
        },
        "value": {
          "generatedName": "TypeNoContentValue",
          "type": "unknown"
        },
        "generatedName": "TypeNoContent",
        "groupName": [],
        "type": "map"
      },
      "uuid.UUID": {
        "schema": {
          "format": "uuid",
          "type": "string"
        },
        "generatedName": "UuidUuid",
        "groupName": [],
        "type": "primitive"
      },
      "ResponseTranscriptTime": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseTranscriptTimeStart",
            "key": "start",
            "schema": {
              "generatedName": "ResponseTranscriptTimeStart",
              "value": {
                "schema": {
                  "type": "double"
                },
                "generatedName": "ResponseTranscriptTimeStart",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptTimeEnd",
            "key": "end",
            "schema": {
              "generatedName": "ResponseTranscriptTimeEnd",
              "value": {
                "schema": {
                  "type": "double"
                },
                "generatedName": "ResponseTranscriptTimeEnd",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseTranscriptTime",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseTranscript": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseTranscriptId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseTranscriptId",
              "value": {
                "generatedName": "ResponseTranscriptId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptStart",
            "key": "start",
            "schema": {
              "generatedName": "ResponseTranscriptStart",
              "value": {
                "schema": {
                  "type": "double"
                },
                "generatedName": "ResponseTranscriptStart",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptDuration",
            "key": "duration",
            "schema": {
              "generatedName": "ResponseTranscriptDuration",
              "value": {
                "schema": {
                  "type": "double"
                },
                "generatedName": "ResponseTranscriptDuration",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptTranscript",
            "key": "transcript",
            "schema": {
              "generatedName": "ResponseTranscriptTranscript",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseTranscriptTranscript",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptIsFinal",
            "key": "isFinal",
            "schema": {
              "generatedName": "ResponseTranscriptIsFinal",
              "value": {
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "ResponseTranscriptIsFinal",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptParticipant",
            "key": "participant",
            "schema": {
              "generatedName": "ResponseTranscriptParticipant",
              "value": {
                "generatedName": "ResponseTranscriptParticipant",
                "schema": "RequestParticipantCreate",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseTranscriptTime",
            "key": "time",
            "schema": {
              "generatedName": "ResponseTranscriptTime",
              "value": {
                "generatedName": "ResponseTranscriptTime",
                "schema": "ResponseTranscriptTime",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseTranscript",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "DocumentationEvidence": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "documentationEvidenceEvidenceId",
            "key": "evidenceId",
            "schema": {
              "generatedName": "DocumentationEvidenceEvidenceId",
              "value": {
                "generatedName": "DocumentationEvidenceEvidenceId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "documentationEvidenceType",
            "key": "type",
            "schema": {
              "generatedName": "DocumentationEvidenceType",
              "value": {
                "schema": {
                  "example": "transcript",
                  "type": "string"
                },
                "generatedName": "DocumentationEvidenceType",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "documentationEvidenceQuote",
            "key": "quote",
            "schema": {
              "generatedName": "DocumentationEvidenceQuote",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "DocumentationEvidenceQuote",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "DocumentationEvidence",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "ResponseDocumentation": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "responseDocumentationId",
            "key": "id",
            "schema": {
              "generatedName": "ResponseDocumentationId",
              "value": {
                "generatedName": "ResponseDocumentationId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentationText",
            "key": "text",
            "schema": {
              "generatedName": "ResponseDocumentationText",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseDocumentationText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentationSectionId",
            "key": "sectionId",
            "schema": {
              "generatedName": "ResponseDocumentationSectionId",
              "value": {
                "generatedName": "ResponseDocumentationSectionId",
                "schema": "UUID",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentationSectionTitle",
            "key": "sectionTitle",
            "schema": {
              "generatedName": "ResponseDocumentationSectionTitle",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ResponseDocumentationSectionTitle",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "responseDocumentationEvidence",
            "key": "evidence",
            "schema": {
              "generatedName": "ResponseDocumentationEvidence",
              "value": {
                "generatedName": "ResponseDocumentationEvidence",
                "schema": "DocumentationEvidence",
                "source": {
                  "file": "../swagger.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "optional"
            },
            "audiences": [],
            "readonly": false,
            "writeonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ResponseDocumentation",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../swagger.json",
          "type": "openapi"
        },
        "type": "object"
      }
    },
    "namespacedSchemas": {
      "stream": {
        "transcripts": {
          "properties": [
            {
              "key": "type",
              "schema": {
                "generatedName": "TranscriptsType",
                "value": {
                  "generatedName": "TranscriptsType",
                  "value": {
                    "value": "transcript",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "literal"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptsType"
            },
            {
              "key": "data",
              "schema": {
                "generatedName": "TranscriptsData",
                "value": {
                  "generatedName": "TranscriptsData",
                  "value": {
                    "generatedName": "TranscriptsDataItem",
                    "schema": "transcript",
                    "source": {
                      "file": "../asyncapi-original.json",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "array"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptsData"
            }
          ],
          "generatedName": "Transcripts",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "endStream": {
          "properties": [
            {
              "key": "type",
              "schema": {
                "generatedName": "EndStreamType",
                "value": {
                  "generatedName": "EndStreamType",
                  "value": {
                    "value": "end",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "literal"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "endStreamType"
            }
          ],
          "generatedName": "EndStream",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "configParticipant": {
          "properties": [
            {
              "key": "channel",
              "schema": {
                "generatedName": "ConfigParticipantChannel",
                "value": {
                  "generatedName": "ConfigParticipantChannel",
                  "schema": {
                    "type": "int"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configParticipantChannel"
            },
            {
              "key": "role",
              "schema": {
                "generatedName": "ConfigParticipantRole",
                "value": {
                  "generatedName": "ConfigParticipantRole",
                  "values": [
                    {
                      "generatedName": "patient",
                      "value": "patient",
                      "casing": {}
                    },
                    {
                      "generatedName": "doctor",
                      "value": "doctor",
                      "casing": {}
                    },
                    {
                      "generatedName": "multiple",
                      "value": "multiple",
                      "casing": {}
                    }
                  ],
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "enum"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configParticipantRole"
            }
          ],
          "generatedName": "ConfigParticipant",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "transcript": {
          "properties": [
            {
              "key": "id",
              "schema": {
                "generatedName": "TranscriptId",
                "value": {
                  "generatedName": "TranscriptId",
                  "schema": {
                    "example": "423382fe-2895-44b5-b33b-206b522a786b",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptId"
            },
            {
              "key": "transcript",
              "schema": {
                "generatedName": "TranscriptTranscript",
                "value": {
                  "generatedName": "TranscriptTranscript",
                  "schema": {
                    "example": "Hello doctor",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptTranscript"
            },
            {
              "key": "final",
              "schema": {
                "generatedName": "TranscriptFinal",
                "value": {
                  "generatedName": "TranscriptFinal",
                  "schema": {
                    "type": "boolean"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptFinal"
            },
            {
              "key": "speakerId",
              "schema": {
                "generatedName": "TranscriptSpeakerId",
                "value": {
                  "generatedName": "TranscriptSpeakerId",
                  "schema": {
                    "type": "int"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptSpeakerId"
            },
            {
              "key": "participant",
              "schema": {
                "generatedName": "TranscriptParticipant",
                "value": {
                  "generatedName": "TranscriptParticipant",
                  "schema": "transcriptParticipant",
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptParticipant",
              "readonly": false,
              "writeonly": false
            },
            {
              "key": "time",
              "schema": {
                "generatedName": "TranscriptTime",
                "value": {
                  "generatedName": "TranscriptTime",
                  "schema": "transcriptTime",
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptTime",
              "readonly": false,
              "writeonly": false
            }
          ],
          "generatedName": "Transcript",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "transcriptParticipant": {
          "properties": [
            {
              "key": "channel",
              "schema": {
                "generatedName": "TranscriptParticipantChannel",
                "value": {
                  "generatedName": "TranscriptParticipantChannel",
                  "schema": {
                    "type": "int"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptParticipantChannel"
            }
          ],
          "generatedName": "TranscriptParticipant",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "transcriptTime": {
          "properties": [
            {
              "key": "start",
              "schema": {
                "generatedName": "TranscriptTimeStart",
                "value": {
                  "generatedName": "TranscriptTimeStart",
                  "schema": {
                    "type": "double"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptTimeStart"
            },
            {
              "key": "end",
              "schema": {
                "generatedName": "TranscriptTimeEnd",
                "value": {
                  "generatedName": "TranscriptTimeEnd",
                  "schema": {
                    "type": "double"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "transcriptTimeEnd"
            }
          ],
          "generatedName": "TranscriptTime",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "facts": {
          "properties": [
            {
              "key": "type",
              "schema": {
                "generatedName": "FactsType",
                "value": {
                  "generatedName": "FactsType",
                  "value": {
                    "value": "facts",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "literal"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factsType"
            },
            {
              "key": "data",
              "schema": {
                "generatedName": "FactsData",
                "value": {
                  "generatedName": "FactsData",
                  "value": {
                    "generatedName": "FactsDataItem",
                    "schema": "fact",
                    "source": {
                      "file": "../asyncapi-original.json",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "array"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factsData"
            }
          ],
          "generatedName": "Facts",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "fact": {
          "properties": [
            {
              "key": "id",
              "schema": {
                "generatedName": "FactId",
                "value": {
                  "generatedName": "FactId",
                  "schema": {
                    "example": "0555b0aa-2341-4ae8-896a-f5b3fed97cf1",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factId"
            },
            {
              "key": "text",
              "schema": {
                "generatedName": "FactText",
                "value": {
                  "generatedName": "FactText",
                  "schema": {
                    "example": "diabetes",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factText"
            },
            {
              "key": "group",
              "schema": {
                "generatedName": "FactGroup",
                "value": {
                  "generatedName": "FactGroup",
                  "schema": {
                    "example": "diabetes group",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factGroup"
            },
            {
              "key": "groupId",
              "schema": {
                "generatedName": "FactGroupId",
                "value": {
                  "generatedName": "FactGroupId",
                  "schema": {
                    "example": "25fe5dc6-8a80-40e7-898e-94bba25e595a",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factGroupId"
            },
            {
              "key": "isDiscarded",
              "schema": {
                "generatedName": "FactIsDiscarded",
                "value": {
                  "generatedName": "FactIsDiscarded",
                  "schema": {
                    "type": "boolean"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factIsDiscarded"
            },
            {
              "key": "source",
              "schema": {
                "generatedName": "FactSource",
                "value": {
                  "generatedName": "FactSource",
                  "schema": {
                    "example": "core",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factSource"
            },
            {
              "key": "createdAt",
              "schema": {
                "generatedName": "FactCreatedAt",
                "value": {
                  "generatedName": "FactCreatedAt",
                  "schema": {
                    "type": "datetime"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factCreatedAt"
            },
            {
              "key": "updatedAt",
              "schema": {
                "generatedName": "FactUpdatedAt",
                "value": {
                  "generatedName": "FactUpdatedAt",
                  "schema": {
                    "type": "datetime"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factUpdatedAt"
            },
            {
              "key": "evidence",
              "schema": {
                "generatedName": "FactEvidence",
                "value": {
                  "generatedName": "FactEvidence",
                  "value": {
                    "generatedName": "FactEvidenceItem",
                    "schema": "evidence",
                    "source": {
                      "file": "../asyncapi-original.json",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "array"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "factEvidence"
            }
          ],
          "generatedName": "Fact",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "evidence": {
          "properties": [
            {
              "key": "type",
              "schema": {
                "generatedName": "EvidenceType",
                "value": {
                  "generatedName": "EvidenceType",
                  "schema": {
                    "example": "",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "evidenceType"
            },
            {
              "key": "reference",
              "schema": {
                "generatedName": "EvidenceReference",
                "value": {
                  "generatedName": "EvidenceReference",
                  "schema": {
                    "example": "",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "evidenceReference"
            },
            {
              "key": "quote",
              "schema": {
                "generatedName": "EvidenceQuote",
                "value": {
                  "generatedName": "EvidenceQuote",
                  "schema": {
                    "example": "",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "evidenceQuote"
            }
          ],
          "generatedName": "Evidence",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "document": {
          "properties": [
            {
              "key": "documentId",
              "schema": {
                "generatedName": "DocumentDocumentId",
                "value": {
                  "generatedName": "DocumentDocumentId",
                  "schema": {
                    "example": "6895243d-64d6-4690-a4f7-911175b569bd",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "documentDocumentId"
            },
            {
              "key": "content",
              "schema": {
                "generatedName": "DocumentContent",
                "value": {
                  "generatedName": "DocumentContent",
                  "schema": {
                    "example": "",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "documentContent"
            },
            {
              "key": "templateKey",
              "schema": {
                "generatedName": "DocumentTemplateKey",
                "value": {
                  "generatedName": "DocumentTemplateKey",
                  "schema": {
                    "example": "template-key",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "documentTemplateKey"
            },
            {
              "key": "language",
              "schema": {
                "generatedName": "DocumentLanguage",
                "value": {
                  "generatedName": "DocumentLanguage",
                  "schema": {
                    "example": "en",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "documentLanguage"
            }
          ],
          "generatedName": "Document",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "audioPacket": {
          "properties": [
            {
              "key": "timestamp",
              "schema": {
                "generatedName": "AudioPacketTimestamp",
                "value": {
                  "generatedName": "AudioPacketTimestamp",
                  "schema": {
                    "type": "datetime"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "audioPacketTimestamp"
            },
            {
              "key": "data",
              "schema": {
                "generatedName": "AudioPacketData",
                "value": {
                  "generatedName": "AudioPacketData",
                  "schema": {
                    "format": "binary",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "audioPacketData"
            }
          ],
          "generatedName": "AudioPacket",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "status": {
          "properties": [
            {
              "key": "type",
              "schema": {
                "generatedName": "StatusType",
                "value": {
                  "generatedName": "StatusType",
                  "values": [
                    {
                      "generatedName": "CONFIG_ACCEPTED",
                      "value": "CONFIG_ACCEPTED",
                      "casing": {}
                    },
                    {
                      "generatedName": "CONFIG_DENIED",
                      "value": "CONFIG_DENIED",
                      "casing": {}
                    },
                    {
                      "generatedName": "CONFIG_MISSING",
                      "value": "CONFIG_MISSING",
                      "casing": {}
                    },
                    {
                      "generatedName": "CONFIG_NOT_PROVIDED",
                      "value": "CONFIG_NOT_PROVIDED",
                      "casing": {}
                    },
                    {
                      "generatedName": "CONFIG_ALREADY_RECEIVED",
                      "value": "CONFIG_ALREADY_RECEIVED",
                      "casing": {}
                    }
                  ],
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "enum"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "statusType"
            },
            {
              "key": "reason",
              "schema": {
                "generatedName": "StatusReason",
                "value": {
                  "generatedName": "StatusReason",
                  "schema": {
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "statusReason"
            }
          ],
          "generatedName": "Status",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "configMode": {
          "properties": [
            {
              "key": "type",
              "schema": {
                "generatedName": "ConfigModeType",
                "value": {
                  "generatedName": "ConfigModeType",
                  "values": [
                    {
                      "generatedName": "facts",
                      "value": "facts",
                      "casing": {}
                    },
                    {
                      "generatedName": "documentation",
                      "value": "documentation",
                      "casing": {}
                    },
                    {
                      "generatedName": "transcription",
                      "value": "transcription",
                      "casing": {}
                    }
                  ],
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "enum"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configModeType"
            },
            {
              "key": "outputLocale",
              "schema": {
                "generatedName": "ConfigModeOutputLocale",
                "value": {
                  "generatedName": "ConfigModeOutputLocale",
                  "schema": {
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configModeOutputLocale"
            },
            {
              "key": "templateId",
              "schema": {
                "generatedName": "ConfigModeTemplateId",
                "value": {
                  "generatedName": "ConfigModeTemplateId",
                  "schema": {
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configModeTemplateId"
            }
          ],
          "generatedName": "ConfigMode",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "configTranscription": {
          "properties": [
            {
              "key": "primaryLanguage",
              "schema": {
                "generatedName": "ConfigTranscriptionPrimaryLanguage",
                "value": {
                  "generatedName": "ConfigTranscriptionPrimaryLanguage",
                  "values": [
                    {
                      "generatedName": "en",
                      "value": "en",
                      "casing": {}
                    },
                    {
                      "generatedName": "EnUs",
                      "value": "en-us",
                      "casing": {}
                    },
                    {
                      "generatedName": "EnGb",
                      "value": "en-gb",
                      "casing": {}
                    },
                    {
                      "generatedName": "da",
                      "value": "da",
                      "casing": {}
                    },
                    {
                      "generatedName": "se",
                      "value": "se",
                      "casing": {}
                    },
                    {
                      "generatedName": "no",
                      "value": "no",
                      "casing": {}
                    },
                    {
                      "generatedName": "de",
                      "value": "de",
                      "casing": {}
                    },
                    {
                      "generatedName": "nl",
                      "value": "nl",
                      "casing": {}
                    },
                    {
                      "generatedName": "es",
                      "value": "es",
                      "casing": {}
                    },
                    {
                      "generatedName": "it",
                      "value": "it",
                      "casing": {}
                    },
                    {
                      "generatedName": "fr",
                      "value": "fr",
                      "casing": {}
                    },
                    {
                      "generatedName": "pt",
                      "value": "pt",
                      "casing": {}
                    },
                    {
                      "generatedName": "DeCh",
                      "value": "de-ch",
                      "casing": {}
                    },
                    {
                      "generatedName": "sv",
                      "value": "sv",
                      "casing": {}
                    }
                  ],
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "enum"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configTranscriptionPrimaryLanguage"
            },
            {
              "key": "isMultichannel",
              "schema": {
                "generatedName": "ConfigTranscriptionIsMultichannel",
                "value": {
                  "generatedName": "ConfigTranscriptionIsMultichannel",
                  "schema": {
                    "type": "boolean"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configTranscriptionIsMultichannel"
            },
            {
              "key": "isDiarization",
              "schema": {
                "generatedName": "ConfigTranscriptionIsDiarization",
                "value": {
                  "generatedName": "ConfigTranscriptionIsDiarization",
                  "schema": {
                    "type": "boolean"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "primitive"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configTranscriptionIsDiarization"
            },
            {
              "key": "participants",
              "schema": {
                "generatedName": "ConfigTranscriptionParticipants",
                "value": {
                  "generatedName": "ConfigTranscriptionParticipants",
                  "value": {
                    "generatedName": "ConfigTranscriptionParticipantsItem",
                    "schema": "configParticipant",
                    "source": {
                      "file": "../asyncapi-original.json",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "array"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configTranscriptionParticipants"
            },
            {
              "key": "model",
              "schema": {
                "generatedName": "ConfigTranscriptionModel",
                "value": {
                  "generatedName": "ConfigTranscriptionModel",
                  "value": {
                    "value": "model1",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "literal"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configTranscriptionModel"
            }
          ],
          "generatedName": "ConfigTranscription",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "configData": {
          "properties": [
            {
              "key": "transcription",
              "schema": {
                "generatedName": "ConfigDataTranscription",
                "value": {
                  "generatedName": "ConfigDataTranscription",
                  "schema": "configTranscription",
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configDataTranscription",
              "readonly": false,
              "writeonly": false
            },
            {
              "key": "mode",
              "schema": {
                "generatedName": "ConfigDataMode",
                "value": {
                  "generatedName": "ConfigDataMode",
                  "schema": "configMode",
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configDataMode",
              "readonly": false,
              "writeonly": false
            }
          ],
          "generatedName": "ConfigData",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "configuration": {
          "properties": [
            {
              "key": "type",
              "schema": {
                "generatedName": "ConfigurationType",
                "value": {
                  "generatedName": "ConfigurationType",
                  "value": {
                    "value": "config",
                    "type": "string"
                  },
                  "namespace": "stream",
                  "groupName": [
                    {
                      "type": "namespace",
                      "name": "stream"
                    }
                  ],
                  "type": "literal"
                },
                "namespace": "stream",
                "groupName": [
                  {
                    "type": "namespace",
                    "name": "stream"
                  }
                ],
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configurationType"
            },
            {
              "key": "configuration",
              "schema": {
                "generatedName": "ConfigurationConfiguration",
                "value": {
                  "generatedName": "ConfigurationConfiguration",
                  "schema": "configData",
                  "source": {
                    "file": "../asyncapi-original.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "type": "optional"
              },
              "audiences": [],
              "conflict": {},
              "generatedName": "configurationConfiguration",
              "readonly": false,
              "writeonly": false
            }
          ],
          "generatedName": "Configuration",
          "allOf": [],
          "allOfPropertyConflicts": [],
          "namespace": "stream",
          "groupName": [
            {
              "type": "namespace",
              "name": "stream"
            }
          ],
          "fullExamples": [],
          "additionalProperties": false,
          "source": {
            "file": "../asyncapi-original.json",
            "type": "openapi"
          },
          "type": "object"
        }
      }
    }
  },
  "variables": {},
  "nonRequestReferencedSchemas": {},
  "securitySchemes": {},
  "globalHeaders": [],
  "idempotencyHeaders": [],
  "groups": {}
}