{
  "auth": {
    "requirement": "ANY",
    "schemes": [
      {
        "name": {
          "name": {
            "originalName": "API-Key",
            "camelCase": {
              "unsafeName": "apiKey",
              "safeName": "apiKey"
            },
            "snakeCase": {
              "unsafeName": "api_key",
              "safeName": "api_key"
            },
            "screamingSnakeCase": {
              "unsafeName": "API_KEY",
              "safeName": "API_KEY"
            },
            "pascalCase": {
              "unsafeName": "ApiKey",
              "safeName": "ApiKey"
            }
          },
          "wireValue": "API-Key"
        },
        "valueType": {
          "container": {
            "optional": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "type": "optional"
          },
          "type": "container"
        },
        "docs": "API Key based client identification. See details at [Secure Access](https://dx.apiture.com/docs/api-documentation/secure-access).",
        "type": "header"
      }
    ]
  },
  "types": {
    "accountIds": {
      "name": {
        "typeId": "accountIds",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "accountIds",
          "camelCase": {
            "unsafeName": "accountIds",
            "safeName": "accountIds"
          },
          "snakeCase": {
            "unsafeName": "account_ids",
            "safeName": "account_ids"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_IDS",
            "safeName": "ACCOUNT_IDS"
          },
          "pascalCase": {
            "unsafeName": "AccountIds",
            "safeName": "AccountIds"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "container": {
            "list": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "resourceId",
              "inline": false,
              "type": "named"
            },
            "type": "list"
          },
          "type": "container"
        },
        "resolvedType": {
          "container": {
            "list": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "resourceId",
              "inline": false,
              "type": "named"
            },
            "type": "list"
          },
          "type": "container"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An array of account IDs.",
      "referencedTypes": {},
      "inline": false
    },
    "accountAllowsFilter": {
      "name": {
        "typeId": "accountAllowsFilter",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "accountAllowsFilter",
          "camelCase": {
            "unsafeName": "accountAllowsFilter",
            "safeName": "accountAllowsFilter"
          },
          "snakeCase": {
            "unsafeName": "account_allows_filter",
            "safeName": "account_allows_filter"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_ALLOWS_FILTER",
            "safeName": "ACCOUNT_ALLOWS_FILTER"
          },
          "pascalCase": {
            "unsafeName": "AccountAllowsFilter",
            "safeName": "AccountAllowsFilter"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "billPay",
                "camelCase": {
                  "unsafeName": "billPay",
                  "safeName": "billPay"
                },
                "snakeCase": {
                  "unsafeName": "bill_pay",
                  "safeName": "bill_pay"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BILL_PAY",
                  "safeName": "BILL_PAY"
                },
                "pascalCase": {
                  "unsafeName": "BillPay",
                  "safeName": "BillPay"
                }
              },
              "wireValue": "billPay"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "transferFrom",
                "camelCase": {
                  "unsafeName": "transferFrom",
                  "safeName": "transferFrom"
                },
                "snakeCase": {
                  "unsafeName": "transfer_from",
                  "safeName": "transfer_from"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TRANSFER_FROM",
                  "safeName": "TRANSFER_FROM"
                },
                "pascalCase": {
                  "unsafeName": "TransferFrom",
                  "safeName": "TransferFrom"
                }
              },
              "wireValue": "transferFrom"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "transferTo",
                "camelCase": {
                  "unsafeName": "transferTo",
                  "safeName": "transferTo"
                },
                "snakeCase": {
                  "unsafeName": "transfer_to",
                  "safeName": "transfer_to"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TRANSFER_TO",
                  "safeName": "TRANSFER_TO"
                },
                "pascalCase": {
                  "unsafeName": "TransferTo",
                  "safeName": "TransferTo"
                }
              },
              "wireValue": "transferTo"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "mobileCheckDeposit",
                "camelCase": {
                  "unsafeName": "mobileCheckDeposit",
                  "safeName": "mobileCheckDeposit"
                },
                "snakeCase": {
                  "unsafeName": "mobile_check_deposit",
                  "safeName": "mobile_check_deposit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MOBILE_CHECK_DEPOSIT",
                  "safeName": "MOBILE_CHECK_DEPOSIT"
                },
                "pascalCase": {
                  "unsafeName": "MobileCheckDeposit",
                  "safeName": "MobileCheckDeposit"
                }
              },
              "wireValue": "mobileCheckDeposit"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "view",
                "camelCase": {
                  "unsafeName": "view",
                  "safeName": "view"
                },
                "snakeCase": {
                  "unsafeName": "view",
                  "safeName": "view"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VIEW",
                  "safeName": "VIEW"
                },
                "pascalCase": {
                  "unsafeName": "View",
                  "safeName": "View"
                }
              },
              "wireValue": "view"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "viewCards",
                "camelCase": {
                  "unsafeName": "viewCards",
                  "safeName": "viewCards"
                },
                "snakeCase": {
                  "unsafeName": "view_cards",
                  "safeName": "view_cards"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VIEW_CARDS",
                  "safeName": "VIEW_CARDS"
                },
                "pascalCase": {
                  "unsafeName": "ViewCards",
                  "safeName": "ViewCards"
                }
              },
              "wireValue": "viewCards"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "manageCards",
                "camelCase": {
                  "unsafeName": "manageCards",
                  "safeName": "manageCards"
                },
                "snakeCase": {
                  "unsafeName": "manage_cards",
                  "safeName": "manage_cards"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MANAGE_CARDS",
                  "safeName": "MANAGE_CARDS"
                },
                "pascalCase": {
                  "unsafeName": "ManageCards",
                  "safeName": "ManageCards"
                }
              },
              "wireValue": "manageCards"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Values for the `?allows=` filter in [`listAccounts`](#op-listAccounts).\n\n<strong><code>accountAllowsFilter</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>billPay</code></strong></td><td>Bill Pay: <p>Include each account where the caller is allowed to use the bill pay feature.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>transferFrom</code></strong></td><td>Transfer From: <p>Include each account where the caller is allowed to transfer money from the account.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>transferTo</code></strong></td><td>Transfer To: <p>Include each account where the caller is allowed to transfer money into the account.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>mobileCheckDeposit</code></strong></td><td>Mobile Check Deposit: <p>Include each account where the caller is allowed to deposit mobile checks.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>view</code></strong></td><td>View: <p>Include each account where the caller is allowed to view full account details (balances, full account number, transactions, etc).</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>viewCards</code></strong></td><td>View Cards: <p>Include each account where the caller is allowed to view debit card details.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>manageCards</code></strong></td><td>Manage Cards: <p>Include each account where the caller is allowed to manage debit card details.</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "accountPermissions": {
      "name": {
        "typeId": "accountPermissions",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "accountPermissions",
          "camelCase": {
            "unsafeName": "accountPermissions",
            "safeName": "accountPermissions"
          },
          "snakeCase": {
            "unsafeName": "account_permissions",
            "safeName": "account_permissions"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_PERMISSIONS",
            "safeName": "ACCOUNT_PERMISSIONS"
          },
          "pascalCase": {
            "unsafeName": "AccountPermissions",
            "safeName": "AccountPermissions"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "billPay",
                "camelCase": {
                  "unsafeName": "billPay",
                  "safeName": "billPay"
                },
                "snakeCase": {
                  "unsafeName": "bill_pay",
                  "safeName": "bill_pay"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BILL_PAY",
                  "safeName": "BILL_PAY"
                },
                "pascalCase": {
                  "unsafeName": "BillPay",
                  "safeName": "BillPay"
                }
              },
              "wireValue": "billPay"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "If `true`, the customer may use this account for Bill Pay."
          },
          {
            "name": {
              "name": {
                "originalName": "mobileCheckDeposit",
                "camelCase": {
                  "unsafeName": "mobileCheckDeposit",
                  "safeName": "mobileCheckDeposit"
                },
                "snakeCase": {
                  "unsafeName": "mobile_check_deposit",
                  "safeName": "mobile_check_deposit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MOBILE_CHECK_DEPOSIT",
                  "safeName": "MOBILE_CHECK_DEPOSIT"
                },
                "pascalCase": {
                  "unsafeName": "MobileCheckDeposit",
                  "safeName": "MobileCheckDeposit"
                }
              },
              "wireValue": "mobileCheckDeposit"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "If `true`, the customer may use this account for mobile check deposits."
          },
          {
            "name": {
              "name": {
                "originalName": "transferFrom",
                "camelCase": {
                  "unsafeName": "transferFrom",
                  "safeName": "transferFrom"
                },
                "snakeCase": {
                  "unsafeName": "transfer_from",
                  "safeName": "transfer_from"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TRANSFER_FROM",
                  "safeName": "TRANSFER_FROM"
                },
                "pascalCase": {
                  "unsafeName": "TransferFrom",
                  "safeName": "TransferFrom"
                }
              },
              "wireValue": "transferFrom"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "If `true`, the customer may use this account as the target (deposit) account for account-to-account transfers."
          },
          {
            "name": {
              "name": {
                "originalName": "transferTo",
                "camelCase": {
                  "unsafeName": "transferTo",
                  "safeName": "transferTo"
                },
                "snakeCase": {
                  "unsafeName": "transfer_to",
                  "safeName": "transfer_to"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TRANSFER_TO",
                  "safeName": "TRANSFER_TO"
                },
                "pascalCase": {
                  "unsafeName": "TransferTo",
                  "safeName": "TransferTo"
                }
              },
              "wireValue": "transferTo"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "If `true`, the customer may use this account as the source (debit) account for account-to-account transfers."
          },
          {
            "name": {
              "name": {
                "originalName": "view",
                "camelCase": {
                  "unsafeName": "view",
                  "safeName": "view"
                },
                "snakeCase": {
                  "unsafeName": "view",
                  "safeName": "view"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VIEW",
                  "safeName": "VIEW"
                },
                "pascalCase": {
                  "unsafeName": "View",
                  "safeName": "View"
                }
              },
              "wireValue": "view"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "If `true`, the customer may view the details of this account, including the account balance and transactions."
          },
          {
            "name": {
              "name": {
                "originalName": "viewCards",
                "camelCase": {
                  "unsafeName": "viewCards",
                  "safeName": "viewCards"
                },
                "snakeCase": {
                  "unsafeName": "view_cards",
                  "safeName": "view_cards"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VIEW_CARDS",
                  "safeName": "VIEW_CARDS"
                },
                "pascalCase": {
                  "unsafeName": "ViewCards",
                  "safeName": "ViewCards"
                }
              },
              "wireValue": "viewCards"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "If `true`, the customer may view debit cards associated with this account."
          },
          {
            "name": {
              "name": {
                "originalName": "manageCards",
                "camelCase": {
                  "unsafeName": "manageCards",
                  "safeName": "manageCards"
                },
                "snakeCase": {
                  "unsafeName": "manage_cards",
                  "safeName": "manage_cards"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MANAGE_CARDS",
                  "safeName": "MANAGE_CARDS"
                },
                "pascalCase": {
                  "unsafeName": "ManageCards",
                  "safeName": "ManageCards"
                }
              },
              "wireValue": "manageCards"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "If true, the customer may manage debit cards associated with this account. This includes locking and unlocking cards, changing card controls, ordering cards, or canceling cards."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Flags which indicate the permissions the current authorized user has on this account item resource. Most of these properties may only be `true` for internal accounts. These permissions are available in account items in the [`accounts`](#schema-accounts) list. See [`fullAccountPermissions`](#schema-fullAccountPermissions) for all capabilities a customer has on an account (the `account.allows` object in the [`account`](#schema-account) object response from [`getAccount`](#op-getAccount).)",
      "referencedTypes": {},
      "inline": false
    },
    "overdraftAccountFields": {
      "name": {
        "typeId": "overdraftAccountFields",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "overdraftAccountFields",
          "camelCase": {
            "unsafeName": "overdraftAccountFields",
            "safeName": "overdraftAccountFields"
          },
          "snakeCase": {
            "unsafeName": "overdraft_account_fields",
            "safeName": "overdraft_account_fields"
          },
          "screamingSnakeCase": {
            "unsafeName": "OVERDRAFT_ACCOUNT_FIELDS",
            "safeName": "OVERDRAFT_ACCOUNT_FIELDS"
          },
          "pascalCase": {
            "unsafeName": "OverdraftAccountFields",
            "safeName": "OverdraftAccountFields"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "resourceId",
              "inline": false,
              "type": "named"
            },
            "docs": "The unique ID of the account resource. Use this as the `{accountId}` in [`getAccount`](#op-getAccount) or [`listAccountBalances`](#op-listAccountBalances)."
          },
          {
            "name": {
              "name": {
                "originalName": "label",
                "camelCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "snakeCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LABEL",
                  "safeName": "LABEL"
                },
                "pascalCase": {
                  "unsafeName": "Label",
                  "safeName": "Label"
                }
              },
              "wireValue": "label"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 80
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The human-readable label for this account. This is either the `nickname` (if assigned for the current customer), or the `product.label` concatenated with the `maskedNumber`.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "maskedNumber",
                "camelCase": {
                  "unsafeName": "maskedNumber",
                  "safeName": "maskedNumber"
                },
                "snakeCase": {
                  "unsafeName": "masked_number",
                  "safeName": "masked_number"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MASKED_NUMBER",
                  "safeName": "MASKED_NUMBER"
                },
                "pascalCase": {
                  "unsafeName": "MaskedNumber",
                  "safeName": "MaskedNumber"
                }
              },
              "wireValue": "maskedNumber"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "maskedAccountNumber",
              "inline": false,
              "type": "named"
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Fields of an overdraft protection account, used to compose other schemas.",
      "referencedTypes": {},
      "inline": false
    },
    "accountLocation": {
      "name": {
        "typeId": "accountLocation",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "accountLocation",
          "camelCase": {
            "unsafeName": "accountLocation",
            "safeName": "accountLocation"
          },
          "snakeCase": {
            "unsafeName": "account_location",
            "safeName": "account_location"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_LOCATION",
            "safeName": "ACCOUNT_LOCATION"
          },
          "pascalCase": {
            "unsafeName": "AccountLocation",
            "safeName": "AccountLocation"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "internal",
                "camelCase": {
                  "unsafeName": "internal",
                  "safeName": "internal"
                },
                "snakeCase": {
                  "unsafeName": "internal",
                  "safeName": "internal"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INTERNAL",
                  "safeName": "INTERNAL"
                },
                "pascalCase": {
                  "unsafeName": "Internal",
                  "safeName": "Internal"
                }
              },
              "wireValue": "internal"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "external",
                "camelCase": {
                  "unsafeName": "external",
                  "safeName": "external"
                },
                "snakeCase": {
                  "unsafeName": "external",
                  "safeName": "external"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXTERNAL",
                  "safeName": "EXTERNAL"
                },
                "pascalCase": {
                  "unsafeName": "External",
                  "safeName": "External"
                }
              },
              "wireValue": "external"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "outside",
                "camelCase": {
                  "unsafeName": "outside",
                  "safeName": "outside"
                },
                "snakeCase": {
                  "unsafeName": "outside",
                  "safeName": "outside"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OUTSIDE",
                  "safeName": "OUTSIDE"
                },
                "pascalCase": {
                  "unsafeName": "Outside",
                  "safeName": "Outside"
                }
              },
              "wireValue": "outside"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Indicates where an account is held:\n  * `internal` accounts at the current financial institution;\n  * `external` accounts at another financial institution;\n  * `outside` accounts non-banking accounts such as brokerage and fund accounts.\nAccount transfers are only allowed between `internal` and `external` accounts. All accounts are considered when calculating total cash balance.",
      "referencedTypes": {},
      "inline": false
    },
    "accountFields": {
      "name": {
        "typeId": "accountFields",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "accountFields",
          "camelCase": {
            "unsafeName": "accountFields",
            "safeName": "accountFields"
          },
          "snakeCase": {
            "unsafeName": "account_fields",
            "safeName": "account_fields"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_FIELDS",
            "safeName": "ACCOUNT_FIELDS"
          },
          "pascalCase": {
            "unsafeName": "AccountFields",
            "safeName": "AccountFields"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "label",
                "camelCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "snakeCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LABEL",
                  "safeName": "LABEL"
                },
                "pascalCase": {
                  "unsafeName": "Label",
                  "safeName": "Label"
                }
              },
              "wireValue": "label"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 80
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The human-readable label for this account. This is either the `nickname` (if assigned for the current customer), or the `product.label` concatenated with the `maskedNumber`.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "nickname",
                "camelCase": {
                  "unsafeName": "nickname",
                  "safeName": "nickname"
                },
                "snakeCase": {
                  "unsafeName": "nickname",
                  "safeName": "nickname"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NICKNAME",
                  "safeName": "NICKNAME"
                },
                "pascalCase": {
                  "unsafeName": "Nickname",
                  "safeName": "Nickname"
                }
              },
              "wireValue": "nickname"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "accountNickname",
              "inline": false,
              "type": "named"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "maskedNumber",
                "camelCase": {
                  "unsafeName": "maskedNumber",
                  "safeName": "maskedNumber"
                },
                "snakeCase": {
                  "unsafeName": "masked_number",
                  "safeName": "masked_number"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MASKED_NUMBER",
                  "safeName": "MASKED_NUMBER"
                },
                "pascalCase": {
                  "unsafeName": "MaskedNumber",
                  "safeName": "MaskedNumber"
                }
              },
              "wireValue": "maskedNumber"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "maskedAccountNumber",
              "inline": false,
              "type": "named"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "product",
                "camelCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "snakeCase": {
                  "unsafeName": "product",
                  "safeName": "product"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PRODUCT",
                  "safeName": "PRODUCT"
                },
                "pascalCase": {
                  "unsafeName": "Product",
                  "safeName": "Product"
                }
              },
              "wireValue": "product"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "productReference",
              "inline": false,
              "type": "named"
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Fragment schema use to build other account schemas.",
      "referencedTypes": {},
      "inline": false
    },
    "externalAccountVerificationMethod": {
      "name": {
        "typeId": "externalAccountVerificationMethod",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "externalAccountVerificationMethod",
          "camelCase": {
            "unsafeName": "externalAccountVerificationMethod",
            "safeName": "externalAccountVerificationMethod"
          },
          "snakeCase": {
            "unsafeName": "external_account_verification_method",
            "safeName": "external_account_verification_method"
          },
          "screamingSnakeCase": {
            "unsafeName": "EXTERNAL_ACCOUNT_VERIFICATION_METHOD",
            "safeName": "EXTERNAL_ACCOUNT_VERIFICATION_METHOD"
          },
          "pascalCase": {
            "unsafeName": "ExternalAccountVerificationMethod",
            "safeName": "ExternalAccountVerificationMethod"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "instant",
                "camelCase": {
                  "unsafeName": "instant",
                  "safeName": "instant"
                },
                "snakeCase": {
                  "unsafeName": "instant",
                  "safeName": "instant"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INSTANT",
                  "safeName": "INSTANT"
                },
                "pascalCase": {
                  "unsafeName": "Instant",
                  "safeName": "Instant"
                }
              },
              "wireValue": "instant"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "microDeposits",
                "camelCase": {
                  "unsafeName": "microDeposits",
                  "safeName": "microDeposits"
                },
                "snakeCase": {
                  "unsafeName": "micro_deposits",
                  "safeName": "micro_deposits"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MICRO_DEPOSITS",
                  "safeName": "MICRO_DEPOSITS"
                },
                "pascalCase": {
                  "unsafeName": "MicroDeposits",
                  "safeName": "MicroDeposits"
                }
              },
              "wireValue": "microDeposits"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "manual",
                "camelCase": {
                  "unsafeName": "manual",
                  "safeName": "manual"
                },
                "snakeCase": {
                  "unsafeName": "manual",
                  "safeName": "manual"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MANUAL",
                  "safeName": "MANUAL"
                },
                "pascalCase": {
                  "unsafeName": "Manual",
                  "safeName": "Manual"
                }
              },
              "wireValue": "manual"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The method used to verify the customer has access to the external account.\n\n<strong><code>externalAccountVerificationMethod</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>instant</code></strong></td><td>Instant Account Verification: <p>Access to the external account is verified via integration with an account verification service provider.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>microDeposits</code></strong></td><td>Micro-Deposits: <p>Access to the external account is verified via verifying a set of micro-deposits.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>manual</code></strong></td><td>Manual: <p>Access to the external account is verified manually by the financial institution.</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "accountRoutingNumber": {
      "name": {
        "typeId": "accountRoutingNumber",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "accountRoutingNumber",
          "camelCase": {
            "unsafeName": "accountRoutingNumber",
            "safeName": "accountRoutingNumber"
          },
          "snakeCase": {
            "unsafeName": "account_routing_number",
            "safeName": "account_routing_number"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_ROUTING_NUMBER",
            "safeName": "ACCOUNT_ROUTING_NUMBER"
          },
          "pascalCase": {
            "unsafeName": "AccountRoutingNumber",
            "safeName": "AccountRoutingNumber"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 9,
                "maxLength": 9,
                "pattern": "^[0-9]{9}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 9,
                "maxLength": 9,
                "pattern": "^[0-9]{9}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An account ABA routing and transit number.",
      "referencedTypes": {},
      "inline": false
    },
    "accountNickname": {
      "name": {
        "typeId": "accountNickname",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "accountNickname",
          "camelCase": {
            "unsafeName": "accountNickname",
            "safeName": "accountNickname"
          },
          "snakeCase": {
            "unsafeName": "account_nickname",
            "safeName": "account_nickname"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_NICKNAME",
            "safeName": "ACCOUNT_NICKNAME"
          },
          "pascalCase": {
            "unsafeName": "AccountNickname",
            "safeName": "AccountNickname"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "maxLength": 50
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "maxLength": 50
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The nickname (friendly name) the customer has given this account. Each customer can define their own nickname for the same account. If omitted, the customer has not set a nickname.",
      "referencedTypes": {},
      "inline": false
    },
    "maskedAccountNumber": {
      "name": {
        "typeId": "maskedAccountNumber",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "maskedAccountNumber",
          "camelCase": {
            "unsafeName": "maskedAccountNumber",
            "safeName": "maskedAccountNumber"
          },
          "snakeCase": {
            "unsafeName": "masked_account_number",
            "safeName": "masked_account_number"
          },
          "screamingSnakeCase": {
            "unsafeName": "MASKED_ACCOUNT_NUMBER",
            "safeName": "MASKED_ACCOUNT_NUMBER"
          },
          "pascalCase": {
            "unsafeName": "MaskedAccountNumber",
            "safeName": "MaskedAccountNumber"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 2,
                "maxLength": 5,
                "pattern": "^\\*[- _a-zA-Z0-9.]{1,4}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 2,
                "maxLength": 5,
                "pattern": "^\\*[- _a-zA-Z0-9.]{1,4}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A masked account number: an asterisk `*` followed by one to four characters of the `fullAccountNumber`.",
      "referencedTypes": {},
      "inline": false
    },
    "fullAccountNumber": {
      "name": {
        "typeId": "fullAccountNumber",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "fullAccountNumber",
          "camelCase": {
            "unsafeName": "fullAccountNumber",
            "safeName": "fullAccountNumber"
          },
          "snakeCase": {
            "unsafeName": "full_account_number",
            "safeName": "full_account_number"
          },
          "screamingSnakeCase": {
            "unsafeName": "FULL_ACCOUNT_NUMBER",
            "safeName": "FULL_ACCOUNT_NUMBER"
          },
          "pascalCase": {
            "unsafeName": "FullAccountNumber",
            "safeName": "FullAccountNumber"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 1,
                "maxLength": 32,
                "pattern": "^[- a-zA-Z0-9.]{1,32}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 1,
                "maxLength": 32,
                "pattern": "^[- a-zA-Z0-9.]{1,32}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A full account number. This is the number that the customer uses to reference the account within the financial institution.",
      "referencedTypes": {},
      "inline": false
    },
    "accountBalance": {
      "name": {
        "typeId": "accountBalance",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "accountBalance",
          "camelCase": {
            "unsafeName": "accountBalance",
            "safeName": "accountBalance"
          },
          "snakeCase": {
            "unsafeName": "account_balance",
            "safeName": "account_balance"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_BALANCE",
            "safeName": "ACCOUNT_BALANCE"
          },
          "pascalCase": {
            "unsafeName": "AccountBalance",
            "safeName": "AccountBalance"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "readOnlyResourceId",
              "inline": false,
              "type": "named"
            },
            "docs": "The account ID.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "updatedAt",
                "camelCase": {
                  "unsafeName": "updatedAt",
                  "safeName": "updatedAt"
                },
                "snakeCase": {
                  "unsafeName": "updated_at",
                  "safeName": "updated_at"
                },
                "screamingSnakeCase": {
                  "unsafeName": "UPDATED_AT",
                  "safeName": "UPDATED_AT"
                },
                "pascalCase": {
                  "unsafeName": "UpdatedAt",
                  "safeName": "UpdatedAt"
                }
              },
              "wireValue": "updatedAt"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "readOnlyTimestamp",
              "inline": false,
              "type": "named"
            },
            "docs": "The time when the balance values were last updated from the banking core.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "incomplete",
                "camelCase": {
                  "unsafeName": "incomplete",
                  "safeName": "incomplete"
                },
                "snakeCase": {
                  "unsafeName": "incomplete",
                  "safeName": "incomplete"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INCOMPLETE",
                  "safeName": "INCOMPLETE"
                },
                "pascalCase": {
                  "unsafeName": "Incomplete",
                  "safeName": "Incomplete"
                }
              },
              "wireValue": "incomplete"
            },
            "valueType": {
              "primitive": {
                "v1": "BOOLEAN",
                "v2": {
                  "type": "boolean"
                }
              },
              "type": "primitive"
            },
            "docs": "If `true`, the response is incomplete and the client may retry the operation after the `Retry-After` time in order to fetch balances for any incomplete accounts in the `items`. The retry operation should only pass in accounts that are `incomplete`."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The current balances of the given account.",
      "referencedTypes": {},
      "inline": false
    },
    "jointOwnerInvitationFields": {
      "name": {
        "typeId": "jointOwnerInvitationFields",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "jointOwnerInvitationFields",
          "camelCase": {
            "unsafeName": "jointOwnerInvitationFields",
            "safeName": "jointOwnerInvitationFields"
          },
          "snakeCase": {
            "unsafeName": "joint_owner_invitation_fields",
            "safeName": "joint_owner_invitation_fields"
          },
          "screamingSnakeCase": {
            "unsafeName": "JOINT_OWNER_INVITATION_FIELDS",
            "safeName": "JOINT_OWNER_INVITATION_FIELDS"
          },
          "pascalCase": {
            "unsafeName": "JointOwnerInvitationFields",
            "safeName": "JointOwnerInvitationFields"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "firstName",
                "camelCase": {
                  "unsafeName": "firstName",
                  "safeName": "firstName"
                },
                "snakeCase": {
                  "unsafeName": "first_name",
                  "safeName": "first_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FIRST_NAME",
                  "safeName": "FIRST_NAME"
                },
                "pascalCase": {
                  "unsafeName": "FirstName",
                  "safeName": "FirstName"
                }
              },
              "wireValue": "firstName"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "minLength": 1,
                    "maxLength": 32
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The invitee's first name."
          },
          {
            "name": {
              "name": {
                "originalName": "lastName",
                "camelCase": {
                  "unsafeName": "lastName",
                  "safeName": "lastName"
                },
                "snakeCase": {
                  "unsafeName": "last_name",
                  "safeName": "last_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LAST_NAME",
                  "safeName": "LAST_NAME"
                },
                "pascalCase": {
                  "unsafeName": "LastName",
                  "safeName": "LastName"
                }
              },
              "wireValue": "lastName"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "minLength": 1,
                    "maxLength": 32
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The invitee's last name name."
          },
          {
            "name": {
              "name": {
                "originalName": "taxId",
                "camelCase": {
                  "unsafeName": "taxId",
                  "safeName": "taxId"
                },
                "snakeCase": {
                  "unsafeName": "tax_id",
                  "safeName": "tax_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TAX_ID",
                  "safeName": "TAX_ID"
                },
                "pascalCase": {
                  "unsafeName": "TaxId",
                  "safeName": "TaxId"
                }
              },
              "wireValue": "taxId"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "minLength": 4,
                        "maxLength": 4,
                        "pattern": "^[0-9]{4}$"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The last 4 digits of the invitee's tax ID number (Social Security Number). This is not sent in the invitation email, but if the invitee enrolls in digital banking, this identification must match the last four digits of the tax ID they use to enroll."
          },
          {
            "name": {
              "name": {
                "originalName": "sharedSecret",
                "camelCase": {
                  "unsafeName": "sharedSecret",
                  "safeName": "sharedSecret"
                },
                "snakeCase": {
                  "unsafeName": "shared_secret",
                  "safeName": "shared_secret"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SHARED_SECRET",
                  "safeName": "SHARED_SECRET"
                },
                "pascalCase": {
                  "unsafeName": "SharedSecret",
                  "safeName": "SharedSecret"
                }
              },
              "wireValue": "sharedSecret"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "minLength": 8,
                    "maxLength": 100
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "A string shared by the inviter with the invitee to verify their identity. This is not sent in the invitation. The inviter should share this string with the invitee though another channel."
          },
          {
            "name": {
              "name": {
                "originalName": "emailAddress",
                "camelCase": {
                  "unsafeName": "emailAddress",
                  "safeName": "emailAddress"
                },
                "snakeCase": {
                  "unsafeName": "email_address",
                  "safeName": "email_address"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EMAIL_ADDRESS",
                  "safeName": "EMAIL_ADDRESS"
                },
                "pascalCase": {
                  "unsafeName": "EmailAddress",
                  "safeName": "EmailAddress"
                }
              },
              "wireValue": "emailAddress"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 80,
                    "format": "email"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The invitee's email address."
          },
          {
            "name": {
              "name": {
                "originalName": "disallowDebitCardAccess",
                "camelCase": {
                  "unsafeName": "disallowDebitCardAccess",
                  "safeName": "disallowDebitCardAccess"
                },
                "snakeCase": {
                  "unsafeName": "disallow_debit_card_access",
                  "safeName": "disallow_debit_card_access"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DISALLOW_DEBIT_CARD_ACCESS",
                  "safeName": "DISALLOW_DEBIT_CARD_ACCESS"
                },
                "pascalCase": {
                  "unsafeName": "DisallowDebitCardAccess",
                  "safeName": "DisallowDebitCardAccess"
                }
              },
              "wireValue": "disallowDebitCardAccess"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "If `true`, the invitee is not allowed to order or manage debit cards for the account."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Fields used to compose other joint owner invitation schemas.",
      "referencedTypes": {},
      "inline": false
    },
    "institutionLocatorType": {
      "name": {
        "typeId": "institutionLocatorType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "institutionLocatorType",
          "camelCase": {
            "unsafeName": "institutionLocatorType",
            "safeName": "institutionLocatorType"
          },
          "snakeCase": {
            "unsafeName": "institution_locator_type",
            "safeName": "institution_locator_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "INSTITUTION_LOCATOR_TYPE",
            "safeName": "INSTITUTION_LOCATOR_TYPE"
          },
          "pascalCase": {
            "unsafeName": "InstitutionLocatorType",
            "safeName": "InstitutionLocatorType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "abaRoutingNumber",
                "camelCase": {
                  "unsafeName": "abaRoutingNumber",
                  "safeName": "abaRoutingNumber"
                },
                "snakeCase": {
                  "unsafeName": "aba_routing_number",
                  "safeName": "aba_routing_number"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ABA_ROUTING_NUMBER",
                  "safeName": "ABA_ROUTING_NUMBER"
                },
                "pascalCase": {
                  "unsafeName": "AbaRoutingNumber",
                  "safeName": "AbaRoutingNumber"
                }
              },
              "wireValue": "abaRoutingNumber"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "swiftBicCode",
                "camelCase": {
                  "unsafeName": "swiftBicCode",
                  "safeName": "swiftBicCode"
                },
                "snakeCase": {
                  "unsafeName": "swift_bic_code",
                  "safeName": "swift_bic_code"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SWIFT_BIC_CODE",
                  "safeName": "SWIFT_BIC_CODE"
                },
                "pascalCase": {
                  "unsafeName": "SwiftBicCode",
                  "safeName": "SwiftBicCode"
                }
              },
              "wireValue": "swiftBicCode"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "ibanAccountNumber",
                "camelCase": {
                  "unsafeName": "ibanAccountNumber",
                  "safeName": "ibanAccountNumber"
                },
                "snakeCase": {
                  "unsafeName": "iban_account_number",
                  "safeName": "iban_account_number"
                },
                "screamingSnakeCase": {
                  "unsafeName": "IBAN_ACCOUNT_NUMBER",
                  "safeName": "IBAN_ACCOUNT_NUMBER"
                },
                "pascalCase": {
                  "unsafeName": "IbanAccountNumber",
                  "safeName": "IbanAccountNumber"
                }
              },
              "wireValue": "ibanAccountNumber"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Indicates the type of the institution `locator`.\n\n<strong><code>institutionLocatorType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>abaRoutingNumber</code></strong></td><td>ABA Routing Number: <p>The <a href=\"https://www.aba.com/about-us/routing-number\">American Bankers Association routing number</a> of a financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>swiftBicCode</code></strong></td><td>swiftBicCode: <p>The <a href=\"https://www.swift.com/standards/data-standards/bic-business-identifier-code\">SWIFT Business Identifier Code (BIC) code</a> of a financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>ibanAccountNumber</code></strong></td><td>IBAN: <p><a href=\"https://www.ecbs.org/iban.htm\">International Bank Account Number (IBAN)</a></p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "simpleInstitution": {
      "name": {
        "typeId": "simpleInstitution",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "simpleInstitution",
          "camelCase": {
            "unsafeName": "simpleInstitution",
            "safeName": "simpleInstitution"
          },
          "snakeCase": {
            "unsafeName": "simple_institution",
            "safeName": "simple_institution"
          },
          "screamingSnakeCase": {
            "unsafeName": "SIMPLE_INSTITUTION",
            "safeName": "SIMPLE_INSTITUTION"
          },
          "pascalCase": {
            "unsafeName": "SimpleInstitution",
            "safeName": "SimpleInstitution"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 35
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The financial institution's name."
          },
          {
            "name": {
              "name": {
                "originalName": "address",
                "camelCase": {
                  "unsafeName": "address",
                  "safeName": "address"
                },
                "snakeCase": {
                  "unsafeName": "address",
                  "safeName": "address"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ADDRESS",
                  "safeName": "ADDRESS"
                },
                "pascalCase": {
                  "unsafeName": "Address",
                  "safeName": "Address"
                }
              },
              "wireValue": "address"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "address",
              "inline": false,
              "type": "named"
            },
            "docs": "The financial institution's postal mailing address."
          },
          {
            "name": {
              "name": {
                "originalName": "locator",
                "camelCase": {
                  "unsafeName": "locator",
                  "safeName": "locator"
                },
                "snakeCase": {
                  "unsafeName": "locator",
                  "safeName": "locator"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LOCATOR",
                  "safeName": "LOCATOR"
                },
                "pascalCase": {
                  "unsafeName": "Locator",
                  "safeName": "Locator"
                }
              },
              "wireValue": "locator"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 36
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The [American Bankers Association routing number](https://www.aba.com/about-us/routingnumber), [SWIFT Business Identifier Code (BIC) code](https://www.swift.com/standards/data-standards/bic-business-identifier-code), or [IBAN account number](https://www.ecbs.org/iban.htm) of the institution. The form of this institution locator string is set with the `locatorType` property."
          },
          {
            "name": {
              "name": {
                "originalName": "locatorType",
                "camelCase": {
                  "unsafeName": "locatorType",
                  "safeName": "locatorType"
                },
                "snakeCase": {
                  "unsafeName": "locator_type",
                  "safeName": "locator_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LOCATOR_TYPE",
                  "safeName": "LOCATOR_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "LocatorType",
                  "safeName": "LocatorType"
                }
              },
              "wireValue": "locatorType"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "institutionLocatorType",
              "inline": false,
              "type": "named"
            },
            "docs": "Indicates the type of this institution's `locator`."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A simple representation of a financial institution.",
      "referencedTypes": {},
      "inline": false
    },
    "timeZoneId": {
      "name": {
        "typeId": "timeZoneId",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timeZoneId",
          "camelCase": {
            "unsafeName": "timeZoneId",
            "safeName": "timeZoneId"
          },
          "snakeCase": {
            "unsafeName": "time_zone_id",
            "safeName": "time_zone_id"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIME_ZONE_ID",
            "safeName": "TIME_ZONE_ID"
          },
          "pascalCase": {
            "unsafeName": "TimeZoneId",
            "safeName": "TimeZoneId"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "maxLength": 36,
                "pattern": "^America\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)*"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "maxLength": 36,
                "pattern": "^America\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)*"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The identifier of a time zone, as described by [RFC 7808](https://datatracker.ietf.org/doc/html/rfc7808.html#section-3.6). This value corresponds with the `tzid` value described in [RFC 5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.2.19) and defined by the [IANA Time Zone Database](https://www.iana.org/time-zones).",
      "referencedTypes": {},
      "inline": false
    },
    "cutoffTime": {
      "name": {
        "typeId": "cutoffTime",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "cutoffTime",
          "camelCase": {
            "unsafeName": "cutoffTime",
            "safeName": "cutoffTime"
          },
          "snakeCase": {
            "unsafeName": "cutoff_time",
            "safeName": "cutoff_time"
          },
          "screamingSnakeCase": {
            "unsafeName": "CUTOFF_TIME",
            "safeName": "CUTOFF_TIME"
          },
          "pascalCase": {
            "unsafeName": "CutoffTime",
            "safeName": "CutoffTime"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "cutoffTimeType",
              "inline": false,
              "type": "named"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "time",
                "camelCase": {
                  "unsafeName": "time",
                  "safeName": "time"
                },
                "snakeCase": {
                  "unsafeName": "time",
                  "safeName": "time"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TIME",
                  "safeName": "TIME"
                },
                "pascalCase": {
                  "unsafeName": "Time",
                  "safeName": "Time"
                }
              },
              "wireValue": "time"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "pattern": "^(?<hour>[0-2][0-9]):(?<minute>[0-5][0-9])$"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The cutoff time for a product formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) `time` format: `hh:mm`. The time is expressed in 24 hour time and is set to the local time zone of the financial institution."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A representation of a cutoff time for a money movement process at a financial institution.",
      "referencedTypes": {},
      "inline": false
    },
    "cutoffTimeType": {
      "name": {
        "typeId": "cutoffTimeType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "cutoffTimeType",
          "camelCase": {
            "unsafeName": "cutoffTimeType",
            "safeName": "cutoffTimeType"
          },
          "snakeCase": {
            "unsafeName": "cutoff_time_type",
            "safeName": "cutoff_time_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "CUTOFF_TIME_TYPE",
            "safeName": "CUTOFF_TIME_TYPE"
          },
          "pascalCase": {
            "unsafeName": "CutoffTimeType",
            "safeName": "CutoffTimeType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "ach",
                "camelCase": {
                  "unsafeName": "ach",
                  "safeName": "ach"
                },
                "snakeCase": {
                  "unsafeName": "ach",
                  "safeName": "ach"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACH",
                  "safeName": "ACH"
                },
                "pascalCase": {
                  "unsafeName": "Ach",
                  "safeName": "Ach"
                }
              },
              "wireValue": "ach"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "sameDayAch",
                "camelCase": {
                  "unsafeName": "sameDayAch",
                  "safeName": "sameDayAch"
                },
                "snakeCase": {
                  "unsafeName": "same_day_ach",
                  "safeName": "same_day_ach"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAME_DAY_ACH",
                  "safeName": "SAME_DAY_ACH"
                },
                "pascalCase": {
                  "unsafeName": "SameDayAch",
                  "safeName": "SameDayAch"
                }
              },
              "wireValue": "sameDayAch"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "domesticWireTransfer",
                "camelCase": {
                  "unsafeName": "domesticWireTransfer",
                  "safeName": "domesticWireTransfer"
                },
                "snakeCase": {
                  "unsafeName": "domestic_wire_transfer",
                  "safeName": "domestic_wire_transfer"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DOMESTIC_WIRE_TRANSFER",
                  "safeName": "DOMESTIC_WIRE_TRANSFER"
                },
                "pascalCase": {
                  "unsafeName": "DomesticWireTransfer",
                  "safeName": "DomesticWireTransfer"
                }
              },
              "wireValue": "domesticWireTransfer"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "internationalWireTransfer",
                "camelCase": {
                  "unsafeName": "internationalWireTransfer",
                  "safeName": "internationalWireTransfer"
                },
                "snakeCase": {
                  "unsafeName": "international_wire_transfer",
                  "safeName": "international_wire_transfer"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INTERNATIONAL_WIRE_TRANSFER",
                  "safeName": "INTERNATIONAL_WIRE_TRANSFER"
                },
                "pascalCase": {
                  "unsafeName": "InternationalWireTransfer",
                  "safeName": "InternationalWireTransfer"
                }
              },
              "wireValue": "internationalWireTransfer"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "internalTransfer",
                "camelCase": {
                  "unsafeName": "internalTransfer",
                  "safeName": "internalTransfer"
                },
                "snakeCase": {
                  "unsafeName": "internal_transfer",
                  "safeName": "internal_transfer"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INTERNAL_TRANSFER",
                  "safeName": "INTERNAL_TRANSFER"
                },
                "pascalCase": {
                  "unsafeName": "InternalTransfer",
                  "safeName": "InternalTransfer"
                }
              },
              "wireValue": "internalTransfer"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "externalTransfer",
                "camelCase": {
                  "unsafeName": "externalTransfer",
                  "safeName": "externalTransfer"
                },
                "snakeCase": {
                  "unsafeName": "external_transfer",
                  "safeName": "external_transfer"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXTERNAL_TRANSFER",
                  "safeName": "EXTERNAL_TRANSFER"
                },
                "pascalCase": {
                  "unsafeName": "ExternalTransfer",
                  "safeName": "ExternalTransfer"
                }
              },
              "wireValue": "externalTransfer"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "billPay",
                "camelCase": {
                  "unsafeName": "billPay",
                  "safeName": "billPay"
                },
                "snakeCase": {
                  "unsafeName": "bill_pay",
                  "safeName": "bill_pay"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BILL_PAY",
                  "safeName": "BILL_PAY"
                },
                "pascalCase": {
                  "unsafeName": "BillPay",
                  "safeName": "BillPay"
                }
              },
              "wireValue": "billPay"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Indicates the type of a cutoff time.\n\n<strong><code>cutoffTimeType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>ach</code></strong></td><td>ACH</td>\n    </tr>\n<tr>\n    <td><strong><code>sameDayAch</code></strong></td><td>Same Day ACH</td>\n    </tr>\n<tr>\n    <td><strong><code>domesticWireTransfer</code></strong></td><td>Domestic Wire Transfer</td>\n    </tr>\n<tr>\n    <td><strong><code>internationalWireTransfer</code></strong></td><td>International Wire Transfer</td>\n    </tr>\n<tr>\n    <td><strong><code>internalTransfer</code></strong></td><td>Internal Account Transfer: <p>A transfer between accounts at the same financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>externalTransfer</code></strong></td><td>External Account Transfer: <p>A transfer to or from an account at an external financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>billPay</code></strong></td><td>Bill Pay</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "transferScheduleDirection": {
      "name": {
        "typeId": "transferScheduleDirection",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferScheduleDirection",
          "camelCase": {
            "unsafeName": "transferScheduleDirection",
            "safeName": "transferScheduleDirection"
          },
          "snakeCase": {
            "unsafeName": "transfer_schedule_direction",
            "safeName": "transfer_schedule_direction"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_SCHEDULE_DIRECTION",
            "safeName": "TRANSFER_SCHEDULE_DIRECTION"
          },
          "pascalCase": {
            "unsafeName": "TransferScheduleDirection",
            "safeName": "TransferScheduleDirection"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "debit",
                "camelCase": {
                  "unsafeName": "debit",
                  "safeName": "debit"
                },
                "snakeCase": {
                  "unsafeName": "debit",
                  "safeName": "debit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEBIT",
                  "safeName": "DEBIT"
                },
                "pascalCase": {
                  "unsafeName": "Debit",
                  "safeName": "Debit"
                }
              },
              "wireValue": "debit"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "credit",
                "camelCase": {
                  "unsafeName": "credit",
                  "safeName": "credit"
                },
                "snakeCase": {
                  "unsafeName": "credit",
                  "safeName": "credit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREDIT",
                  "safeName": "CREDIT"
                },
                "pascalCase": {
                  "unsafeName": "Credit",
                  "safeName": "Credit"
                }
              },
              "wireValue": "credit"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "both",
                "camelCase": {
                  "unsafeName": "both",
                  "safeName": "both"
                },
                "snakeCase": {
                  "unsafeName": "both",
                  "safeName": "both"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BOTH",
                  "safeName": "BOTH"
                },
                "pascalCase": {
                  "unsafeName": "Both",
                  "safeName": "Both"
                }
              },
              "wireValue": "both"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Provides the direction in which a transfer flows.\n\n<strong><code>transferScheduleDirection</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>debit</code></strong></td><td>Debit: <p>Money is transferred from a payer to the financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>credit</code></strong></td><td>Credit: <p>Money is transferred from the financial institution to a payee</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>both</code></strong></td><td>Both: <p>Money is transferred both to and from a payee/payer</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "transferScheduleItem": {
      "name": {
        "typeId": "transferScheduleItem",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferScheduleItem",
          "camelCase": {
            "unsafeName": "transferScheduleItem",
            "safeName": "transferScheduleItem"
          },
          "snakeCase": {
            "unsafeName": "transfer_schedule_item",
            "safeName": "transfer_schedule_item"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_SCHEDULE_ITEM",
            "safeName": "TRANSFER_SCHEDULE_ITEM"
          },
          "pascalCase": {
            "unsafeName": "TransferScheduleItem",
            "safeName": "TransferScheduleItem"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "scheduledOn",
                "camelCase": {
                  "unsafeName": "scheduledOn",
                  "safeName": "scheduledOn"
                },
                "snakeCase": {
                  "unsafeName": "scheduled_on",
                  "safeName": "scheduled_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SCHEDULED_ON",
                  "safeName": "SCHEDULED_ON"
                },
                "pascalCase": {
                  "unsafeName": "ScheduledOn",
                  "safeName": "ScheduledOn"
                }
              },
              "wireValue": "scheduledOn"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "format": "date"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The scheduled date of the calculated calendar recurrence in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format."
          },
          {
            "name": {
              "name": {
                "originalName": "effectiveOn",
                "camelCase": {
                  "unsafeName": "effectiveOn",
                  "safeName": "effectiveOn"
                },
                "snakeCase": {
                  "unsafeName": "effective_on",
                  "safeName": "effective_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EFFECTIVE_ON",
                  "safeName": "EFFECTIVE_ON"
                },
                "pascalCase": {
                  "unsafeName": "EffectiveOn",
                  "safeName": "EffectiveOn"
                }
              },
              "wireValue": "effectiveOn"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "format": "date"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The effective date of the recurrence in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. When the effective date differs from the scheduled date, it is due to a banking holiday, weekend, or other non-business day. The date is adjusted to before the scheduled date when the transfer direction is `credit` and adjusted to after the scheduled date when the transfer direction is `debit`."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Summary representation of a transfer schedule resource in transfer schedule list.",
      "referencedTypes": {},
      "inline": false
    },
    "transferDateRestrictionType": {
      "name": {
        "typeId": "transferDateRestrictionType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferDateRestrictionType",
          "camelCase": {
            "unsafeName": "transferDateRestrictionType",
            "safeName": "transferDateRestrictionType"
          },
          "snakeCase": {
            "unsafeName": "transfer_date_restriction_type",
            "safeName": "transfer_date_restriction_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_DATE_RESTRICTION_TYPE",
            "safeName": "TRANSFER_DATE_RESTRICTION_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TransferDateRestrictionType",
            "safeName": "TransferDateRestrictionType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "pastDate",
                "camelCase": {
                  "unsafeName": "pastDate",
                  "safeName": "pastDate"
                },
                "snakeCase": {
                  "unsafeName": "past_date",
                  "safeName": "past_date"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PAST_DATE",
                  "safeName": "PAST_DATE"
                },
                "pascalCase": {
                  "unsafeName": "PastDate",
                  "safeName": "PastDate"
                }
              },
              "wireValue": "pastDate"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "pastCutoffTime",
                "camelCase": {
                  "unsafeName": "pastCutoffTime",
                  "safeName": "pastCutoffTime"
                },
                "snakeCase": {
                  "unsafeName": "past_cutoff_time",
                  "safeName": "past_cutoff_time"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PAST_CUTOFF_TIME",
                  "safeName": "PAST_CUTOFF_TIME"
                },
                "pascalCase": {
                  "unsafeName": "PastCutoffTime",
                  "safeName": "PastCutoffTime"
                }
              },
              "wireValue": "pastCutoffTime"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "riskRestricted",
                "camelCase": {
                  "unsafeName": "riskRestricted",
                  "safeName": "riskRestricted"
                },
                "snakeCase": {
                  "unsafeName": "risk_restricted",
                  "safeName": "risk_restricted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "RISK_RESTRICTED",
                  "safeName": "RISK_RESTRICTED"
                },
                "pascalCase": {
                  "unsafeName": "RiskRestricted",
                  "safeName": "RiskRestricted"
                }
              },
              "wireValue": "riskRestricted"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "holiday",
                "camelCase": {
                  "unsafeName": "holiday",
                  "safeName": "holiday"
                },
                "snakeCase": {
                  "unsafeName": "holiday",
                  "safeName": "holiday"
                },
                "screamingSnakeCase": {
                  "unsafeName": "HOLIDAY",
                  "safeName": "HOLIDAY"
                },
                "pascalCase": {
                  "unsafeName": "Holiday",
                  "safeName": "Holiday"
                }
              },
              "wireValue": "holiday"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "closure",
                "camelCase": {
                  "unsafeName": "closure",
                  "safeName": "closure"
                },
                "snakeCase": {
                  "unsafeName": "closure",
                  "safeName": "closure"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CLOSURE",
                  "safeName": "CLOSURE"
                },
                "pascalCase": {
                  "unsafeName": "Closure",
                  "safeName": "Closure"
                }
              },
              "wireValue": "closure"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "other",
                "camelCase": {
                  "unsafeName": "other",
                  "safeName": "other"
                },
                "snakeCase": {
                  "unsafeName": "other",
                  "safeName": "other"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OTHER",
                  "safeName": "OTHER"
                },
                "pascalCase": {
                  "unsafeName": "Other",
                  "safeName": "Other"
                }
              },
              "wireValue": "other"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Indicates why a transfer date is restricted.\n\n<strong><code>transferDateRestrictionType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>pastDate</code></strong></td><td>Past Date: <p>The transfer date is in the past</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>pastCutoffTime</code></strong></td><td>Past Cutoff Time: <p>Transfers disallowed because the current time is past the financial institutions&#39; cutoff time</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>riskRestricted</code></strong></td><td>Risk Restricted: <p>The date is restricted because the risk level requires one or more days for a debit to clear</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>holiday</code></strong></td><td>Holiday: <p>A <a href=\"https://www.federalreserve.gov/aboutthefed/k8.htm\">Federal Reserve System observed holiday</a></p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>closure</code></strong></td><td>Closure: <p>Financial institution closure, such as a weekend or other planned closure</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>other</code></strong></td><td>Other: <p>Other</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "transferTypeForDateRestrictions": {
      "name": {
        "typeId": "transferTypeForDateRestrictions",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferTypeForDateRestrictions",
          "camelCase": {
            "unsafeName": "transferTypeForDateRestrictions",
            "safeName": "transferTypeForDateRestrictions"
          },
          "snakeCase": {
            "unsafeName": "transfer_type_for_date_restrictions",
            "safeName": "transfer_type_for_date_restrictions"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_TYPE_FOR_DATE_RESTRICTIONS",
            "safeName": "TRANSFER_TYPE_FOR_DATE_RESTRICTIONS"
          },
          "pascalCase": {
            "unsafeName": "TransferTypeForDateRestrictions",
            "safeName": "TransferTypeForDateRestrictions"
          }
        }
      },
      "shape": {
        "default": {
          "name": {
            "name": {
              "originalName": "internal",
              "camelCase": {
                "unsafeName": "internal",
                "safeName": "internal"
              },
              "snakeCase": {
                "unsafeName": "internal",
                "safeName": "internal"
              },
              "screamingSnakeCase": {
                "unsafeName": "INTERNAL",
                "safeName": "INTERNAL"
              },
              "pascalCase": {
                "unsafeName": "Internal",
                "safeName": "Internal"
              }
            },
            "wireValue": "internal"
          }
        },
        "values": [
          {
            "name": {
              "name": {
                "originalName": "internal",
                "camelCase": {
                  "unsafeName": "internal",
                  "safeName": "internal"
                },
                "snakeCase": {
                  "unsafeName": "internal",
                  "safeName": "internal"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INTERNAL",
                  "safeName": "INTERNAL"
                },
                "pascalCase": {
                  "unsafeName": "Internal",
                  "safeName": "Internal"
                }
              },
              "wireValue": "internal"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "ach",
                "camelCase": {
                  "unsafeName": "ach",
                  "safeName": "ach"
                },
                "snakeCase": {
                  "unsafeName": "ach",
                  "safeName": "ach"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACH",
                  "safeName": "ACH"
                },
                "pascalCase": {
                  "unsafeName": "Ach",
                  "safeName": "Ach"
                }
              },
              "wireValue": "ach"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "achDebit",
                "camelCase": {
                  "unsafeName": "achDebit",
                  "safeName": "achDebit"
                },
                "snakeCase": {
                  "unsafeName": "ach_debit",
                  "safeName": "ach_debit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACH_DEBIT",
                  "safeName": "ACH_DEBIT"
                },
                "pascalCase": {
                  "unsafeName": "AchDebit",
                  "safeName": "AchDebit"
                }
              },
              "wireValue": "achDebit"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "achCredit",
                "camelCase": {
                  "unsafeName": "achCredit",
                  "safeName": "achCredit"
                },
                "snakeCase": {
                  "unsafeName": "ach_credit",
                  "safeName": "ach_credit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACH_CREDIT",
                  "safeName": "ACH_CREDIT"
                },
                "pascalCase": {
                  "unsafeName": "AchCredit",
                  "safeName": "AchCredit"
                }
              },
              "wireValue": "achCredit"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "domesticWireTransfer",
                "camelCase": {
                  "unsafeName": "domesticWireTransfer",
                  "safeName": "domesticWireTransfer"
                },
                "snakeCase": {
                  "unsafeName": "domestic_wire_transfer",
                  "safeName": "domestic_wire_transfer"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DOMESTIC_WIRE_TRANSFER",
                  "safeName": "DOMESTIC_WIRE_TRANSFER"
                },
                "pascalCase": {
                  "unsafeName": "DomesticWireTransfer",
                  "safeName": "DomesticWireTransfer"
                }
              },
              "wireValue": "domesticWireTransfer"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "internationalWireTransfer",
                "camelCase": {
                  "unsafeName": "internationalWireTransfer",
                  "safeName": "internationalWireTransfer"
                },
                "snakeCase": {
                  "unsafeName": "international_wire_transfer",
                  "safeName": "international_wire_transfer"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INTERNATIONAL_WIRE_TRANSFER",
                  "safeName": "INTERNATIONAL_WIRE_TRANSFER"
                },
                "pascalCase": {
                  "unsafeName": "InternationalWireTransfer",
                  "safeName": "InternationalWireTransfer"
                }
              },
              "wireValue": "internationalWireTransfer"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Indicates the type of transfer. This determines what business rules and adjustments to make to the date restrictions.\n\n<strong><code>transferTypeForDateRestrictions</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>internal</code></strong></td><td>Internal: <p>Internal account to internal account transfer</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>ach</code></strong></td><td>ACH: <p>An ACH transfer that includes both debit and credit transfers</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>achCredit</code></strong></td><td>ACH Credit: <p>An ACH transfer debiting an internal account and crediting an external account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>achDebit</code></strong></td><td>ACH Debit: <p>An ACH transfer debiting an external account and crediting an internal account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>domesticWireTransfer</code></strong></td><td>Domestic Wire Transfer</td>\n    </tr>\n<tr>\n    <td><strong><code>internationalWireTransfer</code></strong></td><td>International Wire Transfer</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "transferDateRestriction": {
      "name": {
        "typeId": "transferDateRestriction",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferDateRestriction",
          "camelCase": {
            "unsafeName": "transferDateRestriction",
            "safeName": "transferDateRestriction"
          },
          "snakeCase": {
            "unsafeName": "transfer_date_restriction",
            "safeName": "transfer_date_restriction"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_DATE_RESTRICTION",
            "safeName": "TRANSFER_DATE_RESTRICTION"
          },
          "pascalCase": {
            "unsafeName": "TransferDateRestriction",
            "safeName": "TransferDateRestriction"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "occursOn",
                "camelCase": {
                  "unsafeName": "occursOn",
                  "safeName": "occursOn"
                },
                "snakeCase": {
                  "unsafeName": "occurs_on",
                  "safeName": "occurs_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OCCURS_ON",
                  "safeName": "OCCURS_ON"
                },
                "pascalCase": {
                  "unsafeName": "OccursOn",
                  "safeName": "OccursOn"
                }
              },
              "wireValue": "occursOn"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "format": "date"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The date that a transfers restriction occurs, is in the [ISO 8601 Date](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) format, `yyyy-mm-dd`."
          },
          {
            "name": {
              "name": {
                "originalName": "reason",
                "camelCase": {
                  "unsafeName": "reason",
                  "safeName": "reason"
                },
                "snakeCase": {
                  "unsafeName": "reason",
                  "safeName": "reason"
                },
                "screamingSnakeCase": {
                  "unsafeName": "REASON",
                  "safeName": "REASON"
                },
                "pascalCase": {
                  "unsafeName": "Reason",
                  "safeName": "Reason"
                }
              },
              "wireValue": "reason"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transferDateRestrictionType",
              "inline": false,
              "type": "named"
            },
            "docs": "Indicates why this date is restricted."
          },
          {
            "name": {
              "name": {
                "originalName": "creditOn",
                "camelCase": {
                  "unsafeName": "creditOn",
                  "safeName": "creditOn"
                },
                "snakeCase": {
                  "unsafeName": "credit_on",
                  "safeName": "credit_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREDIT_ON",
                  "safeName": "CREDIT_ON"
                },
                "pascalCase": {
                  "unsafeName": "CreditOn",
                  "safeName": "CreditOn"
                }
              },
              "wireValue": "creditOn"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The date the local financial institution account is credited in [RFC 3339 `YYYY-MM-DD`](https://tools.ietf.org/html/rfc3339) date format. This is derived from the `date` based on the `risk` level. The credit-on date normally falls one business day after the restricted `date`. This property is only returned if the payment `type` is `achDebit` or `ach`."
          },
          {
            "name": {
              "name": {
                "originalName": "debitOn",
                "camelCase": {
                  "unsafeName": "debitOn",
                  "safeName": "debitOn"
                },
                "snakeCase": {
                  "unsafeName": "debit_on",
                  "safeName": "debit_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEBIT_ON",
                  "safeName": "DEBIT_ON"
                },
                "pascalCase": {
                  "unsafeName": "DebitOn",
                  "safeName": "DebitOn"
                }
              },
              "wireValue": "debitOn"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The date the local financial institution account is debited in [RFC 3339 `YYYY-MM-DD`](https://tools.ietf.org/html/rfc3339) date format. This is derived from the `date` based on the `risk` level and the transfer direction (`achDebit` or `achCredit`). The debit-on date normally falls one to three business days before the restricted `date`. This property is only returned if the payment `type` is `achCredit` or `ach`."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": true,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A date where a transfer restriction occurs, and the `reason` it is restricted. If the `reason` is `holiday`, `closure` and the transfer is an ACH transfer, the object also contains either a `debitOn` or `creditOn` date or both.",
      "referencedTypes": {},
      "inline": false
    },
    "transactionFields": {
      "name": {
        "typeId": "transactionFields",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transactionFields",
          "camelCase": {
            "unsafeName": "transactionFields",
            "safeName": "transactionFields"
          },
          "snakeCase": {
            "unsafeName": "transaction_fields",
            "safeName": "transaction_fields"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_FIELDS",
            "safeName": "TRANSACTION_FIELDS"
          },
          "pascalCase": {
            "unsafeName": "TransactionFields",
            "safeName": "TransactionFields"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "minLength": 6,
                    "maxLength": 128,
                    "pattern": "^[-_:,.~$a-zA-Z0-9]{6,128}$"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "This transaction's unique identifier.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transactionType",
              "inline": false,
              "type": "named"
            },
            "docs": "The transaction type. If the `type` is `debit` or `credit`, the `subtype` conveys further transaction type details."
          },
          {
            "name": {
              "name": {
                "originalName": "subtype",
                "camelCase": {
                  "unsafeName": "subtype",
                  "safeName": "subtype"
                },
                "snakeCase": {
                  "unsafeName": "subtype",
                  "safeName": "subtype"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SUBTYPE",
                  "safeName": "SUBTYPE"
                },
                "pascalCase": {
                  "unsafeName": "Subtype",
                  "safeName": "Subtype"
                }
              },
              "wireValue": "subtype"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transactionSubType",
              "inline": false,
              "type": "named"
            },
            "docs": "The transaction's kind of debit or credit."
          },
          {
            "name": {
              "name": {
                "originalName": "occurredOn",
                "camelCase": {
                  "unsafeName": "occurredOn",
                  "safeName": "occurredOn"
                },
                "snakeCase": {
                  "unsafeName": "occurred_on",
                  "safeName": "occurred_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OCCURRED_ON",
                  "safeName": "OCCURRED_ON"
                },
                "pascalCase": {
                  "unsafeName": "OccurredOn",
                  "safeName": "OccurredOn"
                }
              },
              "wireValue": "occurredOn"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "format": "date"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The date of the transaction in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. This is derived and immutable.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "createdOn",
                "camelCase": {
                  "unsafeName": "createdOn",
                  "safeName": "createdOn"
                },
                "snakeCase": {
                  "unsafeName": "created_on",
                  "safeName": "created_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREATED_ON",
                  "safeName": "CREATED_ON"
                },
                "pascalCase": {
                  "unsafeName": "CreatedOn",
                  "safeName": "CreatedOn"
                }
              },
              "wireValue": "createdOn"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The date when the transaction occurred in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. This is derived and immutable.<br>**Warning**: The property `createdOn` was deprecated on version `v2.1.0` of the schema. Use the `occurredOn` property instead. `createdOn` will be removed on version `v3.0.0` of the schema.",
            "availability": {
              "status": "DEPRECATED"
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "postedOn",
                "camelCase": {
                  "unsafeName": "postedOn",
                  "safeName": "postedOn"
                },
                "snakeCase": {
                  "unsafeName": "posted_on",
                  "safeName": "posted_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "POSTED_ON",
                  "safeName": "POSTED_ON"
                },
                "pascalCase": {
                  "unsafeName": "PostedOn",
                  "safeName": "PostedOn"
                }
              },
              "wireValue": "postedOn"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The date when this transaction was posted (cleared and applied to the account balance) in [RFC 3339](https://tools.ietf.org/html/rfc3339) date `YYYY-MM-DD` format, UTC. This is derived and immutable and only present if `posted` is `true`.<br>**Warning**: The property `postedOn` was deprecated on version `v2.1.0` of the schema. Use the `occurredOn` property instead. `postedOn` will be removed on version `v3.0.0` of the schema.",
            "availability": {
              "status": "DEPRECATED"
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "amount",
                "camelCase": {
                  "unsafeName": "amount",
                  "safeName": "amount"
                },
                "snakeCase": {
                  "unsafeName": "amount",
                  "safeName": "amount"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AMOUNT",
                  "safeName": "AMOUNT"
                },
                "pascalCase": {
                  "unsafeName": "Amount",
                  "safeName": "Amount"
                }
              },
              "wireValue": "amount"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "creditOrDebitValue",
              "inline": false,
              "type": "named"
            },
            "docs": "The transaction amount in dollars. This value is negative if the transaction is a debit and positive if it is a credit."
          },
          {
            "name": {
              "name": {
                "originalName": "posted",
                "camelCase": {
                  "unsafeName": "posted",
                  "safeName": "posted"
                },
                "snakeCase": {
                  "unsafeName": "posted",
                  "safeName": "posted"
                },
                "screamingSnakeCase": {
                  "unsafeName": "POSTED",
                  "safeName": "POSTED"
                },
                "pascalCase": {
                  "unsafeName": "Posted",
                  "safeName": "Posted"
                }
              },
              "wireValue": "posted"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "BOOLEAN",
                    "v2": {
                      "type": "boolean"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "If `true`, the transaction has been posted (cleared) and applied to the account. If `false`, the transaction is still pending and might be canceled. `posted` is only valid for credit and debit transactions and omitted for balance transactions."
          },
          {
            "name": {
              "name": {
                "originalName": "balance",
                "camelCase": {
                  "unsafeName": "balance",
                  "safeName": "balance"
                },
                "snakeCase": {
                  "unsafeName": "balance",
                  "safeName": "balance"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BALANCE",
                  "safeName": "BALANCE"
                },
                "pascalCase": {
                  "unsafeName": "Balance",
                  "safeName": "Balance"
                }
              },
              "wireValue": "balance"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "creditOrDebitValue",
              "inline": false,
              "type": "named"
            },
            "docs": "The account's running current balance as of this transaction. The `balance` may be omitted if the request includes filters which preclude the inclusion of a running balance."
          },
          {
            "name": {
              "name": {
                "originalName": "memo",
                "camelCase": {
                  "unsafeName": "memo",
                  "safeName": "memo"
                },
                "snakeCase": {
                  "unsafeName": "memo",
                  "safeName": "memo"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MEMO",
                  "safeName": "MEMO"
                },
                "pascalCase": {
                  "unsafeName": "Memo",
                  "safeName": "Memo"
                }
              },
              "wireValue": "memo"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 128
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The user-settable transaction memo."
          },
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 128
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The transaction description assigned by the transaction cleansing service."
          },
          {
            "name": {
              "name": {
                "originalName": "category",
                "camelCase": {
                  "unsafeName": "category",
                  "safeName": "category"
                },
                "snakeCase": {
                  "unsafeName": "category",
                  "safeName": "category"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CATEGORY",
                  "safeName": "CATEGORY"
                },
                "pascalCase": {
                  "unsafeName": "Category",
                  "safeName": "Category"
                }
              },
              "wireValue": "category"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transactionCategorization",
              "inline": false,
              "type": "named"
            },
            "docs": "The transaction category, if assigned."
          },
          {
            "name": {
              "name": {
                "originalName": "merchant",
                "camelCase": {
                  "unsafeName": "merchant",
                  "safeName": "merchant"
                },
                "snakeCase": {
                  "unsafeName": "merchant",
                  "safeName": "merchant"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MERCHANT",
                  "safeName": "MERCHANT"
                },
                "pascalCase": {
                  "unsafeName": "Merchant",
                  "safeName": "Merchant"
                }
              },
              "wireValue": "merchant"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transactionMerchant",
              "inline": false,
              "type": "named"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "check",
                "camelCase": {
                  "unsafeName": "check",
                  "safeName": "check"
                },
                "snakeCase": {
                  "unsafeName": "check",
                  "safeName": "check"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CHECK",
                  "safeName": "CHECK"
                },
                "pascalCase": {
                  "unsafeName": "Check",
                  "safeName": "Check"
                }
              },
              "wireValue": "check"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transactionCheck",
              "inline": false,
              "type": "named"
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Common fields of the transaction resource used to build other model schemas.",
      "referencedTypes": {},
      "inline": false
    },
    "transactionMerchant": {
      "name": {
        "typeId": "transactionMerchant",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transactionMerchant",
          "camelCase": {
            "unsafeName": "transactionMerchant",
            "safeName": "transactionMerchant"
          },
          "snakeCase": {
            "unsafeName": "transaction_merchant",
            "safeName": "transaction_merchant"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_MERCHANT",
            "safeName": "TRANSACTION_MERCHANT"
          },
          "pascalCase": {
            "unsafeName": "TransactionMerchant",
            "safeName": "TransactionMerchant"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "name",
                "camelCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "snakeCase": {
                  "unsafeName": "name",
                  "safeName": "name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NAME",
                  "safeName": "NAME"
                },
                "pascalCase": {
                  "unsafeName": "Name",
                  "safeName": "Name"
                }
              },
              "wireValue": "name"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 32
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The merchant\\'s name."
          },
          {
            "name": {
              "name": {
                "originalName": "website_url",
                "camelCase": {
                  "unsafeName": "websiteUrl",
                  "safeName": "websiteUrl"
                },
                "snakeCase": {
                  "unsafeName": "website_url",
                  "safeName": "website_url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEBSITE_URL",
                  "safeName": "WEBSITE_URL"
                },
                "pascalCase": {
                  "unsafeName": "WebsiteUrl",
                  "safeName": "WebsiteUrl"
                }
              },
              "wireValue": "website_url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 400,
                        "format": "uri-reference"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The merchant's website URL."
          },
          {
            "name": {
              "name": {
                "originalName": "logo_url",
                "camelCase": {
                  "unsafeName": "logoUrl",
                  "safeName": "logoUrl"
                },
                "snakeCase": {
                  "unsafeName": "logo_url",
                  "safeName": "logo_url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LOGO_URL",
                  "safeName": "LOGO_URL"
                },
                "pascalCase": {
                  "unsafeName": "LogoUrl",
                  "safeName": "LogoUrl"
                }
              },
              "wireValue": "logo_url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 400,
                        "format": "uri-reference"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The optional URL of the merchant's logo. This image must be an image resource (SVG, PNG, GIF, JPEG image) that does not require any authentication. The URL may contain query parameters."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Describes the merchant associated with a transaction.",
      "referencedTypes": {},
      "inline": false
    },
    "transactionCheck": {
      "name": {
        "typeId": "transactionCheck",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transactionCheck",
          "camelCase": {
            "unsafeName": "transactionCheck",
            "safeName": "transactionCheck"
          },
          "snakeCase": {
            "unsafeName": "transaction_check",
            "safeName": "transaction_check"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_CHECK",
            "safeName": "TRANSACTION_CHECK"
          },
          "pascalCase": {
            "unsafeName": "TransactionCheck",
            "safeName": "TransactionCheck"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "number",
                "camelCase": {
                  "unsafeName": "number",
                  "safeName": "number_"
                },
                "snakeCase": {
                  "unsafeName": "number",
                  "safeName": "number_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NUMBER",
                  "safeName": "NUMBER"
                },
                "pascalCase": {
                  "unsafeName": "Number",
                  "safeName": "Number"
                }
              },
              "wireValue": "number"
            },
            "valueType": {
              "primitive": {
                "v1": "DOUBLE",
                "v2": {
                  "validation": {
                    "min": 1
                  },
                  "type": "double"
                }
              },
              "type": "primitive"
            },
            "docs": "The check number."
          },
          {
            "name": {
              "name": {
                "originalName": "imageFront_url",
                "camelCase": {
                  "unsafeName": "imageFrontUrl",
                  "safeName": "imageFrontUrl"
                },
                "snakeCase": {
                  "unsafeName": "image_front_url",
                  "safeName": "image_front_url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "IMAGE_FRONT_URL",
                  "safeName": "IMAGE_FRONT_URL"
                },
                "pascalCase": {
                  "unsafeName": "ImageFrontUrl",
                  "safeName": "ImageFrontUrl"
                }
              },
              "wireValue": "imageFront_url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 400,
                        "format": "uri-reference"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The URL for downloading the image of the front of the check."
          },
          {
            "name": {
              "name": {
                "originalName": "imageBack_url",
                "camelCase": {
                  "unsafeName": "imageBackUrl",
                  "safeName": "imageBackUrl"
                },
                "snakeCase": {
                  "unsafeName": "image_back_url",
                  "safeName": "image_back_url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "IMAGE_BACK_URL",
                  "safeName": "IMAGE_BACK_URL"
                },
                "pascalCase": {
                  "unsafeName": "ImageBackUrl",
                  "safeName": "ImageBackUrl"
                }
              },
              "wireValue": "imageBack_url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 400,
                        "format": "uri-reference"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The URL for downloading the image of the front of the check."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Describes a check associated with a transaction for a checking account. This object is only present if the transaction `type` is `debit` and the `subtype` is `check`.",
      "referencedTypes": {},
      "inline": false
    },
    "transactionCategorization": {
      "name": {
        "typeId": "transactionCategorization",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transactionCategorization",
          "camelCase": {
            "unsafeName": "transactionCategorization",
            "safeName": "transactionCategorization"
          },
          "snakeCase": {
            "unsafeName": "transaction_categorization",
            "safeName": "transaction_categorization"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_CATEGORIZATION",
            "safeName": "TRANSACTION_CATEGORIZATION"
          },
          "pascalCase": {
            "unsafeName": "TransactionCategorization",
            "safeName": "TransactionCategorization"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "label",
                "camelCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "snakeCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LABEL",
                  "safeName": "LABEL"
                },
                "pascalCase": {
                  "unsafeName": "Label",
                  "safeName": "Label"
                }
              },
              "wireValue": "label"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transactionCategoryLabel",
              "inline": false,
              "type": "named"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "minLength": 1,
                    "maxLength": 32,
                    "pattern": "^[-_:.~$a-zA-Z0-9]{1,32}$"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The unique ID of this transaction's category.",
            "propertyAccess": "READ_ONLY"
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The transaction categorization.",
      "referencedTypes": {},
      "inline": false
    },
    "transactionCategoryLabel": {
      "name": {
        "typeId": "transactionCategoryLabel",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transactionCategoryLabel",
          "camelCase": {
            "unsafeName": "transactionCategoryLabel",
            "safeName": "transactionCategoryLabel"
          },
          "snakeCase": {
            "unsafeName": "transaction_category_label",
            "safeName": "transaction_category_label"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_CATEGORY_LABEL",
            "safeName": "TRANSACTION_CATEGORY_LABEL"
          },
          "pascalCase": {
            "unsafeName": "TransactionCategoryLabel",
            "safeName": "TransactionCategoryLabel"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 1,
                "maxLength": 64
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 1,
                "maxLength": 64
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The label of a transaction category, such as `\"Shopping\"`, `\"Deposit\"`, `\"Bill\"`, `\"Transfer\"`, or `\"Other\"`.",
      "referencedTypes": {},
      "inline": false
    },
    "transactionType": {
      "name": {
        "typeId": "transactionType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transactionType",
          "camelCase": {
            "unsafeName": "transactionType",
            "safeName": "transactionType"
          },
          "snakeCase": {
            "unsafeName": "transaction_type",
            "safeName": "transaction_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_TYPE",
            "safeName": "TRANSACTION_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TransactionType",
            "safeName": "TransactionType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "balance",
                "camelCase": {
                  "unsafeName": "balance",
                  "safeName": "balance"
                },
                "snakeCase": {
                  "unsafeName": "balance",
                  "safeName": "balance"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BALANCE",
                  "safeName": "BALANCE"
                },
                "pascalCase": {
                  "unsafeName": "Balance",
                  "safeName": "Balance"
                }
              },
              "wireValue": "balance"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "debit",
                "camelCase": {
                  "unsafeName": "debit",
                  "safeName": "debit"
                },
                "snakeCase": {
                  "unsafeName": "debit",
                  "safeName": "debit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEBIT",
                  "safeName": "DEBIT"
                },
                "pascalCase": {
                  "unsafeName": "Debit",
                  "safeName": "Debit"
                }
              },
              "wireValue": "debit"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "credit",
                "camelCase": {
                  "unsafeName": "credit",
                  "safeName": "credit"
                },
                "snakeCase": {
                  "unsafeName": "credit",
                  "safeName": "credit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREDIT",
                  "safeName": "CREDIT"
                },
                "pascalCase": {
                  "unsafeName": "Credit",
                  "safeName": "Credit"
                }
              },
              "wireValue": "credit"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Distinguishes between balance, debit, or credit transactions.\n\n<strong><code>transactionType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>balance</code></strong></td><td>Balance: <p>A pseudo-transaction that conveys the account balance.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>debit</code></strong></td><td>Debit: <p>A debit against the account.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>credit</code></strong></td><td>Credit: <p>A credit transaction.</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "transactionSubType": {
      "name": {
        "typeId": "transactionSubType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transactionSubType",
          "camelCase": {
            "unsafeName": "transactionSubType",
            "safeName": "transactionSubType"
          },
          "snakeCase": {
            "unsafeName": "transaction_sub_type",
            "safeName": "transaction_sub_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_SUB_TYPE",
            "safeName": "TRANSACTION_SUB_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TransactionSubType",
            "safeName": "TransactionSubType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "check",
                "camelCase": {
                  "unsafeName": "check",
                  "safeName": "check"
                },
                "snakeCase": {
                  "unsafeName": "check",
                  "safeName": "check"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CHECK",
                  "safeName": "CHECK"
                },
                "pascalCase": {
                  "unsafeName": "Check",
                  "safeName": "Check"
                }
              },
              "wireValue": "check"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "other",
                "camelCase": {
                  "unsafeName": "other",
                  "safeName": "other"
                },
                "snakeCase": {
                  "unsafeName": "other",
                  "safeName": "other"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OTHER",
                  "safeName": "OTHER"
                },
                "pascalCase": {
                  "unsafeName": "Other",
                  "safeName": "Other"
                }
              },
              "wireValue": "other"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "If the type is `debit` or `credit`, the subtype conveys further transaction type details.\n\n<strong><code>transactionSubType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>check</code></strong></td><td>Check: <p>A check drawn from a checking account.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>other</code></strong></td><td>Other: <p>Some other transaction type.</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "transactionCategoryType": {
      "name": {
        "typeId": "transactionCategoryType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transactionCategoryType",
          "camelCase": {
            "unsafeName": "transactionCategoryType",
            "safeName": "transactionCategoryType"
          },
          "snakeCase": {
            "unsafeName": "transaction_category_type",
            "safeName": "transaction_category_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_CATEGORY_TYPE",
            "safeName": "TRANSACTION_CATEGORY_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TransactionCategoryType",
            "safeName": "TransactionCategoryType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "credit",
                "camelCase": {
                  "unsafeName": "credit",
                  "safeName": "credit"
                },
                "snakeCase": {
                  "unsafeName": "credit",
                  "safeName": "credit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREDIT",
                  "safeName": "CREDIT"
                },
                "pascalCase": {
                  "unsafeName": "Credit",
                  "safeName": "Credit"
                }
              },
              "wireValue": "credit"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "debit",
                "camelCase": {
                  "unsafeName": "debit",
                  "safeName": "debit"
                },
                "snakeCase": {
                  "unsafeName": "debit",
                  "safeName": "debit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DEBIT",
                  "safeName": "DEBIT"
                },
                "pascalCase": {
                  "unsafeName": "Debit",
                  "safeName": "Debit"
                }
              },
              "wireValue": "debit"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Classifies a transaction category as applying to either debit or credit transactions.\n\n<strong><code>transactionCategoryType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>credit</code></strong></td><td>Credit: <p>This transaction category applies to credit (expense) transactions.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>debit</code></strong></td><td>Debit: <p>This transaction category applies to debit (income) transactions.</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "transferSchedule": {
      "name": {
        "typeId": "transferSchedule",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferSchedule",
          "camelCase": {
            "unsafeName": "transferSchedule",
            "safeName": "transferSchedule"
          },
          "snakeCase": {
            "unsafeName": "transfer_schedule",
            "safeName": "transfer_schedule"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_SCHEDULE",
            "safeName": "TRANSFER_SCHEDULE"
          },
          "pascalCase": {
            "unsafeName": "TransferSchedule",
            "safeName": "TransferSchedule"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "scheduledOn",
                "camelCase": {
                  "unsafeName": "scheduledOn",
                  "safeName": "scheduledOn"
                },
                "snakeCase": {
                  "unsafeName": "scheduled_on",
                  "safeName": "scheduled_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SCHEDULED_ON",
                  "safeName": "SCHEDULED_ON"
                },
                "pascalCase": {
                  "unsafeName": "ScheduledOn",
                  "safeName": "ScheduledOn"
                }
              },
              "wireValue": "scheduledOn"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The date the the customer scheduled the transfer to occur in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format."
          },
          {
            "name": {
              "name": {
                "originalName": "recurrenceType",
                "camelCase": {
                  "unsafeName": "recurrenceType",
                  "safeName": "recurrenceType"
                },
                "snakeCase": {
                  "unsafeName": "recurrence_type",
                  "safeName": "recurrence_type"
                },
                "screamingSnakeCase": {
                  "unsafeName": "RECURRENCE_TYPE",
                  "safeName": "RECURRENCE_TYPE"
                },
                "pascalCase": {
                  "unsafeName": "RecurrenceType",
                  "safeName": "RecurrenceType"
                }
              },
              "wireValue": "recurrenceType"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transferRecurrenceType",
              "inline": false,
              "type": "named"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "frequency",
                "camelCase": {
                  "unsafeName": "frequency",
                  "safeName": "frequency"
                },
                "snakeCase": {
                  "unsafeName": "frequency",
                  "safeName": "frequency"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FREQUENCY",
                  "safeName": "FREQUENCY"
                },
                "pascalCase": {
                  "unsafeName": "Frequency",
                  "safeName": "Frequency"
                }
              },
              "wireValue": "frequency"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transferFrequency",
              "inline": false,
              "type": "named"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "endsOn",
                "camelCase": {
                  "unsafeName": "endsOn",
                  "safeName": "endsOn"
                },
                "snakeCase": {
                  "unsafeName": "ends_on",
                  "safeName": "ends_on"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ENDS_ON",
                  "safeName": "ENDS_ON"
                },
                "pascalCase": {
                  "unsafeName": "EndsOn",
                  "safeName": "EndsOn"
                }
              },
              "wireValue": "endsOn"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The optional date when the recurring transfer schedule ends, in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Subsequent recurring transfers may be scheduled up to and including this date, but not after. This property is ignored if `frequency` is `once`."
          },
          {
            "name": {
              "name": {
                "originalName": "count",
                "camelCase": {
                  "unsafeName": "count",
                  "safeName": "count"
                },
                "snakeCase": {
                  "unsafeName": "count",
                  "safeName": "count"
                },
                "screamingSnakeCase": {
                  "unsafeName": "COUNT",
                  "safeName": "COUNT"
                },
                "pascalCase": {
                  "unsafeName": "Count",
                  "safeName": "Count"
                }
              },
              "wireValue": "count"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "DOUBLE",
                    "v2": {
                      "default": 1,
                      "validation": {
                        "min": 1
                      },
                      "type": "double"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "For recurring schedules (`frequency` is not `once`), this is the total number of transfers to make, including the first transfer. This property is ignored if `frequency` is `once`."
          },
          {
            "name": {
              "name": {
                "originalName": "amountLimit",
                "camelCase": {
                  "unsafeName": "amountLimit",
                  "safeName": "amountLimit"
                },
                "snakeCase": {
                  "unsafeName": "amount_limit",
                  "safeName": "amount_limit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AMOUNT_LIMIT",
                  "safeName": "AMOUNT_LIMIT"
                },
                "pascalCase": {
                  "unsafeName": "AmountLimit",
                  "safeName": "AmountLimit"
                }
              },
              "wireValue": "amountLimit"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "monetaryValue",
              "inline": false,
              "type": "named"
            },
            "docs": "For recurring schedules (`frequency` is not `once`), this is the total dollar amount limit including the first transfer. No transfers are scheduled if they would exceed this amount. This property is ignored if `frequency` is `once`."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The scheduled date when the transfer should be completed, the recurrence, if any, and other derived dates based on the scheduled date.\n\nFor recurring transfer schedules, `endsOn`, `count`, and `amountLimit` are mutually exclusive.",
      "referencedTypes": {},
      "inline": false
    },
    "transferAccountReference": {
      "name": {
        "typeId": "transferAccountReference",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferAccountReference",
          "camelCase": {
            "unsafeName": "transferAccountReference",
            "safeName": "transferAccountReference"
          },
          "snakeCase": {
            "unsafeName": "transfer_account_reference",
            "safeName": "transfer_account_reference"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_ACCOUNT_REFERENCE",
            "safeName": "TRANSFER_ACCOUNT_REFERENCE"
          },
          "pascalCase": {
            "unsafeName": "TransferAccountReference",
            "safeName": "TransferAccountReference"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "resourceId",
              "inline": false,
              "type": "named"
            },
            "docs": "The unique ID of a banking account."
          },
          {
            "name": {
              "name": {
                "originalName": "label",
                "camelCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "snakeCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LABEL",
                  "safeName": "LABEL"
                },
                "pascalCase": {
                  "unsafeName": "Label",
                  "safeName": "Label"
                }
              },
              "wireValue": "label"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 80
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The human-readable label for this account. This is either the `nickname` (if assigned for the current customer), or the `product.label` concatenated with the `maskedNumber`."
          },
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "productType",
              "inline": false,
              "type": "named"
            },
            "docs": "The product type of the account."
          },
          {
            "name": {
              "name": {
                "originalName": "location",
                "camelCase": {
                  "unsafeName": "location",
                  "safeName": "location"
                },
                "snakeCase": {
                  "unsafeName": "location",
                  "safeName": "location"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LOCATION",
                  "safeName": "LOCATION"
                },
                "pascalCase": {
                  "unsafeName": "Location",
                  "safeName": "Location"
                }
              },
              "wireValue": "location"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "accountLocation",
              "inline": false,
              "type": "named"
            },
            "docs": "Indicates where an account is held."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A reference to a banking account used within an account to account transfer. This object may be set from an account's `account.reference` object.",
      "referencedTypes": {},
      "inline": false
    },
    "transferFields": {
      "name": {
        "typeId": "transferFields",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferFields",
          "camelCase": {
            "unsafeName": "transferFields",
            "safeName": "transferFields"
          },
          "snakeCase": {
            "unsafeName": "transfer_fields",
            "safeName": "transfer_fields"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_FIELDS",
            "safeName": "TRANSFER_FIELDS"
          },
          "pascalCase": {
            "unsafeName": "TransferFields",
            "safeName": "TransferFields"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "amount",
                "camelCase": {
                  "unsafeName": "amount",
                  "safeName": "amount"
                },
                "snakeCase": {
                  "unsafeName": "amount",
                  "safeName": "amount"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AMOUNT",
                  "safeName": "AMOUNT"
                },
                "pascalCase": {
                  "unsafeName": "Amount",
                  "safeName": "Amount"
                }
              },
              "wireValue": "amount"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "monetaryValue",
              "inline": false,
              "type": "named"
            },
            "docs": "The amount of money to transfer between accounts."
          },
          {
            "name": {
              "name": {
                "originalName": "sourceAccount",
                "camelCase": {
                  "unsafeName": "sourceAccount",
                  "safeName": "sourceAccount"
                },
                "snakeCase": {
                  "unsafeName": "source_account",
                  "safeName": "source_account"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SOURCE_ACCOUNT",
                  "safeName": "SOURCE_ACCOUNT"
                },
                "pascalCase": {
                  "unsafeName": "SourceAccount",
                  "safeName": "SourceAccount"
                }
              },
              "wireValue": "sourceAccount"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transferAccountReference",
              "inline": false,
              "type": "named"
            },
            "docs": "The source account where the funds are withdrawn."
          },
          {
            "name": {
              "name": {
                "originalName": "targetAccount",
                "camelCase": {
                  "unsafeName": "targetAccount",
                  "safeName": "targetAccount"
                },
                "snakeCase": {
                  "unsafeName": "target_account",
                  "safeName": "target_account"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TARGET_ACCOUNT",
                  "safeName": "TARGET_ACCOUNT"
                },
                "pascalCase": {
                  "unsafeName": "TargetAccount",
                  "safeName": "TargetAccount"
                }
              },
              "wireValue": "targetAccount"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transferAccountReference",
              "inline": false,
              "type": "named"
            },
            "docs": "The target account where the funds are deposited."
          },
          {
            "name": {
              "name": {
                "originalName": "memo",
                "camelCase": {
                  "unsafeName": "memo",
                  "safeName": "memo"
                },
                "snakeCase": {
                  "unsafeName": "memo",
                  "safeName": "memo"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MEMO",
                  "safeName": "MEMO"
                },
                "pascalCase": {
                  "unsafeName": "Memo",
                  "safeName": "Memo"
                }
              },
              "wireValue": "memo"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 128
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A customer-defined memo to describe the transfer."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Common fields of the transfer resource used to build other model schemas.",
      "referencedTypes": {},
      "inline": false
    },
    "transferState": {
      "name": {
        "typeId": "transferState",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferState",
          "camelCase": {
            "unsafeName": "transferState",
            "safeName": "transferState"
          },
          "snakeCase": {
            "unsafeName": "transfer_state",
            "safeName": "transfer_state"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_STATE",
            "safeName": "TRANSFER_STATE"
          },
          "pascalCase": {
            "unsafeName": "TransferState",
            "safeName": "TransferState"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "unscheduled",
                "camelCase": {
                  "unsafeName": "unscheduled",
                  "safeName": "unscheduled"
                },
                "snakeCase": {
                  "unsafeName": "unscheduled",
                  "safeName": "unscheduled"
                },
                "screamingSnakeCase": {
                  "unsafeName": "UNSCHEDULED",
                  "safeName": "UNSCHEDULED"
                },
                "pascalCase": {
                  "unsafeName": "Unscheduled",
                  "safeName": "Unscheduled"
                }
              },
              "wireValue": "unscheduled"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "pendingApproval",
                "camelCase": {
                  "unsafeName": "pendingApproval",
                  "safeName": "pendingApproval"
                },
                "snakeCase": {
                  "unsafeName": "pending_approval",
                  "safeName": "pending_approval"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PENDING_APPROVAL",
                  "safeName": "PENDING_APPROVAL"
                },
                "pascalCase": {
                  "unsafeName": "PendingApproval",
                  "safeName": "PendingApproval"
                }
              },
              "wireValue": "pendingApproval"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "scheduled",
                "camelCase": {
                  "unsafeName": "scheduled",
                  "safeName": "scheduled"
                },
                "snakeCase": {
                  "unsafeName": "scheduled",
                  "safeName": "scheduled"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SCHEDULED",
                  "safeName": "SCHEDULED"
                },
                "pascalCase": {
                  "unsafeName": "Scheduled",
                  "safeName": "Scheduled"
                }
              },
              "wireValue": "scheduled"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "processing",
                "camelCase": {
                  "unsafeName": "processing",
                  "safeName": "processing"
                },
                "snakeCase": {
                  "unsafeName": "processing",
                  "safeName": "processing"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PROCESSING",
                  "safeName": "PROCESSING"
                },
                "pascalCase": {
                  "unsafeName": "Processing",
                  "safeName": "Processing"
                }
              },
              "wireValue": "processing"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "processed",
                "camelCase": {
                  "unsafeName": "processed",
                  "safeName": "processed"
                },
                "snakeCase": {
                  "unsafeName": "processed",
                  "safeName": "processed"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PROCESSED",
                  "safeName": "PROCESSED"
                },
                "pascalCase": {
                  "unsafeName": "Processed",
                  "safeName": "Processed"
                }
              },
              "wireValue": "processed"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "failed",
                "camelCase": {
                  "unsafeName": "failed",
                  "safeName": "failed"
                },
                "snakeCase": {
                  "unsafeName": "failed",
                  "safeName": "failed"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FAILED",
                  "safeName": "FAILED"
                },
                "pascalCase": {
                  "unsafeName": "Failed",
                  "safeName": "Failed"
                }
              },
              "wireValue": "failed"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "other",
                "camelCase": {
                  "unsafeName": "other",
                  "safeName": "other"
                },
                "snakeCase": {
                  "unsafeName": "other",
                  "safeName": "other"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OTHER",
                  "safeName": "OTHER"
                },
                "pascalCase": {
                  "unsafeName": "Other",
                  "safeName": "Other"
                }
              },
              "wireValue": "other"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The state of a transfer resource.\n\n<strong><code>transferState</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>unscheduled</code></strong></td><td>Unscheduled: <p>A transfer which is not ready to be queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>pendingApproval</code></strong></td><td>Pending Approval: <p>A transfer which is awaiting approval before it can be queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>scheduled</code></strong></td><td>Scheduled: <p>A transfer which has been queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>processing</code></strong></td><td>Processing: <p>A transfer which is being processed</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>processed</code></strong></td><td>Processed: <p>A transfer which has completed processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>failed</code></strong></td><td>Failed: <p>A transfer which has cannot be processed or failed while processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>other</code></strong></td><td>Other: <p>A transfer which is in some other state</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "productType": {
      "name": {
        "typeId": "productType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "productType",
          "camelCase": {
            "unsafeName": "productType",
            "safeName": "productType"
          },
          "snakeCase": {
            "unsafeName": "product_type",
            "safeName": "product_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "PRODUCT_TYPE",
            "safeName": "PRODUCT_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ProductType",
            "safeName": "ProductType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "savings",
                "camelCase": {
                  "unsafeName": "savings",
                  "safeName": "savings"
                },
                "snakeCase": {
                  "unsafeName": "savings",
                  "safeName": "savings"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAVINGS",
                  "safeName": "SAVINGS"
                },
                "pascalCase": {
                  "unsafeName": "Savings",
                  "safeName": "Savings"
                }
              },
              "wireValue": "savings"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "checking",
                "camelCase": {
                  "unsafeName": "checking",
                  "safeName": "checking"
                },
                "snakeCase": {
                  "unsafeName": "checking",
                  "safeName": "checking"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CHECKING",
                  "safeName": "CHECKING"
                },
                "pascalCase": {
                  "unsafeName": "Checking",
                  "safeName": "Checking"
                }
              },
              "wireValue": "checking"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "cd",
                "camelCase": {
                  "unsafeName": "cd",
                  "safeName": "cd"
                },
                "snakeCase": {
                  "unsafeName": "cd",
                  "safeName": "cd"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CD",
                  "safeName": "CD"
                },
                "pascalCase": {
                  "unsafeName": "Cd",
                  "safeName": "Cd"
                }
              },
              "wireValue": "cd"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "ira",
                "camelCase": {
                  "unsafeName": "ira",
                  "safeName": "ira"
                },
                "snakeCase": {
                  "unsafeName": "ira",
                  "safeName": "ira"
                },
                "screamingSnakeCase": {
                  "unsafeName": "IRA",
                  "safeName": "IRA"
                },
                "pascalCase": {
                  "unsafeName": "Ira",
                  "safeName": "Ira"
                }
              },
              "wireValue": "ira"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "loan",
                "camelCase": {
                  "unsafeName": "loan",
                  "safeName": "loan"
                },
                "snakeCase": {
                  "unsafeName": "loan",
                  "safeName": "loan"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LOAN",
                  "safeName": "LOAN"
                },
                "pascalCase": {
                  "unsafeName": "Loan",
                  "safeName": "Loan"
                }
              },
              "wireValue": "loan"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "creditCard",
                "camelCase": {
                  "unsafeName": "creditCard",
                  "safeName": "creditCard"
                },
                "snakeCase": {
                  "unsafeName": "credit_card",
                  "safeName": "credit_card"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREDIT_CARD",
                  "safeName": "CREDIT_CARD"
                },
                "pascalCase": {
                  "unsafeName": "CreditCard",
                  "safeName": "CreditCard"
                }
              },
              "wireValue": "creditCard"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The type (or category) of bank account.\n\n<strong><code>productType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>savings</code></strong></td><td>Savings: <p>Savings Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>checking</code></strong></td><td>Checking: <p>Checking Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>cd</code></strong></td><td>CD: <p>Certificate of Deposit Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>ira</code></strong></td><td>IRA: <p>Individual Retirement Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>loan</code></strong></td><td>Loan: <p>Loan Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>creditCard</code></strong></td><td>Credit Card: <p>Credit Card Account</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "transferFrequency": {
      "name": {
        "typeId": "transferFrequency",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferFrequency",
          "camelCase": {
            "unsafeName": "transferFrequency",
            "safeName": "transferFrequency"
          },
          "snakeCase": {
            "unsafeName": "transfer_frequency",
            "safeName": "transfer_frequency"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_FREQUENCY",
            "safeName": "TRANSFER_FREQUENCY"
          },
          "pascalCase": {
            "unsafeName": "TransferFrequency",
            "safeName": "TransferFrequency"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "once",
                "camelCase": {
                  "unsafeName": "once",
                  "safeName": "once"
                },
                "snakeCase": {
                  "unsafeName": "once",
                  "safeName": "once"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ONCE",
                  "safeName": "ONCE"
                },
                "pascalCase": {
                  "unsafeName": "Once",
                  "safeName": "Once"
                }
              },
              "wireValue": "once"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "occasional",
                "camelCase": {
                  "unsafeName": "occasional",
                  "safeName": "occasional"
                },
                "snakeCase": {
                  "unsafeName": "occasional",
                  "safeName": "occasional"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OCCASIONAL",
                  "safeName": "OCCASIONAL"
                },
                "pascalCase": {
                  "unsafeName": "Occasional",
                  "safeName": "Occasional"
                }
              },
              "wireValue": "occasional"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "daily",
                "camelCase": {
                  "unsafeName": "daily",
                  "safeName": "daily"
                },
                "snakeCase": {
                  "unsafeName": "daily",
                  "safeName": "daily"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DAILY",
                  "safeName": "DAILY"
                },
                "pascalCase": {
                  "unsafeName": "Daily",
                  "safeName": "Daily"
                }
              },
              "wireValue": "daily"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "weekly",
                "camelCase": {
                  "unsafeName": "weekly",
                  "safeName": "weekly"
                },
                "snakeCase": {
                  "unsafeName": "weekly",
                  "safeName": "weekly"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEEKLY",
                  "safeName": "WEEKLY"
                },
                "pascalCase": {
                  "unsafeName": "Weekly",
                  "safeName": "Weekly"
                }
              },
              "wireValue": "weekly"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "biweekly",
                "camelCase": {
                  "unsafeName": "biweekly",
                  "safeName": "biweekly"
                },
                "snakeCase": {
                  "unsafeName": "biweekly",
                  "safeName": "biweekly"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BIWEEKLY",
                  "safeName": "BIWEEKLY"
                },
                "pascalCase": {
                  "unsafeName": "Biweekly",
                  "safeName": "Biweekly"
                }
              },
              "wireValue": "biweekly"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "semimonthly",
                "camelCase": {
                  "unsafeName": "semimonthly",
                  "safeName": "semimonthly"
                },
                "snakeCase": {
                  "unsafeName": "semimonthly",
                  "safeName": "semimonthly"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SEMIMONTHLY",
                  "safeName": "SEMIMONTHLY"
                },
                "pascalCase": {
                  "unsafeName": "Semimonthly",
                  "safeName": "Semimonthly"
                }
              },
              "wireValue": "semimonthly"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "monthly",
                "camelCase": {
                  "unsafeName": "monthly",
                  "safeName": "monthly"
                },
                "snakeCase": {
                  "unsafeName": "monthly",
                  "safeName": "monthly"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MONTHLY",
                  "safeName": "MONTHLY"
                },
                "pascalCase": {
                  "unsafeName": "Monthly",
                  "safeName": "Monthly"
                }
              },
              "wireValue": "monthly"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "monthlyFirstDay",
                "camelCase": {
                  "unsafeName": "monthlyFirstDay",
                  "safeName": "monthlyFirstDay"
                },
                "snakeCase": {
                  "unsafeName": "monthly_first_day",
                  "safeName": "monthly_first_day"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MONTHLY_FIRST_DAY",
                  "safeName": "MONTHLY_FIRST_DAY"
                },
                "pascalCase": {
                  "unsafeName": "MonthlyFirstDay",
                  "safeName": "MonthlyFirstDay"
                }
              },
              "wireValue": "monthlyFirstDay"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "monthlyLastDay",
                "camelCase": {
                  "unsafeName": "monthlyLastDay",
                  "safeName": "monthlyLastDay"
                },
                "snakeCase": {
                  "unsafeName": "monthly_last_day",
                  "safeName": "monthly_last_day"
                },
                "screamingSnakeCase": {
                  "unsafeName": "MONTHLY_LAST_DAY",
                  "safeName": "MONTHLY_LAST_DAY"
                },
                "pascalCase": {
                  "unsafeName": "MonthlyLastDay",
                  "safeName": "MonthlyLastDay"
                }
              },
              "wireValue": "monthlyLastDay"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "bimonthly",
                "camelCase": {
                  "unsafeName": "bimonthly",
                  "safeName": "bimonthly"
                },
                "snakeCase": {
                  "unsafeName": "bimonthly",
                  "safeName": "bimonthly"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BIMONTHLY",
                  "safeName": "BIMONTHLY"
                },
                "pascalCase": {
                  "unsafeName": "Bimonthly",
                  "safeName": "Bimonthly"
                }
              },
              "wireValue": "bimonthly"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "quarterly",
                "camelCase": {
                  "unsafeName": "quarterly",
                  "safeName": "quarterly"
                },
                "snakeCase": {
                  "unsafeName": "quarterly",
                  "safeName": "quarterly"
                },
                "screamingSnakeCase": {
                  "unsafeName": "QUARTERLY",
                  "safeName": "QUARTERLY"
                },
                "pascalCase": {
                  "unsafeName": "Quarterly",
                  "safeName": "Quarterly"
                }
              },
              "wireValue": "quarterly"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "semiyearly",
                "camelCase": {
                  "unsafeName": "semiyearly",
                  "safeName": "semiyearly"
                },
                "snakeCase": {
                  "unsafeName": "semiyearly",
                  "safeName": "semiyearly"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SEMIYEARLY",
                  "safeName": "SEMIYEARLY"
                },
                "pascalCase": {
                  "unsafeName": "Semiyearly",
                  "safeName": "Semiyearly"
                }
              },
              "wireValue": "semiyearly"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "yearly",
                "camelCase": {
                  "unsafeName": "yearly",
                  "safeName": "yearly"
                },
                "snakeCase": {
                  "unsafeName": "yearly",
                  "safeName": "yearly"
                },
                "screamingSnakeCase": {
                  "unsafeName": "YEARLY",
                  "safeName": "YEARLY"
                },
                "pascalCase": {
                  "unsafeName": "Yearly",
                  "safeName": "Yearly"
                }
              },
              "wireValue": "yearly"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "For recurring transfers, the interval at which the money movement recurs.\n\n<strong><code>transferFrequency</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>once</code></strong></td><td>Once: <p>Transfer does not repeat</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>occasional</code></strong></td><td>Occasional: <p>Transfer recurs but without a new scheduled date</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>daily</code></strong></td><td>Daily: <p>Repeat daily on business days</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>weekly</code></strong></td><td>Weekly: <p>Repeat weekly</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>biweekly</code></strong></td><td>biweekly: <p>Repeat every two weeks (26 times a year)</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>semimonthly</code></strong></td><td>Semimonthly: <p>Repeat twice a month (24 times a year)</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>monthly</code></strong></td><td>Monthly: <p>Repeat monthly</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>monthlyFirstDay</code></strong></td><td>Monthly First Day: <p>Repeat on the first business day of the month</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>monthlyLastDay</code></strong></td><td>Monthly Last Day: <p>Repeat on the last business day of the month</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>bimonthly</code></strong></td><td>Bimonthly: <p>Repeat every other month</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>quarterly</code></strong></td><td>Quarterly: <p>Repeat quarterly (four times a year)</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>semiyearly</code></strong></td><td>Semiyearly: <p>Repeat every six months (twice a year)</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>yearly</code></strong></td><td>Yearly: <p>Repeat once every year</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "achAccountRisk": {
      "name": {
        "typeId": "achAccountRisk",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "achAccountRisk",
          "camelCase": {
            "unsafeName": "achAccountRisk",
            "safeName": "achAccountRisk"
          },
          "snakeCase": {
            "unsafeName": "ach_account_risk",
            "safeName": "ach_account_risk"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACH_ACCOUNT_RISK",
            "safeName": "ACH_ACCOUNT_RISK"
          },
          "pascalCase": {
            "unsafeName": "AchAccountRisk",
            "safeName": "AchAccountRisk"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "early",
                "camelCase": {
                  "unsafeName": "early",
                  "safeName": "early"
                },
                "snakeCase": {
                  "unsafeName": "early",
                  "safeName": "early"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EARLY",
                  "safeName": "EARLY"
                },
                "pascalCase": {
                  "unsafeName": "Early",
                  "safeName": "Early"
                }
              },
              "wireValue": "early"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "normal",
                "camelCase": {
                  "unsafeName": "normal",
                  "safeName": "normal"
                },
                "snakeCase": {
                  "unsafeName": "normal",
                  "safeName": "normal"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NORMAL",
                  "safeName": "NORMAL"
                },
                "pascalCase": {
                  "unsafeName": "Normal",
                  "safeName": "Normal"
                }
              },
              "wireValue": "normal"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "float",
                "camelCase": {
                  "unsafeName": "float",
                  "safeName": "float"
                },
                "snakeCase": {
                  "unsafeName": "float",
                  "safeName": "float"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FLOAT",
                  "safeName": "FLOAT"
                },
                "pascalCase": {
                  "unsafeName": "Float",
                  "safeName": "Float"
                }
              },
              "wireValue": "float"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "sameDay",
                "camelCase": {
                  "unsafeName": "sameDay",
                  "safeName": "sameDay"
                },
                "snakeCase": {
                  "unsafeName": "same_day",
                  "safeName": "same_day"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SAME_DAY",
                  "safeName": "SAME_DAY"
                },
                "pascalCase": {
                  "unsafeName": "SameDay",
                  "safeName": "SameDay"
                }
              },
              "wireValue": "sameDay"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Describes the risk level of a payment batch's settlement account.\n\n<strong><code>achAccountRisk</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>early</code></strong></td><td>Early: <p>The account is debited three business days before the ACH transfer&#39;s effective date. The account balance is also checked for sufficient funds before the account is debited. A risk limit may apply for commercial accounts with an <code>early</code> risk level.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>normal</code></strong></td><td>Normal: <p>The account is debited two business days before the ACH transfer&#39;s effective date. The account balance is also checked for sufficient funds before the account is debited. A risk limit may apply for commercial accounts with a <code>normal</code> risk level.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>float</code></strong></td><td>Float: <p>The account is debited on the ACH transfer&#39;s effective date. The account balance is not checked for sufficient funds before the account is debited. A risk limit applies for commercial accounts with a <code>float</code> risk level.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>sameDay</code></strong></td><td>Same Day: <p>The account is credited on the ACH transfer&#39;s effective day. The account balance is not checked because <code>sameDay</code> is used for credit. A risk limit and per-transaction limit applies.</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "dateRange": {
      "name": {
        "typeId": "dateRange",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "dateRange",
          "camelCase": {
            "unsafeName": "dateRange",
            "safeName": "dateRange"
          },
          "snakeCase": {
            "unsafeName": "date_range",
            "safeName": "date_range"
          },
          "screamingSnakeCase": {
            "unsafeName": "DATE_RANGE",
            "safeName": "DATE_RANGE"
          },
          "pascalCase": {
            "unsafeName": "DateRange",
            "safeName": "DateRange"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^\\d{4}-\\d{2}-\\d{2}|([[(](\\d{4}-\\d{2}-\\d{2},(\\d{4}-\\d{2}-\\d{2})?|,\\d{4}-\\d{2}-\\d{2})[)\\]])$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^\\d{4}-\\d{2}-\\d{2}|([[(](\\d{4}-\\d{2}-\\d{2},(\\d{4}-\\d{2}-\\d{2})?|,\\d{4}-\\d{2}-\\d{2})[)\\]])$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A date range, supporting inclusive or exclusive endpoints. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. The value may have the following forms: <ul> <li>`YYYY-MM-DD` match the date exactly; equivalent to matching dates in the range `[YYYY-MM-DD,YYYY-MM-DD]`</li> <li>`[YYYY-MM-DD,YYYY-MM-DD]` between two dates, inclusive of the endpoints</li> <li>`(YYYY-MM-DD,YYYY-MM-DD)` between two dates, exclusive of the endpoints</li> <li>`[YYYY-MM-DD,]` on or after the date</li> <li>`(YYYY-MM-DD,)` after the date</li> <li>`[,YYYY-MM-DD]` before or on the date</li> <li>`(,YYYY-MM-DD)` before the date</li> </ul>",
      "referencedTypes": {},
      "inline": false
    },
    "amountRange": {
      "name": {
        "typeId": "amountRange",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "amountRange",
          "camelCase": {
            "unsafeName": "amountRange",
            "safeName": "amountRange"
          },
          "snakeCase": {
            "unsafeName": "amount_range",
            "safeName": "amount_range"
          },
          "screamingSnakeCase": {
            "unsafeName": "AMOUNT_RANGE",
            "safeName": "AMOUNT_RANGE"
          },
          "pascalCase": {
            "unsafeName": "AmountRange",
            "safeName": "AmountRange"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^((\\d+(\\.\\d{0,2})?)|([\\[\\(](((\\d+(\\.\\d{0,2})?),((\\d+(\\.\\d{0,2})?))?)|(,(\\d+(\\.\\d{0,2})?)))[\\]\\)]))$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^((\\d+(\\.\\d{0,2})?)|([\\[\\(](((\\d+(\\.\\d{0,2})?),((\\d+(\\.\\d{0,2})?))?)|(,(\\d+(\\.\\d{0,2})?)))[\\]\\)]))$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A monetary amount range, supporting inclusive or exclusive endpoints. The value may have the following forms: <ul> <li>`1200.50` match the dollar amount 1,200.50 exactly</li> <li>`[1000.00,1200.00)` matches items where `1000.00 <= amount < 1200.00`</li> <li>`[1000.00,1199.99]` matches items where `1000.00 <= amount <= 1199.99`</li> <li>`[999.99,1200.00]` matches items where `999.99 < amount < 1200.00`</li> <li>`[1200.50,]` matches items where `amount >= 1200.50`</li> <li>`(1200.50,)` matches items where `amount >= 1200.50`</li> <li>`[,1200.50]` matches items where `amount <= 1200.50`</li> <li>`(,1200.50)` matches items where `amount < 1200.50`</li> </ul>",
      "referencedTypes": {},
      "inline": false
    },
    "resourceId": {
      "name": {
        "typeId": "resourceId",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "resourceId",
          "camelCase": {
            "unsafeName": "resourceId",
            "safeName": "resourceId"
          },
          "snakeCase": {
            "unsafeName": "resource_id",
            "safeName": "resource_id"
          },
          "screamingSnakeCase": {
            "unsafeName": "RESOURCE_ID",
            "safeName": "RESOURCE_ID"
          },
          "pascalCase": {
            "unsafeName": "ResourceId",
            "safeName": "ResourceId"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 6,
                "maxLength": 48,
                "pattern": "^[-_:.~$a-zA-Z0-9]+$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 6,
                "maxLength": 48,
                "pattern": "^[-_:.~$a-zA-Z0-9]+$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The unique, opaque system identifier for a resource. This case-sensitive ID is also used as path parameters in URLs or in other properties or parameters that reference a resource by ID rather than URL.",
      "referencedTypes": {},
      "inline": false
    },
    "productReference": {
      "name": {
        "typeId": "productReference",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "productReference",
          "camelCase": {
            "unsafeName": "productReference",
            "safeName": "productReference"
          },
          "snakeCase": {
            "unsafeName": "product_reference",
            "safeName": "product_reference"
          },
          "screamingSnakeCase": {
            "unsafeName": "PRODUCT_REFERENCE",
            "safeName": "PRODUCT_REFERENCE"
          },
          "pascalCase": {
            "unsafeName": "ProductReference",
            "safeName": "ProductReference"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "productType",
              "inline": false,
              "type": "named"
            },
            "docs": "The type of account."
          },
          {
            "name": {
              "name": {
                "originalName": "code",
                "camelCase": {
                  "unsafeName": "code",
                  "safeName": "code"
                },
                "snakeCase": {
                  "unsafeName": "code",
                  "safeName": "code"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CODE",
                  "safeName": "CODE"
                },
                "pascalCase": {
                  "unsafeName": "Code",
                  "safeName": "Code"
                }
              },
              "wireValue": "code"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 16
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The product's product code. Codes are unique to the financial institution."
          },
          {
            "name": {
              "name": {
                "originalName": "label",
                "camelCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "snakeCase": {
                  "unsafeName": "label",
                  "safeName": "label"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LABEL",
                  "safeName": "LABEL"
                },
                "pascalCase": {
                  "unsafeName": "Label",
                  "safeName": "Label"
                }
              },
              "wireValue": "label"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 48
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "A human-readable label for this banking product."
          },
          {
            "name": {
              "name": {
                "originalName": "description",
                "camelCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "snakeCase": {
                  "unsafeName": "description",
                  "safeName": "description"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DESCRIPTION",
                  "safeName": "DESCRIPTION"
                },
                "pascalCase": {
                  "unsafeName": "Description",
                  "safeName": "Description"
                }
              },
              "wireValue": "description"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 400,
                    "format": "markdown"
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "A human-readable description of this banking product."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A reference to a banking product.",
      "referencedTypes": {},
      "inline": false
    },
    "creditOrDebitValue": {
      "name": {
        "typeId": "creditOrDebitValue",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "creditOrDebitValue",
          "camelCase": {
            "unsafeName": "creditOrDebitValue",
            "safeName": "creditOrDebitValue"
          },
          "snakeCase": {
            "unsafeName": "credit_or_debit_value",
            "safeName": "credit_or_debit_value"
          },
          "screamingSnakeCase": {
            "unsafeName": "CREDIT_OR_DEBIT_VALUE",
            "safeName": "CREDIT_OR_DEBIT_VALUE"
          },
          "pascalCase": {
            "unsafeName": "CreditOrDebitValue",
            "safeName": "CreditOrDebitValue"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^(-|\\+)?(0|[1-9][0-9]*)\\.[0-9][0-9]$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^(-|\\+)?(0|[1-9][0-9]*)\\.[0-9][0-9]$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The monetary value representing a credit (positive amounts with no prefix or a `+` prefix) or debit (negative amounts with a `-` prefix). The numeric value is  represented as a string so that it can be exact with no loss of precision.<br>The schema `creditOrDebitValue` was added on version `0.4.0` of the API.",
      "referencedTypes": {},
      "inline": false
    },
    "readOnlyTimestamp": {
      "name": {
        "typeId": "readOnlyTimestamp",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "readOnlyTimestamp",
          "camelCase": {
            "unsafeName": "readOnlyTimestamp",
            "safeName": "readOnlyTimestamp"
          },
          "snakeCase": {
            "unsafeName": "read_only_timestamp",
            "safeName": "read_only_timestamp"
          },
          "screamingSnakeCase": {
            "unsafeName": "READ_ONLY_TIMESTAMP",
            "safeName": "READ_ONLY_TIMESTAMP"
          },
          "pascalCase": {
            "unsafeName": "ReadOnlyTimestamp",
            "safeName": "ReadOnlyTimestamp"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 20,
                "maxLength": 30,
                "format": "date-time"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 20,
                "maxLength": 30,
                "format": "date-time"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A readonly or derived timestamp (an instant in time) formatted in [RFC 3339](https://tools.ietf.org/html/rfc3339) `date-time` UTC format: `YYYY-MM-DDThh:mm:ss.sssZ`.<br>The schema `readOnlyTimestamp` was added on version `0.4.0` of the API.",
      "referencedTypes": {},
      "inline": false
    },
    "positiveIntegerRange": {
      "name": {
        "typeId": "positiveIntegerRange",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "positiveIntegerRange",
          "camelCase": {
            "unsafeName": "positiveIntegerRange",
            "safeName": "positiveIntegerRange"
          },
          "snakeCase": {
            "unsafeName": "positive_integer_range",
            "safeName": "positive_integer_range"
          },
          "screamingSnakeCase": {
            "unsafeName": "POSITIVE_INTEGER_RANGE",
            "safeName": "POSITIVE_INTEGER_RANGE"
          },
          "pascalCase": {
            "unsafeName": "PositiveIntegerRange",
            "safeName": "PositiveIntegerRange"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^\\d+|([[(](\\d+,(\\d+)?|,\\d+)[)\\]])$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^\\d+|([[(](\\d+,(\\d+)?|,\\d+)[)\\]])$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A positive integer range, supporting inclusive or exclusive endpoints. The value may have the following forms: <ul> <li>`1200` match the integer 1,200 exactly</li> <li>`[1000,1200)` matches items where `1000 <= number < 1200`</li> <li>`[1000,1199]` matches items where`1000 <= number <= 1199`</li> <li>`[999,1200]` matches items where `999 < number < 1200`</li> <li>`[1200,]`  `number >= 1200`</li> <li>`(1200,)` greater than the value: `number >= 1200`</li> <li>`[,1200]` less than or equal to the value: `number <= 1200`</li> <li>`(,1200)` less than the value: `number < 1200`</li> </ul>",
      "referencedTypes": {},
      "inline": false
    },
    "transferRecurrenceType": {
      "name": {
        "typeId": "transferRecurrenceType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "transferRecurrenceType",
          "camelCase": {
            "unsafeName": "transferRecurrenceType",
            "safeName": "transferRecurrenceType"
          },
          "snakeCase": {
            "unsafeName": "transfer_recurrence_type",
            "safeName": "transfer_recurrence_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFER_RECURRENCE_TYPE",
            "safeName": "TRANSFER_RECURRENCE_TYPE"
          },
          "pascalCase": {
            "unsafeName": "TransferRecurrenceType",
            "safeName": "TransferRecurrenceType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "fixed",
                "camelCase": {
                  "unsafeName": "fixed",
                  "safeName": "fixed"
                },
                "snakeCase": {
                  "unsafeName": "fixed",
                  "safeName": "fixed"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FIXED",
                  "safeName": "FIXED"
                },
                "pascalCase": {
                  "unsafeName": "Fixed",
                  "safeName": "Fixed"
                }
              },
              "wireValue": "fixed"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "variable",
                "camelCase": {
                  "unsafeName": "variable",
                  "safeName": "variable"
                },
                "snakeCase": {
                  "unsafeName": "variable",
                  "safeName": "variable"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VARIABLE",
                  "safeName": "VARIABLE"
                },
                "pascalCase": {
                  "unsafeName": "Variable",
                  "safeName": "Variable"
                }
              },
              "wireValue": "variable"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Describes whether the transfer amount in the transfer varies or is fixed when the transfer recurs. This is ignored if the transfer frequency is `once`.\n\n<strong><code>transferRecurrenceType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>fixed</code></strong></td><td>Fixed: <p>The transfer amounts are the same each time a transfer recurs</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>variable</code></strong></td><td>Variable: <p>The transfer amounts vary and must be entered/verified each time a transfer recurs</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "monetaryValue": {
      "name": {
        "typeId": "monetaryValue",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "monetaryValue",
          "camelCase": {
            "unsafeName": "monetaryValue",
            "safeName": "monetaryValue"
          },
          "snakeCase": {
            "unsafeName": "monetary_value",
            "safeName": "monetary_value"
          },
          "screamingSnakeCase": {
            "unsafeName": "MONETARY_VALUE",
            "safeName": "MONETARY_VALUE"
          },
          "pascalCase": {
            "unsafeName": "MonetaryValue",
            "safeName": "MonetaryValue"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^(0|[1-9][0-9]*)\\.[0-9][0-9]$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "pattern": "^(0|[1-9][0-9]*)\\.[0-9][0-9]$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The monetary value, supporting only positive amounts. The numeric value is  represented as a string so that it can be exact with no loss of precision.<br>The schema `monetaryValue` was added on version `0.4.0` of the API.",
      "referencedTypes": {},
      "inline": false
    },
    "timestampFields": {
      "name": {
        "typeId": "timestampFields",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "timestampFields",
          "camelCase": {
            "unsafeName": "timestampFields",
            "safeName": "timestampFields"
          },
          "snakeCase": {
            "unsafeName": "timestamp_fields",
            "safeName": "timestamp_fields"
          },
          "screamingSnakeCase": {
            "unsafeName": "TIMESTAMP_FIELDS",
            "safeName": "TIMESTAMP_FIELDS"
          },
          "pascalCase": {
            "unsafeName": "TimestampFields",
            "safeName": "TimestampFields"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "createdAt",
                "camelCase": {
                  "unsafeName": "createdAt",
                  "safeName": "createdAt"
                },
                "snakeCase": {
                  "unsafeName": "created_at",
                  "safeName": "created_at"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CREATED_AT",
                  "safeName": "CREATED_AT"
                },
                "pascalCase": {
                  "unsafeName": "CreatedAt",
                  "safeName": "CreatedAt"
                }
              },
              "wireValue": "createdAt"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The date-time when this resource was created, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC. This is derived and immutable.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "updatedAt",
                "camelCase": {
                  "unsafeName": "updatedAt",
                  "safeName": "updatedAt"
                },
                "snakeCase": {
                  "unsafeName": "updated_at",
                  "safeName": "updated_at"
                },
                "screamingSnakeCase": {
                  "unsafeName": "UPDATED_AT",
                  "safeName": "UPDATED_AT"
                },
                "pascalCase": {
                  "unsafeName": "UpdatedAt",
                  "safeName": "UpdatedAt"
                }
              },
              "wireValue": "updatedAt"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "date-time"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The date-time when the resource was last updated, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC. This is derived and immutable.",
            "propertyAccess": "READ_ONLY"
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Timestamps which describe when a resource was created or last updated.",
      "referencedTypes": {},
      "inline": false
    },
    "ApiProblemAttributes": {
      "name": {
        "typeId": "ApiProblemAttributes",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "ApiProblemAttributes",
          "camelCase": {
            "unsafeName": "apiProblemAttributes",
            "safeName": "apiProblemAttributes"
          },
          "snakeCase": {
            "unsafeName": "api_problem_attributes",
            "safeName": "api_problem_attributes"
          },
          "screamingSnakeCase": {
            "unsafeName": "API_PROBLEM_ATTRIBUTES",
            "safeName": "API_PROBLEM_ATTRIBUTES"
          },
          "pascalCase": {
            "unsafeName": "ApiProblemAttributes",
            "safeName": "ApiProblemAttributes"
          }
        }
      },
      "shape": {
        "properties": [],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": true,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Additional optional attributes related to the problem. This data conforms to the schema associated with the error type.",
      "referencedTypes": {},
      "inline": false
    },
    "apiProblem": {
      "name": {
        "typeId": "apiProblem",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "apiProblem",
          "camelCase": {
            "unsafeName": "apiProblem",
            "safeName": "apiProblem"
          },
          "snakeCase": {
            "unsafeName": "api_problem",
            "safeName": "api_problem"
          },
          "screamingSnakeCase": {
            "unsafeName": "API_PROBLEM",
            "safeName": "API_PROBLEM"
          },
          "pascalCase": {
            "unsafeName": "ApiProblem",
            "safeName": "ApiProblem"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "uri-reference"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A [URI reference (RFC3986)](https://tools.ietf.org/html/rfc3986) that identifies the problem type. If present, this is the URL of human-readable HTML documentation for the problem type. When this member is not present, its value is assumed to be `\"about:blank\"`.\n"
          },
          {
            "name": {
              "name": {
                "originalName": "title",
                "camelCase": {
                  "unsafeName": "title",
                  "safeName": "title"
                },
                "snakeCase": {
                  "unsafeName": "title",
                  "safeName": "title"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TITLE",
                  "safeName": "TITLE"
                },
                "pascalCase": {
                  "unsafeName": "Title",
                  "safeName": "Title"
                }
              },
              "wireValue": "title"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A short, human-readable summary of the problem type. The title is usually the same for all problem with the same `type`.\n"
          },
          {
            "name": {
              "name": {
                "originalName": "status",
                "camelCase": {
                  "unsafeName": "status",
                  "safeName": "status"
                },
                "snakeCase": {
                  "unsafeName": "status",
                  "safeName": "status"
                },
                "screamingSnakeCase": {
                  "unsafeName": "STATUS",
                  "safeName": "STATUS"
                },
                "pascalCase": {
                  "unsafeName": "Status",
                  "safeName": "Status"
                }
              },
              "wireValue": "status"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "INTEGER",
                    "v2": {
                      "validation": {
                        "max": 599,
                        "min": 100
                      },
                      "type": "integer"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The [HTTP status code](https://datatracker.ietf.org/doc/html/rfc7231#section-6) for this occurrence of the problem.\n"
          },
          {
            "name": {
              "name": {
                "originalName": "detail",
                "camelCase": {
                  "unsafeName": "detail",
                  "safeName": "detail"
                },
                "snakeCase": {
                  "unsafeName": "detail",
                  "safeName": "detail"
                },
                "screamingSnakeCase": {
                  "unsafeName": "DETAIL",
                  "safeName": "DETAIL"
                },
                "pascalCase": {
                  "unsafeName": "Detail",
                  "safeName": "Detail"
                }
              },
              "wireValue": "detail"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {},
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A human-readable explanation specific to this occurrence of the problem.\n"
          },
          {
            "name": {
              "name": {
                "originalName": "instance",
                "camelCase": {
                  "unsafeName": "instance",
                  "safeName": "instance"
                },
                "snakeCase": {
                  "unsafeName": "instance",
                  "safeName": "instance"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INSTANCE",
                  "safeName": "INSTANCE"
                },
                "pascalCase": {
                  "unsafeName": "Instance",
                  "safeName": "Instance"
                }
              },
              "wireValue": "instance"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "format": "uri-reference"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A URI reference that identifies the specific occurrence of the problem. This is the URI of an API resource that the problem is related to, with a unique error correlation ID URI fragment\n"
          },
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "readOnlyResourceId",
              "inline": false,
              "type": "named"
            },
            "docs": "The unique identifier for this problem. This is an immutable opaque string.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "occurredAt",
                "camelCase": {
                  "unsafeName": "occurredAt",
                  "safeName": "occurredAt"
                },
                "snakeCase": {
                  "unsafeName": "occurred_at",
                  "safeName": "occurred_at"
                },
                "screamingSnakeCase": {
                  "unsafeName": "OCCURRED_AT",
                  "safeName": "OCCURRED_AT"
                },
                "pascalCase": {
                  "unsafeName": "OccurredAt",
                  "safeName": "OccurredAt"
                }
              },
              "wireValue": "occurredAt"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "readOnlyTimestamp",
              "inline": false,
              "type": "named"
            },
            "docs": "The timestamp when the problem occurred, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "problems",
                "camelCase": {
                  "unsafeName": "problems",
                  "safeName": "problems"
                },
                "snakeCase": {
                  "unsafeName": "problems",
                  "safeName": "problems"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PROBLEMS",
                  "safeName": "PROBLEMS"
                },
                "pascalCase": {
                  "unsafeName": "Problems",
                  "safeName": "Problems"
                }
              },
              "wireValue": "problems"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "fernFilepath": {
                        "allParts": [],
                        "packagePath": []
                      },
                      "name": {
                        "originalName": "",
                        "camelCase": {
                          "unsafeName": "",
                          "safeName": ""
                        },
                        "snakeCase": {
                          "unsafeName": "",
                          "safeName": ""
                        },
                        "screamingSnakeCase": {
                          "unsafeName": "",
                          "safeName": ""
                        },
                        "pascalCase": {
                          "unsafeName": "",
                          "safeName": ""
                        }
                      },
                      "typeId": "apiProblem",
                      "inline": false,
                      "type": "named"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Optional root-causes if there are multiple problems in the request or API call processing."
          },
          {
            "name": {
              "name": {
                "originalName": "attributes",
                "camelCase": {
                  "unsafeName": "attributes",
                  "safeName": "attributes"
                },
                "snakeCase": {
                  "unsafeName": "attributes",
                  "safeName": "attributes"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ATTRIBUTES",
                  "safeName": "ATTRIBUTES"
                },
                "pascalCase": {
                  "unsafeName": "Attributes",
                  "safeName": "Attributes"
                }
              },
              "wireValue": "attributes"
            },
            "valueType": {
              "container": {
                "optional": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "ApiProblemAttributes",
                    "camelCase": {
                      "unsafeName": "apiProblemAttributes",
                      "safeName": "apiProblemAttributes"
                    },
                    "snakeCase": {
                      "unsafeName": "api_problem_attributes",
                      "safeName": "api_problem_attributes"
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "API_PROBLEM_ATTRIBUTES",
                      "safeName": "API_PROBLEM_ATTRIBUTES"
                    },
                    "pascalCase": {
                      "unsafeName": "ApiProblemAttributes",
                      "safeName": "ApiProblemAttributes"
                    }
                  },
                  "typeId": "ApiProblemAttributes",
                  "inline": false,
                  "type": "named"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "Additional optional attributes related to the problem. This data conforms to the schema associated with the error type."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "API problem or error, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).",
      "referencedTypes": {},
      "inline": false
    },
    "achSecCode": {
      "name": {
        "typeId": "achSecCode",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "achSecCode",
          "camelCase": {
            "unsafeName": "achSecCode",
            "safeName": "achSecCode"
          },
          "snakeCase": {
            "unsafeName": "ach_sec_code",
            "safeName": "ach_sec_code"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACH_SEC_CODE",
            "safeName": "ACH_SEC_CODE"
          },
          "pascalCase": {
            "unsafeName": "AchSecCode",
            "safeName": "AchSecCode"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "arc",
                "camelCase": {
                  "unsafeName": "arc",
                  "safeName": "arc"
                },
                "snakeCase": {
                  "unsafeName": "arc",
                  "safeName": "arc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ARC",
                  "safeName": "ARC"
                },
                "pascalCase": {
                  "unsafeName": "Arc",
                  "safeName": "Arc"
                }
              },
              "wireValue": "arc"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "boc",
                "camelCase": {
                  "unsafeName": "boc",
                  "safeName": "boc"
                },
                "snakeCase": {
                  "unsafeName": "boc",
                  "safeName": "boc"
                },
                "screamingSnakeCase": {
                  "unsafeName": "BOC",
                  "safeName": "BOC"
                },
                "pascalCase": {
                  "unsafeName": "Boc",
                  "safeName": "Boc"
                }
              },
              "wireValue": "boc"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "ccd",
                "camelCase": {
                  "unsafeName": "ccd",
                  "safeName": "ccd"
                },
                "snakeCase": {
                  "unsafeName": "ccd",
                  "safeName": "ccd"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CCD",
                  "safeName": "CCD"
                },
                "pascalCase": {
                  "unsafeName": "Ccd",
                  "safeName": "Ccd"
                }
              },
              "wireValue": "ccd"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "cie",
                "camelCase": {
                  "unsafeName": "cie",
                  "safeName": "cie"
                },
                "snakeCase": {
                  "unsafeName": "cie",
                  "safeName": "cie"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CIE",
                  "safeName": "CIE"
                },
                "pascalCase": {
                  "unsafeName": "Cie",
                  "safeName": "Cie"
                }
              },
              "wireValue": "cie"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "ctx",
                "camelCase": {
                  "unsafeName": "ctx",
                  "safeName": "ctx"
                },
                "snakeCase": {
                  "unsafeName": "ctx",
                  "safeName": "ctx"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CTX",
                  "safeName": "CTX"
                },
                "pascalCase": {
                  "unsafeName": "Ctx",
                  "safeName": "Ctx"
                }
              },
              "wireValue": "ctx"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "pop",
                "camelCase": {
                  "unsafeName": "pop",
                  "safeName": "pop"
                },
                "snakeCase": {
                  "unsafeName": "pop",
                  "safeName": "pop"
                },
                "screamingSnakeCase": {
                  "unsafeName": "POP",
                  "safeName": "POP"
                },
                "pascalCase": {
                  "unsafeName": "Pop",
                  "safeName": "Pop"
                }
              },
              "wireValue": "pop"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "ppd",
                "camelCase": {
                  "unsafeName": "ppd",
                  "safeName": "ppd"
                },
                "snakeCase": {
                  "unsafeName": "ppd",
                  "safeName": "ppd"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PPD",
                  "safeName": "PPD"
                },
                "pascalCase": {
                  "unsafeName": "Ppd",
                  "safeName": "Ppd"
                }
              },
              "wireValue": "ppd"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "rck",
                "camelCase": {
                  "unsafeName": "rck",
                  "safeName": "rck"
                },
                "snakeCase": {
                  "unsafeName": "rck",
                  "safeName": "rck"
                },
                "screamingSnakeCase": {
                  "unsafeName": "RCK",
                  "safeName": "RCK"
                },
                "pascalCase": {
                  "unsafeName": "Rck",
                  "safeName": "Rck"
                }
              },
              "wireValue": "rck"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "tel",
                "camelCase": {
                  "unsafeName": "tel",
                  "safeName": "tel"
                },
                "snakeCase": {
                  "unsafeName": "tel",
                  "safeName": "tel"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TEL",
                  "safeName": "TEL"
                },
                "pascalCase": {
                  "unsafeName": "Tel",
                  "safeName": "Tel"
                }
              },
              "wireValue": "tel"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "web",
                "camelCase": {
                  "unsafeName": "web",
                  "safeName": "web"
                },
                "snakeCase": {
                  "unsafeName": "web",
                  "safeName": "web"
                },
                "screamingSnakeCase": {
                  "unsafeName": "WEB",
                  "safeName": "WEB"
                },
                "pascalCase": {
                  "unsafeName": "Web",
                  "safeName": "Web"
                }
              },
              "wireValue": "web"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The ACH transfer type.\n\n<strong><code>achSecCode</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>arc</code></strong></td><td>Accounts Receivable</td>\n    </tr>\n<tr>\n    <td><strong><code>boc</code></strong></td><td>Back Office Conversion</td>\n    </tr>\n<tr>\n    <td><strong><code>ccd</code></strong></td><td>Credit or Debit</td>\n    </tr>\n<tr>\n    <td><strong><code>cie</code></strong></td><td>Customer-Initiated</td>\n    </tr>\n<tr>\n    <td><strong><code>ctx</code></strong></td><td>Corporate Trade Exchange</td>\n    </tr>\n<tr>\n    <td><strong><code>pop</code></strong></td><td>Point of Purchase</td>\n    </tr>\n<tr>\n    <td><strong><code>ppd</code></strong></td><td>Prearranged Payment and Deposit</td>\n    </tr>\n<tr>\n    <td><strong><code>rck</code></strong></td><td>Re-Presented Check</td>\n    </tr>\n<tr>\n    <td><strong><code>tel</code></strong></td><td>Telephone-initiated</td>\n    </tr>\n<tr>\n    <td><strong><code>web</code></strong></td><td>Internet-initiated/Mobile</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "institutionId": {
      "name": {
        "typeId": "institutionId",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "institutionId",
          "camelCase": {
            "unsafeName": "institutionId",
            "safeName": "institutionId"
          },
          "snakeCase": {
            "unsafeName": "institution_id",
            "safeName": "institution_id"
          },
          "screamingSnakeCase": {
            "unsafeName": "INSTITUTION_ID",
            "safeName": "INSTITUTION_ID"
          },
          "pascalCase": {
            "unsafeName": "InstitutionId",
            "safeName": "InstitutionId"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 2,
                "maxLength": 9,
                "pattern": "^[A-Z0-9_]{2,8}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 2,
                "maxLength": 9,
                "pattern": "^[A-Z0-9_]{2,8}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The unique immutable identifier of a financial institution.",
      "referencedTypes": {},
      "inline": false
    },
    "challengeToken": {
      "name": {
        "typeId": "challengeToken",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "challengeToken",
          "camelCase": {
            "unsafeName": "challengeToken",
            "safeName": "challengeToken"
          },
          "snakeCase": {
            "unsafeName": "challenge_token",
            "safeName": "challenge_token"
          },
          "screamingSnakeCase": {
            "unsafeName": "CHALLENGE_TOKEN",
            "safeName": "CHALLENGE_TOKEN"
          },
          "pascalCase": {
            "unsafeName": "ChallengeToken",
            "safeName": "ChallengeToken"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 8,
                "maxLength": 255,
                "pattern": "^[-_:.~%$a-zA-Z0-9]{6,255}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 8,
                "maxLength": 255,
                "pattern": "^[-_:.~%$a-zA-Z0-9]{6,255}$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The value of the identity `Challenge` request header that the client must send when retrying an operation which required a challenge.",
      "referencedTypes": {},
      "inline": false
    },
    "requiredIdentityChallenge": {
      "name": {
        "typeId": "requiredIdentityChallenge",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "requiredIdentityChallenge",
          "camelCase": {
            "unsafeName": "requiredIdentityChallenge",
            "safeName": "requiredIdentityChallenge"
          },
          "snakeCase": {
            "unsafeName": "required_identity_challenge",
            "safeName": "required_identity_challenge"
          },
          "screamingSnakeCase": {
            "unsafeName": "REQUIRED_IDENTITY_CHALLENGE",
            "safeName": "REQUIRED_IDENTITY_CHALLENGE"
          },
          "pascalCase": {
            "unsafeName": "RequiredIdentityChallenge",
            "safeName": "RequiredIdentityChallenge"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "x-fern-sdk-method-name",
                "camelCase": {
                  "unsafeName": "xFernSdkMethodName",
                  "safeName": "xFernSdkMethodName"
                },
                "snakeCase": {
                  "unsafeName": "x_fern_sdk_method_name",
                  "safeName": "x_fern_sdk_method_name"
                },
                "screamingSnakeCase": {
                  "unsafeName": "X_FERN_SDK_METHOD_NAME",
                  "safeName": "X_FERN_SDK_METHOD_NAME"
                },
                "pascalCase": {
                  "unsafeName": "XFernSdkMethodName",
                  "safeName": "XFernSdkMethodName"
                }
              },
              "wireValue": "x-fern-sdk-method-name"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "readOnlyResourceId",
              "inline": false,
              "type": "named"
            },
            "docs": "The ID of the API operation for which the user must verify their identity. This is passed when starting a challenge factor or when validating the identity challenge responses.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "challengeId",
                "camelCase": {
                  "unsafeName": "challengeId",
                  "safeName": "challengeId"
                },
                "snakeCase": {
                  "unsafeName": "challenge_id",
                  "safeName": "challenge_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "CHALLENGE_ID",
                  "safeName": "CHALLENGE_ID"
                },
                "pascalCase": {
                  "unsafeName": "ChallengeId",
                  "safeName": "ChallengeId"
                }
              },
              "wireValue": "challengeId"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "readOnlyResourceId",
              "inline": false,
              "type": "named"
            },
            "docs": "The unique ID of this challenge instance. This is an opaque string. This is passed when starting a challenge factor or when validating the identity challenge responses.",
            "propertyAccess": "READ_ONLY"
          },
          {
            "name": {
              "name": {
                "originalName": "factors",
                "camelCase": {
                  "unsafeName": "factors",
                  "safeName": "factors"
                },
                "snakeCase": {
                  "unsafeName": "factors",
                  "safeName": "factors"
                },
                "screamingSnakeCase": {
                  "unsafeName": "FACTORS",
                  "safeName": "FACTORS"
                },
                "pascalCase": {
                  "unsafeName": "Factors",
                  "safeName": "Factors"
                }
              },
              "wireValue": "factors"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "challengeFactor",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "A list of challenge factors. The user must complete one of these challenge factors. The `labels` in each factor identify one or more channels the user may use, such as a list of email addresses the system may use to send a one-time passcode to the user. ***Note**: The same channel may be used by multiple factors in the array of factors. For example, the user's primary mobile phone number may be used for both an `sms` factor and a `voice` factor."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A request from the service for the user to verify their identity. This contains a challenge ID, the corresponding operation ID, and a list of challenge factors for identity verification. The user must complete one of these challenge factors to satisfy the challenge. This schema defines the attributes in the 401 [Unauthorized problem response](#schema-apiProblem) when the 401 problem type name is `challengeRequired`. See the \"Challenge API\" for details.",
      "referencedTypes": {},
      "inline": false
    },
    "abstractPagedBodyFields": {
      "name": {
        "typeId": "abstractPagedBodyFields",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "abstractPagedBodyFields",
          "camelCase": {
            "unsafeName": "abstractPagedBodyFields",
            "safeName": "abstractPagedBodyFields"
          },
          "snakeCase": {
            "unsafeName": "abstract_paged_body_fields",
            "safeName": "abstract_paged_body_fields"
          },
          "screamingSnakeCase": {
            "unsafeName": "ABSTRACT_PAGED_BODY_FIELDS",
            "safeName": "ABSTRACT_PAGED_BODY_FIELDS"
          },
          "pascalCase": {
            "unsafeName": "AbstractPagedBodyFields",
            "safeName": "AbstractPagedBodyFields"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "limit",
                "camelCase": {
                  "unsafeName": "limit",
                  "safeName": "limit"
                },
                "snakeCase": {
                  "unsafeName": "limit",
                  "safeName": "limit"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LIMIT",
                  "safeName": "LIMIT"
                },
                "pascalCase": {
                  "unsafeName": "Limit",
                  "safeName": "Limit"
                }
              },
              "wireValue": "limit"
            },
            "valueType": {
              "primitive": {
                "v1": "INTEGER",
                "v2": {
                  "default": 100,
                  "validation": {
                    "min": 0
                  },
                  "type": "integer"
                }
              },
              "type": "primitive"
            },
            "docs": "The number of items requested for this page response. The length of the `items` array may be less that `limit`."
          },
          {
            "name": {
              "name": {
                "originalName": "nextPage_url",
                "camelCase": {
                  "unsafeName": "nextPageUrl",
                  "safeName": "nextPageUrl"
                },
                "snakeCase": {
                  "unsafeName": "next_page_url",
                  "safeName": "next_page_url"
                },
                "screamingSnakeCase": {
                  "unsafeName": "NEXT_PAGE_URL",
                  "safeName": "NEXT_PAGE_URL"
                },
                "pascalCase": {
                  "unsafeName": "NextPageUrl",
                  "safeName": "NextPageUrl"
                }
              },
              "wireValue": "nextPage_url"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 8000,
                        "format": "uri-reference"
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The URL of the next page of resources. If this URL is omitted, there are no more resources in the collection.",
            "propertyAccess": "READ_ONLY"
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Common properties of collection page responses.",
      "referencedTypes": {},
      "inline": false
    },
    "addressFields": {
      "name": {
        "typeId": "addressFields",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "addressFields",
          "camelCase": {
            "unsafeName": "addressFields",
            "safeName": "addressFields"
          },
          "snakeCase": {
            "unsafeName": "address_fields",
            "safeName": "address_fields"
          },
          "screamingSnakeCase": {
            "unsafeName": "ADDRESS_FIELDS",
            "safeName": "ADDRESS_FIELDS"
          },
          "pascalCase": {
            "unsafeName": "AddressFields",
            "safeName": "AddressFields"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "address1",
                "camelCase": {
                  "unsafeName": "address1",
                  "safeName": "address1"
                },
                "snakeCase": {
                  "unsafeName": "address_1",
                  "safeName": "address_1"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ADDRESS_1",
                  "safeName": "ADDRESS_1"
                },
                "pascalCase": {
                  "unsafeName": "Address1",
                  "safeName": "Address1"
                }
              },
              "wireValue": "address1"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 35
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The first line of the postal address. In the US, this typically includes the building number and street name."
          },
          {
            "name": {
              "name": {
                "originalName": "address2",
                "camelCase": {
                  "unsafeName": "address2",
                  "safeName": "address2"
                },
                "snakeCase": {
                  "unsafeName": "address_2",
                  "safeName": "address_2"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ADDRESS_2",
                  "safeName": "ADDRESS_2"
                },
                "pascalCase": {
                  "unsafeName": "Address2",
                  "safeName": "Address2"
                }
              },
              "wireValue": "address2"
            },
            "valueType": {
              "container": {
                "optional": {
                  "primitive": {
                    "v1": "STRING",
                    "v2": {
                      "validation": {
                        "maxLength": 35
                      },
                      "type": "string"
                    }
                  },
                  "type": "primitive"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "The second line of the street address. This should only be used if it has a value. Typical values include building numbers, suite numbers, and other identifying information beyond the first line of the postal address."
          },
          {
            "name": {
              "name": {
                "originalName": "locality",
                "camelCase": {
                  "unsafeName": "locality",
                  "safeName": "locality"
                },
                "snakeCase": {
                  "unsafeName": "locality",
                  "safeName": "locality"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LOCALITY",
                  "safeName": "LOCALITY"
                },
                "pascalCase": {
                  "unsafeName": "Locality",
                  "safeName": "Locality"
                }
              },
              "wireValue": "locality"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 20
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The city/town/municipality of the address."
          },
          {
            "name": {
              "name": {
                "originalName": "countryCode",
                "camelCase": {
                  "unsafeName": "countryCode",
                  "safeName": "countryCode"
                },
                "snakeCase": {
                  "unsafeName": "country_code",
                  "safeName": "country_code"
                },
                "screamingSnakeCase": {
                  "unsafeName": "COUNTRY_CODE",
                  "safeName": "COUNTRY_CODE"
                },
                "pascalCase": {
                  "unsafeName": "CountryCode",
                  "safeName": "CountryCode"
                }
              },
              "wireValue": "countryCode"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "minLength": 2,
                    "maxLength": 2
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The [ISO-3611 alpha-2](https://www.iso.org/glossary-for-iso-3166.html) value for the country associated with the postal address."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Properties of a simple address, used to compose other addresses.",
      "referencedTypes": {},
      "inline": false
    },
    "challengeFactor": {
      "name": {
        "typeId": "challengeFactor",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "challengeFactor",
          "camelCase": {
            "unsafeName": "challengeFactor",
            "safeName": "challengeFactor"
          },
          "snakeCase": {
            "unsafeName": "challenge_factor",
            "safeName": "challenge_factor"
          },
          "screamingSnakeCase": {
            "unsafeName": "CHALLENGE_FACTOR",
            "safeName": "CHALLENGE_FACTOR"
          },
          "pascalCase": {
            "unsafeName": "ChallengeFactor",
            "safeName": "ChallengeFactor"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "type",
                "camelCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "snakeCase": {
                  "unsafeName": "type",
                  "safeName": "type_"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TYPE",
                  "safeName": "TYPE"
                },
                "pascalCase": {
                  "unsafeName": "Type",
                  "safeName": "Type"
                }
              },
              "wireValue": "type"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "challengeFactorType",
              "inline": false,
              "type": "named"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "labels",
                "camelCase": {
                  "unsafeName": "labels",
                  "safeName": "labels"
                },
                "snakeCase": {
                  "unsafeName": "labels",
                  "safeName": "labels"
                },
                "screamingSnakeCase": {
                  "unsafeName": "LABELS",
                  "safeName": "LABELS"
                },
                "pascalCase": {
                  "unsafeName": "Labels",
                  "safeName": "Labels"
                }
              },
              "wireValue": "labels"
            },
            "valueType": {
              "container": {
                "optional": {
                  "container": {
                    "list": {
                      "primitive": {
                        "v1": "STRING",
                        "v2": {
                          "validation": {
                            "maxLength": 40
                          },
                          "type": "string"
                        }
                      },
                      "type": "primitive"
                    },
                    "type": "list"
                  },
                  "type": "container"
                },
                "type": "optional"
              },
              "type": "container"
            },
            "docs": "A list of text label which identifies the channel(s) though which the user completes the challenge. For an `sms` or `voice` challenge, the only label item is the last four digits of the corresponding phone number. For an `email` challenge, each label is the masked email address."
          },
          {
            "name": {
              "name": {
                "originalName": "securityQuestions",
                "camelCase": {
                  "unsafeName": "securityQuestions",
                  "safeName": "securityQuestions"
                },
                "snakeCase": {
                  "unsafeName": "security_questions",
                  "safeName": "security_questions"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SECURITY_QUESTIONS",
                  "safeName": "SECURITY_QUESTIONS"
                },
                "pascalCase": {
                  "unsafeName": "SecurityQuestions",
                  "safeName": "SecurityQuestions"
                }
              },
              "wireValue": "securityQuestions"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "challengeSecurityQuestions",
              "inline": false,
              "type": "named"
            }
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "An challenge factor. See [`requiredIdentityChallenge`](#schema-requiredIdentityChallenge) for multiple examples.",
      "referencedTypes": {},
      "inline": false
    },
    "challengeFactorType": {
      "name": {
        "typeId": "challengeFactorType",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "challengeFactorType",
          "camelCase": {
            "unsafeName": "challengeFactorType",
            "safeName": "challengeFactorType"
          },
          "snakeCase": {
            "unsafeName": "challenge_factor_type",
            "safeName": "challenge_factor_type"
          },
          "screamingSnakeCase": {
            "unsafeName": "CHALLENGE_FACTOR_TYPE",
            "safeName": "CHALLENGE_FACTOR_TYPE"
          },
          "pascalCase": {
            "unsafeName": "ChallengeFactorType",
            "safeName": "ChallengeFactorType"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "sms",
                "camelCase": {
                  "unsafeName": "sms",
                  "safeName": "sms"
                },
                "snakeCase": {
                  "unsafeName": "sms",
                  "safeName": "sms"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SMS",
                  "safeName": "SMS"
                },
                "pascalCase": {
                  "unsafeName": "Sms",
                  "safeName": "Sms"
                }
              },
              "wireValue": "sms"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "email",
                "camelCase": {
                  "unsafeName": "email",
                  "safeName": "email"
                },
                "snakeCase": {
                  "unsafeName": "email",
                  "safeName": "email"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EMAIL",
                  "safeName": "EMAIL"
                },
                "pascalCase": {
                  "unsafeName": "Email",
                  "safeName": "Email"
                }
              },
              "wireValue": "email"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "voice",
                "camelCase": {
                  "unsafeName": "voice",
                  "safeName": "voice"
                },
                "snakeCase": {
                  "unsafeName": "voice",
                  "safeName": "voice"
                },
                "screamingSnakeCase": {
                  "unsafeName": "VOICE",
                  "safeName": "VOICE"
                },
                "pascalCase": {
                  "unsafeName": "Voice",
                  "safeName": "Voice"
                }
              },
              "wireValue": "voice"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "securityQuestions",
                "camelCase": {
                  "unsafeName": "securityQuestions",
                  "safeName": "securityQuestions"
                },
                "snakeCase": {
                  "unsafeName": "security_questions",
                  "safeName": "security_questions"
                },
                "screamingSnakeCase": {
                  "unsafeName": "SECURITY_QUESTIONS",
                  "safeName": "SECURITY_QUESTIONS"
                },
                "pascalCase": {
                  "unsafeName": "SecurityQuestions",
                  "safeName": "SecurityQuestions"
                }
              },
              "wireValue": "securityQuestions"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "authenticatorToken",
                "camelCase": {
                  "unsafeName": "authenticatorToken",
                  "safeName": "authenticatorToken"
                },
                "snakeCase": {
                  "unsafeName": "authenticator_token",
                  "safeName": "authenticator_token"
                },
                "screamingSnakeCase": {
                  "unsafeName": "AUTHENTICATOR_TOKEN",
                  "safeName": "AUTHENTICATOR_TOKEN"
                },
                "pascalCase": {
                  "unsafeName": "AuthenticatorToken",
                  "safeName": "AuthenticatorToken"
                }
              },
              "wireValue": "authenticatorToken"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The name of challenge factor.\n\n<strong><code>challengeFactorType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>sms</code></strong></td><td>SMS: <p>One-time passcode sent to the primary mobile phone number</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>email</code></strong></td><td>Email: <p>One-time passcode sent to the primary email address</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>voice</code></strong></td><td>Voice: <p>One-time passcode communicated via automated voice phone call</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>authenticatorToken</code></strong></td><td>authenticator Token: <p>One-time passcode issued by a pre-registered hardware device, such as a token key fob, or an authenticator app</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>securityQuestions</code></strong></td><td>Security Questions: <p>Prompt with the user&#39;s security questions registered with their security profile</p>\n</td>\n    </tr>\n</table>\n\n",
      "referencedTypes": {},
      "inline": false
    },
    "challengeSecurityQuestions": {
      "name": {
        "typeId": "challengeSecurityQuestions",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "challengeSecurityQuestions",
          "camelCase": {
            "unsafeName": "challengeSecurityQuestions",
            "safeName": "challengeSecurityQuestions"
          },
          "snakeCase": {
            "unsafeName": "challenge_security_questions",
            "safeName": "challenge_security_questions"
          },
          "screamingSnakeCase": {
            "unsafeName": "CHALLENGE_SECURITY_QUESTIONS",
            "safeName": "CHALLENGE_SECURITY_QUESTIONS"
          },
          "pascalCase": {
            "unsafeName": "ChallengeSecurityQuestions",
            "safeName": "ChallengeSecurityQuestions"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "questions",
                "camelCase": {
                  "unsafeName": "questions",
                  "safeName": "questions"
                },
                "snakeCase": {
                  "unsafeName": "questions",
                  "safeName": "questions"
                },
                "screamingSnakeCase": {
                  "unsafeName": "QUESTIONS",
                  "safeName": "QUESTIONS"
                },
                "pascalCase": {
                  "unsafeName": "Questions",
                  "safeName": "Questions"
                }
              },
              "wireValue": "questions"
            },
            "valueType": {
              "container": {
                "list": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "challengeSecurityQuestion",
                  "inline": false,
                  "type": "named"
                },
                "type": "list"
              },
              "type": "container"
            },
            "docs": "The array of security questions."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "Describes a `securityQuestions` challenge. This is omitted if the challenge `type` is not `securityQuestions`.",
      "referencedTypes": {},
      "inline": false
    },
    "challengeSecurityQuestion": {
      "name": {
        "typeId": "challengeSecurityQuestion",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "challengeSecurityQuestion",
          "camelCase": {
            "unsafeName": "challengeSecurityQuestion",
            "safeName": "challengeSecurityQuestion"
          },
          "snakeCase": {
            "unsafeName": "challenge_security_question",
            "safeName": "challenge_security_question"
          },
          "screamingSnakeCase": {
            "unsafeName": "CHALLENGE_SECURITY_QUESTION",
            "safeName": "CHALLENGE_SECURITY_QUESTION"
          },
          "pascalCase": {
            "unsafeName": "ChallengeSecurityQuestion",
            "safeName": "ChallengeSecurityQuestion"
          }
        }
      },
      "shape": {
        "properties": [
          {
            "name": {
              "name": {
                "originalName": "id",
                "camelCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "snakeCase": {
                  "unsafeName": "id",
                  "safeName": "id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ID",
                  "safeName": "ID"
                },
                "pascalCase": {
                  "unsafeName": "Id",
                  "safeName": "Id"
                }
              },
              "wireValue": "id"
            },
            "valueType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "challengePromptId",
              "inline": false,
              "type": "named"
            },
            "docs": "The unique ID of security question prompt. This should be included in the [`challengeVerification`](#schema-challengeVerification) response as the `promptId`."
          },
          {
            "name": {
              "name": {
                "originalName": "prompt",
                "camelCase": {
                  "unsafeName": "prompt",
                  "safeName": "prompt"
                },
                "snakeCase": {
                  "unsafeName": "prompt",
                  "safeName": "prompt"
                },
                "screamingSnakeCase": {
                  "unsafeName": "PROMPT",
                  "safeName": "PROMPT"
                },
                "pascalCase": {
                  "unsafeName": "Prompt",
                  "safeName": "Prompt"
                }
              },
              "wireValue": "prompt"
            },
            "valueType": {
              "primitive": {
                "v1": "STRING",
                "v2": {
                  "validation": {
                    "maxLength": 50
                  },
                  "type": "string"
                }
              },
              "type": "primitive"
            },
            "docs": "The text prompt of this security question."
          }
        ],
        "extends": [],
        "extendedProperties": [],
        "extraProperties": false,
        "type": "object"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "A single security question within the `questions` array of the [`challengeSecurityQuestions`](#schema-challengeSecurityQuestions)",
      "referencedTypes": {},
      "inline": false
    },
    "challengePromptId": {
      "name": {
        "typeId": "challengePromptId",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "challengePromptId",
          "camelCase": {
            "unsafeName": "challengePromptId",
            "safeName": "challengePromptId"
          },
          "snakeCase": {
            "unsafeName": "challenge_prompt_id",
            "safeName": "challenge_prompt_id"
          },
          "screamingSnakeCase": {
            "unsafeName": "CHALLENGE_PROMPT_ID",
            "safeName": "CHALLENGE_PROMPT_ID"
          },
          "pascalCase": {
            "unsafeName": "ChallengePromptId",
            "safeName": "ChallengePromptId"
          }
        }
      },
      "shape": {
        "aliasOf": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 1,
                "maxLength": 48,
                "pattern": "^[-_:.~$a-zA-Z0-9]+$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "resolvedType": {
          "primitive": {
            "v1": "STRING",
            "v2": {
              "validation": {
                "minLength": 1,
                "maxLength": 48,
                "pattern": "^[-_:.~$a-zA-Z0-9]+$"
              },
              "type": "string"
            }
          },
          "type": "primitive"
        },
        "type": "alias"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "docs": "The unique ID of a prompt (such as a security question) in a challenge factor.",
      "referencedTypes": {},
      "inline": false
    },
    "AccountsGetParametersSchema": {
      "name": {
        "typeId": "AccountsGetParametersSchema",
        "fernFilepath": {
          "allParts": [],
          "packagePath": []
        },
        "name": {
          "originalName": "AccountsGetParametersSchema",
          "camelCase": {
            "unsafeName": "accountsGetParametersSchema",
            "safeName": "accountsGetParametersSchema"
          },
          "snakeCase": {
            "unsafeName": "accounts_get_parameters_schema",
            "safeName": "accounts_get_parameters_schema"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNTS_GET_PARAMETERS_SCHEMA",
            "safeName": "ACCOUNTS_GET_PARAMETERS_SCHEMA"
          },
          "pascalCase": {
            "unsafeName": "AccountsGetParametersSchema",
            "safeName": "AccountsGetParametersSchema"
          }
        }
      },
      "shape": {
        "values": [
          {
            "name": {
              "name": {
                "originalName": "internal",
                "camelCase": {
                  "unsafeName": "internal",
                  "safeName": "internal"
                },
                "snakeCase": {
                  "unsafeName": "internal",
                  "safeName": "internal"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INTERNAL",
                  "safeName": "INTERNAL"
                },
                "pascalCase": {
                  "unsafeName": "Internal",
                  "safeName": "Internal"
                }
              },
              "wireValue": "internal"
            }
          },
          {
            "name": {
              "name": {
                "originalName": "external",
                "camelCase": {
                  "unsafeName": "external",
                  "safeName": "external"
                },
                "snakeCase": {
                  "unsafeName": "external",
                  "safeName": "external"
                },
                "screamingSnakeCase": {
                  "unsafeName": "EXTERNAL",
                  "safeName": "EXTERNAL"
                },
                "pascalCase": {
                  "unsafeName": "External",
                  "safeName": "External"
                }
              },
              "wireValue": "external"
            }
          }
        ],
        "type": "enum"
      },
      "autogeneratedExamples": [],
      "userProvidedExamples": [],
      "referencedTypes": {},
      "inline": false
    }
  },
  "services": {
    "accounts": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "accounts",
              "camelCase": {
                "unsafeName": "accounts",
                "safeName": "accounts"
              },
              "snakeCase": {
                "unsafeName": "accounts",
                "safeName": "accounts"
              },
              "screamingSnakeCase": {
                "unsafeName": "ACCOUNTS",
                "safeName": "ACCOUNTS"
              },
              "pascalCase": {
                "unsafeName": "Accounts",
                "safeName": "Accounts"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "accounts",
            "camelCase": {
              "unsafeName": "accounts",
              "safeName": "accounts"
            },
            "snakeCase": {
              "unsafeName": "accounts",
              "safeName": "accounts"
            },
            "screamingSnakeCase": {
              "unsafeName": "ACCOUNTS",
              "safeName": "ACCOUNTS"
            },
            "pascalCase": {
              "unsafeName": "Accounts",
              "safeName": "Accounts"
            }
          }
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "id": "accounts.listAccounts",
          "displayName": "List Accounts",
          "method": "GET",
          "name": {
            "originalName": "listAccounts",
            "camelCase": {
              "unsafeName": "listAccounts",
              "safeName": "listAccounts"
            },
            "snakeCase": {
              "unsafeName": "list_accounts",
              "safeName": "list_accounts"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_ACCOUNTS",
              "safeName": "LIST_ACCOUNTS"
            },
            "pascalCase": {
              "unsafeName": "ListAccounts",
              "safeName": "ListAccounts"
            }
          },
          "path": {
            "head": "/accounts",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "productType",
                  "camelCase": {
                    "unsafeName": "productType",
                    "safeName": "productType"
                  },
                  "snakeCase": {
                    "unsafeName": "product_type",
                    "safeName": "product_type"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "PRODUCT_TYPE",
                    "safeName": "PRODUCT_TYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "ProductType",
                    "safeName": "ProductType"
                  }
                },
                "wireValue": "productType"
              },
              "docs": "Include only accounts whose `product.type` is in pipe-delimited set. For example, to list only savings, checking, and CD accounts, use <br>`?productType=savings|checking|cd`.",
              "valueType": {
                "container": {
                  "list": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "",
                      "camelCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "snakeCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "pascalCase": {
                        "unsafeName": "",
                        "safeName": ""
                      }
                    },
                    "typeId": "productType",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "list"
                },
                "type": "container"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "location",
                  "camelCase": {
                    "unsafeName": "location",
                    "safeName": "location"
                  },
                  "snakeCase": {
                    "unsafeName": "location",
                    "safeName": "location"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LOCATION",
                    "safeName": "LOCATION"
                  },
                  "pascalCase": {
                    "unsafeName": "Location",
                    "safeName": "Location"
                  }
                },
                "wireValue": "location"
              },
              "docs": "Filter accounts to just a subset of `internal` or `external` accounts (per the `location` property on the [`accountItem`](#schema-accountItem) schema).",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "AccountsGetParametersSchema",
                  "camelCase": {
                    "unsafeName": "accountsGetParametersSchema",
                    "safeName": "accountsGetParametersSchema"
                  },
                  "snakeCase": {
                    "unsafeName": "accounts_get_parameters_schema",
                    "safeName": "accounts_get_parameters_schema"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ACCOUNTS_GET_PARAMETERS_SCHEMA",
                    "safeName": "ACCOUNTS_GET_PARAMETERS_SCHEMA"
                  },
                  "pascalCase": {
                    "unsafeName": "AccountsGetParametersSchema",
                    "safeName": "AccountsGetParametersSchema"
                  }
                },
                "typeId": "AccountsGetParametersSchema",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            }
          ],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "accounts",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK. A page from the full list of the customer's accounts. This list contains only accounts that the customer is entitled to access. While the `nextPage_url` property is present in the response, the client can fetch the next page of accounts by performing a `GET` on that URL.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a paginated list of the customer's accounts, consisting of internal accounts at this financial institution and accounts at other financial institutions, if any.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accounts",
            "parts": []
          },
          "allPathParameters": []
        },
        {
          "id": "accounts.getAccount",
          "displayName": "Get an Account",
          "method": "GET",
          "name": {
            "originalName": "getAccount",
            "camelCase": {
              "unsafeName": "getAccount",
              "safeName": "getAccount"
            },
            "snakeCase": {
              "unsafeName": "get_account",
              "safeName": "get_account"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET_ACCOUNT",
              "safeName": "GET_ACCOUNT"
            },
            "pascalCase": {
              "unsafeName": "GetAccount",
              "safeName": "GetAccount"
            }
          },
          "path": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": ""
              }
            ]
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "account",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK. The response is a representation of the customer's account.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return details of the customer's internal account.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": ""
              }
            ]
          },
          "allPathParameters": []
        },
        {
          "id": "accounts.listAccountBalances",
          "displayName": "List Account Balances",
          "method": "GET",
          "name": {
            "originalName": "listAccountBalances",
            "camelCase": {
              "unsafeName": "listAccountBalances",
              "safeName": "listAccountBalances"
            },
            "snakeCase": {
              "unsafeName": "list_account_balances",
              "safeName": "list_account_balances"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_ACCOUNT_BALANCES",
              "safeName": "LIST_ACCOUNT_BALANCES"
            },
            "pascalCase": {
              "unsafeName": "ListAccountBalances",
              "safeName": "ListAccountBalances"
            }
          },
          "path": {
            "head": "/accountBalances",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "accounts",
                  "camelCase": {
                    "unsafeName": "accounts",
                    "safeName": "accounts"
                  },
                  "snakeCase": {
                    "unsafeName": "accounts",
                    "safeName": "accounts"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ACCOUNTS",
                    "safeName": "ACCOUNTS"
                  },
                  "pascalCase": {
                    "unsafeName": "Accounts",
                    "safeName": "Accounts"
                  }
                },
                "wireValue": "accounts"
              },
              "docs": "The unique account identifiers of one or more internal accounts. (Internal accounts are those with `location` value of `internal`.) If omitted, this operation uses the accounts for which the customer has view permissions but is limited to at most 1000 accounts. Note: The account IDs are unrelated to the account number.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "accountIds",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "retryCount",
                  "camelCase": {
                    "unsafeName": "retryCount",
                    "safeName": "retryCount"
                  },
                  "snakeCase": {
                    "unsafeName": "retry_count",
                    "safeName": "retry_count"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "RETRY_COUNT",
                    "safeName": "RETRY_COUNT"
                  },
                  "pascalCase": {
                    "unsafeName": "RetryCount",
                    "safeName": "RetryCount"
                  }
                },
                "wireValue": "retryCount"
              },
              "docs": "When retrying the operation, pass the `retryCount` from the `incompleteAccountBalances` response.",
              "valueType": {
                "primitive": {
                  "v1": "DOUBLE",
                  "v2": {
                    "validation": {
                      "max": 10,
                      "min": 1
                    },
                    "type": "double"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            }
          ],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "accountBalances",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK. The response contains the balances for all the accounts in the `?accounts=` query parameter.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a list of the requested internal accounts' balances. The `accounts` query parameter is a list of account IDs which typically comes from the `getAccounts` operation response. The returned list does not include external accounts. The caller must have entitlements to view each account's details, as indicated by a `true` value for `account.allows.view`. Requests to list balances for accounts the user is not allowed to read results in a 403 Forbidden response.\n\nThe response may be incomplete. Given a `Retry-After` response header, the client can retry the operation after a short delay, requesting only the accounts which are incomplete; see the 202 Accepted response for details.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accountBalances",
            "parts": []
          },
          "allPathParameters": []
        },
        {
          "id": "accounts.listEligibleAchAccounts",
          "displayName": "List Eligible ACH Accounts",
          "method": "GET",
          "name": {
            "originalName": "listEligibleAchAccounts",
            "camelCase": {
              "unsafeName": "listEligibleAchAccounts",
              "safeName": "listEligibleAchAccounts"
            },
            "snakeCase": {
              "unsafeName": "list_eligible_ach_accounts",
              "safeName": "list_eligible_ach_accounts"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_ELIGIBLE_ACH_ACCOUNTS",
              "safeName": "LIST_ELIGIBLE_ACH_ACCOUNTS"
            },
            "pascalCase": {
              "unsafeName": "ListEligibleAchAccounts",
              "safeName": "ListEligibleAchAccounts"
            }
          },
          "path": {
            "head": "/achEligibleAccounts",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "accounts",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK. A page from the full list of the customer's ACH-eligible accounts. This list contains only accounts that the customer is entitled to access. While the `nextPage_url` property is present in the response, the client can fetch the next page of accounts by performing a `GET` on that URL.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a paginated list of a customer's accounts that are eligible for ACH transfers based on allowed privileges.\n\nOptionally, an agent can access a business customer's ACH accounts when acting on behalf of that business customer via the optional `customerId` query parameter.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/achEligibleAccounts",
            "parts": []
          },
          "allPathParameters": []
        }
      ]
    },
    "accountJointOwners": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "accountJointOwners",
              "camelCase": {
                "unsafeName": "accountJointOwners",
                "safeName": "accountJointOwners"
              },
              "snakeCase": {
                "unsafeName": "account_joint_owners",
                "safeName": "account_joint_owners"
              },
              "screamingSnakeCase": {
                "unsafeName": "ACCOUNT_JOINT_OWNERS",
                "safeName": "ACCOUNT_JOINT_OWNERS"
              },
              "pascalCase": {
                "unsafeName": "AccountJointOwners",
                "safeName": "AccountJointOwners"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "accountJointOwners",
            "camelCase": {
              "unsafeName": "accountJointOwners",
              "safeName": "accountJointOwners"
            },
            "snakeCase": {
              "unsafeName": "account_joint_owners",
              "safeName": "account_joint_owners"
            },
            "screamingSnakeCase": {
              "unsafeName": "ACCOUNT_JOINT_OWNERS",
              "safeName": "ACCOUNT_JOINT_OWNERS"
            },
            "pascalCase": {
              "unsafeName": "AccountJointOwners",
              "safeName": "AccountJointOwners"
            }
          }
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "id": "accountJointOwners.listAccountJointOwners",
          "displayName": "Return a collection of account joint owners",
          "method": "GET",
          "name": {
            "originalName": "listAccountJointOwners",
            "camelCase": {
              "unsafeName": "listAccountJointOwners",
              "safeName": "listAccountJointOwners"
            },
            "snakeCase": {
              "unsafeName": "list_account_joint_owners",
              "safeName": "list_account_joint_owners"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_ACCOUNT_JOINT_OWNERS",
              "safeName": "LIST_ACCOUNT_JOINT_OWNERS"
            },
            "pascalCase": {
              "unsafeName": "ListAccountJointOwners",
              "safeName": "ListAccountJointOwners"
            }
          },
          "path": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/jointOwners"
              }
            ]
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "accountJointOwners",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a collection of account joint owners. The user must have the `account.manageJointOwners` permission to use this operation.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/jointOwners"
              }
            ]
          },
          "allPathParameters": []
        }
      ]
    },
    "overdraftProtection": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "overdraftProtection",
              "camelCase": {
                "unsafeName": "overdraftProtection",
                "safeName": "overdraftProtection"
              },
              "snakeCase": {
                "unsafeName": "overdraft_protection",
                "safeName": "overdraft_protection"
              },
              "screamingSnakeCase": {
                "unsafeName": "OVERDRAFT_PROTECTION",
                "safeName": "OVERDRAFT_PROTECTION"
              },
              "pascalCase": {
                "unsafeName": "OverdraftProtection",
                "safeName": "OverdraftProtection"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "overdraftProtection",
            "camelCase": {
              "unsafeName": "overdraftProtection",
              "safeName": "overdraftProtection"
            },
            "snakeCase": {
              "unsafeName": "overdraft_protection",
              "safeName": "overdraft_protection"
            },
            "screamingSnakeCase": {
              "unsafeName": "OVERDRAFT_PROTECTION",
              "safeName": "OVERDRAFT_PROTECTION"
            },
            "pascalCase": {
              "unsafeName": "OverdraftProtection",
              "safeName": "OverdraftProtection"
            }
          }
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "id": "overdraftProtection.listEligibleOverdraftAccounts",
          "displayName": "List Eligible Overdraft Accounts",
          "method": "GET",
          "name": {
            "originalName": "listEligibleOverdraftAccounts",
            "camelCase": {
              "unsafeName": "listEligibleOverdraftAccounts",
              "safeName": "listEligibleOverdraftAccounts"
            },
            "snakeCase": {
              "unsafeName": "list_eligible_overdraft_accounts",
              "safeName": "list_eligible_overdraft_accounts"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_ELIGIBLE_OVERDRAFT_ACCOUNTS",
              "safeName": "LIST_ELIGIBLE_OVERDRAFT_ACCOUNTS"
            },
            "pascalCase": {
              "unsafeName": "ListEligibleOverdraftAccounts",
              "safeName": "ListEligibleOverdraftAccounts"
            }
          },
          "path": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/eligibleOverdraftAccounts"
              }
            ]
          },
          "pathParameters": [
            {
              "name": {
                "originalName": "accountId",
                "camelCase": {
                  "unsafeName": "accountId",
                  "safeName": "accountId"
                },
                "snakeCase": {
                  "unsafeName": "account_id",
                  "safeName": "account_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACCOUNT_ID",
                  "safeName": "ACCOUNT_ID"
                },
                "pascalCase": {
                  "unsafeName": "AccountId",
                  "safeName": "AccountId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "eligibleOverdraftAccounts",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK. A page from the full list of the customer's eligible overdraft accounts. This list contains only accounts that the customer is entitled to access. While the `nextPage_url` property is present in the response, the client can fetch the next page of accounts by performing a `GET` on that URL.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a paginated list of a customer's accounts that are eligible to serve as overdraft protection accounts for the given account. An overdraft protection account is a deposit account that the financial institution can transfer funds from to prevent the account balance from going negative and incurring non-sufficient funds fees.\n\nThe user must have the `allows.manageOverdraftAccounts` permission on the account to use this operation.\n\nTo obtain available balances for these accounts, use [`listAccountBalances`](#op-listAccountBalances).",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/eligibleOverdraftAccounts"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": {
                "originalName": "accountId",
                "camelCase": {
                  "unsafeName": "accountId",
                  "safeName": "accountId"
                },
                "snakeCase": {
                  "unsafeName": "account_id",
                  "safeName": "account_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACCOUNT_ID",
                  "safeName": "ACCOUNT_ID"
                },
                "pascalCase": {
                  "unsafeName": "AccountId",
                  "safeName": "AccountId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ]
        },
        {
          "id": "overdraftProtection.getOverdraftProtection",
          "displayName": "Fetch a representation of the account's overdraft protection settings",
          "method": "GET",
          "name": {
            "originalName": "getOverdraftProtection",
            "camelCase": {
              "unsafeName": "getOverdraftProtection",
              "safeName": "getOverdraftProtection"
            },
            "snakeCase": {
              "unsafeName": "get_overdraft_protection",
              "safeName": "get_overdraft_protection"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET_OVERDRAFT_PROTECTION",
              "safeName": "GET_OVERDRAFT_PROTECTION"
            },
            "pascalCase": {
              "unsafeName": "GetOverdraftProtection",
              "safeName": "GetOverdraftProtection"
            }
          },
          "path": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/overdraftProtection"
              }
            ]
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "overdraftProtection",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return the JSON representation of this account's overdraft protection settings.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/overdraftProtection"
              }
            ]
          },
          "allPathParameters": []
        },
        {
          "id": "overdraftProtection.patchOverdraftAccounts",
          "displayName": "Update the overdraft accounts",
          "method": "PATCH",
          "name": {
            "originalName": "patchOverdraftAccounts",
            "camelCase": {
              "unsafeName": "patchOverdraftAccounts",
              "safeName": "patchOverdraftAccounts"
            },
            "snakeCase": {
              "unsafeName": "patch_overdraft_accounts",
              "safeName": "patch_overdraft_accounts"
            },
            "screamingSnakeCase": {
              "unsafeName": "PATCH_OVERDRAFT_ACCOUNTS",
              "safeName": "PATCH_OVERDRAFT_ACCOUNTS"
            },
            "pascalCase": {
              "unsafeName": "PatchOverdraftAccounts",
              "safeName": "PatchOverdraftAccounts"
            }
          },
          "path": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/overdraftProtection"
              }
            ]
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "requestBody": {
            "contentType": "application/json",
            "docs": "The replacement overdraft accounts.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "overdraftProtectionPatch",
              "inline": false,
              "type": "named"
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "overdraftProtection",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Perform a partial update of the overdraft accounts. Only fields in the request body are updated on the resource; fields which are omitted are not updated. To add, replace, or remove an overdraft account, add, replace, or remove the corresponding account item from the `items` array. Only the account `id` in the items is significant.\n\nThe user must have the `allows.manageOverdraftAccounts` permission on the account to use this operation.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/overdraftProtection"
              }
            ]
          },
          "allPathParameters": []
        }
      ]
    },
    "jointOwners": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "jointOwners",
              "camelCase": {
                "unsafeName": "jointOwners",
                "safeName": "jointOwners"
              },
              "snakeCase": {
                "unsafeName": "joint_owners",
                "safeName": "joint_owners"
              },
              "screamingSnakeCase": {
                "unsafeName": "JOINT_OWNERS",
                "safeName": "JOINT_OWNERS"
              },
              "pascalCase": {
                "unsafeName": "JointOwners",
                "safeName": "JointOwners"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "jointOwners",
            "camelCase": {
              "unsafeName": "jointOwners",
              "safeName": "jointOwners"
            },
            "snakeCase": {
              "unsafeName": "joint_owners",
              "safeName": "joint_owners"
            },
            "screamingSnakeCase": {
              "unsafeName": "JOINT_OWNERS",
              "safeName": "JOINT_OWNERS"
            },
            "pascalCase": {
              "unsafeName": "JointOwners",
              "safeName": "JointOwners"
            }
          }
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "id": "jointOwners.createJointOwnerInvitation",
          "displayName": "Invite a joint owner",
          "method": "POST",
          "name": {
            "originalName": "createJointOwnerInvitation",
            "camelCase": {
              "unsafeName": "createJointOwnerInvitation",
              "safeName": "createJointOwnerInvitation"
            },
            "snakeCase": {
              "unsafeName": "create_joint_owner_invitation",
              "safeName": "create_joint_owner_invitation"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE_JOINT_OWNER_INVITATION",
              "safeName": "CREATE_JOINT_OWNER_INVITATION"
            },
            "pascalCase": {
              "unsafeName": "CreateJointOwnerInvitation",
              "safeName": "CreateJointOwnerInvitation"
            }
          },
          "path": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/jointOwnerInvitations"
              }
            ]
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "requestBody": {
            "contentType": "application/json",
            "docs": "Data necessary to invite a joint owner.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "newJointOwnerInvitation",
              "inline": false,
              "type": "named"
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "jointOwnerInvitation",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Create and send an invitation to another person to become a joint owner of the account. The invitation will be sent to the invitee's email address. The invitation directs the invitee to a web page to verify and accept the invitation, and if necessary, enroll in digital banking.\n\nThe authenticated user must have the `account.allows.manageJointOwners` permission to use this operation.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/jointOwnerInvitations"
              }
            ]
          },
          "allPathParameters": []
        }
      ]
    },
    "institutions": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "institutions",
              "camelCase": {
                "unsafeName": "institutions",
                "safeName": "institutions"
              },
              "snakeCase": {
                "unsafeName": "institutions",
                "safeName": "institutions"
              },
              "screamingSnakeCase": {
                "unsafeName": "INSTITUTIONS",
                "safeName": "INSTITUTIONS"
              },
              "pascalCase": {
                "unsafeName": "Institutions",
                "safeName": "Institutions"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "institutions",
            "camelCase": {
              "unsafeName": "institutions",
              "safeName": "institutions"
            },
            "snakeCase": {
              "unsafeName": "institutions",
              "safeName": "institutions"
            },
            "screamingSnakeCase": {
              "unsafeName": "INSTITUTIONS",
              "safeName": "INSTITUTIONS"
            },
            "pascalCase": {
              "unsafeName": "Institutions",
              "safeName": "Institutions"
            }
          }
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "id": "institutions.lookUpInstitutionByLocator",
          "displayName": "Look up institution by routing number, IBAN, or SWIFT/BIC code",
          "method": "GET",
          "name": {
            "originalName": "lookUpInstitutionByLocator",
            "camelCase": {
              "unsafeName": "lookUpInstitutionByLocator",
              "safeName": "lookUpInstitutionByLocator"
            },
            "snakeCase": {
              "unsafeName": "look_up_institution_by_locator",
              "safeName": "look_up_institution_by_locator"
            },
            "screamingSnakeCase": {
              "unsafeName": "LOOK_UP_INSTITUTION_BY_LOCATOR",
              "safeName": "LOOK_UP_INSTITUTION_BY_LOCATOR"
            },
            "pascalCase": {
              "unsafeName": "LookUpInstitutionByLocator",
              "safeName": "LookUpInstitutionByLocator"
            }
          },
          "path": {
            "head": "/institutionByLocator",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "locator",
                  "camelCase": {
                    "unsafeName": "locator",
                    "safeName": "locator"
                  },
                  "snakeCase": {
                    "unsafeName": "locator",
                    "safeName": "locator"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LOCATOR",
                    "safeName": "LOCATOR"
                  },
                  "pascalCase": {
                    "unsafeName": "Locator",
                    "safeName": "Locator"
                  }
                },
                "wireValue": "locator"
              },
              "docs": "The financial institution lookup key (routing number, IBAN, or SWIFT/BIC), as indicated by the `locatorType` query parameter.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {
                      "maxLength": 36
                    },
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "locatorType",
                  "camelCase": {
                    "unsafeName": "locatorType",
                    "safeName": "locatorType"
                  },
                  "snakeCase": {
                    "unsafeName": "locator_type",
                    "safeName": "locator_type"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LOCATOR_TYPE",
                    "safeName": "LOCATOR_TYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "LocatorType",
                    "safeName": "LocatorType"
                  }
                },
                "wireValue": "locatorType"
              },
              "docs": "Indicates what type of value the `locator` query parameter is.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "institutionLocatorType",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "countryCode",
                  "camelCase": {
                    "unsafeName": "countryCode",
                    "safeName": "countryCode"
                  },
                  "snakeCase": {
                    "unsafeName": "country_code",
                    "safeName": "country_code"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "COUNTRY_CODE",
                    "safeName": "COUNTRY_CODE"
                  },
                  "pascalCase": {
                    "unsafeName": "CountryCode",
                    "safeName": "CountryCode"
                  }
                },
                "wireValue": "countryCode"
              },
              "docs": "The country code in which to search for institutions. For the US, the `locatorType` must be `abaRoutingNumber`. For non-US countries, the `locatorType` must be `swiftBicCode` or `ibanAccountNumber`.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {
                      "minLength": 2,
                      "maxLength": 2
                    },
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "includeIntermediaryInstitutions",
                  "camelCase": {
                    "unsafeName": "includeIntermediaryInstitutions",
                    "safeName": "includeIntermediaryInstitutions"
                  },
                  "snakeCase": {
                    "unsafeName": "include_intermediary_institutions",
                    "safeName": "include_intermediary_institutions"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "INCLUDE_INTERMEDIARY_INSTITUTIONS",
                    "safeName": "INCLUDE_INTERMEDIARY_INSTITUTIONS"
                  },
                  "pascalCase": {
                    "unsafeName": "IncludeIntermediaryInstitutions",
                    "safeName": "IncludeIntermediaryInstitutions"
                  }
                },
                "wireValue": "includeIntermediaryInstitutions"
              },
              "docs": "If looking up a beneficiary institution for a wire transfer beneficiary institution, request the response also include a list of intermediary institutions.",
              "valueType": {
                "primitive": {
                  "v1": "BOOLEAN",
                  "v2": {
                    "type": "boolean"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            }
          ],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "institutionLookupResult",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Look up a financial institution by their country code and either [American Bankers Association routing number](https://www.aba.com/about-us/routing-number), by [International Bank Account Number (IBAN)](https://www.ecbs.org/iban.htm), or by [SWIFT Business Identifier Code (BIC) code](https://www.swift.com/standards/data-standards/bic-business-identifier-code). Optionally, include a list of intermediary institutions that may be necessary to complete international wire transfers.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/institutionByLocator",
            "parts": []
          },
          "allPathParameters": []
        },
        {
          "id": "institutions.listTransferSchedule",
          "displayName": "Return this institution's list of upcoming transfer schedule dates",
          "method": "GET",
          "name": {
            "originalName": "listTransferSchedule",
            "camelCase": {
              "unsafeName": "listTransferSchedule",
              "safeName": "listTransferSchedule"
            },
            "snakeCase": {
              "unsafeName": "list_transfer_schedule",
              "safeName": "list_transfer_schedule"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_TRANSFER_SCHEDULE",
              "safeName": "LIST_TRANSFER_SCHEDULE"
            },
            "pascalCase": {
              "unsafeName": "ListTransferSchedule",
              "safeName": "ListTransferSchedule"
            }
          },
          "path": {
            "head": "/institutions/",
            "parts": [
              {
                "pathParameter": "institutionId",
                "tail": "/transferSchedule"
              }
            ]
          },
          "pathParameters": [
            {
              "name": {
                "originalName": "institutionId",
                "camelCase": {
                  "unsafeName": "institutionId",
                  "safeName": "institutionId"
                },
                "snakeCase": {
                  "unsafeName": "institution_id",
                  "safeName": "institution_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INSTITUTION_ID",
                  "safeName": "INSTITUTION_ID"
                },
                "pascalCase": {
                  "unsafeName": "InstitutionId",
                  "safeName": "InstitutionId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "startsOn",
                  "camelCase": {
                    "unsafeName": "startsOn",
                    "safeName": "startsOn"
                  },
                  "snakeCase": {
                    "unsafeName": "starts_on",
                    "safeName": "starts_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "STARTS_ON",
                    "safeName": "STARTS_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "StartsOn",
                    "safeName": "StartsOn"
                  }
                },
                "wireValue": "startsOn"
              },
              "docs": "The date to use to begin calculations of the transfer schedule in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {
                      "format": "date"
                    },
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "endsOn",
                  "camelCase": {
                    "unsafeName": "endsOn",
                    "safeName": "endsOn"
                  },
                  "snakeCase": {
                    "unsafeName": "ends_on",
                    "safeName": "ends_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ENDS_ON",
                    "safeName": "ENDS_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "EndsOn",
                    "safeName": "EndsOn"
                  }
                },
                "wireValue": "endsOn"
              },
              "docs": "The date to use to conclude calculations of the transfer schedule in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {
                      "format": "date"
                    },
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "direction",
                  "camelCase": {
                    "unsafeName": "direction",
                    "safeName": "direction"
                  },
                  "snakeCase": {
                    "unsafeName": "direction",
                    "safeName": "direction"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DIRECTION",
                    "safeName": "DIRECTION"
                  },
                  "pascalCase": {
                    "unsafeName": "Direction",
                    "safeName": "Direction"
                  }
                },
                "wireValue": "direction"
              },
              "docs": "The direction of the transfer from the institution to the customer used for adjusting transfer dates due to banking holidays. For `debit`, dates are adjusted to the next business day. For `credit`, dates are adjusted to the previous business day.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "transferScheduleDirection",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "count",
                  "camelCase": {
                    "unsafeName": "count",
                    "safeName": "count"
                  },
                  "snakeCase": {
                    "unsafeName": "count",
                    "safeName": "count"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "COUNT",
                    "safeName": "COUNT"
                  },
                  "pascalCase": {
                    "unsafeName": "Count",
                    "safeName": "Count"
                  }
                },
                "wireValue": "count"
              },
              "docs": "The maximum amount of dates to calculate and include in the response. If an end date is provided, the total count may be lower than the requested count.",
              "valueType": {
                "primitive": {
                  "v1": "INTEGER",
                  "v2": {
                    "default": 6,
                    "validation": {
                      "max": 12,
                      "min": 1
                    },
                    "type": "integer"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "frequency",
                  "camelCase": {
                    "unsafeName": "frequency",
                    "safeName": "frequency"
                  },
                  "snakeCase": {
                    "unsafeName": "frequency",
                    "safeName": "frequency"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "FREQUENCY",
                    "safeName": "FREQUENCY"
                  },
                  "pascalCase": {
                    "unsafeName": "Frequency",
                    "safeName": "Frequency"
                  }
                },
                "wireValue": "frequency"
              },
              "docs": "The interval at which the money movement recurs.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "transferFrequency",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            }
          ],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "transferSchedules",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a transfer schedule list for this institution.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/institutions/",
            "parts": [
              {
                "pathParameter": "institutionId",
                "tail": "/transferSchedule"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": {
                "originalName": "institutionId",
                "camelCase": {
                  "unsafeName": "institutionId",
                  "safeName": "institutionId"
                },
                "snakeCase": {
                  "unsafeName": "institution_id",
                  "safeName": "institution_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INSTITUTION_ID",
                  "safeName": "INSTITUTION_ID"
                },
                "pascalCase": {
                  "unsafeName": "InstitutionId",
                  "safeName": "InstitutionId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ]
        },
        {
          "id": "institutions.getCutoffTimes",
          "displayName": "Return the financial institution's cutoff times for products",
          "method": "GET",
          "name": {
            "originalName": "getCutoffTimes",
            "camelCase": {
              "unsafeName": "getCutoffTimes",
              "safeName": "getCutoffTimes"
            },
            "snakeCase": {
              "unsafeName": "get_cutoff_times",
              "safeName": "get_cutoff_times"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET_CUTOFF_TIMES",
              "safeName": "GET_CUTOFF_TIMES"
            },
            "pascalCase": {
              "unsafeName": "GetCutoffTimes",
              "safeName": "GetCutoffTimes"
            }
          },
          "path": {
            "head": "/institutions/",
            "parts": [
              {
                "pathParameter": "institutionId",
                "tail": "/cutoffTimes"
              }
            ]
          },
          "pathParameters": [
            {
              "name": {
                "originalName": "institutionId",
                "camelCase": {
                  "unsafeName": "institutionId",
                  "safeName": "institutionId"
                },
                "snakeCase": {
                  "unsafeName": "institution_id",
                  "safeName": "institution_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INSTITUTION_ID",
                  "safeName": "INSTITUTION_ID"
                },
                "pascalCase": {
                  "unsafeName": "InstitutionId",
                  "safeName": "InstitutionId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "timeZoneId",
                  "camelCase": {
                    "unsafeName": "timeZoneId",
                    "safeName": "timeZoneId"
                  },
                  "snakeCase": {
                    "unsafeName": "time_zone_id",
                    "safeName": "time_zone_id"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TIME_ZONE_ID",
                    "safeName": "TIME_ZONE_ID"
                  },
                  "pascalCase": {
                    "unsafeName": "TimeZoneId",
                    "safeName": "TimeZoneId"
                  }
                },
                "wireValue": "timeZoneId"
              },
              "docs": "Identifies the time zone for formatting time values in the response. If omitted, time values are formatting in the local timezone of the financial institution.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "timeZoneId",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            }
          ],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "cutoffTimes",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return daily cutoff times for different money movement processes at a financial institution. Money movement requests (account to account transfers, ACH, wire transfers, etc.) must be submitted before the cutoff time in order for the financial institution to begin processing the request that day. Some [cutoff time types](#schema-cutoffTimeType) may have multiple cutoff times per day.\n\nCutoff times are very slowly changing data. This is a _conditional operation_ when the `If-None-Match` header is used. If the client has a `getCutoffTimes` response and the `ETag` returned from a previous call to this operation, this operation returns a 304 Not Modified when called again if the cutoff times have not changed.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/institutions/",
            "parts": [
              {
                "pathParameter": "institutionId",
                "tail": "/cutoffTimes"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": {
                "originalName": "institutionId",
                "camelCase": {
                  "unsafeName": "institutionId",
                  "safeName": "institutionId"
                },
                "snakeCase": {
                  "unsafeName": "institution_id",
                  "safeName": "institution_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INSTITUTION_ID",
                  "safeName": "INSTITUTION_ID"
                },
                "pascalCase": {
                  "unsafeName": "InstitutionId",
                  "safeName": "InstitutionId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ]
        },
        {
          "id": "institutions.getTransferDateRestrictions",
          "displayName": "Return the financial institution's transfer dates restrictions",
          "method": "GET",
          "name": {
            "originalName": "getTransferDateRestrictions",
            "camelCase": {
              "unsafeName": "getTransferDateRestrictions",
              "safeName": "getTransferDateRestrictions"
            },
            "snakeCase": {
              "unsafeName": "get_transfer_date_restrictions",
              "safeName": "get_transfer_date_restrictions"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET_TRANSFER_DATE_RESTRICTIONS",
              "safeName": "GET_TRANSFER_DATE_RESTRICTIONS"
            },
            "pascalCase": {
              "unsafeName": "GetTransferDateRestrictions",
              "safeName": "GetTransferDateRestrictions"
            }
          },
          "path": {
            "head": "/institutions/",
            "parts": [
              {
                "pathParameter": "institutionId",
                "tail": "/transferDateRestrictions"
              }
            ]
          },
          "pathParameters": [
            {
              "name": {
                "originalName": "institutionId",
                "camelCase": {
                  "unsafeName": "institutionId",
                  "safeName": "institutionId"
                },
                "snakeCase": {
                  "unsafeName": "institution_id",
                  "safeName": "institution_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INSTITUTION_ID",
                  "safeName": "INSTITUTION_ID"
                },
                "pascalCase": {
                  "unsafeName": "InstitutionId",
                  "safeName": "InstitutionId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "startsOn",
                  "camelCase": {
                    "unsafeName": "startsOn",
                    "safeName": "startsOn"
                  },
                  "snakeCase": {
                    "unsafeName": "starts_on",
                    "safeName": "starts_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "STARTS_ON",
                    "safeName": "STARTS_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "StartsOn",
                    "safeName": "StartsOn"
                  }
                },
                "wireValue": "startsOn"
              },
              "docs": "The start of the range of dates to include in the response, in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. While start dates far in the future are allowed, bank holiday schedules are only available for a small number of years ahead. The default is the current date.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {
                      "format": "date"
                    },
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "endsOn",
                  "camelCase": {
                    "unsafeName": "endsOn",
                    "safeName": "endsOn"
                  },
                  "snakeCase": {
                    "unsafeName": "ends_on",
                    "safeName": "ends_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "ENDS_ON",
                    "safeName": "ENDS_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "EndsOn",
                    "safeName": "EndsOn"
                  }
                },
                "wireValue": "endsOn"
              },
              "docs": "The end of the range of dates to include in the response. in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. The default is at least one year from the `startOn` date and is limited to a four year interval.",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {
                      "format": "date"
                    },
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "type",
                  "camelCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "snakeCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TYPE",
                    "safeName": "TYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "Type",
                    "safeName": "Type"
                  }
                },
                "wireValue": "type"
              },
              "docs": "Describes the type of transfer. This determines what business rules and adjustments to make to the date restrictions. Note ACH transfers (including CTX and PPD), that `Credit` and `Debit` here are relative to the account at the _external_ financial institution.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "transferTypeForDateRestrictions",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "risk",
                  "camelCase": {
                    "unsafeName": "risk",
                    "safeName": "risk"
                  },
                  "snakeCase": {
                    "unsafeName": "risk",
                    "safeName": "risk"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "RISK",
                    "safeName": "RISK"
                  },
                  "pascalCase": {
                    "unsafeName": "Risk",
                    "safeName": "Risk"
                  }
                },
                "wireValue": "risk"
              },
              "docs": "The primary account's risk level. This determines what business rules and adjustments to make to the date restrictions. This parameter only applies to ACH credit transfers (funds credited to an external account) and is ignored for others.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "achAccountRisk",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            }
          ],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "transferDateRestrictions",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return the transfer date restrictions for a date range and transfer parameters. The result is a list of days and dates that the financial institution does not allow scheduling specific types of transfers.\n\nThis information provides hints to clients, allowing bank customers to select transfer dates from a calendar picker. However, these dates are not strictly enforced; a transfer can still be scheduled to occur on restricted dates but the financial institution may shift the date when funds are drafted to account for holidays, closures, or to adjust based on the risk level of the funding account.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/institutions/",
            "parts": [
              {
                "pathParameter": "institutionId",
                "tail": "/transferDateRestrictions"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": {
                "originalName": "institutionId",
                "camelCase": {
                  "unsafeName": "institutionId",
                  "safeName": "institutionId"
                },
                "snakeCase": {
                  "unsafeName": "institution_id",
                  "safeName": "institution_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "INSTITUTION_ID",
                  "safeName": "INSTITUTION_ID"
                },
                "pascalCase": {
                  "unsafeName": "InstitutionId",
                  "safeName": "InstitutionId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ]
        }
      ]
    },
    "transactions": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "transactions",
              "camelCase": {
                "unsafeName": "transactions",
                "safeName": "transactions"
              },
              "snakeCase": {
                "unsafeName": "transactions",
                "safeName": "transactions"
              },
              "screamingSnakeCase": {
                "unsafeName": "TRANSACTIONS",
                "safeName": "TRANSACTIONS"
              },
              "pascalCase": {
                "unsafeName": "Transactions",
                "safeName": "Transactions"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "transactions",
            "camelCase": {
              "unsafeName": "transactions",
              "safeName": "transactions"
            },
            "snakeCase": {
              "unsafeName": "transactions",
              "safeName": "transactions"
            },
            "screamingSnakeCase": {
              "unsafeName": "TRANSACTIONS",
              "safeName": "TRANSACTIONS"
            },
            "pascalCase": {
              "unsafeName": "Transactions",
              "safeName": "Transactions"
            }
          }
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "id": "transactions.listTransactions",
          "displayName": "Return a collection of transactions",
          "method": "GET",
          "name": {
            "originalName": "listTransactions",
            "camelCase": {
              "unsafeName": "listTransactions",
              "safeName": "listTransactions"
            },
            "snakeCase": {
              "unsafeName": "list_transactions",
              "safeName": "list_transactions"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_TRANSACTIONS",
              "safeName": "LIST_TRANSACTIONS"
            },
            "pascalCase": {
              "unsafeName": "ListTransactions",
              "safeName": "ListTransactions"
            }
          },
          "path": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/transactions"
              }
            ]
          },
          "pathParameters": [
            {
              "name": {
                "originalName": "accountId",
                "camelCase": {
                  "unsafeName": "accountId",
                  "safeName": "accountId"
                },
                "snakeCase": {
                  "unsafeName": "account_id",
                  "safeName": "account_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACCOUNT_ID",
                  "safeName": "ACCOUNT_ID"
                },
                "pascalCase": {
                  "unsafeName": "AccountId",
                  "safeName": "AccountId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "limit",
                  "camelCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "snakeCase": {
                    "unsafeName": "limit",
                    "safeName": "limit"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "LIMIT",
                    "safeName": "LIMIT"
                  },
                  "pascalCase": {
                    "unsafeName": "Limit",
                    "safeName": "Limit"
                  }
                },
                "wireValue": "limit"
              },
              "docs": "The maximum number of items to return in this paged response.",
              "valueType": {
                "primitive": {
                  "v1": "INTEGER",
                  "v2": {
                    "default": 100,
                    "validation": {
                      "max": 10000,
                      "min": 0
                    },
                    "type": "integer"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "occurredOn",
                  "camelCase": {
                    "unsafeName": "occurredOn",
                    "safeName": "occurredOn"
                  },
                  "snakeCase": {
                    "unsafeName": "occurred_on",
                    "safeName": "occurred_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "OCCURRED_ON",
                    "safeName": "OCCURRED_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "OccurredOn",
                    "safeName": "OccurredOn"
                  }
                },
                "wireValue": "occurredOn"
              },
              "docs": "Return only transactions whose `occurredOn` date is in this date range. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. Each account has an implicit default transaction history range of _n_ days. This is normally 30 days but may be shorter for accounts with high activity. This _n_ day period is applied to any unbounded date ranges. The default date range is the most recent _n_ days. Example date ranges: <ul> <li> `2023-05-19` match transactions occurring on May 19, 2023.</li> <li> `[2023-05-01,2023-05-31]` match transactions occurring between May 1 and 31, 2023, inclusive</li> <li> `[2023-05-01,2023-06-01)` match transactions occurring in May, 2023 (on or after May 1, but before June 1)</li> <li> `[2023-05-09,]` match transactions _n_ days on or after May 9, 2023</li> <li> `(2023-05-09,)` match transactions _n_ days after May 9, 2023</li> <li> `[,2023-05-09]` match transactions _n_ days on or before May 9, 2023</li> <li> `(,2023-05-09)` match transactions _n_ days before but excluding May 9, 2023</li> </ul>",
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "validation": {
                      "pattern": "^\\d{4}-\\d{2}-\\d{2}|([[(](\\d{4}-\\d{2}-\\d{2},(\\d{4}-\\d{2}-\\d{2})?|,\\d{4}-\\d{2}-\\d{2})[)\\]])$"
                    },
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "posted",
                  "camelCase": {
                    "unsafeName": "posted",
                    "safeName": "posted"
                  },
                  "snakeCase": {
                    "unsafeName": "posted",
                    "safeName": "posted"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "POSTED",
                    "safeName": "POSTED"
                  },
                  "pascalCase": {
                    "unsafeName": "Posted",
                    "safeName": "Posted"
                  }
                },
                "wireValue": "posted"
              },
              "docs": "Limit transactions in the response based on the transaction's `posted` value. If `true`, include only posted transactions. If `false`, include only non-posted transactions. If omitted, do not filter based on `posted`. Note that using this filter excludes balance transactions because the `posted` property is not set on balance transactions, so neither `true` or `false` match them.",
              "valueType": {
                "primitive": {
                  "v1": "BOOLEAN",
                  "v2": {
                    "type": "boolean"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "createdOn",
                  "camelCase": {
                    "unsafeName": "createdOn",
                    "safeName": "createdOn"
                  },
                  "snakeCase": {
                    "unsafeName": "created_on",
                    "safeName": "created_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CREATED_ON",
                    "safeName": "CREATED_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "CreatedOn",
                    "safeName": "CreatedOn"
                  }
                },
                "wireValue": "createdOn"
              },
              "docs": "Return only transactions whose `createdOn` date is in this date range. Example date ranges are the same format as the `occurredOn` query parameter.<br>**Warning**: The parameter `createdOn` was deprecated on version `v0.6.0` of the API. Use the `?occurredOn=` query parameter instead. `createdOn` will be removed on version `v0.9.0` of the API.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "dateRange",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false,
              "availability": {
                "status": "DEPRECATED"
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "postedOn",
                  "camelCase": {
                    "unsafeName": "postedOn",
                    "safeName": "postedOn"
                  },
                  "snakeCase": {
                    "unsafeName": "posted_on",
                    "safeName": "posted_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "POSTED_ON",
                    "safeName": "POSTED_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "PostedOn",
                    "safeName": "PostedOn"
                  }
                },
                "wireValue": "postedOn"
              },
              "docs": "Return only transactions whose `postedOn` date is in this date range. Example date ranges are the same format as the `occurredOn` query parameter.<br>**Warning**: The parameter `postedOn` was deprecated on version `v0.6.0` of the API. Use the `?occurredOn=` query parameter instead. `postedOn` will be removed on version `v0.9.0` of the API.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "dateRange",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false,
              "availability": {
                "status": "DEPRECATED"
              }
            },
            {
              "name": {
                "name": {
                  "originalName": "category",
                  "camelCase": {
                    "unsafeName": "category",
                    "safeName": "category"
                  },
                  "snakeCase": {
                    "unsafeName": "category",
                    "safeName": "category"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CATEGORY",
                    "safeName": "CATEGORY"
                  },
                  "pascalCase": {
                    "unsafeName": "Category",
                    "safeName": "Category"
                  }
                },
                "wireValue": "category"
              },
              "docs": "Filter transactions to only those whose `category` is in this pipe-separated list. Categories are set by a transaction cleansing service or assigned by the account holder. Categories can include names such as `\"Shopping\"`, `\"Deposit\"`, `\"Bill\"`, `\"Transfer\"`, or `\"Other\"`.",
              "valueType": {
                "container": {
                  "list": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "",
                      "camelCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "snakeCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "pascalCase": {
                        "unsafeName": "",
                        "safeName": ""
                      }
                    },
                    "typeId": "transactionCategoryLabel",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "list"
                },
                "type": "container"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "type",
                  "camelCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "snakeCase": {
                    "unsafeName": "type",
                    "safeName": "type_"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "TYPE",
                    "safeName": "TYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "Type",
                    "safeName": "Type"
                  }
                },
                "wireValue": "type"
              },
              "docs": "Filter transactions to only those whose `type` is in this pipe-separated list.",
              "valueType": {
                "container": {
                  "list": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "",
                      "camelCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "snakeCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "pascalCase": {
                        "unsafeName": "",
                        "safeName": ""
                      }
                    },
                    "typeId": "transactionType",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "list"
                },
                "type": "container"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "subtype",
                  "camelCase": {
                    "unsafeName": "subtype",
                    "safeName": "subtype"
                  },
                  "snakeCase": {
                    "unsafeName": "subtype",
                    "safeName": "subtype"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "SUBTYPE",
                    "safeName": "SUBTYPE"
                  },
                  "pascalCase": {
                    "unsafeName": "Subtype",
                    "safeName": "Subtype"
                  }
                },
                "wireValue": "subtype"
              },
              "docs": "Filter transactions to only those whose `subtype` is in this pipe-separated list.",
              "valueType": {
                "container": {
                  "list": {
                    "fernFilepath": {
                      "allParts": [],
                      "packagePath": []
                    },
                    "name": {
                      "originalName": "",
                      "camelCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "snakeCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "screamingSnakeCase": {
                        "unsafeName": "",
                        "safeName": ""
                      },
                      "pascalCase": {
                        "unsafeName": "",
                        "safeName": ""
                      }
                    },
                    "typeId": "transactionSubType",
                    "inline": false,
                    "type": "named"
                  },
                  "type": "list"
                },
                "type": "container"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "amount",
                  "camelCase": {
                    "unsafeName": "amount",
                    "safeName": "amount"
                  },
                  "snakeCase": {
                    "unsafeName": "amount",
                    "safeName": "amount"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "AMOUNT",
                    "safeName": "AMOUNT"
                  },
                  "pascalCase": {
                    "unsafeName": "Amount",
                    "safeName": "Amount"
                  }
                },
                "wireValue": "amount"
              },
              "docs": "Return only transactions whose `amount` is in this numeric range. This compares only the absolute value of the transaction. That is, the value `[1000.00,1100.00)` matches either a debit of `-1070.25` or a credit of `1021.90`.<br> Some examples of specifying an amount range: <ul> <li>`1200.50` match the dollar amount 1,200.50 exactly</li> <li>`[1000.00,1200.00)` matches items where `1000.00 <= amount < 1200.00`</li> <li>`[1000.00,1199.99]` matches items where `1000.00 <= amount <= 1199.99`</li> <li>`(999.99,1200.00]` matches items where `999.99 < amount <= 1200.00`</li> <li>`[1200.50,]` matches items where `amount >= 1200.50`</li> <li>`(1200.50,)` matches items where `amount > 1200.50`</li> <li>`[,1200.50]` matches items where `amount <= 1200.50`</li> <li>`(,1200.50)` matches items where `amount < 1200.50`</li> </ul>",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "amountRange",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "checkNumber",
                  "camelCase": {
                    "unsafeName": "checkNumber",
                    "safeName": "checkNumber"
                  },
                  "snakeCase": {
                    "unsafeName": "check_number",
                    "safeName": "check_number"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CHECK_NUMBER",
                    "safeName": "CHECK_NUMBER"
                  },
                  "pascalCase": {
                    "unsafeName": "CheckNumber",
                    "safeName": "CheckNumber"
                  }
                },
                "wireValue": "checkNumber"
              },
              "docs": "Return only transactions whose `check.number` is in this integer range. Examples: <ul> <li>`1200` match the integer 1,200 exactly</li> <li>`[1000,1200)` matches items where `1000 <= number < 1200`</li> <li>`[1000,1199]` matches items where `1000 <= number <= 1199`</li> <li>`(999,1200]` matches items where `999 < number <= 1200`</li> <li>`[1200,]` matches items where `number >= 1200`</li> <li>`(1200,)` matches items where `number > 1200`</li> <li>`[,1200]` matches items where `number <= 1200`</li> <li>`(,1200)` matches items where `number < 1200`</li> </ul>",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "checkNumberRange",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "retryCount",
                  "camelCase": {
                    "unsafeName": "retryCount",
                    "safeName": "retryCount"
                  },
                  "snakeCase": {
                    "unsafeName": "retry_count",
                    "safeName": "retry_count"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "RETRY_COUNT",
                    "safeName": "RETRY_COUNT"
                  },
                  "pascalCase": {
                    "unsafeName": "RetryCount",
                    "safeName": "RetryCount"
                  }
                },
                "wireValue": "retryCount"
              },
              "docs": "When retrying the operation, pass the `retryCount` from the `incompleteTransactions` response.",
              "valueType": {
                "primitive": {
                  "v1": "DOUBLE",
                  "v2": {
                    "validation": {
                      "max": 10,
                      "min": 1
                    },
                    "type": "double"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            }
          ],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "transactions",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination) collection of transaction history for this internal account. The [`nextPage_url`](https://dx.apiture.com/docs/api-documentation/concepts/links) link in the response, if present, is a pagination link to the next page of transactions for the given filters.\n\nThis operation returns a 403 Forbidden error if the customer does not have `view` permissions in the `account.allows` object, or a 422 Unprocessable Entity if called on an external account.\n\nThe default response lists only recent transactions. Normally, this is transactions for the most recent 30 days, although for high-volume accounts, it may be a shorter period.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/accounts/",
            "parts": [
              {
                "pathParameter": "accountId",
                "tail": "/transactions"
              }
            ]
          },
          "allPathParameters": [
            {
              "name": {
                "originalName": "accountId",
                "camelCase": {
                  "unsafeName": "accountId",
                  "safeName": "accountId"
                },
                "snakeCase": {
                  "unsafeName": "account_id",
                  "safeName": "account_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "ACCOUNT_ID",
                  "safeName": "ACCOUNT_ID"
                },
                "pascalCase": {
                  "unsafeName": "AccountId",
                  "safeName": "AccountId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ]
        }
      ]
    },
    "transactionCategories": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "transactionCategories",
              "camelCase": {
                "unsafeName": "transactionCategories",
                "safeName": "transactionCategories"
              },
              "snakeCase": {
                "unsafeName": "transaction_categories",
                "safeName": "transaction_categories"
              },
              "screamingSnakeCase": {
                "unsafeName": "TRANSACTION_CATEGORIES",
                "safeName": "TRANSACTION_CATEGORIES"
              },
              "pascalCase": {
                "unsafeName": "TransactionCategories",
                "safeName": "TransactionCategories"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "transactionCategories",
            "camelCase": {
              "unsafeName": "transactionCategories",
              "safeName": "transactionCategories"
            },
            "snakeCase": {
              "unsafeName": "transaction_categories",
              "safeName": "transaction_categories"
            },
            "screamingSnakeCase": {
              "unsafeName": "TRANSACTION_CATEGORIES",
              "safeName": "TRANSACTION_CATEGORIES"
            },
            "pascalCase": {
              "unsafeName": "TransactionCategories",
              "safeName": "TransactionCategories"
            }
          }
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "id": "transactionCategories.listTransactionCategories",
          "displayName": "Return a collection of transaction categories",
          "method": "GET",
          "name": {
            "originalName": "listTransactionCategories",
            "camelCase": {
              "unsafeName": "listTransactionCategories",
              "safeName": "listTransactionCategories"
            },
            "snakeCase": {
              "unsafeName": "list_transaction_categories",
              "safeName": "list_transaction_categories"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_TRANSACTION_CATEGORIES",
              "safeName": "LIST_TRANSACTION_CATEGORIES"
            },
            "pascalCase": {
              "unsafeName": "ListTransactionCategories",
              "safeName": "ListTransactionCategories"
            }
          },
          "path": {
            "head": "/transactionCategories",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "transactionCategories",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a collection of transaction categories. The response is limited to 1,000 categories.\n\nThis is a _conditional operation_ when the `If-None-Match` header is used. If the client has a `transactionCategories` response and the `ETag` returned from a previous call, this operation returns a 304 Not Modified if called again when the categories collection has not changed.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/transactionCategories",
            "parts": []
          },
          "allPathParameters": []
        }
      ]
    },
    "transfers": {
      "name": {
        "fernFilepath": {
          "allParts": [
            {
              "originalName": "transfers",
              "camelCase": {
                "unsafeName": "transfers",
                "safeName": "transfers"
              },
              "snakeCase": {
                "unsafeName": "transfers",
                "safeName": "transfers"
              },
              "screamingSnakeCase": {
                "unsafeName": "TRANSFERS",
                "safeName": "TRANSFERS"
              },
              "pascalCase": {
                "unsafeName": "Transfers",
                "safeName": "Transfers"
              }
            }
          ],
          "packagePath": [],
          "file": {
            "originalName": "transfers",
            "camelCase": {
              "unsafeName": "transfers",
              "safeName": "transfers"
            },
            "snakeCase": {
              "unsafeName": "transfers",
              "safeName": "transfers"
            },
            "screamingSnakeCase": {
              "unsafeName": "TRANSFERS",
              "safeName": "TRANSFERS"
            },
            "pascalCase": {
              "unsafeName": "Transfers",
              "safeName": "Transfers"
            }
          }
        }
      },
      "basePath": {
        "head": "",
        "parts": []
      },
      "headers": [],
      "pathParameters": [],
      "endpoints": [
        {
          "id": "transfers.listTransfers",
          "displayName": "Return a collection of transfers",
          "method": "GET",
          "name": {
            "originalName": "listTransfers",
            "camelCase": {
              "unsafeName": "listTransfers",
              "safeName": "listTransfers"
            },
            "snakeCase": {
              "unsafeName": "list_transfers",
              "safeName": "list_transfers"
            },
            "screamingSnakeCase": {
              "unsafeName": "LIST_TRANSFERS",
              "safeName": "LIST_TRANSFERS"
            },
            "pascalCase": {
              "unsafeName": "ListTransfers",
              "safeName": "ListTransfers"
            }
          },
          "path": {
            "head": "/transfers",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [
            {
              "name": {
                "name": {
                  "originalName": "scheduledOn",
                  "camelCase": {
                    "unsafeName": "scheduledOn",
                    "safeName": "scheduledOn"
                  },
                  "snakeCase": {
                    "unsafeName": "scheduled_on",
                    "safeName": "scheduled_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "SCHEDULED_ON",
                    "safeName": "SCHEDULED_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "ScheduledOn",
                    "safeName": "ScheduledOn"
                  }
                },
                "wireValue": "scheduledOn"
              },
              "docs": "Return only transactions whose `schedule.scheduledOn` date is in this date range. Excludes any transfers that do not have a `scheduledOn` date. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. Example date ranges: <ul> <li> `2022-05-19` match only transfers scheduled on May 19, 2022.</li> <li> `[2022-05-01,2022-06-01)` in May, 2022: on or after May 1, but _before_ June 1</li> <li> `(2022-05-01,2022-06-01)` in May, 2022 (on or after May 1, but before June 1)</li> <li> `[2022-05-09,]` on or after May 9, 2022</li> <li> `(2022-05-09,)` after May 9, 2022</li> <li> `[,2022-05-09]` on or before May 9, 2022</li> <li> `(,2022-05-09)` before May 9, 2022</li> </ul>",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "dateRange",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "debitsOn",
                  "camelCase": {
                    "unsafeName": "debitsOn",
                    "safeName": "debitsOn"
                  },
                  "snakeCase": {
                    "unsafeName": "debits_on",
                    "safeName": "debits_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "DEBITS_ON",
                    "safeName": "DEBITS_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "DebitsOn",
                    "safeName": "DebitsOn"
                  }
                },
                "wireValue": "debitsOn"
              },
              "docs": "Return only transactions whose `schedule.debitsOn` date (when the funds are debited from the source account) is in this date range. Excludes any transfers that do not have a `scheduledOn` date. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. See the `scheduledOn` query parameter for examples.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "dateRange",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "creditsOn",
                  "camelCase": {
                    "unsafeName": "creditsOn",
                    "safeName": "creditsOn"
                  },
                  "snakeCase": {
                    "unsafeName": "credits_on",
                    "safeName": "credits_on"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "CREDITS_ON",
                    "safeName": "CREDITS_ON"
                  },
                  "pascalCase": {
                    "unsafeName": "CreditsOn",
                    "safeName": "CreditsOn"
                  }
                },
                "wireValue": "creditsOn"
              },
              "docs": "Return only transactions whose `schedule.creditsOn` (when the funds are credited to  the target account) is in this date range. Excludes any transfers that do not have a `scheduledOn` date. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. See the `scheduledOn` query parameter for examples.",
              "valueType": {
                "fernFilepath": {
                  "allParts": [],
                  "packagePath": []
                },
                "name": {
                  "originalName": "",
                  "camelCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "snakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "",
                    "safeName": ""
                  },
                  "pascalCase": {
                    "unsafeName": "",
                    "safeName": ""
                  }
                },
                "typeId": "dateRange",
                "inline": false,
                "type": "named"
              },
              "allowMultiple": false
            },
            {
              "name": {
                "name": {
                  "originalName": "historical",
                  "camelCase": {
                    "unsafeName": "historical",
                    "safeName": "historical"
                  },
                  "snakeCase": {
                    "unsafeName": "historical",
                    "safeName": "historical"
                  },
                  "screamingSnakeCase": {
                    "unsafeName": "HISTORICAL",
                    "safeName": "HISTORICAL"
                  },
                  "pascalCase": {
                    "unsafeName": "Historical",
                    "safeName": "Historical"
                  }
                },
                "wireValue": "historical"
              },
              "docs": "If `true`, list only historical (`state` is `processed`) transfers. If `false`, list only transfers that have not yet finished processing. If omitted, list all transfers.",
              "valueType": {
                "primitive": {
                  "v1": "BOOLEAN",
                  "v2": {
                    "type": "boolean"
                  }
                },
                "type": "primitive"
              },
              "allowMultiple": false
            }
          ],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "transfers",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return a [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination) collection of transfers. The [nextPage_url](https://dx.apiture.com/docs/api-documentation/concepts/links) in the response is a pagination link.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/transfers",
            "parts": []
          },
          "allPathParameters": []
        },
        {
          "id": "transfers.createTransfer",
          "displayName": "Create a new transfer",
          "method": "POST",
          "name": {
            "originalName": "createTransfer",
            "camelCase": {
              "unsafeName": "createTransfer",
              "safeName": "createTransfer"
            },
            "snakeCase": {
              "unsafeName": "create_transfer",
              "safeName": "create_transfer"
            },
            "screamingSnakeCase": {
              "unsafeName": "CREATE_TRANSFER",
              "safeName": "CREATE_TRANSFER"
            },
            "pascalCase": {
              "unsafeName": "CreateTransfer",
              "safeName": "CreateTransfer"
            }
          },
          "path": {
            "head": "/transfers",
            "parts": []
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "requestBody": {
            "contentType": "application/json",
            "docs": "The data necessary to create a new transfer.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "newTransfer",
              "inline": false,
              "type": "named"
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 201,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "transfer",
                  "inline": false,
                  "type": "named"
                },
                "docs": "Created.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Create a new transfer within the transfers collection. If all the necessary properties are set, the transfer is queued for processing. If the request omits the `schedule.scheduledOn` date, the transfer remains pending/unscheduled until the user sets it via the [`patchTransfer`](#op-patchTransfer) operation.\n\nNote: This operation requires an identity challenge if the financial institution requires the user to proove their identity for some types of transfers. See the \"Challenges API\".",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/transfers",
            "parts": []
          },
          "allPathParameters": []
        },
        {
          "id": "transfers.getTransfer",
          "displayName": "Fetch a representation of this transfer",
          "method": "GET",
          "name": {
            "originalName": "getTransfer",
            "camelCase": {
              "unsafeName": "getTransfer",
              "safeName": "getTransfer"
            },
            "snakeCase": {
              "unsafeName": "get_transfer",
              "safeName": "get_transfer"
            },
            "screamingSnakeCase": {
              "unsafeName": "GET_TRANSFER",
              "safeName": "GET_TRANSFER"
            },
            "pascalCase": {
              "unsafeName": "GetTransfer",
              "safeName": "GetTransfer"
            }
          },
          "path": {
            "head": "/transfers/",
            "parts": [
              {
                "pathParameter": "transferId",
                "tail": ""
              }
            ]
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "transfer",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Return the JSON representation of this transfer resource.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/transfers/",
            "parts": [
              {
                "pathParameter": "transferId",
                "tail": ""
              }
            ]
          },
          "allPathParameters": []
        },
        {
          "id": "transfers.deleteTransfer",
          "displayName": "Delete this transfer resource",
          "method": "DELETE",
          "name": {
            "originalName": "deleteTransfer",
            "camelCase": {
              "unsafeName": "deleteTransfer",
              "safeName": "deleteTransfer"
            },
            "snakeCase": {
              "unsafeName": "delete_transfer",
              "safeName": "delete_transfer"
            },
            "screamingSnakeCase": {
              "unsafeName": "DELETE_TRANSFER",
              "safeName": "DELETE_TRANSFER"
            },
            "pascalCase": {
              "unsafeName": "DeleteTransfer",
              "safeName": "DeleteTransfer"
            }
          },
          "path": {
            "head": "/transfers/",
            "parts": [
              {
                "pathParameter": "transferId",
                "tail": ""
              }
            ]
          },
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "errors": [],
          "auth": true,
          "docs": "Delete this transfer resource and any resources that are owned by it. Only transfers that have not been processed may be deleted.",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/transfers/",
            "parts": [
              {
                "pathParameter": "transferId",
                "tail": ""
              }
            ]
          },
          "allPathParameters": []
        },
        {
          "id": "transfers.patchTransfer",
          "displayName": "Update this transfer",
          "method": "PATCH",
          "name": {
            "originalName": "patchTransfer",
            "camelCase": {
              "unsafeName": "patchTransfer",
              "safeName": "patchTransfer"
            },
            "snakeCase": {
              "unsafeName": "patch_transfer",
              "safeName": "patch_transfer"
            },
            "screamingSnakeCase": {
              "unsafeName": "PATCH_TRANSFER",
              "safeName": "PATCH_TRANSFER"
            },
            "pascalCase": {
              "unsafeName": "PatchTransfer",
              "safeName": "PatchTransfer"
            }
          },
          "path": {
            "head": "/transfers/",
            "parts": [
              {
                "pathParameter": "transferId",
                "tail": ""
              }
            ]
          },
          "pathParameters": [
            {
              "name": {
                "originalName": "transferId",
                "camelCase": {
                  "unsafeName": "transferId",
                  "safeName": "transferId"
                },
                "snakeCase": {
                  "unsafeName": "transfer_id",
                  "safeName": "transfer_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TRANSFER_ID",
                  "safeName": "TRANSFER_ID"
                },
                "pascalCase": {
                  "unsafeName": "TransferId",
                  "safeName": "TransferId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ],
          "queryParameters": [],
          "headers": [],
          "requestBody": {
            "contentType": "application/merge-patch+json",
            "docs": "The fields to update within the transfer.",
            "requestBodyType": {
              "fernFilepath": {
                "allParts": [],
                "packagePath": []
              },
              "name": {
                "originalName": "",
                "camelCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "snakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "screamingSnakeCase": {
                  "unsafeName": "",
                  "safeName": ""
                },
                "pascalCase": {
                  "unsafeName": "",
                  "safeName": ""
                }
              },
              "typeId": "transferPatch",
              "inline": false,
              "type": "named"
            },
            "type": "reference"
          },
          "response": {
            "statusCode": 200,
            "body": {
              "value": {
                "responseBodyType": {
                  "fernFilepath": {
                    "allParts": [],
                    "packagePath": []
                  },
                  "name": {
                    "originalName": "",
                    "camelCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "snakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "screamingSnakeCase": {
                      "unsafeName": "",
                      "safeName": ""
                    },
                    "pascalCase": {
                      "unsafeName": "",
                      "safeName": ""
                    }
                  },
                  "typeId": "transfer",
                  "inline": false,
                  "type": "named"
                },
                "docs": "OK.",
                "type": "response"
              },
              "type": "json"
            }
          },
          "errors": [],
          "auth": true,
          "docs": "Perform a partial update of this transfer as per [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7396) format and processing rules. Only fields in the request body are updated on the resource; fields which are omitted are not updated.\n\nNote: This operation requires an identity challenge if the financial institution requires the user to prove their identity for some types of transfers. See the \"Challenges API\".",
          "userSpecifiedExamples": [],
          "autogeneratedExamples": [],
          "idempotent": false,
          "fullPath": {
            "head": "/transfers/",
            "parts": [
              {
                "pathParameter": "transferId",
                "tail": ""
              }
            ]
          },
          "allPathParameters": [
            {
              "name": {
                "originalName": "transferId",
                "camelCase": {
                  "unsafeName": "transferId",
                  "safeName": "transferId"
                },
                "snakeCase": {
                  "unsafeName": "transfer_id",
                  "safeName": "transfer_id"
                },
                "screamingSnakeCase": {
                  "unsafeName": "TRANSFER_ID",
                  "safeName": "TRANSFER_ID"
                },
                "pascalCase": {
                  "unsafeName": "TransferId",
                  "safeName": "TransferId"
                }
              },
              "valueType": {
                "primitive": {
                  "v1": "STRING",
                  "v2": {
                    "type": "string"
                  }
                },
                "type": "primitive"
              },
              "location": "ENDPOINT"
            }
          ]
        }
      ]
    }
  },
  "errors": {},
  "webhookGroups": {},
  "headers": [],
  "idempotencyHeaders": [],
  "pathParameters": [],
  "errorDiscriminationStrategy": {
    "type": "statusCode"
  },
  "variables": [],
  "serviceTypeReferenceInfo": {
    "sharedTypes": [],
    "typesReferencedOnlyByService": {}
  },
  "environments": {
    "defaultEnvironment": "default",
    "environments": {
      "environments": [
        {
          "id": "default",
          "name": {
            "originalName": "Default",
            "camelCase": {
              "unsafeName": "default",
              "safeName": "default_"
            },
            "snakeCase": {
              "unsafeName": "default",
              "safeName": "default_"
            },
            "screamingSnakeCase": {
              "unsafeName": "DEFAULT",
              "safeName": "DEFAULT"
            },
            "pascalCase": {
              "unsafeName": "Default",
              "safeName": "Default"
            }
          },
          "url": "https://api.apiture.com/banking"
        }
      ],
      "type": "singleBaseUrl"
    }
  },
  "rootPackage": {
    "fernFilepath": {
      "allParts": [],
      "packagePath": []
    },
    "types": [
      "accountIds",
      "accountAllowsFilter",
      "accountPermissions",
      "overdraftAccountFields",
      "accountLocation",
      "accountFields",
      "externalAccountVerificationMethod",
      "accountRoutingNumber",
      "accountNickname",
      "maskedAccountNumber",
      "fullAccountNumber",
      "accountBalance",
      "jointOwnerInvitationFields",
      "institutionLocatorType",
      "simpleInstitution",
      "timeZoneId",
      "cutoffTime",
      "cutoffTimeType",
      "transferScheduleDirection",
      "transferScheduleItem",
      "transferDateRestrictionType",
      "transferTypeForDateRestrictions",
      "transferDateRestriction",
      "transactionFields",
      "transactionMerchant",
      "transactionCheck",
      "transactionCategorization",
      "transactionCategoryLabel",
      "transactionType",
      "transactionSubType",
      "transactionCategoryType",
      "transferSchedule",
      "transferAccountReference",
      "transferFields",
      "transferState",
      "productType",
      "transferFrequency",
      "achAccountRisk",
      "dateRange",
      "amountRange",
      "resourceId",
      "productReference",
      "creditOrDebitValue",
      "readOnlyTimestamp",
      "positiveIntegerRange",
      "transferRecurrenceType",
      "monetaryValue",
      "timestampFields",
      "apiProblem",
      "achSecCode",
      "institutionId",
      "challengeToken",
      "requiredIdentityChallenge",
      "abstractPagedBodyFields",
      "addressFields",
      "challengeFactor",
      "challengeFactorType",
      "challengeSecurityQuestions",
      "challengeSecurityQuestion",
      "challengePromptId"
    ],
    "errors": [],
    "subpackages": [
      "accounts",
      "accountJointOwners",
      "overdraftProtection",
      "jointOwners",
      "institutions",
      "transactions",
      "transactionCategories",
      "transfers"
    ],
    "hasEndpointsInTree": false
  },
  "subpackages": {
    "accounts": {
      "name": {
        "originalName": "accounts",
        "camelCase": {
          "unsafeName": "accounts",
          "safeName": "accounts"
        },
        "snakeCase": {
          "unsafeName": "accounts",
          "safeName": "accounts"
        },
        "screamingSnakeCase": {
          "unsafeName": "ACCOUNTS",
          "safeName": "ACCOUNTS"
        },
        "pascalCase": {
          "unsafeName": "Accounts",
          "safeName": "Accounts"
        }
      },
      "fernFilepath": {
        "allParts": [],
        "packagePath": [],
        "file": {
          "originalName": "accounts",
          "camelCase": {
            "unsafeName": "accounts",
            "safeName": "accounts"
          },
          "snakeCase": {
            "unsafeName": "accounts",
            "safeName": "accounts"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNTS",
            "safeName": "ACCOUNTS"
          },
          "pascalCase": {
            "unsafeName": "Accounts",
            "safeName": "Accounts"
          }
        }
      },
      "service": "accounts",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "accountJointOwners": {
      "name": {
        "originalName": "accountJointOwners",
        "camelCase": {
          "unsafeName": "accountJointOwners",
          "safeName": "accountJointOwners"
        },
        "snakeCase": {
          "unsafeName": "account_joint_owners",
          "safeName": "account_joint_owners"
        },
        "screamingSnakeCase": {
          "unsafeName": "ACCOUNT_JOINT_OWNERS",
          "safeName": "ACCOUNT_JOINT_OWNERS"
        },
        "pascalCase": {
          "unsafeName": "AccountJointOwners",
          "safeName": "AccountJointOwners"
        }
      },
      "fernFilepath": {
        "allParts": [],
        "packagePath": [],
        "file": {
          "originalName": "accountJointOwners",
          "camelCase": {
            "unsafeName": "accountJointOwners",
            "safeName": "accountJointOwners"
          },
          "snakeCase": {
            "unsafeName": "account_joint_owners",
            "safeName": "account_joint_owners"
          },
          "screamingSnakeCase": {
            "unsafeName": "ACCOUNT_JOINT_OWNERS",
            "safeName": "ACCOUNT_JOINT_OWNERS"
          },
          "pascalCase": {
            "unsafeName": "AccountJointOwners",
            "safeName": "AccountJointOwners"
          }
        }
      },
      "service": "accountJointOwners",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "overdraftProtection": {
      "name": {
        "originalName": "overdraftProtection",
        "camelCase": {
          "unsafeName": "overdraftProtection",
          "safeName": "overdraftProtection"
        },
        "snakeCase": {
          "unsafeName": "overdraft_protection",
          "safeName": "overdraft_protection"
        },
        "screamingSnakeCase": {
          "unsafeName": "OVERDRAFT_PROTECTION",
          "safeName": "OVERDRAFT_PROTECTION"
        },
        "pascalCase": {
          "unsafeName": "OverdraftProtection",
          "safeName": "OverdraftProtection"
        }
      },
      "fernFilepath": {
        "allParts": [],
        "packagePath": [],
        "file": {
          "originalName": "overdraftProtection",
          "camelCase": {
            "unsafeName": "overdraftProtection",
            "safeName": "overdraftProtection"
          },
          "snakeCase": {
            "unsafeName": "overdraft_protection",
            "safeName": "overdraft_protection"
          },
          "screamingSnakeCase": {
            "unsafeName": "OVERDRAFT_PROTECTION",
            "safeName": "OVERDRAFT_PROTECTION"
          },
          "pascalCase": {
            "unsafeName": "OverdraftProtection",
            "safeName": "OverdraftProtection"
          }
        }
      },
      "service": "overdraftProtection",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "jointOwners": {
      "name": {
        "originalName": "jointOwners",
        "camelCase": {
          "unsafeName": "jointOwners",
          "safeName": "jointOwners"
        },
        "snakeCase": {
          "unsafeName": "joint_owners",
          "safeName": "joint_owners"
        },
        "screamingSnakeCase": {
          "unsafeName": "JOINT_OWNERS",
          "safeName": "JOINT_OWNERS"
        },
        "pascalCase": {
          "unsafeName": "JointOwners",
          "safeName": "JointOwners"
        }
      },
      "fernFilepath": {
        "allParts": [],
        "packagePath": [],
        "file": {
          "originalName": "jointOwners",
          "camelCase": {
            "unsafeName": "jointOwners",
            "safeName": "jointOwners"
          },
          "snakeCase": {
            "unsafeName": "joint_owners",
            "safeName": "joint_owners"
          },
          "screamingSnakeCase": {
            "unsafeName": "JOINT_OWNERS",
            "safeName": "JOINT_OWNERS"
          },
          "pascalCase": {
            "unsafeName": "JointOwners",
            "safeName": "JointOwners"
          }
        }
      },
      "service": "jointOwners",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "institutions": {
      "name": {
        "originalName": "institutions",
        "camelCase": {
          "unsafeName": "institutions",
          "safeName": "institutions"
        },
        "snakeCase": {
          "unsafeName": "institutions",
          "safeName": "institutions"
        },
        "screamingSnakeCase": {
          "unsafeName": "INSTITUTIONS",
          "safeName": "INSTITUTIONS"
        },
        "pascalCase": {
          "unsafeName": "Institutions",
          "safeName": "Institutions"
        }
      },
      "fernFilepath": {
        "allParts": [],
        "packagePath": [],
        "file": {
          "originalName": "institutions",
          "camelCase": {
            "unsafeName": "institutions",
            "safeName": "institutions"
          },
          "snakeCase": {
            "unsafeName": "institutions",
            "safeName": "institutions"
          },
          "screamingSnakeCase": {
            "unsafeName": "INSTITUTIONS",
            "safeName": "INSTITUTIONS"
          },
          "pascalCase": {
            "unsafeName": "Institutions",
            "safeName": "Institutions"
          }
        }
      },
      "service": "institutions",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "transactions": {
      "name": {
        "originalName": "transactions",
        "camelCase": {
          "unsafeName": "transactions",
          "safeName": "transactions"
        },
        "snakeCase": {
          "unsafeName": "transactions",
          "safeName": "transactions"
        },
        "screamingSnakeCase": {
          "unsafeName": "TRANSACTIONS",
          "safeName": "TRANSACTIONS"
        },
        "pascalCase": {
          "unsafeName": "Transactions",
          "safeName": "Transactions"
        }
      },
      "fernFilepath": {
        "allParts": [],
        "packagePath": [],
        "file": {
          "originalName": "transactions",
          "camelCase": {
            "unsafeName": "transactions",
            "safeName": "transactions"
          },
          "snakeCase": {
            "unsafeName": "transactions",
            "safeName": "transactions"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTIONS",
            "safeName": "TRANSACTIONS"
          },
          "pascalCase": {
            "unsafeName": "Transactions",
            "safeName": "Transactions"
          }
        }
      },
      "service": "transactions",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "transactionCategories": {
      "name": {
        "originalName": "transactionCategories",
        "camelCase": {
          "unsafeName": "transactionCategories",
          "safeName": "transactionCategories"
        },
        "snakeCase": {
          "unsafeName": "transaction_categories",
          "safeName": "transaction_categories"
        },
        "screamingSnakeCase": {
          "unsafeName": "TRANSACTION_CATEGORIES",
          "safeName": "TRANSACTION_CATEGORIES"
        },
        "pascalCase": {
          "unsafeName": "TransactionCategories",
          "safeName": "TransactionCategories"
        }
      },
      "fernFilepath": {
        "allParts": [],
        "packagePath": [],
        "file": {
          "originalName": "transactionCategories",
          "camelCase": {
            "unsafeName": "transactionCategories",
            "safeName": "transactionCategories"
          },
          "snakeCase": {
            "unsafeName": "transaction_categories",
            "safeName": "transaction_categories"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSACTION_CATEGORIES",
            "safeName": "TRANSACTION_CATEGORIES"
          },
          "pascalCase": {
            "unsafeName": "TransactionCategories",
            "safeName": "TransactionCategories"
          }
        }
      },
      "service": "transactionCategories",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    },
    "transfers": {
      "name": {
        "originalName": "transfers",
        "camelCase": {
          "unsafeName": "transfers",
          "safeName": "transfers"
        },
        "snakeCase": {
          "unsafeName": "transfers",
          "safeName": "transfers"
        },
        "screamingSnakeCase": {
          "unsafeName": "TRANSFERS",
          "safeName": "TRANSFERS"
        },
        "pascalCase": {
          "unsafeName": "Transfers",
          "safeName": "Transfers"
        }
      },
      "fernFilepath": {
        "allParts": [],
        "packagePath": [],
        "file": {
          "originalName": "transfers",
          "camelCase": {
            "unsafeName": "transfers",
            "safeName": "transfers"
          },
          "snakeCase": {
            "unsafeName": "transfers",
            "safeName": "transfers"
          },
          "screamingSnakeCase": {
            "unsafeName": "TRANSFERS",
            "safeName": "TRANSFERS"
          },
          "pascalCase": {
            "unsafeName": "Transfers",
            "safeName": "Transfers"
          }
        }
      },
      "service": "transfers",
      "types": [],
      "errors": [],
      "subpackages": [],
      "hasEndpointsInTree": false
    }
  },
  "sdkConfig": {
    "hasFileDownloadEndpoints": false,
    "hasPaginatedEndpoints": false,
    "hasStreamingEndpoints": false,
    "isAuthMandatory": true,
    "platformHeaders": {
      "language": "",
      "sdkName": "",
      "sdkVersion": ""
    }
  },
  "apiName": {
    "originalName": "",
    "camelCase": {
      "unsafeName": "",
      "safeName": ""
    },
    "snakeCase": {
      "unsafeName": "",
      "safeName": ""
    },
    "screamingSnakeCase": {
      "unsafeName": "",
      "safeName": ""
    },
    "pascalCase": {
      "unsafeName": "",
      "safeName": ""
    }
  },
  "constants": {
    "errorInstanceIdKey": {
      "name": {
        "originalName": "errorInstanceId",
        "camelCase": {
          "unsafeName": "errorInstanceId",
          "safeName": "errorInstanceId"
        },
        "snakeCase": {
          "unsafeName": "error_instance_id",
          "safeName": "error_instance_id"
        },
        "screamingSnakeCase": {
          "unsafeName": "ERROR_INSTANCE_ID",
          "safeName": "ERROR_INSTANCE_ID"
        },
        "pascalCase": {
          "unsafeName": "ErrorInstanceId",
          "safeName": "ErrorInstanceId"
        }
      },
      "wireValue": "errorInstanceId"
    }
  }
}