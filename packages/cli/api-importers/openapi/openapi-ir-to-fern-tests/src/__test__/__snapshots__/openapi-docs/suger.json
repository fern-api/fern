{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "AddEntitlementCreditRequestBadRequestError": {
            "docs": "Bad Request",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "AddEntitlementCreditRequestInternalServerError": {
            "docs": "Internal Server Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CancelOfferRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CancelOfferRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "CreateIntegrationRequestBadRequestError": {
            "docs": "Bad request error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "CreateIntegrationRequestInternalServerError": {
            "docs": "internal error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreateOfferRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateOfferRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "CreateOrUpdateDraftOfferRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateOrUpdateDraftOfferRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "DeleteIntegrationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "DeleteOfferRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "DeleteProductRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetApiClientAccessTokenRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetBuyerRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetEntitlementRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetEntitlementTermRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetIntegrationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetIntegrationRequestNotFoundError": {
            "docs": "Integration not found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetOfferRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetProductRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetRevenueReportRequestBadRequestError": {
            "docs": "Bad request error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "GetRevenueReportRequestInternalServerError": {
            "docs": "internal error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "GetUsageRecordGroupRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetUsageRecordReportRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "GetUsageReportRequestBadRequestError": {
            "docs": "Bad request error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "GetUsageReportRequestInternalServerError": {
            "docs": "internal error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "ListBuyersByOrganizationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListEntitlementTermsRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListEntitlementsByBuyerRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListEntitlementsByOfferRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListEntitlementsByPartnerRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListEntitlementsByProductRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListEntitlementsRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListIntegrationsByOrganizationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListOffersByOrganizationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListOffersByPartnerRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListOffersByProductRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListOperationsRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListProductMeteringDimensionsRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListProductsByOrganizationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListProductsByPartnerRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListRevenueRecordDetailsRequestBadRequestError": {
            "docs": "Bad request error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "ListRevenueRecordDetailsRequestInternalServerError": {
            "docs": "internal error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "ListRevenueRecordsRequestBadRequestError": {
            "docs": "Bad request error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "ListRevenueRecordsRequestInternalServerError": {
            "docs": "internal error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "ListUsageRecordGroupsByEntitlementRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUsageRecordGroupsByEntitlementRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListUsageRecordGroupsByOrganizationRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUsageRecordGroupsByOrganizationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListUsageRecordGroupsByProductRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUsageRecordGroupsByProductRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListUsageRecordReportsByEntitlementRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUsageRecordReportsByEntitlementRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListUsageRecordReportsByOrganizationRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUsageRecordReportsByOrganizationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ListUsageRecordReportsByProductRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "ListUsageRecordReportsByProductRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "ReportUsageRecordGroupRequestBadRequestError": {
            "docs": "all the quantity of usage records are zero",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "ReportUsageRecordGroupRequestConflictError": {
            "docs": "Conflict request error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 409,
            "type": "string",
          },
          "ReportUsageRecordGroupRequestInternalServerError": {
            "docs": "internal error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "UpdateBuyerNameDescriptionRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "UpdateEntitlementNameRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "UpdateIntegrationRequestBadRequestError": {
            "docs": "Bad request error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "UpdateIntegrationRequestInternalServerError": {
            "docs": "internal error description",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "UpdateProductRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
          "VerifyIntegrationRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "unknown",
          },
        },
        "types": {
          "AzureAudience": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": "optional<string>",
              "id": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureGovernmentCertification": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "title": "optional<string>",
              "uri": "optional<string>",
              "validationResults": "optional<list<AzureValidationResult>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureIncludedBaseQuantity": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isInfinite": "optional<boolean>",
              "quantity": "optional<double>",
              "recurringUnit": "optional<AzureIncludedBaseQuantityRecurringUnit>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureIncludedBaseQuantityRecurringUnit": {
            "enum": [
              "Monthly",
              "Annual",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureListingContact": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "email": "optional<string>",
              "name": "optional<string>",
              "phone": "optional<string>",
              "type": "optional<AzureListingContactType>",
              "uri": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureListingContactType": {
            "enum": [
              "CustomerSupport",
              "Engineering",
              "ChannelManager",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureListingUri": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "displayText": "optional<string>",
              "subtype": "optional<string>",
              "type": "optional<string>",
              "uri": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureLocalizedDateTime": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "dateTimeInUtc": "optional<string>",
              "localizePerMarket": "optional<boolean>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureLocalizedTimeRange": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "endAt": "optional<AzureLocalizedDateTime>",
              "startAt": "optional<AzureLocalizedDateTime>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarket": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "friendlyName": "optional<string>",
              "marketCode": {
                "docs": "ISO Country Code",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketState": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "marketCode": {
                "docs": "ISO Country Code",
                "type": "optional<string>",
              },
              "state": "optional<AzureMarketStateState>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketStateState": {
            "enum": [
              "Disabled",
              "Enabled",
              "StopSelling",
              "Terminated",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrice": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "currency": {
                "docs": "ISO 4217 currency code",
                "type": "optional<string>",
              },
              "markets": "optional<list<string>>",
              "price": {
                "docs": "default 0",
                "type": "optional<double>",
              },
              "prices": "optional<unknown>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOffer": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "$schema": "optional<string>",
              "acceptBy": {
                "docs": "in format YYYY-MM-DD",
                "type": "optional<datetime>",
              },
              "acceptanceLinks": "optional<list<AzureMarketplacePrivateOfferAcceptanceLink>>",
              "beneficiaries": {
                "docs": "array of email addresses.",
                "type": "optional<list<AzureMarketplacePrivateOfferBeneficiary>>",
              },
              "eTag": "optional<string>",
              "end": {
                "docs": "in format YYYY-MM-DD",
                "type": "optional<datetime>",
              },
              "id": {
                "docs": "in format of "private-offer/private-offer-durable-id"",
                "type": "optional<string>",
              },
              "lastModified": {
                "docs": "in format YYYY-MM-DD",
                "type": "optional<datetime>",
              },
              "name": "optional<string>",
              "notificationContacts": {
                "docs": "array of email addresses of the users to be notified of any changes in the private offer status.",
                "type": "optional<list<string>>",
              },
              "preparedBy": "optional<string>",
              "pricing": {
                "docs": "Up to 10 pricing entries are allowed.",
                "type": "optional<list<AzureMarketplacePrivateOfferPricing>>",
              },
              "privateOfferType": "optional<AzureMarketplacePrivateOfferPrivateOfferType>",
              "resourceName": "optional<string>",
              "start": {
                "docs": "in format YYYY-MM-DD, if VariableStartDate = true, this field should be empty.",
                "type": "optional<datetime>",
              },
              "state": "optional<AzureMarketplacePrivateOfferState>",
              "subState": "optional<AzureMarketplacePrivateOfferSubState>",
              "termsAndConditionsDocSasUrl": "optional<string>",
              "upgradedFrom": "optional<AzureMarketplacePrivateOfferPromotionReference>",
              "validations": "optional<list<AzureMarketplaceValidation>>",
              "variableStartDate": "optional<boolean>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferAcceptanceLink": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "beneficiaryId": {
                "docs": "The Customer Billing Account ID.",
                "type": "optional<string>",
              },
              "link": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferBeneficiary": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "beneficiaryRecipients": "optional<list<AzureMarketplacePrivateOfferBeneficiaryRecipient>>",
              "description": "optional<string>",
              "id": {
                "docs": "the customer billing account id.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferBeneficiaryRecipient": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": "optional<string>",
              "recipientType": "optional<AzureMarketplacePrivateOfferBeneficiaryRecipientRecipientType>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferBeneficiaryRecipientRecipientType": {
            "enum": [
              "cspCustomer",
              "billingGroup",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferPricing": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "discountPercentage": {
                "docs": "between 0 and 100",
                "type": "optional<double>",
              },
              "discountType": "optional<AzureMarketplacePrivateOfferPricingDiscountType>",
              "originalPlan": {
                "docs": "the pricing plan of the original plan.",
                "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
              },
              "plan": {
                "docs": "in format of "plan/product-durable-id/plan-durable-id"",
                "type": "optional<string>",
              },
              "planName": "optional<string>",
              "planType": {
                "docs": "The type of the plan, FLAT_RATE or PER_USER.",
                "type": "optional<AzureMarketplacePrivateOfferPricingPlanType>",
              },
              "priceDetails": "optional<string>",
              "privateOfferPlan": {
                "docs": "the pricing plan of the private offer",
                "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
              },
              "product": {
                "docs": "in format of "product/product-durable-id"",
                "type": "optional<string>",
              },
              "sugerOfferId": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferPricingDiscountType": {
            "enum": [
              "percentage",
              "absolute",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferPricingPlanType": {
            "docs": "The type of the plan, FLAT_RATE or PER_USER.",
            "enum": [
              "FLAT_RATE",
              "PER_USER",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferPrivateOfferType": {
            "enum": [
              "customerPromotion",
              "cspPromotion",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferPromotionReference": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": "optional<string>",
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferState": {
            "enum": [
              "draft",
              "live",
              "withdrawn",
              "deleted",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplacePrivateOfferSubState": {
            "enum": [
              "pendingAcceptance",
              "accepted",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplaceTerm": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "type": "optional<AzureMarketplaceTermType>",
              "value": {
                "docs": "default 0",
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplaceTermType": {
            "enum": [
              "day",
              "week",
              "month",
              "year",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplaceValidation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "$schema": "optional<string>",
              "code": "optional<AzureMarketplaceValidationCode>",
              "level": "optional<AzureMarketplaceValidationLevel>",
              "message": "optional<string>",
              "resourceId": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplaceValidationCode": {
            "enum": [
              "businessValidationError",
              "collectionLimitExceeded",
              "invalidId",
              "invalidEntityStatus",
              "invalidRequest",
              "invalidResource",
              "invalidState",
              "notDeployed",
              "notSupported",
              "operationCanceled",
              "productLocked",
              "resourceNotFound",
              "schemaValidationError",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureMarketplaceValidationLevel": {
            "enum": [
              "informational",
              "warning",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePendingUpdateInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "status": "optional<string>",
              "updateType": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePrice": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "currencyCode": {
                "docs": "ISO currency code, Three characters",
                "type": "optional<string>",
              },
              "openPrice": "optional<double>",
              "priceTierID": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceAndAvailabilityPrivateOfferCustomMeters": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "meters": "optional<unknown>",
              "priceInputOption": {
                "docs": "default "usd"",
                "type": "optional<AzurePriceAndAvailabilityPrivateOfferCustomMetersPriceInputOption>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceAndAvailabilityPrivateOfferCustomMetersPriceInputOption": {
            "docs": "default "usd"",
            "enum": [
              "perMarket",
              "usd",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceAndAvailabilityPrivateOfferPlan": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "$schema": "optional<string>",
              "id": "optional<string>",
              "plan": "optional<string>",
              "pricing": "optional<AzurePriceAndAvailabilityPrivateOfferPrice>",
              "product": "optional<string>",
              "resourceName": "optional<string>",
              "validations": "optional<list<AzureMarketplaceValidation>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceAndAvailabilityPrivateOfferPrice": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "customMeters": "optional<AzurePriceAndAvailabilityPrivateOfferCustomMeters>",
              "recurrentPrice": "optional<AzurePriceAndAvailabilityRecurrentPrice>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceAndAvailabilityRecurrentPrice": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "priceInputOption": {
                "docs": "default "usd"",
                "type": "optional<AzurePriceAndAvailabilityRecurrentPricePriceInputOption>",
              },
              "prices": "optional<list<AzurePriceAndAvailabilityRecurrentPriceItem>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceAndAvailabilityRecurrentPriceItem": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "billingTerm": "optional<AzureMarketplaceTerm>",
              "paymentOption": "optional<AzureMarketplaceTerm>",
              "pricePerPaymentInUsd": "optional<double>",
              "prices": "optional<list<AzureMarketplacePrice>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceAndAvailabilityRecurrentPricePriceInputOption": {
            "docs": "default "usd"",
            "enum": [
              "perMarket",
              "usd",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceCadence": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "type": "optional<AzurePriceCadenceType>",
              "value": "optional<integer>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceCadenceType": {
            "enum": [
              "Month",
              "Year",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceSchedule": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "priceCadence": "optional<AzurePriceCadence>",
              "pricingModel": "optional<AzurePriceSchedulePricingModel>",
              "pricingUnits": "optional<list<AzurePricingUnit>>",
              "retailPrice": "optional<AzurePrice>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePriceSchedulePricingModel": {
            "enum": [
              "Flat",
              "Recurring",
              "Usage",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePricingUnit": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isUnlimitedUnit": "optional<boolean>",
              "lowerUnit": "optional<integer>",
              "name": "optional<AzurePricingUnitName>",
              "unitType": "optional<string>",
              "upperUnit": "optional<integer>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzurePricingUnitName": {
            "enum": [
              "sharedcore",
              "transactions",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProduct": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "availabilities": "optional<list<AzureProductAvailability>>",
              "branches": "optional<list<AzureProductBranch>>",
              "externalIDs": "optional<list<AzureTypeValue>>",
              "id": "optional<string>",
              "isModularPublishing": "optional<boolean>",
              "listings": "optional<list<AzureProductListing>>",
              "name": "optional<string>",
              "packageConfigurations": "optional<list<AzureProductPackageConfiguration>>",
              "properties": "optional<list<AzureProductProperty>>",
              "resourceType": "optional<string>",
              "setup": {
                "docs": "Not original fields. They are populated by other API calls",
                "type": "optional<AzureProductSetup>",
              },
              "submissions": "optional<list<AzureProductSubmission>>",
              "variants": "optional<list<AzureProductVariant>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductAvailability": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "emailAudiences": "optional<list<AzureAudience>>",
              "enterpriseLicensing": "optional<string>",
              "id": "optional<string>",
              "resourceType": "optional<string>",
              "subscriptionAudiences": "optional<list<AzureAudience>>",
              "visibility": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductBranch": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "currentDraftInstanceID": "optional<string>",
              "friendlyName": "optional<string>",
              "id": "optional<string>",
              "module": "optional<string>",
              "resourceType": "optional<string>",
              "type": "optional<string>",
              "variantID": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductFeatureAvailability": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "customMeters": "optional<list<AzureProductVariantCustomMeter>>",
              "id": "optional<string>",
              "isHidden": "optional<boolean>",
              "marketStates": "optional<list<AzureMarketState>>",
              "markets": "optional<list<AzureMarket>>",
              "priceSchedules": "optional<list<AzureProductVariantPriceSchedule>>",
              "properties": "optional<list<AzureTypeValue>>",
              "resourceType": {
                "docs": "ResourceType = FeatureAvailability",
                "type": "optional<string>",
              },
              "subscriptionAudiences": "optional<list<AzureAudience>>",
              "tenantAudiences": "optional<list<AzureAudience>>",
              "trial": "optional<AzureProductVariantTrial>",
              "visibility": "optional<AzureProductFeatureAvailabilityVisibility>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductFeatureAvailabilityVisibility": {
            "enum": [
              "Public",
              "Private",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductListing": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accessInformation": "optional<string>",
              "assets": {
                "docs": "Not original fields. They are populated by other API calls",
                "type": "optional<list<AzureProductListingAsset>>",
              },
              "compatibleProducts": "optional<list<string>>",
              "description": "optional<string>",
              "gettingStartedInstructions": "optional<string>",
              "id": "optional<string>",
              "keywords": "optional<list<string>>",
              "languageCode": "optional<string>",
              "listingContacts": "optional<list<AzureListingContact>>",
              "listingUris": "optional<list<AzureListingUri>>",
              "productDisplayName": "optional<string>",
              "publisherName": "optional<string>",
              "resourceType": "optional<literal<"AzureListing">>",
              "shortDescription": "optional<string>",
              "summary": "optional<string>",
              "title": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductListingAsset": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": "optional<string>",
              "fileName": "optional<string>",
              "fileSasUri": "optional<string>",
              "friendlyName": "optional<string>",
              "id": "optional<string>",
              "order": "optional<integer>",
              "publisherDefinedSasUri": "optional<string>",
              "resourceType": "optional<AzureProductListingAssetResourceType>",
              "state": "optional<AzureProductListingAssetState>",
              "type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductListingAssetResourceType": {
            "enum": [
              "ListingAsset",
              "ListingImage",
              "ListingVideo",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductListingAssetState": {
            "enum": [
              "PendingUpload",
              "Uploaded",
              "InProcessing",
              "Processed",
              "ProcessFailed",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductPackageConfiguration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "azureActiveDirectoryApplicationID": "optional<string>",
              "azureActiveDirectoryTenantID": "optional<string>",
              "connectionWebhook": "optional<string>",
              "id": "optional<string>",
              "landingPageUri": "optional<string>",
              "resourceType": "optional<literal<"AzureSoftwareAsAServicePackageConfiguration">>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductProperty": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "additionalCategories": "optional<list<string>>",
              "appVersion": "optional<string>",
              "applicableProducts": "optional<list<string>>",
              "categories": "optional<list<string>>",
              "customAmendments": "optional<list<string>>",
              "extendedProperties": "optional<list<string>>",
              "globalAmendmentTerms": "optional<string>",
              "hideKeys": "optional<list<string>>",
              "id": "optional<string>",
              "industries": "optional<list<string>>",
              "leveledCategories": "optional<map<string, unknown>>",
              "leveledIndustries": "optional<map<string, unknown>>",
              "marketingOnlyChange": "optional<boolean>",
              "productTags": "optional<list<string>>",
              "resourceType": "optional<string>",
              "submissionVersion": "optional<string>",
              "termsOfUse": "optional<string>",
              "useEnterpriseContract": "optional<boolean>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductSetup": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "callToAction": "optional<AzureProductSetupCallToAction>",
              "channelStates": "optional<list<AzureTypeValue>>",
              "enableTestDrive": "optional<boolean>",
              "resourceType": "optional<literal<"AzureProductSetup">>",
              "sellingOption": "optional<AzureProductSetupSellingOption>",
              "testDriveType": "optional<string>",
              "trialUri": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductSetupCallToAction": {
            "enum": [
              "free",
              {
                "name": "FreeTrial",
                "value": "free-trial",
              },
              {
                "name": "ContactMe",
                "value": "contact-me",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductSetupSellingOption": {
            "enum": [
              "ListingOnly",
              "ListAndSell",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductSubmission": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "areResourcesReady": "optional<boolean>",
              "friendlyName": "optional<string>",
              "id": "optional<string>",
              "pendingUpdateInfo": "optional<AzurePendingUpdateInfo>",
              "publishedTimeInUtc": "optional<datetime>",
              "releaseNumber": "optional<integer>",
              "resourceType": "optional<literal<"Submission">>",
              "resources": "optional<list<AzureTypeValue>>",
              "state": "optional<AzureProductSubmissionState>",
              "subState": "optional<AzureProductSubmissionSubState>",
              "targets": "optional<list<AzureTypeValue>>",
              "variantResources": "optional<list<AzureVariantResource>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductSubmissionState": {
            "enum": [
              "Inprogress",
              "Published",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductSubmissionSubState": {
            "enum": [
              "InDraft",
              "Submitted",
              "Failed",
              "FailedInCertification",
              "ReadyToPublish",
              "Publishing",
              "Published",
              "InStore",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductVariant": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "azureGovernmentCertifications": "optional<list<AzureGovernmentCertification>>",
              "cloudAvailabilities": "optional<list<string>>",
              "conversionPaths": "optional<string>",
              "extendedProperties": "optional<list<AzureTypeValue>>",
              "externalID": "optional<string>",
              "featureAvailabilities": {
                "docs": "Not original fields. They are populated by other API calls",
                "type": "optional<list<AzureProductFeatureAvailability>>",
              },
              "friendlyName": "optional<string>",
              "id": "optional<string>",
              "leadGenID": "optional<string>",
              "referenceVariantID": "optional<string>",
              "resourceType": "optional<AzureProductVariantResourceType>",
              "state": "optional<AzureProductVariantState>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductVariantCustomMeter": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "displayName": "optional<string>",
              "id": "optional<string>",
              "includedBaseQuantities": "optional<list<AzureIncludedBaseQuantity>>",
              "isEnabled": "optional<boolean>",
              "priceInUsd": "optional<double>",
              "uniqueID": "optional<string>",
              "unitOfMeasure": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductVariantPriceSchedule": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "dateTimeRange": "optional<AzureLocalizedTimeRange>",
              "friendlyName": "optional<string>",
              "isBaseSchedule": {
                "docs": "There is only one base schedule.",
                "type": "optional<boolean>",
              },
              "marketCodes": {
                "docs": "ISO country code",
                "type": "optional<list<string>>",
              },
              "schedules": "optional<list<AzurePriceSchedule>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductVariantResourceType": {
            "enum": [
              "AzureSkuVariant",
              "AzureTestDriveVariant",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductVariantState": {
            "enum": [
              "InActive",
              "Active",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductVariantTrial": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "dateTimeRange": "optional<AzureLocalizedTimeRange>",
              "duration": "optional<integer>",
              "durationType": "optional<AzureProductVariantTrialDurationType>",
              "type": "optional<AzureProductVariantTrialType>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductVariantTrialDurationType": {
            "enum": [
              "Minute",
              "Days",
              "Months",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureProductVariantTrialType": {
            "enum": [
              "NoTrial",
              "TimedAccess",
              "TimedUsage",
              "Unlimited",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureTypeValue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "type": "optional<string>",
              "value": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureValidationResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "errorMessage": "optional<string>",
              "memberNames": "optional<list<string>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AzureVariantResource": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "resources": "optional<list<AzureTypeValue>>",
              "variantID": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComAwsAwsSdkGoV2ServiceMarketplacemeteringTypesTag": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "key": {
                "docs": "One part of a key-value pair that makes up a tag. A key is a label that acts
like a category for the specific tag values.

This member is required.",
                "type": "optional<string>",
              },
              "value": {
                "docs": "One part of a key-value pair that makes up a tag. A value acts as a descriptor
within a tag category (key). The value can be empty or null.

This member is required.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": "optional<integer>",
              "result": "optional<list<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageBatchEventOkMessage>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageBatchEventOkMessage": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "dimension": {
                "docs": "Dimension identifier",
                "type": "optional<string>",
              },
              "effectiveStartTime": {
                "docs": "Time in UTC when the usage event occurred",
                "type": "optional<string>",
              },
              "error": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponse>",
              "messageTime": {
                "docs": "Time this message was created in UTC",
                "type": "optional<string>",
              },
              "planId": {
                "docs": "Plan associated with the purchased offer",
                "type": "optional<string>",
              },
              "quantity": {
                "docs": "Number of units consumed",
                "type": "optional<double>",
              },
              "resourceId": {
                "docs": "Identifier of the resource against which usage is emitted",
                "type": "optional<string>",
              },
              "resourceUri": {
                "docs": "Identifier of the managed app resource against which usage is emitted",
                "type": "optional<string>",
              },
              "status": {
                "docs": "Status of the operation.",
                "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum>",
              },
              "usageEventId": {
                "docs": "Unique identifier associated with the usage event",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "additionalInfo": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponseAdditionalInfo>",
              "code": "optional<string>",
              "message": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponseAdditionalInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "acceptedMessage": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventOkResponse>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventOkResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "dimension": {
                "docs": "Dimension identifier",
                "type": "optional<string>",
              },
              "effectiveStartTime": {
                "docs": "Time in UTC when the usage event occurred",
                "type": "optional<string>",
              },
              "messageTime": {
                "docs": "Time this message was created in UTC",
                "type": "optional<string>",
              },
              "planId": {
                "docs": "Plan associated with the purchased offer",
                "type": "optional<string>",
              },
              "quantity": {
                "docs": "Number of units consumed",
                "type": "optional<double>",
              },
              "resourceId": {
                "docs": "Identifier of the resource against which usage is emitted",
                "type": "optional<string>",
              },
              "resourceUri": {
                "docs": "Identifier of the managed app resource against which usage is emitted",
                "type": "optional<string>",
              },
              "status": {
                "docs": "Status of the operation.",
                "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum>",
              },
              "usageEventId": {
                "docs": "Unique identifier associated with the usage event",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum": {
            "enum": [
              "Accepted",
              "Expired",
              "Duplicate",
              "Error",
              "ResourceNotFound",
              "ResourceNotAuthorized",
              "InvalidDimension",
              "InvalidQuantity",
              "BadArgument",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action": "optional<string>",
              "agreementID": "optional<string>",
              "amount": "optional<double>",
              "balanceImpacting": "optional<integer>",
              "bankTraceID": "optional<string>",
              "billingAddressID": "optional<string>",
              "brokerID": "optional<string>",
              "buyerID": "optional<string>",
              "currency": "optional<string>",
              "dataFeedProductID": "optional<string>",
              "disbursementBillingEventID": "optional<string>",
              "endUserAccountID": "optional<string>",
              "entitlementID": "optional<string>",
              "fromAccountID": "optional<string>",
              "id": "optional<string>",
              "insertDate": "optional<SqlNullTime>",
              "invoiceDate": "optional<SqlNullTime>",
              "invoiceID": "optional<string>",
              "offerID": "optional<string>",
              "organizationID": "optional<string>",
              "parentBillingEventID": "optional<string>",
              "paymentDueDate": "optional<SqlNullTime>",
              "productID": "optional<string>",
              "toAccountID": "optional<string>",
              "transactionReferenceID": "optional<string>",
              "transactionType": "optional<string>",
              "usagePeriodEndDate": "optional<SqlNullTime>",
              "usagePeriodStartDate": "optional<SqlNullTime>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "azureAssetID": "optional<string>",
              "azureBillingAccountID": "optional<string>",
              "azureCustomerID": "optional<string>",
              "azureOfferID": "optional<string>",
              "azurePlanID": "optional<string>",
              "billingModel": "optional<string>",
              "buyerID": "optional<string>",
              "earningUsd": "optional<double>",
              "entitlementID": "optional<string>",
              "offerID": "optional<string>",
              "organizationID": "optional<string>",
              "payoutStatus": "optional<string>",
              "productID": "optional<string>",
              "purchaseRecordID": "optional<string>",
              "revenueUsd": "optional<double>",
              "termEndDate": "optional<string>",
              "termStartDate": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "abandoned": "optional<double>",
              "accountID": "optional<string>",
              "buyerID": "optional<string>",
              "charges": "optional<double>",
              "currency": "optional<string>",
              "dueVendor": "optional<double>",
              "entitlementID": "optional<string>",
              "googleEntity": "optional<string>",
              "insightAccountID": "optional<string>",
              "offerID": "optional<string>",
              "organizationID": "optional<string>",
              "paymentSchedule": "optional<string>",
              "paymentType": "optional<string>",
              "prepayCredits": "optional<double>",
              "productID": "optional<string>",
              "refundBalanceDeductedThisMonth": "optional<double>",
              "refundBalanceOutstanding": "optional<double>",
              "refundReason": "optional<string>",
              "released": "optional<double>",
              "reportDate": "optional<string>",
              "resource": "optional<string>",
              "sku": "optional<string>",
              "trialUse": "optional<double>",
              "unit": "optional<string>",
              "usage": "optional<double>",
              "usedBy": "optional<string>",
              "withheld": "optional<double>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "MarketplacemeteringBatchMeterUsageOutput": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "resultMetadata": {
                "docs": "Metadata pertaining to the operation's result.",
                "type": "optional<MiddlewareMetadata>",
              },
              "results": {
                "docs": "Contains all UsageRecords processed by BatchMeterUsage. These records were
either honored by AWS Marketplace Metering Service or were invalid. Invalid
records should be fixed before being resubmitted.",
                "type": "optional<list<TypesUsageRecordResult>>",
              },
              "unprocessedRecords": {
                "docs": "Contains all UsageRecords that were not processed by BatchMeterUsage. This is a
list of UsageRecords. You can retry the failed request by making another
BatchMeterUsage call with this list as input in the BatchMeterUsageRequest.",
                "type": "optional<list<TypesUsageRecord>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "MiddlewareMetadata": "map<string, unknown>",
          "ServicecontrolReportError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "operationId": {
                "docs": "OperationId: The Operation.operation_id value from the request.",
                "type": "optional<string>",
              },
              "status": {
                "docs": "Status: Details of the error when processing the Operation.",
                "type": "optional<ServicecontrolStatus>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ServicecontrolReportResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "reportErrors": {
                "docs": "ReportErrors: Partial failures, one for each `Operation` in the
request that failed processing. There are three possible combinations
of the RPC status: 1. The combination of a successful RPC status and
an empty `report_errors` list indicates a complete success where all
`Operations` in the request are processed successfully. 2. The
combination of a successful RPC status and a non-empty
`report_errors` list indicates a partial success where some
`Operations` in the request succeeded. Each `Operation` that failed
processing has a corresponding item in this list. 3. A failed RPC
status indicates a general non-deterministic failure. When this
happens, it's impossible to know which of the 'Operations' in the
request succeeded or failed.",
                "type": "optional<list<ServicecontrolReportError>>",
              },
              "serviceConfigId": {
                "docs": "ServiceConfigId: The actual config id used to process the request.",
                "type": "optional<string>",
              },
              "serviceRolloutId": {
                "docs": "ServiceRolloutId: The current service rollout id used to process the
request.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ServicecontrolStatus": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "Code: The status code, which should be an enum value of
google.rpc.Code.",
                "type": "optional<integer>",
              },
              "details": {
                "docs": "Details: A list of messages that carry the error details. There is a
common set of message types for APIs to use.",
                "type": "optional<list<list<integer>>>",
              },
              "message": {
                "docs": "Message: A developer-facing error message, which should be in
English. Any user-facing error message should be localized and sent
in the google.rpc.Status.details field, or localized by the client.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAddEntitlementCreditResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "creditAmountIncrement": {
                "docs": "The amount to be added to the credit amount.",
                "type": "optional<double>",
              },
              "entitlementID": "optional<string>",
              "entitlementTermID": "optional<string>",
              "newCreditAmount": {
                "docs": "The new credit amount after the increment.",
                "type": "optional<double>",
              },
              "organizationID": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedApiClientAccessToken": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_token": "optional<string>",
              "expires_in": {
                "default": 3600,
                "docs": "The token expires in 1 hour",
                "type": "optional<integer>",
              },
              "token_type": {
                "default": "Bearer",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsAccountIdentifier": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "awsAccountID": {
                "docs": "The AWS Account ID of the buyer in AWS Marketplace",
                "type": "optional<string>",
              },
              "awsCustomerID": {
                "docs": "The AWS Customer ID of the buyer in AWS Marketplace",
                "type": "optional<string>",
              },
              "companyInfo": "optional<SharedCompanyInfo>",
              "dataFeedAccountID": {
                "docs": "The Account ID in AWS Marketplace Data Feed service",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsAceIntegration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "credential": "optional<SharedAwsIntegrationCredential>",
              "partnerId": {
                "docs": "The partner ID of the ISV/Seller in AWS Partner Network.",
                "type": "optional<string>",
              },
              "s3BucketName": {
                "docs": "The Name of the S3 bucket for AWS APN Customer Engagement Program (ACE) to sync the leads & opportunities.",
                "type": "optional<string>",
              },
              "s3BucketRegion": {
                "docs": "The region of the S3 bucket for AWS APN Customer Engagement Program (ACE) to sync the leads & opportunities.",
                "type": "optional<string>",
              },
              "secretKey": {
                "docs": "The secret key used to store the AzureIntegrationCredential in AWS Secret manager. for internal usage only.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsIntegrationCredential": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accessKeyId": {
                "docs": "The access key ID of the IAM user for Suger service to access the client's AWS services.",
                "type": "optional<string>",
              },
              "iamUserArn": {
                "docs": "The ARN of the IAM user for Suger service to access the client's AWS services.",
                "type": "optional<string>",
              },
              "secretAccessKey": {
                "docs": "The secret access key of the IAM user for Suger service to access the client's AWS services.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsMarketplaceIntegration": {
            "docs": "The data struct to store integration info for Suger service to access the client's AWS services.",
            "inline": undefined,
            "properties": {
              "externalID": {
                "docs": "The external ID for assuming IAM role. If empty, means no external ID set or needed. Otherwise, it should be auth_id in table identity.organization.",
                "type": "optional<string>",
              },
              "iamRoleArn": {
                "docs": "The AWS IAM role for Suger service to assume to access the client's AWS services.",
                "type": "optional<string>",
              },
              "marketplaceStartDate": {
                "docs": "AWS Marketplace start date which comes from MDFS Full-Sync.",
                "type": "optional<datetime>",
              },
              "mcasFullSyncDone": {
                "docs": "Is AWS Marketplace Commerce Analytics Service (MCAS) full-sync done.",
                "type": "optional<boolean>",
              },
              "mcasIamRoleArn": {
                "docs": "IAM role ARN to allow AWS Marketplace to write to the S3 bucket and publish notifications to the SNS topic.",
                "type": "optional<string>",
              },
              "mcasS3Bucket": {
                "docs": "S3 bucket for AWS Marketplace Commerce Analytics Service (MCAS)",
                "type": "optional<string>",
              },
              "mcasSnsTopic": {
                "docs": "SNS topic ARN for AWS Marketplace Commerce Analytics Service (MCAS)",
                "type": "optional<string>",
              },
              "mdfsFullSyncDone": {
                "docs": "Is AWS Marketplace Data Feeds Service (MDFS) full-sync done.",
                "type": "optional<boolean>",
              },
              "mdfsKmsKeyArn": {
                "docs": "KMS Key ARN for the S3 bucket of AWS Marketplace Data Feeds Service (MDFS)",
                "type": "optional<string>",
              },
              "mdfsS3BucketArn": {
                "docs": "S3 bucket ARN for AWS Marketplace Data Feeds Service (MDFS)",
                "type": "optional<string>",
              },
              "policyArns": {
                "docs": "The policy ARNs in the IAM role.",
                "type": "optional<list<string>>",
              },
              "revenueRecordFullSyncDone": {
                "docs": "Is AWS Marketplace Revenue Record full-sync done.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSaasProduct": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "Description": "optional<SharedAwsSaasProductDescription>",
              "Dimensions": "optional<list<SharedAwsSaasProductDimension>>",
              "PromotionalResources": "optional<SharedAwsSaasProductPromotionalResources>",
              "SupportInformation": "optional<SharedAwsSaasProductSupportInformation>",
              "Versions": "optional<list<SharedAwsSaasProductVersion>>",
              "dataFeedProductId": {
                "docs": "The product Id in AWS Marketplace Data Feed Service.",
                "type": "optional<string>",
              },
              "productId": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSaasProductAdditionalResource": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "Text": "optional<string>",
              "Type": "optional<string>",
              "Url": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSaasProductDeliveryOption": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "FulfillmentUrl": "optional<string>",
              "Id": "optional<string>",
              "Type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSaasProductDescription": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "AssociatedProducts": "optional<string>",
              "Categories": "optional<list<string>>",
              "EuW8Submitted": "optional<boolean>",
              "Highlights": "optional<list<string>>",
              "LongDescription": "optional<string>",
              "Manufacturer": "optional<string>",
              "ProductCode": "optional<string>",
              "ProductTitle": "optional<string>",
              "Registered": "optional<boolean>",
              "SearchKeywords": "optional<list<string>>",
              "ShortDescription": "optional<string>",
              "Sku": "optional<string>",
              "UsW9Submitted": "optional<boolean>",
              "Visibility": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSaasProductDimension": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "Description": "optional<string>",
              "Key": "optional<string>",
              "Name": "optional<string>",
              "Types": "optional<list<string>>",
              "Unit": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSaasProductPromotionalResources": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "AdditionalResources": "optional<list<SharedAwsSaasProductAdditionalResource>>",
              "LogoUrl": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSaasProductSupportInformation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "Description": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSaasProductVersion": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "DeliveryOptions": "optional<list<SharedAwsSaasProductDeliveryOption>>",
              "Id": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSnsSubscription": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "Endpoint": "optional<string>",
              "Protocol": "optional<string>",
              "Status": "optional<SharedAwsSnsSubscriptionStatus>",
              "SubscriptionArn": "optional<string>",
              "TopicArn": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAwsSnsSubscriptionStatus": {
            "enum": [
              "UNKNOWN",
              "CONFIRMED",
              "PENDING_CONFIRMATION",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureAdIdentifier": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "buyerInfo": "optional<SharedAzureBuyerInfo>",
              "companyInfo": "optional<SharedCompanyInfo>",
              "emailId": {
                "docs": "Email address",
                "type": "optional<string>",
              },
              "objectId": "optional<string>",
              "puid": {
                "docs": "ID of the user, used as External ID of suger IdentityBuyer.",
                "type": "optional<string>",
              },
              "tenantId": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureBuyerInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "billingAccountId": "optional<string>",
              "customerId": "optional<string>",
              "firstName": "optional<string>",
              "lastName": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureIntegration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "cmaFullSyncDone": {
                "docs": "Is Azure Commercial Marketplace Analytics (CMA) full-sync done.",
                "type": "optional<boolean>",
              },
              "credential": "optional<SharedAzureIntegrationCredential>",
              "secretKey": {
                "docs": "The secret key used to store the AzureIntegrationCredential in AWS Secret manager. for internal usage only.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureIntegrationCredential": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accessToken": "optional<string>",
              "clientID": "optional<string>",
              "clientSecret": "optional<string>",
              "expiresOn": {
                "docs": "The time when the access token expires.",
                "type": "optional<string>",
              },
              "refreshToken": {
                "docs": "The refresh token used to refresh the access token.",
                "type": "optional<string>",
              },
              "tenantID": "optional<string>",
              "tokenScope": "optional<string>",
              "tokenType": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureMarketplaceSubscription": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allowedCustomerOperations": "optional<list<SharedAzureMarketplaceSubscriptionAllowedCustomerOperationsItem>>",
              "autoRenew": "optional<boolean>",
              "beneficiary": "optional<SharedAzureAdIdentifier>",
              "created": "optional<datetime>",
              "fulfillmentId": "optional<string>",
              "id": "optional<string>",
              "isFreeTrial": "optional<boolean>",
              "isTest": "optional<boolean>",
              "lastModified": "optional<string>",
              "name": "optional<string>",
              "offerId": "optional<string>",
              "planId": "optional<string>",
              "publisherId": "optional<string>",
              "purchaser": "optional<SharedAzureAdIdentifier>",
              "quantity": "optional<integer>",
              "saasSubscriptionStatus": "optional<SharedAzureMarketplaceSubscriptionStatus>",
              "sandboxType": "optional<SharedAzureMarketplaceSubscriptionSandboxType>",
              "sessionId": "optional<string>",
              "sessionMode": "optional<SharedAzureMarketplaceSubscriptionSessionMode>",
              "storeFront": "optional<string>",
              "term": "optional<SharedAzureTerm>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureMarketplaceSubscriptionAllowedCustomerOperationsItem": {
            "enum": [
              "Read",
              "Update",
              "Delete",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureMarketplaceSubscriptionSandboxType": {
            "enum": [
              "None",
              "Csp",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureMarketplaceSubscriptionSessionMode": {
            "enum": [
              "None",
              "DryRun",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureMarketplaceSubscriptionStatus": {
            "enum": [
              "NotStarted",
              "PendingFulfillmentStart",
              "Subscribed",
              "Suspended",
              "Unsubscribed",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedAzureTerm": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "chargeDuration": "optional<string>",
              "endDate": "optional<datetime>",
              "startDate": "optional<datetime>",
              "termUnit": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedBuyerInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "awsBuyer": {
                "docs": "Buyer from AWS Marketplace",
                "type": "optional<SharedAwsAccountIdentifier>",
              },
              "azureBuyer": {
                "docs": "Buyer from Azure Marketplace",
                "type": "optional<SharedAzureAdIdentifier>",
              },
              "collectableAmount": {
                "docs": "The amount that the seller can collect. It excludes the marketplace commision fee.",
                "type": "optional<double>",
              },
              "disbursedAmount": {
                "docs": "The amount that has been disbursed to the seller account.",
                "type": "optional<double>",
              },
              "gcpBuyer": {
                "docs": "Buyer from GCP Marketplace",
                "type": "optional<SharedGcpMarketplaceUserAccount>",
              },
              "invoicedAmount": {
                "docs": "The amount that the buyer has got invoiced.",
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedCommitDimension": {
            "docs": "The commit dimension. There may be one or more commit dimensions defined in single product, offer or entitlement.",
            "inline": undefined,
            "properties": {
              "category": "optional<string>",
              "description": "optional<string>",
              "isUserCreated": {
                "docs": "Whether this commit dimension is newly created by user when creating AWS Marketplace Contract private offer.",
                "type": "optional<boolean>",
              },
              "key": {
                "docs": "API name of the dimension",
                "type": "optional<string>",
              },
              "length": {
                "docs": "The term length for the commit amount, such as 6 months, or 1 year. length is used together with timeUnit",
                "type": "optional<integer>",
              },
              "maximumUsers": {
                "default": 1000000,
                "docs": "The maximum number of users for PER_USER commit",
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1000000,
                  "min": 1,
                  "multipleOf": undefined,
                },
              },
              "minimumUsers": {
                "default": 1,
                "docs": "The minimum number of users for PER_USER commit",
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1000000,
                  "min": 1,
                  "multipleOf": undefined,
                },
              },
              "name": {
                "docs": "Display name of the dimension",
                "type": "optional<string>",
              },
              "quantity": {
                "docs": "The quantity of this commit.",
                "type": "optional<integer>",
              },
              "rate": {
                "docs": "The commit amount.",
                "type": "optional<double>",
              },
              "timeUnit": {
                "docs": "The term unit for the commit amount.",
                "type": "optional<SharedCommitDimensionTimeUnit>",
              },
              "type": "optional<SharedCommitDimensionType>",
              "types": "optional<list<string>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedCommitDimensionTimeUnit": {
            "enum": [
              "DAY",
              "MONTH",
              "YEAR",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedCommitDimensionType": {
            "enum": [
              "FLAT_RATE",
              "PER_USER",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedCompanyInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "addressLine1": "optional<string>",
              "addressLine2": "optional<string>",
              "city": "optional<string>",
              "country": "optional<string>",
              "emailDomain": "optional<string>",
              "name": "optional<string>",
              "postalCode": "optional<string>",
              "state": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedContact": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "company": "optional<string>",
              "email": "optional<string>",
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedEntitlementInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "autoRenew": {
                "docs": "Is this Entitlement Auto Renew enabled.",
                "type": "optional<boolean>",
              },
              "awsEntitlements": {
                "docs": "Nullable. AWS Entitlements from AWS Marketplace.",
                "type": "optional<list<TypesEntitlement>>",
              },
              "azureSubscriptions": {
                "docs": "Nullable. Azure Subscriptions from Azure Marketplace.",
                "type": "optional<list<SharedAzureMarketplaceSubscription>>",
              },
              "collectableAmount": {
                "docs": "The amount that the seller can collect. It excludes the marketplace commision fee.",
                "type": "optional<double>",
              },
              "commitAmount": {
                "docs": "The amount that the buyer has committed to pay. It can be the sum of payment installments if applicable.",
                "type": "optional<double>",
              },
              "commits": {
                "docs": "The dimensions for commit.",
                "type": "optional<list<SharedCommitDimension>>",
              },
              "currency": {
                "docs": "The default Currency is USD.",
                "type": "optional<string>",
              },
              "dimensions": {
                "docs": "The dimensions for usage-based metering.",
                "type": "optional<list<SharedMeteringDimension>>",
              },
              "disbursedAmount": {
                "docs": "The amount that has been disbursed to the seller account.",
                "type": "optional<double>",
              },
              "discount": {
                "docs": "The rate of discount (0 ~ 1.0), such as 0.1 which is 10% off. 0 which is no discount.",
                "type": "optional<double>",
              },
              "eulaType": "optional<SharedEulaType>",
              "eulaUrl": "optional<string>",
              "gcpEntitlements": {
                "docs": "Nullable. GCP Entitlements from GCP Marketplace.",
                "type": "optional<list<SharedGcpMarketplaceEntitlement>>",
              },
              "gcpPlans": {
                "docs": "Only applicable for GCP Marketplace Entitlements.",
                "type": "optional<list<SharedGcpPurchasePlan>>",
              },
              "invoicedAmount": {
                "docs": "The amount that the buyer has got invoiced.",
                "type": "optional<double>",
              },
              "paymentInstallments": {
                "docs": "For flexible payment schedules",
                "type": "optional<list<SharedPaymentInstallment>>",
              },
              "refundCancelationPolicy": "optional<string>",
              "sellerNotes": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedEntitlementTermInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "type": "optional<SharedEntitlementTermType>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedEntitlementTermType": {
            "enum": [
              {
                "name": "Unknown",
                "value": "",
              },
              "AutoRenew",
              "ManualRenew",
              "PlanChange",
              "QuantityChange",
              "Signup",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedEntitlementUsageRecord": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "amounts": "optional<list<double>>",
              "date": "optional<datetime>",
              "keys": "optional<list<string>>",
              "quantities": "optional<list<double>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedEntityType": {
            "enum": [
              "ORGANIZATION",
              "PRODUCT",
              "OFFER",
              "ENTITLEMENT",
              "ENTITLEMENT_TERM",
              "INTEGRATION",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedEulaType": {
            "enum": [
              {
                "name": "UNKNOWN",
                "value": "",
              },
              "SCMP",
              "ECMP",
              "CUSTOM",
              "ISV",
              "CURRENT",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerExternalAccountSpec": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "loginUri": "optional<string>",
              "signupUri": "optional<string>",
              "singleSignOnUri": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerListingSpec": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "externalAccountSpec": "optional<SharedGcpCommerceProducerExternalAccountSpec>",
              "listingType": "optional<literal<"BillingIntegratedManagedService">>",
              "marketingSpec": "optional<SharedGcpCommerceProducerMarketingSpec>",
              "purchaseSpec": "optional<SharedGcpCommerceProducerPurchaseSpec>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerMarketingSpec": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": "optional<string>",
              "displayNames": {
                "docs": "In format of "{provider-id}/{product-name}"",
                "type": "optional<list<string>>",
              },
              "eulaUrl": "optional<string>",
              "externalMarketingUrl": "optional<string>",
              "icon": {
                "docs": "In format of "base64://..."",
                "type": "optional<string>",
              },
              "searchCategories": "optional<list<string>>",
              "searchDescription": "optional<string>",
              "searchKeywords": "optional<list<string>>",
              "shortTitle": "optional<string>",
              "supportSpec": "optional<SharedGcpCommerceProducerSupportSpec>",
              "title": {
                "docs": "The product title.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerPrice": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "currencyCode": {
                "docs": "ISO currency code, Three UPPER_CASE characters",
                "type": "optional<string>",
              },
              "nanos": {
                "docs": "Decimal part of the price. For example, 2000000 = 0.002, 200000000 = 0.2",
                "type": "optional<integer>",
              },
              "units": {
                "docs": "Integer part of the price.",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerPriceInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": "optional<string>",
              "priceModel": "optional<SharedGcpCommerceProducerPriceModel>",
              "subscriptionPlans": {
                "docs": "Commit price plan, when priceModel = SUBSCRIPTION or SUBSCRIPTION_PLUS_USAGE.",
                "type": "optional<list<SharedGcpCommerceProducerPriceSubscription>>",
              },
              "usageFees": {
                "docs": "Usage based metering plan, when priceModel =  USAGE or SUBSCRIPTION_PLUS_USAGE",
                "type": "optional<list<SharedGcpCommerceProducerPriceUsage>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerPriceModel": {
            "enum": [
              "FREE",
              "SUBSCRIPTION",
              "USAGE",
              "SUBSCRIPTION_PLUS_USAGE",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerPriceSubscription": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "period": "optional<literal<"ONE_YEAR">>",
              "price": {
                "docs": "the Monthly subscription fee as commit.",
                "type": "optional<SharedGcpCommerceProducerPrice>",
              },
              "taxCategoryOverride": "optional<literal<"TAX_CATEGORY_UNSPECIFIED">>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerPriceTier": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "endUsageAmount": {
                "docs": "The usage amount below which this tier is effective.",
                "type": "optional<double>",
              },
              "price": {
                "docs": "The price of this tier",
                "type": "optional<SharedGcpCommerceProducerPrice>",
              },
              "startUsageAmount": {
                "docs": "The usage amount beyond which this tier is effective.",
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerPriceUsage": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "displayQuantity": {
                "docs": "Default value is 1.",
                "type": "optional<integer>",
              },
              "metricId": {
                "docs": "the usage metering dimension key",
                "type": "optional<string>",
              },
              "priceTiers": "optional<list<SharedGcpCommerceProducerPriceTier>>",
              "taxCategoryOverride": "optional<literal<"TAX_CATEGORY_UNSPECIFIED">>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerPurchaseMetric": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "Description: A detailed description of the metric, which can be used in documentation.",
                "type": "optional<string>",
              },
              "displayName": "optional<string>",
              "displayUnit": "optional<string>",
              "displayUnitDescription": "optional<string>",
              "id": {
                "docs": "The usage metering dimension key, in format of "{plan_key}_{usage_dimension_key}"",
                "type": "optional<string>",
              },
              "metricKind": "optional<string>",
              "name": {
                "docs": "Name: The resource name of the metric descriptor, in format of "{service_name}/{plan_key}_{usage_dimension_key}"",
                "type": "optional<string>",
              },
              "reportingUnit": "optional<string>",
              "unit": "optional<string>",
              "valueType": "optional<SharedValueType>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerPurchaseSpec": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "metrics": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
              "purchaseOptionSpecs": "optional<list<SharedGcpPurchasePlan>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerServiceBilling": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "metrics": {
                "docs": "in format of ["{product-name}.endpoints.{provider-id}.cloud.goog/{plan_key}_{usage_dimension_key}"]",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerServiceConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "billing": "optional<SharedGcpCommerceProducerServiceBilling>",
              "metrics": {
                "docs": "Metrics: Defines the metrics used by this service.",
                "type": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
              },
              "name": {
                "docs": "In format of "{product-name}.endpoints.{provider-id}.cloud.goog"",
                "type": "optional<string>",
              },
              "producerProjectId": "optional<string>",
              "title": {
                "docs": "The Product title",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpCommerceProducerSupportSpec": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": "optional<string>",
              "email": "optional<string>",
              "uri": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpIntegration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "gcpProjectId": "optional<string>",
              "gcpProjectNumber": "optional<string>",
              "identityProviderId": "optional<string>",
              "partnerId": {
                "docs": "The GCP Marketplace Partner ID, it is also called as Provider ID somewhere.",
                "type": "optional<string>",
              },
              "pubsubTopic": {
                "docs": "The resource name of the Pub/Sub topic to receive notifications from Google when a user signs up for your service, purchases a plan, or changes an existing plan.",
                "type": "optional<string>",
              },
              "reportBucket": {
                "docs": "The GCP storage bucket name to store the GCP Marketplace reports.",
                "type": "optional<string>",
              },
              "reportFullSyncDone": {
                "docs": "Is GCP Marketplace Report full-sync done.",
                "type": "optional<boolean>",
              },
              "reportStartDate": {
                "docs": "The UTC date when GCP Marketplace reprots start to generate.",
                "type": "optional<datetime>",
              },
              "serviceAccountEmail": "optional<string>",
              "serviceNames": {
                "docs": "The array of service resource names of the listings in GCP Marketplace.",
                "type": "optional<list<string>>",
              },
              "workloadIdentityPoolId": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpMarketplaceConsumer": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "project": {
                "docs": "The project name with format `projects/`.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpMarketplaceEntitlement": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account": {
                "docs": "The resource name of the account that this entitlement is based on, if any, in format ""providers/{provider_id}/accounts/{account_id}"",
                "type": "optional<string>",
              },
              "consumers": {
                "docs": "The resources using this entitlement, if applicable.",
                "type": "optional<list<SharedGcpMarketplaceConsumer>>",
              },
              "createTime": "optional<string>",
              "id": {
                "docs": "Entitlement Id generated by GCP Marketplace. For Marketplace pub/sub event.",
                "type": "optional<string>",
              },
              "inputProperties": {
                "docs": "The custom properties that were collected from the user to create this entitlement.",
                "type": "optional<list<integer>>",
              },
              "messageToUser": {
                "docs": "Provider-supplied message that is displayed to the end user. Currently this is used to communicate progress and ETA for
provisioning. This field can be updated only when a user is waiting for an action from the provider, i.e. entitlement state is
EntitlementState.ENTITLEMENT_ACTIVATION_REQUESTED or EntitlementState.ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL. This field is cleared automatically when the entitlement state changes.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "The resource name of the entitlement. Entitlement names have the form `providers/{provider_id}/entitlements/{entitlement_id}`.",
                "type": "optional<string>",
              },
              "newOfferDuration": {
                "docs": "in ISO 8601 duration format, such as "P2Y3M". For Marketplace pub/sub event.",
                "type": "optional<string>",
              },
              "newOfferEndTime": {
                "docs": "Output only. The end time of the new offer. Field is empty if the pending plan change is not moving to an offer.
If the offer was created with a term instead of a specified end date, this field is empty.",
                "type": "optional<string>",
              },
              "newOfferStartTime": {
                "docs": "Output only. The start time of the new offer. Field is empty if the pending plan change is not moving to an offer.",
                "type": "optional<string>",
              },
              "newPendingOffer": {
                "docs": "The name of the offer the entitlement is switching to upon a pending plan change. Only exists if the
pending plan change is moving to an offer. Format:
'projects/{project}/services/{service}/privateOffers/{offer-id}' OR
'projects/{project}/services/{service}/standardOffers/{offer-id}',
depending on whether the offer is private or public.",
                "type": "optional<string>",
              },
              "newPendingOfferDuration": {
                "docs": "The offer duration of the new offer in ISO 8601 duration format. Field is empty if the pending plan
change is not moving to an offer since the entitlement is not pending, only the plan change is pending.",
                "type": "optional<string>",
              },
              "newPendingPlan": {
                "docs": "The identifier of the pending new plan. Required if the product has plans and the entitlement has a pending plan change.",
                "type": "optional<string>",
              },
              "newPlan": {
                "docs": "When the buyer changes plan, For Marketplace pub/sub event.",
                "type": "optional<string>",
              },
              "offer": {
                "docs": "The name of the offer that was procured. Field is empty if order was not made using an offer. Format:
'projects/{project}/services/{service}/privateOffers/{offer-id}' OR 'projects/{project}/services/{service}/standardOffers/{offer-id}',
depending on whether the offer is private or public.",
                "type": "optional<string>",
              },
              "offerDuration": {
                "docs": "The offer duration of the current offer in ISO 8601 duration format. Field is empty if entitlement was not made using an offer, such as "P1Y", "P2M"",
                "type": "optional<string>",
              },
              "offerEndTime": {
                "docs": "Output only. End time for the Offer association corresponding to this entitlement. The field is only populated if the entitlement is currently associated with an Offer.",
                "type": "optional<string>",
              },
              "plan": {
                "docs": "The identifier of the plan that was procured. Required if the product has plans.",
                "type": "optional<string>",
              },
              "product": {
                "docs": "The identifier of the entity that was purchased. This may actually represent a product, quote, or offer.
For Private offer, "projects/project-id/services/product-id.endpoints.partner-id.cloud.goog/privateOffers/private-offer-id"",
                "type": "optional<string>",
              },
              "productExternalName": {
                "docs": "The identifier of the product that was procured.",
                "type": "optional<string>",
              },
              "provider": {
                "docs": "The ID of the service provider under Cloud Commerce platform that this entitlement was created against.",
                "type": "optional<string>",
              },
              "quoteExternalName": {
                "docs": "The identifier of the quote that was used to procure, such as the private offer Id. Empty if the order is not purchased using a quote.",
                "type": "optional<string>",
              },
              "state": {
                "docs": "Enums of the Entitlement State. https://cloud.google.com/marketplace/docs/partners/commerce-procurement-api/reference/rest/v1/providers.entitlements#EntitlementState",
                "type": "optional<SharedGcpMarketplaceEntitlementState>",
              },
              "subscriptionEndTime": {
                "docs": "The End time for the subscription corresponding to this entitlement.",
                "type": "optional<string>",
              },
              "updateTime": {
                "docs": "The last update timestamp. It is the endTime for the cancelled entitlement.",
                "type": "optional<datetime>",
              },
              "usageReportingId": {
                "docs": "The consumerId to use when reporting usage through the Service Control API. See the consumerId field at
Reporting Metrics (https://cloud.google.com/service-control/reporting-metrics) for more details.
This field is present only if the product has usage-based billing configured.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpMarketplaceEntitlementState": {
            "enum": [
              {
                "name": "STATE_UNSPECIFIED",
                "value": "ENTITLEMENT_STATE_UNSPECIFIED",
              },
              {
                "name": "ACTIVATION_REQUESTED",
                "value": "ENTITLEMENT_ACTIVATION_REQUESTED",
              },
              {
                "name": "ACTIVE",
                "value": "ENTITLEMENT_ACTIVE",
              },
              {
                "name": "PENDING_CANCELLATION",
                "value": "ENTITLEMENT_PENDING_CANCELLATION",
              },
              {
                "name": "CANCELLED",
                "value": "ENTITLEMENT_CANCELLED",
              },
              {
                "name": "PENDING_PLAN_CHANGE",
                "value": "ENTITLEMENT_PENDING_PLAN_CHANGE",
              },
              {
                "name": "PENDING_PLAN_CHANGE_APPROVAL",
                "value": "ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL",
              },
              {
                "name": "SUSPENDED",
                "value": "ENTITLEMENT_SUSPENDED",
              },
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpMarketplaceUserAccount": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "approvals": {
                "docs": "The approvals for this account, that are permitted or have been completed.",
                "type": "optional<list<SharedGcpMarketplaceUserAccountApproval>>",
              },
              "createTime": "optional<datetime>",
              "id": {
                "docs": "GCP Marketplace User Account ID.",
                "type": "optional<string>",
              },
              "inputProperties": {
                "docs": "RFC3339 UTC timestamp",
                "type": "optional<list<integer>>",
              },
              "name": {
                "docs": "The resource name of the account. Account names have the form providers/{provider_id}/accounts/{account_id}.",
                "type": "optional<string>",
              },
              "provider": {
                "docs": "The identifier of the service provider (SaaS Seller) that this account was created against.",
                "type": "optional<string>",
              },
              "state": {
                "docs": "The state of the account. An account might not be able to make a purchase if the billing account is suspended, for example.",
                "type": "optional<SharedGcpMarketplaceUserAccountState>",
              },
              "updateTime": {
                "docs": "RFC3339 UTC timestamp",
                "type": "optional<datetime>",
              },
              "userInfo": "optional<SharedGcpUserInfo>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpMarketplaceUserAccountApproval": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": "optional<string>",
              "reason": {
                "docs": "An explanation for the state of the approval.",
                "type": "optional<string>",
              },
              "state": "optional<SharedGcpMarketplaceUserAccountApprovalState>",
              "updateTime": {
                "docs": "RFC3339 UTC timestamp",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpMarketplaceUserAccountApprovalState": {
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "APPROVED",
              "REJECTED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpMarketplaceUserAccountState": {
            "enum": [
              {
                "name": "UNSPECIFIED",
                "value": "ACCOUNT_STATE_UNSPECIFIED",
              },
              {
                "name": "ACTIVE",
                "value": "ACCOUNT_ACTIVE",
              },
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpProduct": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createTime": "optional<datetime>",
              "id": {
                "docs": "Nullable, GCP Marketplace Product UUID",
                "type": "optional<string>",
              },
              "listingSpec": "optional<SharedGcpCommerceProducerListingSpec>",
              "marketplace": "optional<literal<"marketplaces/google-cloud">>",
              "name": {
                "docs": "In format of "projects/{project-number}/listings/{product-name}.endpoints.{provider-id}.cloud.goog"",
                "type": "optional<string>",
              },
              "service": {
                "docs": "In format of "services/{product-name}.endpoints.{provider-id}.cloud.goog"",
                "type": "optional<string>",
              },
              "serviceConfig": "optional<SharedGcpCommerceProducerServiceConfig>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpPurchasePlan": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "The Plan key.",
                "type": "optional<string>",
              },
              "priceInfo": "optional<SharedGcpCommerceProducerPriceInfo>",
              "purchaseMode": "optional<literal<"PURCHASE_MODE_PUBLIC">>",
              "title": {
                "docs": "The Plan title",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGcpUserInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "roles": {
                "docs": "An array of strings representing the user's roles. Right now, it can be either: ** account_admin, which indicates that the user is a Billing Account Administrator of the billing account that purchased the product, or ** project_editor, which indicates that the user is a Project Editor, but not a Billing Administrator, of the project under that billing account.",
                "type": "optional<list<string>>",
              },
              "user_identity": {
                "docs": "The user's obfuscated GAIA ID, which can be used to initiate Open ID Connect.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedHubspotCrmCredential": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accessToken": "optional<string>",
              "acquiredOn": {
                "docs": "UTC timestamp on receiving the auth response",
                "type": "optional<integer>",
              },
              "expiresIn": "optional<integer>",
              "refreshToken": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedHubspotCrmIntegration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "credential": "optional<SharedHubspotCrmCredential>",
              "portalId": {
                "docs": "Hubspot Account Id",
                "type": "optional<integer>",
              },
              "secretKey": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedIdentityBuyer": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "creationTime": "optional<datetime>",
              "description": "optional<string>",
              "externalID": "optional<string>",
              "id": "optional<string>",
              "info": "optional<SharedBuyerInfo>",
              "lastUpdateTime": "optional<datetime>",
              "name": "optional<string>",
              "organizationID": "optional<string>",
              "partner": "optional<SharedIdentityBuyerPartner>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedIdentityBuyerPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedIdentityIntegration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdBy": "optional<string>",
              "creationTime": "optional<datetime>",
              "info": "optional<SharedIntegrationInfo>",
              "lastUpdateTime": "optional<datetime>",
              "lastUpdatedBy": "optional<string>",
              "organizationID": "optional<string>",
              "partner": "optional<SharedIdentityIntegrationPartner>",
              "service": "optional<literal<"MARKETPLACE">>",
              "status": "optional<SharedIdentityIntegrationStatus>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedIdentityIntegrationPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedIdentityIntegrationStatus": {
            "enum": [
              "CREATED",
              "VERIFIED",
              "NOT_VERIFIED",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedIntegrationInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "awsAceIntegration": {
                "docs": "AWS ACE Integration",
                "type": "optional<SharedAwsAceIntegration>",
              },
              "awsIntegration": {
                "docs": "AWS Marketplace Integration",
                "type": "optional<SharedAwsMarketplaceIntegration>",
              },
              "azureIntegration": {
                "docs": "Azure Marketplace Integration",
                "type": "optional<SharedAzureIntegration>",
              },
              "gcpIntegration": {
                "docs": "GCP Marketplace Integration",
                "type": "optional<SharedGcpIntegration>",
              },
              "hubspotCrmIntegration": {
                "docs": "Integration for HubSpot CRM",
                "type": "optional<SharedHubspotCrmIntegration>",
              },
              "salesforceCrmIntegration": {
                "docs": "Integration for Salesforce CRM",
                "type": "optional<SharedSalesforceCrmIntegration>",
              },
              "slackIntegration": "optional<SharedSlackIntegration>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedListRevenueRecordDetailsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "nextOffset": "optional<integer>",
              "revenueRecordDetails": "optional<list<SharedRevenueRecordDetail>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedListRevenueRecordsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "nextOffset": "optional<integer>",
              "revenueRecords": "optional<list<SharedRevenueRecord>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedListUsageRecordGroupsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "nextOffset": "optional<integer>",
              "usageRecordGroups": "optional<list<SharedMeteringUsageRecordGroup>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedListUsageRecordReportsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "nextOffset": "optional<integer>",
              "usageRecordReports": "optional<list<SharedMeteringUsageRecordReport>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedMeteringDimension": {
            "docs": "The dimension to meter usage in entitlement.",
            "inline": undefined,
            "properties": {
              "category": "optional<string>",
              "description": "optional<string>",
              "includedBaseQuantities": {
                "docs": "how many quantities of this dimension are included in the commit.",
                "type": "optional<list<AzureIncludedBaseQuantity>>",
              },
              "key": "optional<string>",
              "name": {
                "docs": "Display name of the dimension",
                "type": "optional<string>",
              },
              "rate": "optional<double>",
              "types": "optional<list<string>>",
              "usageCount": {
                "docs": "The current Dimension Usage Count. Available when call GetEntitlement API.",
                "type": "optional<SharedUsageCount>",
              },
              "valueType": "optional<SharedValueType>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedMeteringUsageRecordGroup": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "creationTime": "optional<datetime>",
              "entitlementID": "optional<string>",
              "id": "optional<string>",
              "lastUpdateTime": "optional<datetime>",
              "metaInfo": "optional<SharedMeteringUsageRecordGroupMetaInfo>",
              "organizationID": "optional<string>",
              "records": "optional<map<string, double>>",
              "serialID": "optional<integer>",
              "status": "optional<string>",
              "usageRecordReportID": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedMeteringUsageRecordGroupMetaInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "originRecords": {
                "docs": "The original records reported by the customer before convertion. If no dimension mapping is applied, this field is the same as the records field.",
                "type": "optional<map<string, double>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedMeteringUsageRecordReport": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "creationTime": "optional<datetime>",
              "entitlementID": "optional<string>",
              "entitlementTermID": "optional<string>",
              "id": "optional<string>",
              "info": "optional<SharedMeteringUsageRecordReportInfo>",
              "organizationID": "optional<string>",
              "productID": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedMeteringUsageRecordReportInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "awsMeteringResponse": {
                "docs": "The raw response from AWS metering service.",
                "type": "optional<MarketplacemeteringBatchMeterUsageOutput>",
              },
              "azureMeteringResponse": {
                "docs": "The raw response from Azure metering service.",
                "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse>",
              },
              "commitAmount": {
                "docs": "The amount of the commit if applicable.",
                "type": "optional<double>",
              },
              "creditAmount": {
                "docs": "The amount of the credit if applicable.",
                "type": "optional<double>",
              },
              "creditRecords": {
                "docs": "The credit usage records in the map of <DimensionKey, Count>",
                "type": "optional<map<string, double>>",
              },
              "dimensionUnitPrice": {
                "docs": "The unit price of each dimension in the map of <DimensionKey, UnitPrice>",
                "type": "optional<map<string, double>>",
              },
              "endTime": {
                "docs": "time in UTC when the UsageRecordReport ends",
                "type": "optional<datetime>",
              },
              "gcpMeteringResponse": {
                "docs": "The raw response from GCP metering service.",
                "type": "optional<ServicecontrolReportResponse>",
              },
              "includedRecords": {
                "docs": "The included usage records in the map of <DimensionKey, Count>",
                "type": "optional<map<string, double>>",
              },
              "reportedRecords": {
                "docs": "The reported usage records in the map of <DimensionKey, Count>",
                "type": "optional<map<string, double>>",
              },
              "startTime": {
                "docs": "time in UTC when the UsageRecordReport starts",
                "type": "optional<datetime>",
              },
              "usageRecordGroupIds": {
                "docs": "The IDs of UsageRecordGroups aggregated in this UsageRecordReport.",
                "type": "optional<list<string>>",
              },
              "usedCommitAmount": {
                "docs": "The amount of the used commit before the this usage record report if applicable.",
                "type": "optional<double>",
              },
              "usedCommitAmountIncrement": {
                "docs": "The amount of the used commit increment in this usage record report if applicable.",
                "type": "optional<double>",
              },
              "usedCreditAmount": {
                "docs": "The amount of the used credit before the this usage record report if applicable.",
                "type": "optional<double>",
              },
              "usedCreditAmountIncrement": {
                "docs": "The amount of the used credit increment in this usage record report if applicable.",
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedNotificationEvent": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "action": "optional<SharedNotificationEventAction>",
              "entityID": "optional<string>",
              "entityStatus": "optional<string>",
              "entityType": "optional<SharedEntityType>",
              "eventID": {
                "docs": "notification event id.",
                "type": "optional<string>",
              },
              "eventStatus": {
                "docs": "notification event status.",
                "type": "optional<SharedNotificationEventStatus>",
              },
              "lastUpdateTime": {
                "docs": "timestamp of the event when it is updated.",
                "type": "optional<datetime>",
              },
              "message": "optional<string>",
              "organizationID": {
                "docs": "suger organization id.",
                "type": "optional<string>",
              },
              "timestamp": {
                "docs": "timestamp of the event when it is scheduled or created.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedNotificationEventAction": {
            "enum": [
              "ACCEPT",
              "CREATE",
              "DELETE",
              "CANCEL",
              "PENDING_CANCEL",
              "EXPIRE",
              "REINSTATE",
              "SUSPEND",
              "UPDATE",
              "NOTIFY_CONTACTS",
              "TEST",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedNotificationEventStatus": {
            "enum": [
              {
                "name": "UNKNOWN",
                "value": "",
              },
              "SCHEDULED",
              "PENDING",
              "DONE",
              "FAILED",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedOfferInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "azureOriginalPlan": {
                "docs": "The origin pricing of Azure plan. Only applicable for Azure Marketplace plans.",
                "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
              },
              "azurePrivateOffer": {
                "docs": "The private offer for Azure Marketplace. Only applicable for Azure Marketplace private offers.",
                "type": "optional<AzureMarketplacePrivateOffer>",
              },
              "azureProductVariant": "optional<AzureProductVariant>",
              "buyerAwsAccountIds": {
                "docs": "The buyers' AWS Account IDs of this offer.",
                "type": "optional<list<string>>",
              },
              "buyerAzureTenants": {
                "docs": "The buyers' Azure tenants of this offer.",
                "type": "optional<list<AzureAudience>>",
              },
              "commits": "optional<list<SharedCommitDimension>>",
              "currency": "optional<string>",
              "dimensions": "optional<list<SharedMeteringDimension>>",
              "discount": {
                "docs": "The rate of discount (0 ~ 1.0), such as 0.1 which is 10% off. 0 which is no discount.",
                "type": "optional<double>",
              },
              "eulaType": "optional<SharedEulaType>",
              "eulaUrl": "optional<string>",
              "gcpMetrics": {
                "docs": "Only applicable for GCP Marketplace Offers (the default or private offer)",
                "type": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
              },
              "gcpPlans": {
                "docs": "Only applicable for GCP Marketplace Offers (the default or private offer).",
                "type": "optional<list<SharedGcpPurchasePlan>>",
              },
              "paymentInstallments": {
                "docs": "For flexible payment schedule. Not empty if it is enabled.",
                "type": "optional<list<SharedPaymentInstallment>>",
              },
              "privateOfferUrl": {
                "docs": "The URL of the private offer sent to buyers to accept. Only applicable for private offer.",
                "type": "optional<string>",
              },
              "refundCancelationPolicy": "optional<string>",
              "sellerNotes": "optional<string>",
              "visibility": {
                "docs": "The default visibility of offer is PRIVATE.",
                "type": "optional<SharedOfferInfoVisibility>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedOfferInfoVisibility": {
            "docs": "The default visibility of offer is PRIVATE.",
            "enum": [
              "PRIVATE",
              "PUBLIC",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedOfferMetaInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "baseAgreementId": {
                "docs": "Applicable for AWS Marketplace only, when the IsAgreementBasedOffer is true.",
                "type": "optional<string>",
              },
              "contacts": {
                "docs": "The contacts of the offer to notify if any updates.",
                "type": "optional<list<SharedContact>>",
              },
              "isAgreementBasedOffer": {
                "docs": "Applicable for AWS Marketplace only, If this offer is agreement based offer.",
                "type": "optional<boolean>",
              },
              "isRenewalOffer": {
                "docs": "Applicable for AWS Marketplace only, If this offer is renewal offer.",
                "type": "optional<boolean>",
              },
              "notifications": {
                "docs": "The notifications of the offer if any updates. In most cases, it is to notify contacts/buyers when the offer is pending acceptance.",
                "type": "optional<list<SharedNotificationEvent>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedOperation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "endTime": "optional<datetime>",
              "id": {
                "docs": "Operation ID.",
                "type": "optional<string>",
              },
              "message": "optional<string>",
              "name": "optional<string>",
              "startTime": "optional<datetime>",
              "status": "optional<string>",
              "type": "optional<SharedOperationType>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedOperationType": "literal<"TemporalWorkflow">",
          "SharedPaymentInstallment": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "amount": "optional<double>",
              "chargeOn": "optional<datetime>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedProductInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "attributes": "optional<map<string, string>>",
              "awsSaasProduct": "optional<SharedAwsSaasProduct>",
              "awsSnsSubscriptions": "optional<list<SharedAwsSnsSubscription>>",
              "azureProduct": "optional<AzureProduct>",
              "commits": "optional<list<SharedCommitDimension>>",
              "currency": "optional<string>",
              "dimensions": "optional<list<SharedMeteringDimension>>",
              "eulaUrl": "optional<string>",
              "gcpProduct": "optional<SharedGcpProduct>",
              "refundCancelationPolicy": "optional<string>",
              "sellerNotes": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedRevenueRecord": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "The revenue amount for the revenue report",
                "type": "optional<double>",
              },
              "buyerID": "optional<string>",
              "collectableAmount": {
                "docs": "The revenue amount that the seller/ISV can collect.",
                "type": "optional<double>",
              },
              "currency": {
                "docs": "The currency of the revenue in ISO 4217 format, such as "USD".",
                "type": "optional<string>",
              },
              "date": {
                "docs": "The date for the revenue report",
                "type": "optional<datetime>",
              },
              "disburseAmount": "optional<double>",
              "disburseDate": "optional<datetime>",
              "entitlementID": "optional<string>",
              "id": "optional<string>",
              "info": "optional<SharedRevenueRecordInfo>",
              "invoiceAmount": "optional<double>",
              "invoiceDate": "optional<datetime>",
              "organizationID": "optional<string>",
              "partner": "optional<string>",
              "paymentDueDate": "optional<datetime>",
              "productID": "optional<string>",
              "refundDisburseAmount": "optional<double>",
              "refundDisburseDate": "optional<datetime>",
              "refundInvoiceAmount": "optional<double>",
              "refundInvoiceDate": "optional<datetime>",
              "taxAmount": "optional<double>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedRevenueRecordDetail": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "awsRevenueRecordDetail": {
                "docs": "For AWS Marketplace",
                "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent>",
              },
              "azureRevenueRecordDetail": {
                "docs": "For Azure Marketplace",
                "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue>",
              },
              "gcpRevenueRecordDetail": {
                "docs": "For GCP Marketplace",
                "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedRevenueRecordInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "awsRevenueRecords": {
                "docs": "For raw revenue records in AWS Marketplace",
                "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent>>",
              },
              "azureRevenueRecords": {
                "docs": "For raw revenue records in Azure Marketplace",
                "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue>>",
              },
              "gcpRevenueRecords": {
                "docs": "For raw revenue records in GCP Marketplace",
                "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedRevenueReport": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "buyerID": "optional<string>",
              "entitlementID": "optional<string>",
              "organizationID": "optional<string>",
              "partner": "optional<string>",
              "productID": "optional<string>",
              "reportDate": "optional<datetime>",
              "reportType": "optional<SharedRevenueReportType>",
              "revenueRecords": "optional<list<SharedRevenueRecord>>",
              "service": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedRevenueReportType": {
            "enum": [
              "InvoicedAmount",
              "CollectableAmount",
              "DisbursedAmount",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedSalesforceCrmCredential": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_token": "optional<string>",
              "exp": "optional<integer>",
              "instance_url": "optional<string>",
              "refresh_token": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedSalesforceCrmIntegration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "credential": {
                "docs": "System created",
                "type": "optional<SharedSalesforceCrmCredential>",
              },
              "filters": "optional<list<SharedSalesforceSyncFilter>>",
              "instanceUrl": "optional<string>",
              "isSandbox": "optional<boolean>",
              "secretKey": "optional<string>",
              "subdomain": {
                "docs": "User defined when setting up the integration",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedSalesforceSyncFilter": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "fieldName": "optional<string>",
              "operator": "optional<string>",
              "value": "optional<unknown>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedSlackIntegration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accessToken": "optional<string>",
              "appId": "optional<string>",
              "authedUser": "optional<SlackOAuthV2ResponseAuthedUser>",
              "botUserId": "optional<string>",
              "enterprise": "optional<SlackOAuthV2ResponseEnterprise>",
              "expiresIn": "optional<integer>",
              "incomingWebhook": "optional<SlackOAuthResponseIncomingWebhook>",
              "redirectUrl": "optional<string>",
              "refreshToken": "optional<string>",
              "scope": {
                "docs": "The scope of the access token. multiple scopes are separated by comma.",
                "type": "optional<string>",
              },
              "team": "optional<SlackOAuthV2ResponseTeam>",
              "tokenType": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedUsageCount": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "creditCount": {
                "docs": "The count of this dimension usage records that are handled as credit.",
                "type": "optional<double>",
              },
              "includedCount": {
                "docs": "The count of this dimension usage records that are handled as included in IncludedBaseQuantity",
                "type": "optional<double>",
              },
              "reportedCount": {
                "docs": "The count of this dimension usage records that are reported to cloud vendors.",
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedUsageReport": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "entitlementID": "optional<string>",
              "organizationID": "optional<string>",
              "reportDate": "optional<datetime>",
              "usageRecords": "optional<list<SharedEntitlementUsageRecord>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedValueType": {
            "enum": [
              {
                "name": "UNSPECIFIED",
                "value": "VALUE_TYPE_UNSPECIFIED",
              },
              "BOOL",
              "INT64",
              "DOUBLE",
              "STRING",
              "DISTRIBUTION",
              "MONEY",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadEntitlement": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "buyerID": "optional<string>",
              "creationTime": "optional<datetime>",
              "endTime": {
                "docs": "nullable",
                "type": "optional<datetime>",
              },
              "entitlementTermID": "optional<string>",
              "externalBuyerID": "optional<string>",
              "externalID": "optional<string>",
              "externalProductID": "optional<string>",
              "id": "optional<string>",
              "info": "optional<SharedEntitlementInfo>",
              "lastUpdateTime": "optional<datetime>",
              "name": "optional<string>",
              "offerID": "optional<string>",
              "organizationID": "optional<string>",
              "partner": "optional<SharedWorkloadEntitlementPartner>",
              "productID": "optional<string>",
              "service": "optional<literal<"MARKETPLACE">>",
              "startTime": "optional<datetime>",
              "status": "optional<SharedWorkloadEntitlementStatus>",
              "type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadEntitlementPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadEntitlementStatus": {
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "SUSPENDED",
              "PENDING_START",
              "UNKNOWN",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadEntitlementTerm": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "buyerID": "optional<string>",
              "commitAmount": "optional<double>",
              "creditAmount": "optional<double>",
              "endTime": {
                "docs": "nullable",
                "type": "optional<datetime>",
              },
              "entitlementID": "optional<string>",
              "entitlementInfo": "optional<SharedEntitlementInfo>",
              "externalEntitlementID": "optional<string>",
              "id": "optional<string>",
              "info": "optional<SharedEntitlementTermInfo>",
              "offerID": "optional<string>",
              "organizationID": "optional<string>",
              "partner": "optional<SharedWorkloadEntitlementTermPartner>",
              "productID": "optional<string>",
              "service": "optional<literal<"MARKETPLACE">>",
              "startTime": "optional<datetime>",
              "usedCommitAmount": "optional<double>",
              "usedCreditAmount": "optional<double>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadEntitlementTermPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadOffer": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdBy": "optional<string>",
              "creationTime": "optional<datetime>",
              "endTime": {
                "docs": "nullable",
                "type": "optional<datetime>",
              },
              "expireTime": {
                "docs": "nullable",
                "type": "optional<datetime>",
              },
              "externalID": "optional<string>",
              "id": "optional<string>",
              "info": "optional<SharedOfferInfo>",
              "lastUpdateTime": "optional<datetime>",
              "lastUpdatedBy": "optional<string>",
              "metaInfo": "optional<SharedOfferMetaInfo>",
              "name": "optional<string>",
              "offerType": "optional<SharedWorkloadOfferOfferType>",
              "organizationID": "optional<string>",
              "partner": "optional<SharedWorkloadOfferPartner>",
              "productID": "optional<string>",
              "service": "optional<literal<"MARKETPLACE">>",
              "status": "optional<SharedWorkloadOfferStatus>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadOfferOfferType": {
            "enum": [
              "DEFAULT",
              "CONTRACT",
              "SUBSCRIPTION",
              "FREE_TRIAL",
              "FLAT_RATE",
              "PER_USER",
              "PRIVATE",
              "UNKNOWN",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadOfferPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadOfferStatus": {
            "enum": [
              "ACCEPTED",
              "PENDING_CREATE",
              "CREATE_FAILED",
              "CREATE_SUCCESS",
              "DRAFT",
              "EXPIRED",
              "PENDING_ACCEPTANCE",
              "PENDING_CANCEL",
              "CANCEL_FAILED",
              "CANCEL_SUCCESS",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadProduct": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdBy": "optional<string>",
              "creationTime": "optional<datetime>",
              "externalID": "optional<string>",
              "fulfillmentUrl": "optional<string>",
              "id": "optional<string>",
              "info": "optional<SharedProductInfo>",
              "lastUpdateTime": "optional<datetime>",
              "lastUpdatedBy": "optional<string>",
              "name": "optional<string>",
              "organizationID": "optional<string>",
              "partner": "optional<SharedWorkloadProductPartner>",
              "productType": "optional<SharedWorkloadProductProductType>",
              "service": "optional<literal<"MARKETPLACE">>",
              "status": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadProductPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedWorkloadProductProductType": {
            "enum": [
              "UNKNOWN",
              "SUBSCRIPTION",
              "CONTRACT",
              "FLAT_RATE",
              "PER_USER",
              "USAGE_BASED",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SlackOAuthResponseIncomingWebhook": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "channel": "optional<string>",
              "channel_id": "optional<string>",
              "configuration_url": "optional<string>",
              "url": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SlackOAuthV2ResponseAuthedUser": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "access_token": "optional<string>",
              "expires_in": "optional<integer>",
              "id": "optional<string>",
              "refresh_token": "optional<string>",
              "scope": "optional<string>",
              "token_type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SlackOAuthV2ResponseEnterprise": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": "optional<string>",
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SlackOAuthV2ResponseTeam": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": "optional<string>",
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SqlNullTime": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "time": "optional<string>",
              "valid": {
                "docs": "Valid is true if Time is not NULL",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TypesEntitlement": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "customerIdentifier": {
                "docs": "The customer identifier is a handle to each unique customer in an application.
Customer identifiers are obtained through the ResolveCustomer operation in AWS
Marketplace Metering Service.",
                "type": "optional<string>",
              },
              "dimension": {
                "docs": "The dimension for which the given entitlement applies. Dimensions represent
categories of capacity in a product and are specified when the product is listed
in AWS Marketplace.",
                "type": "optional<string>",
              },
              "expirationDate": {
                "docs": "The expiration date represents the minimum date through which this entitlement
is expected to remain valid. For contractual products listed on AWS Marketplace,
the expiration date is the date at which the customer will renew or cancel their
contract. Customers who are opting to renew their contract will still have
entitlements with an expiration date.",
                "type": "optional<string>",
              },
              "productCode": {
                "docs": "The product code for which the given entitlement applies. Product codes are
provided by AWS Marketplace when the product listing is created.",
                "type": "optional<string>",
              },
              "value": "optional<unknown>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TypesUsageAllocation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allocatedUsageQuantity": {
                "docs": "The total quantity allocated to this bucket of usage.

This member is required.",
                "type": "optional<integer>",
              },
              "tags": {
                "docs": "The set of tags that define the bucket of usage. For the bucket of items with no
tags, this parameter can be left out.",
                "type": "optional<list<GithubComAwsAwsSdkGoV2ServiceMarketplacemeteringTypesTag>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TypesUsageRecord": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "customerIdentifier": {
                "docs": "The CustomerIdentifier is obtained through the ResolveCustomer operation and
represents an individual buyer in your application.

This member is required.",
                "type": "optional<string>",
              },
              "dimension": {
                "docs": "During the process of registering a product on AWS Marketplace, dimensions are
specified. These represent different units of value in your application.

This member is required.",
                "type": "optional<string>",
              },
              "quantity": {
                "docs": "The quantity of usage consumed by the customer for the given dimension and time.
Defaults to 0 if not specified.",
                "type": "optional<integer>",
              },
              "timestamp": {
                "docs": "Timestamp, in UTC, for which the usage is being reported. Your application can
meter usage for up to one hour in the past. Make sure the timestamp value is not
before the start of the software usage.

This member is required.",
                "type": "optional<string>",
              },
              "usageAllocations": {
                "docs": "The set of UsageAllocations to submit. The sum of all UsageAllocation quantities
must equal the Quantity of the UsageRecord.",
                "type": "optional<list<TypesUsageAllocation>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TypesUsageRecordResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "meteringRecordId": {
                "docs": "The MeteringRecordId is a unique identifier for this metering event.",
                "type": "optional<string>",
              },
              "status": {
                "docs": "The UsageRecordResultStatus indicates the status of an individual UsageRecord
processed by BatchMeterUsage.

* Success- The UsageRecord was accepted and
honored by BatchMeterUsage.

* CustomerNotSubscribed- The CustomerIdentifier
specified is not able to use your product. The UsageRecord was not honored.
There are three causes for this result:

* The customer identifier is
invalid.

* The customer identifier provided in the metering record does not
have an active agreement or subscription with this product. Future UsageRecords
for this customer will fail until the customer subscribes to your product.

*
The customer's AWS account was suspended.

* DuplicateRecord- Indicates that the
UsageRecord was invalid and not honored. A previously metered UsageRecord had
the same customer, dimension, and time, but a different quantity.",
                "type": "optional<TypesUsageRecordResultStatus>",
              },
              "usageRecord": {
                "docs": "The UsageRecord that was part of the BatchMeterUsage request.",
                "type": "optional<TypesUsageRecord>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TypesUsageRecordResultStatus": {
            "enum": [
              "Success",
              "CustomerNotSubscribed",
              "DuplicateRecord",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "errors:
  ListBuyersByOrganizationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetBuyerRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  UpdateBuyerNameDescriptionRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListEntitlementsByBuyerRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  CreateOrUpdateDraftOfferRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateOrUpdateDraftOfferRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListEntitlementsRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetEntitlementRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  AddEntitlementCreditRequestBadRequestError:
    status-code: 400
    type: string
    docs: Bad Request
    examples:
      - value: string
  AddEntitlementCreditRequestInternalServerError:
    status-code: 500
    type: string
    docs: Internal Server Error
    examples:
      - value: string
  UpdateEntitlementNameRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListEntitlementTermsRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetEntitlementTermRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListUsageRecordGroupsByEntitlementRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUsageRecordGroupsByEntitlementRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ReportUsageRecordGroupRequestBadRequestError:
    status-code: 400
    type: string
    docs: all the quantity of usage records are zero
    examples:
      - value: string
  ReportUsageRecordGroupRequestConflictError:
    status-code: 409
    type: string
    docs: Conflict request error description
    examples:
      - value: string
  ReportUsageRecordGroupRequestInternalServerError:
    status-code: 500
    type: string
    docs: internal error description
    examples:
      - value: string
  ListUsageRecordReportsByEntitlementRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUsageRecordReportsByEntitlementRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListIntegrationsByOrganizationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  CreateIntegrationRequestBadRequestError:
    status-code: 400
    type: string
    docs: Bad request error description
    examples:
      - value: string
  CreateIntegrationRequestInternalServerError:
    status-code: 500
    type: string
    docs: internal error description
    examples:
      - value: string
  GetIntegrationRequestNotFoundError:
    status-code: 404
    type: string
    docs: Integration not found
    examples:
      - value: string
  GetIntegrationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  DeleteIntegrationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  UpdateIntegrationRequestBadRequestError:
    status-code: 400
    type: string
    docs: Bad request error description
    examples:
      - value: string
  UpdateIntegrationRequestInternalServerError:
    status-code: 500
    type: string
    docs: internal error description
    examples:
      - value: string
  VerifyIntegrationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListOffersByOrganizationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  CreateOfferRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CreateOfferRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetOfferRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  DeleteOfferRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  CancelOfferRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  CancelOfferRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListEntitlementsByOfferRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListOperationsRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListEntitlementsByPartnerRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListOffersByPartnerRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListProductsByPartnerRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListRevenueRecordsRequestBadRequestError:
    status-code: 400
    type: string
    docs: Bad request error description
    examples:
      - value: string
  ListRevenueRecordsRequestInternalServerError:
    status-code: 500
    type: string
    docs: internal error description
    examples:
      - value: string
  ListRevenueRecordDetailsRequestBadRequestError:
    status-code: 400
    type: string
    docs: Bad request error description
    examples:
      - value: string
  ListRevenueRecordDetailsRequestInternalServerError:
    status-code: 500
    type: string
    docs: internal error description
    examples:
      - value: string
  ListProductsByOrganizationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetProductRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  DeleteProductRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  UpdateProductRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListProductMeteringDimensionsRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListEntitlementsByProductRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListOffersByProductRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListUsageRecordGroupsByProductRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUsageRecordGroupsByProductRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListUsageRecordReportsByProductRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUsageRecordReportsByProductRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetRevenueReportRequestBadRequestError:
    status-code: 400
    type: string
    docs: Bad request error description
    examples:
      - value: string
  GetRevenueReportRequestInternalServerError:
    status-code: 500
    type: string
    docs: internal error description
    examples:
      - value: string
  ListUsageRecordGroupsByOrganizationRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUsageRecordGroupsByOrganizationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetUsageRecordGroupRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  ListUsageRecordReportsByOrganizationRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  ListUsageRecordReportsByOrganizationRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetUsageRecordReportRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
  GetUsageReportRequestBadRequestError:
    status-code: 400
    type: string
    docs: Bad request error description
    examples:
      - value: string
  GetUsageReportRequestInternalServerError:
    status-code: 500
    type: string
    docs: internal error description
    examples:
      - value: string
  GetApiClientAccessTokenRequestInternalServerError:
    status-code: 500
    type: unknown
    docs: Internal Server Error
types:
  AzureAudience:
    properties:
      description: optional<string>
      id: optional<string>
    source:
      openapi: ../swagger.json
  AzureGovernmentCertification:
    properties:
      title: optional<string>
      uri: optional<string>
      validationResults: optional<list<AzureValidationResult>>
    source:
      openapi: ../swagger.json
  AzureIncludedBaseQuantityRecurringUnit:
    enum:
      - Monthly
      - Annual
    inline: true
    source:
      openapi: ../swagger.json
  AzureIncludedBaseQuantity:
    properties:
      isInfinite: optional<boolean>
      quantity: optional<double>
      recurringUnit: optional<AzureIncludedBaseQuantityRecurringUnit>
    source:
      openapi: ../swagger.json
  AzureListingContactType:
    enum:
      - CustomerSupport
      - Engineering
      - ChannelManager
    inline: true
    source:
      openapi: ../swagger.json
  AzureListingContact:
    properties:
      email: optional<string>
      name: optional<string>
      phone: optional<string>
      type: optional<AzureListingContactType>
      uri: optional<string>
    source:
      openapi: ../swagger.json
  AzureListingUri:
    properties:
      displayText: optional<string>
      subtype: optional<string>
      type: optional<string>
      uri: optional<string>
    source:
      openapi: ../swagger.json
  AzureLocalizedDateTime:
    properties:
      dateTimeInUtc: optional<string>
      localizePerMarket: optional<boolean>
    source:
      openapi: ../swagger.json
  AzureLocalizedTimeRange:
    properties:
      endAt: optional<AzureLocalizedDateTime>
      startAt: optional<AzureLocalizedDateTime>
    source:
      openapi: ../swagger.json
  AzureMarket:
    properties:
      friendlyName: optional<string>
      marketCode:
        type: optional<string>
        docs: ISO Country Code
    source:
      openapi: ../swagger.json
  AzureMarketStateState:
    enum:
      - Disabled
      - Enabled
      - StopSelling
      - Terminated
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketState:
    properties:
      marketCode:
        type: optional<string>
        docs: ISO Country Code
      state: optional<AzureMarketStateState>
    source:
      openapi: ../swagger.json
  AzureMarketplacePrice:
    properties:
      currency:
        type: optional<string>
        docs: ISO 4217 currency code
      markets: optional<list<string>>
      price:
        type: optional<double>
        docs: default 0
      prices: optional<unknown>
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferPrivateOfferType:
    enum:
      - customerPromotion
      - cspPromotion
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferState:
    enum:
      - draft
      - live
      - withdrawn
      - deleted
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferSubState:
    enum:
      - pendingAcceptance
      - accepted
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOffer:
    properties:
      $schema: optional<string>
      acceptBy:
        type: optional<datetime>
        docs: in format YYYY-MM-DD
      acceptanceLinks: optional<list<AzureMarketplacePrivateOfferAcceptanceLink>>
      beneficiaries:
        type: optional<list<AzureMarketplacePrivateOfferBeneficiary>>
        docs: array of email addresses.
      eTag: optional<string>
      end:
        type: optional<datetime>
        docs: in format YYYY-MM-DD
      id:
        type: optional<string>
        docs: in format of "private-offer/private-offer-durable-id"
      lastModified:
        type: optional<datetime>
        docs: in format YYYY-MM-DD
      name: optional<string>
      notificationContacts:
        type: optional<list<string>>
        docs: >-
          array of email addresses of the users to be notified of any changes in
          the private offer status.
      preparedBy: optional<string>
      pricing:
        type: optional<list<AzureMarketplacePrivateOfferPricing>>
        docs: Up to 10 pricing entries are allowed.
      privateOfferType: optional<AzureMarketplacePrivateOfferPrivateOfferType>
      resourceName: optional<string>
      start:
        type: optional<datetime>
        docs: >-
          in format YYYY-MM-DD, if VariableStartDate = true, this field should
          be empty.
      state: optional<AzureMarketplacePrivateOfferState>
      subState: optional<AzureMarketplacePrivateOfferSubState>
      termsAndConditionsDocSasUrl: optional<string>
      upgradedFrom: optional<AzureMarketplacePrivateOfferPromotionReference>
      validations: optional<list<AzureMarketplaceValidation>>
      variableStartDate: optional<boolean>
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferAcceptanceLink:
    properties:
      beneficiaryId:
        type: optional<string>
        docs: The Customer Billing Account ID.
      link: optional<string>
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferBeneficiary:
    properties:
      beneficiaryRecipients: optional<list<AzureMarketplacePrivateOfferBeneficiaryRecipient>>
      description: optional<string>
      id:
        type: optional<string>
        docs: the customer billing account id.
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferBeneficiaryRecipientRecipientType:
    enum:
      - cspCustomer
      - billingGroup
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferBeneficiaryRecipient:
    properties:
      id: optional<string>
      recipientType: optional<AzureMarketplacePrivateOfferBeneficiaryRecipientRecipientType>
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferPricingDiscountType:
    enum:
      - percentage
      - absolute
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferPricingPlanType:
    enum:
      - FLAT_RATE
      - PER_USER
    docs: The type of the plan, FLAT_RATE or PER_USER.
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferPricing:
    properties:
      discountPercentage:
        type: optional<double>
        docs: between 0 and 100
      discountType: optional<AzureMarketplacePrivateOfferPricingDiscountType>
      originalPlan:
        type: optional<AzurePriceAndAvailabilityPrivateOfferPlan>
        docs: the pricing plan of the original plan.
      plan:
        type: optional<string>
        docs: in format of "plan/product-durable-id/plan-durable-id"
      planName: optional<string>
      planType:
        type: optional<AzureMarketplacePrivateOfferPricingPlanType>
        docs: The type of the plan, FLAT_RATE or PER_USER.
      priceDetails: optional<string>
      privateOfferPlan:
        type: optional<AzurePriceAndAvailabilityPrivateOfferPlan>
        docs: the pricing plan of the private offer
      product:
        type: optional<string>
        docs: in format of "product/product-durable-id"
      sugerOfferId: optional<string>
    source:
      openapi: ../swagger.json
  AzureMarketplacePrivateOfferPromotionReference:
    properties:
      id: optional<string>
      name: optional<string>
    source:
      openapi: ../swagger.json
  AzureMarketplaceTermType:
    enum:
      - day
      - week
      - month
      - year
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplaceTerm:
    properties:
      type: optional<AzureMarketplaceTermType>
      value:
        type: optional<double>
        docs: default 0
    source:
      openapi: ../swagger.json
  AzureMarketplaceValidationCode:
    enum:
      - businessValidationError
      - collectionLimitExceeded
      - invalidId
      - invalidEntityStatus
      - invalidRequest
      - invalidResource
      - invalidState
      - notDeployed
      - notSupported
      - operationCanceled
      - productLocked
      - resourceNotFound
      - schemaValidationError
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplaceValidationLevel:
    enum:
      - informational
      - warning
    inline: true
    source:
      openapi: ../swagger.json
  AzureMarketplaceValidation:
    properties:
      $schema: optional<string>
      code: optional<AzureMarketplaceValidationCode>
      level: optional<AzureMarketplaceValidationLevel>
      message: optional<string>
      resourceId: optional<string>
    source:
      openapi: ../swagger.json
  AzurePendingUpdateInfo:
    properties:
      status: optional<string>
      updateType: optional<string>
    source:
      openapi: ../swagger.json
  AzurePrice:
    properties:
      currencyCode:
        type: optional<string>
        docs: ISO currency code, Three characters
      openPrice: optional<double>
      priceTierID: optional<string>
    source:
      openapi: ../swagger.json
  AzurePriceAndAvailabilityPrivateOfferCustomMetersPriceInputOption:
    enum:
      - perMarket
      - usd
    docs: default "usd"
    inline: true
    source:
      openapi: ../swagger.json
  AzurePriceAndAvailabilityPrivateOfferCustomMeters:
    properties:
      meters: optional<unknown>
      priceInputOption:
        type: >-
          optional<AzurePriceAndAvailabilityPrivateOfferCustomMetersPriceInputOption>
        docs: default "usd"
    source:
      openapi: ../swagger.json
  AzurePriceAndAvailabilityPrivateOfferPlan:
    properties:
      $schema: optional<string>
      id: optional<string>
      plan: optional<string>
      pricing: optional<AzurePriceAndAvailabilityPrivateOfferPrice>
      product: optional<string>
      resourceName: optional<string>
      validations: optional<list<AzureMarketplaceValidation>>
    source:
      openapi: ../swagger.json
  AzurePriceAndAvailabilityPrivateOfferPrice:
    properties:
      customMeters: optional<AzurePriceAndAvailabilityPrivateOfferCustomMeters>
      recurrentPrice: optional<AzurePriceAndAvailabilityRecurrentPrice>
    source:
      openapi: ../swagger.json
  AzurePriceAndAvailabilityRecurrentPricePriceInputOption:
    enum:
      - perMarket
      - usd
    docs: default "usd"
    inline: true
    source:
      openapi: ../swagger.json
  AzurePriceAndAvailabilityRecurrentPrice:
    properties:
      priceInputOption:
        type: optional<AzurePriceAndAvailabilityRecurrentPricePriceInputOption>
        docs: default "usd"
      prices: optional<list<AzurePriceAndAvailabilityRecurrentPriceItem>>
    source:
      openapi: ../swagger.json
  AzurePriceAndAvailabilityRecurrentPriceItem:
    properties:
      billingTerm: optional<AzureMarketplaceTerm>
      paymentOption: optional<AzureMarketplaceTerm>
      pricePerPaymentInUsd: optional<double>
      prices: optional<list<AzureMarketplacePrice>>
    source:
      openapi: ../swagger.json
  AzurePriceCadenceType:
    enum:
      - Month
      - Year
    inline: true
    source:
      openapi: ../swagger.json
  AzurePriceCadence:
    properties:
      type: optional<AzurePriceCadenceType>
      value: optional<integer>
    source:
      openapi: ../swagger.json
  AzurePriceSchedulePricingModel:
    enum:
      - Flat
      - Recurring
      - Usage
    inline: true
    source:
      openapi: ../swagger.json
  AzurePriceSchedule:
    properties:
      priceCadence: optional<AzurePriceCadence>
      pricingModel: optional<AzurePriceSchedulePricingModel>
      pricingUnits: optional<list<AzurePricingUnit>>
      retailPrice: optional<AzurePrice>
    source:
      openapi: ../swagger.json
  AzurePricingUnitName:
    enum:
      - sharedcore
      - transactions
    inline: true
    source:
      openapi: ../swagger.json
  AzurePricingUnit:
    properties:
      isUnlimitedUnit: optional<boolean>
      lowerUnit: optional<integer>
      name: optional<AzurePricingUnitName>
      unitType: optional<string>
      upperUnit: optional<integer>
    source:
      openapi: ../swagger.json
  AzureProduct:
    properties:
      availabilities: optional<list<AzureProductAvailability>>
      branches: optional<list<AzureProductBranch>>
      externalIDs: optional<list<AzureTypeValue>>
      id: optional<string>
      isModularPublishing: optional<boolean>
      listings: optional<list<AzureProductListing>>
      name: optional<string>
      packageConfigurations: optional<list<AzureProductPackageConfiguration>>
      properties: optional<list<AzureProductProperty>>
      resourceType: optional<string>
      setup:
        type: optional<AzureProductSetup>
        docs: Not original fields. They are populated by other API calls
      submissions: optional<list<AzureProductSubmission>>
      variants: optional<list<AzureProductVariant>>
    source:
      openapi: ../swagger.json
  AzureProductAvailability:
    properties:
      emailAudiences: optional<list<AzureAudience>>
      enterpriseLicensing: optional<string>
      id: optional<string>
      resourceType: optional<string>
      subscriptionAudiences: optional<list<AzureAudience>>
      visibility: optional<string>
    source:
      openapi: ../swagger.json
  AzureProductBranch:
    properties:
      currentDraftInstanceID: optional<string>
      friendlyName: optional<string>
      id: optional<string>
      module: optional<string>
      resourceType: optional<string>
      type: optional<string>
      variantID: optional<string>
    source:
      openapi: ../swagger.json
  AzureProductFeatureAvailabilityVisibility:
    enum:
      - Public
      - Private
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductFeatureAvailability:
    properties:
      customMeters: optional<list<AzureProductVariantCustomMeter>>
      id: optional<string>
      isHidden: optional<boolean>
      marketStates: optional<list<AzureMarketState>>
      markets: optional<list<AzureMarket>>
      priceSchedules: optional<list<AzureProductVariantPriceSchedule>>
      properties: optional<list<AzureTypeValue>>
      resourceType:
        type: optional<string>
        docs: ResourceType = FeatureAvailability
      subscriptionAudiences: optional<list<AzureAudience>>
      tenantAudiences: optional<list<AzureAudience>>
      trial: optional<AzureProductVariantTrial>
      visibility: optional<AzureProductFeatureAvailabilityVisibility>
    source:
      openapi: ../swagger.json
  AzureProductListing:
    properties:
      accessInformation: optional<string>
      assets:
        type: optional<list<AzureProductListingAsset>>
        docs: Not original fields. They are populated by other API calls
      compatibleProducts: optional<list<string>>
      description: optional<string>
      gettingStartedInstructions: optional<string>
      id: optional<string>
      keywords: optional<list<string>>
      languageCode: optional<string>
      listingContacts: optional<list<AzureListingContact>>
      listingUris: optional<list<AzureListingUri>>
      productDisplayName: optional<string>
      publisherName: optional<string>
      resourceType: optional<literal<"AzureListing">>
      shortDescription: optional<string>
      summary: optional<string>
      title: optional<string>
    source:
      openapi: ../swagger.json
  AzureProductListingAssetResourceType:
    enum:
      - ListingAsset
      - ListingImage
      - ListingVideo
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductListingAssetState:
    enum:
      - PendingUpload
      - Uploaded
      - InProcessing
      - Processed
      - ProcessFailed
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductListingAsset:
    properties:
      description: optional<string>
      fileName: optional<string>
      fileSasUri: optional<string>
      friendlyName: optional<string>
      id: optional<string>
      order: optional<integer>
      publisherDefinedSasUri: optional<string>
      resourceType: optional<AzureProductListingAssetResourceType>
      state: optional<AzureProductListingAssetState>
      type: optional<string>
    source:
      openapi: ../swagger.json
  AzureProductPackageConfiguration:
    properties:
      azureActiveDirectoryApplicationID: optional<string>
      azureActiveDirectoryTenantID: optional<string>
      connectionWebhook: optional<string>
      id: optional<string>
      landingPageUri: optional<string>
      resourceType: optional<literal<"AzureSoftwareAsAServicePackageConfiguration">>
    source:
      openapi: ../swagger.json
  AzureProductProperty:
    properties:
      additionalCategories: optional<list<string>>
      appVersion: optional<string>
      applicableProducts: optional<list<string>>
      categories: optional<list<string>>
      customAmendments: optional<list<string>>
      extendedProperties: optional<list<string>>
      globalAmendmentTerms: optional<string>
      hideKeys: optional<list<string>>
      id: optional<string>
      industries: optional<list<string>>
      leveledCategories: optional<map<string, unknown>>
      leveledIndustries: optional<map<string, unknown>>
      marketingOnlyChange: optional<boolean>
      productTags: optional<list<string>>
      resourceType: optional<string>
      submissionVersion: optional<string>
      termsOfUse: optional<string>
      useEnterpriseContract: optional<boolean>
    source:
      openapi: ../swagger.json
  AzureProductSetupCallToAction:
    enum:
      - free
      - value: free-trial
        name: FreeTrial
      - value: contact-me
        name: ContactMe
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductSetupSellingOption:
    enum:
      - ListingOnly
      - ListAndSell
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductSetup:
    properties:
      callToAction: optional<AzureProductSetupCallToAction>
      channelStates: optional<list<AzureTypeValue>>
      enableTestDrive: optional<boolean>
      resourceType: optional<literal<"AzureProductSetup">>
      sellingOption: optional<AzureProductSetupSellingOption>
      testDriveType: optional<string>
      trialUri: optional<string>
    source:
      openapi: ../swagger.json
  AzureProductSubmissionState:
    enum:
      - Inprogress
      - Published
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductSubmissionSubState:
    enum:
      - InDraft
      - Submitted
      - Failed
      - FailedInCertification
      - ReadyToPublish
      - Publishing
      - Published
      - InStore
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductSubmission:
    properties:
      areResourcesReady: optional<boolean>
      friendlyName: optional<string>
      id: optional<string>
      pendingUpdateInfo: optional<AzurePendingUpdateInfo>
      publishedTimeInUtc: optional<datetime>
      releaseNumber: optional<integer>
      resourceType: optional<literal<"Submission">>
      resources: optional<list<AzureTypeValue>>
      state: optional<AzureProductSubmissionState>
      subState: optional<AzureProductSubmissionSubState>
      targets: optional<list<AzureTypeValue>>
      variantResources: optional<list<AzureVariantResource>>
    source:
      openapi: ../swagger.json
  AzureProductVariantResourceType:
    enum:
      - AzureSkuVariant
      - AzureTestDriveVariant
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductVariantState:
    enum:
      - InActive
      - Active
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductVariant:
    properties:
      azureGovernmentCertifications: optional<list<AzureGovernmentCertification>>
      cloudAvailabilities: optional<list<string>>
      conversionPaths: optional<string>
      extendedProperties: optional<list<AzureTypeValue>>
      externalID: optional<string>
      featureAvailabilities:
        type: optional<list<AzureProductFeatureAvailability>>
        docs: Not original fields. They are populated by other API calls
      friendlyName: optional<string>
      id: optional<string>
      leadGenID: optional<string>
      referenceVariantID: optional<string>
      resourceType: optional<AzureProductVariantResourceType>
      state: optional<AzureProductVariantState>
    source:
      openapi: ../swagger.json
  AzureProductVariantCustomMeter:
    properties:
      displayName: optional<string>
      id: optional<string>
      includedBaseQuantities: optional<list<AzureIncludedBaseQuantity>>
      isEnabled: optional<boolean>
      priceInUsd: optional<double>
      uniqueID: optional<string>
      unitOfMeasure: optional<string>
    source:
      openapi: ../swagger.json
  AzureProductVariantPriceSchedule:
    properties:
      dateTimeRange: optional<AzureLocalizedTimeRange>
      friendlyName: optional<string>
      isBaseSchedule:
        type: optional<boolean>
        docs: There is only one base schedule.
      marketCodes:
        type: optional<list<string>>
        docs: ISO country code
      schedules: optional<list<AzurePriceSchedule>>
    source:
      openapi: ../swagger.json
  AzureProductVariantTrialDurationType:
    enum:
      - Minute
      - Days
      - Months
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductVariantTrialType:
    enum:
      - NoTrial
      - TimedAccess
      - TimedUsage
      - Unlimited
    inline: true
    source:
      openapi: ../swagger.json
  AzureProductVariantTrial:
    properties:
      dateTimeRange: optional<AzureLocalizedTimeRange>
      duration: optional<integer>
      durationType: optional<AzureProductVariantTrialDurationType>
      type: optional<AzureProductVariantTrialType>
    source:
      openapi: ../swagger.json
  AzureTypeValue:
    properties:
      type: optional<string>
      value: optional<string>
    source:
      openapi: ../swagger.json
  AzureValidationResult:
    properties:
      errorMessage: optional<string>
      memberNames: optional<list<string>>
    source:
      openapi: ../swagger.json
  AzureVariantResource:
    properties:
      resources: optional<list<AzureTypeValue>>
      variantID: optional<string>
    source:
      openapi: ../swagger.json
  GithubComAwsAwsSdkGoV2ServiceMarketplacemeteringTypesTag:
    properties:
      key:
        type: optional<string>
        docs: >-
          One part of a key-value pair that makes up a tag. A key is a label
          that acts

          like a category for the specific tag values.


          This member is required.
      value:
        type: optional<string>
        docs: >-
          One part of a key-value pair that makes up a tag. A value acts as a
          descriptor

          within a tag category (key). The value can be empty or null.


          This member is required.
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse:
    properties:
      count: optional<integer>
      result: >-
        optional<list<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageBatchEventOkMessage>>
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageBatchEventOkMessage:
    properties:
      dimension:
        type: optional<string>
        docs: Dimension identifier
      effectiveStartTime:
        type: optional<string>
        docs: Time in UTC when the usage event occurred
      error: >-
        optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponse>
      messageTime:
        type: optional<string>
        docs: Time this message was created in UTC
      planId:
        type: optional<string>
        docs: Plan associated with the purchased offer
      quantity:
        type: optional<double>
        docs: Number of units consumed
      resourceId:
        type: optional<string>
        docs: Identifier of the resource against which usage is emitted
      resourceUri:
        type: optional<string>
        docs: Identifier of the managed app resource against which usage is emitted
      status:
        type: >-
          optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum>
        docs: Status of the operation.
      usageEventId:
        type: optional<string>
        docs: Unique identifier associated with the usage event
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponse:
    properties:
      additionalInfo: >-
        optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponseAdditionalInfo>
      code: optional<string>
      message: optional<string>
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponseAdditionalInfo:
    properties:
      acceptedMessage: >-
        optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventOkResponse>
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventOkResponse:
    properties:
      dimension:
        type: optional<string>
        docs: Dimension identifier
      effectiveStartTime:
        type: optional<string>
        docs: Time in UTC when the usage event occurred
      messageTime:
        type: optional<string>
        docs: Time this message was created in UTC
      planId:
        type: optional<string>
        docs: Plan associated with the purchased offer
      quantity:
        type: optional<double>
        docs: Number of units consumed
      resourceId:
        type: optional<string>
        docs: Identifier of the resource against which usage is emitted
      resourceUri:
        type: optional<string>
        docs: Identifier of the managed app resource against which usage is emitted
      status:
        type: >-
          optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum>
        docs: Status of the operation.
      usageEventId:
        type: optional<string>
        docs: Unique identifier associated with the usage event
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum:
    enum:
      - Accepted
      - Expired
      - Duplicate
      - Error
      - ResourceNotFound
      - ResourceNotAuthorized
      - InvalidDimension
      - InvalidQuantity
      - BadArgument
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent:
    properties:
      action: optional<string>
      agreementID: optional<string>
      amount: optional<double>
      balanceImpacting: optional<integer>
      bankTraceID: optional<string>
      billingAddressID: optional<string>
      brokerID: optional<string>
      buyerID: optional<string>
      currency: optional<string>
      dataFeedProductID: optional<string>
      disbursementBillingEventID: optional<string>
      endUserAccountID: optional<string>
      entitlementID: optional<string>
      fromAccountID: optional<string>
      id: optional<string>
      insertDate: optional<SqlNullTime>
      invoiceDate: optional<SqlNullTime>
      invoiceID: optional<string>
      offerID: optional<string>
      organizationID: optional<string>
      parentBillingEventID: optional<string>
      paymentDueDate: optional<SqlNullTime>
      productID: optional<string>
      toAccountID: optional<string>
      transactionReferenceID: optional<string>
      transactionType: optional<string>
      usagePeriodEndDate: optional<SqlNullTime>
      usagePeriodStartDate: optional<SqlNullTime>
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue:
    properties:
      azureAssetID: optional<string>
      azureBillingAccountID: optional<string>
      azureCustomerID: optional<string>
      azureOfferID: optional<string>
      azurePlanID: optional<string>
      billingModel: optional<string>
      buyerID: optional<string>
      earningUsd: optional<double>
      entitlementID: optional<string>
      offerID: optional<string>
      organizationID: optional<string>
      payoutStatus: optional<string>
      productID: optional<string>
      purchaseRecordID: optional<string>
      revenueUsd: optional<double>
      termEndDate: optional<string>
      termStartDate: optional<string>
    source:
      openapi: ../swagger.json
  GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage:
    properties:
      abandoned: optional<double>
      accountID: optional<string>
      buyerID: optional<string>
      charges: optional<double>
      currency: optional<string>
      dueVendor: optional<double>
      entitlementID: optional<string>
      googleEntity: optional<string>
      insightAccountID: optional<string>
      offerID: optional<string>
      organizationID: optional<string>
      paymentSchedule: optional<string>
      paymentType: optional<string>
      prepayCredits: optional<double>
      productID: optional<string>
      refundBalanceDeductedThisMonth: optional<double>
      refundBalanceOutstanding: optional<double>
      refundReason: optional<string>
      released: optional<double>
      reportDate: optional<string>
      resource: optional<string>
      sku: optional<string>
      trialUse: optional<double>
      unit: optional<string>
      usage: optional<double>
      usedBy: optional<string>
      withheld: optional<double>
    source:
      openapi: ../swagger.json
  MarketplacemeteringBatchMeterUsageOutput:
    properties:
      resultMetadata:
        type: optional<MiddlewareMetadata>
        docs: Metadata pertaining to the operation's result.
      results:
        type: optional<list<TypesUsageRecordResult>>
        docs: >-
          Contains all UsageRecords processed by BatchMeterUsage. These records
          were

          either honored by AWS Marketplace Metering Service or were invalid.
          Invalid

          records should be fixed before being resubmitted.
      unprocessedRecords:
        type: optional<list<TypesUsageRecord>>
        docs: >-
          Contains all UsageRecords that were not processed by BatchMeterUsage.
          This is a

          list of UsageRecords. You can retry the failed request by making
          another

          BatchMeterUsage call with this list as input in the
          BatchMeterUsageRequest.
    source:
      openapi: ../swagger.json
  MiddlewareMetadata: map<string, unknown>
  ServicecontrolReportError:
    properties:
      operationId:
        type: optional<string>
        docs: 'OperationId: The Operation.operation_id value from the request.'
      status:
        type: optional<ServicecontrolStatus>
        docs: 'Status: Details of the error when processing the Operation.'
    source:
      openapi: ../swagger.json
  ServicecontrolReportResponse:
    properties:
      reportErrors:
        type: optional<list<ServicecontrolReportError>>
        docs: |-
          ReportErrors: Partial failures, one for each `Operation` in the
          request that failed processing. There are three possible combinations
          of the RPC status: 1. The combination of a successful RPC status and
          an empty `report_errors` list indicates a complete success where all
          `Operations` in the request are processed successfully. 2. The
          combination of a successful RPC status and a non-empty
          `report_errors` list indicates a partial success where some
          `Operations` in the request succeeded. Each `Operation` that failed
          processing has a corresponding item in this list. 3. A failed RPC
          status indicates a general non-deterministic failure. When this
          happens, it's impossible to know which of the 'Operations' in the
          request succeeded or failed.
      serviceConfigId:
        type: optional<string>
        docs: 'ServiceConfigId: The actual config id used to process the request.'
      serviceRolloutId:
        type: optional<string>
        docs: |-
          ServiceRolloutId: The current service rollout id used to process the
          request.
    source:
      openapi: ../swagger.json
  ServicecontrolStatus:
    properties:
      code:
        type: optional<integer>
        docs: |-
          Code: The status code, which should be an enum value of
          google.rpc.Code.
      details:
        type: optional<list<list<integer>>>
        docs: |-
          Details: A list of messages that carry the error details. There is a
          common set of message types for APIs to use.
      message:
        type: optional<string>
        docs: |-
          Message: A developer-facing error message, which should be in
          English. Any user-facing error message should be localized and sent
          in the google.rpc.Status.details field, or localized by the client.
    source:
      openapi: ../swagger.json
  SharedAddEntitlementCreditResponse:
    properties:
      creditAmountIncrement:
        type: optional<double>
        docs: The amount to be added to the credit amount.
      entitlementID: optional<string>
      entitlementTermID: optional<string>
      newCreditAmount:
        type: optional<double>
        docs: The new credit amount after the increment.
      organizationID: optional<string>
    source:
      openapi: ../swagger.json
  SharedApiClientAccessToken:
    properties:
      access_token: optional<string>
      expires_in:
        type: optional<integer>
        docs: The token expires in 1 hour
        default: 3600
      token_type:
        type: optional<string>
        default: Bearer
    source:
      openapi: ../swagger.json
  SharedAwsAccountIdentifier:
    properties:
      awsAccountID:
        type: optional<string>
        docs: The AWS Account ID of the buyer in AWS Marketplace
      awsCustomerID:
        type: optional<string>
        docs: The AWS Customer ID of the buyer in AWS Marketplace
      companyInfo: optional<SharedCompanyInfo>
      dataFeedAccountID:
        type: optional<string>
        docs: The Account ID in AWS Marketplace Data Feed service
    source:
      openapi: ../swagger.json
  SharedAwsAceIntegration:
    properties:
      credential: optional<SharedAwsIntegrationCredential>
      partnerId:
        type: optional<string>
        docs: The partner ID of the ISV/Seller in AWS Partner Network.
      s3BucketName:
        type: optional<string>
        docs: >-
          The Name of the S3 bucket for AWS APN Customer Engagement Program
          (ACE) to sync the leads & opportunities.
      s3BucketRegion:
        type: optional<string>
        docs: >-
          The region of the S3 bucket for AWS APN Customer Engagement Program
          (ACE) to sync the leads & opportunities.
      secretKey:
        type: optional<string>
        docs: >-
          The secret key used to store the AzureIntegrationCredential in AWS
          Secret manager. for internal usage only.
    source:
      openapi: ../swagger.json
  SharedAwsIntegrationCredential:
    properties:
      accessKeyId:
        type: optional<string>
        docs: >-
          The access key ID of the IAM user for Suger service to access the
          client's AWS services.
      iamUserArn:
        type: optional<string>
        docs: >-
          The ARN of the IAM user for Suger service to access the client's AWS
          services.
      secretAccessKey:
        type: optional<string>
        docs: >-
          The secret access key of the IAM user for Suger service to access the
          client's AWS services.
    source:
      openapi: ../swagger.json
  SharedAwsMarketplaceIntegration:
    docs: >-
      The data struct to store integration info for Suger service to access the
      client's AWS services.
    properties:
      externalID:
        type: optional<string>
        docs: >-
          The external ID for assuming IAM role. If empty, means no external ID
          set or needed. Otherwise, it should be auth_id in table
          identity.organization.
      iamRoleArn:
        type: optional<string>
        docs: >-
          The AWS IAM role for Suger service to assume to access the client's
          AWS services.
      marketplaceStartDate:
        type: optional<datetime>
        docs: AWS Marketplace start date which comes from MDFS Full-Sync.
      mcasFullSyncDone:
        type: optional<boolean>
        docs: Is AWS Marketplace Commerce Analytics Service (MCAS) full-sync done.
      mcasIamRoleArn:
        type: optional<string>
        docs: >-
          IAM role ARN to allow AWS Marketplace to write to the S3 bucket and
          publish notifications to the SNS topic.
      mcasS3Bucket:
        type: optional<string>
        docs: S3 bucket for AWS Marketplace Commerce Analytics Service (MCAS)
      mcasSnsTopic:
        type: optional<string>
        docs: SNS topic ARN for AWS Marketplace Commerce Analytics Service (MCAS)
      mdfsFullSyncDone:
        type: optional<boolean>
        docs: Is AWS Marketplace Data Feeds Service (MDFS) full-sync done.
      mdfsKmsKeyArn:
        type: optional<string>
        docs: >-
          KMS Key ARN for the S3 bucket of AWS Marketplace Data Feeds Service
          (MDFS)
      mdfsS3BucketArn:
        type: optional<string>
        docs: S3 bucket ARN for AWS Marketplace Data Feeds Service (MDFS)
      policyArns:
        type: optional<list<string>>
        docs: The policy ARNs in the IAM role.
      revenueRecordFullSyncDone:
        type: optional<boolean>
        docs: Is AWS Marketplace Revenue Record full-sync done.
    source:
      openapi: ../swagger.json
  SharedAwsSaasProduct:
    properties:
      Description: optional<SharedAwsSaasProductDescription>
      Dimensions: optional<list<SharedAwsSaasProductDimension>>
      PromotionalResources: optional<SharedAwsSaasProductPromotionalResources>
      SupportInformation: optional<SharedAwsSaasProductSupportInformation>
      Versions: optional<list<SharedAwsSaasProductVersion>>
      dataFeedProductId:
        type: optional<string>
        docs: The product Id in AWS Marketplace Data Feed Service.
      productId: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSaasProductAdditionalResource:
    properties:
      Text: optional<string>
      Type: optional<string>
      Url: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSaasProductDeliveryOption:
    properties:
      FulfillmentUrl: optional<string>
      Id: optional<string>
      Type: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSaasProductDescription:
    properties:
      AssociatedProducts: optional<string>
      Categories: optional<list<string>>
      EuW8Submitted: optional<boolean>
      Highlights: optional<list<string>>
      LongDescription: optional<string>
      Manufacturer: optional<string>
      ProductCode: optional<string>
      ProductTitle: optional<string>
      Registered: optional<boolean>
      SearchKeywords: optional<list<string>>
      ShortDescription: optional<string>
      Sku: optional<string>
      UsW9Submitted: optional<boolean>
      Visibility: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSaasProductDimension:
    properties:
      Description: optional<string>
      Key: optional<string>
      Name: optional<string>
      Types: optional<list<string>>
      Unit: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSaasProductPromotionalResources:
    properties:
      AdditionalResources: optional<list<SharedAwsSaasProductAdditionalResource>>
      LogoUrl: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSaasProductSupportInformation:
    properties:
      Description: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSaasProductVersion:
    properties:
      DeliveryOptions: optional<list<SharedAwsSaasProductDeliveryOption>>
      Id: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSnsSubscription:
    properties:
      Endpoint: optional<string>
      Protocol: optional<string>
      Status: optional<SharedAwsSnsSubscriptionStatus>
      SubscriptionArn: optional<string>
      TopicArn: optional<string>
    source:
      openapi: ../swagger.json
  SharedAwsSnsSubscriptionStatus:
    enum:
      - UNKNOWN
      - CONFIRMED
      - PENDING_CONFIRMATION
    source:
      openapi: ../swagger.json
  SharedAzureAdIdentifier:
    properties:
      buyerInfo: optional<SharedAzureBuyerInfo>
      companyInfo: optional<SharedCompanyInfo>
      emailId:
        type: optional<string>
        docs: Email address
      objectId: optional<string>
      puid:
        type: optional<string>
        docs: ID of the user, used as External ID of suger IdentityBuyer.
      tenantId: optional<string>
    source:
      openapi: ../swagger.json
  SharedAzureBuyerInfo:
    properties:
      billingAccountId: optional<string>
      customerId: optional<string>
      firstName: optional<string>
      lastName: optional<string>
    source:
      openapi: ../swagger.json
  SharedAzureIntegration:
    properties:
      cmaFullSyncDone:
        type: optional<boolean>
        docs: Is Azure Commercial Marketplace Analytics (CMA) full-sync done.
      credential: optional<SharedAzureIntegrationCredential>
      secretKey:
        type: optional<string>
        docs: >-
          The secret key used to store the AzureIntegrationCredential in AWS
          Secret manager. for internal usage only.
    source:
      openapi: ../swagger.json
  SharedAzureIntegrationCredential:
    properties:
      accessToken: optional<string>
      clientID: optional<string>
      clientSecret: optional<string>
      expiresOn:
        type: optional<string>
        docs: The time when the access token expires.
      refreshToken:
        type: optional<string>
        docs: The refresh token used to refresh the access token.
      tenantID: optional<string>
      tokenScope: optional<string>
      tokenType: optional<string>
    source:
      openapi: ../swagger.json
  SharedAzureMarketplaceSubscriptionAllowedCustomerOperationsItem:
    enum:
      - Read
      - Update
      - Delete
    inline: true
    source:
      openapi: ../swagger.json
  SharedAzureMarketplaceSubscriptionSandboxType:
    enum:
      - None
      - Csp
    inline: true
    source:
      openapi: ../swagger.json
  SharedAzureMarketplaceSubscriptionSessionMode:
    enum:
      - None
      - DryRun
    inline: true
    source:
      openapi: ../swagger.json
  SharedAzureMarketplaceSubscription:
    properties:
      allowedCustomerOperations: >-
        optional<list<SharedAzureMarketplaceSubscriptionAllowedCustomerOperationsItem>>
      autoRenew: optional<boolean>
      beneficiary: optional<SharedAzureAdIdentifier>
      created: optional<datetime>
      fulfillmentId: optional<string>
      id: optional<string>
      isFreeTrial: optional<boolean>
      isTest: optional<boolean>
      lastModified: optional<string>
      name: optional<string>
      offerId: optional<string>
      planId: optional<string>
      publisherId: optional<string>
      purchaser: optional<SharedAzureAdIdentifier>
      quantity: optional<integer>
      saasSubscriptionStatus: optional<SharedAzureMarketplaceSubscriptionStatus>
      sandboxType: optional<SharedAzureMarketplaceSubscriptionSandboxType>
      sessionId: optional<string>
      sessionMode: optional<SharedAzureMarketplaceSubscriptionSessionMode>
      storeFront: optional<string>
      term: optional<SharedAzureTerm>
    source:
      openapi: ../swagger.json
  SharedAzureMarketplaceSubscriptionStatus:
    enum:
      - NotStarted
      - PendingFulfillmentStart
      - Subscribed
      - Suspended
      - Unsubscribed
    source:
      openapi: ../swagger.json
  SharedAzureTerm:
    properties:
      chargeDuration: optional<string>
      endDate: optional<datetime>
      startDate: optional<datetime>
      termUnit: optional<string>
    source:
      openapi: ../swagger.json
  SharedBuyerInfo:
    properties:
      awsBuyer:
        type: optional<SharedAwsAccountIdentifier>
        docs: Buyer from AWS Marketplace
      azureBuyer:
        type: optional<SharedAzureAdIdentifier>
        docs: Buyer from Azure Marketplace
      collectableAmount:
        type: optional<double>
        docs: >-
          The amount that the seller can collect. It excludes the marketplace
          commision fee.
      disbursedAmount:
        type: optional<double>
        docs: The amount that has been disbursed to the seller account.
      gcpBuyer:
        type: optional<SharedGcpMarketplaceUserAccount>
        docs: Buyer from GCP Marketplace
      invoicedAmount:
        type: optional<double>
        docs: The amount that the buyer has got invoiced.
    source:
      openapi: ../swagger.json
  SharedCommitDimension:
    docs: >-
      The commit dimension. There may be one or more commit dimensions defined
      in single product, offer or entitlement.
    properties:
      category: optional<string>
      description: optional<string>
      isUserCreated:
        type: optional<boolean>
        docs: >-
          Whether this commit dimension is newly created by user when creating
          AWS Marketplace Contract private offer.
      key:
        type: optional<string>
        docs: API name of the dimension
      length:
        type: optional<integer>
        docs: >-
          The term length for the commit amount, such as 6 months, or 1 year.
          length is used together with timeUnit
      maximumUsers:
        type: optional<integer>
        docs: The maximum number of users for PER_USER commit
        default: 1000000
        validation:
          min: 1
          max: 1000000
      minimumUsers:
        type: optional<integer>
        docs: The minimum number of users for PER_USER commit
        default: 1
        validation:
          min: 1
          max: 1000000
      name:
        type: optional<string>
        docs: Display name of the dimension
      quantity:
        type: optional<integer>
        docs: The quantity of this commit.
      rate:
        type: optional<double>
        docs: The commit amount.
      timeUnit:
        type: optional<SharedCommitDimensionTimeUnit>
        docs: The term unit for the commit amount.
      type: optional<SharedCommitDimensionType>
      types: optional<list<string>>
    source:
      openapi: ../swagger.json
  SharedCommitDimensionTimeUnit:
    enum:
      - DAY
      - MONTH
      - YEAR
    source:
      openapi: ../swagger.json
  SharedCommitDimensionType:
    enum:
      - FLAT_RATE
      - PER_USER
    source:
      openapi: ../swagger.json
  SharedCompanyInfo:
    properties:
      addressLine1: optional<string>
      addressLine2: optional<string>
      city: optional<string>
      country: optional<string>
      emailDomain: optional<string>
      name: optional<string>
      postalCode: optional<string>
      state: optional<string>
    source:
      openapi: ../swagger.json
  SharedContact:
    properties:
      company: optional<string>
      email: optional<string>
      name: optional<string>
    source:
      openapi: ../swagger.json
  SharedEntitlementInfo:
    properties:
      autoRenew:
        type: optional<boolean>
        docs: Is this Entitlement Auto Renew enabled.
      awsEntitlements:
        type: optional<list<TypesEntitlement>>
        docs: Nullable. AWS Entitlements from AWS Marketplace.
      azureSubscriptions:
        type: optional<list<SharedAzureMarketplaceSubscription>>
        docs: Nullable. Azure Subscriptions from Azure Marketplace.
      collectableAmount:
        type: optional<double>
        docs: >-
          The amount that the seller can collect. It excludes the marketplace
          commision fee.
      commitAmount:
        type: optional<double>
        docs: >-
          The amount that the buyer has committed to pay. It can be the sum of
          payment installments if applicable.
      commits:
        type: optional<list<SharedCommitDimension>>
        docs: The dimensions for commit.
      currency:
        type: optional<string>
        docs: The default Currency is USD.
      dimensions:
        type: optional<list<SharedMeteringDimension>>
        docs: The dimensions for usage-based metering.
      disbursedAmount:
        type: optional<double>
        docs: The amount that has been disbursed to the seller account.
      discount:
        type: optional<double>
        docs: >-
          The rate of discount (0 ~ 1.0), such as 0.1 which is 10% off. 0 which
          is no discount.
      eulaType: optional<SharedEulaType>
      eulaUrl: optional<string>
      gcpEntitlements:
        type: optional<list<SharedGcpMarketplaceEntitlement>>
        docs: Nullable. GCP Entitlements from GCP Marketplace.
      gcpPlans:
        type: optional<list<SharedGcpPurchasePlan>>
        docs: Only applicable for GCP Marketplace Entitlements.
      invoicedAmount:
        type: optional<double>
        docs: The amount that the buyer has got invoiced.
      paymentInstallments:
        type: optional<list<SharedPaymentInstallment>>
        docs: For flexible payment schedules
      refundCancelationPolicy: optional<string>
      sellerNotes: optional<string>
    source:
      openapi: ../swagger.json
  SharedEntitlementTermInfo:
    properties:
      type: optional<SharedEntitlementTermType>
    source:
      openapi: ../swagger.json
  SharedEntitlementTermType:
    enum:
      - value: ''
        name: Unknown
      - AutoRenew
      - ManualRenew
      - PlanChange
      - QuantityChange
      - Signup
    source:
      openapi: ../swagger.json
  SharedEntitlementUsageRecord:
    properties:
      amounts: optional<list<double>>
      date: optional<datetime>
      keys: optional<list<string>>
      quantities: optional<list<double>>
    source:
      openapi: ../swagger.json
  SharedEntityType:
    enum:
      - ORGANIZATION
      - PRODUCT
      - OFFER
      - ENTITLEMENT
      - ENTITLEMENT_TERM
      - INTEGRATION
    source:
      openapi: ../swagger.json
  SharedEulaType:
    enum:
      - value: ''
        name: UNKNOWN
      - SCMP
      - ECMP
      - CUSTOM
      - ISV
      - CURRENT
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerExternalAccountSpec:
    properties:
      loginUri: optional<string>
      signupUri: optional<string>
      singleSignOnUri: optional<string>
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerListingSpec:
    properties:
      externalAccountSpec: optional<SharedGcpCommerceProducerExternalAccountSpec>
      listingType: optional<literal<"BillingIntegratedManagedService">>
      marketingSpec: optional<SharedGcpCommerceProducerMarketingSpec>
      purchaseSpec: optional<SharedGcpCommerceProducerPurchaseSpec>
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerMarketingSpec:
    properties:
      description: optional<string>
      displayNames:
        type: optional<list<string>>
        docs: In format of "{provider-id}/{product-name}"
      eulaUrl: optional<string>
      externalMarketingUrl: optional<string>
      icon:
        type: optional<string>
        docs: In format of "base64://..."
      searchCategories: optional<list<string>>
      searchDescription: optional<string>
      searchKeywords: optional<list<string>>
      shortTitle: optional<string>
      supportSpec: optional<SharedGcpCommerceProducerSupportSpec>
      title:
        type: optional<string>
        docs: The product title.
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerPrice:
    properties:
      currencyCode:
        type: optional<string>
        docs: ISO currency code, Three UPPER_CASE characters
      nanos:
        type: optional<integer>
        docs: >-
          Decimal part of the price. For example, 2000000 = 0.002, 200000000 =
          0.2
      units:
        type: optional<integer>
        docs: Integer part of the price.
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerPriceInfo:
    properties:
      description: optional<string>
      priceModel: optional<SharedGcpCommerceProducerPriceModel>
      subscriptionPlans:
        type: optional<list<SharedGcpCommerceProducerPriceSubscription>>
        docs: >-
          Commit price plan, when priceModel = SUBSCRIPTION or
          SUBSCRIPTION_PLUS_USAGE.
      usageFees:
        type: optional<list<SharedGcpCommerceProducerPriceUsage>>
        docs: >-
          Usage based metering plan, when priceModel =  USAGE or
          SUBSCRIPTION_PLUS_USAGE
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerPriceModel:
    enum:
      - FREE
      - SUBSCRIPTION
      - USAGE
      - SUBSCRIPTION_PLUS_USAGE
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerPriceSubscription:
    properties:
      period: optional<literal<"ONE_YEAR">>
      price:
        type: optional<SharedGcpCommerceProducerPrice>
        docs: the Monthly subscription fee as commit.
      taxCategoryOverride: optional<literal<"TAX_CATEGORY_UNSPECIFIED">>
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerPriceTier:
    properties:
      endUsageAmount:
        type: optional<double>
        docs: The usage amount below which this tier is effective.
      price:
        type: optional<SharedGcpCommerceProducerPrice>
        docs: The price of this tier
      startUsageAmount:
        type: optional<double>
        docs: The usage amount beyond which this tier is effective.
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerPriceUsage:
    properties:
      displayQuantity:
        type: optional<integer>
        docs: Default value is 1.
      metricId:
        type: optional<string>
        docs: the usage metering dimension key
      priceTiers: optional<list<SharedGcpCommerceProducerPriceTier>>
      taxCategoryOverride: optional<literal<"TAX_CATEGORY_UNSPECIFIED">>
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerPurchaseMetric:
    properties:
      description:
        type: optional<string>
        docs: >-
          Description: A detailed description of the metric, which can be used
          in documentation.
      displayName: optional<string>
      displayUnit: optional<string>
      displayUnitDescription: optional<string>
      id:
        type: optional<string>
        docs: >-
          The usage metering dimension key, in format of
          "{plan_key}_{usage_dimension_key}"
      metricKind: optional<string>
      name:
        type: optional<string>
        docs: >-
          Name: The resource name of the metric descriptor, in format of
          "{service_name}/{plan_key}_{usage_dimension_key}"
      reportingUnit: optional<string>
      unit: optional<string>
      valueType: optional<SharedValueType>
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerPurchaseSpec:
    properties:
      metrics: optional<list<SharedGcpCommerceProducerPurchaseMetric>>
      purchaseOptionSpecs: optional<list<SharedGcpPurchasePlan>>
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerServiceBilling:
    properties:
      metrics:
        type: optional<list<string>>
        docs: >-
          in format of
          ["{product-name}.endpoints.{provider-id}.cloud.goog/{plan_key}_{usage_dimension_key}"]
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerServiceConfig:
    properties:
      billing: optional<SharedGcpCommerceProducerServiceBilling>
      metrics:
        type: optional<list<SharedGcpCommerceProducerPurchaseMetric>>
        docs: 'Metrics: Defines the metrics used by this service.'
      name:
        type: optional<string>
        docs: In format of "{product-name}.endpoints.{provider-id}.cloud.goog"
      producerProjectId: optional<string>
      title:
        type: optional<string>
        docs: The Product title
    source:
      openapi: ../swagger.json
  SharedGcpCommerceProducerSupportSpec:
    properties:
      description: optional<string>
      email: optional<string>
      uri: optional<string>
    source:
      openapi: ../swagger.json
  SharedGcpIntegration:
    properties:
      gcpProjectId: optional<string>
      gcpProjectNumber: optional<string>
      identityProviderId: optional<string>
      partnerId:
        type: optional<string>
        docs: >-
          The GCP Marketplace Partner ID, it is also called as Provider ID
          somewhere.
      pubsubTopic:
        type: optional<string>
        docs: >-
          The resource name of the Pub/Sub topic to receive notifications from
          Google when a user signs up for your service, purchases a plan, or
          changes an existing plan.
      reportBucket:
        type: optional<string>
        docs: The GCP storage bucket name to store the GCP Marketplace reports.
      reportFullSyncDone:
        type: optional<boolean>
        docs: Is GCP Marketplace Report full-sync done.
      reportStartDate:
        type: optional<datetime>
        docs: The UTC date when GCP Marketplace reprots start to generate.
      serviceAccountEmail: optional<string>
      serviceNames:
        type: optional<list<string>>
        docs: >-
          The array of service resource names of the listings in GCP
          Marketplace.
      workloadIdentityPoolId: optional<string>
    source:
      openapi: ../swagger.json
  SharedGcpMarketplaceConsumer:
    properties:
      project:
        type: optional<string>
        docs: The project name with format `projects/`.
    source:
      openapi: ../swagger.json
  SharedGcpMarketplaceEntitlement:
    properties:
      account:
        type: optional<string>
        docs: >-
          The resource name of the account that this entitlement is based on, if
          any, in format ""providers/{provider_id}/accounts/{account_id}"
      consumers:
        type: optional<list<SharedGcpMarketplaceConsumer>>
        docs: The resources using this entitlement, if applicable.
      createTime: optional<string>
      id:
        type: optional<string>
        docs: >-
          Entitlement Id generated by GCP Marketplace. For Marketplace pub/sub
          event.
      inputProperties:
        type: optional<list<integer>>
        docs: >-
          The custom properties that were collected from the user to create this
          entitlement.
      messageToUser:
        type: optional<string>
        docs: >-
          Provider-supplied message that is displayed to the end user. Currently
          this is used to communicate progress and ETA for

          provisioning. This field can be updated only when a user is waiting
          for an action from the provider, i.e. entitlement state is

          EntitlementState.ENTITLEMENT_ACTIVATION_REQUESTED or
          EntitlementState.ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL. This field
          is cleared automatically when the entitlement state changes.
      name:
        type: optional<string>
        docs: >-
          The resource name of the entitlement. Entitlement names have the form
          `providers/{provider_id}/entitlements/{entitlement_id}`.
      newOfferDuration:
        type: optional<string>
        docs: >-
          in ISO 8601 duration format, such as "P2Y3M". For Marketplace pub/sub
          event.
      newOfferEndTime:
        type: optional<string>
        docs: >-
          Output only. The end time of the new offer. Field is empty if the
          pending plan change is not moving to an offer.

          If the offer was created with a term instead of a specified end date,
          this field is empty.
      newOfferStartTime:
        type: optional<string>
        docs: >-
          Output only. The start time of the new offer. Field is empty if the
          pending plan change is not moving to an offer.
      newPendingOffer:
        type: optional<string>
        docs: >-
          The name of the offer the entitlement is switching to upon a pending
          plan change. Only exists if the

          pending plan change is moving to an offer. Format:

          'projects/{project}/services/{service}/privateOffers/{offer-id}' OR

          'projects/{project}/services/{service}/standardOffers/{offer-id}',

          depending on whether the offer is private or public.
      newPendingOfferDuration:
        type: optional<string>
        docs: >-
          The offer duration of the new offer in ISO 8601 duration format. Field
          is empty if the pending plan

          change is not moving to an offer since the entitlement is not pending,
          only the plan change is pending.
      newPendingPlan:
        type: optional<string>
        docs: >-
          The identifier of the pending new plan. Required if the product has
          plans and the entitlement has a pending plan change.
      newPlan:
        type: optional<string>
        docs: When the buyer changes plan, For Marketplace pub/sub event.
      offer:
        type: optional<string>
        docs: >-
          The name of the offer that was procured. Field is empty if order was
          not made using an offer. Format:

          'projects/{project}/services/{service}/privateOffers/{offer-id}' OR
          'projects/{project}/services/{service}/standardOffers/{offer-id}',

          depending on whether the offer is private or public.
      offerDuration:
        type: optional<string>
        docs: >-
          The offer duration of the current offer in ISO 8601 duration format.
          Field is empty if entitlement was not made using an offer, such as
          "P1Y", "P2M"
      offerEndTime:
        type: optional<string>
        docs: >-
          Output only. End time for the Offer association corresponding to this
          entitlement. The field is only populated if the entitlement is
          currently associated with an Offer.
      plan:
        type: optional<string>
        docs: >-
          The identifier of the plan that was procured. Required if the product
          has plans.
      product:
        type: optional<string>
        docs: >-
          The identifier of the entity that was purchased. This may actually
          represent a product, quote, or offer.

          For Private offer,
          "projects/project-id/services/product-id.endpoints.partner-id.cloud.goog/privateOffers/private-offer-id"
      productExternalName:
        type: optional<string>
        docs: The identifier of the product that was procured.
      provider:
        type: optional<string>
        docs: >-
          The ID of the service provider under Cloud Commerce platform that this
          entitlement was created against.
      quoteExternalName:
        type: optional<string>
        docs: >-
          The identifier of the quote that was used to procure, such as the
          private offer Id. Empty if the order is not purchased using a quote.
      state:
        type: optional<SharedGcpMarketplaceEntitlementState>
        docs: >-
          Enums of the Entitlement State.
          https://cloud.google.com/marketplace/docs/partners/commerce-procurement-api/reference/rest/v1/providers.entitlements#EntitlementState
      subscriptionEndTime:
        type: optional<string>
        docs: The End time for the subscription corresponding to this entitlement.
      updateTime:
        type: optional<datetime>
        docs: >-
          The last update timestamp. It is the endTime for the cancelled
          entitlement.
      usageReportingId:
        type: optional<string>
        docs: >-
          The consumerId to use when reporting usage through the Service Control
          API. See the consumerId field at

          Reporting Metrics
          (https://cloud.google.com/service-control/reporting-metrics) for more
          details.

          This field is present only if the product has usage-based billing
          configured.
    source:
      openapi: ../swagger.json
  SharedGcpMarketplaceEntitlementState:
    enum:
      - value: ENTITLEMENT_STATE_UNSPECIFIED
        name: STATE_UNSPECIFIED
      - value: ENTITLEMENT_ACTIVATION_REQUESTED
        name: ACTIVATION_REQUESTED
      - value: ENTITLEMENT_ACTIVE
        name: ACTIVE
      - value: ENTITLEMENT_PENDING_CANCELLATION
        name: PENDING_CANCELLATION
      - value: ENTITLEMENT_CANCELLED
        name: CANCELLED
      - value: ENTITLEMENT_PENDING_PLAN_CHANGE
        name: PENDING_PLAN_CHANGE
      - value: ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL
        name: PENDING_PLAN_CHANGE_APPROVAL
      - value: ENTITLEMENT_SUSPENDED
        name: SUSPENDED
    source:
      openapi: ../swagger.json
  SharedGcpMarketplaceUserAccount:
    properties:
      approvals:
        type: optional<list<SharedGcpMarketplaceUserAccountApproval>>
        docs: >-
          The approvals for this account, that are permitted or have been
          completed.
      createTime: optional<datetime>
      id:
        type: optional<string>
        docs: GCP Marketplace User Account ID.
      inputProperties:
        type: optional<list<integer>>
        docs: RFC3339 UTC timestamp
      name:
        type: optional<string>
        docs: >-
          The resource name of the account. Account names have the form
          providers/{provider_id}/accounts/{account_id}.
      provider:
        type: optional<string>
        docs: >-
          The identifier of the service provider (SaaS Seller) that this account
          was created against.
      state:
        type: optional<SharedGcpMarketplaceUserAccountState>
        docs: >-
          The state of the account. An account might not be able to make a
          purchase if the billing account is suspended, for example.
      updateTime:
        type: optional<datetime>
        docs: RFC3339 UTC timestamp
      userInfo: optional<SharedGcpUserInfo>
    source:
      openapi: ../swagger.json
  SharedGcpMarketplaceUserAccountApproval:
    properties:
      name: optional<string>
      reason:
        type: optional<string>
        docs: An explanation for the state of the approval.
      state: optional<SharedGcpMarketplaceUserAccountApprovalState>
      updateTime:
        type: optional<string>
        docs: RFC3339 UTC timestamp
    source:
      openapi: ../swagger.json
  SharedGcpMarketplaceUserAccountApprovalState:
    enum:
      - STATE_UNSPECIFIED
      - PENDING
      - APPROVED
      - REJECTED
    source:
      openapi: ../swagger.json
  SharedGcpMarketplaceUserAccountState:
    enum:
      - value: ACCOUNT_STATE_UNSPECIFIED
        name: UNSPECIFIED
      - value: ACCOUNT_ACTIVE
        name: ACTIVE
    source:
      openapi: ../swagger.json
  SharedGcpProduct:
    properties:
      createTime: optional<datetime>
      id:
        type: optional<string>
        docs: Nullable, GCP Marketplace Product UUID
      listingSpec: optional<SharedGcpCommerceProducerListingSpec>
      marketplace: optional<literal<"marketplaces/google-cloud">>
      name:
        type: optional<string>
        docs: >-
          In format of
          "projects/{project-number}/listings/{product-name}.endpoints.{provider-id}.cloud.goog"
      service:
        type: optional<string>
        docs: >-
          In format of
          "services/{product-name}.endpoints.{provider-id}.cloud.goog"
      serviceConfig: optional<SharedGcpCommerceProducerServiceConfig>
    source:
      openapi: ../swagger.json
  SharedGcpPurchasePlan:
    properties:
      name:
        type: optional<string>
        docs: The Plan key.
      priceInfo: optional<SharedGcpCommerceProducerPriceInfo>
      purchaseMode: optional<literal<"PURCHASE_MODE_PUBLIC">>
      title:
        type: optional<string>
        docs: The Plan title
    source:
      openapi: ../swagger.json
  SharedGcpUserInfo:
    properties:
      roles:
        type: optional<list<string>>
        docs: >-
          An array of strings representing the user's roles. Right now, it can
          be either: ** account_admin, which indicates that the user is a
          Billing Account Administrator of the billing account that purchased
          the product, or ** project_editor, which indicates that the user is a
          Project Editor, but not a Billing Administrator, of the project under
          that billing account.
      user_identity:
        type: optional<string>
        docs: >-
          The user's obfuscated GAIA ID, which can be used to initiate Open ID
          Connect.
    source:
      openapi: ../swagger.json
  SharedHubspotCrmCredential:
    properties:
      accessToken: optional<string>
      acquiredOn:
        type: optional<integer>
        docs: UTC timestamp on receiving the auth response
      expiresIn: optional<integer>
      refreshToken: optional<string>
    source:
      openapi: ../swagger.json
  SharedHubspotCrmIntegration:
    properties:
      credential: optional<SharedHubspotCrmCredential>
      portalId:
        type: optional<integer>
        docs: Hubspot Account Id
      secretKey: optional<string>
    source:
      openapi: ../swagger.json
  SharedIdentityBuyerPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    inline: true
    source:
      openapi: ../swagger.json
  SharedIdentityBuyer:
    properties:
      creationTime: optional<datetime>
      description: optional<string>
      externalID: optional<string>
      id: optional<string>
      info: optional<SharedBuyerInfo>
      lastUpdateTime: optional<datetime>
      name: optional<string>
      organizationID: optional<string>
      partner: optional<SharedIdentityBuyerPartner>
    source:
      openapi: ../swagger.json
  SharedIdentityIntegrationPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    inline: true
    source:
      openapi: ../swagger.json
  SharedIdentityIntegrationStatus:
    enum:
      - CREATED
      - VERIFIED
      - NOT_VERIFIED
    inline: true
    source:
      openapi: ../swagger.json
  SharedIdentityIntegration:
    properties:
      createdBy: optional<string>
      creationTime: optional<datetime>
      info: optional<SharedIntegrationInfo>
      lastUpdateTime: optional<datetime>
      lastUpdatedBy: optional<string>
      organizationID: optional<string>
      partner: optional<SharedIdentityIntegrationPartner>
      service: optional<literal<"MARKETPLACE">>
      status: optional<SharedIdentityIntegrationStatus>
    source:
      openapi: ../swagger.json
  SharedIntegrationInfo:
    properties:
      awsAceIntegration:
        type: optional<SharedAwsAceIntegration>
        docs: AWS ACE Integration
      awsIntegration:
        type: optional<SharedAwsMarketplaceIntegration>
        docs: AWS Marketplace Integration
      azureIntegration:
        type: optional<SharedAzureIntegration>
        docs: Azure Marketplace Integration
      gcpIntegration:
        type: optional<SharedGcpIntegration>
        docs: GCP Marketplace Integration
      hubspotCrmIntegration:
        type: optional<SharedHubspotCrmIntegration>
        docs: Integration for HubSpot CRM
      salesforceCrmIntegration:
        type: optional<SharedSalesforceCrmIntegration>
        docs: Integration for Salesforce CRM
      slackIntegration: optional<SharedSlackIntegration>
    source:
      openapi: ../swagger.json
  SharedListRevenueRecordDetailsResponse:
    properties:
      nextOffset: optional<integer>
      revenueRecordDetails: optional<list<SharedRevenueRecordDetail>>
    source:
      openapi: ../swagger.json
  SharedListRevenueRecordsResponse:
    properties:
      nextOffset: optional<integer>
      revenueRecords: optional<list<SharedRevenueRecord>>
    source:
      openapi: ../swagger.json
  SharedListUsageRecordGroupsResponse:
    properties:
      nextOffset: optional<integer>
      usageRecordGroups: optional<list<SharedMeteringUsageRecordGroup>>
    source:
      openapi: ../swagger.json
  SharedListUsageRecordReportsResponse:
    properties:
      nextOffset: optional<integer>
      usageRecordReports: optional<list<SharedMeteringUsageRecordReport>>
    source:
      openapi: ../swagger.json
  SharedMeteringDimension:
    docs: The dimension to meter usage in entitlement.
    properties:
      category: optional<string>
      description: optional<string>
      includedBaseQuantities:
        type: optional<list<AzureIncludedBaseQuantity>>
        docs: how many quantities of this dimension are included in the commit.
      key: optional<string>
      name:
        type: optional<string>
        docs: Display name of the dimension
      rate: optional<double>
      types: optional<list<string>>
      usageCount:
        type: optional<SharedUsageCount>
        docs: >-
          The current Dimension Usage Count. Available when call GetEntitlement
          API.
      valueType: optional<SharedValueType>
    source:
      openapi: ../swagger.json
  SharedMeteringUsageRecordGroup:
    properties:
      creationTime: optional<datetime>
      entitlementID: optional<string>
      id: optional<string>
      lastUpdateTime: optional<datetime>
      metaInfo: optional<SharedMeteringUsageRecordGroupMetaInfo>
      organizationID: optional<string>
      records: optional<map<string, double>>
      serialID: optional<integer>
      status: optional<string>
      usageRecordReportID: optional<string>
    source:
      openapi: ../swagger.json
  SharedMeteringUsageRecordGroupMetaInfo:
    properties:
      originRecords:
        type: optional<map<string, double>>
        docs: >-
          The original records reported by the customer before convertion. If no
          dimension mapping is applied, this field is the same as the records
          field.
    source:
      openapi: ../swagger.json
  SharedMeteringUsageRecordReport:
    properties:
      creationTime: optional<datetime>
      entitlementID: optional<string>
      entitlementTermID: optional<string>
      id: optional<string>
      info: optional<SharedMeteringUsageRecordReportInfo>
      organizationID: optional<string>
      productID: optional<string>
    source:
      openapi: ../swagger.json
  SharedMeteringUsageRecordReportInfo:
    properties:
      awsMeteringResponse:
        type: optional<MarketplacemeteringBatchMeterUsageOutput>
        docs: The raw response from AWS metering service.
      azureMeteringResponse:
        type: >-
          optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse>
        docs: The raw response from Azure metering service.
      commitAmount:
        type: optional<double>
        docs: The amount of the commit if applicable.
      creditAmount:
        type: optional<double>
        docs: The amount of the credit if applicable.
      creditRecords:
        type: optional<map<string, double>>
        docs: The credit usage records in the map of <DimensionKey, Count>
      dimensionUnitPrice:
        type: optional<map<string, double>>
        docs: >-
          The unit price of each dimension in the map of <DimensionKey,
          UnitPrice>
      endTime:
        type: optional<datetime>
        docs: time in UTC when the UsageRecordReport ends
      gcpMeteringResponse:
        type: optional<ServicecontrolReportResponse>
        docs: The raw response from GCP metering service.
      includedRecords:
        type: optional<map<string, double>>
        docs: The included usage records in the map of <DimensionKey, Count>
      reportedRecords:
        type: optional<map<string, double>>
        docs: The reported usage records in the map of <DimensionKey, Count>
      startTime:
        type: optional<datetime>
        docs: time in UTC when the UsageRecordReport starts
      usageRecordGroupIds:
        type: optional<list<string>>
        docs: The IDs of UsageRecordGroups aggregated in this UsageRecordReport.
      usedCommitAmount:
        type: optional<double>
        docs: >-
          The amount of the used commit before the this usage record report if
          applicable.
      usedCommitAmountIncrement:
        type: optional<double>
        docs: >-
          The amount of the used commit increment in this usage record report if
          applicable.
      usedCreditAmount:
        type: optional<double>
        docs: >-
          The amount of the used credit before the this usage record report if
          applicable.
      usedCreditAmountIncrement:
        type: optional<double>
        docs: >-
          The amount of the used credit increment in this usage record report if
          applicable.
    source:
      openapi: ../swagger.json
  SharedNotificationEvent:
    properties:
      action: optional<SharedNotificationEventAction>
      entityID: optional<string>
      entityStatus: optional<string>
      entityType: optional<SharedEntityType>
      eventID:
        type: optional<string>
        docs: notification event id.
      eventStatus:
        type: optional<SharedNotificationEventStatus>
        docs: notification event status.
      lastUpdateTime:
        type: optional<datetime>
        docs: timestamp of the event when it is updated.
      message: optional<string>
      organizationID:
        type: optional<string>
        docs: suger organization id.
      timestamp:
        type: optional<datetime>
        docs: timestamp of the event when it is scheduled or created.
    source:
      openapi: ../swagger.json
  SharedNotificationEventAction:
    enum:
      - ACCEPT
      - CREATE
      - DELETE
      - CANCEL
      - PENDING_CANCEL
      - EXPIRE
      - REINSTATE
      - SUSPEND
      - UPDATE
      - NOTIFY_CONTACTS
      - TEST
    source:
      openapi: ../swagger.json
  SharedNotificationEventStatus:
    enum:
      - value: ''
        name: UNKNOWN
      - SCHEDULED
      - PENDING
      - DONE
      - FAILED
    source:
      openapi: ../swagger.json
  SharedOfferInfoVisibility:
    enum:
      - PRIVATE
      - PUBLIC
    docs: The default visibility of offer is PRIVATE.
    inline: true
    source:
      openapi: ../swagger.json
  SharedOfferInfo:
    properties:
      azureOriginalPlan:
        type: optional<AzurePriceAndAvailabilityPrivateOfferPlan>
        docs: >-
          The origin pricing of Azure plan. Only applicable for Azure
          Marketplace plans.
      azurePrivateOffer:
        type: optional<AzureMarketplacePrivateOffer>
        docs: >-
          The private offer for Azure Marketplace. Only applicable for Azure
          Marketplace private offers.
      azureProductVariant: optional<AzureProductVariant>
      buyerAwsAccountIds:
        type: optional<list<string>>
        docs: The buyers' AWS Account IDs of this offer.
      buyerAzureTenants:
        type: optional<list<AzureAudience>>
        docs: The buyers' Azure tenants of this offer.
      commits: optional<list<SharedCommitDimension>>
      currency: optional<string>
      dimensions: optional<list<SharedMeteringDimension>>
      discount:
        type: optional<double>
        docs: >-
          The rate of discount (0 ~ 1.0), such as 0.1 which is 10% off. 0 which
          is no discount.
      eulaType: optional<SharedEulaType>
      eulaUrl: optional<string>
      gcpMetrics:
        type: optional<list<SharedGcpCommerceProducerPurchaseMetric>>
        docs: >-
          Only applicable for GCP Marketplace Offers (the default or private
          offer)
      gcpPlans:
        type: optional<list<SharedGcpPurchasePlan>>
        docs: >-
          Only applicable for GCP Marketplace Offers (the default or private
          offer).
      paymentInstallments:
        type: optional<list<SharedPaymentInstallment>>
        docs: For flexible payment schedule. Not empty if it is enabled.
      privateOfferUrl:
        type: optional<string>
        docs: >-
          The URL of the private offer sent to buyers to accept. Only applicable
          for private offer.
      refundCancelationPolicy: optional<string>
      sellerNotes: optional<string>
      visibility:
        type: optional<SharedOfferInfoVisibility>
        docs: The default visibility of offer is PRIVATE.
    source:
      openapi: ../swagger.json
  SharedOfferMetaInfo:
    properties:
      baseAgreementId:
        type: optional<string>
        docs: >-
          Applicable for AWS Marketplace only, when the IsAgreementBasedOffer is
          true.
      contacts:
        type: optional<list<SharedContact>>
        docs: The contacts of the offer to notify if any updates.
      isAgreementBasedOffer:
        type: optional<boolean>
        docs: >-
          Applicable for AWS Marketplace only, If this offer is agreement based
          offer.
      isRenewalOffer:
        type: optional<boolean>
        docs: Applicable for AWS Marketplace only, If this offer is renewal offer.
      notifications:
        type: optional<list<SharedNotificationEvent>>
        docs: >-
          The notifications of the offer if any updates. In most cases, it is to
          notify contacts/buyers when the offer is pending acceptance.
    source:
      openapi: ../swagger.json
  SharedOperation:
    properties:
      endTime: optional<datetime>
      id:
        type: optional<string>
        docs: Operation ID.
      message: optional<string>
      name: optional<string>
      startTime: optional<datetime>
      status: optional<string>
      type: optional<SharedOperationType>
    source:
      openapi: ../swagger.json
  SharedOperationType: literal<"TemporalWorkflow">
  SharedPaymentInstallment:
    properties:
      amount: optional<double>
      chargeOn: optional<datetime>
    source:
      openapi: ../swagger.json
  SharedProductInfo:
    properties:
      attributes: optional<map<string, string>>
      awsSaasProduct: optional<SharedAwsSaasProduct>
      awsSnsSubscriptions: optional<list<SharedAwsSnsSubscription>>
      azureProduct: optional<AzureProduct>
      commits: optional<list<SharedCommitDimension>>
      currency: optional<string>
      dimensions: optional<list<SharedMeteringDimension>>
      eulaUrl: optional<string>
      gcpProduct: optional<SharedGcpProduct>
      refundCancelationPolicy: optional<string>
      sellerNotes: optional<string>
    source:
      openapi: ../swagger.json
  SharedRevenueRecord:
    properties:
      amount:
        type: optional<double>
        docs: The revenue amount for the revenue report
      buyerID: optional<string>
      collectableAmount:
        type: optional<double>
        docs: The revenue amount that the seller/ISV can collect.
      currency:
        type: optional<string>
        docs: The currency of the revenue in ISO 4217 format, such as "USD".
      date:
        type: optional<datetime>
        docs: The date for the revenue report
      disburseAmount: optional<double>
      disburseDate: optional<datetime>
      entitlementID: optional<string>
      id: optional<string>
      info: optional<SharedRevenueRecordInfo>
      invoiceAmount: optional<double>
      invoiceDate: optional<datetime>
      organizationID: optional<string>
      partner: optional<string>
      paymentDueDate: optional<datetime>
      productID: optional<string>
      refundDisburseAmount: optional<double>
      refundDisburseDate: optional<datetime>
      refundInvoiceAmount: optional<double>
      refundInvoiceDate: optional<datetime>
      taxAmount: optional<double>
    source:
      openapi: ../swagger.json
  SharedRevenueRecordDetail:
    properties:
      awsRevenueRecordDetail:
        type: >-
          optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent>
        docs: For AWS Marketplace
      azureRevenueRecordDetail:
        type: >-
          optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue>
        docs: For Azure Marketplace
      gcpRevenueRecordDetail:
        type: >-
          optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage>
        docs: For GCP Marketplace
    source:
      openapi: ../swagger.json
  SharedRevenueRecordInfo:
    properties:
      awsRevenueRecords:
        type: >-
          optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent>>
        docs: For raw revenue records in AWS Marketplace
      azureRevenueRecords:
        type: >-
          optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue>>
        docs: For raw revenue records in Azure Marketplace
      gcpRevenueRecords:
        type: >-
          optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage>>
        docs: For raw revenue records in GCP Marketplace
    source:
      openapi: ../swagger.json
  SharedRevenueReport:
    properties:
      buyerID: optional<string>
      entitlementID: optional<string>
      organizationID: optional<string>
      partner: optional<string>
      productID: optional<string>
      reportDate: optional<datetime>
      reportType: optional<SharedRevenueReportType>
      revenueRecords: optional<list<SharedRevenueRecord>>
      service: optional<string>
    source:
      openapi: ../swagger.json
  SharedRevenueReportType:
    enum:
      - InvoicedAmount
      - CollectableAmount
      - DisbursedAmount
    source:
      openapi: ../swagger.json
  SharedSalesforceCrmCredential:
    properties:
      access_token: optional<string>
      exp: optional<integer>
      instance_url: optional<string>
      refresh_token: optional<string>
    source:
      openapi: ../swagger.json
  SharedSalesforceCrmIntegration:
    properties:
      credential:
        type: optional<SharedSalesforceCrmCredential>
        docs: System created
      filters: optional<list<SharedSalesforceSyncFilter>>
      instanceUrl: optional<string>
      isSandbox: optional<boolean>
      secretKey: optional<string>
      subdomain:
        type: optional<string>
        docs: User defined when setting up the integration
    source:
      openapi: ../swagger.json
  SharedSalesforceSyncFilter:
    properties:
      fieldName: optional<string>
      operator: optional<string>
      value: optional<unknown>
    source:
      openapi: ../swagger.json
  SharedSlackIntegration:
    properties:
      accessToken: optional<string>
      appId: optional<string>
      authedUser: optional<SlackOAuthV2ResponseAuthedUser>
      botUserId: optional<string>
      enterprise: optional<SlackOAuthV2ResponseEnterprise>
      expiresIn: optional<integer>
      incomingWebhook: optional<SlackOAuthResponseIncomingWebhook>
      redirectUrl: optional<string>
      refreshToken: optional<string>
      scope:
        type: optional<string>
        docs: The scope of the access token. multiple scopes are separated by comma.
      team: optional<SlackOAuthV2ResponseTeam>
      tokenType: optional<string>
    source:
      openapi: ../swagger.json
  SharedUsageCount:
    properties:
      creditCount:
        type: optional<double>
        docs: The count of this dimension usage records that are handled as credit.
      includedCount:
        type: optional<double>
        docs: >-
          The count of this dimension usage records that are handled as included
          in IncludedBaseQuantity
      reportedCount:
        type: optional<double>
        docs: >-
          The count of this dimension usage records that are reported to cloud
          vendors.
    source:
      openapi: ../swagger.json
  SharedUsageReport:
    properties:
      entitlementID: optional<string>
      organizationID: optional<string>
      reportDate: optional<datetime>
      usageRecords: optional<list<SharedEntitlementUsageRecord>>
    source:
      openapi: ../swagger.json
  SharedValueType:
    enum:
      - value: VALUE_TYPE_UNSPECIFIED
        name: UNSPECIFIED
      - BOOL
      - INT64
      - DOUBLE
      - STRING
      - DISTRIBUTION
      - MONEY
    source:
      openapi: ../swagger.json
  SharedWorkloadEntitlementPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    inline: true
    source:
      openapi: ../swagger.json
  SharedWorkloadEntitlementStatus:
    enum:
      - ACTIVE
      - CANCELLED
      - SUSPENDED
      - PENDING_START
      - UNKNOWN
    inline: true
    source:
      openapi: ../swagger.json
  SharedWorkloadEntitlement:
    properties:
      buyerID: optional<string>
      creationTime: optional<datetime>
      endTime:
        type: optional<datetime>
        docs: nullable
      entitlementTermID: optional<string>
      externalBuyerID: optional<string>
      externalID: optional<string>
      externalProductID: optional<string>
      id: optional<string>
      info: optional<SharedEntitlementInfo>
      lastUpdateTime: optional<datetime>
      name: optional<string>
      offerID: optional<string>
      organizationID: optional<string>
      partner: optional<SharedWorkloadEntitlementPartner>
      productID: optional<string>
      service: optional<literal<"MARKETPLACE">>
      startTime: optional<datetime>
      status: optional<SharedWorkloadEntitlementStatus>
      type: optional<string>
    source:
      openapi: ../swagger.json
  SharedWorkloadEntitlementTermPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    inline: true
    source:
      openapi: ../swagger.json
  SharedWorkloadEntitlementTerm:
    properties:
      buyerID: optional<string>
      commitAmount: optional<double>
      creditAmount: optional<double>
      endTime:
        type: optional<datetime>
        docs: nullable
      entitlementID: optional<string>
      entitlementInfo: optional<SharedEntitlementInfo>
      externalEntitlementID: optional<string>
      id: optional<string>
      info: optional<SharedEntitlementTermInfo>
      offerID: optional<string>
      organizationID: optional<string>
      partner: optional<SharedWorkloadEntitlementTermPartner>
      productID: optional<string>
      service: optional<literal<"MARKETPLACE">>
      startTime: optional<datetime>
      usedCommitAmount: optional<double>
      usedCreditAmount: optional<double>
    source:
      openapi: ../swagger.json
  SharedWorkloadOfferOfferType:
    enum:
      - DEFAULT
      - CONTRACT
      - SUBSCRIPTION
      - FREE_TRIAL
      - FLAT_RATE
      - PER_USER
      - PRIVATE
      - UNKNOWN
    inline: true
    source:
      openapi: ../swagger.json
  SharedWorkloadOfferPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    inline: true
    source:
      openapi: ../swagger.json
  SharedWorkloadOfferStatus:
    enum:
      - ACCEPTED
      - PENDING_CREATE
      - CREATE_FAILED
      - CREATE_SUCCESS
      - DRAFT
      - EXPIRED
      - PENDING_ACCEPTANCE
      - PENDING_CANCEL
      - CANCEL_FAILED
      - CANCEL_SUCCESS
    inline: true
    source:
      openapi: ../swagger.json
  SharedWorkloadOffer:
    properties:
      createdBy: optional<string>
      creationTime: optional<datetime>
      endTime:
        type: optional<datetime>
        docs: nullable
      expireTime:
        type: optional<datetime>
        docs: nullable
      externalID: optional<string>
      id: optional<string>
      info: optional<SharedOfferInfo>
      lastUpdateTime: optional<datetime>
      lastUpdatedBy: optional<string>
      metaInfo: optional<SharedOfferMetaInfo>
      name: optional<string>
      offerType: optional<SharedWorkloadOfferOfferType>
      organizationID: optional<string>
      partner: optional<SharedWorkloadOfferPartner>
      productID: optional<string>
      service: optional<literal<"MARKETPLACE">>
      status: optional<SharedWorkloadOfferStatus>
    source:
      openapi: ../swagger.json
  SharedWorkloadProductPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    inline: true
    source:
      openapi: ../swagger.json
  SharedWorkloadProductProductType:
    enum:
      - UNKNOWN
      - SUBSCRIPTION
      - CONTRACT
      - FLAT_RATE
      - PER_USER
      - USAGE_BASED
    inline: true
    source:
      openapi: ../swagger.json
  SharedWorkloadProduct:
    properties:
      createdBy: optional<string>
      creationTime: optional<datetime>
      externalID: optional<string>
      fulfillmentUrl: optional<string>
      id: optional<string>
      info: optional<SharedProductInfo>
      lastUpdateTime: optional<datetime>
      lastUpdatedBy: optional<string>
      name: optional<string>
      organizationID: optional<string>
      partner: optional<SharedWorkloadProductPartner>
      productType: optional<SharedWorkloadProductProductType>
      service: optional<literal<"MARKETPLACE">>
      status: optional<string>
    source:
      openapi: ../swagger.json
  SlackOAuthResponseIncomingWebhook:
    properties:
      channel: optional<string>
      channel_id: optional<string>
      configuration_url: optional<string>
      url: optional<string>
    source:
      openapi: ../swagger.json
  SlackOAuthV2ResponseAuthedUser:
    properties:
      access_token: optional<string>
      expires_in: optional<integer>
      id: optional<string>
      refresh_token: optional<string>
      scope: optional<string>
      token_type: optional<string>
    source:
      openapi: ../swagger.json
  SlackOAuthV2ResponseEnterprise:
    properties:
      id: optional<string>
      name: optional<string>
    source:
      openapi: ../swagger.json
  SlackOAuthV2ResponseTeam:
    properties:
      id: optional<string>
      name: optional<string>
    source:
      openapi: ../swagger.json
  SqlNullTime:
    properties:
      time: optional<string>
      valid:
        type: optional<boolean>
        docs: Valid is true if Time is not NULL
    source:
      openapi: ../swagger.json
  TypesEntitlement:
    properties:
      customerIdentifier:
        type: optional<string>
        docs: >-
          The customer identifier is a handle to each unique customer in an
          application.

          Customer identifiers are obtained through the ResolveCustomer
          operation in AWS

          Marketplace Metering Service.
      dimension:
        type: optional<string>
        docs: >-
          The dimension for which the given entitlement applies. Dimensions
          represent

          categories of capacity in a product and are specified when the product
          is listed

          in AWS Marketplace.
      expirationDate:
        type: optional<string>
        docs: >-
          The expiration date represents the minimum date through which this
          entitlement

          is expected to remain valid. For contractual products listed on AWS
          Marketplace,

          the expiration date is the date at which the customer will renew or
          cancel their

          contract. Customers who are opting to renew their contract will still
          have

          entitlements with an expiration date.
      productCode:
        type: optional<string>
        docs: >-
          The product code for which the given entitlement applies. Product
          codes are

          provided by AWS Marketplace when the product listing is created.
      value: optional<unknown>
    source:
      openapi: ../swagger.json
  TypesUsageAllocation:
    properties:
      allocatedUsageQuantity:
        type: optional<integer>
        docs: |-
          The total quantity allocated to this bucket of usage.

          This member is required.
      tags:
        type: >-
          optional<list<GithubComAwsAwsSdkGoV2ServiceMarketplacemeteringTypesTag>>
        docs: >-
          The set of tags that define the bucket of usage. For the bucket of
          items with no

          tags, this parameter can be left out.
    source:
      openapi: ../swagger.json
  TypesUsageRecord:
    properties:
      customerIdentifier:
        type: optional<string>
        docs: >-
          The CustomerIdentifier is obtained through the ResolveCustomer
          operation and

          represents an individual buyer in your application.


          This member is required.
      dimension:
        type: optional<string>
        docs: >-
          During the process of registering a product on AWS Marketplace,
          dimensions are

          specified. These represent different units of value in your
          application.


          This member is required.
      quantity:
        type: optional<integer>
        docs: >-
          The quantity of usage consumed by the customer for the given dimension
          and time.

          Defaults to 0 if not specified.
      timestamp:
        type: optional<string>
        docs: >-
          Timestamp, in UTC, for which the usage is being reported. Your
          application can

          meter usage for up to one hour in the past. Make sure the timestamp
          value is not

          before the start of the software usage.


          This member is required.
      usageAllocations:
        type: optional<list<TypesUsageAllocation>>
        docs: >-
          The set of UsageAllocations to submit. The sum of all UsageAllocation
          quantities

          must equal the Quantity of the UsageRecord.
    source:
      openapi: ../swagger.json
  TypesUsageRecordResult:
    properties:
      meteringRecordId:
        type: optional<string>
        docs: The MeteringRecordId is a unique identifier for this metering event.
      status:
        type: optional<TypesUsageRecordResultStatus>
        docs: >-
          The UsageRecordResultStatus indicates the status of an individual
          UsageRecord

          processed by BatchMeterUsage.


          * Success- The UsageRecord was accepted and

          honored by BatchMeterUsage.


          * CustomerNotSubscribed- The CustomerIdentifier

          specified is not able to use your product. The UsageRecord was not
          honored.

          There are three causes for this result:


          * The customer identifier is

          invalid.


          * The customer identifier provided in the metering record does not

          have an active agreement or subscription with this product. Future
          UsageRecords

          for this customer will fail until the customer subscribes to your
          product.


          *

          The customer's AWS account was suspended.


          * DuplicateRecord- Indicates that the

          UsageRecord was invalid and not honored. A previously metered
          UsageRecord had

          the same customer, dimension, and time, but a different quantity.
      usageRecord:
        type: optional<TypesUsageRecord>
        docs: The UsageRecord that was part of the BatchMeterUsage request.
    source:
      openapi: ../swagger.json
  TypesUsageRecordResultStatus:
    enum:
      - Success
      - CustomerNotSubscribed
      - DuplicateRecord
    source:
      openapi: ../swagger.json
",
    },
    "api.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetApiClientAccessToken": {
              "auth": false,
              "display-name": "get api access token",
              "docs": "Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.",
              "errors": [
                "root.GetApiClientAccessTokenRequestInternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "id": "id",
                    "organizationID": "organizationID",
                    "secret": "secret",
                  },
                  "response": {
                    "body": {
                      "access_token": "access_token",
                      "expires_in": 1,
                      "token_type": "token_type",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/public/apiClient/accessToken",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "The ID of the API Client.",
                      "type": "string",
                    },
                    "organizationID": "string",
                    "secret": {
                      "docs": "The secret of the API Client.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SharedGetApiClientAccessTokenParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedApiClientAccessToken",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
      },
      "rawContents": "service:
  auth: false
  base-path: ''
  endpoints:
    GetApiClientAccessToken:
      path: /public/apiClient/accessToken
      method: POST
      auth: false
      docs: >-
        Get the Bearer Access Token by giving the Suger API Client ID & Client
        Secret.
      source:
        openapi: ../swagger.json
      display-name: get api access token
      request:
        name: SharedGetApiClientAccessTokenParams
        body:
          properties:
            id:
              type: string
              docs: The ID of the API Client.
            organizationID: string
            secret:
              type: string
              docs: The secret of the API Client.
        content-type: application/json
      response:
        docs: OK
        type: root.SharedApiClientAccessToken
        status-code: 200
      errors:
        - root.GetApiClientAccessTokenRequestInternalServerError
      examples:
        - request:
            id: id
            organizationID: organizationID
            secret: secret
          response:
            body:
              access_token: access_token
              expires_in: 1
              token_type: token_type
  source:
    openapi: ../swagger.json
",
    },
    "buyer.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetBuyer": {
              "auth": true,
              "display-name": "get buyer",
              "docs": "get buyer by the given organization and buyer id",
              "errors": [
                "root.GetBuyerRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "buyerId": "buyerId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": {
                      "creationTime": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "externalID": "externalID",
                      "id": "id",
                      "info": {
                        "awsBuyer": {
                          "awsAccountID": "awsAccountID",
                          "awsCustomerID": "awsCustomerID",
                          "dataFeedAccountID": "dataFeedAccountID",
                        },
                        "azureBuyer": {
                          "emailId": "emailId",
                          "objectId": "objectId",
                          "puid": "puid",
                          "tenantId": "tenantId",
                        },
                        "collectableAmount": 1.1,
                        "disbursedAmount": 1.1,
                        "gcpBuyer": {
                          "approvals": [
                            {},
                          ],
                          "createTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "inputProperties": [
                            1,
                          ],
                          "name": "name",
                          "provider": "provider",
                          "state": "ACCOUNT_STATE_UNSPECIFIED",
                          "updateTime": "2024-01-15T09:30:00Z",
                        },
                        "invoicedAmount": 1.1,
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/buyer/{buyerId}",
              "path-parameters": {
                "buyerId": {
                  "docs": "Buyer ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedIdentityBuyer",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListBuyersByOrganization": {
              "auth": true,
              "display-name": "list buyers by organization",
              "docs": "list all buyers by the given organization",
              "errors": [
                "root.ListBuyersByOrganizationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "creationTime": "2024-01-15T09:30:00Z",
                        "description": "description",
                        "externalID": "externalID",
                        "id": "id",
                        "info": {
                          "collectableAmount": 1.1,
                          "disbursedAmount": 1.1,
                          "invoicedAmount": 1.1,
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/buyer",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedIdentityBuyer>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "UpdateBuyerNameDescription": {
              "auth": true,
              "display-name": "update buyer name and description",
              "docs": "update buyer name and description by the given organization and buyer id",
              "errors": [
                "root.UpdateBuyerNameDescriptionRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "buyerId": "buyerId",
                    "orgId": "orgId",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "creationTime": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "externalID": "externalID",
                      "id": "id",
                      "info": {
                        "awsBuyer": {
                          "awsAccountID": "awsAccountID",
                          "awsCustomerID": "awsCustomerID",
                          "dataFeedAccountID": "dataFeedAccountID",
                        },
                        "azureBuyer": {
                          "emailId": "emailId",
                          "objectId": "objectId",
                          "puid": "puid",
                          "tenantId": "tenantId",
                        },
                        "collectableAmount": 1.1,
                        "disbursedAmount": 1.1,
                        "gcpBuyer": {
                          "approvals": [
                            {},
                          ],
                          "createTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "inputProperties": [
                            1,
                          ],
                          "name": "name",
                          "provider": "provider",
                          "state": "ACCOUNT_STATE_UNSPECIFIED",
                          "updateTime": "2024-01-15T09:30:00Z",
                        },
                        "invoicedAmount": 1.1,
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/org/{orgId}/buyer/{buyerId}",
              "path-parameters": {
                "buyerId": {
                  "docs": "Buyer ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "description": "optional<string>",
                    "id": "optional<string>",
                    "name": "optional<string>",
                    "organizationID": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GithubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedIdentityBuyer",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListBuyersByOrganization:
      path: /org/{orgId}/buyer
      method: GET
      auth: true
      docs: list all buyers by the given organization
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: list buyers by organization
      response:
        docs: OK
        type: list<root.SharedIdentityBuyer>
        status-code: 200
      errors:
        - root.ListBuyersByOrganizationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          response:
            body:
              - creationTime: '2024-01-15T09:30:00Z'
                description: description
                externalID: externalID
                id: id
                info:
                  collectableAmount: 1.1
                  disbursedAmount: 1.1
                  invoicedAmount: 1.1
                lastUpdateTime: '2024-01-15T09:30:00Z'
                name: name
                organizationID: organizationID
                partner: AWS
    GetBuyer:
      path: /org/{orgId}/buyer/{buyerId}
      method: GET
      auth: true
      docs: get buyer by the given organization and buyer id
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        buyerId:
          type: string
          docs: Buyer ID
      display-name: get buyer
      response:
        docs: OK
        type: root.SharedIdentityBuyer
        status-code: 200
      errors:
        - root.GetBuyerRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            buyerId: buyerId
          response:
            body:
              creationTime: '2024-01-15T09:30:00Z'
              description: description
              externalID: externalID
              id: id
              info:
                awsBuyer:
                  awsAccountID: awsAccountID
                  awsCustomerID: awsCustomerID
                  dataFeedAccountID: dataFeedAccountID
                azureBuyer:
                  emailId: emailId
                  objectId: objectId
                  puid: puid
                  tenantId: tenantId
                collectableAmount: 1.1
                disbursedAmount: 1.1
                gcpBuyer:
                  approvals:
                    - {}
                  createTime: '2024-01-15T09:30:00Z'
                  id: id
                  inputProperties:
                    - 1
                  name: name
                  provider: provider
                  state: ACCOUNT_STATE_UNSPECIFIED
                  updateTime: '2024-01-15T09:30:00Z'
                invoicedAmount: 1.1
              lastUpdateTime: '2024-01-15T09:30:00Z'
              name: name
              organizationID: organizationID
              partner: AWS
    UpdateBuyerNameDescription:
      path: /org/{orgId}/buyer/{buyerId}
      method: PATCH
      auth: true
      docs: update buyer name and description by the given organization and buyer id
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        buyerId:
          type: string
          docs: Buyer ID
      display-name: update buyer name and description
      request:
        name: >-
          GithubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams
        body:
          properties:
            description: optional<string>
            id: optional<string>
            name: optional<string>
            organizationID: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: root.SharedIdentityBuyer
        status-code: 200
      errors:
        - root.UpdateBuyerNameDescriptionRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            buyerId: buyerId
          request: {}
          response:
            body:
              creationTime: '2024-01-15T09:30:00Z'
              description: description
              externalID: externalID
              id: id
              info:
                awsBuyer:
                  awsAccountID: awsAccountID
                  awsCustomerID: awsCustomerID
                  dataFeedAccountID: dataFeedAccountID
                azureBuyer:
                  emailId: emailId
                  objectId: objectId
                  puid: puid
                  tenantId: tenantId
                collectableAmount: 1.1
                disbursedAmount: 1.1
                gcpBuyer:
                  approvals:
                    - {}
                  createTime: '2024-01-15T09:30:00Z'
                  id: id
                  inputProperties:
                    - 1
                  name: name
                  provider: provider
                  state: ACCOUNT_STATE_UNSPECIFIED
                  updateTime: '2024-01-15T09:30:00Z'
                invoicedAmount: 1.1
              lastUpdateTime: '2024-01-15T09:30:00Z'
              name: name
              organizationID: organizationID
              partner: AWS
  source:
    openapi: ../swagger.json
",
    },
    "entitlement.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "AddEntitlementCredit": {
              "auth": true,
              "display-name": "add entitlement credit",
              "docs": "Add the credit amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.",
              "errors": [
                "root.AddEntitlementCreditRequestBadRequestError",
                "root.AddEntitlementCreditRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "entitlementId": "entitlementId",
                    "orgId": "orgId",
                  },
                  "request": {
                    "creditAmountIncrement": 1.1,
                    "entitlementID": "entitlementID",
                    "organizationID": "organizationID",
                  },
                  "response": {
                    "body": {
                      "creditAmountIncrement": 1.1,
                      "entitlementID": "entitlementID",
                      "entitlementTermID": "entitlementTermID",
                      "newCreditAmount": 1.1,
                      "organizationID": "organizationID",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement/{entitlementId}/addCredit",
              "path-parameters": {
                "entitlementId": {
                  "docs": "Entitlement ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "creditAmountIncrement": {
                      "docs": "The amount to be added to the credit amount.",
                      "type": "double",
                    },
                    "entitlementID": "string",
                    "organizationID": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SharedAddEntitlementCreditParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedAddEntitlementCreditResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "GetEntitlement": {
              "auth": true,
              "display-name": "get entitlement",
              "docs": "Get the entitlement by ID",
              "errors": [
                "root.GetEntitlementRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "entitlementId": "entitlementId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": {
                      "buyerID": "buyerID",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "endTime": "2024-01-15T09:30:00Z",
                      "entitlementTermID": "entitlementTermID",
                      "externalBuyerID": "externalBuyerID",
                      "externalID": "externalID",
                      "externalProductID": "externalProductID",
                      "id": "id",
                      "info": {
                        "autoRenew": true,
                        "awsEntitlements": [
                          {},
                        ],
                        "azureSubscriptions": [
                          {},
                        ],
                        "collectableAmount": 1.1,
                        "commitAmount": 1.1,
                        "commits": [
                          {},
                        ],
                        "currency": "currency",
                        "dimensions": [
                          {},
                        ],
                        "disbursedAmount": 1.1,
                        "discount": 1.1,
                        "eulaType": "",
                        "eulaUrl": "eulaUrl",
                        "gcpEntitlements": [
                          {},
                        ],
                        "gcpPlans": [
                          {},
                        ],
                        "invoicedAmount": 1.1,
                        "paymentInstallments": [
                          {},
                        ],
                        "refundCancelationPolicy": "refundCancelationPolicy",
                        "sellerNotes": "sellerNotes",
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "offerID": "offerID",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "productID": "productID",
                      "service": "MARKETPLACE",
                      "startTime": "2024-01-15T09:30:00Z",
                      "status": "ACTIVE",
                      "type": "type",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement/{entitlementId}",
              "path-parameters": {
                "entitlementId": {
                  "docs": "Entitlement ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedWorkloadEntitlement",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListEntitlements": {
              "auth": true,
              "display-name": "list entitlements",
              "docs": "List all entitlements under the organization",
              "errors": [
                "root.ListEntitlementsRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "buyerID": "buyerID",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "endTime": "2024-01-15T09:30:00Z",
                        "entitlementTermID": "entitlementTermID",
                        "externalBuyerID": "externalBuyerID",
                        "externalID": "externalID",
                        "externalProductID": "externalProductID",
                        "id": "id",
                        "info": {
                          "autoRenew": true,
                          "awsEntitlements": [
                            {},
                          ],
                          "azureSubscriptions": [
                            {},
                          ],
                          "collectableAmount": 1.1,
                          "commitAmount": 1.1,
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "disbursedAmount": 1.1,
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpEntitlements": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "invoicedAmount": 1.1,
                          "paymentInstallments": [
                            {},
                          ],
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "offerID": "offerID",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "startTime": "2024-01-15T09:30:00Z",
                        "status": "ACTIVE",
                        "type": "type",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadEntitlement>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListEntitlementsByBuyer": {
              "auth": true,
              "display-name": "list entitlements by buyer",
              "docs": "List all entitlements of the given buyer",
              "errors": [
                "root.ListEntitlementsByBuyerRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "buyerId": "buyerId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "buyerID": "buyerID",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "endTime": "2024-01-15T09:30:00Z",
                        "entitlementTermID": "entitlementTermID",
                        "externalBuyerID": "externalBuyerID",
                        "externalID": "externalID",
                        "externalProductID": "externalProductID",
                        "id": "id",
                        "info": {
                          "autoRenew": true,
                          "awsEntitlements": [
                            {},
                          ],
                          "azureSubscriptions": [
                            {},
                          ],
                          "collectableAmount": 1.1,
                          "commitAmount": 1.1,
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "disbursedAmount": 1.1,
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpEntitlements": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "invoicedAmount": 1.1,
                          "paymentInstallments": [
                            {},
                          ],
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "offerID": "offerID",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "startTime": "2024-01-15T09:30:00Z",
                        "status": "ACTIVE",
                        "type": "type",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/buyer/{buyerId}/entitlement",
              "path-parameters": {
                "buyerId": {
                  "docs": "Buyer ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadEntitlement>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListEntitlementsByOffer": {
              "auth": true,
              "display-name": "list entitlements by offer",
              "docs": "List all entitlements under the given offer",
              "errors": [
                "root.ListEntitlementsByOfferRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "offerId": "offerId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "buyerID": "buyerID",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "endTime": "2024-01-15T09:30:00Z",
                        "entitlementTermID": "entitlementTermID",
                        "externalBuyerID": "externalBuyerID",
                        "externalID": "externalID",
                        "externalProductID": "externalProductID",
                        "id": "id",
                        "info": {
                          "autoRenew": true,
                          "awsEntitlements": [
                            {},
                          ],
                          "azureSubscriptions": [
                            {},
                          ],
                          "collectableAmount": 1.1,
                          "commitAmount": 1.1,
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "disbursedAmount": 1.1,
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpEntitlements": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "invoicedAmount": 1.1,
                          "paymentInstallments": [
                            {},
                          ],
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "offerID": "offerID",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "startTime": "2024-01-15T09:30:00Z",
                        "status": "ACTIVE",
                        "type": "type",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/offer/{offerId}/entitlement",
              "path-parameters": {
                "offerId": {
                  "docs": "Offer ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadEntitlement>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListEntitlementsByPartner": {
              "auth": true,
              "display-name": "list entitlements by partner",
              "docs": "List all entitlements under the given partner",
              "errors": [
                "root.ListEntitlementsByPartnerRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                  },
                  "response": {
                    "body": [
                      {
                        "buyerID": "buyerID",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "endTime": "2024-01-15T09:30:00Z",
                        "entitlementTermID": "entitlementTermID",
                        "externalBuyerID": "externalBuyerID",
                        "externalID": "externalID",
                        "externalProductID": "externalProductID",
                        "id": "id",
                        "info": {
                          "autoRenew": true,
                          "awsEntitlements": [
                            {},
                          ],
                          "azureSubscriptions": [
                            {},
                          ],
                          "collectableAmount": 1.1,
                          "commitAmount": 1.1,
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "disbursedAmount": 1.1,
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpEntitlements": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "invoicedAmount": 1.1,
                          "paymentInstallments": [
                            {},
                          ],
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "offerID": "offerID",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "startTime": "2024-01-15T09:30:00Z",
                        "status": "ACTIVE",
                        "type": "type",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/partner/{partner}/entitlement",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "ListEntitlementsByPartnerRequestPartner",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadEntitlement>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListEntitlementsByProduct": {
              "auth": true,
              "display-name": "list entitlements by product",
              "docs": "List all entitlements under the given product",
              "errors": [
                "root.ListEntitlementsByProductRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "productId": "productId",
                  },
                  "response": {
                    "body": [
                      {
                        "buyerID": "buyerID",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "endTime": "2024-01-15T09:30:00Z",
                        "entitlementTermID": "entitlementTermID",
                        "externalBuyerID": "externalBuyerID",
                        "externalID": "externalID",
                        "externalProductID": "externalProductID",
                        "id": "id",
                        "info": {
                          "autoRenew": true,
                          "awsEntitlements": [
                            {},
                          ],
                          "azureSubscriptions": [
                            {},
                          ],
                          "collectableAmount": 1.1,
                          "commitAmount": 1.1,
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "disbursedAmount": 1.1,
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpEntitlements": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "invoicedAmount": 1.1,
                          "paymentInstallments": [
                            {},
                          ],
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "offerID": "offerID",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "startTime": "2024-01-15T09:30:00Z",
                        "status": "ACTIVE",
                        "type": "type",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/product/{productId}/entitlement",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "productId": {
                  "docs": "Product ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadEntitlement>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "UpdateEntitlementName": {
              "auth": true,
              "display-name": "update entitlement name",
              "docs": "Update the name of the given Entitlement",
              "errors": [
                "root.UpdateEntitlementNameRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "entitlementId": "entitlementId",
                    "orgId": "orgId",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "buyerID": "buyerID",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "endTime": "2024-01-15T09:30:00Z",
                      "entitlementTermID": "entitlementTermID",
                      "externalBuyerID": "externalBuyerID",
                      "externalID": "externalID",
                      "externalProductID": "externalProductID",
                      "id": "id",
                      "info": {
                        "autoRenew": true,
                        "awsEntitlements": [
                          {},
                        ],
                        "azureSubscriptions": [
                          {},
                        ],
                        "collectableAmount": 1.1,
                        "commitAmount": 1.1,
                        "commits": [
                          {},
                        ],
                        "currency": "currency",
                        "dimensions": [
                          {},
                        ],
                        "disbursedAmount": 1.1,
                        "discount": 1.1,
                        "eulaType": "",
                        "eulaUrl": "eulaUrl",
                        "gcpEntitlements": [
                          {},
                        ],
                        "gcpPlans": [
                          {},
                        ],
                        "invoicedAmount": 1.1,
                        "paymentInstallments": [
                          {},
                        ],
                        "refundCancelationPolicy": "refundCancelationPolicy",
                        "sellerNotes": "sellerNotes",
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "offerID": "offerID",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "productID": "productID",
                      "service": "MARKETPLACE",
                      "startTime": "2024-01-15T09:30:00Z",
                      "status": "ACTIVE",
                      "type": "type",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementName",
              "path-parameters": {
                "entitlementId": {
                  "docs": "Entitlement ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "id": "optional<string>",
                    "name": "optional<string>",
                    "organizationID": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "GithubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedWorkloadEntitlement",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "ListEntitlementsByPartnerRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListEntitlementsByBuyer:
      path: /org/{orgId}/buyer/{buyerId}/entitlement
      method: GET
      auth: true
      docs: List all entitlements of the given buyer
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        buyerId:
          type: string
          docs: Buyer ID
      display-name: list entitlements by buyer
      response:
        docs: OK
        type: list<root.SharedWorkloadEntitlement>
        status-code: 200
      errors:
        - root.ListEntitlementsByBuyerRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            buyerId: buyerId
          response:
            body:
              - buyerID: buyerID
                creationTime: '2024-01-15T09:30:00Z'
                endTime: '2024-01-15T09:30:00Z'
                entitlementTermID: entitlementTermID
                externalBuyerID: externalBuyerID
                externalID: externalID
                externalProductID: externalProductID
                id: id
                info:
                  autoRenew: true
                  awsEntitlements:
                    - {}
                  azureSubscriptions:
                    - {}
                  collectableAmount: 1.1
                  commitAmount: 1.1
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  disbursedAmount: 1.1
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpEntitlements:
                    - {}
                  gcpPlans:
                    - {}
                  invoicedAmount: 1.1
                  paymentInstallments:
                    - {}
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                lastUpdateTime: '2024-01-15T09:30:00Z'
                name: name
                offerID: offerID
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                startTime: '2024-01-15T09:30:00Z'
                status: ACTIVE
                type: type
    ListEntitlements:
      path: /org/{orgId}/entitlement
      method: GET
      auth: true
      docs: List all entitlements under the organization
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: list entitlements
      response:
        docs: OK
        type: list<root.SharedWorkloadEntitlement>
        status-code: 200
      errors:
        - root.ListEntitlementsRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          response:
            body:
              - buyerID: buyerID
                creationTime: '2024-01-15T09:30:00Z'
                endTime: '2024-01-15T09:30:00Z'
                entitlementTermID: entitlementTermID
                externalBuyerID: externalBuyerID
                externalID: externalID
                externalProductID: externalProductID
                id: id
                info:
                  autoRenew: true
                  awsEntitlements:
                    - {}
                  azureSubscriptions:
                    - {}
                  collectableAmount: 1.1
                  commitAmount: 1.1
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  disbursedAmount: 1.1
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpEntitlements:
                    - {}
                  gcpPlans:
                    - {}
                  invoicedAmount: 1.1
                  paymentInstallments:
                    - {}
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                lastUpdateTime: '2024-01-15T09:30:00Z'
                name: name
                offerID: offerID
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                startTime: '2024-01-15T09:30:00Z'
                status: ACTIVE
                type: type
    GetEntitlement:
      path: /org/{orgId}/entitlement/{entitlementId}
      method: GET
      auth: true
      docs: Get the entitlement by ID
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        entitlementId:
          type: string
          docs: Entitlement ID
      display-name: get entitlement
      response:
        docs: OK
        type: root.SharedWorkloadEntitlement
        status-code: 200
      errors:
        - root.GetEntitlementRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            entitlementId: entitlementId
          response:
            body:
              buyerID: buyerID
              creationTime: '2024-01-15T09:30:00Z'
              endTime: '2024-01-15T09:30:00Z'
              entitlementTermID: entitlementTermID
              externalBuyerID: externalBuyerID
              externalID: externalID
              externalProductID: externalProductID
              id: id
              info:
                autoRenew: true
                awsEntitlements:
                  - {}
                azureSubscriptions:
                  - {}
                collectableAmount: 1.1
                commitAmount: 1.1
                commits:
                  - {}
                currency: currency
                dimensions:
                  - {}
                disbursedAmount: 1.1
                discount: 1.1
                eulaType: ''
                eulaUrl: eulaUrl
                gcpEntitlements:
                  - {}
                gcpPlans:
                  - {}
                invoicedAmount: 1.1
                paymentInstallments:
                  - {}
                refundCancelationPolicy: refundCancelationPolicy
                sellerNotes: sellerNotes
              lastUpdateTime: '2024-01-15T09:30:00Z'
              name: name
              offerID: offerID
              organizationID: organizationID
              partner: AWS
              productID: productID
              service: MARKETPLACE
              startTime: '2024-01-15T09:30:00Z'
              status: ACTIVE
              type: type
    AddEntitlementCredit:
      path: /org/{orgId}/entitlement/{entitlementId}/addCredit
      method: POST
      auth: true
      docs: >-
        Add the credit amount to the given Entitlement. The credit amount is
        accumulated & saved in the current Entitlement Term of the gvien
        Entitlement.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        entitlementId:
          type: string
          docs: Entitlement ID
      display-name: add entitlement credit
      request:
        name: SharedAddEntitlementCreditParams
        body:
          properties:
            creditAmountIncrement:
              type: double
              docs: The amount to be added to the credit amount.
            entitlementID: string
            organizationID: string
        content-type: application/json
      response:
        docs: OK
        type: root.SharedAddEntitlementCreditResponse
        status-code: 200
      errors:
        - root.AddEntitlementCreditRequestBadRequestError
        - root.AddEntitlementCreditRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            entitlementId: entitlementId
          request:
            creditAmountIncrement: 1.1
            entitlementID: entitlementID
            organizationID: organizationID
          response:
            body:
              creditAmountIncrement: 1.1
              entitlementID: entitlementID
              entitlementTermID: entitlementTermID
              newCreditAmount: 1.1
              organizationID: organizationID
    UpdateEntitlementName:
      path: /org/{orgId}/entitlement/{entitlementId}/entitlementName
      method: PATCH
      auth: true
      docs: Update the name of the given Entitlement
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        entitlementId:
          type: string
          docs: Entitlement ID
      display-name: update entitlement name
      request:
        name: GithubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams
        body:
          properties:
            id: optional<string>
            name: optional<string>
            organizationID: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: root.SharedWorkloadEntitlement
        status-code: 200
      errors:
        - root.UpdateEntitlementNameRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            entitlementId: entitlementId
          request: {}
          response:
            body:
              buyerID: buyerID
              creationTime: '2024-01-15T09:30:00Z'
              endTime: '2024-01-15T09:30:00Z'
              entitlementTermID: entitlementTermID
              externalBuyerID: externalBuyerID
              externalID: externalID
              externalProductID: externalProductID
              id: id
              info:
                autoRenew: true
                awsEntitlements:
                  - {}
                azureSubscriptions:
                  - {}
                collectableAmount: 1.1
                commitAmount: 1.1
                commits:
                  - {}
                currency: currency
                dimensions:
                  - {}
                disbursedAmount: 1.1
                discount: 1.1
                eulaType: ''
                eulaUrl: eulaUrl
                gcpEntitlements:
                  - {}
                gcpPlans:
                  - {}
                invoicedAmount: 1.1
                paymentInstallments:
                  - {}
                refundCancelationPolicy: refundCancelationPolicy
                sellerNotes: sellerNotes
              lastUpdateTime: '2024-01-15T09:30:00Z'
              name: name
              offerID: offerID
              organizationID: organizationID
              partner: AWS
              productID: productID
              service: MARKETPLACE
              startTime: '2024-01-15T09:30:00Z'
              status: ACTIVE
              type: type
    ListEntitlementsByOffer:
      path: /org/{orgId}/offer/{offerId}/entitlement
      method: GET
      auth: true
      docs: List all entitlements under the given offer
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        offerId:
          type: string
          docs: Offer ID
      display-name: list entitlements by offer
      response:
        docs: OK
        type: list<root.SharedWorkloadEntitlement>
        status-code: 200
      errors:
        - root.ListEntitlementsByOfferRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            offerId: offerId
          response:
            body:
              - buyerID: buyerID
                creationTime: '2024-01-15T09:30:00Z'
                endTime: '2024-01-15T09:30:00Z'
                entitlementTermID: entitlementTermID
                externalBuyerID: externalBuyerID
                externalID: externalID
                externalProductID: externalProductID
                id: id
                info:
                  autoRenew: true
                  awsEntitlements:
                    - {}
                  azureSubscriptions:
                    - {}
                  collectableAmount: 1.1
                  commitAmount: 1.1
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  disbursedAmount: 1.1
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpEntitlements:
                    - {}
                  gcpPlans:
                    - {}
                  invoicedAmount: 1.1
                  paymentInstallments:
                    - {}
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                lastUpdateTime: '2024-01-15T09:30:00Z'
                name: name
                offerID: offerID
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                startTime: '2024-01-15T09:30:00Z'
                status: ACTIVE
                type: type
    ListEntitlementsByPartner:
      path: /org/{orgId}/partner/{partner}/entitlement
      method: GET
      auth: true
      docs: List all entitlements under the given partner
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: ListEntitlementsByPartnerRequestPartner
          docs: Cloud Partner
      display-name: list entitlements by partner
      response:
        docs: OK
        type: list<root.SharedWorkloadEntitlement>
        status-code: 200
      errors:
        - root.ListEntitlementsByPartnerRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
          response:
            body:
              - buyerID: buyerID
                creationTime: '2024-01-15T09:30:00Z'
                endTime: '2024-01-15T09:30:00Z'
                entitlementTermID: entitlementTermID
                externalBuyerID: externalBuyerID
                externalID: externalID
                externalProductID: externalProductID
                id: id
                info:
                  autoRenew: true
                  awsEntitlements:
                    - {}
                  azureSubscriptions:
                    - {}
                  collectableAmount: 1.1
                  commitAmount: 1.1
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  disbursedAmount: 1.1
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpEntitlements:
                    - {}
                  gcpPlans:
                    - {}
                  invoicedAmount: 1.1
                  paymentInstallments:
                    - {}
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                lastUpdateTime: '2024-01-15T09:30:00Z'
                name: name
                offerID: offerID
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                startTime: '2024-01-15T09:30:00Z'
                status: ACTIVE
                type: type
    ListEntitlementsByProduct:
      path: /org/{orgId}/product/{productId}/entitlement
      method: GET
      auth: true
      docs: List all entitlements under the given product
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        productId:
          type: string
          docs: Product ID
      display-name: list entitlements by product
      response:
        docs: OK
        type: list<root.SharedWorkloadEntitlement>
        status-code: 200
      errors:
        - root.ListEntitlementsByProductRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            productId: productId
          response:
            body:
              - buyerID: buyerID
                creationTime: '2024-01-15T09:30:00Z'
                endTime: '2024-01-15T09:30:00Z'
                entitlementTermID: entitlementTermID
                externalBuyerID: externalBuyerID
                externalID: externalID
                externalProductID: externalProductID
                id: id
                info:
                  autoRenew: true
                  awsEntitlements:
                    - {}
                  azureSubscriptions:
                    - {}
                  collectableAmount: 1.1
                  commitAmount: 1.1
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  disbursedAmount: 1.1
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpEntitlements:
                    - {}
                  gcpPlans:
                    - {}
                  invoicedAmount: 1.1
                  paymentInstallments:
                    - {}
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                lastUpdateTime: '2024-01-15T09:30:00Z'
                name: name
                offerID: offerID
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                startTime: '2024-01-15T09:30:00Z'
                status: ACTIVE
                type: type
  source:
    openapi: ../swagger.json
types:
  ListEntitlementsByPartnerRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
",
    },
    "entitlementTerm.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetEntitlementTerm": {
              "auth": true,
              "display-name": "get entitlement term",
              "docs": "Get the entitlement term by ID",
              "errors": [
                "root.GetEntitlementTermRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "entitlementId": "entitlementId",
                    "entitlementTermId": "entitlementTermId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": {
                      "buyerID": "buyerID",
                      "commitAmount": 1.1,
                      "creditAmount": 1.1,
                      "endTime": "2024-01-15T09:30:00Z",
                      "entitlementID": "entitlementID",
                      "entitlementInfo": {
                        "autoRenew": true,
                        "awsEntitlements": [
                          {},
                        ],
                        "azureSubscriptions": [
                          {},
                        ],
                        "collectableAmount": 1.1,
                        "commitAmount": 1.1,
                        "commits": [
                          {},
                        ],
                        "currency": "currency",
                        "dimensions": [
                          {},
                        ],
                        "disbursedAmount": 1.1,
                        "discount": 1.1,
                        "eulaType": "",
                        "eulaUrl": "eulaUrl",
                        "gcpEntitlements": [
                          {},
                        ],
                        "gcpPlans": [
                          {},
                        ],
                        "invoicedAmount": 1.1,
                        "paymentInstallments": [
                          {},
                        ],
                        "refundCancelationPolicy": "refundCancelationPolicy",
                        "sellerNotes": "sellerNotes",
                      },
                      "externalEntitlementID": "externalEntitlementID",
                      "id": "id",
                      "info": {
                        "type": "",
                      },
                      "offerID": "offerID",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "productID": "productID",
                      "service": "MARKETPLACE",
                      "startTime": "2024-01-15T09:30:00Z",
                      "usedCommitAmount": 1.1,
                      "usedCreditAmount": 1.1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm/{entitlementTermId}",
              "path-parameters": {
                "entitlementId": {
                  "docs": "Entitlement ID",
                  "type": "string",
                },
                "entitlementTermId": {
                  "docs": "Entitlement Term ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedWorkloadEntitlementTerm",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListEntitlementTerms": {
              "auth": true,
              "display-name": "list entitlement terms",
              "docs": "List all Entitlement Terms of the given Entitlement",
              "errors": [
                "root.ListEntitlementTermsRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "entitlementId": "entitlementId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "buyerID": "buyerID",
                        "commitAmount": 1.1,
                        "creditAmount": 1.1,
                        "endTime": "2024-01-15T09:30:00Z",
                        "entitlementID": "entitlementID",
                        "entitlementInfo": {
                          "autoRenew": true,
                          "awsEntitlements": [
                            {},
                          ],
                          "azureSubscriptions": [
                            {},
                          ],
                          "collectableAmount": 1.1,
                          "commitAmount": 1.1,
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "disbursedAmount": 1.1,
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpEntitlements": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "invoicedAmount": 1.1,
                          "paymentInstallments": [
                            {},
                          ],
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                        },
                        "externalEntitlementID": "externalEntitlementID",
                        "id": "id",
                        "info": {
                          "type": "",
                        },
                        "offerID": "offerID",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "startTime": "2024-01-15T09:30:00Z",
                        "usedCommitAmount": 1.1,
                        "usedCreditAmount": 1.1,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm",
              "path-parameters": {
                "entitlementId": {
                  "docs": "Entitlement ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadEntitlementTerm>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListEntitlementTerms:
      path: /org/{orgId}/entitlement/{entitlementId}/entitlementTerm
      method: GET
      auth: true
      docs: List all Entitlement Terms of the given Entitlement
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        entitlementId:
          type: string
          docs: Entitlement ID
      display-name: list entitlement terms
      response:
        docs: OK
        type: list<root.SharedWorkloadEntitlementTerm>
        status-code: 200
      errors:
        - root.ListEntitlementTermsRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            entitlementId: entitlementId
          response:
            body:
              - buyerID: buyerID
                commitAmount: 1.1
                creditAmount: 1.1
                endTime: '2024-01-15T09:30:00Z'
                entitlementID: entitlementID
                entitlementInfo:
                  autoRenew: true
                  awsEntitlements:
                    - {}
                  azureSubscriptions:
                    - {}
                  collectableAmount: 1.1
                  commitAmount: 1.1
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  disbursedAmount: 1.1
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpEntitlements:
                    - {}
                  gcpPlans:
                    - {}
                  invoicedAmount: 1.1
                  paymentInstallments:
                    - {}
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                externalEntitlementID: externalEntitlementID
                id: id
                info:
                  type: ''
                offerID: offerID
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                startTime: '2024-01-15T09:30:00Z'
                usedCommitAmount: 1.1
                usedCreditAmount: 1.1
    GetEntitlementTerm:
      path: >-
        /org/{orgId}/entitlement/{entitlementId}/entitlementTerm/{entitlementTermId}
      method: GET
      auth: true
      docs: Get the entitlement term by ID
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        entitlementId:
          type: string
          docs: Entitlement ID
        entitlementTermId:
          type: string
          docs: Entitlement Term ID
      display-name: get entitlement term
      response:
        docs: OK
        type: root.SharedWorkloadEntitlementTerm
        status-code: 200
      errors:
        - root.GetEntitlementTermRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            entitlementId: entitlementId
            entitlementTermId: entitlementTermId
          response:
            body:
              buyerID: buyerID
              commitAmount: 1.1
              creditAmount: 1.1
              endTime: '2024-01-15T09:30:00Z'
              entitlementID: entitlementID
              entitlementInfo:
                autoRenew: true
                awsEntitlements:
                  - {}
                azureSubscriptions:
                  - {}
                collectableAmount: 1.1
                commitAmount: 1.1
                commits:
                  - {}
                currency: currency
                dimensions:
                  - {}
                disbursedAmount: 1.1
                discount: 1.1
                eulaType: ''
                eulaUrl: eulaUrl
                gcpEntitlements:
                  - {}
                gcpPlans:
                  - {}
                invoicedAmount: 1.1
                paymentInstallments:
                  - {}
                refundCancelationPolicy: refundCancelationPolicy
                sellerNotes: sellerNotes
              externalEntitlementID: externalEntitlementID
              id: id
              info:
                type: ''
              offerID: offerID
              organizationID: organizationID
              partner: AWS
              productID: productID
              service: MARKETPLACE
              startTime: '2024-01-15T09:30:00Z'
              usedCommitAmount: 1.1
              usedCreditAmount: 1.1
  source:
    openapi: ../swagger.json
",
    },
    "integration.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "CreateIntegration": {
              "auth": true,
              "display-name": "create integration",
              "docs": "For each organization, partner & service, there should be at most one integration.",
              "errors": [
                "root.CreateIntegrationRequestBadRequestError",
                "root.CreateIntegrationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "request": {
                    "info": {},
                    "organizationID": "organizationID",
                    "partner": "AWS",
                    "service": "MARKETPLACE",
                  },
                  "response": {
                    "body": {
                      "createdBy": "createdBy",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "info": {
                        "awsAceIntegration": {
                          "partnerId": "partnerId",
                          "s3BucketName": "s3BucketName",
                          "s3BucketRegion": "s3BucketRegion",
                          "secretKey": "secretKey",
                        },
                        "awsIntegration": {
                          "externalID": "externalID",
                          "iamRoleArn": "iamRoleArn",
                          "marketplaceStartDate": "2024-01-15T09:30:00Z",
                          "mcasFullSyncDone": true,
                          "mcasIamRoleArn": "mcasIamRoleArn",
                          "mcasS3Bucket": "mcasS3Bucket",
                          "mcasSnsTopic": "mcasSnsTopic",
                          "mdfsFullSyncDone": true,
                          "mdfsKmsKeyArn": "mdfsKmsKeyArn",
                          "mdfsS3BucketArn": "mdfsS3BucketArn",
                          "policyArns": [
                            "policyArns",
                          ],
                          "revenueRecordFullSyncDone": true,
                        },
                        "azureIntegration": {
                          "cmaFullSyncDone": true,
                          "secretKey": "secretKey",
                        },
                        "gcpIntegration": {
                          "gcpProjectId": "gcpProjectId",
                          "gcpProjectNumber": "gcpProjectNumber",
                          "identityProviderId": "identityProviderId",
                          "partnerId": "partnerId",
                          "pubsubTopic": "pubsubTopic",
                          "reportBucket": "reportBucket",
                          "reportFullSyncDone": true,
                          "reportStartDate": "2024-01-15T09:30:00Z",
                          "serviceAccountEmail": "serviceAccountEmail",
                          "serviceNames": [
                            "serviceNames",
                          ],
                          "workloadIdentityPoolId": "workloadIdentityPoolId",
                        },
                        "hubspotCrmIntegration": {
                          "portalId": 1,
                          "secretKey": "secretKey",
                        },
                        "salesforceCrmIntegration": {
                          "filters": [
                            {},
                          ],
                          "instanceUrl": "instanceUrl",
                          "isSandbox": true,
                          "secretKey": "secretKey",
                          "subdomain": "subdomain",
                        },
                        "slackIntegration": {
                          "accessToken": "accessToken",
                          "appId": "appId",
                          "botUserId": "botUserId",
                          "expiresIn": 1,
                          "redirectUrl": "redirectUrl",
                          "refreshToken": "refreshToken",
                          "scope": "scope",
                          "tokenType": "tokenType",
                        },
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "lastUpdatedBy": "lastUpdatedBy",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "service": "MARKETPLACE",
                      "status": "CREATED",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/integration",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "createdBy": "optional<string>",
                    "info": "root.SharedIntegrationInfo",
                    "organizationID": "string",
                    "partner": "SharedCreateIntegrationParamsPartner",
                    "service": "literal<"MARKETPLACE">",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SharedCreateIntegrationParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedIdentityIntegration",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "DeleteIntegration": {
              "auth": true,
              "display-name": "delete integration",
              "docs": "delete the integration for the given orgId, partner and service.",
              "errors": [
                "root.DeleteIntegrationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                    "service": "MARKETPLACE",
                  },
                  "response": {
                    "body": "string",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{orgId}/integration/{partner}/{service}",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "DeleteIntegrationRequestPartner",
                },
                "service": {
                  "docs": "Partner Service",
                  "type": "DeleteIntegrationRequestService",
                },
              },
              "response": {
                "docs": "Empty string if deletion is successful",
                "status-code": 200,
                "type": "string",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "GetIntegration": {
              "auth": true,
              "display-name": "get integration",
              "docs": "Get the integration for the given organization, partner & service.",
              "errors": [
                "root.GetIntegrationRequestNotFoundError",
                "root.GetIntegrationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                    "service": "MARKETPLACE",
                  },
                  "response": {
                    "body": {
                      "createdBy": "createdBy",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "info": {
                        "awsAceIntegration": {
                          "partnerId": "partnerId",
                          "s3BucketName": "s3BucketName",
                          "s3BucketRegion": "s3BucketRegion",
                          "secretKey": "secretKey",
                        },
                        "awsIntegration": {
                          "externalID": "externalID",
                          "iamRoleArn": "iamRoleArn",
                          "marketplaceStartDate": "2024-01-15T09:30:00Z",
                          "mcasFullSyncDone": true,
                          "mcasIamRoleArn": "mcasIamRoleArn",
                          "mcasS3Bucket": "mcasS3Bucket",
                          "mcasSnsTopic": "mcasSnsTopic",
                          "mdfsFullSyncDone": true,
                          "mdfsKmsKeyArn": "mdfsKmsKeyArn",
                          "mdfsS3BucketArn": "mdfsS3BucketArn",
                          "policyArns": [
                            "policyArns",
                          ],
                          "revenueRecordFullSyncDone": true,
                        },
                        "azureIntegration": {
                          "cmaFullSyncDone": true,
                          "secretKey": "secretKey",
                        },
                        "gcpIntegration": {
                          "gcpProjectId": "gcpProjectId",
                          "gcpProjectNumber": "gcpProjectNumber",
                          "identityProviderId": "identityProviderId",
                          "partnerId": "partnerId",
                          "pubsubTopic": "pubsubTopic",
                          "reportBucket": "reportBucket",
                          "reportFullSyncDone": true,
                          "reportStartDate": "2024-01-15T09:30:00Z",
                          "serviceAccountEmail": "serviceAccountEmail",
                          "serviceNames": [
                            "serviceNames",
                          ],
                          "workloadIdentityPoolId": "workloadIdentityPoolId",
                        },
                        "hubspotCrmIntegration": {
                          "portalId": 1,
                          "secretKey": "secretKey",
                        },
                        "salesforceCrmIntegration": {
                          "filters": [
                            {},
                          ],
                          "instanceUrl": "instanceUrl",
                          "isSandbox": true,
                          "secretKey": "secretKey",
                          "subdomain": "subdomain",
                        },
                        "slackIntegration": {
                          "accessToken": "accessToken",
                          "appId": "appId",
                          "botUserId": "botUserId",
                          "expiresIn": 1,
                          "redirectUrl": "redirectUrl",
                          "refreshToken": "refreshToken",
                          "scope": "scope",
                          "tokenType": "tokenType",
                        },
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "lastUpdatedBy": "lastUpdatedBy",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "service": "MARKETPLACE",
                      "status": "CREATED",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/integration/{partner}/{service}",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "GetIntegrationRequestPartner",
                },
                "service": {
                  "docs": "Partner Service",
                  "type": "GetIntegrationRequestService",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedIdentityIntegration",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListIntegrationsByOrganization": {
              "auth": true,
              "display-name": "list integrations by organization",
              "docs": "List all integrations for the given organization.",
              "errors": [
                "root.ListIntegrationsByOrganizationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "createdBy": "createdBy",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "lastUpdatedBy": "lastUpdatedBy",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "service": "MARKETPLACE",
                        "status": "CREATED",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/integration",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedIdentityIntegration>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "UpdateIntegration": {
              "auth": true,
              "display-name": "update integration",
              "docs": "Update the given integration.",
              "errors": [
                "root.UpdateIntegrationRequestBadRequestError",
                "root.UpdateIntegrationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                    "service": "MARKETPLACE",
                  },
                  "request": {
                    "info": {},
                    "organizationID": "organizationID",
                    "partner": "AWS",
                    "service": "MARKETPLACE",
                  },
                  "response": {
                    "body": {
                      "createdBy": "createdBy",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "info": {
                        "awsAceIntegration": {
                          "partnerId": "partnerId",
                          "s3BucketName": "s3BucketName",
                          "s3BucketRegion": "s3BucketRegion",
                          "secretKey": "secretKey",
                        },
                        "awsIntegration": {
                          "externalID": "externalID",
                          "iamRoleArn": "iamRoleArn",
                          "marketplaceStartDate": "2024-01-15T09:30:00Z",
                          "mcasFullSyncDone": true,
                          "mcasIamRoleArn": "mcasIamRoleArn",
                          "mcasS3Bucket": "mcasS3Bucket",
                          "mcasSnsTopic": "mcasSnsTopic",
                          "mdfsFullSyncDone": true,
                          "mdfsKmsKeyArn": "mdfsKmsKeyArn",
                          "mdfsS3BucketArn": "mdfsS3BucketArn",
                          "policyArns": [
                            "policyArns",
                          ],
                          "revenueRecordFullSyncDone": true,
                        },
                        "azureIntegration": {
                          "cmaFullSyncDone": true,
                          "secretKey": "secretKey",
                        },
                        "gcpIntegration": {
                          "gcpProjectId": "gcpProjectId",
                          "gcpProjectNumber": "gcpProjectNumber",
                          "identityProviderId": "identityProviderId",
                          "partnerId": "partnerId",
                          "pubsubTopic": "pubsubTopic",
                          "reportBucket": "reportBucket",
                          "reportFullSyncDone": true,
                          "reportStartDate": "2024-01-15T09:30:00Z",
                          "serviceAccountEmail": "serviceAccountEmail",
                          "serviceNames": [
                            "serviceNames",
                          ],
                          "workloadIdentityPoolId": "workloadIdentityPoolId",
                        },
                        "hubspotCrmIntegration": {
                          "portalId": 1,
                          "secretKey": "secretKey",
                        },
                        "salesforceCrmIntegration": {
                          "filters": [
                            {},
                          ],
                          "instanceUrl": "instanceUrl",
                          "isSandbox": true,
                          "secretKey": "secretKey",
                          "subdomain": "subdomain",
                        },
                        "slackIntegration": {
                          "accessToken": "accessToken",
                          "appId": "appId",
                          "botUserId": "botUserId",
                          "expiresIn": 1,
                          "redirectUrl": "redirectUrl",
                          "refreshToken": "refreshToken",
                          "scope": "scope",
                          "tokenType": "tokenType",
                        },
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "lastUpdatedBy": "lastUpdatedBy",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "service": "MARKETPLACE",
                      "status": "CREATED",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/org/{orgId}/integration/{partner}/{service}",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "UpdateIntegrationRequestPartner",
                },
                "service": {
                  "docs": "Partner Service",
                  "type": "UpdateIntegrationRequestService",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "info": "root.SharedIntegrationInfo",
                    "organizationID": "string",
                    "partner": {
                      "docs": undefined,
                      "name": "sharedUpdateIntegrationParamsPartner",
                      "type": "SharedUpdateIntegrationParamsPartner",
                    },
                    "service": {
                      "docs": undefined,
                      "name": "sharedUpdateIntegrationParamsService",
                      "type": "literal<"MARKETPLACE">",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SharedUpdateIntegrationParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedIdentityIntegration",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "VerifyIntegration": {
              "auth": true,
              "display-name": "verify integration",
              "docs": "Verify the given integration, check whether it works correctly.",
              "errors": [
                "root.VerifyIntegrationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                    "service": "MARKETPLACE",
                  },
                  "response": {
                    "body": true,
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/integration/{partner}/{service}/verify",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "VerifyIntegrationRequestPartner",
                },
                "service": {
                  "docs": "Partner Service",
                  "type": "VerifyIntegrationRequestService",
                },
              },
              "response": {
                "docs": "whether it is verified or not",
                "status-code": 200,
                "type": "boolean",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "DeleteIntegrationRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "DeleteIntegrationRequestService": {
            "enum": [
              "MARKETPLACE",
              "CRM",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GetIntegrationRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "GetIntegrationRequestService": {
            "enum": [
              "MARKETPLACE",
              "CRM",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedCreateIntegrationParamsPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedUpdateIntegrationParamsPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "UpdateIntegrationRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "UpdateIntegrationRequestService": {
            "enum": [
              "MARKETPLACE",
              "CRM",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "VerifyIntegrationRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "VerifyIntegrationRequestService": {
            "enum": [
              "MARKETPLACE",
              "CRM",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListIntegrationsByOrganization:
      path: /org/{orgId}/integration
      method: GET
      auth: true
      docs: List all integrations for the given organization.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: list integrations by organization
      response:
        docs: OK
        type: list<root.SharedIdentityIntegration>
        status-code: 200
      errors:
        - root.ListIntegrationsByOrganizationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          response:
            body:
              - createdBy: createdBy
                creationTime: '2024-01-15T09:30:00Z'
                lastUpdateTime: '2024-01-15T09:30:00Z'
                lastUpdatedBy: lastUpdatedBy
                organizationID: organizationID
                partner: AWS
                service: MARKETPLACE
                status: CREATED
    CreateIntegration:
      path: /org/{orgId}/integration
      method: POST
      auth: true
      docs: >-
        For each organization, partner & service, there should be at most one
        integration.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: create integration
      request:
        name: SharedCreateIntegrationParams
        body:
          properties:
            createdBy: optional<string>
            info: root.SharedIntegrationInfo
            organizationID: string
            partner: SharedCreateIntegrationParamsPartner
            service: literal<"MARKETPLACE">
        content-type: application/json
      response:
        docs: OK
        type: root.SharedIdentityIntegration
        status-code: 200
      errors:
        - root.CreateIntegrationRequestBadRequestError
        - root.CreateIntegrationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          request:
            info: {}
            organizationID: organizationID
            partner: AWS
            service: MARKETPLACE
          response:
            body:
              createdBy: createdBy
              creationTime: '2024-01-15T09:30:00Z'
              info:
                awsAceIntegration:
                  partnerId: partnerId
                  s3BucketName: s3BucketName
                  s3BucketRegion: s3BucketRegion
                  secretKey: secretKey
                awsIntegration:
                  externalID: externalID
                  iamRoleArn: iamRoleArn
                  marketplaceStartDate: '2024-01-15T09:30:00Z'
                  mcasFullSyncDone: true
                  mcasIamRoleArn: mcasIamRoleArn
                  mcasS3Bucket: mcasS3Bucket
                  mcasSnsTopic: mcasSnsTopic
                  mdfsFullSyncDone: true
                  mdfsKmsKeyArn: mdfsKmsKeyArn
                  mdfsS3BucketArn: mdfsS3BucketArn
                  policyArns:
                    - policyArns
                  revenueRecordFullSyncDone: true
                azureIntegration:
                  cmaFullSyncDone: true
                  secretKey: secretKey
                gcpIntegration:
                  gcpProjectId: gcpProjectId
                  gcpProjectNumber: gcpProjectNumber
                  identityProviderId: identityProviderId
                  partnerId: partnerId
                  pubsubTopic: pubsubTopic
                  reportBucket: reportBucket
                  reportFullSyncDone: true
                  reportStartDate: '2024-01-15T09:30:00Z'
                  serviceAccountEmail: serviceAccountEmail
                  serviceNames:
                    - serviceNames
                  workloadIdentityPoolId: workloadIdentityPoolId
                hubspotCrmIntegration:
                  portalId: 1
                  secretKey: secretKey
                salesforceCrmIntegration:
                  filters:
                    - {}
                  instanceUrl: instanceUrl
                  isSandbox: true
                  secretKey: secretKey
                  subdomain: subdomain
                slackIntegration:
                  accessToken: accessToken
                  appId: appId
                  botUserId: botUserId
                  expiresIn: 1
                  redirectUrl: redirectUrl
                  refreshToken: refreshToken
                  scope: scope
                  tokenType: tokenType
              lastUpdateTime: '2024-01-15T09:30:00Z'
              lastUpdatedBy: lastUpdatedBy
              organizationID: organizationID
              partner: AWS
              service: MARKETPLACE
              status: CREATED
    GetIntegration:
      path: /org/{orgId}/integration/{partner}/{service}
      method: GET
      auth: true
      docs: Get the integration for the given organization, partner & service.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: GetIntegrationRequestPartner
          docs: Cloud Partner
        service:
          type: GetIntegrationRequestService
          docs: Partner Service
      display-name: get integration
      response:
        docs: OK
        type: root.SharedIdentityIntegration
        status-code: 200
      errors:
        - root.GetIntegrationRequestNotFoundError
        - root.GetIntegrationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
            service: MARKETPLACE
          response:
            body:
              createdBy: createdBy
              creationTime: '2024-01-15T09:30:00Z'
              info:
                awsAceIntegration:
                  partnerId: partnerId
                  s3BucketName: s3BucketName
                  s3BucketRegion: s3BucketRegion
                  secretKey: secretKey
                awsIntegration:
                  externalID: externalID
                  iamRoleArn: iamRoleArn
                  marketplaceStartDate: '2024-01-15T09:30:00Z'
                  mcasFullSyncDone: true
                  mcasIamRoleArn: mcasIamRoleArn
                  mcasS3Bucket: mcasS3Bucket
                  mcasSnsTopic: mcasSnsTopic
                  mdfsFullSyncDone: true
                  mdfsKmsKeyArn: mdfsKmsKeyArn
                  mdfsS3BucketArn: mdfsS3BucketArn
                  policyArns:
                    - policyArns
                  revenueRecordFullSyncDone: true
                azureIntegration:
                  cmaFullSyncDone: true
                  secretKey: secretKey
                gcpIntegration:
                  gcpProjectId: gcpProjectId
                  gcpProjectNumber: gcpProjectNumber
                  identityProviderId: identityProviderId
                  partnerId: partnerId
                  pubsubTopic: pubsubTopic
                  reportBucket: reportBucket
                  reportFullSyncDone: true
                  reportStartDate: '2024-01-15T09:30:00Z'
                  serviceAccountEmail: serviceAccountEmail
                  serviceNames:
                    - serviceNames
                  workloadIdentityPoolId: workloadIdentityPoolId
                hubspotCrmIntegration:
                  portalId: 1
                  secretKey: secretKey
                salesforceCrmIntegration:
                  filters:
                    - {}
                  instanceUrl: instanceUrl
                  isSandbox: true
                  secretKey: secretKey
                  subdomain: subdomain
                slackIntegration:
                  accessToken: accessToken
                  appId: appId
                  botUserId: botUserId
                  expiresIn: 1
                  redirectUrl: redirectUrl
                  refreshToken: refreshToken
                  scope: scope
                  tokenType: tokenType
              lastUpdateTime: '2024-01-15T09:30:00Z'
              lastUpdatedBy: lastUpdatedBy
              organizationID: organizationID
              partner: AWS
              service: MARKETPLACE
              status: CREATED
    DeleteIntegration:
      path: /org/{orgId}/integration/{partner}/{service}
      method: DELETE
      auth: true
      docs: delete the integration for the given orgId, partner and service.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: DeleteIntegrationRequestPartner
          docs: Cloud Partner
        service:
          type: DeleteIntegrationRequestService
          docs: Partner Service
      display-name: delete integration
      response:
        docs: Empty string if deletion is successful
        type: string
        status-code: 200
      errors:
        - root.DeleteIntegrationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
            service: MARKETPLACE
          response:
            body: string
    UpdateIntegration:
      path: /org/{orgId}/integration/{partner}/{service}
      method: PATCH
      auth: true
      docs: Update the given integration.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: UpdateIntegrationRequestPartner
          docs: Cloud Partner
        service:
          type: UpdateIntegrationRequestService
          docs: Partner Service
      display-name: update integration
      request:
        name: SharedUpdateIntegrationParams
        body:
          properties:
            info: root.SharedIntegrationInfo
            organizationID: string
            partner:
              type: SharedUpdateIntegrationParamsPartner
              name: sharedUpdateIntegrationParamsPartner
            service:
              type: literal<"MARKETPLACE">
              name: sharedUpdateIntegrationParamsService
        content-type: application/json
      response:
        docs: OK
        type: root.SharedIdentityIntegration
        status-code: 200
      errors:
        - root.UpdateIntegrationRequestBadRequestError
        - root.UpdateIntegrationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
            service: MARKETPLACE
          request:
            info: {}
            organizationID: organizationID
            partner: AWS
            service: MARKETPLACE
          response:
            body:
              createdBy: createdBy
              creationTime: '2024-01-15T09:30:00Z'
              info:
                awsAceIntegration:
                  partnerId: partnerId
                  s3BucketName: s3BucketName
                  s3BucketRegion: s3BucketRegion
                  secretKey: secretKey
                awsIntegration:
                  externalID: externalID
                  iamRoleArn: iamRoleArn
                  marketplaceStartDate: '2024-01-15T09:30:00Z'
                  mcasFullSyncDone: true
                  mcasIamRoleArn: mcasIamRoleArn
                  mcasS3Bucket: mcasS3Bucket
                  mcasSnsTopic: mcasSnsTopic
                  mdfsFullSyncDone: true
                  mdfsKmsKeyArn: mdfsKmsKeyArn
                  mdfsS3BucketArn: mdfsS3BucketArn
                  policyArns:
                    - policyArns
                  revenueRecordFullSyncDone: true
                azureIntegration:
                  cmaFullSyncDone: true
                  secretKey: secretKey
                gcpIntegration:
                  gcpProjectId: gcpProjectId
                  gcpProjectNumber: gcpProjectNumber
                  identityProviderId: identityProviderId
                  partnerId: partnerId
                  pubsubTopic: pubsubTopic
                  reportBucket: reportBucket
                  reportFullSyncDone: true
                  reportStartDate: '2024-01-15T09:30:00Z'
                  serviceAccountEmail: serviceAccountEmail
                  serviceNames:
                    - serviceNames
                  workloadIdentityPoolId: workloadIdentityPoolId
                hubspotCrmIntegration:
                  portalId: 1
                  secretKey: secretKey
                salesforceCrmIntegration:
                  filters:
                    - {}
                  instanceUrl: instanceUrl
                  isSandbox: true
                  secretKey: secretKey
                  subdomain: subdomain
                slackIntegration:
                  accessToken: accessToken
                  appId: appId
                  botUserId: botUserId
                  expiresIn: 1
                  redirectUrl: redirectUrl
                  refreshToken: refreshToken
                  scope: scope
                  tokenType: tokenType
              lastUpdateTime: '2024-01-15T09:30:00Z'
              lastUpdatedBy: lastUpdatedBy
              organizationID: organizationID
              partner: AWS
              service: MARKETPLACE
              status: CREATED
    VerifyIntegration:
      path: /org/{orgId}/integration/{partner}/{service}/verify
      method: POST
      auth: true
      docs: Verify the given integration, check whether it works correctly.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: VerifyIntegrationRequestPartner
          docs: Cloud Partner
        service:
          type: VerifyIntegrationRequestService
          docs: Partner Service
      display-name: verify integration
      response:
        docs: whether it is verified or not
        type: boolean
        status-code: 200
      errors:
        - root.VerifyIntegrationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
            service: MARKETPLACE
          response:
            body: true
  source:
    openapi: ../swagger.json
types:
  SharedCreateIntegrationParamsPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    inline: true
    source:
      openapi: ../swagger.json
  GetIntegrationRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
  GetIntegrationRequestService:
    enum:
      - MARKETPLACE
      - CRM
    source:
      openapi: ../swagger.json
  DeleteIntegrationRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
  DeleteIntegrationRequestService:
    enum:
      - MARKETPLACE
      - CRM
    source:
      openapi: ../swagger.json
  UpdateIntegrationRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
  UpdateIntegrationRequestService:
    enum:
      - MARKETPLACE
      - CRM
    source:
      openapi: ../swagger.json
  SharedUpdateIntegrationParamsPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    inline: true
    source:
      openapi: ../swagger.json
  VerifyIntegrationRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
  VerifyIntegrationRequestService:
    enum:
      - MARKETPLACE
      - CRM
    source:
      openapi: ../swagger.json
",
    },
    "metering.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetUsageRecordGroup": {
              "auth": true,
              "display-name": "get usageRecordGroup",
              "docs": "get UsageRecordGroup for the given organization and usageRecordGroup ID",
              "errors": [
                "root.GetUsageRecordGroupRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "usageRecordGroupId": "usageRecordGroupId",
                  },
                  "response": {
                    "body": {
                      "creationTime": "2024-01-15T09:30:00Z",
                      "entitlementID": "entitlementID",
                      "id": "id",
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "metaInfo": {
                        "originRecords": {
                          "key": 1.1,
                        },
                      },
                      "organizationID": "organizationID",
                      "records": {
                        "key": 1.1,
                      },
                      "serialID": 1,
                      "status": "status",
                      "usageRecordReportID": "usageRecordReportID",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/usageRecordGroup/{usageRecordGroupId}",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "usageRecordGroupId": {
                  "docs": "UsageRecordGroup ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedMeteringUsageRecordGroup",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "GetUsageRecordReport": {
              "auth": true,
              "display-name": "get usageRecordReport",
              "docs": "get the usageRecordReport for a given organization and usageRecordReport ID.",
              "errors": [
                "root.GetUsageRecordReportRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "usageRecordReportId": "usageRecordReportId",
                  },
                  "response": {
                    "body": {
                      "creationTime": "2024-01-15T09:30:00Z",
                      "entitlementID": "entitlementID",
                      "entitlementTermID": "entitlementTermID",
                      "id": "id",
                      "info": {
                        "awsMeteringResponse": {
                          "resultMetadata": {
                            "key": "value",
                          },
                          "results": [
                            {},
                          ],
                          "unprocessedRecords": [
                            {},
                          ],
                        },
                        "azureMeteringResponse": {
                          "count": 1,
                          "result": [
                            {},
                          ],
                        },
                        "commitAmount": 1.1,
                        "creditAmount": 1.1,
                        "creditRecords": {
                          "key": 1.1,
                        },
                        "dimensionUnitPrice": {
                          "key": 1.1,
                        },
                        "endTime": "2024-01-15T09:30:00Z",
                        "gcpMeteringResponse": {
                          "reportErrors": [
                            {},
                          ],
                          "serviceConfigId": "serviceConfigId",
                          "serviceRolloutId": "serviceRolloutId",
                        },
                        "includedRecords": {
                          "key": 1.1,
                        },
                        "reportedRecords": {
                          "key": 1.1,
                        },
                        "startTime": "2024-01-15T09:30:00Z",
                        "usageRecordGroupIds": [
                          "usageRecordGroupIds",
                        ],
                        "usedCommitAmount": 1.1,
                        "usedCommitAmountIncrement": 1.1,
                        "usedCreditAmount": 1.1,
                        "usedCreditAmountIncrement": 1.1,
                      },
                      "organizationID": "organizationID",
                      "productID": "productID",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/usageRecordReport/{usageRecordReportId}",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "usageRecordReportId": {
                  "docs": "UsageRecordReport ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedMeteringUsageRecordReport",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListUsageRecordGroupsByEntitlement": {
              "auth": true,
              "display-name": "list usageRecordGroups by entitlement",
              "docs": "list UsageRecordGroups for the given organization and entitlement",
              "errors": [
                "root.ListUsageRecordGroupsByEntitlementRequestBadRequestError",
                "root.ListUsageRecordGroupsByEntitlementRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "entitlementId": "entitlementId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": {
                      "nextOffset": 1,
                      "usageRecordGroups": [
                        {
                          "creationTime": "2024-01-15T09:30:00Z",
                          "entitlementID": "entitlementID",
                          "id": "id",
                          "lastUpdateTime": "2024-01-15T09:30:00Z",
                          "organizationID": "organizationID",
                          "records": {
                            "key": 1.1,
                          },
                          "serialID": 1,
                          "status": "status",
                          "usageRecordReportID": "usageRecordReportID",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
              "path-parameters": {
                "entitlementId": {
                  "docs": "Entitlement ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListUsageRecordGroupsByEntitlementRequest",
                "query-parameters": {
                  "endDate": {
                    "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "List pagination size, default 20, max value is 1000",
                    "type": "optional<integer>",
                  },
                  "offset": {
                    "docs": "List pagination offset, default 0",
                    "type": "optional<integer>",
                  },
                  "startDate": {
                    "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedListUsageRecordGroupsResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListUsageRecordGroupsByOrganization": {
              "auth": true,
              "display-name": "list usageRecordGroups by organization",
              "docs": "list UsageRecordGroups under the given organization.",
              "errors": [
                "root.ListUsageRecordGroupsByOrganizationRequestBadRequestError",
                "root.ListUsageRecordGroupsByOrganizationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": {
                      "nextOffset": 1,
                      "usageRecordGroups": [
                        {
                          "creationTime": "2024-01-15T09:30:00Z",
                          "entitlementID": "entitlementID",
                          "id": "id",
                          "lastUpdateTime": "2024-01-15T09:30:00Z",
                          "organizationID": "organizationID",
                          "records": {
                            "key": 1.1,
                          },
                          "serialID": 1,
                          "status": "status",
                          "usageRecordReportID": "usageRecordReportID",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/usageRecordGroup",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListUsageRecordGroupsByOrganizationRequest",
                "query-parameters": {
                  "endDate": {
                    "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "List pagination size, default 20, max value is 1000",
                    "type": "optional<integer>",
                  },
                  "offset": {
                    "docs": "List pagination offset, default 0",
                    "type": "optional<integer>",
                  },
                  "startDate": {
                    "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedListUsageRecordGroupsResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListUsageRecordGroupsByProduct": {
              "auth": true,
              "display-name": "list usageRecordGroups by product",
              "docs": "list UsageRecordGroups for the given organization and product",
              "errors": [
                "root.ListUsageRecordGroupsByProductRequestBadRequestError",
                "root.ListUsageRecordGroupsByProductRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "productId": "productId",
                  },
                  "response": {
                    "body": {
                      "nextOffset": 1,
                      "usageRecordGroups": [
                        {
                          "creationTime": "2024-01-15T09:30:00Z",
                          "entitlementID": "entitlementID",
                          "id": "id",
                          "lastUpdateTime": "2024-01-15T09:30:00Z",
                          "organizationID": "organizationID",
                          "records": {
                            "key": 1.1,
                          },
                          "serialID": 1,
                          "status": "status",
                          "usageRecordReportID": "usageRecordReportID",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/product/{productId}/usageRecordGroup",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "productId": {
                  "docs": "Product ID",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListUsageRecordGroupsByProductRequest",
                "query-parameters": {
                  "endDate": {
                    "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "List pagination size, default 20, max value is 1000",
                    "type": "optional<integer>",
                  },
                  "offset": {
                    "docs": "List pagination offset, default 0",
                    "type": "optional<integer>",
                  },
                  "startDate": {
                    "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedListUsageRecordGroupsResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListUsageRecordReportsByEntitlement": {
              "auth": true,
              "display-name": "list usageRecordReports by entitlement",
              "docs": "List usageRecordReports for the given organization and entitlement. Filter by entitlementTermId if it is given.",
              "errors": [
                "root.ListUsageRecordReportsByEntitlementRequestBadRequestError",
                "root.ListUsageRecordReportsByEntitlementRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "entitlementId": "entitlementId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": {
                      "nextOffset": 1,
                      "usageRecordReports": [
                        {
                          "creationTime": "2024-01-15T09:30:00Z",
                          "entitlementID": "entitlementID",
                          "entitlementTermID": "entitlementTermID",
                          "id": "id",
                          "organizationID": "organizationID",
                          "productID": "productID",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordReport",
              "path-parameters": {
                "entitlementId": {
                  "docs": "Entitlement ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListUsageRecordReportsByEntitlementRequest",
                "query-parameters": {
                  "endDate": {
                    "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                    "type": "optional<string>",
                  },
                  "entitlementTermId": {
                    "docs": "The Entitlement Term ID, if not given, return the UsageRecordReports under the Entitlement",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "List pagination size, default 20, max value is 1000",
                    "type": "optional<integer>",
                  },
                  "offset": {
                    "docs": "List pagination offset, default 0",
                    "type": "optional<integer>",
                  },
                  "startDate": {
                    "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedListUsageRecordReportsResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListUsageRecordReportsByOrganization": {
              "auth": true,
              "display-name": "list usageRecordReports by organization",
              "docs": "List usageRecordReports under the given organization",
              "errors": [
                "root.ListUsageRecordReportsByOrganizationRequestBadRequestError",
                "root.ListUsageRecordReportsByOrganizationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": {
                      "nextOffset": 1,
                      "usageRecordReports": [
                        {
                          "creationTime": "2024-01-15T09:30:00Z",
                          "entitlementID": "entitlementID",
                          "entitlementTermID": "entitlementTermID",
                          "id": "id",
                          "organizationID": "organizationID",
                          "productID": "productID",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/usageRecordReport",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListUsageRecordReportsByOrganizationRequest",
                "query-parameters": {
                  "endDate": {
                    "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "List pagination size, default 20, max value is 1000",
                    "type": "optional<integer>",
                  },
                  "offset": {
                    "docs": "List pagination offset, default 0",
                    "type": "optional<integer>",
                  },
                  "startDate": {
                    "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedListUsageRecordReportsResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListUsageRecordReportsByProduct": {
              "auth": true,
              "display-name": "list usageRecordReports by product",
              "docs": "List usageRecordReports for the given organization and product",
              "errors": [
                "root.ListUsageRecordReportsByProductRequestBadRequestError",
                "root.ListUsageRecordReportsByProductRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "productId": "productId",
                  },
                  "response": {
                    "body": {
                      "nextOffset": 1,
                      "usageRecordReports": [
                        {
                          "creationTime": "2024-01-15T09:30:00Z",
                          "entitlementID": "entitlementID",
                          "entitlementTermID": "entitlementTermID",
                          "id": "id",
                          "organizationID": "organizationID",
                          "productID": "productID",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/product/{productId}/usageRecordReport",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "productId": {
                  "docs": "Product ID",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListUsageRecordReportsByProductRequest",
                "query-parameters": {
                  "endDate": {
                    "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "List pagination size, default 20, max value is 1000",
                    "type": "optional<integer>",
                  },
                  "offset": {
                    "docs": "List pagination offset, default 0",
                    "type": "optional<integer>",
                  },
                  "startDate": {
                    "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedListUsageRecordReportsResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ReportUsageRecordGroup": {
              "auth": true,
              "display-name": "report usageRecordGroup",
              "docs": "It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.",
              "errors": [
                "root.ReportUsageRecordGroupRequestBadRequestError",
                "root.ReportUsageRecordGroupRequestConflictError",
                "root.ReportUsageRecordGroupRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "entitlementId": "entitlementId",
                    "orgId": "orgId",
                  },
                  "request": {
                    "entitlementID": "entitlementID",
                    "organizationID": "organizationID",
                    "records": {
                      "key": 1.1,
                    },
                  },
                  "response": {
                    "body": {
                      "creationTime": "2024-01-15T09:30:00Z",
                      "entitlementID": "entitlementID",
                      "id": "id",
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "metaInfo": {
                        "originRecords": {
                          "key": 1.1,
                        },
                      },
                      "organizationID": "organizationID",
                      "records": {
                        "key": 1.1,
                      },
                      "serialID": 1,
                      "status": "status",
                      "usageRecordReportID": "usageRecordReportID",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
              "path-parameters": {
                "entitlementId": {
                  "docs": "Entitlement ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "entitlementID": "string",
                    "id": {
                      "docs": "uuid of the UsageRecordGroup (the size is up to 36 characters), if not provided, suger will generate one.",
                      "type": "optional<string>",
                    },
                    "metaInfo": {
                      "docs": "read-only, don't set it when reporting the usage record group.",
                      "type": "optional<root.SharedMeteringUsageRecordGroupMetaInfo>",
                    },
                    "organizationID": "string",
                    "records": "map<string, double>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SharedCreateUsageRecordGroupParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedMeteringUsageRecordGroup",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListUsageRecordGroupsByEntitlement:
      path: /org/{orgId}/entitlement/{entitlementId}/usageRecordGroup
      method: GET
      auth: true
      docs: list UsageRecordGroups for the given organization and entitlement
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        entitlementId:
          type: string
          docs: Entitlement ID
      display-name: list usageRecordGroups by entitlement
      request:
        name: ListUsageRecordGroupsByEntitlementRequest
        query-parameters:
          startDate:
            type: optional<string>
            docs: >-
              start date (UTC) in YYYY-MM-DD format, default is 30 days before
              the endDate
          endDate:
            type: optional<string>
            docs: end date (UTC) in YYYY-MM-DD format, default is today
          limit:
            type: optional<integer>
            docs: List pagination size, default 20, max value is 1000
          offset:
            type: optional<integer>
            docs: List pagination offset, default 0
      response:
        docs: OK
        type: root.SharedListUsageRecordGroupsResponse
        status-code: 200
      errors:
        - root.ListUsageRecordGroupsByEntitlementRequestBadRequestError
        - root.ListUsageRecordGroupsByEntitlementRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            entitlementId: entitlementId
          response:
            body:
              nextOffset: 1
              usageRecordGroups:
                - creationTime: '2024-01-15T09:30:00Z'
                  entitlementID: entitlementID
                  id: id
                  lastUpdateTime: '2024-01-15T09:30:00Z'
                  organizationID: organizationID
                  records:
                    key: 1.1
                  serialID: 1
                  status: status
                  usageRecordReportID: usageRecordReportID
    ReportUsageRecordGroup:
      path: /org/{orgId}/entitlement/{entitlementId}/usageRecordGroup
      method: POST
      auth: true
      docs: >-
        It is recommended to provide the ID in the request body
        CreateUsageRecordGroupParams, so the report can be deduplicated. All
        duplicate report will return error code 409.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        entitlementId:
          type: string
          docs: Entitlement ID
      display-name: report usageRecordGroup
      request:
        name: SharedCreateUsageRecordGroupParams
        body:
          properties:
            entitlementID: string
            id:
              type: optional<string>
              docs: >-
                uuid of the UsageRecordGroup (the size is up to 36 characters),
                if not provided, suger will generate one.
            metaInfo:
              type: optional<root.SharedMeteringUsageRecordGroupMetaInfo>
              docs: read-only, don't set it when reporting the usage record group.
            organizationID: string
            records: map<string, double>
        content-type: application/json
      response:
        docs: OK
        type: root.SharedMeteringUsageRecordGroup
        status-code: 200
      errors:
        - root.ReportUsageRecordGroupRequestBadRequestError
        - root.ReportUsageRecordGroupRequestConflictError
        - root.ReportUsageRecordGroupRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            entitlementId: entitlementId
          request:
            entitlementID: entitlementID
            organizationID: organizationID
            records:
              key: 1.1
          response:
            body:
              creationTime: '2024-01-15T09:30:00Z'
              entitlementID: entitlementID
              id: id
              lastUpdateTime: '2024-01-15T09:30:00Z'
              metaInfo:
                originRecords:
                  key: 1.1
              organizationID: organizationID
              records:
                key: 1.1
              serialID: 1
              status: status
              usageRecordReportID: usageRecordReportID
    ListUsageRecordReportsByEntitlement:
      path: /org/{orgId}/entitlement/{entitlementId}/usageRecordReport
      method: GET
      auth: true
      docs: >-
        List usageRecordReports for the given organization and entitlement.
        Filter by entitlementTermId if it is given.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        entitlementId:
          type: string
          docs: Entitlement ID
      display-name: list usageRecordReports by entitlement
      request:
        name: ListUsageRecordReportsByEntitlementRequest
        query-parameters:
          entitlementTermId:
            type: optional<string>
            docs: >-
              The Entitlement Term ID, if not given, return the
              UsageRecordReports under the Entitlement
          startDate:
            type: optional<string>
            docs: >-
              start date (UTC) in YYYY-MM-DD format, default is 30 days before
              the endDate
          endDate:
            type: optional<string>
            docs: end date (UTC) in YYYY-MM-DD format, default is today
          limit:
            type: optional<integer>
            docs: List pagination size, default 20, max value is 1000
          offset:
            type: optional<integer>
            docs: List pagination offset, default 0
      response:
        docs: OK
        type: root.SharedListUsageRecordReportsResponse
        status-code: 200
      errors:
        - root.ListUsageRecordReportsByEntitlementRequestBadRequestError
        - root.ListUsageRecordReportsByEntitlementRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            entitlementId: entitlementId
          response:
            body:
              nextOffset: 1
              usageRecordReports:
                - creationTime: '2024-01-15T09:30:00Z'
                  entitlementID: entitlementID
                  entitlementTermID: entitlementTermID
                  id: id
                  organizationID: organizationID
                  productID: productID
    ListUsageRecordGroupsByProduct:
      path: /org/{orgId}/product/{productId}/usageRecordGroup
      method: GET
      auth: true
      docs: list UsageRecordGroups for the given organization and product
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        productId:
          type: string
          docs: Product ID
      display-name: list usageRecordGroups by product
      request:
        name: ListUsageRecordGroupsByProductRequest
        query-parameters:
          startDate:
            type: optional<string>
            docs: >-
              start date (UTC) in YYYY-MM-DD format, default is 30 days before
              the endDate
          endDate:
            type: optional<string>
            docs: end date (UTC) in YYYY-MM-DD format, default is today
          limit:
            type: optional<integer>
            docs: List pagination size, default 20, max value is 1000
          offset:
            type: optional<integer>
            docs: List pagination offset, default 0
      response:
        docs: OK
        type: root.SharedListUsageRecordGroupsResponse
        status-code: 200
      errors:
        - root.ListUsageRecordGroupsByProductRequestBadRequestError
        - root.ListUsageRecordGroupsByProductRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            productId: productId
          response:
            body:
              nextOffset: 1
              usageRecordGroups:
                - creationTime: '2024-01-15T09:30:00Z'
                  entitlementID: entitlementID
                  id: id
                  lastUpdateTime: '2024-01-15T09:30:00Z'
                  organizationID: organizationID
                  records:
                    key: 1.1
                  serialID: 1
                  status: status
                  usageRecordReportID: usageRecordReportID
    ListUsageRecordReportsByProduct:
      path: /org/{orgId}/product/{productId}/usageRecordReport
      method: GET
      auth: true
      docs: List usageRecordReports for the given organization and product
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        productId:
          type: string
          docs: Product ID
      display-name: list usageRecordReports by product
      request:
        name: ListUsageRecordReportsByProductRequest
        query-parameters:
          startDate:
            type: optional<string>
            docs: >-
              start date (UTC) in YYYY-MM-DD format, default is 30 days before
              the endDate
          endDate:
            type: optional<string>
            docs: end date (UTC) in YYYY-MM-DD format, default is today
          limit:
            type: optional<integer>
            docs: List pagination size, default 20, max value is 1000
          offset:
            type: optional<integer>
            docs: List pagination offset, default 0
      response:
        docs: OK
        type: root.SharedListUsageRecordReportsResponse
        status-code: 200
      errors:
        - root.ListUsageRecordReportsByProductRequestBadRequestError
        - root.ListUsageRecordReportsByProductRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            productId: productId
          response:
            body:
              nextOffset: 1
              usageRecordReports:
                - creationTime: '2024-01-15T09:30:00Z'
                  entitlementID: entitlementID
                  entitlementTermID: entitlementTermID
                  id: id
                  organizationID: organizationID
                  productID: productID
    ListUsageRecordGroupsByOrganization:
      path: /org/{orgId}/usageRecordGroup
      method: GET
      auth: true
      docs: list UsageRecordGroups under the given organization.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: list usageRecordGroups by organization
      request:
        name: ListUsageRecordGroupsByOrganizationRequest
        query-parameters:
          startDate:
            type: optional<string>
            docs: >-
              start date (UTC) in YYYY-MM-DD format, default is 30 days before
              the endDate
          endDate:
            type: optional<string>
            docs: end date (UTC) in YYYY-MM-DD format, default is today
          limit:
            type: optional<integer>
            docs: List pagination size, default 20, max value is 1000
          offset:
            type: optional<integer>
            docs: List pagination offset, default 0
      response:
        docs: OK
        type: root.SharedListUsageRecordGroupsResponse
        status-code: 200
      errors:
        - root.ListUsageRecordGroupsByOrganizationRequestBadRequestError
        - root.ListUsageRecordGroupsByOrganizationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          response:
            body:
              nextOffset: 1
              usageRecordGroups:
                - creationTime: '2024-01-15T09:30:00Z'
                  entitlementID: entitlementID
                  id: id
                  lastUpdateTime: '2024-01-15T09:30:00Z'
                  organizationID: organizationID
                  records:
                    key: 1.1
                  serialID: 1
                  status: status
                  usageRecordReportID: usageRecordReportID
    GetUsageRecordGroup:
      path: /org/{orgId}/usageRecordGroup/{usageRecordGroupId}
      method: GET
      auth: true
      docs: get UsageRecordGroup for the given organization and usageRecordGroup ID
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        usageRecordGroupId:
          type: string
          docs: UsageRecordGroup ID
      display-name: get usageRecordGroup
      response:
        docs: OK
        type: root.SharedMeteringUsageRecordGroup
        status-code: 200
      errors:
        - root.GetUsageRecordGroupRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            usageRecordGroupId: usageRecordGroupId
          response:
            body:
              creationTime: '2024-01-15T09:30:00Z'
              entitlementID: entitlementID
              id: id
              lastUpdateTime: '2024-01-15T09:30:00Z'
              metaInfo:
                originRecords:
                  key: 1.1
              organizationID: organizationID
              records:
                key: 1.1
              serialID: 1
              status: status
              usageRecordReportID: usageRecordReportID
    ListUsageRecordReportsByOrganization:
      path: /org/{orgId}/usageRecordReport
      method: GET
      auth: true
      docs: List usageRecordReports under the given organization
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: list usageRecordReports by organization
      request:
        name: ListUsageRecordReportsByOrganizationRequest
        query-parameters:
          startDate:
            type: optional<string>
            docs: >-
              start date (UTC) in YYYY-MM-DD format, default is 30 days before
              the endDate
          endDate:
            type: optional<string>
            docs: end date (UTC) in YYYY-MM-DD format, default is today
          limit:
            type: optional<integer>
            docs: List pagination size, default 20, max value is 1000
          offset:
            type: optional<integer>
            docs: List pagination offset, default 0
      response:
        docs: OK
        type: root.SharedListUsageRecordReportsResponse
        status-code: 200
      errors:
        - root.ListUsageRecordReportsByOrganizationRequestBadRequestError
        - root.ListUsageRecordReportsByOrganizationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          response:
            body:
              nextOffset: 1
              usageRecordReports:
                - creationTime: '2024-01-15T09:30:00Z'
                  entitlementID: entitlementID
                  entitlementTermID: entitlementTermID
                  id: id
                  organizationID: organizationID
                  productID: productID
    GetUsageRecordReport:
      path: /org/{orgId}/usageRecordReport/{usageRecordReportId}
      method: GET
      auth: true
      docs: >-
        get the usageRecordReport for a given organization and usageRecordReport
        ID.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        usageRecordReportId:
          type: string
          docs: UsageRecordReport ID
      display-name: get usageRecordReport
      response:
        docs: OK
        type: root.SharedMeteringUsageRecordReport
        status-code: 200
      errors:
        - root.GetUsageRecordReportRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            usageRecordReportId: usageRecordReportId
          response:
            body:
              creationTime: '2024-01-15T09:30:00Z'
              entitlementID: entitlementID
              entitlementTermID: entitlementTermID
              id: id
              info:
                awsMeteringResponse:
                  resultMetadata:
                    key: value
                  results:
                    - {}
                  unprocessedRecords:
                    - {}
                azureMeteringResponse:
                  count: 1
                  result:
                    - {}
                commitAmount: 1.1
                creditAmount: 1.1
                creditRecords:
                  key: 1.1
                dimensionUnitPrice:
                  key: 1.1
                endTime: '2024-01-15T09:30:00Z'
                gcpMeteringResponse:
                  reportErrors:
                    - {}
                  serviceConfigId: serviceConfigId
                  serviceRolloutId: serviceRolloutId
                includedRecords:
                  key: 1.1
                reportedRecords:
                  key: 1.1
                startTime: '2024-01-15T09:30:00Z'
                usageRecordGroupIds:
                  - usageRecordGroupIds
                usedCommitAmount: 1.1
                usedCommitAmountIncrement: 1.1
                usedCreditAmount: 1.1
                usedCreditAmountIncrement: 1.1
              organizationID: organizationID
              productID: productID
  source:
    openapi: ../swagger.json
",
    },
    "offer.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "CancelOffer": {
              "auth": true,
              "display-name": "cancel offer",
              "docs": "Only the offer with status = "PENDING_ACCEPTANCE" or "PENDING_CANCEL" is allowed to cancel.",
              "errors": [
                "root.CancelOfferRequestBadRequestError",
                "root.CancelOfferRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "offerId": "offerId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": "string",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/offer/{offerId}/cancel",
              "path-parameters": {
                "offerId": {
                  "docs": "Offer ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Empty string if cancellation is successful",
                "status-code": 200,
                "type": "string",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "CreateOffer": {
              "auth": true,
              "display-name": "create offer",
              "docs": "Create a private offer under the given organization.",
              "errors": [
                "root.CreateOfferRequestBadRequestError",
                "root.CreateOfferRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "createdBy": "createdBy",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "endTime": "2024-01-15T09:30:00Z",
                      "expireTime": "2024-01-15T09:30:00Z",
                      "externalID": "externalID",
                      "id": "id",
                      "info": {
                        "azureOriginalPlan": {
                          "$schema": "schema",
                          "id": "id",
                          "plan": "plan",
                          "product": "product",
                          "resourceName": "resourceName",
                          "validations": [
                            {},
                          ],
                        },
                        "azurePrivateOffer": {
                          "$schema": "schema",
                          "acceptBy": "2024-01-15T09:30:00Z",
                          "acceptanceLinks": [
                            {},
                          ],
                          "beneficiaries": [
                            {},
                          ],
                          "eTag": "eTag",
                          "end": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "lastModified": "2024-01-15T09:30:00Z",
                          "name": "name",
                          "notificationContacts": [
                            "notificationContacts",
                          ],
                          "preparedBy": "preparedBy",
                          "pricing": [
                            {},
                          ],
                          "privateOfferType": "customerPromotion",
                          "resourceName": "resourceName",
                          "start": "2024-01-15T09:30:00Z",
                          "state": "draft",
                          "subState": "pendingAcceptance",
                          "termsAndConditionsDocSasUrl": "termsAndConditionsDocSasUrl",
                          "validations": [
                            {},
                          ],
                          "variableStartDate": true,
                        },
                        "azureProductVariant": {
                          "azureGovernmentCertifications": [
                            {},
                          ],
                          "cloudAvailabilities": [
                            "cloudAvailabilities",
                          ],
                          "conversionPaths": "conversionPaths",
                          "extendedProperties": [
                            {},
                          ],
                          "externalID": "externalID",
                          "featureAvailabilities": [
                            {},
                          ],
                          "friendlyName": "friendlyName",
                          "id": "id",
                          "leadGenID": "leadGenID",
                          "referenceVariantID": "referenceVariantID",
                          "resourceType": "AzureSkuVariant",
                          "state": "InActive",
                        },
                        "buyerAwsAccountIds": [
                          "buyerAwsAccountIds",
                        ],
                        "buyerAzureTenants": [
                          {},
                        ],
                        "commits": [
                          {},
                        ],
                        "currency": "currency",
                        "dimensions": [
                          {},
                        ],
                        "discount": 1.1,
                        "eulaType": "",
                        "eulaUrl": "eulaUrl",
                        "gcpMetrics": [
                          {},
                        ],
                        "gcpPlans": [
                          {},
                        ],
                        "paymentInstallments": [
                          {},
                        ],
                        "privateOfferUrl": "privateOfferUrl",
                        "refundCancelationPolicy": "refundCancelationPolicy",
                        "sellerNotes": "sellerNotes",
                        "visibility": "PRIVATE",
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "lastUpdatedBy": "lastUpdatedBy",
                      "metaInfo": {
                        "baseAgreementId": "baseAgreementId",
                        "contacts": [
                          {},
                        ],
                        "isAgreementBasedOffer": true,
                        "isRenewalOffer": true,
                        "notifications": [
                          {},
                        ],
                      },
                      "name": "name",
                      "offerType": "DEFAULT",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "productID": "productID",
                      "service": "MARKETPLACE",
                      "status": "ACCEPTED",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/offer",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.SharedWorkloadOffer",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedWorkloadOffer",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "CreateOrUpdateDraftOffer": {
              "auth": true,
              "display-name": "create or update draft offer",
              "docs": "Create a new draft offer or update the existing draft offer. When updating draft offer, the offer.ID is required.",
              "errors": [
                "root.CreateOrUpdateDraftOfferRequestBadRequestError",
                "root.CreateOrUpdateDraftOfferRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "createdBy": "createdBy",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "endTime": "2024-01-15T09:30:00Z",
                      "expireTime": "2024-01-15T09:30:00Z",
                      "externalID": "externalID",
                      "id": "id",
                      "info": {
                        "azureOriginalPlan": {
                          "$schema": "schema",
                          "id": "id",
                          "plan": "plan",
                          "product": "product",
                          "resourceName": "resourceName",
                          "validations": [
                            {},
                          ],
                        },
                        "azurePrivateOffer": {
                          "$schema": "schema",
                          "acceptBy": "2024-01-15T09:30:00Z",
                          "acceptanceLinks": [
                            {},
                          ],
                          "beneficiaries": [
                            {},
                          ],
                          "eTag": "eTag",
                          "end": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "lastModified": "2024-01-15T09:30:00Z",
                          "name": "name",
                          "notificationContacts": [
                            "notificationContacts",
                          ],
                          "preparedBy": "preparedBy",
                          "pricing": [
                            {},
                          ],
                          "privateOfferType": "customerPromotion",
                          "resourceName": "resourceName",
                          "start": "2024-01-15T09:30:00Z",
                          "state": "draft",
                          "subState": "pendingAcceptance",
                          "termsAndConditionsDocSasUrl": "termsAndConditionsDocSasUrl",
                          "validations": [
                            {},
                          ],
                          "variableStartDate": true,
                        },
                        "azureProductVariant": {
                          "azureGovernmentCertifications": [
                            {},
                          ],
                          "cloudAvailabilities": [
                            "cloudAvailabilities",
                          ],
                          "conversionPaths": "conversionPaths",
                          "extendedProperties": [
                            {},
                          ],
                          "externalID": "externalID",
                          "featureAvailabilities": [
                            {},
                          ],
                          "friendlyName": "friendlyName",
                          "id": "id",
                          "leadGenID": "leadGenID",
                          "referenceVariantID": "referenceVariantID",
                          "resourceType": "AzureSkuVariant",
                          "state": "InActive",
                        },
                        "buyerAwsAccountIds": [
                          "buyerAwsAccountIds",
                        ],
                        "buyerAzureTenants": [
                          {},
                        ],
                        "commits": [
                          {},
                        ],
                        "currency": "currency",
                        "dimensions": [
                          {},
                        ],
                        "discount": 1.1,
                        "eulaType": "",
                        "eulaUrl": "eulaUrl",
                        "gcpMetrics": [
                          {},
                        ],
                        "gcpPlans": [
                          {},
                        ],
                        "paymentInstallments": [
                          {},
                        ],
                        "privateOfferUrl": "privateOfferUrl",
                        "refundCancelationPolicy": "refundCancelationPolicy",
                        "sellerNotes": "sellerNotes",
                        "visibility": "PRIVATE",
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "lastUpdatedBy": "lastUpdatedBy",
                      "metaInfo": {
                        "baseAgreementId": "baseAgreementId",
                        "contacts": [
                          {},
                        ],
                        "isAgreementBasedOffer": true,
                        "isRenewalOffer": true,
                        "notifications": [
                          {},
                        ],
                      },
                      "name": "name",
                      "offerType": "DEFAULT",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "productID": "productID",
                      "service": "MARKETPLACE",
                      "status": "ACCEPTED",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/draftOffer",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": "root.SharedWorkloadOffer",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedWorkloadOffer",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "DeleteOffer": {
              "auth": true,
              "display-name": "delete offer",
              "docs": "Only the offer with status = "DRAFT" or "CREATE_FAILED" is allowed to be deleted.",
              "errors": [
                "root.DeleteOfferRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "offerId": "offerId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": "string",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{orgId}/offer/{offerId}",
              "path-parameters": {
                "offerId": {
                  "docs": "Offer ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Empty string if deletion is successful",
                "status-code": 200,
                "type": "string",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "GetOffer": {
              "auth": true,
              "display-name": "get offer",
              "docs": "Get the offer by the given offer ID.",
              "errors": [
                "root.GetOfferRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "offerId": "offerId",
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": {
                      "createdBy": "createdBy",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "endTime": "2024-01-15T09:30:00Z",
                      "expireTime": "2024-01-15T09:30:00Z",
                      "externalID": "externalID",
                      "id": "id",
                      "info": {
                        "azureOriginalPlan": {
                          "$schema": "schema",
                          "id": "id",
                          "plan": "plan",
                          "product": "product",
                          "resourceName": "resourceName",
                          "validations": [
                            {},
                          ],
                        },
                        "azurePrivateOffer": {
                          "$schema": "schema",
                          "acceptBy": "2024-01-15T09:30:00Z",
                          "acceptanceLinks": [
                            {},
                          ],
                          "beneficiaries": [
                            {},
                          ],
                          "eTag": "eTag",
                          "end": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "lastModified": "2024-01-15T09:30:00Z",
                          "name": "name",
                          "notificationContacts": [
                            "notificationContacts",
                          ],
                          "preparedBy": "preparedBy",
                          "pricing": [
                            {},
                          ],
                          "privateOfferType": "customerPromotion",
                          "resourceName": "resourceName",
                          "start": "2024-01-15T09:30:00Z",
                          "state": "draft",
                          "subState": "pendingAcceptance",
                          "termsAndConditionsDocSasUrl": "termsAndConditionsDocSasUrl",
                          "validations": [
                            {},
                          ],
                          "variableStartDate": true,
                        },
                        "azureProductVariant": {
                          "azureGovernmentCertifications": [
                            {},
                          ],
                          "cloudAvailabilities": [
                            "cloudAvailabilities",
                          ],
                          "conversionPaths": "conversionPaths",
                          "extendedProperties": [
                            {},
                          ],
                          "externalID": "externalID",
                          "featureAvailabilities": [
                            {},
                          ],
                          "friendlyName": "friendlyName",
                          "id": "id",
                          "leadGenID": "leadGenID",
                          "referenceVariantID": "referenceVariantID",
                          "resourceType": "AzureSkuVariant",
                          "state": "InActive",
                        },
                        "buyerAwsAccountIds": [
                          "buyerAwsAccountIds",
                        ],
                        "buyerAzureTenants": [
                          {},
                        ],
                        "commits": [
                          {},
                        ],
                        "currency": "currency",
                        "dimensions": [
                          {},
                        ],
                        "discount": 1.1,
                        "eulaType": "",
                        "eulaUrl": "eulaUrl",
                        "gcpMetrics": [
                          {},
                        ],
                        "gcpPlans": [
                          {},
                        ],
                        "paymentInstallments": [
                          {},
                        ],
                        "privateOfferUrl": "privateOfferUrl",
                        "refundCancelationPolicy": "refundCancelationPolicy",
                        "sellerNotes": "sellerNotes",
                        "visibility": "PRIVATE",
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "lastUpdatedBy": "lastUpdatedBy",
                      "metaInfo": {
                        "baseAgreementId": "baseAgreementId",
                        "contacts": [
                          {},
                        ],
                        "isAgreementBasedOffer": true,
                        "isRenewalOffer": true,
                        "notifications": [
                          {},
                        ],
                      },
                      "name": "name",
                      "offerType": "DEFAULT",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "productID": "productID",
                      "service": "MARKETPLACE",
                      "status": "ACCEPTED",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/offer/{offerId}",
              "path-parameters": {
                "offerId": {
                  "docs": "Offer ID",
                  "type": "string",
                },
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedWorkloadOffer",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListOffersByOrganization": {
              "auth": true,
              "display-name": "list offers by organization",
              "docs": "List all offers under the given organization.",
              "errors": [
                "root.ListOffersByOrganizationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "createdBy": "createdBy",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "endTime": "2024-01-15T09:30:00Z",
                        "expireTime": "2024-01-15T09:30:00Z",
                        "externalID": "externalID",
                        "id": "id",
                        "info": {
                          "buyerAwsAccountIds": [
                            "buyerAwsAccountIds",
                          ],
                          "buyerAzureTenants": [
                            {},
                          ],
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpMetrics": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "paymentInstallments": [
                            {},
                          ],
                          "privateOfferUrl": "privateOfferUrl",
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                          "visibility": "PRIVATE",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "lastUpdatedBy": "lastUpdatedBy",
                        "metaInfo": {
                          "baseAgreementId": "baseAgreementId",
                          "contacts": [
                            {},
                          ],
                          "isAgreementBasedOffer": true,
                          "isRenewalOffer": true,
                          "notifications": [
                            {},
                          ],
                        },
                        "name": "name",
                        "offerType": "DEFAULT",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "status": "ACCEPTED",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/offer",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadOffer>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListOffersByPartner": {
              "auth": false,
              "display-name": "list offers by partner",
              "docs": "List all offers under the given organization & cloud partner.",
              "errors": [
                "root.ListOffersByPartnerRequestInternalServerError",
              ],
              "examples": [
                {
                  "headers": {},
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                  },
                  "response": {
                    "body": [
                      {
                        "createdBy": "createdBy",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "endTime": "2024-01-15T09:30:00Z",
                        "expireTime": "2024-01-15T09:30:00Z",
                        "externalID": "externalID",
                        "id": "id",
                        "info": {
                          "buyerAwsAccountIds": [
                            "buyerAwsAccountIds",
                          ],
                          "buyerAzureTenants": [
                            {},
                          ],
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpMetrics": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "paymentInstallments": [
                            {},
                          ],
                          "privateOfferUrl": "privateOfferUrl",
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                          "visibility": "PRIVATE",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "lastUpdatedBy": "lastUpdatedBy",
                        "metaInfo": {
                          "baseAgreementId": "baseAgreementId",
                          "contacts": [
                            {},
                          ],
                          "isAgreementBasedOffer": true,
                          "isRenewalOffer": true,
                          "notifications": [
                            {},
                          ],
                        },
                        "name": "name",
                        "offerType": "DEFAULT",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "status": "ACCEPTED",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/partner/{partner}/offer",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "ListOffersByPartnerRequestPartner",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadOffer>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListOffersByProduct": {
              "auth": true,
              "display-name": "list offers by product",
              "docs": "List all offers under the given organization & product.",
              "errors": [
                "root.ListOffersByProductRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "productId": "productId",
                  },
                  "response": {
                    "body": [
                      {
                        "createdBy": "createdBy",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "endTime": "2024-01-15T09:30:00Z",
                        "expireTime": "2024-01-15T09:30:00Z",
                        "externalID": "externalID",
                        "id": "id",
                        "info": {
                          "buyerAwsAccountIds": [
                            "buyerAwsAccountIds",
                          ],
                          "buyerAzureTenants": [
                            {},
                          ],
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "discount": 1.1,
                          "eulaType": "",
                          "eulaUrl": "eulaUrl",
                          "gcpMetrics": [
                            {},
                          ],
                          "gcpPlans": [
                            {},
                          ],
                          "paymentInstallments": [
                            {},
                          ],
                          "privateOfferUrl": "privateOfferUrl",
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                          "visibility": "PRIVATE",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "lastUpdatedBy": "lastUpdatedBy",
                        "metaInfo": {
                          "baseAgreementId": "baseAgreementId",
                          "contacts": [
                            {},
                          ],
                          "isAgreementBasedOffer": true,
                          "isRenewalOffer": true,
                          "notifications": [
                            {},
                          ],
                        },
                        "name": "name",
                        "offerType": "DEFAULT",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productID": "productID",
                        "service": "MARKETPLACE",
                        "status": "ACCEPTED",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/product/{productId}/offer",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "productId": {
                  "docs": "Product ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadOffer>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "ListOffersByPartnerRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    CreateOrUpdateDraftOffer:
      path: /org/{orgId}/draftOffer
      method: POST
      auth: true
      docs: >-
        Create a new draft offer or update the existing draft offer. When
        updating draft offer, the offer.ID is required.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: create or update draft offer
      request:
        body: root.SharedWorkloadOffer
        content-type: application/json
      response:
        docs: OK
        type: root.SharedWorkloadOffer
        status-code: 200
      errors:
        - root.CreateOrUpdateDraftOfferRequestBadRequestError
        - root.CreateOrUpdateDraftOfferRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          request: {}
          response:
            body:
              createdBy: createdBy
              creationTime: '2024-01-15T09:30:00Z'
              endTime: '2024-01-15T09:30:00Z'
              expireTime: '2024-01-15T09:30:00Z'
              externalID: externalID
              id: id
              info:
                azureOriginalPlan:
                  $schema: schema
                  id: id
                  plan: plan
                  product: product
                  resourceName: resourceName
                  validations:
                    - {}
                azurePrivateOffer:
                  $schema: schema
                  acceptBy: '2024-01-15T09:30:00Z'
                  acceptanceLinks:
                    - {}
                  beneficiaries:
                    - {}
                  eTag: eTag
                  end: '2024-01-15T09:30:00Z'
                  id: id
                  lastModified: '2024-01-15T09:30:00Z'
                  name: name
                  notificationContacts:
                    - notificationContacts
                  preparedBy: preparedBy
                  pricing:
                    - {}
                  privateOfferType: customerPromotion
                  resourceName: resourceName
                  start: '2024-01-15T09:30:00Z'
                  state: draft
                  subState: pendingAcceptance
                  termsAndConditionsDocSasUrl: termsAndConditionsDocSasUrl
                  validations:
                    - {}
                  variableStartDate: true
                azureProductVariant:
                  azureGovernmentCertifications:
                    - {}
                  cloudAvailabilities:
                    - cloudAvailabilities
                  conversionPaths: conversionPaths
                  extendedProperties:
                    - {}
                  externalID: externalID
                  featureAvailabilities:
                    - {}
                  friendlyName: friendlyName
                  id: id
                  leadGenID: leadGenID
                  referenceVariantID: referenceVariantID
                  resourceType: AzureSkuVariant
                  state: InActive
                buyerAwsAccountIds:
                  - buyerAwsAccountIds
                buyerAzureTenants:
                  - {}
                commits:
                  - {}
                currency: currency
                dimensions:
                  - {}
                discount: 1.1
                eulaType: ''
                eulaUrl: eulaUrl
                gcpMetrics:
                  - {}
                gcpPlans:
                  - {}
                paymentInstallments:
                  - {}
                privateOfferUrl: privateOfferUrl
                refundCancelationPolicy: refundCancelationPolicy
                sellerNotes: sellerNotes
                visibility: PRIVATE
              lastUpdateTime: '2024-01-15T09:30:00Z'
              lastUpdatedBy: lastUpdatedBy
              metaInfo:
                baseAgreementId: baseAgreementId
                contacts:
                  - {}
                isAgreementBasedOffer: true
                isRenewalOffer: true
                notifications:
                  - {}
              name: name
              offerType: DEFAULT
              organizationID: organizationID
              partner: AWS
              productID: productID
              service: MARKETPLACE
              status: ACCEPTED
    ListOffersByOrganization:
      path: /org/{orgId}/offer
      method: GET
      auth: true
      docs: List all offers under the given organization.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: list offers by organization
      response:
        docs: OK
        type: list<root.SharedWorkloadOffer>
        status-code: 200
      errors:
        - root.ListOffersByOrganizationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          response:
            body:
              - createdBy: createdBy
                creationTime: '2024-01-15T09:30:00Z'
                endTime: '2024-01-15T09:30:00Z'
                expireTime: '2024-01-15T09:30:00Z'
                externalID: externalID
                id: id
                info:
                  buyerAwsAccountIds:
                    - buyerAwsAccountIds
                  buyerAzureTenants:
                    - {}
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpMetrics:
                    - {}
                  gcpPlans:
                    - {}
                  paymentInstallments:
                    - {}
                  privateOfferUrl: privateOfferUrl
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                  visibility: PRIVATE
                lastUpdateTime: '2024-01-15T09:30:00Z'
                lastUpdatedBy: lastUpdatedBy
                metaInfo:
                  baseAgreementId: baseAgreementId
                  contacts:
                    - {}
                  isAgreementBasedOffer: true
                  isRenewalOffer: true
                  notifications:
                    - {}
                name: name
                offerType: DEFAULT
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                status: ACCEPTED
    CreateOffer:
      path: /org/{orgId}/offer
      method: POST
      auth: true
      docs: Create a private offer under the given organization.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: create offer
      request:
        body: root.SharedWorkloadOffer
        content-type: application/json
      response:
        docs: OK
        type: root.SharedWorkloadOffer
        status-code: 200
      errors:
        - root.CreateOfferRequestBadRequestError
        - root.CreateOfferRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          request: {}
          response:
            body:
              createdBy: createdBy
              creationTime: '2024-01-15T09:30:00Z'
              endTime: '2024-01-15T09:30:00Z'
              expireTime: '2024-01-15T09:30:00Z'
              externalID: externalID
              id: id
              info:
                azureOriginalPlan:
                  $schema: schema
                  id: id
                  plan: plan
                  product: product
                  resourceName: resourceName
                  validations:
                    - {}
                azurePrivateOffer:
                  $schema: schema
                  acceptBy: '2024-01-15T09:30:00Z'
                  acceptanceLinks:
                    - {}
                  beneficiaries:
                    - {}
                  eTag: eTag
                  end: '2024-01-15T09:30:00Z'
                  id: id
                  lastModified: '2024-01-15T09:30:00Z'
                  name: name
                  notificationContacts:
                    - notificationContacts
                  preparedBy: preparedBy
                  pricing:
                    - {}
                  privateOfferType: customerPromotion
                  resourceName: resourceName
                  start: '2024-01-15T09:30:00Z'
                  state: draft
                  subState: pendingAcceptance
                  termsAndConditionsDocSasUrl: termsAndConditionsDocSasUrl
                  validations:
                    - {}
                  variableStartDate: true
                azureProductVariant:
                  azureGovernmentCertifications:
                    - {}
                  cloudAvailabilities:
                    - cloudAvailabilities
                  conversionPaths: conversionPaths
                  extendedProperties:
                    - {}
                  externalID: externalID
                  featureAvailabilities:
                    - {}
                  friendlyName: friendlyName
                  id: id
                  leadGenID: leadGenID
                  referenceVariantID: referenceVariantID
                  resourceType: AzureSkuVariant
                  state: InActive
                buyerAwsAccountIds:
                  - buyerAwsAccountIds
                buyerAzureTenants:
                  - {}
                commits:
                  - {}
                currency: currency
                dimensions:
                  - {}
                discount: 1.1
                eulaType: ''
                eulaUrl: eulaUrl
                gcpMetrics:
                  - {}
                gcpPlans:
                  - {}
                paymentInstallments:
                  - {}
                privateOfferUrl: privateOfferUrl
                refundCancelationPolicy: refundCancelationPolicy
                sellerNotes: sellerNotes
                visibility: PRIVATE
              lastUpdateTime: '2024-01-15T09:30:00Z'
              lastUpdatedBy: lastUpdatedBy
              metaInfo:
                baseAgreementId: baseAgreementId
                contacts:
                  - {}
                isAgreementBasedOffer: true
                isRenewalOffer: true
                notifications:
                  - {}
              name: name
              offerType: DEFAULT
              organizationID: organizationID
              partner: AWS
              productID: productID
              service: MARKETPLACE
              status: ACCEPTED
    GetOffer:
      path: /org/{orgId}/offer/{offerId}
      method: GET
      auth: true
      docs: Get the offer by the given offer ID.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        offerId:
          type: string
          docs: Offer ID
      display-name: get offer
      response:
        docs: OK
        type: root.SharedWorkloadOffer
        status-code: 200
      errors:
        - root.GetOfferRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            offerId: offerId
          response:
            body:
              createdBy: createdBy
              creationTime: '2024-01-15T09:30:00Z'
              endTime: '2024-01-15T09:30:00Z'
              expireTime: '2024-01-15T09:30:00Z'
              externalID: externalID
              id: id
              info:
                azureOriginalPlan:
                  $schema: schema
                  id: id
                  plan: plan
                  product: product
                  resourceName: resourceName
                  validations:
                    - {}
                azurePrivateOffer:
                  $schema: schema
                  acceptBy: '2024-01-15T09:30:00Z'
                  acceptanceLinks:
                    - {}
                  beneficiaries:
                    - {}
                  eTag: eTag
                  end: '2024-01-15T09:30:00Z'
                  id: id
                  lastModified: '2024-01-15T09:30:00Z'
                  name: name
                  notificationContacts:
                    - notificationContacts
                  preparedBy: preparedBy
                  pricing:
                    - {}
                  privateOfferType: customerPromotion
                  resourceName: resourceName
                  start: '2024-01-15T09:30:00Z'
                  state: draft
                  subState: pendingAcceptance
                  termsAndConditionsDocSasUrl: termsAndConditionsDocSasUrl
                  validations:
                    - {}
                  variableStartDate: true
                azureProductVariant:
                  azureGovernmentCertifications:
                    - {}
                  cloudAvailabilities:
                    - cloudAvailabilities
                  conversionPaths: conversionPaths
                  extendedProperties:
                    - {}
                  externalID: externalID
                  featureAvailabilities:
                    - {}
                  friendlyName: friendlyName
                  id: id
                  leadGenID: leadGenID
                  referenceVariantID: referenceVariantID
                  resourceType: AzureSkuVariant
                  state: InActive
                buyerAwsAccountIds:
                  - buyerAwsAccountIds
                buyerAzureTenants:
                  - {}
                commits:
                  - {}
                currency: currency
                dimensions:
                  - {}
                discount: 1.1
                eulaType: ''
                eulaUrl: eulaUrl
                gcpMetrics:
                  - {}
                gcpPlans:
                  - {}
                paymentInstallments:
                  - {}
                privateOfferUrl: privateOfferUrl
                refundCancelationPolicy: refundCancelationPolicy
                sellerNotes: sellerNotes
                visibility: PRIVATE
              lastUpdateTime: '2024-01-15T09:30:00Z'
              lastUpdatedBy: lastUpdatedBy
              metaInfo:
                baseAgreementId: baseAgreementId
                contacts:
                  - {}
                isAgreementBasedOffer: true
                isRenewalOffer: true
                notifications:
                  - {}
              name: name
              offerType: DEFAULT
              organizationID: organizationID
              partner: AWS
              productID: productID
              service: MARKETPLACE
              status: ACCEPTED
    DeleteOffer:
      path: /org/{orgId}/offer/{offerId}
      method: DELETE
      auth: true
      docs: >-
        Only the offer with status = "DRAFT" or "CREATE_FAILED" is allowed to be
        deleted.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        offerId:
          type: string
          docs: Offer ID
      display-name: delete offer
      response:
        docs: Empty string if deletion is successful
        type: string
        status-code: 200
      errors:
        - root.DeleteOfferRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            offerId: offerId
          response:
            body: string
    CancelOffer:
      path: /org/{orgId}/offer/{offerId}/cancel
      method: POST
      auth: true
      docs: >-
        Only the offer with status = "PENDING_ACCEPTANCE" or "PENDING_CANCEL" is
        allowed to cancel.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        offerId:
          type: string
          docs: Offer ID
      display-name: cancel offer
      response:
        docs: Empty string if cancellation is successful
        type: string
        status-code: 200
      errors:
        - root.CancelOfferRequestBadRequestError
        - root.CancelOfferRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            offerId: offerId
          response:
            body: string
    ListOffersByPartner:
      path: /org/{orgId}/partner/{partner}/offer
      method: GET
      auth: false
      docs: List all offers under the given organization & cloud partner.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: ListOffersByPartnerRequestPartner
          docs: Cloud Partner
      display-name: list offers by partner
      response:
        docs: OK
        type: list<root.SharedWorkloadOffer>
        status-code: 200
      errors:
        - root.ListOffersByPartnerRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
          headers: {}
          response:
            body:
              - createdBy: createdBy
                creationTime: '2024-01-15T09:30:00Z'
                endTime: '2024-01-15T09:30:00Z'
                expireTime: '2024-01-15T09:30:00Z'
                externalID: externalID
                id: id
                info:
                  buyerAwsAccountIds:
                    - buyerAwsAccountIds
                  buyerAzureTenants:
                    - {}
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpMetrics:
                    - {}
                  gcpPlans:
                    - {}
                  paymentInstallments:
                    - {}
                  privateOfferUrl: privateOfferUrl
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                  visibility: PRIVATE
                lastUpdateTime: '2024-01-15T09:30:00Z'
                lastUpdatedBy: lastUpdatedBy
                metaInfo:
                  baseAgreementId: baseAgreementId
                  contacts:
                    - {}
                  isAgreementBasedOffer: true
                  isRenewalOffer: true
                  notifications:
                    - {}
                name: name
                offerType: DEFAULT
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                status: ACCEPTED
    ListOffersByProduct:
      path: /org/{orgId}/product/{productId}/offer
      method: GET
      auth: true
      docs: List all offers under the given organization & product.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        productId:
          type: string
          docs: Product ID
      display-name: list offers by product
      response:
        docs: OK
        type: list<root.SharedWorkloadOffer>
        status-code: 200
      errors:
        - root.ListOffersByProductRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            productId: productId
          response:
            body:
              - createdBy: createdBy
                creationTime: '2024-01-15T09:30:00Z'
                endTime: '2024-01-15T09:30:00Z'
                expireTime: '2024-01-15T09:30:00Z'
                externalID: externalID
                id: id
                info:
                  buyerAwsAccountIds:
                    - buyerAwsAccountIds
                  buyerAzureTenants:
                    - {}
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  discount: 1.1
                  eulaType: ''
                  eulaUrl: eulaUrl
                  gcpMetrics:
                    - {}
                  gcpPlans:
                    - {}
                  paymentInstallments:
                    - {}
                  privateOfferUrl: privateOfferUrl
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                  visibility: PRIVATE
                lastUpdateTime: '2024-01-15T09:30:00Z'
                lastUpdatedBy: lastUpdatedBy
                metaInfo:
                  baseAgreementId: baseAgreementId
                  contacts:
                    - {}
                  isAgreementBasedOffer: true
                  isRenewalOffer: true
                  notifications:
                    - {}
                name: name
                offerType: DEFAULT
                organizationID: organizationID
                partner: AWS
                productID: productID
                service: MARKETPLACE
                status: ACCEPTED
  source:
    openapi: ../swagger.json
types:
  ListOffersByPartnerRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
",
    },
    "operation.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "ListOperations": {
              "auth": true,
              "display-name": "list operations",
              "docs": "List all long running operations under the given organization, offer, entitlement, crmOpportunity or partnerOpportunity. Only provide one filter on a request.",
              "errors": [
                "root.ListOperationsRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "endTime": "2024-01-15T09:30:00Z",
                        "id": "id",
                        "message": "message",
                        "name": "name",
                        "startTime": "2024-01-15T09:30:00Z",
                        "status": "status",
                        "type": "TemporalWorkflow",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/operation",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "name": "ListOperationsRequest",
                "query-parameters": {
                  "crmOpportunityId": {
                    "docs": "filter by crmOpportunityId",
                    "type": "optional<string>",
                  },
                  "entitlementId": {
                    "docs": "filter by entitlementId",
                    "type": "optional<string>",
                  },
                  "offerId": {
                    "docs": "filter by offerId",
                    "type": "optional<string>",
                  },
                  "partnerOpportunityId": {
                    "docs": "filter by partnerOpportunityId",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedOperation>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListOperations:
      path: /org/{orgId}/operation
      method: GET
      auth: true
      docs: >-
        List all long running operations under the given organization, offer,
        entitlement, crmOpportunity or partnerOpportunity. Only provide one
        filter on a request.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: list operations
      request:
        name: ListOperationsRequest
        query-parameters:
          offerId:
            type: optional<string>
            docs: filter by offerId
          entitlementId:
            type: optional<string>
            docs: filter by entitlementId
          crmOpportunityId:
            type: optional<string>
            docs: filter by crmOpportunityId
          partnerOpportunityId:
            type: optional<string>
            docs: filter by partnerOpportunityId
      response:
        docs: OK
        type: list<root.SharedOperation>
        status-code: 200
      errors:
        - root.ListOperationsRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          response:
            body:
              - endTime: '2024-01-15T09:30:00Z'
                id: id
                message: message
                name: name
                startTime: '2024-01-15T09:30:00Z'
                status: status
                type: TemporalWorkflow
  source:
    openapi: ../swagger.json
",
    },
    "product.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "DeleteProduct": {
              "auth": true,
              "display-name": "delete product",
              "docs": "only the product with status = "CREATE_FAILED" is allowed to be deleted.",
              "errors": [
                "root.DeleteProductRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "productId": "productId",
                  },
                  "response": {
                    "body": "string",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{orgId}/product/{productId}",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "productId": {
                  "docs": "Product ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Empty string if deletion is successful",
                "status-code": 200,
                "type": "string",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "GetProduct": {
              "auth": true,
              "display-name": "get product",
              "docs": "get product by product id",
              "errors": [
                "root.GetProductRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "productId": "productId",
                  },
                  "response": {
                    "body": {
                      "createdBy": "createdBy",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "externalID": "externalID",
                      "fulfillmentUrl": "fulfillmentUrl",
                      "id": "id",
                      "info": {
                        "attributes": {
                          "key": "value",
                        },
                        "awsSaasProduct": {
                          "Dimensions": [
                            {},
                          ],
                          "Versions": [
                            {},
                          ],
                          "dataFeedProductId": "dataFeedProductId",
                          "productId": "productId",
                        },
                        "awsSnsSubscriptions": [
                          {},
                        ],
                        "azureProduct": {
                          "availabilities": [
                            {},
                          ],
                          "branches": [
                            {},
                          ],
                          "externalIDs": [
                            {},
                          ],
                          "id": "id",
                          "isModularPublishing": true,
                          "listings": [
                            {},
                          ],
                          "name": "name",
                          "packageConfigurations": [
                            {},
                          ],
                          "properties": [
                            {},
                          ],
                          "resourceType": "resourceType",
                          "submissions": [
                            {},
                          ],
                          "variants": [
                            {},
                          ],
                        },
                        "commits": [
                          {},
                        ],
                        "currency": "currency",
                        "dimensions": [
                          {},
                        ],
                        "eulaUrl": "eulaUrl",
                        "gcpProduct": {
                          "createTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "marketplace": "marketplaces/google-cloud",
                          "name": "name",
                          "service": "service",
                        },
                        "refundCancelationPolicy": "refundCancelationPolicy",
                        "sellerNotes": "sellerNotes",
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "lastUpdatedBy": "lastUpdatedBy",
                      "name": "name",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "productType": "UNKNOWN",
                      "service": "MARKETPLACE",
                      "status": "status",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/product/{productId}",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "productId": {
                  "docs": "Product ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedWorkloadProduct",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListProductMeteringDimensions": {
              "auth": true,
              "display-name": "list metering dimensions of product",
              "docs": "list all metering dimensions of the given product",
              "errors": [
                "root.ListProductMeteringDimensionsRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "productId": "productId",
                  },
                  "response": {
                    "body": [
                      {
                        "Description": "Description",
                        "Key": "Key",
                        "Name": "Name",
                        "Types": [
                          "Types",
                        ],
                        "Unit": "Unit",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/product/{productId}/dimension",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "productId": {
                  "docs": "Product ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedAwsSaasProductDimension>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListProductsByOrganization": {
              "auth": true,
              "display-name": "list products by organization",
              "docs": "list all products under the given organization",
              "errors": [
                "root.ListProductsByOrganizationRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "response": {
                    "body": [
                      {
                        "createdBy": "createdBy",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "externalID": "externalID",
                        "fulfillmentUrl": "fulfillmentUrl",
                        "id": "id",
                        "info": {
                          "attributes": {
                            "key": "value",
                          },
                          "awsSnsSubscriptions": [
                            {},
                          ],
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "eulaUrl": "eulaUrl",
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "lastUpdatedBy": "lastUpdatedBy",
                        "name": "name",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productType": "UNKNOWN",
                        "service": "MARKETPLACE",
                        "status": "status",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/product",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadProduct>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListProductsByPartner": {
              "auth": true,
              "display-name": "list products by partner",
              "docs": "list all products under the given organization and cloud partner",
              "errors": [
                "root.ListProductsByPartnerRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                  },
                  "response": {
                    "body": [
                      {
                        "createdBy": "createdBy",
                        "creationTime": "2024-01-15T09:30:00Z",
                        "externalID": "externalID",
                        "fulfillmentUrl": "fulfillmentUrl",
                        "id": "id",
                        "info": {
                          "attributes": {
                            "key": "value",
                          },
                          "awsSnsSubscriptions": [
                            {},
                          ],
                          "commits": [
                            {},
                          ],
                          "currency": "currency",
                          "dimensions": [
                            {},
                          ],
                          "eulaUrl": "eulaUrl",
                          "refundCancelationPolicy": "refundCancelationPolicy",
                          "sellerNotes": "sellerNotes",
                        },
                        "lastUpdateTime": "2024-01-15T09:30:00Z",
                        "lastUpdatedBy": "lastUpdatedBy",
                        "name": "name",
                        "organizationID": "organizationID",
                        "partner": "AWS",
                        "productType": "UNKNOWN",
                        "service": "MARKETPLACE",
                        "status": "status",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/partner/{partner}/product",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "ListProductsByPartnerRequestPartner",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "list<root.SharedWorkloadProduct>",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "UpdateProduct": {
              "auth": true,
              "display-name": "update product",
              "docs": "currently only the Fulfillment URL is allowed to update via this API.",
              "errors": [
                "root.UpdateProductRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "productId": "productId",
                  },
                  "request": {
                    "fulfillmentUrl": "fulfillmentUrl",
                    "id": "id",
                    "organizationID": "organizationID",
                  },
                  "response": {
                    "body": {
                      "createdBy": "createdBy",
                      "creationTime": "2024-01-15T09:30:00Z",
                      "externalID": "externalID",
                      "fulfillmentUrl": "fulfillmentUrl",
                      "id": "id",
                      "info": {
                        "attributes": {
                          "key": "value",
                        },
                        "awsSaasProduct": {
                          "Dimensions": [
                            {},
                          ],
                          "Versions": [
                            {},
                          ],
                          "dataFeedProductId": "dataFeedProductId",
                          "productId": "productId",
                        },
                        "awsSnsSubscriptions": [
                          {},
                        ],
                        "azureProduct": {
                          "availabilities": [
                            {},
                          ],
                          "branches": [
                            {},
                          ],
                          "externalIDs": [
                            {},
                          ],
                          "id": "id",
                          "isModularPublishing": true,
                          "listings": [
                            {},
                          ],
                          "name": "name",
                          "packageConfigurations": [
                            {},
                          ],
                          "properties": [
                            {},
                          ],
                          "resourceType": "resourceType",
                          "submissions": [
                            {},
                          ],
                          "variants": [
                            {},
                          ],
                        },
                        "commits": [
                          {},
                        ],
                        "currency": "currency",
                        "dimensions": [
                          {},
                        ],
                        "eulaUrl": "eulaUrl",
                        "gcpProduct": {
                          "createTime": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "marketplace": "marketplaces/google-cloud",
                          "name": "name",
                          "service": "service",
                        },
                        "refundCancelationPolicy": "refundCancelationPolicy",
                        "sellerNotes": "sellerNotes",
                      },
                      "lastUpdateTime": "2024-01-15T09:30:00Z",
                      "lastUpdatedBy": "lastUpdatedBy",
                      "name": "name",
                      "organizationID": "organizationID",
                      "partner": "AWS",
                      "productType": "UNKNOWN",
                      "service": "MARKETPLACE",
                      "status": "status",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/org/{orgId}/product/{productId}",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "productId": {
                  "docs": "Product ID",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "fulfillmentUrl": "string",
                    "id": "string",
                    "organizationID": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SharedUpdateProductParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedWorkloadProduct",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "ListProductsByPartnerRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "types:
  ListProductsByPartnerRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListProductsByPartner:
      path: /org/{orgId}/partner/{partner}/product
      method: GET
      auth: true
      docs: list all products under the given organization and cloud partner
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: ListProductsByPartnerRequestPartner
          docs: Cloud Partner
      display-name: list products by partner
      response:
        docs: OK
        type: list<root.SharedWorkloadProduct>
        status-code: 200
      errors:
        - root.ListProductsByPartnerRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
          response:
            body:
              - createdBy: createdBy
                creationTime: '2024-01-15T09:30:00Z'
                externalID: externalID
                fulfillmentUrl: fulfillmentUrl
                id: id
                info:
                  attributes:
                    key: value
                  awsSnsSubscriptions:
                    - {}
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  eulaUrl: eulaUrl
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                lastUpdateTime: '2024-01-15T09:30:00Z'
                lastUpdatedBy: lastUpdatedBy
                name: name
                organizationID: organizationID
                partner: AWS
                productType: UNKNOWN
                service: MARKETPLACE
                status: status
    ListProductsByOrganization:
      path: /org/{orgId}/product
      method: GET
      auth: true
      docs: list all products under the given organization
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: list products by organization
      response:
        docs: OK
        type: list<root.SharedWorkloadProduct>
        status-code: 200
      errors:
        - root.ListProductsByOrganizationRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          response:
            body:
              - createdBy: createdBy
                creationTime: '2024-01-15T09:30:00Z'
                externalID: externalID
                fulfillmentUrl: fulfillmentUrl
                id: id
                info:
                  attributes:
                    key: value
                  awsSnsSubscriptions:
                    - {}
                  commits:
                    - {}
                  currency: currency
                  dimensions:
                    - {}
                  eulaUrl: eulaUrl
                  refundCancelationPolicy: refundCancelationPolicy
                  sellerNotes: sellerNotes
                lastUpdateTime: '2024-01-15T09:30:00Z'
                lastUpdatedBy: lastUpdatedBy
                name: name
                organizationID: organizationID
                partner: AWS
                productType: UNKNOWN
                service: MARKETPLACE
                status: status
    GetProduct:
      path: /org/{orgId}/product/{productId}
      method: GET
      auth: true
      docs: get product by product id
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        productId:
          type: string
          docs: Product ID
      display-name: get product
      response:
        docs: OK
        type: root.SharedWorkloadProduct
        status-code: 200
      errors:
        - root.GetProductRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            productId: productId
          response:
            body:
              createdBy: createdBy
              creationTime: '2024-01-15T09:30:00Z'
              externalID: externalID
              fulfillmentUrl: fulfillmentUrl
              id: id
              info:
                attributes:
                  key: value
                awsSaasProduct:
                  Dimensions:
                    - {}
                  Versions:
                    - {}
                  dataFeedProductId: dataFeedProductId
                  productId: productId
                awsSnsSubscriptions:
                  - {}
                azureProduct:
                  availabilities:
                    - {}
                  branches:
                    - {}
                  externalIDs:
                    - {}
                  id: id
                  isModularPublishing: true
                  listings:
                    - {}
                  name: name
                  packageConfigurations:
                    - {}
                  properties:
                    - {}
                  resourceType: resourceType
                  submissions:
                    - {}
                  variants:
                    - {}
                commits:
                  - {}
                currency: currency
                dimensions:
                  - {}
                eulaUrl: eulaUrl
                gcpProduct:
                  createTime: '2024-01-15T09:30:00Z'
                  id: id
                  marketplace: marketplaces/google-cloud
                  name: name
                  service: service
                refundCancelationPolicy: refundCancelationPolicy
                sellerNotes: sellerNotes
              lastUpdateTime: '2024-01-15T09:30:00Z'
              lastUpdatedBy: lastUpdatedBy
              name: name
              organizationID: organizationID
              partner: AWS
              productType: UNKNOWN
              service: MARKETPLACE
              status: status
    DeleteProduct:
      path: /org/{orgId}/product/{productId}
      method: DELETE
      auth: true
      docs: only the product with status = "CREATE_FAILED" is allowed to be deleted.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        productId:
          type: string
          docs: Product ID
      display-name: delete product
      response:
        docs: Empty string if deletion is successful
        type: string
        status-code: 200
      errors:
        - root.DeleteProductRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            productId: productId
          response:
            body: string
    UpdateProduct:
      path: /org/{orgId}/product/{productId}
      method: PATCH
      auth: true
      docs: currently only the Fulfillment URL is allowed to update via this API.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        productId:
          type: string
          docs: Product ID
      display-name: update product
      request:
        name: SharedUpdateProductParams
        body:
          properties:
            fulfillmentUrl: string
            id: string
            organizationID: string
        content-type: application/json
      response:
        docs: OK
        type: root.SharedWorkloadProduct
        status-code: 200
      errors:
        - root.UpdateProductRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            productId: productId
          request:
            fulfillmentUrl: fulfillmentUrl
            id: id
            organizationID: organizationID
          response:
            body:
              createdBy: createdBy
              creationTime: '2024-01-15T09:30:00Z'
              externalID: externalID
              fulfillmentUrl: fulfillmentUrl
              id: id
              info:
                attributes:
                  key: value
                awsSaasProduct:
                  Dimensions:
                    - {}
                  Versions:
                    - {}
                  dataFeedProductId: dataFeedProductId
                  productId: productId
                awsSnsSubscriptions:
                  - {}
                azureProduct:
                  availabilities:
                    - {}
                  branches:
                    - {}
                  externalIDs:
                    - {}
                  id: id
                  isModularPublishing: true
                  listings:
                    - {}
                  name: name
                  packageConfigurations:
                    - {}
                  properties:
                    - {}
                  resourceType: resourceType
                  submissions:
                    - {}
                  variants:
                    - {}
                commits:
                  - {}
                currency: currency
                dimensions:
                  - {}
                eulaUrl: eulaUrl
                gcpProduct:
                  createTime: '2024-01-15T09:30:00Z'
                  id: id
                  marketplace: marketplaces/google-cloud
                  name: name
                  service: service
                refundCancelationPolicy: refundCancelationPolicy
                sellerNotes: sellerNotes
              lastUpdateTime: '2024-01-15T09:30:00Z'
              lastUpdatedBy: lastUpdatedBy
              name: name
              organizationID: organizationID
              partner: AWS
              productType: UNKNOWN
              service: MARKETPLACE
              status: status
    ListProductMeteringDimensions:
      path: /org/{orgId}/product/{productId}/dimension
      method: GET
      auth: true
      docs: list all metering dimensions of the given product
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        productId:
          type: string
          docs: Product ID
      display-name: list metering dimensions of product
      response:
        docs: OK
        type: list<root.SharedAwsSaasProductDimension>
        status-code: 200
      errors:
        - root.ListProductMeteringDimensionsRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            productId: productId
          response:
            body:
              - Description: Description
                Key: Key
                Name: Name
                Types:
                  - Types
                Unit: Unit
  source:
    openapi: ../swagger.json
",
    },
    "report.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetRevenueReport": {
              "auth": true,
              "display-name": "get revenue report",
              "docs": "Get the revenue report of the given organization, product, entitlement, or buyer.",
              "errors": [
                "root.GetRevenueReportRequestBadRequestError",
                "root.GetRevenueReportRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "request": {
                    "organizationID": "organizationID",
                    "partner": "AWS",
                    "reportType": "InvoicedAmount",
                    "service": "MARKETPLACE",
                  },
                  "response": {
                    "body": {
                      "buyerID": "buyerID",
                      "entitlementID": "entitlementID",
                      "organizationID": "organizationID",
                      "partner": "partner",
                      "productID": "productID",
                      "reportDate": "2024-01-15T09:30:00Z",
                      "reportType": "InvoicedAmount",
                      "revenueRecords": [
                        {
                          "amount": 1.1,
                          "buyerID": "buyerID",
                          "collectableAmount": 1.1,
                          "currency": "currency",
                          "date": "2024-01-15T09:30:00Z",
                          "disburseAmount": 1.1,
                          "disburseDate": "2024-01-15T09:30:00Z",
                          "entitlementID": "entitlementID",
                          "id": "id",
                          "invoiceAmount": 1.1,
                          "invoiceDate": "2024-01-15T09:30:00Z",
                          "organizationID": "organizationID",
                          "partner": "partner",
                          "paymentDueDate": "2024-01-15T09:30:00Z",
                          "productID": "productID",
                          "refundDisburseAmount": 1.1,
                          "refundDisburseDate": "2024-01-15T09:30:00Z",
                          "refundInvoiceAmount": 1.1,
                          "refundInvoiceDate": "2024-01-15T09:30:00Z",
                          "taxAmount": 1.1,
                        },
                      ],
                      "service": "service",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/revenueReport",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "buyerID": {
                      "docs": "Optional, if available, return the report for the Buyer.",
                      "type": "optional<string>",
                    },
                    "entitlementID": {
                      "docs": "Optional, if available, return the report for the Entitlement.",
                      "type": "optional<string>",
                    },
                    "organizationID": {
                      "docs": "Required. If the productID & entitlementID are emtpy, return the report for the entire Organization.",
                      "type": "string",
                    },
                    "partner": {
                      "docs": "Required.",
                      "type": "SharedGetRevenueReportParamsPartner",
                    },
                    "productID": {
                      "docs": "Optional, if available, return the report for the Product.",
                      "type": "optional<string>",
                    },
                    "reportType": "root.SharedRevenueReportType",
                    "service": {
                      "docs": "Required.",
                      "type": "literal<"MARKETPLACE">",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SharedGetRevenueReportParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedRevenueReport",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "GetUsageReport": {
              "auth": true,
              "display-name": "get usage report",
              "docs": "get the daily usage report of the given entitlement, the default timespan is lifetime.",
              "errors": [
                "root.GetUsageReportRequestBadRequestError",
                "root.GetUsageReportRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                  },
                  "request": {
                    "entitlementID": "entitlementID",
                    "organizationID": "organizationID",
                  },
                  "response": {
                    "body": {
                      "entitlementID": "entitlementID",
                      "organizationID": "organizationID",
                      "reportDate": "2024-01-15T09:30:00Z",
                      "usageRecords": [
                        {
                          "amounts": [
                            1.1,
                          ],
                          "date": "2024-01-15T09:30:00Z",
                          "keys": [
                            "keys",
                          ],
                          "quantities": [
                            1.1,
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{orgId}/usageReport",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "entitlementID": "string",
                    "organizationID": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SharedGetUsageReportParams",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedUsageReport",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListRevenueRecordDetails": {
              "auth": true,
              "display-name": "list revenue record details",
              "docs": "list the raw revenue record details for the given organization, product, entitlement, or buyer.",
              "errors": [
                "root.ListRevenueRecordDetailsRequestBadRequestError",
                "root.ListRevenueRecordDetailsRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                  },
                  "response": {
                    "body": {
                      "nextOffset": 1,
                      "revenueRecordDetails": [
                        {},
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/partner/{partner}/revenueRecordDetail",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "ListRevenueRecordDetailsRequestPartner",
                },
              },
              "request": {
                "name": "ListRevenueRecordDetailsRequest",
                "query-parameters": {
                  "buyerId": {
                    "docs": "Filter revenue record details by the given buyer ID",
                    "type": "optional<string>",
                  },
                  "endDate": {
                    "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                    "type": "optional<string>",
                  },
                  "entitlementId": {
                    "docs": "Filter revenue record details by the given entitlement ID",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "List pagination size, default 20, max value is 1000",
                    "type": "optional<integer>",
                  },
                  "offset": {
                    "docs": "List pagination offset, default 0",
                    "type": "optional<integer>",
                  },
                  "productId": {
                    "docs": "Filter revenue record details by the given product ID",
                    "type": "optional<string>",
                  },
                  "startDate": {
                    "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedListRevenueRecordDetailsResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "ListRevenueRecords": {
              "auth": true,
              "display-name": "list revenue records",
              "docs": "list the revenue records for the given organization, product, entitlement, or buyer.",
              "errors": [
                "root.ListRevenueRecordsRequestBadRequestError",
                "root.ListRevenueRecordsRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "orgId": "orgId",
                    "partner": "AWS",
                  },
                  "response": {
                    "body": {
                      "nextOffset": 1,
                      "revenueRecords": [
                        {
                          "amount": 1.1,
                          "buyerID": "buyerID",
                          "collectableAmount": 1.1,
                          "currency": "currency",
                          "date": "2024-01-15T09:30:00Z",
                          "disburseAmount": 1.1,
                          "disburseDate": "2024-01-15T09:30:00Z",
                          "entitlementID": "entitlementID",
                          "id": "id",
                          "invoiceAmount": 1.1,
                          "invoiceDate": "2024-01-15T09:30:00Z",
                          "organizationID": "organizationID",
                          "partner": "partner",
                          "paymentDueDate": "2024-01-15T09:30:00Z",
                          "productID": "productID",
                          "refundDisburseAmount": 1.1,
                          "refundDisburseDate": "2024-01-15T09:30:00Z",
                          "refundInvoiceAmount": 1.1,
                          "refundInvoiceDate": "2024-01-15T09:30:00Z",
                          "taxAmount": 1.1,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{orgId}/partner/{partner}/revenueRecord",
              "path-parameters": {
                "orgId": {
                  "docs": "Organization ID",
                  "type": "string",
                },
                "partner": {
                  "docs": "Cloud Partner",
                  "type": "ListRevenueRecordsRequestPartner",
                },
              },
              "request": {
                "name": "ListRevenueRecordsRequest",
                "query-parameters": {
                  "buyerId": {
                    "docs": "Filter revenue record details by the given buyer ID",
                    "type": "optional<string>",
                  },
                  "endDate": {
                    "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                    "type": "optional<string>",
                  },
                  "entitlementId": {
                    "docs": "Filter revenue record details by the given entitlement ID",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "List pagination size, default 20, max value is 1000",
                    "type": "optional<integer>",
                  },
                  "offset": {
                    "docs": "List pagination offset, default 0",
                    "type": "optional<integer>",
                  },
                  "productId": {
                    "docs": "Filter revenue record details by the given product ID",
                    "type": "optional<string>",
                  },
                  "startDate": {
                    "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SharedListRevenueRecordsResponse",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "ListRevenueRecordDetailsRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ListRevenueRecordsRequestPartner": {
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SharedGetRevenueReportParamsPartner": {
            "docs": "Required.",
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
            ],
            "inline": true,
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "types:
  ListRevenueRecordsRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
  ListRevenueRecordDetailsRequestPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    source:
      openapi: ../swagger.json
  SharedGetRevenueReportParamsPartner:
    enum:
      - AWS
      - AZURE
      - GCP
    docs: Required.
    inline: true
    source:
      openapi: ../swagger.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    ListRevenueRecords:
      path: /org/{orgId}/partner/{partner}/revenueRecord
      method: GET
      auth: true
      docs: >-
        list the revenue records for the given organization, product,
        entitlement, or buyer.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: ListRevenueRecordsRequestPartner
          docs: Cloud Partner
      display-name: list revenue records
      request:
        name: ListRevenueRecordsRequest
        query-parameters:
          productId:
            type: optional<string>
            docs: Filter revenue record details by the given product ID
          entitlementId:
            type: optional<string>
            docs: Filter revenue record details by the given entitlement ID
          buyerId:
            type: optional<string>
            docs: Filter revenue record details by the given buyer ID
          startDate:
            type: optional<string>
            docs: >-
              start date (UTC) in YYYY-MM-DD format, default is 30 days before
              the endDate
          endDate:
            type: optional<string>
            docs: end date (UTC) in YYYY-MM-DD format, default is today
          limit:
            type: optional<integer>
            docs: List pagination size, default 20, max value is 1000
          offset:
            type: optional<integer>
            docs: List pagination offset, default 0
      response:
        docs: OK
        type: root.SharedListRevenueRecordsResponse
        status-code: 200
      errors:
        - root.ListRevenueRecordsRequestBadRequestError
        - root.ListRevenueRecordsRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
          response:
            body:
              nextOffset: 1
              revenueRecords:
                - amount: 1.1
                  buyerID: buyerID
                  collectableAmount: 1.1
                  currency: currency
                  date: '2024-01-15T09:30:00Z'
                  disburseAmount: 1.1
                  disburseDate: '2024-01-15T09:30:00Z'
                  entitlementID: entitlementID
                  id: id
                  invoiceAmount: 1.1
                  invoiceDate: '2024-01-15T09:30:00Z'
                  organizationID: organizationID
                  partner: partner
                  paymentDueDate: '2024-01-15T09:30:00Z'
                  productID: productID
                  refundDisburseAmount: 1.1
                  refundDisburseDate: '2024-01-15T09:30:00Z'
                  refundInvoiceAmount: 1.1
                  refundInvoiceDate: '2024-01-15T09:30:00Z'
                  taxAmount: 1.1
    ListRevenueRecordDetails:
      path: /org/{orgId}/partner/{partner}/revenueRecordDetail
      method: GET
      auth: true
      docs: >-
        list the raw revenue record details for the given organization, product,
        entitlement, or buyer.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
        partner:
          type: ListRevenueRecordDetailsRequestPartner
          docs: Cloud Partner
      display-name: list revenue record details
      request:
        name: ListRevenueRecordDetailsRequest
        query-parameters:
          productId:
            type: optional<string>
            docs: Filter revenue record details by the given product ID
          entitlementId:
            type: optional<string>
            docs: Filter revenue record details by the given entitlement ID
          buyerId:
            type: optional<string>
            docs: Filter revenue record details by the given buyer ID
          startDate:
            type: optional<string>
            docs: >-
              start date (UTC) in YYYY-MM-DD format, default is 30 days before
              the endDate
          endDate:
            type: optional<string>
            docs: end date (UTC) in YYYY-MM-DD format, default is today
          limit:
            type: optional<integer>
            docs: List pagination size, default 20, max value is 1000
          offset:
            type: optional<integer>
            docs: List pagination offset, default 0
      response:
        docs: OK
        type: root.SharedListRevenueRecordDetailsResponse
        status-code: 200
      errors:
        - root.ListRevenueRecordDetailsRequestBadRequestError
        - root.ListRevenueRecordDetailsRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
            partner: AWS
          response:
            body:
              nextOffset: 1
              revenueRecordDetails:
                - {}
    GetRevenueReport:
      path: /org/{orgId}/revenueReport
      method: POST
      auth: true
      docs: >-
        Get the revenue report of the given organization, product, entitlement,
        or buyer.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: get revenue report
      request:
        name: SharedGetRevenueReportParams
        body:
          properties:
            buyerID:
              type: optional<string>
              docs: Optional, if available, return the report for the Buyer.
            entitlementID:
              type: optional<string>
              docs: Optional, if available, return the report for the Entitlement.
            organizationID:
              type: string
              docs: >-
                Required. If the productID & entitlementID are emtpy, return the
                report for the entire Organization.
            partner:
              type: SharedGetRevenueReportParamsPartner
              docs: Required.
            productID:
              type: optional<string>
              docs: Optional, if available, return the report for the Product.
            reportType: root.SharedRevenueReportType
            service:
              type: literal<"MARKETPLACE">
              docs: Required.
        content-type: application/json
      response:
        docs: OK
        type: root.SharedRevenueReport
        status-code: 200
      errors:
        - root.GetRevenueReportRequestBadRequestError
        - root.GetRevenueReportRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          request:
            organizationID: organizationID
            partner: AWS
            reportType: InvoicedAmount
            service: MARKETPLACE
          response:
            body:
              buyerID: buyerID
              entitlementID: entitlementID
              organizationID: organizationID
              partner: partner
              productID: productID
              reportDate: '2024-01-15T09:30:00Z'
              reportType: InvoicedAmount
              revenueRecords:
                - amount: 1.1
                  buyerID: buyerID
                  collectableAmount: 1.1
                  currency: currency
                  date: '2024-01-15T09:30:00Z'
                  disburseAmount: 1.1
                  disburseDate: '2024-01-15T09:30:00Z'
                  entitlementID: entitlementID
                  id: id
                  invoiceAmount: 1.1
                  invoiceDate: '2024-01-15T09:30:00Z'
                  organizationID: organizationID
                  partner: partner
                  paymentDueDate: '2024-01-15T09:30:00Z'
                  productID: productID
                  refundDisburseAmount: 1.1
                  refundDisburseDate: '2024-01-15T09:30:00Z'
                  refundInvoiceAmount: 1.1
                  refundInvoiceDate: '2024-01-15T09:30:00Z'
                  taxAmount: 1.1
              service: service
    GetUsageReport:
      path: /org/{orgId}/usageReport
      method: POST
      auth: true
      docs: >-
        get the daily usage report of the given entitlement, the default
        timespan is lifetime.
      source:
        openapi: ../swagger.json
      path-parameters:
        orgId:
          type: string
          docs: Organization ID
      display-name: get usage report
      request:
        name: SharedGetUsageReportParams
        body:
          properties:
            entitlementID: string
            organizationID: string
        content-type: application/json
      response:
        docs: OK
        type: root.SharedUsageReport
        status-code: 200
      errors:
        - root.GetUsageReportRequestBadRequestError
        - root.GetUsageReportRequestInternalServerError
      examples:
        - path-parameters:
            orgId: orgId
          request:
            entitlementID: entitlementID
            organizationID: organizationID
          response:
            body:
              entitlementID: entitlementID
              organizationID: organizationID
              reportDate: '2024-01-15T09:30:00Z'
              usageRecords:
                - amounts:
                    - 1.1
                  date: '2024-01-15T09:30:00Z'
                  keys:
                    - keys
                  quantities:
                    - 1.1
  source:
    openapi: ../swagger.json
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BearerTokenAuth",
      "auth-schemes": {
        "BearerTokenAuth": {
          "header": "Authorization",
          "name": "apiKey",
          "type": "string",
        },
      },
      "default-environment": "Default",
      "display-name": "Suger API",
      "environments": {
        "Default": "//https://api.suger.cloud",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "imports": {
        "root": "__package__.yml",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Suger API
environments:
  Default: //https://api.suger.cloud
default-environment: Default
auth-schemes:
  BearerTokenAuth:
    header: Authorization
    name: apiKey
    type: string
auth: BearerTokenAuth
imports:
  root: __package__.yml
",
  },
}