{
  "title": "AssemblyAI API",
  "description": "AssemblyAI API",
  "servers": [
    {
      "url": "https://api.assemblyai.com",
      "description": "AssemblyAI API"
    }
  ],
  "tags": {
    "tagsById": {
      "transcript": {
        "id": "transcript",
        "description": "Transcript related operations"
      },
      "LeMUR": {
        "id": "LeMUR",
        "description": "LeMUR related operations"
      },
      "realtime": {
        "id": "realtime",
        "description": "Real-time transcription"
      }
    },
    "orderedTagIds": [
      "transcript",
      "LeMUR",
      "realtime"
    ]
  },
  "hasEndpointsMarkedInternal": false,
  "endpoints": [
    {
      "summary": "Upload an audio or video file which can be transcribed.",
      "audiences": [],
      "operationId": "uploadFile",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "files"
        ],
        "methodName": "upload"
      },
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "FilesUploadRequest",
      "request": {
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "octetStream"
      },
      "response": {
        "description": "File uploaded successfully",
        "schema": {
          "generatedName": "FilesUploadResponse",
          "schema": "UploadedFile",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Upload your audio or video file directly to the AssemblyAI API if it isn't accessible via a URL already.",
      "authed": true,
      "method": "POST",
      "path": "/v2/upload",
      "examples": [],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "List transcripts",
      "audiences": [],
      "operationId": "listTranscripts",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "list"
      },
      "pathParameters": [],
      "queryParameters": [
        {
          "description": "Maximum amount of transcripts to retrieve",
          "name": "limit",
          "schema": {
            "generatedName": "TranscriptListRequestLimit",
            "value": {
              "generatedName": "TranscriptListRequestLimit",
              "description": "Maximum amount of transcripts to retrieve",
              "value": {
                "description": "Maximum amount of transcripts to retrieve",
                "schema": {
                  "default": 10,
                  "type": "int64"
                },
                "generatedName": "TranscriptListRequestLimit",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        {
          "description": "Filter by transcript status",
          "name": "status",
          "schema": {
            "generatedName": "TranscriptListRequestStatus",
            "value": {
              "generatedName": "TranscriptListRequestStatus",
              "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
              "value": {
                "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
                "generatedName": "TranscriptListRequestStatus",
                "values": [
                  {
                    "generatedName": "queued",
                    "value": "queued",
                    "description": "The audio file is in the queue to be processed by the API.",
                    "casing": {}
                  },
                  {
                    "generatedName": "processing",
                    "value": "processing",
                    "description": "The audio file is being processed by the API.",
                    "casing": {}
                  },
                  {
                    "generatedName": "completed",
                    "value": "completed",
                    "description": "The transcription job has been completed successfully.",
                    "casing": {}
                  },
                  {
                    "generatedName": "error",
                    "value": "error",
                    "description": "An error occurred while processing the audio file.",
                    "casing": {}
                  }
                ],
                "groupName": [],
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "enum"
              },
              "groupName": [],
              "type": "nullable"
            },
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        {
          "description": "Only get transcripts created on this date",
          "name": "created_on",
          "schema": {
            "generatedName": "TranscriptListRequestCreatedOn",
            "value": {
              "generatedName": "TranscriptListRequestCreatedOn",
              "description": "Only get transcripts created on this date",
              "value": {
                "description": "Only get transcripts created on this date",
                "schema": {
                  "format": "date",
                  "type": "string"
                },
                "generatedName": "TranscriptListRequestCreatedOn",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        {
          "description": "Get transcripts that were created before this transcript ID",
          "name": "before_id",
          "schema": {
            "generatedName": "TranscriptListRequestBeforeId",
            "value": {
              "generatedName": "TranscriptListRequestBeforeId",
              "description": "Get transcripts that were created before this transcript ID",
              "value": {
                "description": "Get transcripts that were created before this transcript ID",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TranscriptListRequestBeforeId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        {
          "description": "Get transcripts that were created after this transcript ID",
          "name": "after_id",
          "schema": {
            "generatedName": "TranscriptListRequestAfterId",
            "value": {
              "generatedName": "TranscriptListRequestAfterId",
              "description": "Get transcripts that were created after this transcript ID",
              "value": {
                "description": "Get transcripts that were created after this transcript ID",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TranscriptListRequestAfterId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        {
          "description": "Only get throttled transcripts, overrides the status filter",
          "name": "throttled_only",
          "schema": {
            "generatedName": "TranscriptListRequestThrottledOnly",
            "value": {
              "generatedName": "TranscriptListRequestThrottledOnly",
              "description": "Only get throttled transcripts, overrides the status filter",
              "value": {
                "description": "Only get throttled transcripts, overrides the status filter",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "TranscriptListRequestThrottledOnly",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "headers": [],
      "generatedRequestName": "TranscriptListRequest",
      "response": {
        "description": "A list of transcripts filtered by `limit` and `status`",
        "schema": {
          "generatedName": "TranscriptListResponse",
          "schema": "TranscriptList",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Retrieve a list of transcripts you have created.",
      "authed": true,
      "method": "GET",
      "path": "/v2/transcript",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "page_details": {
                  "properties": {
                    "limit": {
                      "value": {
                        "value": 1,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "result_count": {
                      "value": {
                        "value": 1,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "current_url": {
                      "value": {
                        "value": "current_url",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "prev_url": {
                      "value": {
                        "value": "prev_url",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "next_url": {
                      "value": {
                        "value": "next_url",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  },
                  "type": "object"
                },
                "transcripts": {
                  "value": [
                    {
                      "properties": {
                        "id": {
                          "value": {
                            "value": "id",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "resource_url": {
                          "value": {
                            "value": "resource_url",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "status": {
                          "value": "queued",
                          "type": "enum"
                        },
                        "created": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "completed": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "audio_url": {
                          "value": {
                            "value": "audio_url",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Create a transcript from an audio file",
      "audiences": [],
      "operationId": "createTranscript",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "create"
      },
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "TranscriptCreateRequest",
      "request": {
        "schema": {
          "generatedName": "TranscriptCreateRequest",
          "schema": "CreateTranscriptParameters",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "Transcript created and queued for processing.",
        "schema": {
          "generatedName": "TranscriptCreateResponse",
          "schema": "Transcript",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 201,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Create a transcript from an audio or video file that is accessible via a URL.",
      "authed": true,
      "method": "POST",
      "path": "/v2/transcript",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "audio_url": {
                "value": {
                  "value": "audio_url",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "language_model": {
                  "value": {
                    "value": "language_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "acoustic_model": {
                  "value": {
                    "value": "acoustic_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "status": {
                  "value": "queued",
                  "type": "enum"
                },
                "language_code": {
                  "value": "en",
                  "type": "enum"
                },
                "audio_url": {
                  "value": {
                    "value": "audio_url",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "text": {
                  "value": {
                    "value": "text",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "words": {
                  "value": [
                    {
                      "properties": {
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "speaker": {
                          "value": {
                            "value": "speaker",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "utterances": {
                  "value": [
                    {
                      "properties": {
                        "channel": {
                          "value": {
                            "value": "channel",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "words": {
                          "value": [
                            {
                              "properties": {
                                "confidence": {
                                  "value": {
                                    "value": 1.1,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "start": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "end": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "text": {
                                  "value": {
                                    "value": "text",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "confidence": {
                  "value": {
                    "value": 1.1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "audio_duration": {
                  "value": {
                    "value": 1.1,
                    "type": "float"
                  },
                  "type": "primitive"
                },
                "punctuate": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "format_text": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "dual_channel": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "webhook_url": {
                  "value": {
                    "value": "webhook_url",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "webhook_status_code": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "webhook_auth": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "webhook_auth_header_name": {
                  "value": {
                    "value": "webhook_auth_header_name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "speed_boost": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "auto_highlights": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "auto_highlights_result": {
                  "properties": {
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "count": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "rank": {
                              "value": {
                                "value": 1.1,
                                "type": "float"
                              },
                              "type": "primitive"
                            },
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            },
                            "timestamps": {
                              "value": [
                                {
                                  "properties": {
                                    "start": {
                                      "value": {
                                        "value": 1,
                                        "type": "int"
                                      },
                                      "type": "primitive"
                                    },
                                    "end": {
                                      "value": {
                                        "value": 1,
                                        "type": "int"
                                      },
                                      "type": "primitive"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "audio_start_from": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "audio_end_at": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "word_boost": {
                  "value": [
                    {
                      "value": {
                        "value": "word_boost",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  ],
                  "type": "array"
                },
                "boost_param": {
                  "value": {
                    "value": "boost_param",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "filter_profanity": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii_audio": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii_audio_quality": {
                  "value": {
                    "value": "redact_pii_audio_quality",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "redact_pii_policies": {
                  "value": [
                    {
                      "value": "medical_process",
                      "type": "enum"
                    }
                  ],
                  "type": "array"
                },
                "redact_pii_sub": {
                  "value": "entity_type",
                  "type": "enum"
                },
                "speaker_labels": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "speakers_expected": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "content_safety": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "content_safety_labels": {
                  "properties": {
                    "status": {
                      "value": "success",
                      "type": "enum"
                    },
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            },
                            "labels": {
                              "value": [
                                {
                                  "properties": {
                                    "label": {
                                      "value": {
                                        "value": "label",
                                        "type": "string"
                                      },
                                      "type": "primitive"
                                    },
                                    "confidence": {
                                      "value": {
                                        "value": 1.1,
                                        "type": "double"
                                      },
                                      "type": "primitive"
                                    },
                                    "severity": {
                                      "value": {
                                        "value": 1.1,
                                        "type": "double"
                                      },
                                      "type": "primitive"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "type": "array"
                            },
                            "sentences_idx_start": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "sentences_idx_end": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "timestamp": {
                              "properties": {
                                "start": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "end": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            },
                            "summary": {
                              "value": [
                                {
                                  "key": {
                                    "value": "key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 1.1,
                                      "type": "double"
                                    },
                                    "type": "primitive"
                                  }
                                }
                              ],
                              "type": "map"
                            },
                            "severity_score_summary": {
                              "value": [
                                {
                                  "key": {
                                    "value": "key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "properties": {
                                      "low": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      },
                                      "medium": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      },
                                      "high": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "iab_categories": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "iab_categories_result": {
                  "properties": {
                    "status": {
                      "value": "success",
                      "type": "enum"
                    },
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    },
                    "summary": {
                      "value": [
                        {
                          "key": {
                            "value": "key",
                            "type": "string"
                          },
                          "value": {
                            "value": {
                              "value": 1.1,
                              "type": "double"
                            },
                            "type": "primitive"
                          }
                        }
                      ],
                      "type": "map"
                    }
                  },
                  "type": "object"
                },
                "language_detection": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "custom_spelling": {
                  "value": [
                    {
                      "properties": {
                        "from": {
                          "value": [
                            {
                              "value": {
                                "value": "from",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        },
                        "to": {
                          "value": {
                            "value": "to",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "auto_chapters": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "chapters": {
                  "value": [
                    {
                      "properties": {
                        "gist": {
                          "value": {
                            "value": "gist",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "headline": {
                          "value": {
                            "value": "headline",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "summary": {
                          "value": {
                            "value": "summary",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "summarization": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "summary_type": {
                  "value": {
                    "value": "summary_type",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "summary_model": {
                  "value": {
                    "value": "summary_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "summary": {
                  "value": {
                    "value": "summary",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "custom_topics": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "topics": {
                  "value": [
                    {
                      "value": {
                        "value": "topics",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  ],
                  "type": "array"
                },
                "disfluencies": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sentiment_analysis": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sentiment_analysis_results": {
                  "value": [
                    {
                      "properties": {
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "sentiment": {
                          "value": "POSITIVE",
                          "type": "enum"
                        },
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "speaker": {
                          "value": {
                            "value": "speaker",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "entity_detection": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "entities": {
                  "value": [
                    {
                      "properties": {
                        "entity_type": {
                          "value": "banking_information",
                          "type": "enum"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "speech_threshold": {
                  "value": {
                    "value": 1.1,
                    "type": "float"
                  },
                  "type": "primitive"
                },
                "throttled": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "error": {
                  "value": {
                    "value": "error",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Get the transcript",
      "audiences": [],
      "operationId": "getTranscript",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "get"
      },
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "schema": {
              "type": "string"
            },
            "generatedName": "TranscriptGetRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "TranscriptGetRequest",
      "response": {
        "description": "The transcript resource",
        "schema": {
          "generatedName": "TranscriptGetResponse",
          "schema": "Transcript",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Get the transcript resource. The transcript is ready when the \"status\" is \"completed\".",
      "authed": true,
      "method": "GET",
      "path": "/v2/transcript/{transcript_id}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "value": {
                  "value": "transcript_id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "language_model": {
                  "value": {
                    "value": "language_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "acoustic_model": {
                  "value": {
                    "value": "acoustic_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "status": {
                  "value": "queued",
                  "type": "enum"
                },
                "language_code": {
                  "value": "en",
                  "type": "enum"
                },
                "audio_url": {
                  "value": {
                    "value": "audio_url",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "text": {
                  "value": {
                    "value": "text",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "words": {
                  "value": [
                    {
                      "properties": {
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "speaker": {
                          "value": {
                            "value": "speaker",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "utterances": {
                  "value": [
                    {
                      "properties": {
                        "channel": {
                          "value": {
                            "value": "channel",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "words": {
                          "value": [
                            {
                              "properties": {
                                "confidence": {
                                  "value": {
                                    "value": 1.1,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "start": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "end": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "text": {
                                  "value": {
                                    "value": "text",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "confidence": {
                  "value": {
                    "value": 1.1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "audio_duration": {
                  "value": {
                    "value": 1.1,
                    "type": "float"
                  },
                  "type": "primitive"
                },
                "punctuate": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "format_text": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "dual_channel": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "webhook_url": {
                  "value": {
                    "value": "webhook_url",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "webhook_status_code": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "webhook_auth": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "webhook_auth_header_name": {
                  "value": {
                    "value": "webhook_auth_header_name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "speed_boost": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "auto_highlights": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "auto_highlights_result": {
                  "properties": {
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "count": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "rank": {
                              "value": {
                                "value": 1.1,
                                "type": "float"
                              },
                              "type": "primitive"
                            },
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            },
                            "timestamps": {
                              "value": [
                                {
                                  "properties": {
                                    "start": {
                                      "value": {
                                        "value": 1,
                                        "type": "int"
                                      },
                                      "type": "primitive"
                                    },
                                    "end": {
                                      "value": {
                                        "value": 1,
                                        "type": "int"
                                      },
                                      "type": "primitive"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "audio_start_from": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "audio_end_at": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "word_boost": {
                  "value": [
                    {
                      "value": {
                        "value": "word_boost",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  ],
                  "type": "array"
                },
                "boost_param": {
                  "value": {
                    "value": "boost_param",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "filter_profanity": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii_audio": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii_audio_quality": {
                  "value": {
                    "value": "redact_pii_audio_quality",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "redact_pii_policies": {
                  "value": [
                    {
                      "value": "medical_process",
                      "type": "enum"
                    }
                  ],
                  "type": "array"
                },
                "redact_pii_sub": {
                  "value": "entity_type",
                  "type": "enum"
                },
                "speaker_labels": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "speakers_expected": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "content_safety": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "content_safety_labels": {
                  "properties": {
                    "status": {
                      "value": "success",
                      "type": "enum"
                    },
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            },
                            "labels": {
                              "value": [
                                {
                                  "properties": {
                                    "label": {
                                      "value": {
                                        "value": "label",
                                        "type": "string"
                                      },
                                      "type": "primitive"
                                    },
                                    "confidence": {
                                      "value": {
                                        "value": 1.1,
                                        "type": "double"
                                      },
                                      "type": "primitive"
                                    },
                                    "severity": {
                                      "value": {
                                        "value": 1.1,
                                        "type": "double"
                                      },
                                      "type": "primitive"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "type": "array"
                            },
                            "sentences_idx_start": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "sentences_idx_end": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "timestamp": {
                              "properties": {
                                "start": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "end": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            },
                            "summary": {
                              "value": [
                                {
                                  "key": {
                                    "value": "key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 1.1,
                                      "type": "double"
                                    },
                                    "type": "primitive"
                                  }
                                }
                              ],
                              "type": "map"
                            },
                            "severity_score_summary": {
                              "value": [
                                {
                                  "key": {
                                    "value": "key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "properties": {
                                      "low": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      },
                                      "medium": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      },
                                      "high": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "iab_categories": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "iab_categories_result": {
                  "properties": {
                    "status": {
                      "value": "success",
                      "type": "enum"
                    },
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    },
                    "summary": {
                      "value": [
                        {
                          "key": {
                            "value": "key",
                            "type": "string"
                          },
                          "value": {
                            "value": {
                              "value": 1.1,
                              "type": "double"
                            },
                            "type": "primitive"
                          }
                        }
                      ],
                      "type": "map"
                    }
                  },
                  "type": "object"
                },
                "language_detection": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "custom_spelling": {
                  "value": [
                    {
                      "properties": {
                        "from": {
                          "value": [
                            {
                              "value": {
                                "value": "from",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        },
                        "to": {
                          "value": {
                            "value": "to",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "auto_chapters": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "chapters": {
                  "value": [
                    {
                      "properties": {
                        "gist": {
                          "value": {
                            "value": "gist",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "headline": {
                          "value": {
                            "value": "headline",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "summary": {
                          "value": {
                            "value": "summary",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "summarization": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "summary_type": {
                  "value": {
                    "value": "summary_type",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "summary_model": {
                  "value": {
                    "value": "summary_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "summary": {
                  "value": {
                    "value": "summary",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "custom_topics": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "topics": {
                  "value": [
                    {
                      "value": {
                        "value": "topics",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  ],
                  "type": "array"
                },
                "disfluencies": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sentiment_analysis": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sentiment_analysis_results": {
                  "value": [
                    {
                      "properties": {
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "sentiment": {
                          "value": "POSITIVE",
                          "type": "enum"
                        },
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "speaker": {
                          "value": {
                            "value": "speaker",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "entity_detection": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "entities": {
                  "value": [
                    {
                      "properties": {
                        "entity_type": {
                          "value": "banking_information",
                          "type": "enum"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "speech_threshold": {
                  "value": {
                    "value": 1.1,
                    "type": "float"
                  },
                  "type": "primitive"
                },
                "throttled": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "error": {
                  "value": {
                    "value": "error",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Delete the transcript",
      "audiences": [],
      "operationId": "deleteTranscript",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "delete"
      },
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "schema": {
              "type": "string"
            },
            "generatedName": "TranscriptDeleteRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "TranscriptDeleteRequest",
      "response": {
        "description": "The deleted transcript response.",
        "schema": {
          "generatedName": "TranscriptDeleteResponse",
          "schema": "Transcript",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Delete the transcript",
      "authed": true,
      "method": "DELETE",
      "path": "/v2/transcript/{transcript_id}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "value": {
                  "value": "transcript_id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "language_model": {
                  "value": {
                    "value": "language_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "acoustic_model": {
                  "value": {
                    "value": "acoustic_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "status": {
                  "value": "queued",
                  "type": "enum"
                },
                "language_code": {
                  "value": "en",
                  "type": "enum"
                },
                "audio_url": {
                  "value": {
                    "value": "audio_url",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "text": {
                  "value": {
                    "value": "text",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "words": {
                  "value": [
                    {
                      "properties": {
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "speaker": {
                          "value": {
                            "value": "speaker",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "utterances": {
                  "value": [
                    {
                      "properties": {
                        "channel": {
                          "value": {
                            "value": "channel",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "words": {
                          "value": [
                            {
                              "properties": {
                                "confidence": {
                                  "value": {
                                    "value": 1.1,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "start": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "end": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "text": {
                                  "value": {
                                    "value": "text",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "confidence": {
                  "value": {
                    "value": 1.1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "audio_duration": {
                  "value": {
                    "value": 1.1,
                    "type": "float"
                  },
                  "type": "primitive"
                },
                "punctuate": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "format_text": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "dual_channel": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "webhook_url": {
                  "value": {
                    "value": "webhook_url",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "webhook_status_code": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "webhook_auth": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "webhook_auth_header_name": {
                  "value": {
                    "value": "webhook_auth_header_name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "speed_boost": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "auto_highlights": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "auto_highlights_result": {
                  "properties": {
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "count": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "rank": {
                              "value": {
                                "value": 1.1,
                                "type": "float"
                              },
                              "type": "primitive"
                            },
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            },
                            "timestamps": {
                              "value": [
                                {
                                  "properties": {
                                    "start": {
                                      "value": {
                                        "value": 1,
                                        "type": "int"
                                      },
                                      "type": "primitive"
                                    },
                                    "end": {
                                      "value": {
                                        "value": 1,
                                        "type": "int"
                                      },
                                      "type": "primitive"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "audio_start_from": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "audio_end_at": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "word_boost": {
                  "value": [
                    {
                      "value": {
                        "value": "word_boost",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  ],
                  "type": "array"
                },
                "boost_param": {
                  "value": {
                    "value": "boost_param",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "filter_profanity": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii_audio": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "redact_pii_audio_quality": {
                  "value": {
                    "value": "redact_pii_audio_quality",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "redact_pii_policies": {
                  "value": [
                    {
                      "value": "medical_process",
                      "type": "enum"
                    }
                  ],
                  "type": "array"
                },
                "redact_pii_sub": {
                  "value": "entity_type",
                  "type": "enum"
                },
                "speaker_labels": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "speakers_expected": {
                  "value": {
                    "value": 1,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "content_safety": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "content_safety_labels": {
                  "properties": {
                    "status": {
                      "value": "success",
                      "type": "enum"
                    },
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            },
                            "labels": {
                              "value": [
                                {
                                  "properties": {
                                    "label": {
                                      "value": {
                                        "value": "label",
                                        "type": "string"
                                      },
                                      "type": "primitive"
                                    },
                                    "confidence": {
                                      "value": {
                                        "value": 1.1,
                                        "type": "double"
                                      },
                                      "type": "primitive"
                                    },
                                    "severity": {
                                      "value": {
                                        "value": 1.1,
                                        "type": "double"
                                      },
                                      "type": "primitive"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "type": "array"
                            },
                            "sentences_idx_start": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "sentences_idx_end": {
                              "value": {
                                "value": 1,
                                "type": "int"
                              },
                              "type": "primitive"
                            },
                            "timestamp": {
                              "properties": {
                                "start": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "end": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            },
                            "summary": {
                              "value": [
                                {
                                  "key": {
                                    "value": "key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 1.1,
                                      "type": "double"
                                    },
                                    "type": "primitive"
                                  }
                                }
                              ],
                              "type": "map"
                            },
                            "severity_score_summary": {
                              "value": [
                                {
                                  "key": {
                                    "value": "key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "properties": {
                                      "low": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      },
                                      "medium": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      },
                                      "high": {
                                        "value": {
                                          "value": 1.1,
                                          "type": "double"
                                        },
                                        "type": "primitive"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "iab_categories": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "iab_categories_result": {
                  "properties": {
                    "status": {
                      "value": "success",
                      "type": "enum"
                    },
                    "results": {
                      "value": [
                        {
                          "properties": {
                            "text": {
                              "value": {
                                "value": "text",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "array"
                    },
                    "summary": {
                      "value": [
                        {
                          "key": {
                            "value": "key",
                            "type": "string"
                          },
                          "value": {
                            "value": {
                              "value": 1.1,
                              "type": "double"
                            },
                            "type": "primitive"
                          }
                        }
                      ],
                      "type": "map"
                    }
                  },
                  "type": "object"
                },
                "language_detection": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "custom_spelling": {
                  "value": [
                    {
                      "properties": {
                        "from": {
                          "value": [
                            {
                              "value": {
                                "value": "from",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        },
                        "to": {
                          "value": {
                            "value": "to",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "auto_chapters": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "chapters": {
                  "value": [
                    {
                      "properties": {
                        "gist": {
                          "value": {
                            "value": "gist",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "headline": {
                          "value": {
                            "value": "headline",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "summary": {
                          "value": {
                            "value": "summary",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "summarization": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "summary_type": {
                  "value": {
                    "value": "summary_type",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "summary_model": {
                  "value": {
                    "value": "summary_model",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "summary": {
                  "value": {
                    "value": "summary",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "custom_topics": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "topics": {
                  "value": [
                    {
                      "value": {
                        "value": "topics",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  ],
                  "type": "array"
                },
                "disfluencies": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sentiment_analysis": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "sentiment_analysis_results": {
                  "value": [
                    {
                      "properties": {
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "sentiment": {
                          "value": "POSITIVE",
                          "type": "enum"
                        },
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "speaker": {
                          "value": {
                            "value": "speaker",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "entity_detection": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "entities": {
                  "value": [
                    {
                      "properties": {
                        "entity_type": {
                          "value": "banking_information",
                          "type": "enum"
                        },
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                },
                "speech_threshold": {
                  "value": {
                    "value": 1.1,
                    "type": "float"
                  },
                  "type": "primitive"
                },
                "throttled": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "error": {
                  "value": {
                    "value": "error",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Export transcript as SRT or VTT captions.",
      "audiences": [],
      "operationId": "getSubtitles",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "getSubtitles"
      },
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "schema": {
              "type": "string"
            },
            "generatedName": "TranscriptGetSubtitlesRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        {
          "description": "The format of the captions.",
          "name": "subtitle_format",
          "schema": {
            "generatedName": "TranscriptGetSubtitlesRequestSubtitleFormat",
            "schema": "SubtitleFormat",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [
        {
          "description": "The maximum number of characters per caption",
          "name": "chars_per_caption",
          "schema": {
            "generatedName": "TranscriptGetSubtitlesRequestCharsPerCaption",
            "value": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptGetSubtitlesRequestCharsPerCaption",
              "groupName": [],
              "type": "primitive"
            },
            "groupName": [],
            "type": "nullable"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "headers": [],
      "generatedRequestName": "TranscriptGetSubtitlesRequest",
      "response": {
        "description": "The exported captions as text",
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "text"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Export your transcript in SRT or VTT format, to be plugged into a video player for subtitles and closed captions.",
      "authed": true,
      "method": "GET",
      "path": "/v2/transcript/{transcript_id}/{subtitle_format}",
      "examples": [],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Get the transcript split by sentences",
      "audiences": [],
      "operationId": "getTranscriptSentences",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "getSentences"
      },
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "schema": {
              "type": "string"
            },
            "generatedName": "TranscriptGetSentencesRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "TranscriptGetSentencesRequest",
      "response": {
        "description": "Exported sentences",
        "schema": {
          "generatedName": "TranscriptGetSentencesResponse",
          "schema": "SentencesResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Get the transcript split by sentences. The API will attempt to semantically segment the transcript into sentences to create more reader-friendly transcripts.",
      "authed": true,
      "method": "GET",
      "path": "/v2/transcript/{transcript_id}/sentences",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "value": {
                  "value": "transcript_id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "confidence": {
                  "value": {
                    "value": 1.1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "audio_duration": {
                  "value": {
                    "value": 1.1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "sentences": {
                  "value": [
                    {
                      "properties": {
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "words": {
                          "value": [
                            {
                              "properties": {
                                "confidence": {
                                  "value": {
                                    "value": 1.1,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "start": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "end": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "text": {
                                  "value": {
                                    "value": "text",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Get the transcript split by paragraphs",
      "audiences": [],
      "operationId": "getTranscriptParagraphs",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "getParagraphs"
      },
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "schema": {
              "type": "string"
            },
            "generatedName": "TranscriptGetParagraphsRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "TranscriptGetParagraphsRequest",
      "response": {
        "description": "Exported paragraphs",
        "schema": {
          "generatedName": "TranscriptGetParagraphsResponse",
          "schema": "ParagraphsResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Get the transcript split by paragraphs. The API will attempt to semantically segment your transcript into paragraphs to create more reader-friendly transcripts.",
      "authed": true,
      "method": "GET",
      "path": "/v2/transcript/{transcript_id}/paragraphs",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "value": {
                  "value": "transcript_id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "confidence": {
                  "value": {
                    "value": 1.1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "audio_duration": {
                  "value": {
                    "value": 1.1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "paragraphs": {
                  "value": [
                    {
                      "properties": {
                        "text": {
                          "value": {
                            "value": "text",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "start": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "end": {
                          "value": {
                            "value": 1,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "confidence": {
                          "value": {
                            "value": 1.1,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "words": {
                          "value": [
                            {
                              "properties": {
                                "confidence": {
                                  "value": {
                                    "value": 1.1,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "start": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "end": {
                                  "value": {
                                    "value": 1,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "text": {
                                  "value": {
                                    "value": "text",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Search the given transcript for words, numbers, or phrases",
      "audiences": [],
      "operationId": "wordSearch",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "wordSearch"
      },
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "schema": {
              "type": "string"
            },
            "generatedName": "TranscriptWordSearchRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [
        {
          "description": "Keywords to search for",
          "name": "words",
          "schema": {
            "value": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptWordSearchRequestWordsItem",
              "groupName": [],
              "type": "primitive"
            },
            "generatedName": "TranscriptWordSearchRequestWords",
            "groupName": [],
            "type": "array"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "headers": [],
      "generatedRequestName": "TranscriptWordSearchRequest",
      "response": {
        "description": "Word search response",
        "schema": {
          "generatedName": "TranscriptWordSearchResponse",
          "schema": "WordSearchResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Search through the transcript for a specific set of keywords. You can search for individual words, numbers, or phrases containing up to five words or numbers.",
      "authed": true,
      "method": "GET",
      "path": "/v2/transcript/{transcript_id}/word-search",
      "examples": [],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Retrieves the redacted audio object containing the status and URL to the redacted audio.",
      "audiences": [],
      "operationId": "getRedactedAudio",
      "tags": [
        "transcript"
      ],
      "sdkName": {
        "groupName": [
          "transcript"
        ],
        "methodName": "getRedactedAudio"
      },
      "pathParameters": [
        {
          "description": "ID of the transcript",
          "name": "transcript_id",
          "schema": {
            "schema": {
              "type": "string"
            },
            "generatedName": "TranscriptGetRedactedAudioRequestTranscriptId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "TranscriptGetRedactedAudioRequest",
      "response": {
        "description": "The redacted audio object containing the status and URL to the redacted audio.",
        "schema": {
          "generatedName": "TranscriptGetRedactedAudioResponse",
          "schema": "RedactedAudioResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Retrieves the redacted audio object containing the status and URL to the redacted audio.",
      "authed": true,
      "method": "GET",
      "path": "/v2/transcript/{transcript_id}/redacted-audio",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "transcript_id",
              "value": {
                "value": {
                  "value": "transcript_id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "status": {
                  "value": {
                    "value": "redacted_audio_ready",
                    "type": "string"
                  },
                  "type": "literal"
                },
                "redacted_audio_url": {
                  "value": {
                    "value": "redacted_audio_url",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Create a temporary authentication token for real-time transcription",
      "audiences": [],
      "operationId": "createRealtimeToken",
      "tags": [
        "realtime"
      ],
      "sdkName": {
        "groupName": [
          "realtime"
        ],
        "methodName": "createTemporaryToken"
      },
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "RealtimeCreateTemporaryTokenRequest",
      "request": {
        "schema": {
          "generatedName": "RealtimeCreateTemporaryTokenRequest",
          "schema": "CreateRealtimeTemporaryTokenParameters",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "Temporary authentication token generated.",
        "schema": {
          "generatedName": "RealtimeCreateTemporaryTokenResponse",
          "schema": "RealtimeTemporaryTokenResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Create a temporary authentication token for real-time transcription",
      "authed": true,
      "method": "POST",
      "path": "/v2/realtime/token",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "expires_in": {
                "value": {
                  "value": 1,
                  "type": "int"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "token": {
                  "value": {
                    "value": "token",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Generate a custom summary from one or more transcripts.",
      "audiences": [],
      "operationId": "lemurSummary",
      "tags": [
        "LeMUR"
      ],
      "sdkName": {
        "groupName": [
          "lemur"
        ],
        "methodName": "summary"
      },
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "LemurSummaryRequest",
      "request": {
        "schema": {
          "generatedName": "LemurSummaryRequest",
          "schema": "LemurSummaryParameters",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "LeMUR summary response",
        "schema": {
          "generatedName": "LemurSummaryResponse",
          "schema": "LemurSummaryResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Custom Summary allows you to distill a piece of audio into a few impactful sentences. You can give the model context to obtain more targeted results while outputting the results in a variety of formats described in human language.",
      "authed": true,
      "method": "POST",
      "path": "/lemur/v3/generate/summary",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "transcript_ids": {
                "value": [
                  {
                    "value": {
                      "value": "transcript_ids",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                ],
                "type": "array"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "request_id": {
                  "value": {
                    "value": "request_id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "response": {
                  "value": {
                    "value": "response",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Create answers to one or more questions about one or more transcripts.",
      "audiences": [],
      "operationId": "lemurQuestionAnswer",
      "tags": [
        "LeMUR"
      ],
      "sdkName": {
        "groupName": [
          "lemur"
        ],
        "methodName": "questionAnswer"
      },
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "LemurQuestionAnswerRequest",
      "request": {
        "schema": {
          "generatedName": "LemurQuestionAnswerRequest",
          "schema": "LemurQuestionAnswerParameters",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "LeMUR question & answer response",
        "schema": {
          "generatedName": "LemurQuestionAnswerResponse",
          "schema": "LemurQuestionAnswerResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Question & Answer allows you to ask free-form questions about a single transcript or a group of transcripts. The questions can be any whose answers you find useful, such as judging whether a caller is likely to become a customer or whether all items on a meeting's agenda were covered.",
      "authed": true,
      "method": "POST",
      "path": "/lemur/v3/generate/question-answer",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "transcript_ids": {
                "value": [
                  {
                    "value": {
                      "value": "transcript_ids",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                ],
                "type": "array"
              },
              "questions": {
                "value": [
                  {
                    "properties": {
                      "question": {
                        "value": {
                          "value": "question",
                          "type": "string"
                        },
                        "type": "primitive"
                      }
                    },
                    "type": "object"
                  }
                ],
                "type": "array"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "request_id": {
                  "value": {
                    "value": "request_id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "response": {
                  "value": [
                    {
                      "properties": {
                        "question": {
                          "value": {
                            "value": "question",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "answer": {
                          "value": {
                            "value": "answer",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Extract action items from one or more meeting transcripts.",
      "audiences": [],
      "operationId": "lemurActionItems",
      "tags": [
        "LeMUR"
      ],
      "sdkName": {
        "groupName": [
          "lemur"
        ],
        "methodName": "actionItems"
      },
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "LemurActionItemsRequest",
      "request": {
        "schema": {
          "generatedName": "LemurActionItemsRequest",
          "schema": "LemurActionItemsParameters",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "LeMUR action items response",
        "schema": {
          "generatedName": "LemurActionItemsResponse",
          "schema": "LemurActionItemsResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Use LeMUR to generate a list of Action Items from a transcript",
      "authed": true,
      "method": "POST",
      "path": "/lemur/v3/generate/action-items",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "transcript_ids": {
                "value": [
                  {
                    "value": {
                      "value": "transcript_ids",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                ],
                "type": "array"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "request_id": {
                  "value": {
                    "value": "request_id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "response": {
                  "value": {
                    "value": "response",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Ask LeMUR to use one or more transcripts with a Custom Task to handle your specialized task.",
      "audiences": [],
      "operationId": "lemurTask",
      "tags": [
        "LeMUR"
      ],
      "sdkName": {
        "groupName": [
          "lemur"
        ],
        "methodName": "task"
      },
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "LemurTaskRequest",
      "request": {
        "schema": {
          "generatedName": "LemurTaskRequest",
          "schema": "LemurTaskParameters",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "contentType": "application/json",
        "fullExamples": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "json"
      },
      "response": {
        "description": "LeMUR task response",
        "schema": {
          "generatedName": "LemurTaskResponse",
          "schema": "LemurTaskResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Use LeMUR to ask anything with Custom Task",
      "authed": true,
      "method": "POST",
      "path": "/lemur/v3/generate/task",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "transcript_ids": {
                "value": [
                  {
                    "value": {
                      "value": "transcript_ids",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                ],
                "type": "array"
              },
              "prompt": {
                "value": {
                  "value": "prompt",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "request_id": {
                  "value": {
                    "value": "request_id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "response": {
                  "value": {
                    "value": "response",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    },
    {
      "summary": "Delete the data for a previously submitted LeMUR request.",
      "audiences": [],
      "operationId": "purgeLemurRequestData",
      "tags": [
        "LeMUR"
      ],
      "sdkName": {
        "groupName": [
          "lemur"
        ],
        "methodName": "purgeRequestData"
      },
      "pathParameters": [
        {
          "description": "The ID of the LeMUR request whose data you want to delete. This would be found in the response of the original request.",
          "name": "request_id",
          "schema": {
            "schema": {
              "type": "string"
            },
            "generatedName": "LemurPurgeRequestDataRequestRequestId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      ],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "LemurPurgeRequestDataRequest",
      "response": {
        "description": "LeMUR request data deleted.",
        "schema": {
          "generatedName": "LemurPurgeRequestDataResponse",
          "schema": "PurgeLemurRequestDataResponse",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Bad Request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "401": {
          "generatedName": "UnauthorizedError",
          "schema": {
            "generatedName": "UnauthorizedErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Unauthorized",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Not found",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "generatedName": "TooManyRequestsErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Too Many Requests",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "500": {
          "generatedName": "InternalServerError",
          "schema": {
            "generatedName": "InternalServerErrorBody",
            "schema": "Error",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "An error occurred while processing the request",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "properties": {
                  "error": {
                    "value": {
                      "value": "error",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                },
                "type": "object"
              }
            }
          ]
        },
        "503": {
          "generatedName": "ServiceUnavailableError",
          "schema": {
            "generatedName": "ServiceUnavailableErrorBody",
            "type": "unknown"
          },
          "description": "Service Unavailable",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        },
        "504": {
          "generatedName": "GatewayTimeoutError",
          "schema": {
            "generatedName": "GatewayTimeoutErrorBody",
            "type": "unknown"
          },
          "description": "Gateway Timeout",
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          }
        }
      },
      "server": [],
      "description": "Delete the data for a previously submitted LeMUR request.\nThe LLM response data, as well as any context provided in the original request will be removed.\n",
      "authed": true,
      "method": "DELETE",
      "path": "/lemur/v3/{request_id}",
      "examples": [
        {
          "pathParameters": [
            {
              "name": "request_id",
              "value": {
                "value": {
                  "value": "request_id",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "queryParameters": [],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "request_id": {
                  "value": {
                    "value": "request_id",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "request_id_to_purge": {
                  "value": {
                    "value": "request_id_to_purge",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "deleted": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.yml",
        "type": "openapi"
      }
    }
  ],
  "webhooks": [],
  "channel": [],
  "groupedSchemas": {
    "rootSchemas": {
      "RedactedAudioResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "redactedAudioResponseStatus",
            "key": "status",
            "schema": {
              "description": "The status of the redacted audio",
              "generatedName": "RedactedAudioResponseStatus",
              "schema": "RedactedAudioStatus",
              "source": {
                "file": "../openapi.yml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "redactedAudioResponseRedactedAudioUrl",
            "key": "redacted_audio_url",
            "schema": {
              "description": "The URL of the redacted audio file",
              "schema": {
                "type": "string"
              },
              "generatedName": "RedactedAudioResponseRedactedAudioUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RedactedAudioResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "RedactedAudioStatus": {
        "description": "The status of the redacted audio",
        "value": {
          "value": "redacted_audio_ready",
          "type": "string"
        },
        "generatedName": "RedactedAudioStatus",
        "groupName": [],
        "type": "literal"
      },
      "SubtitleFormat": {
        "description": "Format of the subtitles",
        "generatedName": "SubtitleFormat",
        "values": [
          {
            "generatedName": "srt",
            "value": "srt",
            "casing": {}
          },
          {
            "generatedName": "vtt",
            "value": "vtt",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "WordSearchResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "wordSearchResponseId",
            "key": "id",
            "schema": {
              "description": "The ID of the transcript",
              "schema": {
                "type": "string"
              },
              "generatedName": "WordSearchResponseId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "wordSearchResponseTotalCount",
            "key": "total_count",
            "schema": {
              "description": "The total count of all matched instances. For e.g., word 1 matched 2 times, and word 2 matched 3 times, `total_count` will equal 5.",
              "schema": {
                "type": "int"
              },
              "generatedName": "WordSearchResponseTotalCount",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "wordSearchResponseMatches",
            "key": "matches",
            "schema": {
              "description": "The matches of the search",
              "value": {
                "generatedName": "WordSearchResponseMatchesItem",
                "schema": "WordSearchMatch",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "WordSearchResponseMatches",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "WordSearchResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "WordSearchMatch": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "wordSearchMatchText",
            "key": "text",
            "schema": {
              "description": "The matched word",
              "schema": {
                "type": "string"
              },
              "generatedName": "WordSearchMatchText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "wordSearchMatchCount",
            "key": "count",
            "schema": {
              "description": "The total amount of times the word is in the transcript",
              "schema": {
                "type": "int"
              },
              "generatedName": "WordSearchMatchCount",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "wordSearchMatchTimestamps",
            "key": "timestamps",
            "schema": {
              "description": "An array of timestamps",
              "value": {
                "generatedName": "WordSearchMatchTimestampsItem",
                "schema": "WordSearchTimestamp",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "WordSearchMatchTimestamps",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "wordSearchMatchIndexes",
            "key": "indexes",
            "schema": {
              "description": "An array of all index locations for that word within the `words` array of the completed transcript",
              "value": {
                "schema": {
                  "type": "int"
                },
                "generatedName": "WordSearchMatchIndexesItem",
                "groupName": [],
                "type": "primitive"
              },
              "generatedName": "WordSearchMatchIndexes",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "WordSearchMatch",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "WordSearchTimestamp": {
        "description": "An array of timestamps structured as [`start_time`, `end_time`] in milliseconds",
        "value": {
          "schema": {
            "type": "int"
          },
          "generatedName": "WordSearchTimestampItem",
          "groupName": [],
          "type": "primitive"
        },
        "generatedName": "WordSearchTimestamp",
        "groupName": [],
        "type": "array"
      },
      "Timestamp": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "timestampStart",
            "key": "start",
            "schema": {
              "description": "The start time in milliseconds",
              "schema": {
                "type": "int"
              },
              "generatedName": "TimestampStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "timestampEnd",
            "key": "end",
            "schema": {
              "description": "The end time in milliseconds",
              "schema": {
                "type": "int"
              },
              "generatedName": "TimestampEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "Timestamp containing a start and end property in milliseconds.",
        "generatedName": "Timestamp",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "CreateTranscriptOptionalParameters": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersLanguageCode",
            "key": "language_code",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersLanguageCode",
              "value": {
                "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
                "generatedName": "CreateTranscriptOptionalParametersLanguageCode",
                "schema": "TranscriptLanguageCode",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersPunctuate",
            "key": "punctuate",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersPunctuate",
              "value": {
                "description": "Enable Automatic Punctuation, can be true or false.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersPunctuate",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersFormatText",
            "key": "format_text",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersFormatText",
              "value": {
                "description": "Enable Text Formatting, can be true or false.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersFormatText",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersDualChannel",
            "key": "dual_channel",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersDualChannel",
              "value": {
                "description": "Enable [Dual Channel](https://assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) transcription, can be true or false.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersDualChannel",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersWebhookUrl",
            "key": "webhook_url",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersWebhookUrl",
              "value": {
                "description": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request.",
                "schema": {
                  "type": "string"
                },
                "generatedName": "CreateTranscriptOptionalParametersWebhookUrl",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersWebhookAuthHeaderName",
            "key": "webhook_auth_header_name",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersWebhookAuthHeaderName",
              "value": {
                "generatedName": "CreateTranscriptOptionalParametersWebhookAuthHeaderName",
                "description": "The header name which should be sent back with webhook calls, if provided in the transcription request.",
                "value": {
                  "description": "The header name which should be sent back with webhook calls, if provided in the transcription request.",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "CreateTranscriptOptionalParametersWebhookAuthHeaderName",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersWebhookAuthHeaderValue",
            "key": "webhook_auth_header_value",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersWebhookAuthHeaderValue",
              "value": {
                "generatedName": "CreateTranscriptOptionalParametersWebhookAuthHeaderValue",
                "description": "Defaults to null. Optionally allows a user to specify a header name and value to send back with a webhook call for added security.",
                "value": {
                  "description": "Defaults to null. Optionally allows a user to specify a header name and value to send back with a webhook call for added security.",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "CreateTranscriptOptionalParametersWebhookAuthHeaderValue",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersAutoHighlights",
            "key": "auto_highlights",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersAutoHighlights",
              "value": {
                "description": "Whether Key Phrases was enabled in the transcription request, either true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersAutoHighlights",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersAudioStartFrom",
            "key": "audio_start_from",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersAudioStartFrom",
              "value": {
                "description": "The point in time, in milliseconds, to begin transcription from in your media file",
                "schema": {
                  "type": "int"
                },
                "generatedName": "CreateTranscriptOptionalParametersAudioStartFrom",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersAudioEndAt",
            "key": "audio_end_at",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersAudioEndAt",
              "value": {
                "description": "The point in time, in milliseconds, to stop transcribing in your media file",
                "schema": {
                  "type": "int"
                },
                "generatedName": "CreateTranscriptOptionalParametersAudioEndAt",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersWordBoost",
            "key": "word_boost",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersWordBoost",
              "value": {
                "description": "The list of custom vocabulary to boost transcription probability for, if provided in the transcription request.",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "CreateTranscriptOptionalParametersWordBoostItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "CreateTranscriptOptionalParametersWordBoost",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersBoostParam",
            "key": "boost_param",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersBoostParam",
              "value": {
                "description": "The word boost parameter value, if provided in the transcription request.",
                "generatedName": "CreateTranscriptOptionalParametersBoostParam",
                "schema": "TranscriptBoostParam",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersFilterProfanity",
            "key": "filter_profanity",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersFilterProfanity",
              "value": {
                "description": "Filter profanity from the transcribed text, can be true or false.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersFilterProfanity",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersRedactPii",
            "key": "redact_pii",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersRedactPii",
              "value": {
                "description": "Redact PII from the transcribed text using the Redact PII model, can be true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersRedactPii",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersRedactPiiAudio",
            "key": "redact_pii_audio",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersRedactPiiAudio",
              "value": {
                "description": "Generate a copy of the original media file with spoken PII \"beeped\" out, can be true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersRedactPiiAudio",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersRedactPiiAudioQuality",
            "key": "redact_pii_audio_quality",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersRedactPiiAudioQuality",
              "value": {
                "description": "Controls the filetype of the audio created by redact_pii_audio. Currently supports mp3 (default) and wav. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
                "schema": {
                  "default": "mp3",
                  "type": "string"
                },
                "generatedName": "CreateTranscriptOptionalParametersRedactPiiAudioQuality",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersRedactPiiPolicies",
            "key": "redact_pii_policies",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersRedactPiiPolicies",
              "value": {
                "description": "The list of PII Redaction policies to enable. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
                "value": {
                  "generatedName": "CreateTranscriptOptionalParametersRedactPiiPoliciesItem",
                  "schema": "PiiPolicy",
                  "source": {
                    "file": "../openapi.yml",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "CreateTranscriptOptionalParametersRedactPiiPolicies",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersRedactPiiSub",
            "key": "redact_pii_sub",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersRedactPiiSub",
              "value": {
                "description": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
                "generatedName": "CreateTranscriptOptionalParametersRedactPiiSub",
                "schema": "SubstitutionPolicy",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersSpeakerLabels",
            "key": "speaker_labels",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersSpeakerLabels",
              "value": {
                "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersSpeakerLabels",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersSpeakersExpected",
            "key": "speakers_expected",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersSpeakersExpected",
              "value": {
                "generatedName": "CreateTranscriptOptionalParametersSpeakersExpected",
                "description": "Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
                "value": {
                  "description": "Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
                  "schema": {
                    "default": null,
                    "type": "int"
                  },
                  "generatedName": "CreateTranscriptOptionalParametersSpeakersExpected",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersContentSafety",
            "key": "content_safety",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersContentSafety",
              "value": {
                "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersContentSafety",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersIabCategories",
            "key": "iab_categories",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersIabCategories",
              "value": {
                "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersIabCategories",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersLanguageDetection",
            "key": "language_detection",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersLanguageDetection",
              "value": {
                "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersLanguageDetection",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersCustomSpelling",
            "key": "custom_spelling",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersCustomSpelling",
              "value": {
                "description": "Customize how words are spelled and formatted using to and from values",
                "value": {
                  "generatedName": "CreateTranscriptOptionalParametersCustomSpellingItem",
                  "schema": "TranscriptCustomSpelling",
                  "source": {
                    "file": "../openapi.yml",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "CreateTranscriptOptionalParametersCustomSpelling",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersDisfluencies",
            "key": "disfluencies",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersDisfluencies",
              "value": {
                "description": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false.",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersDisfluencies",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersSentimentAnalysis",
            "key": "sentiment_analysis",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersSentimentAnalysis",
              "value": {
                "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersSentimentAnalysis",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersAutoChapters",
            "key": "auto_chapters",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersAutoChapters",
              "value": {
                "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersAutoChapters",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersEntityDetection",
            "key": "entity_detection",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersEntityDetection",
              "value": {
                "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersEntityDetection",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersSpeechThreshold",
            "key": "speech_threshold",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersSpeechThreshold",
              "value": {
                "generatedName": "CreateTranscriptOptionalParametersSpeechThreshold",
                "description": "Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive.\n",
                "value": {
                  "description": "Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive.\n",
                  "schema": {
                    "type": "float"
                  },
                  "generatedName": "CreateTranscriptOptionalParametersSpeechThreshold",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersSummarization",
            "key": "summarization",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersSummarization",
              "value": {
                "description": "Enable [Summarization](https://www.assemblyai.com/docs/Models/summarization), can be true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersSummarization",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersSummaryModel",
            "key": "summary_model",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersSummaryModel",
              "value": {
                "description": "The model to summarize the transcript",
                "generatedName": "CreateTranscriptOptionalParametersSummaryModel",
                "schema": "SummaryModel",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersSummaryType",
            "key": "summary_type",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersSummaryType",
              "value": {
                "description": "The type of summary",
                "generatedName": "CreateTranscriptOptionalParametersSummaryType",
                "schema": "SummaryType",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersCustomTopics",
            "key": "custom_topics",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersCustomTopics",
              "value": {
                "description": "Whether custom topics was enabled in the transcription request, either true or false",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "CreateTranscriptOptionalParametersCustomTopics",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "createTranscriptOptionalParametersTopics",
            "key": "topics",
            "schema": {
              "generatedName": "createTranscriptOptionalParametersTopics",
              "value": {
                "description": "The list of custom topics provided if custom topics was enabled in the transcription request",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "CreateTranscriptOptionalParametersTopicsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "CreateTranscriptOptionalParametersTopics",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "The parameters for creating a transcript",
        "generatedName": "CreateTranscriptOptionalParameters",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "CreateTranscriptParameters": {
        "allOf": [
          {
            "generatedName": "CreateTranscriptOptionalParameters",
            "schema": "CreateTranscriptOptionalParameters",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "createTranscriptParametersAudioUrl",
            "key": "audio_url",
            "schema": {
              "description": "The URL of the audio or video file to transcribe.",
              "schema": {
                "type": "string"
              },
              "generatedName": "CreateTranscriptParametersAudioUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "The parameters for creating a transcript",
        "generatedName": "CreateTranscriptParameters",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "SummaryModel": {
        "description": "The model to summarize the transcript",
        "generatedName": "SummaryModel",
        "values": [
          {
            "generatedName": "informative",
            "value": "informative",
            "casing": {}
          },
          {
            "generatedName": "conversational",
            "value": "conversational",
            "casing": {}
          },
          {
            "generatedName": "catchy",
            "value": "catchy",
            "casing": {}
          }
        ],
        "default": {
          "generatedName": "informative",
          "value": "informative",
          "casing": {}
        },
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "SummaryType": {
        "description": "The type of summary",
        "generatedName": "SummaryType",
        "values": [
          {
            "generatedName": "bullets",
            "value": "bullets",
            "casing": {}
          },
          {
            "generatedName": "bullets_verbose",
            "value": "bullets_verbose",
            "casing": {}
          },
          {
            "generatedName": "gist",
            "value": "gist",
            "casing": {}
          },
          {
            "generatedName": "headline",
            "value": "headline",
            "casing": {}
          },
          {
            "generatedName": "paragraph",
            "value": "paragraph",
            "casing": {}
          }
        ],
        "default": {
          "generatedName": "bullets",
          "value": "bullets",
          "casing": {}
        },
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "TranscriptBoostParam": {
        "description": "The word boost parameter value, if provided in the transcription request.",
        "generatedName": "TranscriptBoostParam",
        "values": [
          {
            "generatedName": "low",
            "value": "low",
            "casing": {}
          },
          {
            "generatedName": "default",
            "value": "default",
            "casing": {}
          },
          {
            "generatedName": "high",
            "value": "high",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "TranscriptCustomSpelling": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptCustomSpellingFrom",
            "key": "from",
            "schema": {
              "description": "Words or phrases to replace",
              "value": {
                "description": "Word or phrase to replace",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TranscriptCustomSpellingFromItem",
                "groupName": [],
                "type": "primitive"
              },
              "generatedName": "TranscriptCustomSpellingFrom",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptCustomSpellingTo",
            "key": "to",
            "schema": {
              "description": "Word or phrase to replace with",
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptCustomSpellingTo",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "Object containing words or phrases to replace, and the word or phrase to replace with",
        "generatedName": "TranscriptCustomSpelling",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "TranscriptUtterance": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptUtteranceChannel",
            "key": "channel",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptUtteranceChannel",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptUtteranceConfidence",
            "key": "confidence",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "TranscriptUtteranceConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptUtteranceStart",
            "key": "start",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptUtteranceStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptUtteranceEnd",
            "key": "end",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptUtteranceEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptUtteranceText",
            "key": "text",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptUtteranceText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptUtteranceWords",
            "key": "words",
            "schema": {
              "value": {
                "generatedName": "TranscriptUtteranceWordsItem",
                "schema": "TranscriptWord",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "TranscriptUtteranceWords",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TranscriptUtterance",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "SubstitutionPolicy": {
        "generatedName": "SubstitutionPolicy",
        "description": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
        "value": {
          "description": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
          "generatedName": "SubstitutionPolicy",
          "values": [
            {
              "generatedName": "entity_type",
              "value": "entity_type",
              "casing": {}
            },
            {
              "generatedName": "hash",
              "value": "hash",
              "casing": {}
            }
          ],
          "groupName": [],
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "enum"
        },
        "groupName": [],
        "type": "nullable"
      },
      "PiiPolicy": {
        "generatedName": "PiiPolicy",
        "values": [
          {
            "generatedName": "medical_process",
            "value": "medical_process",
            "casing": {}
          },
          {
            "generatedName": "medical_condition",
            "value": "medical_condition",
            "casing": {}
          },
          {
            "generatedName": "blood_type",
            "value": "blood_type",
            "casing": {}
          },
          {
            "generatedName": "drug",
            "value": "drug",
            "casing": {}
          },
          {
            "generatedName": "injury",
            "value": "injury",
            "casing": {}
          },
          {
            "generatedName": "number_sequence",
            "value": "number_sequence",
            "casing": {}
          },
          {
            "generatedName": "email_address",
            "value": "email_address",
            "casing": {}
          },
          {
            "generatedName": "date_of_birth",
            "value": "date_of_birth",
            "casing": {}
          },
          {
            "generatedName": "phone_number",
            "value": "phone_number",
            "casing": {}
          },
          {
            "generatedName": "us_social_security_number",
            "value": "us_social_security_number",
            "casing": {}
          },
          {
            "generatedName": "credit_card_number",
            "value": "credit_card_number",
            "casing": {}
          },
          {
            "generatedName": "credit_card_expiration",
            "value": "credit_card_expiration",
            "casing": {}
          },
          {
            "generatedName": "credit_card_cvv",
            "value": "credit_card_cvv",
            "casing": {}
          },
          {
            "generatedName": "date",
            "value": "date",
            "casing": {}
          },
          {
            "generatedName": "nationality",
            "value": "nationality",
            "casing": {}
          },
          {
            "generatedName": "event",
            "value": "event",
            "casing": {}
          },
          {
            "generatedName": "language",
            "value": "language",
            "casing": {}
          },
          {
            "generatedName": "location",
            "value": "location",
            "casing": {}
          },
          {
            "generatedName": "money_amount",
            "value": "money_amount",
            "casing": {}
          },
          {
            "generatedName": "person_name",
            "value": "person_name",
            "casing": {}
          },
          {
            "generatedName": "person_age",
            "value": "person_age",
            "casing": {}
          },
          {
            "generatedName": "organization",
            "value": "organization",
            "casing": {}
          },
          {
            "generatedName": "political_affiliation",
            "value": "political_affiliation",
            "casing": {}
          },
          {
            "generatedName": "occupation",
            "value": "occupation",
            "casing": {}
          },
          {
            "generatedName": "religion",
            "value": "religion",
            "casing": {}
          },
          {
            "generatedName": "drivers_license",
            "value": "drivers_license",
            "casing": {}
          },
          {
            "generatedName": "banking_information",
            "value": "banking_information",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "TranscriptLanguageCode": {
        "generatedName": "TranscriptLanguageCode",
        "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
        "value": {
          "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
          "generatedName": "TranscriptLanguageCode",
          "values": [
            {
              "generatedName": "en",
              "value": "en",
              "casing": {}
            },
            {
              "generatedName": "en_au",
              "value": "en_au",
              "casing": {}
            },
            {
              "generatedName": "en_uk",
              "value": "en_uk",
              "casing": {}
            },
            {
              "generatedName": "en_us",
              "value": "en_us",
              "casing": {}
            },
            {
              "generatedName": "es",
              "value": "es",
              "casing": {}
            },
            {
              "generatedName": "fr",
              "value": "fr",
              "casing": {}
            },
            {
              "generatedName": "de",
              "value": "de",
              "casing": {}
            },
            {
              "generatedName": "it",
              "value": "it",
              "casing": {}
            },
            {
              "generatedName": "pt",
              "value": "pt",
              "casing": {}
            },
            {
              "generatedName": "nl",
              "value": "nl",
              "casing": {}
            },
            {
              "generatedName": "hi",
              "value": "hi",
              "casing": {}
            },
            {
              "generatedName": "ja",
              "value": "ja",
              "casing": {}
            },
            {
              "generatedName": "zh",
              "value": "zh",
              "casing": {}
            },
            {
              "generatedName": "fi",
              "value": "fi",
              "casing": {}
            },
            {
              "generatedName": "ko",
              "value": "ko",
              "casing": {}
            },
            {
              "generatedName": "pl",
              "value": "pl",
              "casing": {}
            },
            {
              "generatedName": "ru",
              "value": "ru",
              "casing": {}
            },
            {
              "generatedName": "tr",
              "value": "tr",
              "casing": {}
            },
            {
              "generatedName": "uk",
              "value": "uk",
              "casing": {}
            },
            {
              "generatedName": "vi",
              "value": "vi",
              "casing": {}
            }
          ],
          "default": {
            "generatedName": "en_us",
            "value": "en_us",
            "casing": {}
          },
          "groupName": [],
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "enum"
        },
        "groupName": [],
        "type": "nullable"
      },
      "TranscriptStatus": {
        "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
        "generatedName": "TranscriptStatus",
        "values": [
          {
            "generatedName": "queued",
            "value": "queued",
            "description": "The audio file is in the queue to be processed by the API.",
            "casing": {}
          },
          {
            "generatedName": "processing",
            "value": "processing",
            "description": "The audio file is being processed by the API.",
            "casing": {}
          },
          {
            "generatedName": "completed",
            "value": "completed",
            "description": "The transcription job has been completed successfully.",
            "casing": {}
          },
          {
            "generatedName": "error",
            "value": "error",
            "description": "An error occurred while processing the audio file.",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "Transcript": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptId",
            "key": "id",
            "schema": {
              "description": "The unique identifier of your transcription",
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptLanguageModel",
            "key": "language_model",
            "schema": {
              "description": "The language model that was used for the transcription",
              "availability": "Deprecated",
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptLanguageModel",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "availability": "Deprecated"
          },
          {
            "conflict": {},
            "generatedName": "transcriptAcousticModel",
            "key": "acoustic_model",
            "schema": {
              "description": "The acoustic model that was used for the transcription",
              "availability": "Deprecated",
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptAcousticModel",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": [],
            "availability": "Deprecated"
          },
          {
            "conflict": {},
            "generatedName": "transcriptStatus",
            "key": "status",
            "schema": {
              "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
              "generatedName": "TranscriptStatus",
              "schema": "TranscriptStatus",
              "source": {
                "file": "../openapi.yml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "transcriptLanguageCode",
            "key": "language_code",
            "schema": {
              "generatedName": "transcriptLanguageCode",
              "value": {
                "description": "The language of your audio file.\nPossible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
                "generatedName": "TranscriptLanguageCode",
                "schema": "TranscriptLanguageCode",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "transcriptAudioUrl",
            "key": "audio_url",
            "schema": {
              "description": "The URL of the media that was transcribed",
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptAudioUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptText",
            "key": "text",
            "schema": {
              "generatedName": "transcriptText",
              "value": {
                "generatedName": "TranscriptText",
                "description": "The textual transcript of your media file",
                "value": {
                  "description": "The textual transcript of your media file",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptText",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWords",
            "key": "words",
            "schema": {
              "generatedName": "transcriptWords",
              "value": {
                "generatedName": "TranscriptWords",
                "description": "An array of temporally-sequential word objects, one for each word in the transcript.\nSee [Speech recognition](https://www.assemblyai.com/docs/Models/speech_recognition) for more information.\n",
                "value": {
                  "description": "An array of temporally-sequential word objects, one for each word in the transcript.\nSee [Speech recognition](https://www.assemblyai.com/docs/Models/speech_recognition) for more information.\n",
                  "value": {
                    "generatedName": "TranscriptWordsItem",
                    "schema": "TranscriptWord",
                    "source": {
                      "file": "../openapi.yml",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "generatedName": "TranscriptWords",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptUtterances",
            "key": "utterances",
            "schema": {
              "generatedName": "transcriptUtterances",
              "value": {
                "generatedName": "TranscriptUtterances",
                "description": "When dual_channel or speaker_labels is enabled, a list of turn-by-turn utterance objects.\nSee [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more information.\n",
                "value": {
                  "description": "When dual_channel or speaker_labels is enabled, a list of turn-by-turn utterance objects.\nSee [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more information.\n",
                  "value": {
                    "generatedName": "TranscriptUtterancesItem",
                    "schema": "TranscriptUtterance",
                    "source": {
                      "file": "../openapi.yml",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "generatedName": "TranscriptUtterances",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptConfidence",
            "key": "confidence",
            "schema": {
              "generatedName": "transcriptConfidence",
              "value": {
                "generatedName": "TranscriptConfidence",
                "description": "The confidence score for the transcript, between 0.0 (low confidence) and 1.0 (high confidence)",
                "value": {
                  "description": "The confidence score for the transcript, between 0.0 (low confidence) and 1.0 (high confidence)",
                  "schema": {
                    "minimum": 0,
                    "maximum": 1,
                    "type": "double"
                  },
                  "generatedName": "TranscriptConfidence",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptAudioDuration",
            "key": "audio_duration",
            "schema": {
              "generatedName": "transcriptAudioDuration",
              "value": {
                "generatedName": "TranscriptAudioDuration",
                "description": "The duration of this transcript object's media file, in seconds",
                "value": {
                  "description": "The duration of this transcript object's media file, in seconds",
                  "schema": {
                    "type": "float"
                  },
                  "generatedName": "TranscriptAudioDuration",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptPunctuate",
            "key": "punctuate",
            "schema": {
              "generatedName": "transcriptPunctuate",
              "value": {
                "generatedName": "TranscriptPunctuate",
                "description": "Whether Automatic Punctuation was enabled in the transcription request, either true or false.",
                "value": {
                  "description": "Whether Automatic Punctuation was enabled in the transcription request, either true or false.",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptPunctuate",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptFormatText",
            "key": "format_text",
            "schema": {
              "generatedName": "transcriptFormatText",
              "value": {
                "generatedName": "TranscriptFormatText",
                "description": "Whether Text Formatting was enabled in the transcription request, either true or false",
                "value": {
                  "description": "Whether Text Formatting was enabled in the transcription request, either true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptFormatText",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptDualChannel",
            "key": "dual_channel",
            "schema": {
              "generatedName": "transcriptDualChannel",
              "value": {
                "generatedName": "TranscriptDualChannel",
                "description": "Whether [Dual channel transcription](https://www.assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) was enabled in the transcription request, either true or false",
                "value": {
                  "description": "Whether [Dual channel transcription](https://www.assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) was enabled in the transcription request, either true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptDualChannel",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWebhookUrl",
            "key": "webhook_url",
            "schema": {
              "generatedName": "transcriptWebhookUrl",
              "value": {
                "generatedName": "TranscriptWebhookUrl",
                "description": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request",
                "value": {
                  "description": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptWebhookUrl",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWebhookStatusCode",
            "key": "webhook_status_code",
            "schema": {
              "generatedName": "transcriptWebhookStatusCode",
              "value": {
                "generatedName": "TranscriptWebhookStatusCode",
                "description": "The status code we received from your server when delivering your webhook, if a webhook URL was provided in the transcription request",
                "value": {
                  "description": "The status code we received from your server when delivering your webhook, if a webhook URL was provided in the transcription request",
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "TranscriptWebhookStatusCode",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWebhookAuth",
            "key": "webhook_auth",
            "schema": {
              "description": "Whether webhook authentication details were provided in the transcription request",
              "schema": {
                "type": "boolean"
              },
              "generatedName": "TranscriptWebhookAuth",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWebhookAuthHeaderName",
            "key": "webhook_auth_header_name",
            "schema": {
              "generatedName": "transcriptWebhookAuthHeaderName",
              "value": {
                "generatedName": "TranscriptWebhookAuthHeaderName",
                "description": "The header name which should be sent back with webhook calls, if provided in the transcription request",
                "value": {
                  "description": "The header name which should be sent back with webhook calls, if provided in the transcription request",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptWebhookAuthHeaderName",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSpeedBoost",
            "key": "speed_boost",
            "schema": {
              "generatedName": "transcriptSpeedBoost",
              "availability": "Deprecated",
              "value": {
                "generatedName": "TranscriptSpeedBoost",
                "description": "Whether speed boost was enabled in the transcription request",
                "availability": "Deprecated",
                "value": {
                  "description": "Whether speed boost was enabled in the transcription request",
                  "availability": "Deprecated",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptSpeedBoost",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "availability": "Deprecated"
          },
          {
            "conflict": {},
            "generatedName": "transcriptAutoHighlights",
            "key": "auto_highlights",
            "schema": {
              "description": "Whether Key Phrases was enabled in the transcription request, either true or false",
              "schema": {
                "type": "boolean"
              },
              "generatedName": "TranscriptAutoHighlights",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptAutoHighlightsResult",
            "key": "auto_highlights_result",
            "schema": {
              "generatedName": "transcriptAutoHighlightsResult",
              "value": {
                "description": "An array of results for the Key Phrases model, if it was enabled during the transcription request.\nSee [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.\n",
                "generatedName": "TranscriptAutoHighlightsResult",
                "schema": "AutoHighlightsResult",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "transcriptAudioStartFrom",
            "key": "audio_start_from",
            "schema": {
              "generatedName": "transcriptAudioStartFrom",
              "value": {
                "generatedName": "TranscriptAudioStartFrom",
                "description": "The point in time, in milliseconds, in the file at which the transcription was started, if provided in the transcription request",
                "value": {
                  "description": "The point in time, in milliseconds, in the file at which the transcription was started, if provided in the transcription request",
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "TranscriptAudioStartFrom",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptAudioEndAt",
            "key": "audio_end_at",
            "schema": {
              "generatedName": "transcriptAudioEndAt",
              "value": {
                "generatedName": "TranscriptAudioEndAt",
                "description": "The point in time, in milliseconds, in the file at which the transcription was terminated, if provided in the transcription request",
                "value": {
                  "description": "The point in time, in milliseconds, in the file at which the transcription was terminated, if provided in the transcription request",
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "TranscriptAudioEndAt",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWordBoost",
            "key": "word_boost",
            "schema": {
              "generatedName": "transcriptWordBoost",
              "value": {
                "description": "The list of custom vocabulary to boost transcription probability for, if provided in the transcription request",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptWordBoostItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "TranscriptWordBoost",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptBoostParam",
            "key": "boost_param",
            "schema": {
              "generatedName": "transcriptBoostParam",
              "value": {
                "generatedName": "TranscriptBoostParam",
                "description": "The word boost parameter value, if provided in the transcription request",
                "value": {
                  "description": "The word boost parameter value, if provided in the transcription request",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptBoostParam",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptFilterProfanity",
            "key": "filter_profanity",
            "schema": {
              "generatedName": "transcriptFilterProfanity",
              "value": {
                "generatedName": "TranscriptFilterProfanity",
                "description": "Whether [Profanity Filtering](https://www.assemblyai.com/docs/Models/speech_recognition#profanity-filtering) was enabled in the transcription request, either true or false",
                "value": {
                  "description": "Whether [Profanity Filtering](https://www.assemblyai.com/docs/Models/speech_recognition#profanity-filtering) was enabled in the transcription request, either true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptFilterProfanity",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptRedactPii",
            "key": "redact_pii",
            "schema": {
              "description": "Whether [PII Redaction](https://www.assemblyai.com/docs/Models/pii_redaction) was enabled in the transcription request, either true or false",
              "schema": {
                "type": "boolean"
              },
              "generatedName": "TranscriptRedactPii",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptRedactPiiAudio",
            "key": "redact_pii_audio",
            "schema": {
              "generatedName": "transcriptRedactPiiAudio",
              "value": {
                "generatedName": "TranscriptRedactPiiAudio",
                "description": "Whether a redacted version of the audio file was generated (enabled or disabled in the transcription request),\neither true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
                "value": {
                  "description": "Whether a redacted version of the audio file was generated (enabled or disabled in the transcription request),\neither true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptRedactPiiAudio",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptRedactPiiAudioQuality",
            "key": "redact_pii_audio_quality",
            "schema": {
              "generatedName": "transcriptRedactPiiAudioQuality",
              "value": {
                "generatedName": "TranscriptRedactPiiAudioQuality",
                "description": "The audio quality of the PII-redacted audio file, if enabled in the transcription request.\nSee [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
                "value": {
                  "description": "The audio quality of the PII-redacted audio file, if enabled in the transcription request.\nSee [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptRedactPiiAudioQuality",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptRedactPiiPolicies",
            "key": "redact_pii_policies",
            "schema": {
              "generatedName": "transcriptRedactPiiPolicies",
              "value": {
                "generatedName": "TranscriptRedactPiiPolicies",
                "description": "The list of PII Redaction policies that were enabled, if PII Redaction is enabled.\nSee [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
                "value": {
                  "description": "The list of PII Redaction policies that were enabled, if PII Redaction is enabled.\nSee [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
                  "value": {
                    "generatedName": "TranscriptRedactPiiPoliciesItem",
                    "schema": "PiiPolicy",
                    "source": {
                      "file": "../openapi.yml",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "generatedName": "TranscriptRedactPiiPolicies",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptRedactPiiSub",
            "key": "redact_pii_sub",
            "schema": {
              "generatedName": "transcriptRedactPiiSub",
              "value": {
                "description": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
                "generatedName": "TranscriptRedactPiiSub",
                "schema": "SubstitutionPolicy",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "transcriptSpeakerLabels",
            "key": "speaker_labels",
            "schema": {
              "generatedName": "transcriptSpeakerLabels",
              "value": {
                "generatedName": "TranscriptSpeakerLabels",
                "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
                "value": {
                  "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptSpeakerLabels",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSpeakersExpected",
            "key": "speakers_expected",
            "schema": {
              "generatedName": "transcriptSpeakersExpected",
              "value": {
                "generatedName": "TranscriptSpeakersExpected",
                "description": "Defaults to null. Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
                "value": {
                  "description": "Defaults to null. Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
                  "schema": {
                    "type": "int"
                  },
                  "generatedName": "TranscriptSpeakersExpected",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptContentSafety",
            "key": "content_safety",
            "schema": {
              "generatedName": "transcriptContentSafety",
              "value": {
                "generatedName": "TranscriptContentSafety",
                "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
                "value": {
                  "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptContentSafety",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptContentSafetyLabels",
            "key": "content_safety_labels",
            "schema": {
              "generatedName": "transcriptContentSafetyLabels",
              "value": {
                "generatedName": "TranscriptContentSafetyLabels",
                "description": "An array of results for the Content Moderation model, if it was enabled during the transcription request.\nSee [Content moderation](https://www.assemblyai.com/docs/Models/content_moderation) for more information.\n",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "transcriptContentSafetyLabelsStatus",
                      "key": "status",
                      "schema": {
                        "description": "Will be either success, or unavailable in the rare case that the Content Safety Labels model failed.",
                        "generatedName": "TranscriptContentSafetyLabelsStatus",
                        "schema": "AudioIntelligenceModelStatus",
                        "source": {
                          "file": "../openapi.yml",
                          "type": "openapi"
                        },
                        "type": "reference"
                      },
                      "audiences": [],
                      "readonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "transcriptContentSafetyLabelsResults",
                      "key": "results",
                      "schema": {
                        "value": {
                          "generatedName": "TranscriptContentSafetyLabelsResultsItem",
                          "schema": "ContentSafetyLabelResult",
                          "source": {
                            "file": "../openapi.yml",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "generatedName": "TranscriptContentSafetyLabelsResults",
                        "groupName": [],
                        "type": "array"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "description": "An array of results for the Content Moderation model, if it was enabled during the transcription request.\nSee [Content moderation](https://www.assemblyai.com/docs/Models/content_moderation) for more information.\n",
                  "generatedName": "TranscriptContentSafetyLabels",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../openapi.yml",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptIabCategories",
            "key": "iab_categories",
            "schema": {
              "generatedName": "transcriptIabCategories",
              "value": {
                "generatedName": "TranscriptIabCategories",
                "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
                "value": {
                  "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptIabCategories",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptIabCategoriesResult",
            "key": "iab_categories_result",
            "schema": {
              "generatedName": "transcriptIabCategoriesResult",
              "value": {
                "generatedName": "TranscriptIabCategoriesResult",
                "description": "An array of results for the Topic Detection model, if it was enabled during the transcription request.\nSee [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification) for more information.\n",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "transcriptIabCategoriesResultStatus",
                      "key": "status",
                      "schema": {
                        "description": "Will be either success, or unavailable in the rare case that the Content Moderation model failed.",
                        "generatedName": "TranscriptIabCategoriesResultStatus",
                        "schema": "AudioIntelligenceModelStatus",
                        "source": {
                          "file": "../openapi.yml",
                          "type": "openapi"
                        },
                        "type": "reference"
                      },
                      "audiences": [],
                      "readonly": false
                    },
                    {
                      "conflict": {},
                      "generatedName": "transcriptIabCategoriesResultResults",
                      "key": "results",
                      "schema": {
                        "description": "An array of results for the Topic Detection model.",
                        "value": {
                          "generatedName": "TranscriptIabCategoriesResultResultsItem",
                          "schema": "TopicDetectionResult",
                          "source": {
                            "file": "../openapi.yml",
                            "type": "openapi"
                          },
                          "type": "reference"
                        },
                        "generatedName": "TranscriptIabCategoriesResultResults",
                        "groupName": [],
                        "type": "array"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "transcriptIabCategoriesResultSummary",
                      "key": "summary",
                      "schema": {
                        "description": "The overall relevance of topic to the entire audio file",
                        "key": {
                          "schema": {
                            "type": "string"
                          },
                          "generatedName": "TranscriptIabCategoriesResultSummaryKey",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "value": {
                          "schema": {
                            "minimum": 0,
                            "maximum": 1,
                            "type": "double"
                          },
                          "generatedName": "TranscriptIabCategoriesResultSummaryValue",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "generatedName": "TranscriptIabCategoriesResultSummary",
                        "groupName": [],
                        "type": "map"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "description": "An array of results for the Topic Detection model, if it was enabled during the transcription request.\nSee [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification) for more information.\n",
                  "generatedName": "TranscriptIabCategoriesResult",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../openapi.yml",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptLanguageDetection",
            "key": "language_detection",
            "schema": {
              "generatedName": "transcriptLanguageDetection",
              "value": {
                "generatedName": "TranscriptLanguageDetection",
                "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false",
                "value": {
                  "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptLanguageDetection",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptCustomSpelling",
            "key": "custom_spelling",
            "schema": {
              "generatedName": "transcriptCustomSpelling",
              "value": {
                "generatedName": "TranscriptCustomSpelling",
                "description": "Customize how words are spelled and formatted using to and from values",
                "value": {
                  "description": "Customize how words are spelled and formatted using to and from values",
                  "value": {
                    "generatedName": "TranscriptCustomSpellingItem",
                    "schema": "TranscriptCustomSpelling",
                    "source": {
                      "file": "../openapi.yml",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "generatedName": "TranscriptCustomSpelling",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptAutoChapters",
            "key": "auto_chapters",
            "schema": {
              "generatedName": "transcriptAutoChapters",
              "value": {
                "generatedName": "TranscriptAutoChapters",
                "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
                "value": {
                  "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptAutoChapters",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptChapters",
            "key": "chapters",
            "schema": {
              "generatedName": "transcriptChapters",
              "value": {
                "generatedName": "TranscriptChapters",
                "description": "An array of temporally sequential chapters for the audio file",
                "value": {
                  "description": "An array of temporally sequential chapters for the audio file",
                  "value": {
                    "generatedName": "TranscriptChaptersItem",
                    "schema": "Chapter",
                    "source": {
                      "file": "../openapi.yml",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "generatedName": "TranscriptChapters",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSummarization",
            "key": "summarization",
            "schema": {
              "description": "Whether [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request, either true or false",
              "schema": {
                "type": "boolean"
              },
              "generatedName": "TranscriptSummarization",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSummaryType",
            "key": "summary_type",
            "schema": {
              "generatedName": "transcriptSummaryType",
              "value": {
                "generatedName": "TranscriptSummaryType",
                "description": "The type of summary generated, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
                "value": {
                  "description": "The type of summary generated, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptSummaryType",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSummaryModel",
            "key": "summary_model",
            "schema": {
              "generatedName": "transcriptSummaryModel",
              "value": {
                "generatedName": "TranscriptSummaryModel",
                "description": "The Summarization model used to generate the summary,\nif [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request\n",
                "value": {
                  "description": "The Summarization model used to generate the summary,\nif [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request\n",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptSummaryModel",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSummary",
            "key": "summary",
            "schema": {
              "generatedName": "transcriptSummary",
              "value": {
                "generatedName": "TranscriptSummary",
                "description": "The generated summary of the media file, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
                "value": {
                  "description": "The generated summary of the media file, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptSummary",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptCustomTopics",
            "key": "custom_topics",
            "schema": {
              "generatedName": "transcriptCustomTopics",
              "value": {
                "generatedName": "TranscriptCustomTopics",
                "description": "Whether custom topics was enabled in the transcription request, either true or false",
                "value": {
                  "description": "Whether custom topics was enabled in the transcription request, either true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptCustomTopics",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptTopics",
            "key": "topics",
            "schema": {
              "generatedName": "transcriptTopics",
              "value": {
                "description": "The list of custom topics provided if custom topics was enabled in the transcription request",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptTopicsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "TranscriptTopics",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptDisfluencies",
            "key": "disfluencies",
            "schema": {
              "generatedName": "transcriptDisfluencies",
              "value": {
                "generatedName": "TranscriptDisfluencies",
                "description": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false",
                "value": {
                  "description": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptDisfluencies",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSentimentAnalysis",
            "key": "sentiment_analysis",
            "schema": {
              "generatedName": "transcriptSentimentAnalysis",
              "value": {
                "generatedName": "TranscriptSentimentAnalysis",
                "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
                "value": {
                  "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptSentimentAnalysis",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSentimentAnalysisResults",
            "key": "sentiment_analysis_results",
            "schema": {
              "generatedName": "transcriptSentimentAnalysisResults",
              "value": {
                "generatedName": "TranscriptSentimentAnalysisResults",
                "description": "An array of results for the Sentiment Analysis model, if it was enabled during the transcription request.\nSee [Sentiment analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis) for more information.\n",
                "value": {
                  "description": "An array of results for the Sentiment Analysis model, if it was enabled during the transcription request.\nSee [Sentiment analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis) for more information.\n",
                  "value": {
                    "generatedName": "TranscriptSentimentAnalysisResultsItem",
                    "schema": "SentimentAnalysisResult",
                    "source": {
                      "file": "../openapi.yml",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "generatedName": "TranscriptSentimentAnalysisResults",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptEntityDetection",
            "key": "entity_detection",
            "schema": {
              "generatedName": "transcriptEntityDetection",
              "value": {
                "generatedName": "TranscriptEntityDetection",
                "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
                "value": {
                  "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptEntityDetection",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptEntities",
            "key": "entities",
            "schema": {
              "generatedName": "transcriptEntities",
              "value": {
                "generatedName": "TranscriptEntities",
                "description": "An array of results for the Entity Detection model, if it was enabled during the transcription request.\nSee [Entity detection](https://www.assemblyai.com/docs/Models/entity_detection) for more information.\n",
                "value": {
                  "description": "An array of results for the Entity Detection model, if it was enabled during the transcription request.\nSee [Entity detection](https://www.assemblyai.com/docs/Models/entity_detection) for more information.\n",
                  "value": {
                    "generatedName": "TranscriptEntitiesItem",
                    "schema": "Entity",
                    "source": {
                      "file": "../openapi.yml",
                      "type": "openapi"
                    },
                    "type": "reference"
                  },
                  "generatedName": "TranscriptEntities",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSpeechThreshold",
            "key": "speech_threshold",
            "schema": {
              "generatedName": "transcriptSpeechThreshold",
              "value": {
                "generatedName": "TranscriptSpeechThreshold",
                "description": "Defaults to null. Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive.\n",
                "value": {
                  "description": "Defaults to null. Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive.\n",
                  "schema": {
                    "type": "float"
                  },
                  "generatedName": "TranscriptSpeechThreshold",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptThrottled",
            "key": "throttled",
            "schema": {
              "generatedName": "transcriptThrottled",
              "value": {
                "generatedName": "TranscriptThrottled",
                "description": "True while a request is throttled and false when a request is no longer throttled",
                "value": {
                  "description": "True while a request is throttled and false when a request is no longer throttled",
                  "schema": {
                    "type": "boolean"
                  },
                  "generatedName": "TranscriptThrottled",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptError",
            "key": "error",
            "schema": {
              "generatedName": "transcriptError",
              "value": {
                "description": "Error message of why the transcript failed",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TranscriptError",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "A transcript object",
        "generatedName": "Transcript",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Chapter": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "chapterGist",
            "key": "gist",
            "schema": {
              "description": "An ultra-short summary (just a few words) of the content spoken in the chapter",
              "schema": {
                "type": "string"
              },
              "generatedName": "ChapterGist",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "chapterHeadline",
            "key": "headline",
            "schema": {
              "description": "A single sentence summary of the content spoken during the chapter",
              "schema": {
                "type": "string"
              },
              "generatedName": "ChapterHeadline",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "chapterSummary",
            "key": "summary",
            "schema": {
              "description": "A one paragraph summary of the content spoken during the chapter",
              "schema": {
                "type": "string"
              },
              "generatedName": "ChapterSummary",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "chapterStart",
            "key": "start",
            "schema": {
              "description": "The starting time, in milliseconds, for the chapter",
              "schema": {
                "type": "int"
              },
              "generatedName": "ChapterStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "chapterEnd",
            "key": "end",
            "schema": {
              "description": "The starting time, in milliseconds, for the chapter",
              "schema": {
                "type": "int"
              },
              "generatedName": "ChapterEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "Chapter of the audio file",
        "generatedName": "Chapter",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Entity": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "entityEntityType",
            "key": "entity_type",
            "schema": {
              "description": "The type of entity for the detected entity",
              "generatedName": "EntityEntityType",
              "schema": "EntityType",
              "source": {
                "file": "../openapi.yml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "entityText",
            "key": "text",
            "schema": {
              "description": "The text for the detected entity",
              "schema": {
                "type": "string"
              },
              "generatedName": "EntityText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "entityStart",
            "key": "start",
            "schema": {
              "description": "The starting time, in milliseconds, at which the detected entity appears in the audio file",
              "schema": {
                "type": "int"
              },
              "generatedName": "EntityStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "entityEnd",
            "key": "end",
            "schema": {
              "description": "The ending time, in milliseconds, for the detected entity in the audio file",
              "schema": {
                "type": "int"
              },
              "generatedName": "EntityEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "A detected entity",
        "generatedName": "Entity",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "EntityType": {
        "description": "The type of entity for the detected entity",
        "generatedName": "EntityType",
        "values": [
          {
            "generatedName": "banking_information",
            "value": "banking_information",
            "description": "Banking information, including account and routing numbers",
            "casing": {}
          },
          {
            "generatedName": "blood_type",
            "value": "blood_type",
            "description": "Blood type (e.g., O-, AB positive)",
            "casing": {}
          },
          {
            "generatedName": "credit_card_cvv",
            "value": "credit_card_cvv",
            "description": "Credit card verification code (e.g., CVV: 080)\n",
            "casing": {}
          },
          {
            "generatedName": "credit_card_expiration",
            "value": "credit_card_expiration",
            "description": "Expiration date of a credit card",
            "casing": {}
          },
          {
            "generatedName": "credit_card_number",
            "value": "credit_card_number",
            "description": "Credit card number",
            "casing": {}
          },
          {
            "generatedName": "date",
            "value": "date",
            "description": "Specific calendar date (e.g., December 18)",
            "casing": {}
          },
          {
            "generatedName": "date_of_birth",
            "value": "date_of_birth",
            "description": "Date of Birth (e.g., Date of Birth: March 7, 1961)\n",
            "casing": {}
          },
          {
            "generatedName": "drivers_license",
            "value": "drivers_license",
            "description": "Driver's license number (e.g., DL #356933-540)\n",
            "casing": {}
          },
          {
            "generatedName": "drug",
            "value": "drug",
            "description": "Medications, vitamins, or supplements (e.g., Advil, Acetaminophen, Panadol)",
            "casing": {}
          },
          {
            "generatedName": "email_address",
            "value": "email_address",
            "description": "Email address (e.g., support@assemblyai.com)",
            "casing": {}
          },
          {
            "generatedName": "event",
            "value": "event",
            "description": "Name of an event or holiday (e.g., Olympics, Yom Kippur)",
            "casing": {}
          },
          {
            "generatedName": "injury",
            "value": "injury",
            "description": "Bodily injury (e.g., I broke my arm, I have a sprained wrist)",
            "casing": {}
          },
          {
            "generatedName": "language",
            "value": "language",
            "description": "Name of a natural language (e.g., Spanish, French)",
            "casing": {}
          },
          {
            "generatedName": "location",
            "value": "location",
            "description": "Any location reference including mailing address, postal code, city, state, province, or country",
            "casing": {}
          },
          {
            "generatedName": "medical_condition",
            "value": "medical_condition",
            "description": "Name of a medical condition, disease, syndrome, deficit, or disorder (e.g., chronic fatigue syndrome, arrhythmia, depression)",
            "casing": {}
          },
          {
            "generatedName": "medical_process",
            "value": "medical_process",
            "description": "Medical process, including treatments, procedures, and tests (e.g., heart surgery, CT scan)",
            "casing": {}
          },
          {
            "generatedName": "money_amount",
            "value": "money_amount",
            "description": "Name and/or amount of currency (e.g., 15 pesos, $94.50)",
            "casing": {}
          },
          {
            "generatedName": "nationality",
            "value": "nationality",
            "description": "Terms indicating nationality, ethnicity, or race (e.g., American, Asian, Caucasian)",
            "casing": {}
          },
          {
            "generatedName": "occupation",
            "value": "occupation",
            "description": "Job title or profession (e.g., professor, actors, engineer, CPA)",
            "casing": {}
          },
          {
            "generatedName": "organization",
            "value": "organization",
            "description": "Name of an organization (e.g., CNN, McDonalds, University of Alaska)",
            "casing": {}
          },
          {
            "generatedName": "password",
            "value": "password",
            "description": "Account passwords, PINs, access keys, or verification answers (e.g., 27%alfalfa, temp1234, My mother's maiden name is Smith)",
            "casing": {}
          },
          {
            "generatedName": "person_age",
            "value": "person_age",
            "description": "Number associated with an age (e.g., 27, 75)",
            "casing": {}
          },
          {
            "generatedName": "person_name",
            "value": "person_name",
            "description": "Name of a person (e.g., Bob, Doug Jones)",
            "casing": {}
          },
          {
            "generatedName": "phone_number",
            "value": "phone_number",
            "description": "Telephone or fax number",
            "casing": {}
          },
          {
            "generatedName": "political_affiliation",
            "value": "political_affiliation",
            "description": "Terms referring to a political party, movement, or ideology (e.g., Republican, Liberal)",
            "casing": {}
          },
          {
            "generatedName": "religion",
            "value": "religion",
            "description": "Terms indicating religious affiliation (e.g., Hindu, Catholic)",
            "casing": {}
          },
          {
            "generatedName": "time",
            "value": "time",
            "description": "Expressions indicating clock times (e.g., 19:37:28, 10pm EST)",
            "casing": {}
          },
          {
            "generatedName": "url",
            "value": "url",
            "description": "Internet addresses (e.g., www.assemblyai.com)",
            "casing": {}
          },
          {
            "generatedName": "us_social_security_number",
            "value": "us_social_security_number",
            "description": "Social Security Number or equivalent",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "SentimentAnalysisResult": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "sentimentAnalysisResultText",
            "key": "text",
            "schema": {
              "description": "The transcript of the sentence",
              "schema": {
                "type": "string"
              },
              "generatedName": "SentimentAnalysisResultText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sentimentAnalysisResultStart",
            "key": "start",
            "schema": {
              "description": "The starting time, in milliseconds, of the sentence",
              "schema": {
                "type": "int"
              },
              "generatedName": "SentimentAnalysisResultStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sentimentAnalysisResultEnd",
            "key": "end",
            "schema": {
              "description": "The ending time, in milliseconds, of the sentence",
              "schema": {
                "type": "int"
              },
              "generatedName": "SentimentAnalysisResultEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sentimentAnalysisResultSentiment",
            "key": "sentiment",
            "schema": {
              "description": "The detected sentiment for the sentence, one of POSITIVE, NEUTRAL, NEGATIVE",
              "generatedName": "SentimentAnalysisResultSentiment",
              "schema": "Sentiment",
              "source": {
                "file": "../openapi.yml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "sentimentAnalysisResultConfidence",
            "key": "confidence",
            "schema": {
              "description": "The confidence score for the detected sentiment of the sentence, from 0 to 1",
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "SentimentAnalysisResultConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sentimentAnalysisResultSpeaker",
            "key": "speaker",
            "schema": {
              "generatedName": "sentimentAnalysisResultSpeaker",
              "value": {
                "generatedName": "SentimentAnalysisResultSpeaker",
                "description": "The speaker of the sentence if Speaker Diarization is enabled, else null",
                "value": {
                  "description": "The speaker of the sentence if Speaker Diarization is enabled, else null",
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "SentimentAnalysisResultSpeaker",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "The result of the sentiment analysis model.",
        "generatedName": "SentimentAnalysisResult",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "Sentiment": {
        "generatedName": "Sentiment",
        "values": [
          {
            "generatedName": "POSITIVE",
            "value": "POSITIVE",
            "casing": {}
          },
          {
            "generatedName": "NEUTRAL",
            "value": "NEUTRAL",
            "casing": {}
          },
          {
            "generatedName": "NEGATIVE",
            "value": "NEGATIVE",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "TopicDetectionResult": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "topicDetectionResultText",
            "key": "text",
            "schema": {
              "description": "The text in the transcript in which a detected topic occurs",
              "schema": {
                "type": "string"
              },
              "generatedName": "TopicDetectionResultText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "topicDetectionResultLabels",
            "key": "labels",
            "schema": {
              "generatedName": "topicDetectionResultLabels",
              "value": {
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "topicDetectionResultLabelsItemRelevance",
                      "key": "relevance",
                      "schema": {
                        "description": "How relevant the detected topic is of a detected topic",
                        "schema": {
                          "minimum": 0,
                          "maximum": 1,
                          "type": "double"
                        },
                        "generatedName": "TopicDetectionResultLabelsItemRelevance",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "topicDetectionResultLabelsItemLabel",
                      "key": "label",
                      "schema": {
                        "description": "The IAB taxonomical label for the label of the detected topic, where > denotes supertopic/subtopic relationship",
                        "schema": {
                          "type": "string"
                        },
                        "generatedName": "TopicDetectionResultLabelsItemLabel",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "generatedName": "TopicDetectionResultLabelsItem",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../openapi.yml",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "generatedName": "TopicDetectionResultLabels",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "topicDetectionResultTimestamp",
            "key": "timestamp",
            "schema": {
              "generatedName": "topicDetectionResultTimestamp",
              "value": {
                "generatedName": "TopicDetectionResultTimestamp",
                "schema": "Timestamp",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "THe result of the topic detection model.",
        "generatedName": "TopicDetectionResult",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "ContentSafetyLabel": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelLabel",
            "key": "label",
            "schema": {
              "description": "The label of the sensitive topic",
              "schema": {
                "type": "string"
              },
              "generatedName": "ContentSafetyLabelLabel",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelConfidence",
            "key": "confidence",
            "schema": {
              "description": "The confidence score for the topic being discussed, from 0 to 1",
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "ContentSafetyLabelConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelSeverity",
            "key": "severity",
            "schema": {
              "description": "How severely the topic is discussed in the section, from 0 to 1",
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "ContentSafetyLabelSeverity",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ContentSafetyLabel",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "ContentSafetyLabelResult": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelResultText",
            "key": "text",
            "schema": {
              "description": "The transcript of the section flagged by the Content Moderation model",
              "schema": {
                "type": "string"
              },
              "generatedName": "ContentSafetyLabelResultText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelResultLabels",
            "key": "labels",
            "schema": {
              "description": "An array of objects, one per sensitive topic that was detected in the section",
              "value": {
                "generatedName": "ContentSafetyLabelResultLabelsItem",
                "schema": "ContentSafetyLabel",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "ContentSafetyLabelResultLabels",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelResultSentencesIdxStart",
            "key": "sentences_idx_start",
            "schema": {
              "description": "The sentence index at which the section begins",
              "schema": {
                "type": "int"
              },
              "generatedName": "ContentSafetyLabelResultSentencesIdxStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelResultSentencesIdxEnd",
            "key": "sentences_idx_end",
            "schema": {
              "description": "The sentence index at which the section ends",
              "schema": {
                "type": "int"
              },
              "generatedName": "ContentSafetyLabelResultSentencesIdxEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelResultTimestamp",
            "key": "timestamp",
            "schema": {
              "description": "Timestamp information for the section",
              "generatedName": "ContentSafetyLabelResultTimestamp",
              "schema": "Timestamp",
              "source": {
                "file": "../openapi.yml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelResultSummary",
            "key": "summary",
            "schema": {
              "description": "A summary of the Content Moderation confidence results for the entire audio file",
              "key": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ContentSafetyLabelResultSummaryKey",
                "groupName": [],
                "type": "primitive"
              },
              "value": {
                "description": "A confidence score for the presence of the sensitive topic \"topic\" across the entire audio file",
                "schema": {
                  "minimum": 0,
                  "maximum": 1,
                  "type": "double"
                },
                "generatedName": "ContentSafetyLabelResultSummaryValue",
                "groupName": [],
                "type": "primitive"
              },
              "generatedName": "ContentSafetyLabelResultSummary",
              "groupName": [],
              "type": "map"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "contentSafetyLabelResultSeverityScoreSummary",
            "key": "severity_score_summary",
            "schema": {
              "description": "A summary of the Content Moderation severity results for the entire audio file",
              "key": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "ContentSafetyLabelResultSeverityScoreSummaryKey",
                "groupName": [],
                "type": "primitive"
              },
              "value": {
                "generatedName": "ContentSafetyLabelResultSeverityScoreSummaryValue",
                "schema": "SeverityScoreSummary",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "ContentSafetyLabelResultSeverityScoreSummary",
              "groupName": [],
              "type": "map"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ContentSafetyLabelResult",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "SeverityScoreSummary": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "severityScoreSummaryLow",
            "key": "low",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "SeverityScoreSummaryLow",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "severityScoreSummaryMedium",
            "key": "medium",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "SeverityScoreSummaryMedium",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "severityScoreSummaryHigh",
            "key": "high",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "SeverityScoreSummaryHigh",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "SeverityScoreSummary",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "AutoHighlightsResult": {
        "generatedName": "AutoHighlightsResult",
        "description": "An array of results for the Key Phrases model, if it was enabled during the transcription request.\nSee [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.\n",
        "value": {
          "allOf": [],
          "properties": [
            {
              "conflict": {},
              "generatedName": "autoHighlightsResultResults",
              "key": "results",
              "schema": {
                "description": "A temporally-sequential array of Key Phrases",
                "value": {
                  "generatedName": "AutoHighlightsResultResultsItem",
                  "schema": "AutoHighlightResult",
                  "source": {
                    "file": "../openapi.yml",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "generatedName": "AutoHighlightsResultResults",
                "groupName": [],
                "type": "array"
              },
              "audiences": []
            }
          ],
          "allOfPropertyConflicts": [],
          "description": "An array of results for the Key Phrases model, if it was enabled during the transcription request.\nSee [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.\n",
          "generatedName": "AutoHighlightsResult",
          "groupName": [],
          "additionalProperties": false,
          "source": {
            "file": "../openapi.yml",
            "type": "openapi"
          },
          "type": "object"
        },
        "groupName": [],
        "type": "nullable"
      },
      "AutoHighlightResult": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "autoHighlightResultCount",
            "key": "count",
            "schema": {
              "description": "The total number of times the key phrase appears in the audio file",
              "schema": {
                "type": "int"
              },
              "generatedName": "AutoHighlightResultCount",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "autoHighlightResultRank",
            "key": "rank",
            "schema": {
              "description": "The total relevancy to the overall audio file of this key phrase - a greater number means more relevant",
              "schema": {
                "type": "float"
              },
              "generatedName": "AutoHighlightResultRank",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "autoHighlightResultText",
            "key": "text",
            "schema": {
              "description": "The text itself of the key phrase",
              "schema": {
                "type": "string"
              },
              "generatedName": "AutoHighlightResultText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "autoHighlightResultTimestamps",
            "key": "timestamps",
            "schema": {
              "description": "The timestamp of the of the key phrase",
              "value": {
                "generatedName": "AutoHighlightResultTimestampsItem",
                "schema": "Timestamp",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "AutoHighlightResultTimestamps",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "AutoHighlightResult",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "TranscriptWord": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptWordConfidence",
            "key": "confidence",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "TranscriptWordConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWordStart",
            "key": "start",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptWordStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWordEnd",
            "key": "end",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptWordEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWordText",
            "key": "text",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptWordText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptWordSpeaker",
            "key": "speaker",
            "schema": {
              "generatedName": "transcriptWordSpeaker",
              "value": {
                "generatedName": "TranscriptWordSpeaker",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "TranscriptWordSpeaker",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TranscriptWord",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "TranscriptSentence": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptSentenceText",
            "key": "text",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptSentenceText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSentenceStart",
            "key": "start",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptSentenceStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSentenceEnd",
            "key": "end",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptSentenceEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSentenceConfidence",
            "key": "confidence",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "TranscriptSentenceConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptSentenceWords",
            "key": "words",
            "schema": {
              "value": {
                "generatedName": "TranscriptSentenceWordsItem",
                "schema": "TranscriptWord",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "TranscriptSentenceWords",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TranscriptSentence",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "SentencesResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "sentencesResponseId",
            "key": "id",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "SentencesResponseId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sentencesResponseConfidence",
            "key": "confidence",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "SentencesResponseConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sentencesResponseAudioDuration",
            "key": "audio_duration",
            "schema": {
              "schema": {
                "type": "double"
              },
              "generatedName": "SentencesResponseAudioDuration",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "sentencesResponseSentences",
            "key": "sentences",
            "schema": {
              "value": {
                "generatedName": "SentencesResponseSentencesItem",
                "schema": "TranscriptSentence",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "SentencesResponseSentences",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "SentencesResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "TranscriptParagraph": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptParagraphText",
            "key": "text",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptParagraphText",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptParagraphStart",
            "key": "start",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptParagraphStart",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptParagraphEnd",
            "key": "end",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "TranscriptParagraphEnd",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptParagraphConfidence",
            "key": "confidence",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "TranscriptParagraphConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptParagraphWords",
            "key": "words",
            "schema": {
              "value": {
                "generatedName": "TranscriptParagraphWordsItem",
                "schema": "TranscriptWord",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "TranscriptParagraphWords",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TranscriptParagraph",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "ParagraphsResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "paragraphsResponseId",
            "key": "id",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "ParagraphsResponseId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "paragraphsResponseConfidence",
            "key": "confidence",
            "schema": {
              "schema": {
                "minimum": 0,
                "maximum": 1,
                "type": "double"
              },
              "generatedName": "ParagraphsResponseConfidence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "paragraphsResponseAudioDuration",
            "key": "audio_duration",
            "schema": {
              "schema": {
                "type": "double"
              },
              "generatedName": "ParagraphsResponseAudioDuration",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "paragraphsResponseParagraphs",
            "key": "paragraphs",
            "schema": {
              "value": {
                "generatedName": "ParagraphsResponseParagraphsItem",
                "schema": "TranscriptParagraph",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "ParagraphsResponseParagraphs",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "ParagraphsResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "PageDetails": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "pageDetailsLimit",
            "key": "limit",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "PageDetailsLimit",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "pageDetailsResultCount",
            "key": "result_count",
            "schema": {
              "schema": {
                "type": "int"
              },
              "generatedName": "PageDetailsResultCount",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "pageDetailsCurrentUrl",
            "key": "current_url",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "PageDetailsCurrentUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "pageDetailsPrevUrl",
            "key": "prev_url",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "PageDetailsPrevUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "pageDetailsNextUrl",
            "key": "next_url",
            "schema": {
              "generatedName": "pageDetailsNextUrl",
              "value": {
                "generatedName": "PageDetailsNextUrl",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "PageDetailsNextUrl",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "PageDetails",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "TranscriptListParameters": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptListParametersLimit",
            "key": "limit",
            "schema": {
              "generatedName": "transcriptListParametersLimit",
              "value": {
                "description": "Maximum amount of transcripts to retrieve",
                "schema": {
                  "default": 10,
                  "type": "int64"
                },
                "generatedName": "TranscriptListParametersLimit",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptListParametersStatus",
            "key": "status",
            "schema": {
              "generatedName": "transcriptListParametersStatus",
              "value": {
                "description": "Filter by transcript status",
                "generatedName": "TranscriptListParametersStatus",
                "schema": "TranscriptStatus",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "transcriptListParametersCreatedOn",
            "key": "created_on",
            "schema": {
              "generatedName": "transcriptListParametersCreatedOn",
              "value": {
                "description": "Only get transcripts created on this date",
                "schema": {
                  "format": "date",
                  "type": "string"
                },
                "generatedName": "TranscriptListParametersCreatedOn",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptListParametersBeforeId",
            "key": "before_id",
            "schema": {
              "generatedName": "transcriptListParametersBeforeId",
              "value": {
                "description": "Get transcripts that were created before this transcript ID",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TranscriptListParametersBeforeId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptListParametersAfterId",
            "key": "after_id",
            "schema": {
              "generatedName": "transcriptListParametersAfterId",
              "value": {
                "description": "Get transcripts that were created after this transcript ID",
                "schema": {
                  "type": "string"
                },
                "generatedName": "TranscriptListParametersAfterId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptListParametersThrottledOnly",
            "key": "throttled_only",
            "schema": {
              "generatedName": "transcriptListParametersThrottledOnly",
              "value": {
                "description": "Only get throttled transcripts, overrides the status filter",
                "schema": {
                  "type": "boolean"
                },
                "generatedName": "TranscriptListParametersThrottledOnly",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TranscriptListParameters",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "TranscriptListItem": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptListItemId",
            "key": "id",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptListItemId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptListItemResourceUrl",
            "key": "resource_url",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptListItemResourceUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptListItemStatus",
            "key": "status",
            "schema": {
              "generatedName": "TranscriptListItemStatus",
              "schema": "TranscriptStatus",
              "source": {
                "file": "../openapi.yml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "transcriptListItemCreated",
            "key": "created",
            "schema": {
              "schema": {
                "type": "datetime"
              },
              "generatedName": "TranscriptListItemCreated",
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptListItemCompleted",
            "key": "completed",
            "schema": {
              "generatedName": "transcriptListItemCompleted",
              "value": {
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "TranscriptListItemCompleted",
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "transcriptListItemAudioUrl",
            "key": "audio_url",
            "schema": {
              "schema": {
                "type": "string"
              },
              "generatedName": "TranscriptListItemAudioUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TranscriptListItem",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "TranscriptList": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "transcriptListPageDetails",
            "key": "page_details",
            "schema": {
              "generatedName": "TranscriptListPageDetails",
              "schema": "PageDetails",
              "source": {
                "file": "../openapi.yml",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "transcriptListTranscripts",
            "key": "transcripts",
            "schema": {
              "value": {
                "generatedName": "TranscriptListTranscriptsItem",
                "schema": "TranscriptListItem",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "TranscriptListTranscripts",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "TranscriptList",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "UploadedFile": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "uploadedFileUploadUrl",
            "key": "upload_url",
            "schema": {
              "description": "A URL that points to your audio file, accessible only by AssemblyAI's servers",
              "schema": {
                "type": "string"
              },
              "generatedName": "UploadedFileUploadUrl",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "UploadedFile",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "CreateRealtimeTemporaryTokenParameters": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "createRealtimeTemporaryTokenParametersExpiresIn",
            "key": "expires_in",
            "schema": {
              "description": "The amount of time until the token expires in seconds.",
              "schema": {
                "minimum": 60,
                "type": "int"
              },
              "generatedName": "CreateRealtimeTemporaryTokenParametersExpiresIn",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "CreateRealtimeTemporaryTokenParameters",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "RealtimeTemporaryTokenResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "realtimeTemporaryTokenResponseToken",
            "key": "token",
            "schema": {
              "description": "The temporary authentication token for real-time transcription",
              "schema": {
                "type": "string"
              },
              "generatedName": "RealtimeTemporaryTokenResponseToken",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "RealtimeTemporaryTokenResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "AudioIntelligenceModelStatus": {
        "description": "Will be either success, or unavailable in the rare case that the model failed.",
        "generatedName": "AudioIntelligenceModelStatus",
        "values": [
          {
            "generatedName": "success",
            "value": "success",
            "casing": {}
          },
          {
            "generatedName": "unavailable",
            "value": "unavailable",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "PurgeLemurRequestDataResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "purgeLemurRequestDataResponseRequestId",
            "key": "request_id",
            "schema": {
              "description": "The ID of the LeMUR request",
              "schema": {
                "type": "string"
              },
              "generatedName": "PurgeLemurRequestDataResponseRequestId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "purgeLemurRequestDataResponseRequestIdToPurge",
            "key": "request_id_to_purge",
            "schema": {
              "description": "The ID of the deletion request of the LeMUR request",
              "schema": {
                "type": "string"
              },
              "generatedName": "PurgeLemurRequestDataResponseRequestIdToPurge",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "purgeLemurRequestDataResponseDeleted",
            "key": "deleted",
            "schema": {
              "description": "Whether the request data was deleted.",
              "schema": {
                "type": "boolean"
              },
              "generatedName": "PurgeLemurRequestDataResponseDeleted",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "PurgeLemurRequestDataResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurBaseResponse": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurBaseResponseRequestId",
            "key": "request_id",
            "schema": {
              "description": "The ID of the LeMUR request",
              "schema": {
                "type": "string"
              },
              "generatedName": "LemurBaseResponseRequestId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurBaseResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurSummaryResponse": {
        "allOf": [
          {
            "generatedName": "LemurBaseResponse",
            "schema": "LemurBaseResponse",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurSummaryResponseResponse",
            "key": "response",
            "schema": {
              "description": "The response generated by LeMUR.",
              "schema": {
                "type": "string"
              },
              "generatedName": "LemurSummaryResponseResponse",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurSummaryResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurQuestionAnswerResponse": {
        "allOf": [
          {
            "generatedName": "LemurBaseResponse",
            "schema": "LemurBaseResponse",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurQuestionAnswerResponseResponse",
            "key": "response",
            "schema": {
              "description": "The answers generated by LeMUR and their questions.",
              "value": {
                "generatedName": "LemurQuestionAnswerResponseResponseItem",
                "schema": "LemurQuestionAnswer",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "LemurQuestionAnswerResponseResponse",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurQuestionAnswerResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurQuestionAnswer": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurQuestionAnswerQuestion",
            "key": "question",
            "schema": {
              "description": "The question for LeMUR to answer.",
              "schema": {
                "type": "string"
              },
              "generatedName": "LemurQuestionAnswerQuestion",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "lemurQuestionAnswerAnswer",
            "key": "answer",
            "schema": {
              "description": "The answer generated by LeMUR.",
              "schema": {
                "type": "string"
              },
              "generatedName": "LemurQuestionAnswerAnswer",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "An answer generated by LeMUR and its question.",
        "generatedName": "LemurQuestionAnswer",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurActionItemsResponse": {
        "allOf": [
          {
            "generatedName": "LemurBaseResponse",
            "schema": "LemurBaseResponse",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurActionItemsResponseResponse",
            "key": "response",
            "schema": {
              "description": "The response generated by LeMUR.",
              "schema": {
                "type": "string"
              },
              "generatedName": "LemurActionItemsResponseResponse",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurActionItemsResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurTaskResponse": {
        "allOf": [
          {
            "generatedName": "LemurBaseResponse",
            "schema": "LemurBaseResponse",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurTaskResponseResponse",
            "key": "response",
            "schema": {
              "description": "The response generated by LeMUR.",
              "schema": {
                "type": "string"
              },
              "generatedName": "LemurTaskResponseResponse",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurTaskResponse",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurBaseParameters": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurBaseParametersTranscriptIds",
            "key": "transcript_ids",
            "schema": {
              "description": "A list of completed transcripts with text. Up to 100 files max, or 100 hours max. Whichever is lower.",
              "value": {
                "schema": {
                  "type": "string"
                },
                "generatedName": "LemurBaseParametersTranscriptIdsItem",
                "groupName": [],
                "type": "primitive"
              },
              "generatedName": "LemurBaseParametersTranscriptIds",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "lemurBaseParametersContext",
            "key": "context",
            "schema": {
              "generatedName": "lemurBaseParametersContext",
              "value": {
                "value": {
                  "description": "Context to provide the model. This can be a string or a free-form JSON value.",
                  "generatedName": "LemurBaseParametersContext",
                  "schemas": [
                    {
                      "schema": {
                        "type": "string"
                      },
                      "generatedName": "LemurBaseParametersContext",
                      "groupName": [],
                      "type": "primitive"
                    },
                    {
                      "key": {
                        "schema": {
                          "type": "string"
                        },
                        "generatedName": "LemurBaseParametersContextOneKey",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "value": {
                        "generatedName": "LemurBaseParametersContextOneValue",
                        "type": "unknown"
                      },
                      "generatedName": "LemurBaseParametersContextOne",
                      "groupName": [],
                      "type": "map"
                    }
                  ],
                  "groupName": [],
                  "source": {
                    "file": "../openapi.yml",
                    "type": "openapi"
                  },
                  "type": "undiscriminated"
                },
                "type": "oneOf"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "lemurBaseParametersFinalModel",
            "key": "final_model",
            "schema": {
              "generatedName": "lemurBaseParametersFinalModel",
              "value": {
                "generatedName": "LemurBaseParametersFinalModel",
                "schema": "LemurModel",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "lemurBaseParametersMaxOutputSize",
            "key": "max_output_size",
            "schema": {
              "generatedName": "lemurBaseParametersMaxOutputSize",
              "value": {
                "description": "Max output size in tokens. Up to 4000 allowed.",
                "schema": {
                  "type": "int"
                },
                "generatedName": "LemurBaseParametersMaxOutputSize",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "lemurBaseParametersTemperature",
            "key": "temperature",
            "schema": {
              "generatedName": "lemurBaseParametersTemperature",
              "value": {
                "description": "The temperature to use for the model.\nHigher values result in answers that are more creative, lower values are more conservative.\nCan be any value between 0.0 and 1.0 inclusive.\n",
                "schema": {
                  "type": "float"
                },
                "generatedName": "LemurBaseParametersTemperature",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurBaseParameters",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurSummaryParameters": {
        "allOf": [
          {
            "generatedName": "LemurBaseParameters",
            "schema": "LemurBaseParameters",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurSummaryParametersAnswerFormat",
            "key": "answer_format",
            "schema": {
              "generatedName": "lemurSummaryParametersAnswerFormat",
              "value": {
                "description": "How you want the summary to be returned. This can be any text. Examples: \"TLDR\", \"bullet points\"\n",
                "schema": {
                  "type": "string"
                },
                "generatedName": "LemurSummaryParametersAnswerFormat",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurSummaryParameters",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurQuestionAnswerParameters": {
        "allOf": [
          {
            "generatedName": "LemurBaseParameters",
            "schema": "LemurBaseParameters",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurQuestionAnswerParametersQuestions",
            "key": "questions",
            "schema": {
              "description": "A list of questions to ask.",
              "value": {
                "generatedName": "LemurQuestionAnswerParametersQuestionsItem",
                "schema": "LemurQuestion",
                "source": {
                  "file": "../openapi.yml",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "generatedName": "LemurQuestionAnswerParametersQuestions",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurQuestionAnswerParameters",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurQuestion": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurQuestionQuestion",
            "key": "question",
            "schema": {
              "description": "The question you wish to ask. For more complex questions use default model.",
              "schema": {
                "type": "string"
              },
              "generatedName": "LemurQuestionQuestion",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "lemurQuestionContext",
            "key": "context",
            "schema": {
              "generatedName": "lemurQuestionContext",
              "value": {
                "value": {
                  "description": "Any context about the transcripts you wish to provide. This can be a string, or free-form JSON.",
                  "generatedName": "LemurQuestionContext",
                  "schemas": [
                    {
                      "schema": {
                        "type": "string"
                      },
                      "generatedName": "LemurQuestionContext",
                      "groupName": [],
                      "type": "primitive"
                    },
                    {
                      "key": {
                        "schema": {
                          "type": "string"
                        },
                        "generatedName": "LemurQuestionContextOneKey",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "value": {
                        "generatedName": "LemurQuestionContextOneValue",
                        "type": "unknown"
                      },
                      "generatedName": "LemurQuestionContextOne",
                      "groupName": [],
                      "type": "map"
                    }
                  ],
                  "groupName": [],
                  "source": {
                    "file": "../openapi.yml",
                    "type": "openapi"
                  },
                  "type": "undiscriminated"
                },
                "type": "oneOf"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "lemurQuestionAnswerFormat",
            "key": "answer_format",
            "schema": {
              "generatedName": "lemurQuestionAnswerFormat",
              "value": {
                "description": "How you want the answer to be returned. This can be any text. Can't be used with answer_options. Examples: \"short sentence\", \"bullet points\"\n",
                "schema": {
                  "type": "string"
                },
                "generatedName": "LemurQuestionAnswerFormat",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "lemurQuestionAnswerOptions",
            "key": "answer_options",
            "schema": {
              "generatedName": "lemurQuestionAnswerOptions",
              "value": {
                "description": "What discrete options to return. Useful for precise responses. Can't be used with answer_format. Example: [\"Yes\", \"No\"]\n",
                "value": {
                  "schema": {
                    "type": "string"
                  },
                  "generatedName": "LemurQuestionAnswerOptionsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "LemurQuestionAnswerOptions",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurQuestion",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurActionItemsParameters": {
        "generatedName": "LemurActionItemsParameters",
        "schema": "LemurBaseParameters",
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "reference"
      },
      "LemurTaskParameters": {
        "allOf": [
          {
            "generatedName": "LemurBaseParameters",
            "schema": "LemurBaseParameters",
            "source": {
              "file": "../openapi.yml",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "lemurTaskParametersPrompt",
            "key": "prompt",
            "schema": {
              "description": "Your text to prompt the model to produce a desired output, including any context you want to pass into the model.",
              "schema": {
                "type": "string"
              },
              "generatedName": "LemurTaskParametersPrompt",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "LemurTaskParameters",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      },
      "LemurModel": {
        "description": "The model that is used for the final prompt after compression is performed (options: \"basic\" and \"default\").\n",
        "generatedName": "LemurModel",
        "values": [
          {
            "generatedName": "default",
            "value": "default",
            "casing": {}
          },
          {
            "generatedName": "basic",
            "value": "basic",
            "casing": {}
          }
        ],
        "groupName": [],
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "enum"
      },
      "Error": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "errorError",
            "key": "error",
            "schema": {
              "description": "Error message",
              "schema": {
                "type": "string"
              },
              "generatedName": "ErrorError",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "errorStatus",
            "key": "status",
            "schema": {
              "generatedName": "errorStatus",
              "value": {
                "value": {
                  "value": "error",
                  "type": "string"
                },
                "generatedName": "ErrorStatus",
                "groupName": [],
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "Error",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.yml",
          "type": "openapi"
        },
        "type": "object"
      }
    },
    "namespacedSchemas": {}
  },
  "variables": {},
  "nonRequestReferencedSchemas": {},
  "securitySchemes": {
    "ApiKey": {
      "headerName": "Authorization",
      "type": "header"
    }
  },
  "globalHeaders": [],
  "idempotencyHeaders": [],
  "groups": {}
}