{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "CreateAppRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreateAppRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "CreateBuildRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreateBuildRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "CreateBuildRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "CreateDeploymentRequestBadRequestError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "CreateDeploymentRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreateDeploymentRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "CreateLobbyRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreateLobbyRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "CreateLobbyRequestTooManyRequestsError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 429,
            "type": "string",
          },
          "CreateLobbyRequestUnauthorizedError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 401,
            "type": "string",
          },
          "CreateLobbyRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "CreateLocalLobbyRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreateLocalLobbyRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "CreateLocalLobbyRequestTooManyRequestsError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 429,
            "type": "string",
          },
          "CreateLocalLobbyRequestUnauthorizedError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 401,
            "type": "string",
          },
          "CreateLocalLobbyRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "CreatePrivateLobbyDeprecatedRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreatePrivateLobbyDeprecatedRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "CreatePrivateLobbyDeprecatedRequestTooManyRequestsError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 429,
            "type": "string",
          },
          "CreatePrivateLobbyDeprecatedRequestUnauthorizedError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 401,
            "type": "string",
          },
          "CreatePrivateLobbyDeprecatedRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "CreatePrivateLobbyRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreatePrivateLobbyRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "CreatePrivateLobbyRequestTooManyRequestsError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 429,
            "type": "string",
          },
          "CreatePrivateLobbyRequestUnauthorizedError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 401,
            "type": "string",
          },
          "CreatePrivateLobbyRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "CreatePublicLobbyDeprecatedRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreatePublicLobbyDeprecatedRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "CreatePublicLobbyDeprecatedRequestTooManyRequestsError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 429,
            "type": "string",
          },
          "CreatePublicLobbyDeprecatedRequestUnauthorizedError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 401,
            "type": "string",
          },
          "CreatePublicLobbyDeprecatedRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "CreatePublicLobbyRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreatePublicLobbyRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "CreatePublicLobbyRequestTooManyRequestsError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 429,
            "type": "string",
          },
          "CreatePublicLobbyRequestUnauthorizedError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 401,
            "type": "string",
          },
          "CreatePublicLobbyRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "CreateRoomRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "CreateRoomRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "DeleteAppRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "DeleteAppRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "DeleteBuildRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "DeleteBuildRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "DeleteBuildRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "DestroyRoomRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "DestroyRoomRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetActiveRoomsForProcessRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetAppInfoRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetBuildInfoRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetBuildsRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetConnectionInfoRequestBadRequestError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 400,
            "type": "string",
          },
          "GetConnectionInfoRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "GetConnectionInfoRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetDeploymentInfoRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetDeploymentsRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetInactiveRoomsForProcessRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetLobbyInfoRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetLogsForAppRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetLogsForDeploymentRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetLogsForProcessRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetMetricsRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetMetricsRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "GetProcessInfoRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetRoomInfoRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetRunningProcessesRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "GetStoppedProcessesRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "ListActivePublicLobbiesDeprecatedRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "ListActivePublicLobbiesDeprecatedRequestUnauthorizedError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 401,
            "type": "string",
          },
          "LoginAnonymousRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "LoginGoogleRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "LoginGoogleRequestUnauthorizedError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 401,
            "type": "string",
          },
          "LoginNicknameRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "RunBuildRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "RunBuildRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "SetLobbyStateRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "SetLobbyStateRequestUnprocessableEntityError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 422,
            "type": "string",
          },
          "SuspendRoomRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "SuspendRoomRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
          "UpdateAppRequestInternalServerError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 500,
            "type": "string",
          },
          "UpdateAppRequestNotFoundError": {
            "docs": "",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": "string",
              },
            ],
            "status-code": 404,
            "type": "string",
          },
        },
        "types": {
          "ActiveConnectionInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "host": "string",
              "port": "double",
              "roomId": "RoomId",
              "transportType": "TransportType",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AppConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "appName": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 32,
                  "minLength": undefined,
                  "pattern": "^[a-z0-9-]+$",
                },
              },
              "authConfiguration": "AppConfigAuthConfiguration",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AppConfigAuthConfiguration": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "anonymous": "optional<RecordStringNever>",
              "google": "optional<AppConfigAuthConfigurationGoogle>",
              "nickname": "optional<RecordStringNever>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AppConfigAuthConfigurationGoogle": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "clientId": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AppId": "string",
          "Application": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "appId": "string",
              "appName": "string",
              "appSecret": "string",
              "authConfiguration": "ApplicationAuthConfiguration",
              "createdAt": "datetime",
              "createdBy": "string",
              "deletedAt": "optional<datetime>",
              "deletedBy": "optional<string>",
              "orgId": "OrgId",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ApplicationAuthConfiguration": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "anonymous": "optional<RecordStringNever>",
              "google": "optional<ApplicationAuthConfigurationGoogle>",
              "nickname": "optional<RecordStringNever>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ApplicationAuthConfigurationGoogle": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "clientId": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ApplicationWithDeployment": {
            "docs": undefined,
            "extends": [
              "Application",
            ],
            "inline": undefined,
            "properties": {
              "deployment": "Deployment",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Build": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "appId": "AppId",
              "buildId": "BuildId",
              "createdAt": "datetime",
              "createdBy": "string",
              "deletedAt": "optional<datetime>",
              "finishedAt": "optional<datetime>",
              "imageSize": "double",
              "regionalContainerTags": "list<BuildRegionalContainerTagsItem>",
              "startedAt": "optional<datetime>",
              "status": "BuildStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BuildId": "double",
          "BuildRegionalContainerTagsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "containerTag": "string",
              "region": "Region",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "BuildStatus": {
            "enum": [
              "created",
              "running",
              "succeeded",
              "failed",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectionInfo": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "status",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": {
              "active": "ActiveConnectionInfo",
              "starting": "StartingConnectionInfo",
            },
          },
          "Deployment": {
            "docs": undefined,
            "extends": [
              "DeploymentConfig",
            ],
            "inline": undefined,
            "properties": {
              "appId": "AppId",
              "buildId": "BuildId",
              "createdAt": "datetime",
              "createdBy": "string",
              "deploymentId": "DeploymentId",
              "requestedCPU": "double",
              "requestedMemoryMB": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeploymentConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "containerPort": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 65535,
                  "min": 1,
                  "multipleOf": undefined,
                },
              },
              "env": "list<DeploymentConfigEnvItem>",
              "planName": "PlanName",
              "roomsPerProcess": {
                "type": "integer",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 10000,
                  "min": 1,
                  "multipleOf": undefined,
                },
              },
              "transportType": "TransportType",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeploymentConfigEnvItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "name": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                },
              },
              "value": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 5000,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeploymentId": "double",
          "DiscoveryResponse": "list<DiscoveryResponseItem>",
          "DiscoveryResponseItem": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "host": "string",
              "port": "double",
              "region": "Region",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Lobby": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "appId": "AppId",
              "createdAt": "datetime",
              "createdBy": "string",
              "initialConfig": "map<string, unknown>",
              "local": "boolean",
              "region": "Region",
              "roomId": "RoomId",
              "state": "optional<map<string, unknown>>",
              "visibility": "LobbyVisibility",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LobbyVisibility": {
            "enum": [
              "private",
              "public",
              "local",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "MetricName": {
            "enum": [
              "cpu",
              "memory",
              "rate_egress",
              "total_egress",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "MetricValue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "timestamp": "double",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "MetricsResponse": "RecordPartialMetricNameMetricValueArray",
          "OmitRoomAllocations": {
            "docs": "Construct a type with the properties of T except for those in type K.",
            "type": "PickRoomExcludeKeyofRoomAllocations",
          },
          "OrgId": "string",
          "PickRoomExcludeKeyofRoomAllocations": {
            "docs": "From T, pick a set of properties whose keys are in the union K",
            "inline": undefined,
            "properties": {
              "appId": "AppId",
              "currentAllocation": "optional<RoomAllocation>",
              "roomId": "RoomId",
              "status": "RoomStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PlanName": {
            "enum": [
              "tiny",
              "small",
              "medium",
              "large",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Process": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "activeConnections": "double",
              "appId": "AppId",
              "deploymentId": "DeploymentId",
              "draining": "boolean",
              "egressedBytes": "double",
              "host": "string",
              "idleSince": "optional<datetime>",
              "port": "double",
              "processId": "ProcessId",
              "region": "Region",
              "roomSlotsAvailable": "double",
              "roomsPerProcess": "double",
              "startedAt": "optional<datetime>",
              "startingAt": "datetime",
              "stoppingAt": "optional<datetime>",
              "terminatedAt": "optional<datetime>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ProcessId": "string",
          "ProcessWithRooms": {
            "docs": undefined,
            "extends": [
              "Process",
            ],
            "inline": undefined,
            "properties": {
              "rooms": "list<RoomWithoutAllocations>",
              "totalRooms": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RecordPartialMetricNameMetricValueArray": {
            "docs": "Construct a type with a set of properties K of type T",
            "inline": undefined,
            "properties": {
              "cpu": "optional<list<MetricValue>>",
              "memory": "optional<list<MetricValue>>",
              "rate_egress": "optional<list<MetricValue>>",
              "total_egress": "optional<list<MetricValue>>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RecordStringNever": {
            "docs": "Construct a type with a set of properties K of type T",
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Region": {
            "enum": [
              "Seattle",
              "Washington_DC",
              "Chicago",
              "London",
              "Frankfurt",
              "Mumbai",
              "Singapore",
              "Tokyo",
              "Sydney",
              "Sao_Paulo",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Room": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "allocations": "list<RoomAllocation>",
              "appId": "AppId",
              "currentAllocation": "optional<RoomAllocation>",
              "roomId": "RoomId",
              "status": "RoomStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoomAllocation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "processId": "ProcessId",
              "roomAllocationId": "RoomAllocationId",
              "scheduledAt": "datetime",
              "unscheduledAt": "optional<datetime>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoomAllocationId": "string",
          "RoomId": "string",
          "RoomStatus": {
            "enum": [
              "scheduling",
              "active",
              "suspended",
              "destroyed",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "RoomWithoutAllocations": "OmitRoomAllocations",
          "StartingConnectionInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "roomId": "RoomId",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "TailLines": {
            "type": "integer",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 10000,
              "min": 1,
              "multipleOf": undefined,
            },
          },
          "TransportType": {
            "enum": [
              "tcp",
              "udp",
              "tls",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "errors:
  CreateAppRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  CreateAppRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  UpdateAppRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  UpdateAppRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  GetAppInfoRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  DeleteAppRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  DeleteAppRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  LoginAnonymousRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  LoginNicknameRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  LoginGoogleRequestUnauthorizedError:
    status-code: 401
    type: string
    docs: ''
    examples:
      - value: string
  LoginGoogleRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetBuildsRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetBuildInfoRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreateBuildRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreateBuildRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  CreateBuildRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  RunBuildRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  RunBuildRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  DeleteBuildRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  DeleteBuildRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  DeleteBuildRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  GetDeploymentsRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetDeploymentInfoRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreateDeploymentRequestBadRequestError:
    status-code: 400
    type: string
    docs: ''
    examples:
      - value: string
  CreateDeploymentRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreateDeploymentRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyDeprecatedRequestUnauthorizedError:
    status-code: 401
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyDeprecatedRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyDeprecatedRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyDeprecatedRequestTooManyRequestsError:
    status-code: 429
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyDeprecatedRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyDeprecatedRequestUnauthorizedError:
    status-code: 401
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyDeprecatedRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyDeprecatedRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyDeprecatedRequestTooManyRequestsError:
    status-code: 429
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyDeprecatedRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  ListActivePublicLobbiesDeprecatedRequestUnauthorizedError:
    status-code: 401
    type: string
    docs: ''
    examples:
      - value: string
  ListActivePublicLobbiesDeprecatedRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyRequestUnauthorizedError:
    status-code: 401
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyRequestTooManyRequestsError:
    status-code: 429
    type: string
    docs: ''
    examples:
      - value: string
  CreatePrivateLobbyRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyRequestUnauthorizedError:
    status-code: 401
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyRequestTooManyRequestsError:
    status-code: 429
    type: string
    docs: ''
    examples:
      - value: string
  CreatePublicLobbyRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  CreateLocalLobbyRequestUnauthorizedError:
    status-code: 401
    type: string
    docs: ''
    examples:
      - value: string
  CreateLocalLobbyRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreateLocalLobbyRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  CreateLocalLobbyRequestTooManyRequestsError:
    status-code: 429
    type: string
    docs: ''
    examples:
      - value: string
  CreateLocalLobbyRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  CreateLobbyRequestUnauthorizedError:
    status-code: 401
    type: string
    docs: ''
    examples:
      - value: string
  CreateLobbyRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreateLobbyRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  CreateLobbyRequestTooManyRequestsError:
    status-code: 429
    type: string
    docs: ''
    examples:
      - value: string
  CreateLobbyRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  GetLobbyInfoRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  SetLobbyStateRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  SetLobbyStateRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  GetLogsForAppRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetLogsForProcessRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetLogsForDeploymentRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetMetricsRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetMetricsRequestUnprocessableEntityError:
    status-code: 422
    type: string
    docs: ''
    examples:
      - value: string
  GetRunningProcessesRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetStoppedProcessesRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetProcessInfoRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreateRoomRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  CreateRoomRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  GetRoomInfoRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetActiveRoomsForProcessRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetInactiveRoomsForProcessRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  DestroyRoomRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  DestroyRoomRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  SuspendRoomRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  SuspendRoomRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
  GetConnectionInfoRequestBadRequestError:
    status-code: 400
    type: string
    docs: ''
    examples:
      - value: string
  GetConnectionInfoRequestNotFoundError:
    status-code: 404
    type: string
    docs: ''
    examples:
      - value: string
  GetConnectionInfoRequestInternalServerError:
    status-code: 500
    type: string
    docs: ''
    examples:
      - value: string
types:
  RecordStringNever:
    docs: Construct a type with a set of properties K of type T
    properties: {}
    source:
      openapi: ../openapi.json
  OrgId: string
  ApplicationAuthConfigurationGoogle:
    properties:
      clientId: string
    source:
      openapi: ../openapi.json
    inline: true
  ApplicationAuthConfiguration:
    properties:
      google: optional<ApplicationAuthConfigurationGoogle>
      nickname: optional<RecordStringNever>
      anonymous: optional<RecordStringNever>
    source:
      openapi: ../openapi.json
    inline: true
  Application:
    properties:
      deletedBy: optional<string>
      deletedAt: optional<datetime>
      createdAt: datetime
      createdBy: string
      orgId: OrgId
      authConfiguration: ApplicationAuthConfiguration
      appSecret: string
      appId: string
      appName: string
    source:
      openapi: ../openapi.json
  TransportType:
    enum:
      - tcp
      - udp
      - tls
    source:
      openapi: ../openapi.json
  PlanName:
    enum:
      - tiny
      - small
      - medium
      - large
    source:
      openapi: ../openapi.json
  DeploymentConfigEnvItem:
    properties:
      value:
        type: string
        validation:
          maxLength: 5000
      name:
        type: string
        validation:
          pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
          minLength: 1
          maxLength: 100
    source:
      openapi: ../openapi.json
    inline: true
  DeploymentConfig:
    properties:
      env: list<DeploymentConfigEnvItem>
      roomsPerProcess:
        type: integer
        validation:
          min: 1
          max: 10000
      planName: PlanName
      transportType: TransportType
      containerPort:
        type: integer
        validation:
          min: 1
          max: 65535
    source:
      openapi: ../openapi.json
  AppId: string
  BuildId: double
  DeploymentId: double
  Deployment:
    properties:
      createdAt: datetime
      createdBy: string
      requestedMemoryMB: double
      requestedCPU: double
      deploymentId: DeploymentId
      buildId: BuildId
      appId: AppId
    extends:
      - DeploymentConfig
    source:
      openapi: ../openapi.json
  ApplicationWithDeployment:
    properties:
      deployment: Deployment
    extends:
      - Application
    source:
      openapi: ../openapi.json
  AppConfigAuthConfigurationGoogle:
    properties:
      clientId: string
    source:
      openapi: ../openapi.json
    inline: true
  AppConfigAuthConfiguration:
    properties:
      google: optional<AppConfigAuthConfigurationGoogle>
      nickname: optional<RecordStringNever>
      anonymous: optional<RecordStringNever>
    source:
      openapi: ../openapi.json
    inline: true
  AppConfig:
    properties:
      authConfiguration: AppConfigAuthConfiguration
      appName:
        type: string
        validation:
          pattern: ^[a-z0-9-]+$
          maxLength: 32
    source:
      openapi: ../openapi.json
  Region:
    enum:
      - Seattle
      - Washington_DC
      - Chicago
      - London
      - Frankfurt
      - Mumbai
      - Singapore
      - Tokyo
      - Sydney
      - Sao_Paulo
    source:
      openapi: ../openapi.json
  BuildRegionalContainerTagsItem:
    properties:
      containerTag: string
      region: Region
    source:
      openapi: ../openapi.json
    inline: true
  BuildStatus:
    enum:
      - created
      - running
      - succeeded
      - failed
    inline: true
    source:
      openapi: ../openapi.json
  Build:
    properties:
      regionalContainerTags: list<BuildRegionalContainerTagsItem>
      imageSize: double
      status: BuildStatus
      deletedAt: optional<datetime>
      finishedAt: optional<datetime>
      startedAt: optional<datetime>
      createdAt: datetime
      createdBy: string
      buildId: BuildId
      appId: AppId
    source:
      openapi: ../openapi.json
  DiscoveryResponseItem:
    properties:
      port: double
      host: string
      region: Region
    source:
      openapi: ../openapi.json
  DiscoveryResponse: list<DiscoveryResponseItem>
  RoomId: string
  LobbyVisibility:
    enum:
      - private
      - public
      - local
    inline: true
    source:
      openapi: ../openapi.json
  Lobby:
    properties:
      state: optional<map<string, unknown>>
      initialConfig: map<string, unknown>
      createdAt: datetime
      createdBy: string
      local: boolean
      visibility: LobbyVisibility
      region: Region
      roomId: RoomId
      appId: AppId
    source:
      openapi: ../openapi.json
  TailLines:
    type: integer
    validation:
      min: 1
      max: 10000
  ProcessId: string
  MetricValue:
    properties:
      value: double
      timestamp: double
    source:
      openapi: ../openapi.json
  RecordPartialMetricNameMetricValueArray:
    docs: Construct a type with a set of properties K of type T
    properties:
      cpu: optional<list<MetricValue>>
      memory: optional<list<MetricValue>>
      rate_egress: optional<list<MetricValue>>
      total_egress: optional<list<MetricValue>>
    source:
      openapi: ../openapi.json
  MetricsResponse: RecordPartialMetricNameMetricValueArray
  MetricName:
    enum:
      - cpu
      - memory
      - rate_egress
      - total_egress
    source:
      openapi: ../openapi.json
  Process:
    properties:
      egressedBytes: double
      idleSince: optional<datetime>
      activeConnections: double
      roomSlotsAvailable: double
      draining: boolean
      terminatedAt: optional<datetime>
      stoppingAt: optional<datetime>
      startedAt: optional<datetime>
      startingAt: datetime
      roomsPerProcess: double
      port: double
      host: string
      region: Region
      processId: ProcessId
      deploymentId: DeploymentId
      appId: AppId
    source:
      openapi: ../openapi.json
  RoomStatus:
    enum:
      - scheduling
      - active
      - suspended
      - destroyed
    source:
      openapi: ../openapi.json
  RoomAllocationId: string
  RoomAllocation:
    properties:
      unscheduledAt: optional<datetime>
      scheduledAt: datetime
      processId: ProcessId
      roomAllocationId: RoomAllocationId
    source:
      openapi: ../openapi.json
  PickRoomExcludeKeyofRoomAllocations:
    docs: From T, pick a set of properties whose keys are in the union K
    properties:
      appId: AppId
      roomId: RoomId
      status: RoomStatus
      currentAllocation: optional<RoomAllocation>
    source:
      openapi: ../openapi.json
  OmitRoomAllocations:
    type: PickRoomExcludeKeyofRoomAllocations
    docs: Construct a type with the properties of T except for those in type K.
  RoomWithoutAllocations: OmitRoomAllocations
  ProcessWithRooms:
    properties:
      rooms: list<RoomWithoutAllocations>
      totalRooms: double
    extends:
      - Process
    source:
      openapi: ../openapi.json
  Room:
    properties:
      currentAllocation: optional<RoomAllocation>
      status: RoomStatus
      allocations: list<RoomAllocation>
      roomId: RoomId
      appId: AppId
    source:
      openapi: ../openapi.json
  StartingConnectionInfo:
    properties:
      roomId: RoomId
    source:
      openapi: ../openapi.json
  ActiveConnectionInfo:
    properties:
      transportType: TransportType
      port: double
      host: string
      roomId: RoomId
    source:
      openapi: ../openapi.json
  ConnectionInfo:
    discriminant: status
    base-properties: {}
    union:
      starting: StartingConnectionInfo
      active: ActiveConnectionInfo
    source:
      openapi: ../openapi.json
",
    },
    "appV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "CreateApp": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.CreateAppRequestUnprocessableEntityError",
                "root.CreateAppRequestInternalServerError",
              ],
              "examples": [
                {
                  "request": {
                    "appName": "appName",
                    "authConfiguration": {},
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "appName": "appName",
                      "appSecret": "appSecret",
                      "authConfiguration": {
                        "google": {
                          "clientId": "clientId",
                        },
                      },
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "deletedAt": "2024-01-15T09:30:00Z",
                      "deletedBy": "deletedBy",
                      "orgId": "orgId",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/apps/v1/create",
              "request": {
                "body": "root.AppConfig",
                "content-type": "application/json",
              },
              "response": {
                "docs": "",
                "status-code": 201,
                "type": "root.Application",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "DeleteApp": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.DeleteAppRequestNotFoundError",
                "root.DeleteAppRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/apps/v1/delete/{appId}",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetAppInfo": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetAppInfoRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "appName": "appName",
                      "appSecret": "appSecret",
                      "authConfiguration": {
                        "google": {
                          "clientId": "clientId",
                        },
                      },
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "deletedAt": "2024-01-15T09:30:00Z",
                      "deletedBy": "deletedBy",
                      "orgId": "orgId",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/apps/v1/info/{appId}",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Application",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetApps": {
              "auth": true,
              "docs": undefined,
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "appId": "appId",
                        "appName": "appName",
                        "appSecret": "appSecret",
                        "authConfiguration": {
                          "google": {
                            "clientId": "clientId",
                          },
                        },
                        "createdAt": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "deletedAt": "2024-01-15T09:30:00Z",
                        "deletedBy": "deletedBy",
                        "deployment": {
                          "appId": "appId",
                          "buildId": 1.1,
                          "containerPort": 1,
                          "createdAt": "2024-01-15T09:30:00Z",
                          "createdBy": "createdBy",
                          "deploymentId": 1.1,
                          "env": [
                            {
                              "name": "name",
                              "value": "value",
                            },
                          ],
                          "planName": "tiny",
                          "requestedCPU": 1.1,
                          "requestedMemoryMB": 1.1,
                          "roomsPerProcess": 1,
                          "transportType": "tcp",
                        },
                        "orgId": "orgId",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/apps/v1/list",
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.ApplicationWithDeployment>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "UpdateApp": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.UpdateAppRequestNotFoundError",
                "root.UpdateAppRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "request": {
                    "appName": "appName",
                    "authConfiguration": {},
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "appName": "appName",
                      "appSecret": "appSecret",
                      "authConfiguration": {
                        "google": {
                          "clientId": "clientId",
                        },
                      },
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "deletedAt": "2024-01-15T09:30:00Z",
                      "deletedBy": "deletedBy",
                      "orgId": "orgId",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/apps/v1/update/{appId}",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "body": "root.AppConfig",
                "content-type": "application/json",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Application",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    GetApps:
      path: /apps/v1/list
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      response:
        docs: Ok
        type: list<root.ApplicationWithDeployment>
        status-code: 200
      examples:
        - response:
            body:
              - deletedBy: deletedBy
                deletedAt: '2024-01-15T09:30:00Z'
                createdAt: '2024-01-15T09:30:00Z'
                createdBy: createdBy
                orgId: orgId
                authConfiguration:
                  google:
                    clientId: clientId
                appSecret: appSecret
                appId: appId
                appName: appName
                deployment:
                  env:
                    - value: value
                      name: name
                  roomsPerProcess: 1
                  planName: tiny
                  transportType: tcp
                  containerPort: 1
                  createdAt: '2024-01-15T09:30:00Z'
                  createdBy: createdBy
                  requestedMemoryMB: 1.1
                  requestedCPU: 1.1
                  deploymentId: 1.1
                  buildId: 1.1
                  appId: appId
    CreateApp:
      path: /apps/v1/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      request:
        body: root.AppConfig
        content-type: application/json
      response:
        docs: ''
        type: root.Application
        status-code: 201
      errors:
        - root.CreateAppRequestUnprocessableEntityError
        - root.CreateAppRequestInternalServerError
      examples:
        - request:
            authConfiguration: {}
            appName: appName
          response:
            body:
              deletedBy: deletedBy
              deletedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              orgId: orgId
              authConfiguration:
                google:
                  clientId: clientId
              appSecret: appSecret
              appId: appId
              appName: appName
    UpdateApp:
      path: /apps/v1/update/{appId}
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        body: root.AppConfig
        content-type: application/json
      response:
        docs: Ok
        type: root.Application
        status-code: 200
      errors:
        - root.UpdateAppRequestNotFoundError
        - root.UpdateAppRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          request:
            authConfiguration: {}
            appName: appName
          response:
            body:
              deletedBy: deletedBy
              deletedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              orgId: orgId
              authConfiguration:
                google:
                  clientId: clientId
              appSecret: appSecret
              appId: appId
              appName: appName
    GetAppInfo:
      path: /apps/v1/info/{appId}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      response:
        docs: Ok
        type: root.Application
        status-code: 200
      errors:
        - root.GetAppInfoRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          response:
            body:
              deletedBy: deletedBy
              deletedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              orgId: orgId
              authConfiguration:
                google:
                  clientId: clientId
              appSecret: appSecret
              appId: appId
              appName: appName
    DeleteApp:
      path: /apps/v1/delete/{appId}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      errors:
        - root.DeleteAppRequestNotFoundError
        - root.DeleteAppRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
  source:
    openapi: ../openapi.json
",
    },
    "authV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "LoginAnonymous": {
              "auth": false,
              "docs": undefined,
              "errors": [
                "root.LoginAnonymousRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": {
                      "token": "token",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/auth/v1/{appId}/login/anonymous",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "LoginAnonymousResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "LoginGoogle": {
              "auth": false,
              "docs": undefined,
              "errors": [
                "root.LoginGoogleRequestUnauthorizedError",
                "root.LoginGoogleRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "request": {
                    "idToken": "idToken",
                  },
                  "response": {
                    "body": {
                      "token": "token",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/auth/v1/{appId}/login/google",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "body": {
                  "properties": {
                    "idToken": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LoginGoogleRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "LoginGoogleResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "LoginNickname": {
              "auth": false,
              "docs": undefined,
              "errors": [
                "root.LoginNicknameRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "request": {
                    "nickname": "nickname",
                  },
                  "response": {
                    "body": {
                      "token": "token",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/auth/v1/{appId}/login/nickname",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "body": {
                  "properties": {
                    "nickname": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LoginNicknameRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "LoginNicknameResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "LoginAnonymousResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "token": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LoginGoogleResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "token": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LoginNicknameResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "token": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  LoginAnonymousResponse:
    properties:
      token: string
    source:
      openapi: ../openapi.json
  LoginNicknameResponse:
    properties:
      token: string
    source:
      openapi: ../openapi.json
  LoginGoogleResponse:
    properties:
      token: string
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    LoginAnonymous:
      path: /auth/v1/{appId}/login/anonymous
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      response:
        docs: Ok
        type: LoginAnonymousResponse
        status-code: 200
      errors:
        - root.LoginAnonymousRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          response:
            body:
              token: token
    LoginNickname:
      path: /auth/v1/{appId}/login/nickname
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: LoginNicknameRequest
        body:
          properties:
            nickname: string
        content-type: application/json
      response:
        docs: Ok
        type: LoginNicknameResponse
        status-code: 200
      errors:
        - root.LoginNicknameRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          request:
            nickname: nickname
          response:
            body:
              token: token
    LoginGoogle:
      path: /auth/v1/{appId}/login/google
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: LoginGoogleRequest
        body:
          properties:
            idToken: string
        content-type: application/json
      response:
        docs: Ok
        type: LoginGoogleResponse
        status-code: 200
      errors:
        - root.LoginGoogleRequestUnauthorizedError
        - root.LoginGoogleRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          request:
            idToken: idToken
          response:
            body:
              token: token
  source:
    openapi: ../openapi.json
",
    },
    "buildV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "CreateBuild": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.CreateBuildRequestNotFoundError",
                "root.CreateBuildRequestUnprocessableEntityError",
                "root.CreateBuildRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "buildId": 1.1,
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "deletedAt": "2024-01-15T09:30:00Z",
                      "finishedAt": "2024-01-15T09:30:00Z",
                      "imageSize": 1.1,
                      "regionalContainerTags": [
                        {
                          "containerTag": "containerTag",
                          "region": "Seattle",
                        },
                      ],
                      "startedAt": "2024-01-15T09:30:00Z",
                      "status": "created",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/builds/v1/{appId}/create",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "response": {
                "docs": "",
                "status-code": 201,
                "type": "root.Build",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "DeleteBuild": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.DeleteBuildRequestNotFoundError",
                "root.DeleteBuildRequestUnprocessableEntityError",
                "root.DeleteBuildRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "buildId": 1.1,
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/builds/v1/{appId}/delete/{buildId}",
              "path-parameters": {
                "appId": "root.AppId",
                "buildId": "root.BuildId",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetBuildInfo": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetBuildInfoRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "buildId": 1.1,
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "buildId": 1.1,
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "deletedAt": "2024-01-15T09:30:00Z",
                      "finishedAt": "2024-01-15T09:30:00Z",
                      "imageSize": 1.1,
                      "regionalContainerTags": [
                        {
                          "containerTag": "containerTag",
                          "region": "Seattle",
                        },
                      ],
                      "startedAt": "2024-01-15T09:30:00Z",
                      "status": "created",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/builds/v1/{appId}/info/{buildId}",
              "path-parameters": {
                "appId": "root.AppId",
                "buildId": "root.BuildId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Build",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetBuilds": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetBuildsRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": [
                      {
                        "appId": "appId",
                        "buildId": 1.1,
                        "createdAt": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "deletedAt": "2024-01-15T09:30:00Z",
                        "finishedAt": "2024-01-15T09:30:00Z",
                        "imageSize": 1.1,
                        "regionalContainerTags": [
                          {
                            "containerTag": "containerTag",
                            "region": "Seattle",
                          },
                        ],
                        "startedAt": "2024-01-15T09:30:00Z",
                        "status": "created",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/builds/v1/{appId}/list",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.Build>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "RunBuild": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.RunBuildRequestNotFoundError",
                "root.RunBuildRequestInternalServerError",
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/builds/v1/{appId}/run/{buildId}",
              "path-parameters": {
                "appId": "root.AppId",
                "buildId": "root.BuildId",
              },
              "request": {
                "body": {
                  "properties": {
                    "file": "file",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "RunBuildRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    GetBuilds:
      path: /builds/v1/{appId}/list
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      response:
        docs: Ok
        type: list<root.Build>
        status-code: 200
      errors:
        - root.GetBuildsRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          response:
            body:
              - regionalContainerTags:
                  - containerTag: containerTag
                    region: Seattle
                imageSize: 1.1
                status: created
                deletedAt: '2024-01-15T09:30:00Z'
                finishedAt: '2024-01-15T09:30:00Z'
                startedAt: '2024-01-15T09:30:00Z'
                createdAt: '2024-01-15T09:30:00Z'
                createdBy: createdBy
                buildId: 1.1
                appId: appId
    GetBuildInfo:
      path: /builds/v1/{appId}/info/{buildId}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        buildId: root.BuildId
      response:
        docs: Ok
        type: root.Build
        status-code: 200
      errors:
        - root.GetBuildInfoRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
            buildId: 1.1
          response:
            body:
              regionalContainerTags:
                - containerTag: containerTag
                  region: Seattle
              imageSize: 1.1
              status: created
              deletedAt: '2024-01-15T09:30:00Z'
              finishedAt: '2024-01-15T09:30:00Z'
              startedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              buildId: 1.1
              appId: appId
    CreateBuild:
      path: /builds/v1/{appId}/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      response:
        docs: ''
        type: root.Build
        status-code: 201
      errors:
        - root.CreateBuildRequestNotFoundError
        - root.CreateBuildRequestUnprocessableEntityError
        - root.CreateBuildRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          response:
            body:
              regionalContainerTags:
                - containerTag: containerTag
                  region: Seattle
              imageSize: 1.1
              status: created
              deletedAt: '2024-01-15T09:30:00Z'
              finishedAt: '2024-01-15T09:30:00Z'
              startedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              buildId: 1.1
              appId: appId
    RunBuild:
      path: /builds/v1/{appId}/run/{buildId}
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        buildId: root.BuildId
      request:
        name: RunBuildRequest
        body:
          properties:
            file: file
        content-type: multipart/form-data
      response:
        docs: Ok
        type: file
        status-code: 200
      errors:
        - root.RunBuildRequestNotFoundError
        - root.RunBuildRequestInternalServerError
    DeleteBuild:
      path: /builds/v1/{appId}/delete/{buildId}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        buildId: root.BuildId
      errors:
        - root.DeleteBuildRequestNotFoundError
        - root.DeleteBuildRequestUnprocessableEntityError
        - root.DeleteBuildRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
            buildId: 1.1
  source:
    openapi: ../openapi.json
",
    },
    "deploymentV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "CreateDeployment": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.CreateDeploymentRequestBadRequestError",
                "root.CreateDeploymentRequestNotFoundError",
                "root.CreateDeploymentRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "buildId": 1.1,
                  },
                  "request": {
                    "containerPort": 1,
                    "env": [
                      {
                        "name": "name",
                        "value": "value",
                      },
                    ],
                    "planName": "tiny",
                    "roomsPerProcess": 1,
                    "transportType": "tcp",
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "buildId": 1.1,
                      "containerPort": 1,
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "deploymentId": 1.1,
                      "env": [
                        {
                          "name": "name",
                          "value": "value",
                        },
                      ],
                      "planName": "tiny",
                      "requestedCPU": 1.1,
                      "requestedMemoryMB": 1.1,
                      "roomsPerProcess": 1,
                      "transportType": "tcp",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/deployments/v1/{appId}/create/{buildId}",
              "path-parameters": {
                "appId": "root.AppId",
                "buildId": "root.BuildId",
              },
              "request": {
                "body": "root.DeploymentConfig",
                "content-type": "application/json",
              },
              "response": {
                "docs": "",
                "status-code": 201,
                "type": "root.Deployment",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetDeploymentInfo": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetDeploymentInfoRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "deploymentId": 1.1,
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "buildId": 1.1,
                      "containerPort": 1,
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "deploymentId": 1.1,
                      "env": [
                        {
                          "name": "name",
                          "value": "value",
                        },
                      ],
                      "planName": "tiny",
                      "requestedCPU": 1.1,
                      "requestedMemoryMB": 1.1,
                      "roomsPerProcess": 1,
                      "transportType": "tcp",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/deployments/v1/{appId}/info/{deploymentId}",
              "path-parameters": {
                "appId": "root.AppId",
                "deploymentId": "root.DeploymentId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Deployment",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetDeployments": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetDeploymentsRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": [
                      {
                        "appId": "appId",
                        "buildId": 1.1,
                        "containerPort": 1,
                        "createdAt": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "deploymentId": 1.1,
                        "env": [
                          {
                            "name": "name",
                            "value": "value",
                          },
                        ],
                        "planName": "tiny",
                        "requestedCPU": 1.1,
                        "requestedMemoryMB": 1.1,
                        "roomsPerProcess": 1,
                        "transportType": "tcp",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/deployments/v1/{appId}/list",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.Deployment>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    GetDeployments:
      path: /deployments/v1/{appId}/list
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      response:
        docs: Ok
        type: list<root.Deployment>
        status-code: 200
      errors:
        - root.GetDeploymentsRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          response:
            body:
              - env:
                  - value: value
                    name: name
                roomsPerProcess: 1
                planName: tiny
                transportType: tcp
                containerPort: 1
                createdAt: '2024-01-15T09:30:00Z'
                createdBy: createdBy
                requestedMemoryMB: 1.1
                requestedCPU: 1.1
                deploymentId: 1.1
                buildId: 1.1
                appId: appId
    GetDeploymentInfo:
      path: /deployments/v1/{appId}/info/{deploymentId}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        deploymentId: root.DeploymentId
      response:
        docs: Ok
        type: root.Deployment
        status-code: 200
      errors:
        - root.GetDeploymentInfoRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
            deploymentId: 1.1
          response:
            body:
              env:
                - value: value
                  name: name
              roomsPerProcess: 1
              planName: tiny
              transportType: tcp
              containerPort: 1
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              requestedMemoryMB: 1.1
              requestedCPU: 1.1
              deploymentId: 1.1
              buildId: 1.1
              appId: appId
    CreateDeployment:
      path: /deployments/v1/{appId}/create/{buildId}
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        buildId: root.BuildId
      request:
        body: root.DeploymentConfig
        content-type: application/json
      response:
        docs: ''
        type: root.Deployment
        status-code: 201
      errors:
        - root.CreateDeploymentRequestBadRequestError
        - root.CreateDeploymentRequestNotFoundError
        - root.CreateDeploymentRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
            buildId: 1.1
          request:
            env:
              - value: value
                name: name
            roomsPerProcess: 1
            planName: tiny
            transportType: tcp
            containerPort: 1
          response:
            body:
              env:
                - value: value
                  name: name
              roomsPerProcess: 1
              planName: tiny
              transportType: tcp
              containerPort: 1
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              requestedMemoryMB: 1.1
              requestedCPU: 1.1
              deploymentId: 1.1
              buildId: 1.1
              appId: appId
  source:
    openapi: ../openapi.json
",
    },
    "discoveryV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetPingServiceEndpoints": {
              "auth": false,
              "docs": undefined,
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "host": "host",
                        "port": 1.1,
                        "region": "Seattle",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/discovery/v1/ping",
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.DiscoveryResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    GetPingServiceEndpoints:
      path: /discovery/v1/ping
      method: GET
      auth: false
      source:
        openapi: ../openapi.json
      response:
        docs: Ok
        type: root.DiscoveryResponse
        status-code: 200
      examples:
        - response:
            body:
              - port: 1.1
                host: host
                region: Seattle
  source:
    openapi: ../openapi.json
",
    },
    "lobbyV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "CreatePrivateLobbyDeprecated": {
              "auth": false,
              "availability": "deprecated",
              "docs": undefined,
              "errors": [
                "root.CreatePrivateLobbyDeprecatedRequestUnauthorizedError",
                "root.CreatePrivateLobbyDeprecatedRequestNotFoundError",
                "root.CreatePrivateLobbyDeprecatedRequestUnprocessableEntityError",
                "root.CreatePrivateLobbyDeprecatedRequestTooManyRequestsError",
                "root.CreatePrivateLobbyDeprecatedRequestInternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Authorization": "Authorization",
                  },
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": "string",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/lobby/v1/{appId}/create/private",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "headers": {
                  "Authorization": {
                    "name": "authorization",
                    "type": "string",
                  },
                },
                "name": "CreatePrivateLobbyDeprecatedRequest",
                "query-parameters": {
                  "local": "optional<boolean>",
                  "region": "optional<root.Region>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.RoomId",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "CreatePublicLobbyDeprecated": {
              "auth": false,
              "availability": "deprecated",
              "docs": undefined,
              "errors": [
                "root.CreatePublicLobbyDeprecatedRequestUnauthorizedError",
                "root.CreatePublicLobbyDeprecatedRequestNotFoundError",
                "root.CreatePublicLobbyDeprecatedRequestUnprocessableEntityError",
                "root.CreatePublicLobbyDeprecatedRequestTooManyRequestsError",
                "root.CreatePublicLobbyDeprecatedRequestInternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Authorization": "Authorization",
                  },
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": "string",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/lobby/v1/{appId}/create/public",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "headers": {
                  "Authorization": {
                    "name": "authorization",
                    "type": "string",
                  },
                },
                "name": "CreatePublicLobbyDeprecatedRequest",
                "query-parameters": {
                  "local": "optional<boolean>",
                  "region": "optional<root.Region>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.RoomId",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "ListActivePublicLobbiesDeprecated": {
              "auth": false,
              "availability": "deprecated",
              "docs": undefined,
              "errors": [
                "root.ListActivePublicLobbiesDeprecatedRequestUnauthorizedError",
                "root.ListActivePublicLobbiesDeprecatedRequestNotFoundError",
              ],
              "examples": [
                {
                  "headers": {
                    "Authorization": "Authorization",
                  },
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": [
                      {
                        "appId": "appId",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "initialConfig": {
                          "key": "value",
                        },
                        "local": true,
                        "region": "Seattle",
                        "roomId": "roomId",
                        "state": {
                          "key": "value",
                        },
                        "visibility": "private",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/lobby/v1/{appId}/list",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "headers": {
                  "Authorization": {
                    "name": "authorization",
                    "type": "string",
                  },
                },
                "name": "ListActivePublicLobbiesDeprecatedRequest",
                "query-parameters": {
                  "local": "optional<boolean>",
                  "region": "optional<root.Region>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.Lobby>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    CreatePrivateLobbyDeprecated:
      path: /lobby/v1/{appId}/create/private
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: CreatePrivateLobbyDeprecatedRequest
        query-parameters:
          region: optional<root.Region>
          local: optional<boolean>
        headers:
          Authorization:
            type: string
            name: authorization
      response:
        docs: Ok
        type: root.RoomId
        status-code: 200
      availability: deprecated
      errors:
        - root.CreatePrivateLobbyDeprecatedRequestUnauthorizedError
        - root.CreatePrivateLobbyDeprecatedRequestNotFoundError
        - root.CreatePrivateLobbyDeprecatedRequestUnprocessableEntityError
        - root.CreatePrivateLobbyDeprecatedRequestTooManyRequestsError
        - root.CreatePrivateLobbyDeprecatedRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          headers:
            Authorization: Authorization
          response:
            body: string
    CreatePublicLobbyDeprecated:
      path: /lobby/v1/{appId}/create/public
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: CreatePublicLobbyDeprecatedRequest
        query-parameters:
          region: optional<root.Region>
          local: optional<boolean>
        headers:
          Authorization:
            type: string
            name: authorization
      response:
        docs: Ok
        type: root.RoomId
        status-code: 200
      availability: deprecated
      errors:
        - root.CreatePublicLobbyDeprecatedRequestUnauthorizedError
        - root.CreatePublicLobbyDeprecatedRequestNotFoundError
        - root.CreatePublicLobbyDeprecatedRequestUnprocessableEntityError
        - root.CreatePublicLobbyDeprecatedRequestTooManyRequestsError
        - root.CreatePublicLobbyDeprecatedRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          headers:
            Authorization: Authorization
          response:
            body: string
    ListActivePublicLobbiesDeprecated:
      path: /lobby/v1/{appId}/list
      method: GET
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: ListActivePublicLobbiesDeprecatedRequest
        query-parameters:
          local: optional<boolean>
          region: optional<root.Region>
        headers:
          Authorization:
            type: string
            name: authorization
      response:
        docs: Ok
        type: list<root.Lobby>
        status-code: 200
      availability: deprecated
      errors:
        - root.ListActivePublicLobbiesDeprecatedRequestUnauthorizedError
        - root.ListActivePublicLobbiesDeprecatedRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          headers:
            Authorization: Authorization
          response:
            body:
              - state:
                  key: value
                initialConfig:
                  key: value
                createdAt: '2024-01-15T09:30:00Z'
                createdBy: createdBy
                local: true
                visibility: private
                region: Seattle
                roomId: roomId
                appId: appId
  source:
    openapi: ../openapi.json
",
    },
    "lobbyV2.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "CreateLobby": {
              "auth": false,
              "docs": undefined,
              "errors": [
                "root.CreateLobbyRequestUnauthorizedError",
                "root.CreateLobbyRequestNotFoundError",
                "root.CreateLobbyRequestUnprocessableEntityError",
                "root.CreateLobbyRequestTooManyRequestsError",
                "root.CreateLobbyRequestInternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Authorization": "Authorization",
                  },
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "request": {
                    "initialConfig": {
                      "key": "value",
                    },
                    "region": "Seattle",
                    "visibility": "public",
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "initialConfig": {
                        "key": "value",
                      },
                      "local": true,
                      "region": "Seattle",
                      "roomId": "roomId",
                      "state": {
                        "key": "value",
                      },
                      "visibility": "private",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/lobby/v2/{appId}/create",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "body": {
                  "properties": {
                    "initialConfig": "map<string, unknown>",
                    "region": "root.Region",
                    "visibility": "CreateLobbyRequestVisibility",
                  },
                },
                "content-type": "application/json",
                "headers": {
                  "Authorization": {
                    "name": "authorization",
                    "type": "string",
                  },
                },
                "name": "CreateLobbyRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "roomId": "optional<root.RoomId>",
                },
              },
              "response": {
                "docs": "",
                "status-code": 201,
                "type": "root.Lobby",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "CreateLocalLobby": {
              "auth": false,
              "availability": "deprecated",
              "docs": undefined,
              "errors": [
                "root.CreateLocalLobbyRequestUnauthorizedError",
                "root.CreateLocalLobbyRequestNotFoundError",
                "root.CreateLocalLobbyRequestUnprocessableEntityError",
                "root.CreateLocalLobbyRequestTooManyRequestsError",
                "root.CreateLocalLobbyRequestInternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Authorization": "Authorization",
                  },
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "request": {
                    "initialConfig": {
                      "key": "value",
                    },
                    "region": "Seattle",
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "initialConfig": {
                        "key": "value",
                      },
                      "local": true,
                      "region": "Seattle",
                      "roomId": "roomId",
                      "state": {
                        "key": "value",
                      },
                      "visibility": "private",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/lobby/v2/{appId}/create/local",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "body": {
                  "properties": {
                    "initialConfig": "map<string, unknown>",
                    "region": "root.Region",
                  },
                },
                "content-type": "application/json",
                "headers": {
                  "Authorization": {
                    "name": "authorization",
                    "type": "string",
                  },
                },
                "name": "CreateLocalLobbyRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "roomId": "optional<root.RoomId>",
                },
              },
              "response": {
                "docs": "",
                "status-code": 201,
                "type": "root.Lobby",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "CreatePrivateLobby": {
              "auth": false,
              "availability": "deprecated",
              "docs": undefined,
              "errors": [
                "root.CreatePrivateLobbyRequestUnauthorizedError",
                "root.CreatePrivateLobbyRequestNotFoundError",
                "root.CreatePrivateLobbyRequestUnprocessableEntityError",
                "root.CreatePrivateLobbyRequestTooManyRequestsError",
                "root.CreatePrivateLobbyRequestInternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Authorization": "Authorization",
                  },
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "request": {
                    "initialConfig": {
                      "key": "value",
                    },
                    "region": "Seattle",
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "initialConfig": {
                        "key": "value",
                      },
                      "local": true,
                      "region": "Seattle",
                      "roomId": "roomId",
                      "state": {
                        "key": "value",
                      },
                      "visibility": "private",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/lobby/v2/{appId}/create/private",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "body": {
                  "properties": {
                    "initialConfig": "map<string, unknown>",
                    "region": "root.Region",
                  },
                },
                "content-type": "application/json",
                "headers": {
                  "Authorization": {
                    "name": "authorization",
                    "type": "string",
                  },
                },
                "name": "CreatePrivateLobbyRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "roomId": "optional<root.RoomId>",
                },
              },
              "response": {
                "docs": "",
                "status-code": 201,
                "type": "root.Lobby",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "CreatePublicLobby": {
              "auth": false,
              "availability": "deprecated",
              "docs": undefined,
              "errors": [
                "root.CreatePublicLobbyRequestUnauthorizedError",
                "root.CreatePublicLobbyRequestNotFoundError",
                "root.CreatePublicLobbyRequestUnprocessableEntityError",
                "root.CreatePublicLobbyRequestTooManyRequestsError",
                "root.CreatePublicLobbyRequestInternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Authorization": "Authorization",
                  },
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "request": {
                    "initialConfig": {
                      "key": "value",
                    },
                    "region": "Seattle",
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "initialConfig": {
                        "key": "value",
                      },
                      "local": true,
                      "region": "Seattle",
                      "roomId": "roomId",
                      "state": {
                        "key": "value",
                      },
                      "visibility": "private",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/lobby/v2/{appId}/create/public",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "body": {
                  "properties": {
                    "initialConfig": "map<string, unknown>",
                    "region": "root.Region",
                  },
                },
                "content-type": "application/json",
                "headers": {
                  "Authorization": {
                    "name": "authorization",
                    "type": "string",
                  },
                },
                "name": "CreatePublicLobbyRequest",
                "path-parameters": undefined,
                "query-parameters": {
                  "roomId": "optional<root.RoomId>",
                },
              },
              "response": {
                "docs": "",
                "status-code": 201,
                "type": "root.Lobby",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetLobbyInfo": {
              "auth": false,
              "docs": undefined,
              "errors": [
                "root.GetLobbyInfoRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "roomId": "roomId",
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "initialConfig": {
                        "key": "value",
                      },
                      "local": true,
                      "region": "Seattle",
                      "roomId": "roomId",
                      "state": {
                        "key": "value",
                      },
                      "visibility": "private",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/lobby/v2/{appId}/info/{roomId}",
              "path-parameters": {
                "appId": "root.AppId",
                "roomId": "root.RoomId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Lobby",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "ListActivePublicLobbies": {
              "auth": false,
              "docs": undefined,
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": [
                      {
                        "appId": "appId",
                        "createdAt": "2024-01-15T09:30:00Z",
                        "createdBy": "createdBy",
                        "initialConfig": {
                          "key": "value",
                        },
                        "local": true,
                        "region": "Seattle",
                        "roomId": "roomId",
                        "state": {
                          "key": "value",
                        },
                        "visibility": "private",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/lobby/v2/{appId}/list/public",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "name": "ListActivePublicLobbiesRequest",
                "query-parameters": {
                  "region": "optional<root.Region>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.Lobby>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "SetLobbyState": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.SetLobbyStateRequestNotFoundError",
                "root.SetLobbyStateRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "roomId": "roomId",
                  },
                  "request": {
                    "state": {
                      "key": "value",
                    },
                  },
                  "response": {
                    "body": {
                      "appId": "appId",
                      "createdAt": "2024-01-15T09:30:00Z",
                      "createdBy": "createdBy",
                      "initialConfig": {
                        "key": "value",
                      },
                      "local": true,
                      "region": "Seattle",
                      "roomId": "roomId",
                      "state": {
                        "key": "value",
                      },
                      "visibility": "private",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/lobby/v2/{appId}/setState/{roomId}",
              "path-parameters": {
                "appId": "root.AppId",
                "roomId": "root.RoomId",
              },
              "request": {
                "body": {
                  "properties": {
                    "state": "map<string, unknown>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SetLobbyStateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Lobby",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CreateLobbyRequestVisibility": {
            "enum": [
              "public",
              "private",
              "local",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    CreatePrivateLobby:
      path: /lobby/v2/{appId}/create/private
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: CreatePrivateLobbyRequest
        query-parameters:
          roomId: optional<root.RoomId>
        headers:
          Authorization:
            type: string
            name: authorization
        body:
          properties:
            initialConfig: map<string, unknown>
            region: root.Region
        content-type: application/json
      response:
        docs: ''
        type: root.Lobby
        status-code: 201
      availability: deprecated
      errors:
        - root.CreatePrivateLobbyRequestUnauthorizedError
        - root.CreatePrivateLobbyRequestNotFoundError
        - root.CreatePrivateLobbyRequestUnprocessableEntityError
        - root.CreatePrivateLobbyRequestTooManyRequestsError
        - root.CreatePrivateLobbyRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          headers:
            Authorization: Authorization
          request:
            initialConfig:
              key: value
            region: Seattle
          response:
            body:
              state:
                key: value
              initialConfig:
                key: value
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              local: true
              visibility: private
              region: Seattle
              roomId: roomId
              appId: appId
    CreatePublicLobby:
      path: /lobby/v2/{appId}/create/public
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: CreatePublicLobbyRequest
        query-parameters:
          roomId: optional<root.RoomId>
        headers:
          Authorization:
            type: string
            name: authorization
        body:
          properties:
            initialConfig: map<string, unknown>
            region: root.Region
        content-type: application/json
      response:
        docs: ''
        type: root.Lobby
        status-code: 201
      availability: deprecated
      errors:
        - root.CreatePublicLobbyRequestUnauthorizedError
        - root.CreatePublicLobbyRequestNotFoundError
        - root.CreatePublicLobbyRequestUnprocessableEntityError
        - root.CreatePublicLobbyRequestTooManyRequestsError
        - root.CreatePublicLobbyRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          headers:
            Authorization: Authorization
          request:
            initialConfig:
              key: value
            region: Seattle
          response:
            body:
              state:
                key: value
              initialConfig:
                key: value
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              local: true
              visibility: private
              region: Seattle
              roomId: roomId
              appId: appId
    CreateLocalLobby:
      path: /lobby/v2/{appId}/create/local
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: CreateLocalLobbyRequest
        query-parameters:
          roomId: optional<root.RoomId>
        headers:
          Authorization:
            type: string
            name: authorization
        body:
          properties:
            initialConfig: map<string, unknown>
            region: root.Region
        content-type: application/json
      response:
        docs: ''
        type: root.Lobby
        status-code: 201
      availability: deprecated
      errors:
        - root.CreateLocalLobbyRequestUnauthorizedError
        - root.CreateLocalLobbyRequestNotFoundError
        - root.CreateLocalLobbyRequestUnprocessableEntityError
        - root.CreateLocalLobbyRequestTooManyRequestsError
        - root.CreateLocalLobbyRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          headers:
            Authorization: Authorization
          request:
            initialConfig:
              key: value
            region: Seattle
          response:
            body:
              state:
                key: value
              initialConfig:
                key: value
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              local: true
              visibility: private
              region: Seattle
              roomId: roomId
              appId: appId
    CreateLobby:
      path: /lobby/v2/{appId}/create
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: CreateLobbyRequest
        query-parameters:
          roomId: optional<root.RoomId>
        headers:
          Authorization:
            type: string
            name: authorization
        body:
          properties:
            visibility: CreateLobbyRequestVisibility
            initialConfig: map<string, unknown>
            region: root.Region
        content-type: application/json
      response:
        docs: ''
        type: root.Lobby
        status-code: 201
      errors:
        - root.CreateLobbyRequestUnauthorizedError
        - root.CreateLobbyRequestNotFoundError
        - root.CreateLobbyRequestUnprocessableEntityError
        - root.CreateLobbyRequestTooManyRequestsError
        - root.CreateLobbyRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          headers:
            Authorization: Authorization
          request:
            visibility: public
            initialConfig:
              key: value
            region: Seattle
          response:
            body:
              state:
                key: value
              initialConfig:
                key: value
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              local: true
              visibility: private
              region: Seattle
              roomId: roomId
              appId: appId
    ListActivePublicLobbies:
      path: /lobby/v2/{appId}/list/public
      method: GET
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: ListActivePublicLobbiesRequest
        query-parameters:
          region: optional<root.Region>
      response:
        docs: Ok
        type: list<root.Lobby>
        status-code: 200
      examples:
        - path-parameters:
            appId: appId
          response:
            body:
              - state:
                  key: value
                initialConfig:
                  key: value
                createdAt: '2024-01-15T09:30:00Z'
                createdBy: createdBy
                local: true
                visibility: private
                region: Seattle
                roomId: roomId
                appId: appId
    GetLobbyInfo:
      path: /lobby/v2/{appId}/info/{roomId}
      method: GET
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        roomId: root.RoomId
      response:
        docs: Ok
        type: root.Lobby
        status-code: 200
      errors:
        - root.GetLobbyInfoRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
            roomId: roomId
          response:
            body:
              state:
                key: value
              initialConfig:
                key: value
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              local: true
              visibility: private
              region: Seattle
              roomId: roomId
              appId: appId
    SetLobbyState:
      path: /lobby/v2/{appId}/setState/{roomId}
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        roomId: root.RoomId
      request:
        name: SetLobbyStateRequest
        body:
          properties:
            state: map<string, unknown>
        content-type: application/json
      response:
        docs: Ok
        type: root.Lobby
        status-code: 200
      errors:
        - root.SetLobbyStateRequestNotFoundError
        - root.SetLobbyStateRequestUnprocessableEntityError
      examples:
        - path-parameters:
            appId: appId
            roomId: roomId
          request:
            state:
              key: value
          response:
            body:
              state:
                key: value
              initialConfig:
                key: value
              createdAt: '2024-01-15T09:30:00Z'
              createdBy: createdBy
              local: true
              visibility: private
              region: Seattle
              roomId: roomId
              appId: appId
  source:
    openapi: ../openapi.json
types:
  CreateLobbyRequestVisibility:
    enum:
      - public
      - private
      - local
    inline: true
    source:
      openapi: ../openapi.json
",
    },
    "logV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetLogsForApp": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetLogsForAppRequestNotFoundError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/logs/v1/{appId}/all",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "name": "GetLogsForAppRequest",
                "query-parameters": {
                  "follow": "optional<boolean>",
                  "region": "optional<root.Region>",
                  "tailLines": "optional<root.TailLines>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetLogsForDeployment": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetLogsForDeploymentRequestNotFoundError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/logs/v1/{appId}/deployment/{deploymentId}",
              "path-parameters": {
                "appId": "root.AppId",
                "deploymentId": "root.DeploymentId",
              },
              "request": {
                "name": "GetLogsForDeploymentRequest",
                "query-parameters": {
                  "follow": "optional<boolean>",
                  "tailLines": "optional<root.TailLines>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "text",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetLogsForProcess": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetLogsForProcessRequestNotFoundError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/logs/v1/{appId}/process/{processId}",
              "path-parameters": {
                "appId": "root.AppId",
                "processId": "root.ProcessId",
              },
              "request": {
                "name": "GetLogsForProcessRequest",
                "query-parameters": {
                  "follow": "optional<boolean>",
                  "tailLines": "optional<root.TailLines>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "file",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    GetLogsForApp:
      path: /logs/v1/{appId}/all
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: GetLogsForAppRequest
        query-parameters:
          follow: optional<boolean>
          tailLines: optional<root.TailLines>
          region: optional<root.Region>
      response:
        docs: Ok
        type: file
        status-code: 200
      errors:
        - root.GetLogsForAppRequestNotFoundError
    GetLogsForProcess:
      path: /logs/v1/{appId}/process/{processId}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        processId: root.ProcessId
      request:
        name: GetLogsForProcessRequest
        query-parameters:
          follow: optional<boolean>
          tailLines: optional<root.TailLines>
      response:
        docs: Ok
        type: file
        status-code: 200
      errors:
        - root.GetLogsForProcessRequestNotFoundError
    GetLogsForDeployment:
      path: /logs/v1/{appId}/deployment/{deploymentId}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        deploymentId: root.DeploymentId
      request:
        name: GetLogsForDeploymentRequest
        query-parameters:
          follow: optional<boolean>
          tailLines: optional<root.TailLines>
      response:
        docs: Ok
        type: text
        status-code: 200
      errors:
        - root.GetLogsForDeploymentRequestNotFoundError
  source:
    openapi: ../openapi.json
",
    },
    "metricsV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetMetrics": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetMetricsRequestNotFoundError",
                "root.GetMetricsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "processId": "processId",
                  },
                  "response": {
                    "body": {
                      "cpu": [
                        {
                          "timestamp": 1.1,
                          "value": 1.1,
                        },
                      ],
                      "memory": [
                        {
                          "timestamp": 1.1,
                          "value": 1.1,
                        },
                      ],
                      "rate_egress": [
                        {
                          "timestamp": 1.1,
                          "value": 1.1,
                        },
                      ],
                      "total_egress": [
                        {
                          "timestamp": 1.1,
                          "value": 1.1,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/metrics/v1/{appId}/process/{processId}",
              "path-parameters": {
                "appId": "root.AppId",
                "processId": "root.ProcessId",
              },
              "request": {
                "name": "GetMetricsRequest",
                "query-parameters": {
                  "end": "optional<integer>",
                  "metrics": {
                    "allow-multiple": true,
                    "type": "optional<root.MetricName>",
                  },
                  "start": "optional<integer>",
                  "step": "optional<integer>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.MetricsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    GetMetrics:
      path: /metrics/v1/{appId}/process/{processId}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        processId: root.ProcessId
      request:
        name: GetMetricsRequest
        query-parameters:
          metrics:
            type: optional<root.MetricName>
            allow-multiple: true
          end: optional<integer>
          start: optional<integer>
          step: optional<integer>
      response:
        docs: Ok
        type: root.MetricsResponse
        status-code: 200
      errors:
        - root.GetMetricsRequestNotFoundError
        - root.GetMetricsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            appId: appId
            processId: processId
          response:
            body:
              cpu:
                - value: 1.1
                  timestamp: 1.1
              memory:
                - value: 1.1
                  timestamp: 1.1
              rate_egress:
                - value: 1.1
                  timestamp: 1.1
              total_egress:
                - value: 1.1
                  timestamp: 1.1
  source:
    openapi: ../openapi.json
",
    },
    "processesV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "GetProcessInfo": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetProcessInfoRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "processId": "processId",
                  },
                  "response": {
                    "body": {
                      "activeConnections": 1.1,
                      "appId": "appId",
                      "deploymentId": 1.1,
                      "draining": true,
                      "egressedBytes": 1.1,
                      "host": "host",
                      "idleSince": "2024-01-15T09:30:00Z",
                      "port": 1.1,
                      "processId": "processId",
                      "region": "Seattle",
                      "roomSlotsAvailable": 1.1,
                      "roomsPerProcess": 1.1,
                      "startedAt": "2024-01-15T09:30:00Z",
                      "startingAt": "2024-01-15T09:30:00Z",
                      "stoppingAt": "2024-01-15T09:30:00Z",
                      "terminatedAt": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/processes/v1/{appId}/info/{processId}",
              "path-parameters": {
                "appId": "root.AppId",
                "processId": "root.ProcessId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Process",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetRunningProcesses": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetRunningProcessesRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": [
                      {
                        "activeConnections": 1.1,
                        "appId": "appId",
                        "deploymentId": 1.1,
                        "draining": true,
                        "egressedBytes": 1.1,
                        "host": "host",
                        "idleSince": "2024-01-15T09:30:00Z",
                        "port": 1.1,
                        "processId": "processId",
                        "region": "Seattle",
                        "roomSlotsAvailable": 1.1,
                        "rooms": [
                          {
                            "appId": "appId",
                            "roomId": "roomId",
                            "status": "scheduling",
                          },
                        ],
                        "roomsPerProcess": 1.1,
                        "startedAt": "2024-01-15T09:30:00Z",
                        "startingAt": "2024-01-15T09:30:00Z",
                        "stoppingAt": "2024-01-15T09:30:00Z",
                        "terminatedAt": "2024-01-15T09:30:00Z",
                        "totalRooms": 1.1,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/processes/v1/{appId}/list/running",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "name": "GetRunningProcessesRequest",
                "query-parameters": {
                  "region": "optional<root.Region>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.ProcessWithRooms>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetStoppedProcesses": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetStoppedProcessesRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "response": {
                    "body": [
                      {
                        "activeConnections": 1.1,
                        "appId": "appId",
                        "deploymentId": 1.1,
                        "draining": true,
                        "egressedBytes": 1.1,
                        "host": "host",
                        "idleSince": "2024-01-15T09:30:00Z",
                        "port": 1.1,
                        "processId": "processId",
                        "region": "Seattle",
                        "roomSlotsAvailable": 1.1,
                        "roomsPerProcess": 1.1,
                        "startedAt": "2024-01-15T09:30:00Z",
                        "startingAt": "2024-01-15T09:30:00Z",
                        "stoppingAt": "2024-01-15T09:30:00Z",
                        "terminatedAt": "2024-01-15T09:30:00Z",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/processes/v1/{appId}/list/stopped",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "name": "GetStoppedProcessesRequest",
                "query-parameters": {
                  "region": "optional<root.Region>",
                },
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.Process>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    GetRunningProcesses:
      path: /processes/v1/{appId}/list/running
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: GetRunningProcessesRequest
        query-parameters:
          region: optional<root.Region>
      response:
        docs: Ok
        type: list<root.ProcessWithRooms>
        status-code: 200
      errors:
        - root.GetRunningProcessesRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          response:
            body:
              - egressedBytes: 1.1
                idleSince: '2024-01-15T09:30:00Z'
                activeConnections: 1.1
                roomSlotsAvailable: 1.1
                draining: true
                terminatedAt: '2024-01-15T09:30:00Z'
                stoppingAt: '2024-01-15T09:30:00Z'
                startedAt: '2024-01-15T09:30:00Z'
                startingAt: '2024-01-15T09:30:00Z'
                roomsPerProcess: 1.1
                port: 1.1
                host: host
                region: Seattle
                processId: processId
                deploymentId: 1.1
                appId: appId
                rooms:
                  - appId: appId
                    roomId: roomId
                    status: scheduling
                totalRooms: 1.1
    GetStoppedProcesses:
      path: /processes/v1/{appId}/list/stopped
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: GetStoppedProcessesRequest
        query-parameters:
          region: optional<root.Region>
      response:
        docs: Ok
        type: list<root.Process>
        status-code: 200
      errors:
        - root.GetStoppedProcessesRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
          response:
            body:
              - egressedBytes: 1.1
                idleSince: '2024-01-15T09:30:00Z'
                activeConnections: 1.1
                roomSlotsAvailable: 1.1
                draining: true
                terminatedAt: '2024-01-15T09:30:00Z'
                stoppingAt: '2024-01-15T09:30:00Z'
                startedAt: '2024-01-15T09:30:00Z'
                startingAt: '2024-01-15T09:30:00Z'
                roomsPerProcess: 1.1
                port: 1.1
                host: host
                region: Seattle
                processId: processId
                deploymentId: 1.1
                appId: appId
    GetProcessInfo:
      path: /processes/v1/{appId}/info/{processId}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        processId: root.ProcessId
      response:
        docs: Ok
        type: root.Process
        status-code: 200
      errors:
        - root.GetProcessInfoRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
            processId: processId
          response:
            body:
              egressedBytes: 1.1
              idleSince: '2024-01-15T09:30:00Z'
              activeConnections: 1.1
              roomSlotsAvailable: 1.1
              draining: true
              terminatedAt: '2024-01-15T09:30:00Z'
              stoppingAt: '2024-01-15T09:30:00Z'
              startedAt: '2024-01-15T09:30:00Z'
              startingAt: '2024-01-15T09:30:00Z'
              roomsPerProcess: 1.1
              port: 1.1
              host: host
              region: Seattle
              processId: processId
              deploymentId: 1.1
              appId: appId
  source:
    openapi: ../openapi.json
",
    },
    "roomV1.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "CreateRoom": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.CreateRoomRequestNotFoundError",
                "root.CreateRoomRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                  },
                  "request": {
                    "region": "Seattle",
                  },
                  "response": {
                    "body": "string",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/rooms/v1/{appId}/create",
              "path-parameters": {
                "appId": "root.AppId",
              },
              "request": {
                "body": {
                  "properties": {
                    "region": "root.Region",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CreateRoomRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "",
                "status-code": 201,
                "type": "root.RoomId",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "DestroyRoom": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.DestroyRoomRequestNotFoundError",
                "root.DestroyRoomRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "roomId": "roomId",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/rooms/v1/{appId}/destroy/{roomId}",
              "path-parameters": {
                "appId": "root.AppId",
                "roomId": "root.RoomId",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetActiveRoomsForProcess": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetActiveRoomsForProcessRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "processId": "processId",
                  },
                  "response": {
                    "body": [
                      {
                        "appId": "appId",
                        "currentAllocation": {
                          "processId": "processId",
                          "roomAllocationId": "roomAllocationId",
                          "scheduledAt": "2024-01-15T09:30:00Z",
                          "unscheduledAt": "2024-01-15T09:30:00Z",
                        },
                        "roomId": "roomId",
                        "status": "scheduling",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/rooms/v1/{appId}/list/{processId}/active",
              "path-parameters": {
                "appId": "root.AppId",
                "processId": "root.ProcessId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.RoomWithoutAllocations>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetConnectionInfo": {
              "auth": false,
              "docs": undefined,
              "errors": [
                "root.GetConnectionInfoRequestBadRequestError",
                "root.GetConnectionInfoRequestNotFoundError",
                "root.GetConnectionInfoRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "roomId": "roomId",
                  },
                  "response": {
                    "body": {
                      "host": "string",
                      "port": 1.1,
                      "roomId": "string",
                      "status": "active",
                      "transportType": "tcp",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/rooms/v1/{appId}/connectioninfo/{roomId}",
              "path-parameters": {
                "appId": "root.AppId",
                "roomId": "root.RoomId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.ConnectionInfo",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetInactiveRoomsForProcess": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetInactiveRoomsForProcessRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "processId": "processId",
                  },
                  "response": {
                    "body": [
                      {
                        "appId": "appId",
                        "currentAllocation": {
                          "processId": "processId",
                          "roomAllocationId": "roomAllocationId",
                          "scheduledAt": "2024-01-15T09:30:00Z",
                          "unscheduledAt": "2024-01-15T09:30:00Z",
                        },
                        "roomId": "roomId",
                        "status": "scheduling",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/rooms/v1/{appId}/list/{processId}/inactive",
              "path-parameters": {
                "appId": "root.AppId",
                "processId": "root.ProcessId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "list<root.RoomWithoutAllocations>",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "GetRoomInfo": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.GetRoomInfoRequestNotFoundError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "roomId": "roomId",
                  },
                  "response": {
                    "body": {
                      "allocations": [
                        {
                          "processId": "processId",
                          "roomAllocationId": "roomAllocationId",
                          "scheduledAt": "2024-01-15T09:30:00Z",
                          "unscheduledAt": "2024-01-15T09:30:00Z",
                        },
                      ],
                      "appId": "appId",
                      "currentAllocation": {
                        "processId": "processId",
                        "roomAllocationId": "roomAllocationId",
                        "scheduledAt": "2024-01-15T09:30:00Z",
                        "unscheduledAt": "2024-01-15T09:30:00Z",
                      },
                      "roomId": "roomId",
                      "status": "scheduling",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/rooms/v1/{appId}/info/{roomId}",
              "path-parameters": {
                "appId": "root.AppId",
                "roomId": "root.RoomId",
              },
              "response": {
                "docs": "Ok",
                "status-code": 200,
                "type": "root.Room",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "SuspendRoom": {
              "auth": true,
              "docs": undefined,
              "errors": [
                "root.SuspendRoomRequestNotFoundError",
                "root.SuspendRoomRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "appId": "appId",
                    "roomId": "roomId",
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/rooms/v1/{appId}/suspend/{roomId}",
              "path-parameters": {
                "appId": "root.AppId",
                "roomId": "root.RoomId",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    CreateRoom:
      path: /rooms/v1/{appId}/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
      request:
        name: CreateRoomRequest
        body:
          properties:
            region: root.Region
        content-type: application/json
      response:
        docs: ''
        type: root.RoomId
        status-code: 201
      errors:
        - root.CreateRoomRequestNotFoundError
        - root.CreateRoomRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
          request:
            region: Seattle
          response:
            body: string
    GetRoomInfo:
      path: /rooms/v1/{appId}/info/{roomId}
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        roomId: root.RoomId
      response:
        docs: Ok
        type: root.Room
        status-code: 200
      errors:
        - root.GetRoomInfoRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
            roomId: roomId
          response:
            body:
              currentAllocation:
                unscheduledAt: '2024-01-15T09:30:00Z'
                scheduledAt: '2024-01-15T09:30:00Z'
                processId: processId
                roomAllocationId: roomAllocationId
              status: scheduling
              allocations:
                - unscheduledAt: '2024-01-15T09:30:00Z'
                  scheduledAt: '2024-01-15T09:30:00Z'
                  processId: processId
                  roomAllocationId: roomAllocationId
              roomId: roomId
              appId: appId
    GetActiveRoomsForProcess:
      path: /rooms/v1/{appId}/list/{processId}/active
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        processId: root.ProcessId
      response:
        docs: Ok
        type: list<root.RoomWithoutAllocations>
        status-code: 200
      errors:
        - root.GetActiveRoomsForProcessRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
            processId: processId
          response:
            body:
              - appId: appId
                roomId: roomId
                status: scheduling
                currentAllocation:
                  unscheduledAt: '2024-01-15T09:30:00Z'
                  scheduledAt: '2024-01-15T09:30:00Z'
                  processId: processId
                  roomAllocationId: roomAllocationId
    GetInactiveRoomsForProcess:
      path: /rooms/v1/{appId}/list/{processId}/inactive
      method: GET
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        processId: root.ProcessId
      response:
        docs: Ok
        type: list<root.RoomWithoutAllocations>
        status-code: 200
      errors:
        - root.GetInactiveRoomsForProcessRequestNotFoundError
      examples:
        - path-parameters:
            appId: appId
            processId: processId
          response:
            body:
              - appId: appId
                roomId: roomId
                status: scheduling
                currentAllocation:
                  unscheduledAt: '2024-01-15T09:30:00Z'
                  scheduledAt: '2024-01-15T09:30:00Z'
                  processId: processId
                  roomAllocationId: roomAllocationId
    DestroyRoom:
      path: /rooms/v1/{appId}/destroy/{roomId}
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        roomId: root.RoomId
      errors:
        - root.DestroyRoomRequestNotFoundError
        - root.DestroyRoomRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
            roomId: roomId
    SuspendRoom:
      path: /rooms/v1/{appId}/suspend/{roomId}
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        roomId: root.RoomId
      errors:
        - root.SuspendRoomRequestNotFoundError
        - root.SuspendRoomRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
            roomId: roomId
    GetConnectionInfo:
      path: /rooms/v1/{appId}/connectioninfo/{roomId}
      method: GET
      auth: false
      source:
        openapi: ../openapi.json
      path-parameters:
        appId: root.AppId
        roomId: root.RoomId
      response:
        docs: Ok
        type: root.ConnectionInfo
        status-code: 200
      errors:
        - root.GetConnectionInfoRequestBadRequestError
        - root.GetConnectionInfoRequestNotFoundError
        - root.GetConnectionInfoRequestInternalServerError
      examples:
        - path-parameters:
            appId: appId
            roomId: roomId
          response:
            body:
              status: active
              transportType: tcp
              port: 1.1
              host: string
              roomId: string
  source:
    openapi: ../openapi.json
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BearerAuthScheme",
      "auth-schemes": {
        "BearerAuthScheme": {
          "scheme": "bearer",
        },
      },
      "default-environment": "Default",
      "display-name": "Hathora Cloud API",
      "environments": {
        "Default": "https://api.hathora.dev",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Hathora Cloud API
environments:
  Default: https://api.hathora.dev
default-environment: Default
auth-schemes:
  BearerAuthScheme:
    scheme: bearer
auth: BearerAuthScheme
",
  },
}