{
  "asyncapi": "3.0.0",
  "info": {
    "title": "Real-Time Ambient Documentation",
    "version": "1.0.0",
    "description": "Live conversational transcript, fact extraction, and note generation for real-time medical interactions."
  },
  "servers": {
    "beta-eu": {
      "host": "api.beta-eu.corti.app",
      "protocol": "wss",
      "description": "Real-time WebSocket endpoint for interaction streams.",
      "externalDocs": {
        "url": "https://docs.corti.ai/workflows/ambient-rt"
      },
      "bindings": {
        "ws": {
          "method": "GET",
          "headers": {
            "type": "object",
            "properties": {}
          },
          "query": {
            "type": "object",
            "required": ["tenant-name"],
            "properties": {
              "tenant-name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "bindingVersion": "0.1.0"
        }
      },
      "variables": {
        "id": {
          "description": "Unique identifier for the interaction session."
        },
        "tenantName": {
          "description": "Customer-specific value"
        }
      }
    },
    "eu": {
      "host": "api.eu.corti.app",
      "protocol": "wss",
      "description": "Real-time WebSocket endpoint for interaction streams.",
      "externalDocs": {
        "url": "https://docs.corti.ai/workflows/ambient-rt"
      },
      "variables": {
        "id": {
          "description": "Unique identifier for the interaction session."
        },
        "tenantName": {
          "description": "Customer-specific value"
        }
      }
    },
    "us": {
      "host": "api.us.corti.app",
      "protocol": "wss",
      "description": "Real-time WebSocket endpoint for interaction streams.",
      "externalDocs": {
        "url": "https://docs.corti.ai/workflows/ambient-rt"
      },
      "variables": {
        "id": {
          "description": "Unique identifier for the interaction session."
        },
        "tenantName": {
          "description": "Customer-specific value"
        }
      }
    }
  },
  "channels": {
    "stream": {
      "title": "Title",
      "address": "/audio-bridge/v2/interactions/{id}/streams?tenant-name={tenantName}&token={token}",
      "servers": [
        {"$ref": "#/servers/beta-eu"},
        {"$ref": "#/servers/eu"},
        {"$ref": "#/servers/us"}
      ],
      "bindings": {
        "ws": {
          "method": "GET",
          "headers": {
            "type": "object",
            "properties": {}
          },
          "query": {
            "type": "object",
            "required": ["tenant-name"],
            "properties": {
              "tenant-name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "bindingVersion": "0.1.0"
        }
      },
      "description": "Channel for streaming real-time audio, transcripts, and fact updates during medical interactions.",
      "parameters": {
        "id": {
          "$ref": "#/components/parameters/id"
        },
        "token": {
          "$ref": "#/components/parameters/token"
        },
        "tenantName": {
          "$ref": "#/components/parameters/tenant-name"
        }
      },
      "messages": {
        "configuration": {
          "$ref": "#/components/messages/configuration"
        },
        "status": {
          "$ref": "#/components/messages/status"
        },
        "audioPacket": {
          "$ref": "#/components/messages/audioPacket"
        },
        "transcripts": {
          "$ref": "#/components/messages/transcripts"
        },
        "facts": {
          "$ref": "#/components/messages/facts"
        }
      }
    }
  },
  "operations": {
    "receiveConfig": {
      "action": "receive",
      "channel": {
        "$ref": "#/channels/stream"
      },
      "messages": [
        {
          "$ref": "#/channels/stream/messages/configuration"
        }
      ]
    },
    "sendStatus": {
      "action": "send",
      "channel": {
        "$ref": "#/channels/stream"
      },
      "messages": [
        {
          "$ref": "#/channels/stream/messages/status"
        }
      ]
    },
    "receiveAudio": {
      "action": "receive",
      "channel": {
        "$ref": "#/channels/stream"
      },
      "messages": [
        {
          "$ref": "#/channels/stream/messages/audioPacket"
        }
      ]
    },
    "sendTranscripts": {
      "action": "send",
      "channel": {
        "$ref": "#/channels/stream"
      },
      "messages": [
        {
          "$ref": "#/channels/stream/messages/transcripts"
        }
      ]
    },
    "sendFacts": {
      "action": "send",
      "channel": {
        "$ref": "#/channels/stream"
      },
      "messages": [
        {
          "$ref": "#/channels/stream/messages/facts"
        }
      ]
    }
  },
  "components": {
    "parameters": {
      "id": {
        "description": "Unique identifier for the interaction session."
      },
      "token": {
        "description": "Short-term token as per RFC 7519 (https://jwt.io)."
      },
      "tenant-name": {
        "description": "Unique identifier for the interaction session."
      }
    },
    "messages": {
      "configuration": {
        "title": "Stream Configuration",
        "description": "Setup configuration for the stream",
        "contentType": "application/json",
        "traits": [
          {
            "$ref": "#/components/messageTraits/commonHeaders"
          }
        ],
        "payload": {
          "$ref": "#/components/schemas/configuration"
        }
      },
      "status": {
        "title": "Status",
        "description": "Streaming status",
        "contentType": "application/json",
        "traits": [
          {
            "$ref": "#/components/messageTraits/commonHeaders"
          }
        ],
        "payload": {
          "$ref": "#/components/schemas/status"
        }
      },
      "audioPacket": {
        "title": "Audio packet",
        "description": "Send audio packet",
        "contentType": "application/octet-stream",
        "traits": [
          {
            "$ref": "#/components/messageTraits/commonHeaders"
          }
        ],
        "payload": {
          "$ref": "#/components/schemas/audioPacket"
        }
      },
      "transcripts": {
        "title": "Transcripts",
        "description": "Receive generated transcripts",
        "contentType": "application/json",
        "traits": [
          {
            "$ref": "#/components/messageTraits/commonHeaders"
          }
        ],
        "payload": {
          "$ref": "#/components/schemas/transcripts"
        }
      },
      "facts": {
        "title": "Facts",
        "description": "Receive generated facts",
        "contentType": "application/json",
        "traits": [
          {
            "$ref": "#/components/messageTraits/commonHeaders"
          }
        ],
        "payload": {
          "$ref": "#/components/schemas/facts"
        }
      },
      "endStream": {
        "title": "End Stream",
        "description": "Finish audio streaming",
        "traits": [
          {
            "$ref": "#/components/messageTraits/commonHeaders"
          }
        ],
        "contentType": "application/json",
        "payload": {
          "$ref": "#/components/schemas/endStream"
        }
      }
    },
    "schemas": {
      "transcripts": {
        "examples": [],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "transcript",
            "enum": [
              "transcript"
            ]
          },
          "data": {
            "type": "array",
            "minimum": 1,
            "items": {
              "$ref": "#/components/schemas/transcript"
            }
          }
        }
      },
      "endStream": {
        "examples": [],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "end",
            "enum": [
              "end"
            ]
          }
        }
      },
      "configParticipant": {
        "examples": [],
        "type": "object",
        "properties": {
          "channel": {
            "type": "integer"
          },
          "role": {
            "type": "string",
            "example": "patient",
            "enum": [
              "patient",
              "doctor",
              "multiple"
            ]
          }
        }
      },
      "transcript": {
        "examples": [],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "423382fe-2895-44b5-b33b-206b522a786b"
          },
          "transcript": {
            "type": "string",
            "example": "Hello doctor"
          },
          "final": {
            "type": "boolean"
          },
          "speakerId": {
            "type": "integer"
          },
          "participant": {
            "$ref": "#/components/schemas/transcriptParticipant"
          },
          "time": {
            "$ref": "#/components/schemas/transcriptTime"
          }
        }
      },
      "transcriptParticipant": {
        "examples": [],
        "type": "object",
        "properties": {
          "channel": {
            "type": "integer"
          }
        }
      },
      "transcriptTime": {
        "examples": [],
        "type": "object",
        "properties": {
          "start": {
            "type": "number"
          },
          "end": {
            "type": "number"
          }
        }
      },
      "facts": {
        "examples": [],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "facts",
            "enum": [
              "facts"
            ]
          },
          "data": {
            "type": "array",
            "minimum": 1,
            "items": {
              "$ref": "#/components/schemas/fact"
            }
          }
        }
      },
      "fact": {
        "examples": [],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0555b0aa-2341-4ae8-896a-f5b3fed97cf1"
          },
          "text": {
            "type": "string",
            "example": "diabetes"
          },
          "group": {
            "type": "string",
            "example": "diabetes group"
          },
          "groupId": {
            "type": "string",
            "example": "25fe5dc6-8a80-40e7-898e-94bba25e595a"
          },
          "isDiscarded": {
            "type": "boolean"
          },
          "source": {
            "type": "string",
            "example": "core"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "evidence": {
            "type": "array",
            "minimum": 0,
            "items": {
              "$ref": "#/components/schemas/evidence"
            }
          }
        }
      },
      "evidence": {
        "examples": [],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": ""
          },
          "reference": {
            "type": "string",
            "example": ""
          },
          "quote": {
            "type": "string",
            "example": ""
          }
        }
      },
      "document": {
        "examples": [],
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "example": "6895243d-64d6-4690-a4f7-911175b569bd"
          },
          "content": {
            "type": "string",
            "example": ""
          },
          "templateKey": {
            "type": "string",
            "example": "template-key"
          },
          "language": {
            "type": "string",
            "example": "en"
          }
        }
      },
      "audioPacket": {
        "examples": [],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "status": {
        "examples": [],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "CONFIG_ACCEPTED",
            "enum": [
              "CONFIG_ACCEPTED",
              "CONFIG_DENIED",
              "CONFIG_MISSING",
              "CONFIG_NOT_PROVIDED",
              "CONFIG_ALREADY_RECEIVED"
            ]
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "configMode": {
        "examples": [],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "facts",
              "documentation",
              "transcription"
            ]
          },
          "outputLocale": {
            "type": "string"
          },
          "templateId": {
            "type": "string"
          }
        }
      },
      "configTranscription": {
        "examples": [],
        "type": "object",
        "properties": {
          "primaryLanguage": {
            "type": "string",
            "enum": [
              "en",
              "en-us",
              "en-gb",
              "da",
              "se",
              "no",
              "de",
              "nl",
              "es",
              "it",
              "fr",
              "pt",
              "de-ch",
              "sv"
            ]
          },
          "isMultichannel": {
            "type": "boolean"
          },
          "isDiarization": {
            "type": "boolean"
          },
          "participants": {
            "type": "array",
            "minimum": 1,
            "items": {
              "$ref": "#/components/schemas/configParticipant"
            }
          },
          "model": {
            "type": "string",
            "enum": [
              "model1"
            ]
          }
        }
      },
      "configData": {
        "examples": [],
        "type": "object",
        "properties": {
          "transcription": {
            "$ref": "#/components/schemas/configTranscription"
          },
          "mode": {
            "$ref": "#/components/schemas/configMode"
          }
        }
      },
      "configuration": {
        "examples": [],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "config"
            ]
          },
          "configuration": {
            "$ref": "#/components/schemas/configData"
          }
        }
      }
    },
    "messageTraits": {
      "commonHeaders": {}
    }
  }
}