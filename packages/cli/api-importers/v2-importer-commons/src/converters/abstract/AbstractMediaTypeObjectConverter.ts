import { OpenAPIV3_1 } from "openapi-types";

import { TypeDeclaration, V2SchemaExamples } from "@fern-api/ir-sdk";

import { AbstractConverter, AbstractConverterContext } from "../..";
import { ExampleConverter } from "../ExampleConverter";
import { SchemaOrReferenceConverter } from "../schema";

export declare namespace AbstractMediaTypeObjectConverter {
    export interface Args extends AbstractConverter.AbstractArgs {
        group: string[];
        method: string;
    }

    export interface Output {
        examples?: Record<string, OpenAPIV3_1.ExampleObject>;
        inlinedTypes: Record<string, TypeDeclaration>;
    }
}

export interface MediaTypeObject extends SchemaOrReferenceConverter.Output {
    examples?: Record<string, OpenAPIV3_1.ExampleObject>;
}

export abstract class AbstractMediaTypeObjectConverter extends AbstractConverter<
    AbstractConverterContext<object>,
    AbstractMediaTypeObjectConverter.Output
> {
    protected readonly group: string[];
    protected readonly method: string;

    constructor({ context, breadcrumbs, group, method }: AbstractMediaTypeObjectConverter.Args) {
        super({ context, breadcrumbs });
        this.group = group;
        this.method = method;
    }

    abstract convert(): Promise<AbstractMediaTypeObjectConverter.Output | undefined>;

    protected async parseMediaTypeObject({
        mediaTypeObject,
        schemaId,
        contentType
    }: {
        mediaTypeObject: OpenAPIV3_1.MediaTypeObject | undefined;
        schemaId: string;
        contentType: string;
    }): Promise<MediaTypeObject | undefined> {
        if (mediaTypeObject == null) {
            return undefined;
        }
        if (mediaTypeObject.schema == null) {
            return undefined;
        }

        const schemaOrReferenceConverter = new SchemaOrReferenceConverter({
            context: this.context,
            breadcrumbs: [...this.breadcrumbs, "schema"],
            schemaOrReference: mediaTypeObject.schema,
            schemaIdOverride: schemaId
        });

        const convertedSchema = await schemaOrReferenceConverter.convert();
        if (convertedSchema == null) {
            return undefined;
        }

        const examples =
            mediaTypeObject.examples != null
                ? Object.fromEntries(
                      await Promise.all(
                          Object.entries(mediaTypeObject.examples).map(async ([key, example]) => [
                              key,
                              this.context.isReferenceObject(example)
                                  ? await this.context.resolveReference<OpenAPIV3_1.ExampleObject>(example)
                                  : example
                          ])
                      )
                  )
                : undefined;

        return { ...convertedSchema, examples };
    }

    protected async convertMediaTypeObjectExamples({
        mediaTypeObject
    }: {
        mediaTypeObject: OpenAPIV3_1.MediaTypeObject | undefined;
    }): Promise<V2SchemaExamples> {
        const v2Examples: V2SchemaExamples = {
            userSpecifiedExamples: {},
            autogeneratedExamples: {}
        };
        const schema = mediaTypeObject?.schema;
        const examples = this.context.getNamedExamplesFromMediaTypeObject({
            mediaTypeObject,
            breadcrumbs: this.breadcrumbs,
            defaultExampleName: `${[...this.group, this.method].join("_")}_example`
        });

        for (const [key, example] of examples) {
            const resolvedExample = await this.context.resolveExampleWithValue(example);
            if (resolvedExample != null) {
                if (schema != null) {
                    v2Examples.userSpecifiedExamples[key] = await this.generateOrValidateExample({
                        schema,
                        example: resolvedExample
                    });
                } else {
                    v2Examples.userSpecifiedExamples[key] = resolvedExample;
                }
            }
        }

        if (Object.keys(v2Examples.userSpecifiedExamples).length === 0 && schema != null) {
            const exampleName = `${[...this.group, this.method].join("_")}_example`;
            v2Examples.autogeneratedExamples[exampleName] = await this.generateOrValidateExample({
                schema,
                example: undefined,
                ignoreErrors: true
            });
        }

        return v2Examples;
    }

    protected async generateOrValidateExample({
        schema,
        ignoreErrors,
        example
    }: {
        schema: OpenAPIV3_1.SchemaObject | OpenAPIV3_1.ReferenceObject;
        example: unknown;
        ignoreErrors?: boolean;
    }): Promise<unknown> {
        const resolvedSchema = await this.context.resolveToSchema(schema);
        if (resolvedSchema == null) {
            return undefined;
        }
        const schemaExamples = this.context.getExamplesFromSchema({
            schema: resolvedSchema,
            breadcrumbs: this.breadcrumbs
        });
        // We prioritize MediaTypeObject examples over Schema examples, but will fall back to
        // Schema examples if MediaTypeObject examples are not present.
        const exampleConverter = new ExampleConverter({
            breadcrumbs: this.breadcrumbs,
            context: this.context,
            schema: resolvedSchema,
            example: example ?? schemaExamples[0]
        });
        const { validExample: convertedExample, errors } = await exampleConverter.convert();
        if (!ignoreErrors) {
            errors.forEach((error) => {
                this.context.errorCollector.collect({
                    message: error.message,
                    path: error.path
                });
            });
        }
        return convertedExample;
    }
}
