types:
  conjure-imports:
    commons: commons.yml
    problemV2: problemV2.yml
  definitions:
    default-package: com.birch.trace.submission
    objects:
      SubmissionId:
        alias: string
      ShareId:
        alias: string
      SubmissionRequest:
        union:
          initializeProblemRequest: InitializeProblemRequest
          initializeWorkspaceRequest: commons.EmptyObject
          submitV2: SubmitRequestV2
          workspaceSubmit: WorkspaceSubmitRequest
          stop: StopRequest
      InitializeProblemRequest:
        fields:
          problemId: commons.ProblemId
          problemVersion: optional<integer>
      SubmitRequestV2:
        fields:
          submissionId: SubmissionId
          language: commons.Language
          submissionFiles: list<SubmissionFileInfo>
          problemId: commons.ProblemId
          problemVersion: optional<integer>
          userId: optional<string>
      WorkspaceSubmitRequest:
        fields:
          submissionId: SubmissionId
          language: commons.Language
          submissionFiles: list<SubmissionFileInfo>
          userId: optional<string>
      SubmissionFileInfo:
        fields:
          directory: string
          filename: string
          contents: string
      SubmissionTypeEnum:
        values:
          - TEST
        docs: Keep in sync with SubmissionType.
      StopRequest:
        fields:
          submissionId: SubmissionId
      SubmissionResponse:
        union:
          serverInitialized: commons.EmptyObject
          problemInitialized: commons.ProblemId
          workspaceInitialized: commons.EmptyObject
          serverErrored: ExceptionInfo
          codeExecutionUpdate: CodeExecutionUpdate
          terminated: TerminatedResponse
      CodeExecutionUpdate:
        union:
          buildingExecutor:
            type: BuildingExecutorResponse
            docs: Statuses if an executor for the session isn't ready (Before RunningResponse).
          running:
            type: RunningResponse
            docs: Sent once a test submission is executing.
          errored:
            type: ErroredResponse
            docs: Sent if a submission cannot be run (i.e. Compile Error).
          stopped:
            type: StoppedResponse
            docs: Sent if a submission is stopped.
          graded:
            type: GradedResponse
            docs: Graded testcases without trace information.
          gradedV2:
            type: GradedResponseV2
            docs: Graded submission for v2 problems.
          workspaceRan:
            type: WorkspaceRanResponse
            docs: Workspace run without trace information.
          recording:
            type: RecordingResponseNotification
            docs: Gives progress about what is being recorded.
          recorded:
            type: RecordedResponseNotification
            docs: Graded testcases with trace information.
          invalidRequest:
            type: InvalidRequestResponse
            docs: Sent if an invalid request is sent for a submission.
          finished:
            type: FinishedResponse
            docs: Sent once a submission is graded and fully recorded.
      BuildingExecutorResponse:
        fields:
          submissionId: SubmissionId
          status: ExecutionSessionStatus
      RunningResponse:
        fields:
          submissionId: SubmissionId
          state: RunningSubmissionState
      RunningSubmissionState:
        values:
          - QUEUEING_SUBMISSION
          - KILLING_HISTORICAL_SUBMISSIONS
          - WRITING_SUBMISSION_TO_FILE
          - COMPILING_SUBMISSION
          - RUNNING_SUBMISSION
      ErroredResponse:
        fields:
          submissionId: SubmissionId
          errorInfo: ErrorInfo
      ErrorInfo:
        union:
          compileError: CompileError
          runtimeError:
            type: RuntimeError
            docs: |
              If the submission cannot be executed and throws a runtime error before getting to any of the testcases.
          internalError:
            type: InternalError
            docs: |
              If the trace backend encounters an unexpected error.
      CompileError:
        fields:
          message: string
      RuntimeError:
        fields:
          message: string
      InternalError:
        fields:
          exceptionInfo: ExceptionInfo
      StoppedResponse:
        fields:
          submissionId: SubmissionId
      WorkspaceRanResponse:
        fields:
          submissionId: SubmissionId
          runDetails: WorkspaceRunDetails
      WorkspaceRunDetails:
        fields:
          exceptionV2: optional<ExceptionV2>
          exception: optional<ExceptionInfo>
          stdout: string
      GradedResponse:
        fields:
          submissionId: SubmissionId
          testCases: map<string, TestCaseResultWithStdout>
      GradedResponseV2:
        fields:
          submissionId: SubmissionId
          testCases: map<problemV2.TestCaseId, TestCaseGrade>
      TestCaseGrade:
        union:
          hidden: TestCaseHiddenGrade
          nonHidden: TestCaseNonHiddenGrade
      TestCaseHiddenGrade:
        fields:
          passed: boolean
      TestCaseNonHiddenGrade:
        fields:
          passed: boolean
          actualResult: optional<commons.VariableValue>
          exception: optional<ExceptionV2>
          stdout: string
      RecordedResponseNotification:
        fields:
          submissionId: SubmissionId
          traceResponsesSize: integer
          testCaseId: optional<string>
      RecordingResponseNotification:
        fields:
          submissionId: SubmissionId
          testCaseId: optional<string>
          lineNumber: integer
          lightweightStackInfo: LightweightStackframeInformation
          tracedFile: optional<TracedFile>
      LightweightStackframeInformation:
        fields:
          numStackFrames: integer
          topStackFrameMethodName: string
      TestCaseResultWithStdout:
        fields:
          result: TestCaseResult
          stdout: string
      TestCaseResult:
        fields:
          expectedResult: commons.VariableValue
          actualResult: ActualResult
          passed: boolean
      ActualResult:
        union:
          value: commons.VariableValue
          exception: ExceptionInfo
          exceptionV2: ExceptionV2
      ExceptionV2:
        union:
          generic: ExceptionInfo
          timeout: commons.EmptyObject
      ExceptionInfo:
        fields:
          exceptionType: string
          exceptionMessage: string
          exceptionStacktrace: string
      InvalidRequestResponse:
        fields:
          request: SubmissionRequest
          cause: InvalidRequestCause
      InvalidRequestCause:
        union:
          submissionIdNotFound:
            type: SubmissionIdNotFound
            docs: The submission request references a submission id that doesn't exist.
          customTestCasesUnsupported:
            type: CustomTestCasesUnsupported
          unexpectedLanguage:
            type: UnexpectedLanguageError
            docs: The submission request was routed to an incorrect language executor.
      ExistingSubmissionExecuting:
        fields:
          submissionId: SubmissionId
      SubmissionIdNotFound:
        fields:
          missingSubmissionId: SubmissionId
      CustomTestCasesUnsupported:
        fields:
          problemId: commons.ProblemId
          submissionId: SubmissionId
      UnexpectedLanguageError:
        fields:
          expectedLanguage: commons.Language
          actualLanguage: commons.Language
      TerminatedResponse:
        fields: {}
      FinishedResponse:
        fields:
          submissionId: SubmissionId

      StdoutResponse:
        fields:
          submissionId: SubmissionId
          stdout: string
      StderrResponse:
        fields:
          submissionId: SubmissionId
          stderr: string
      TraceResponse:
        fields:
          submissionId: SubmissionId
          lineNumber: integer
          returnValue: optional<commons.DebugVariableValue>
          expressionLocation: optional<ExpressionLocation>
          stack: StackInformation
          stdout: optional<string>

      TraceResponseV2:
        fields:
          submissionId: SubmissionId
          lineNumber: integer
          file: TracedFile
          returnValue: optional<commons.DebugVariableValue>
          expressionLocation: optional<ExpressionLocation>
          stack: StackInformation
          stdout: optional<string>
      TracedFile:
        fields:
          filename: string
          directory: string

      ExpressionLocation:
        fields:
          start: integer
          offset: integer
      StackInformation:
        fields:
          numStackFrames: integer
          topStackFrame: optional<StackFrame>
      StackFrame:
        fields:
          methodName: string
          lineNumber: integer
          scopes: list<Scope>
      Scope:
        fields:
          variables: map<string, commons.DebugVariableValue>
      ExecutionSessionResponse:
        fields:
          sessionId: string
          executionSessionUrl: optional<string>
          language: commons.Language
          status: ExecutionSessionStatus
      ExecutionSessionStatus:
        values:
          - CREATING_CONTAINER #Requesting resources
          - PROVISIONING_CONTAINER #Downloading image
          - PENDING_CONTAINER #Setting up container
          - RUNNING_CONTAINER #Container running
          - LIVE_CONTAINER #Container can be pinged
          - FAILED_TO_LAUNCH #Container failed to launch

      SubmissionStateV2:
        fields:
          timeSubmitted: datetime
          language: commons.Language
          submissionFiles: list<SubmissionFileInfo>
          submissionStatus: SubmissionStatusV2
      SubmissionStatusV2:
        union:
          test: TestSubmissionStatusV2
          workspace: WorkspaceSubmissionStatusV2
      TestSubmissionStatusV2:
        fields:
          updates: list<TestSubmissionUpdate>
          problemId: commons.ProblemId
          problemVersion: integer
          problemInfo: problemV2.ProblemInfoV2
      WorkspaceSubmissionStatusV2:
        fields:
          updates: list<WorkspaceSubmissionUpdate>
      TestSubmissionUpdate:
        fields:
          updateTime: datetime
          updateInfo: TestSubmissionUpdateInfo
      TestSubmissionUpdateInfo:
        union:
          running: RunningSubmissionState
          stopped: commons.EmptyObject
          errored: ErrorInfo
          gradedTestCase: GradedTestCaseUpdate
          recordedTestCase: RecordedTestCaseUpdate
          finished: commons.EmptyObject
      WorkspaceSubmissionUpdate:
        fields:
          updateTime: datetime
          updateInfo: WorkspaceSubmissionUpdateInfo
      WorkspaceSubmissionUpdateInfo:
        union:
          running: RunningSubmissionState
          ran: WorkspaceRunDetails
          stopped: commons.EmptyObject
          traced: commons.EmptyObject
          tracedV2: WorkspaceTracedUpdate
          errored: ErrorInfo
          finished: commons.EmptyObject
      GradedTestCaseUpdate:
        fields:
          testCaseId: problemV2.TestCaseId
          grade: TestCaseGrade
      RecordedTestCaseUpdate:
        fields:
          testCaseId: problemV2.TestCaseId
          traceResponsesSize: integer
      WorkspaceTracedUpdate:
        fields:
          traceResponsesSize: integer

      SubmissionState:
        fields:
          timeSubmitted: optional<datetime>
          submission: string
          language: commons.Language
          submissionTypeState: SubmissionTypeState
      SubmissionTypeState:
        union:
          test: TestSubmissionState
          workspace: WorkspaceSubmissionState
      WorkspaceSubmissionState:
        fields:
          status: WorkspaceSubmissionStatus
      WorkspaceSubmissionStatus:
        union:
          stopped: commons.EmptyObject
          errored: ErrorInfo
          running: RunningSubmissionState
          ran: WorkspaceRunDetails
          traced: WorkspaceRunDetails
      TestSubmissionState:
        fields:
          problemId: commons.ProblemId
          defaultTestCases: list<commons.TestCase>
          customTestCases: list<commons.TestCase>
          status: TestSubmissionStatus
      TestSubmissionStatus:
        union:
          stopped: commons.EmptyObject
          errored: ErrorInfo
          running: RunningSubmissionState
          testCaseIdToState: map<string, SubmissionStatusForTestCase>
      SubmissionStatusForTestCase:
        union:
          graded: TestCaseResultWithStdout
          gradedV2: TestCaseGrade
          traced: TracedTestCase
      TracedTestCase:
        fields:
          result: TestCaseResultWithStdout
          traceResponsesSize: integer
      TraceResponsesPage:
        fields:
          offset:
            type: optional<integer>
            docs: |
              If present, use this to load subseqent pages.
              The offset is the id of the next trace response to load.
          traceResponses: list<TraceResponse>
      TraceResponsesPageV2:
        fields:
          offset:
            type: optional<integer>
            docs: |
              If present, use this to load subseqent pages.
              The offset is the id of the next trace response to load.
          traceResponses: list<TraceResponseV2>
      GetTraceResponsesPageRequest:
        fields:
          offset:
            type: optional<integer>
      WorkspaceStarterFilesResponse:
        fields:
          files: map<commons.Language, WorkspaceFiles>
      WorkspaceStarterFilesResponseV2:
        fields:
          filesByLanguage: map<commons.Language, problemV2.Files>
      WorkspaceFiles:
        fields:
          mainFile: commons.FileInfo
          readOnlyFiles: list<commons.FileInfo>

      ExecutionSessionsState:
        fields:
          states: map<string, ExecutionSessionState>
          numWarmingInstances: optional<integer>
          warmingSessionIds: list<string>
      ExecutionSessionState:
        fields:
          lastTimeContacted: optional<string>
          sessionId: string
          isWarmInstance: boolean
          awsTaskId: optional<string>
          language: commons.Language
          status: ExecutionSessionStatus

services:
  ExecutionSesssionManagementService:
   name: Responsible for spinning up and spinning down execution.
   package: com.birch.trace.session
   base-path: /sessions
   endpoints:

     createExecutionSession:
       docs: Returns sessionId and execution server URL for session. Spins up server.
       http: POST /create-session/{language}
       args:
         language: commons.Language
       returns: ExecutionSessionResponse

     getExecutionSession:
       docs: Returns execution server URL for session. Returns empty if session isn't registered.
       http: GET /{sessionId}
       args:
         sessionId: string
       returns: optional<ExecutionSessionResponse>

     stopExecutionSession:
       docs: Stops execution session. #TODO: only an admin should be able to trigger this
       http: DELETE /stop/{sessionId}
       args:
         sessionId: string

     getExecutionSessionsState:
       http: GET /execution-sessions-state
       returns: ExecutionSessionsState

  SubmissionInfoService:
   name: Responsible for serving information about submissions
   package: com.birch.trace.submission
   base-path: /submissions
   endpoints:

     getSubmissionState:
       docs: Returns information about the submission
       http: GET /{submissionId}
       args:
         submissionId: SubmissionId
       returns: SubmissionState

     getSubmissionStateV2:
       docs: Returns information about submission for problem V2
       http: GET /v2/{submissionId}
       args:
         submissionId: SubmissionId
       returns: SubmissionStateV2

     getTraceResponsesPage:
       docs: Returns traces for the submission and test case
       http: POST /trace-respose/{submissionId}/testCase/{testCaseId}
       args:
         submissionId: SubmissionId
         testCaseId: string
         request: GetTraceResponsesPageRequest
       returns: TraceResponsesPage

     getTraceResponsesV2Page:
       docs: Returns traces for the submission and test case
       http: POST /trace-response-v2/{submissionId}/testCase/{testCaseId}
       args:
         submissionId: SubmissionId
         testCaseId: problemV2.TestCaseId
         request: GetTraceResponsesPageRequest
       returns: TraceResponsesPageV2

     getTraceResponsesPageForWorkspace:
       docs: Returns traces for the workspace
       http: POST /workspace-trace-response/{submissionId}
       args:
         submissionId: SubmissionId
         request: GetTraceResponsesPageRequest
       returns: TraceResponsesPage

     getTraceResponsesV2PageForWorkspace:
       docs: Returns traces for the submission and test case
       http: POST /workspace-trace-response-v2/{submissionId}
       args:
         submissionId: SubmissionId
         request: GetTraceResponsesPageRequest
       returns: TraceResponsesPageV2

  WorkspaceInfoService:
    name: Workspace Info Service
    package: com.birch.trace.workspace
    base-path: /workspace
    endpoints:

      getWorkspaceStarterFiles:
        docs: Returns starter files for workspace
        http: GET /get-workspace-starter-files
        returns: WorkspaceStarterFilesResponse

      getWorkspaceStarterFilesV2:
        docs: Returns starter files for workspace
        http: GET /get-workspace-starter-files-v2
        returns: WorkspaceStarterFilesResponseV2










